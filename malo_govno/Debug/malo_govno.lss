
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000021ae  00002242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080011c  0080011c  0000225e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a70  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000943  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c1  00000000  00000000  000048cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  0000618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a3  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d2  00000000  00000000  00007157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c1 c1       	rjmp	.+898    	; 0x3cc <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee ea       	ldi	r30, 0xAE	; 174
      a8:	f1 e2       	ldi	r31, 0x21	; 33
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 36       	cpi	r26, 0x63	; 99
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"


int main()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	6e 97       	sbiw	r28, 0x1e	; 30
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;	
      e6:	1a 82       	std	Y+2, r1	; 0x02
      e8:	19 82       	std	Y+1, r1	; 0x01
	
	system_init();
      ea:	0e 94 41 0b 	call	0x1682	; 0x1682 <system_init>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	aa e7       	ldi	r26, 0x7A	; 122
      f4:	b4 e4       	ldi	r27, 0x44	; 68
      f6:	8b 83       	std	Y+3, r24	; 0x03
      f8:	9c 83       	std	Y+4, r25	; 0x04
      fa:	ad 83       	std	Y+5, r26	; 0x05
      fc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e4       	ldi	r19, 0x40	; 64
     102:	4c e1       	ldi	r20, 0x1C	; 28
     104:	55 e4       	ldi	r21, 0x45	; 69
     106:	6b 81       	ldd	r22, Y+3	; 0x03
     108:	7c 81       	ldd	r23, Y+4	; 0x04
     10a:	8d 81       	ldd	r24, Y+5	; 0x05
     10c:	9e 81       	ldd	r25, Y+6	; 0x06
     10e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     112:	dc 01       	movw	r26, r24
     114:	cb 01       	movw	r24, r22
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	a9 87       	std	Y+9, r26	; 0x09
     11c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	5f e3       	ldi	r21, 0x3F	; 63
     126:	6f 81       	ldd	r22, Y+7	; 0x07
     128:	78 85       	ldd	r23, Y+8	; 0x08
     12a:	89 85       	ldd	r24, Y+9	; 0x09
     12c:	9a 85       	ldd	r25, Y+10	; 0x0a
     12e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     132:	88 23       	and	r24, r24
     134:	2c f4       	brge	.+10     	; 0x140 <main+0x6e>
		__ticks = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9c 87       	std	Y+12, r25	; 0x0c
     13c:	8b 87       	std	Y+11, r24	; 0x0b
     13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0xec>
	else if (__tmp > 65535)
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	3f ef       	ldi	r19, 0xFF	; 255
     144:	4f e7       	ldi	r20, 0x7F	; 127
     146:	57 e4       	ldi	r21, 0x47	; 71
     148:	6f 81       	ldd	r22, Y+7	; 0x07
     14a:	78 85       	ldd	r23, Y+8	; 0x08
     14c:	89 85       	ldd	r24, Y+9	; 0x09
     14e:	9a 85       	ldd	r25, Y+10	; 0x0a
     150:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	4c f5       	brge	.+82     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	6b 81       	ldd	r22, Y+3	; 0x03
     162:	7c 81       	ldd	r23, Y+4	; 0x04
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	9e 81       	ldd	r25, Y+6	; 0x06
     168:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9c 87       	std	Y+12, r25	; 0x0c
     17e:	8b 87       	std	Y+11, r24	; 0x0b
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9e 87       	std	Y+14, r25	; 0x0e
     188:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18a:	8d 85       	ldd	r24, Y+13	; 0x0d
     18c:	9e 85       	ldd	r25, Y+14	; 0x0e
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9e 87       	std	Y+14, r25	; 0x0e
     194:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     196:	8b 85       	ldd	r24, Y+11	; 0x0b
     198:	9c 85       	ldd	r25, Y+12	; 0x0c
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9c 87       	std	Y+12, r25	; 0x0c
     19e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a4:	89 2b       	or	r24, r25
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	6f 81       	ldd	r22, Y+7	; 0x07
     1ac:	78 85       	ldd	r23, Y+8	; 0x08
     1ae:	89 85       	ldd	r24, Y+9	; 0x09
     1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9c 87       	std	Y+12, r25	; 0x0c
     1bc:	8b 87       	std	Y+11, r24	; 0x0b
     1be:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c2:	98 8b       	std	Y+16, r25	; 0x10
     1c4:	8f 87       	std	Y+15, r24	; 0x0f
     1c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c8:	98 89       	ldd	r25, Y+16	; 0x10
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xf8>
     1ce:	98 8b       	std	Y+16, r25	; 0x10
     1d0:	8f 87       	std	Y+15, r24	; 0x0f
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     1d2:	83 c0       	rjmp	.+262    	; 0x2da <main+0x208>
		{
			gpio_register_pin(31,GPIO_DIRECTION_INPUT,true);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	8f e1       	ldi	r24, 0x1F	; 31
     1da:	6d d4       	rcall	.+2266   	; 0xab6 <gpio_register_pin>
			gpio_debouncer();
     1dc:	00 d6       	rcall	.+3072   	; 0xdde <gpio_debouncer>
			if(gpio_read_pin(31) == 1)
     1de:	8f e1       	ldi	r24, 0x1F	; 31
     1e0:	81 d5       	rcall	.+2818   	; 0xce4 <gpio_read_pin>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x116>
     1e6:	77 c0       	rjmp	.+238    	; 0x2d6 <main+0x204>
			{
				i = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	89 83       	std	Y+1, r24	; 0x01
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	aa e7       	ldi	r26, 0x7A	; 122
     1f6:	b4 e4       	ldi	r27, 0x44	; 68
     1f8:	89 8b       	std	Y+17, r24	; 0x11
     1fa:	9a 8b       	std	Y+18, r25	; 0x12
     1fc:	ab 8b       	std	Y+19, r26	; 0x13
     1fe:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e4       	ldi	r19, 0x40	; 64
     204:	4c e1       	ldi	r20, 0x1C	; 28
     206:	55 e4       	ldi	r21, 0x45	; 69
     208:	69 89       	ldd	r22, Y+17	; 0x11
     20a:	7a 89       	ldd	r23, Y+18	; 0x12
     20c:	8b 89       	ldd	r24, Y+19	; 0x13
     20e:	9c 89       	ldd	r25, Y+20	; 0x14
     210:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8d 8b       	std	Y+21, r24	; 0x15
     21a:	9e 8b       	std	Y+22, r25	; 0x16
     21c:	af 8b       	std	Y+23, r26	; 0x17
     21e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e8       	ldi	r20, 0x80	; 128
     226:	5f e3       	ldi	r21, 0x3F	; 63
     228:	6d 89       	ldd	r22, Y+21	; 0x15
     22a:	7e 89       	ldd	r23, Y+22	; 0x16
     22c:	8f 89       	ldd	r24, Y+23	; 0x17
     22e:	98 8d       	ldd	r25, Y+24	; 0x18
     230:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	2c f4       	brge	.+10     	; 0x242 <main+0x170>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9a 8f       	std	Y+26, r25	; 0x1a
     23e:	89 8f       	std	Y+25, r24	; 0x19
     240:	3f c0       	rjmp	.+126    	; 0x2c0 <main+0x1ee>
	else if (__tmp > 65535)
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	3f ef       	ldi	r19, 0xFF	; 255
     246:	4f e7       	ldi	r20, 0x7F	; 127
     248:	57 e4       	ldi	r21, 0x47	; 71
     24a:	6d 89       	ldd	r22, Y+21	; 0x15
     24c:	7e 89       	ldd	r23, Y+22	; 0x16
     24e:	8f 89       	ldd	r24, Y+23	; 0x17
     250:	98 8d       	ldd	r25, Y+24	; 0x18
     252:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	4c f5       	brge	.+82     	; 0x2ac <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e2       	ldi	r20, 0x20	; 32
     260:	51 e4       	ldi	r21, 0x41	; 65
     262:	69 89       	ldd	r22, Y+17	; 0x11
     264:	7a 89       	ldd	r23, Y+18	; 0x12
     266:	8b 89       	ldd	r24, Y+19	; 0x13
     268:	9c 89       	ldd	r25, Y+20	; 0x14
     26a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	bc 01       	movw	r22, r24
     274:	cd 01       	movw	r24, r26
     276:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	9a 8f       	std	Y+26, r25	; 0x1a
     280:	89 8f       	std	Y+25, r24	; 0x19
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <main+0x1d0>
     284:	8a ef       	ldi	r24, 0xFA	; 250
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9c 8f       	std	Y+28, r25	; 0x1c
     28a:	8b 8f       	std	Y+27, r24	; 0x1b
     28c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     28e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <main+0x1be>
     294:	9c 8f       	std	Y+28, r25	; 0x1c
     296:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     298:	89 8d       	ldd	r24, Y+25	; 0x19
     29a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	9a 8f       	std	Y+26, r25	; 0x1a
     2a0:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a2:	89 8d       	ldd	r24, Y+25	; 0x19
     2a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2a6:	89 2b       	or	r24, r25
     2a8:	69 f7       	brne	.-38     	; 0x284 <main+0x1b2>
     2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ac:	6d 89       	ldd	r22, Y+21	; 0x15
     2ae:	7e 89       	ldd	r23, Y+22	; 0x16
     2b0:	8f 89       	ldd	r24, Y+23	; 0x17
     2b2:	98 8d       	ldd	r25, Y+24	; 0x18
     2b4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	9a 8f       	std	Y+26, r25	; 0x1a
     2be:	89 8f       	std	Y+25, r24	; 0x19
     2c0:	89 8d       	ldd	r24, Y+25	; 0x19
     2c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2c4:	9e 8f       	std	Y+30, r25	; 0x1e
     2c6:	8d 8f       	std	Y+29, r24	; 0x1d
     2c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x1fa>
     2d0:	9e 8f       	std	Y+30, r25	; 0x1e
     2d2:	8d 8f       	std	Y+29, r24	; 0x1d
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <main+0x208>
				_delay_ms(1000);
			}
			else
			{
				i = 0;
     2d6:	1a 82       	std	Y+2, r1	; 0x02
     2d8:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	89 2b       	or	r24, r25
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0x212>
     2e2:	78 cf       	rjmp	.-272    	; 0x1d4 <main+0x102>
			else
			{
				i = 0;
			}
		}	
		if(i == 1)
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	41 f4       	brne	.+16     	; 0x2fc <main+0x22a>
		{
			while(1)
			{
				PORTG = 0xff;
     2ec:	84 e3       	ldi	r24, 0x34	; 52
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
				purpleside();
     2f6:	0e 94 47 0a 	call	0x148e	; 0x148e <purpleside>
			}
     2fa:	f8 cf       	rjmp	.-16     	; 0x2ec <main+0x21a>
		}
	}
     2fc:	f8 ce       	rjmp	.-528    	; 0xee <main+0x1c>

000002fe <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	00 d0       	rcall	.+0      	; 0x308 <servo_init+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     310:	8d e2       	ldi	r24, 0x2D	; 45
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2d e2       	ldi	r18, 0x2D	; 45
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	20 81       	ld	r18, Z
     31c:	28 63       	ori	r18, 0x38	; 56
     31e:	fc 01       	movw	r30, r24
     320:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     322:	84 e9       	ldi	r24, 0x94	; 148
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	11 82       	std	Z+1, r1	; 0x01
     32a:	10 82       	st	Z, r1
	OCR3A = 0;
     32c:	88 e9       	ldi	r24, 0x98	; 152
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
	OCR3B = 0;
     336:	8a e9       	ldi	r24, 0x9A	; 154
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	11 82       	std	Z+1, r1	; 0x01
     33e:	10 82       	st	Z, r1
	OCR3C = 0;
     340:	8c e9       	ldi	r24, 0x9C	; 156
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	fc 01       	movw	r30, r24
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     34a:	80 e9       	ldi	r24, 0x90	; 144
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	2e ef       	ldi	r18, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     354:	81 e9       	ldi	r24, 0x91	; 145
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	2a e1       	ldi	r18, 0x1A	; 26
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     35e:	06 e9       	ldi	r16, 0x96	; 150
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	cc 01       	movw	r24, r24
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	bc 01       	movw	r22, r24
     37a:	cd 01       	movw	r24, r26
     37c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__floatunsisf>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	9c 01       	movw	r18, r24
     386:	ad 01       	movw	r20, r26
     388:	60 e8       	ldi	r22, 0x80	; 128
     38a:	76 e9       	ldi	r23, 0x96	; 150
     38c:	88 e1       	ldi	r24, 0x18	; 24
     38e:	9b e4       	ldi	r25, 0x4B	; 75
     390:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	5f e3       	ldi	r21, 0x3F	; 63
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__subsf3>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	f8 01       	movw	r30, r16
     3ba:	91 83       	std	Z+1, r25	; 0x01
     3bc:	80 83       	st	Z, r24
}//END OF servo_init
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <__vector_18>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
	return rxCounter[nodeID - 1];
}
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	00 90 5f 00 	lds	r0, 0x005F
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	00 90 5b 00 	lds	r0, 0x005B
     3dc:	0f 92       	push	r0
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <__vector_18+0x28>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <__vector_18+0x2a>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	8d ee       	ldi	r24, 0xED	; 237
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	19 82       	std	Y+1, r1	; 0x01
     406:	a4 c0       	rjmp	.+328    	; 0x550 <__vector_18+0x184>
     408:	8d ee       	ldi	r24, 0xED	; 237
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	22 95       	swap	r18
     410:	20 7f       	andi	r18, 0xF0	; 240
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
     416:	8e ee       	ldi	r24, 0xEE	; 238
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	82 95       	swap	r24
     420:	86 95       	lsr	r24
     422:	87 70       	andi	r24, 0x07	; 7
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	99 27       	eor	r25, r25
     42c:	89 2b       	or	r24, r25
     42e:	09 f4       	brne	.+2      	; 0x432 <__vector_18+0x66>
     430:	70 c0       	rjmp	.+224    	; 0x512 <__vector_18+0x146>
     432:	8f ee       	ldi	r24, 0xEF	; 239
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 e8       	ldi	r18, 0x80	; 128
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
     43c:	8e ee       	ldi	r24, 0xEE	; 238
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	2e ee       	ldi	r18, 0xEE	; 238
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	2f 7d       	andi	r18, 0xDF	; 223
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
     44e:	82 ef       	ldi	r24, 0xF2	; 242
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	82 95       	swap	r24
     458:	86 95       	lsr	r24
     45a:	87 70       	andi	r24, 0x07	; 7
     45c:	28 2f       	mov	r18, r24
     45e:	83 ef       	ldi	r24, 0xF3	; 243
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	fc 01       	movw	r30, r24
     464:	80 81       	ld	r24, Z
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	82 2b       	or	r24, r18
     478:	8c 83       	std	Y+4, r24	; 0x04
     47a:	1a 82       	std	Y+2, r1	; 0x02
     47c:	26 c0       	rjmp	.+76     	; 0x4ca <__vector_18+0xfe>
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	81 50       	subi	r24, 0x01	; 1
     486:	90 48       	sbci	r25, 0x80	; 128
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	84 5e       	subi	r24, 0xE4	; 228
     48e:	9e 4f       	sbci	r25, 0xFE	; 254
     490:	fc 01       	movw	r30, r24
     492:	20 81       	ld	r18, Z
     494:	31 81       	ldd	r19, Z+1	; 0x01
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	80 5d       	subi	r24, 0xD0	; 208
     4a0:	9e 4f       	sbci	r25, 0xFE	; 254
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	48 2f       	mov	r20, r24
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	84 0f       	add	r24, r20
     4b2:	95 1f       	adc	r25, r21
     4b4:	82 0f       	add	r24, r18
     4b6:	93 1f       	adc	r25, r19
     4b8:	2a ef       	ldi	r18, 0xFA	; 250
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	88 30       	cpi	r24, 0x08	; 8
     4ce:	b8 f2       	brcs	.-82     	; 0x47e <__vector_18+0xb2>
     4d0:	8c 81       	ldd	r24, Y+4	; 0x04
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	80 5d       	subi	r24, 0xD0	; 208
     4da:	9e 4f       	sbci	r25, 0xFE	; 254
     4dc:	fc 01       	movw	r30, r24
     4de:	20 81       	ld	r18, Z
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
     4e6:	25 30       	cpi	r18, 0x05	; 5
     4e8:	41 f4       	brne	.+16     	; 0x4fa <__vector_18+0x12e>
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	80 5d       	subi	r24, 0xD0	; 208
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	fc 01       	movw	r30, r24
     4f8:	10 82       	st	Z, r1
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	8c 5b       	subi	r24, 0xBC	; 188
     504:	9e 4f       	sbci	r25, 0xFE	; 254
     506:	fc 01       	movw	r30, r24
     508:	20 81       	ld	r18, Z
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
     510:	23 c0       	rjmp	.+70     	; 0x558 <__vector_18+0x18c>
     512:	8e ee       	ldi	r24, 0xEE	; 238
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	82 95       	swap	r24
     51c:	86 95       	lsr	r24
     51e:	86 95       	lsr	r24
     520:	83 70       	andi	r24, 0x03	; 3
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	81 70       	andi	r24, 0x01	; 1
     528:	99 27       	eor	r25, r25
     52a:	89 2b       	or	r24, r25
     52c:	71 f0       	breq	.+28     	; 0x54a <__vector_18+0x17e>
     52e:	8f ee       	ldi	r24, 0xEF	; 239
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	fc 01       	movw	r30, r24
     534:	10 82       	st	Z, r1
     536:	8e ee       	ldi	r24, 0xEE	; 238
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2e ee       	ldi	r18, 0xEE	; 238
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	2f 7b       	andi	r18, 0xBF	; 191
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	07 c0       	rjmp	.+14     	; 0x558 <__vector_18+0x18c>
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	8f 30       	cpi	r24, 0x0F	; 15
     554:	08 f4       	brcc	.+2      	; 0x558 <__vector_18+0x18c>
     556:	58 cf       	rjmp	.-336    	; 0x408 <__vector_18+0x3c>
     558:	8d ee       	ldi	r24, 0xED	; 237
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	2b 81       	ldd	r18, Y+3	; 0x03
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
     562:	8a ed       	ldi	r24, 0xDA	; 218
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	2a ed       	ldi	r18, 0xDA	; 218
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	00 92 5b 00 	sts	0x005B, r0
     594:	0f 90       	pop	r0
     596:	00 92 5f 00 	sts	0x005F, r0
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <CAN_InitModule>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <CAN_InitModule+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	88 ed       	ldi	r24, 0xD8	; 216
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
     5b4:	19 82       	std	Y+1, r1	; 0x01
     5b6:	3e c0       	rjmp	.+124    	; 0x634 <CAN_InitModule+0x94>
     5b8:	8d ee       	ldi	r24, 0xED	; 237
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	22 95       	swap	r18
     5c0:	20 7f       	andi	r18, 0xF0	; 240
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
     5c6:	8e ee       	ldi	r24, 0xEE	; 238
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	10 82       	st	Z, r1
     5ce:	8f ee       	ldi	r24, 0xEF	; 239
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	fc 01       	movw	r30, r24
     5d4:	10 82       	st	Z, r1
     5d6:	83 ef       	ldi	r24, 0xF3	; 243
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	10 82       	st	Z, r1
     5de:	82 ef       	ldi	r24, 0xF2	; 242
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	fc 01       	movw	r30, r24
     5e4:	10 82       	st	Z, r1
     5e6:	81 ef       	ldi	r24, 0xF1	; 241
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	fc 01       	movw	r30, r24
     5ec:	10 82       	st	Z, r1
     5ee:	80 ef       	ldi	r24, 0xF0	; 240
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	fc 01       	movw	r30, r24
     5f4:	10 82       	st	Z, r1
     5f6:	87 ef       	ldi	r24, 0xF7	; 247
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	10 82       	st	Z, r1
     5fe:	86 ef       	ldi	r24, 0xF6	; 246
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	10 82       	st	Z, r1
     606:	85 ef       	ldi	r24, 0xF5	; 245
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	10 82       	st	Z, r1
     60e:	84 ef       	ldi	r24, 0xF4	; 244
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	10 82       	st	Z, r1
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	07 c0       	rjmp	.+14     	; 0x628 <CAN_InitModule+0x88>
     61a:	8a ef       	ldi	r24, 0xFA	; 250
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	10 82       	st	Z, r1
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	8a 83       	std	Y+2, r24	; 0x02
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	88 30       	cpi	r24, 0x08	; 8
     62c:	b0 f3       	brcs	.-20     	; 0x61a <CAN_InitModule+0x7a>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	8f 30       	cpi	r24, 0x0F	; 15
     638:	08 f4       	brcc	.+2      	; 0x63c <CAN_InitModule+0x9c>
     63a:	be cf       	rjmp	.-132    	; 0x5b8 <CAN_InitModule+0x18>
     63c:	88 ed       	ldi	r24, 0xD8	; 216
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	22 e0       	ldi	r18, 0x02	; 2
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
     646:	82 ee       	ldi	r24, 0xE2	; 226
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
     650:	83 ee       	ldi	r24, 0xE3	; 227
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	28 e0       	ldi	r18, 0x08	; 8
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	84 ee       	ldi	r24, 0xE4	; 228
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2e e5       	ldi	r18, 0x5E	; 94
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
     664:	85 ee       	ldi	r24, 0xE5	; 229
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	fc 01       	movw	r30, r24
     66a:	10 82       	st	Z, r1
     66c:	8b ed       	ldi	r24, 0xDB	; 219
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	20 eb       	ldi	r18, 0xB0	; 176
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
     676:	8f ed       	ldi	r24, 0xDF	; 223
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	2f e7       	ldi	r18, 0x7F	; 127
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	8e ed       	ldi	r24, 0xDE	; 222
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
     68a:	78 94       	sei
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <CAN_InitRxMob>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <CAN_InitRxMob+0x6>
     69c:	00 d0       	rcall	.+0      	; 0x69e <CAN_InitRxMob+0x8>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	8b 83       	std	Y+3, r24	; 0x03
     6a6:	8d ee       	ldi	r24, 0xED	; 237
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	8a 83       	std	Y+2, r24	; 0x02
     6b0:	00 00       	nop
     6b2:	89 ed       	ldi	r24, 0xD9	; 217
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	82 95       	swap	r24
     6bc:	8f 70       	andi	r24, 0x0F	; 15
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	81 70       	andi	r24, 0x01	; 1
     6c4:	99 27       	eor	r25, r25
     6c6:	89 2b       	or	r24, r25
     6c8:	a1 f7       	brne	.-24     	; 0x6b2 <CAN_InitRxMob+0x1c>
     6ca:	89 ed       	ldi	r24, 0xD9	; 217
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	86 95       	lsr	r24
     6d4:	86 95       	lsr	r24
     6d6:	86 95       	lsr	r24
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	99 27       	eor	r25, r25
     6e0:	89 2b       	or	r24, r25
     6e2:	39 f7       	brne	.-50     	; 0x6b2 <CAN_InitRxMob+0x1c>
     6e4:	19 82       	std	Y+1, r1	; 0x01
     6e6:	49 c0       	rjmp	.+146    	; 0x77a <CAN_InitRxMob+0xe4>
     6e8:	8d ee       	ldi	r24, 0xED	; 237
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	29 81       	ldd	r18, Y+1	; 0x01
     6ee:	22 95       	swap	r18
     6f0:	20 7f       	andi	r18, 0xF0	; 240
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	8f ee       	ldi	r24, 0xEF	; 239
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	82 95       	swap	r24
     700:	86 95       	lsr	r24
     702:	86 95       	lsr	r24
     704:	83 70       	andi	r24, 0x03	; 3
     706:	88 23       	and	r24, r24
     708:	21 f0       	breq	.+8      	; 0x712 <CAN_InitRxMob+0x7c>
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	34 c0       	rjmp	.+104    	; 0x77a <CAN_InitRxMob+0xe4>
     712:	8f ee       	ldi	r24, 0xEF	; 239
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	2f e0       	ldi	r18, 0x0F	; 15
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
     71c:	83 ef       	ldi	r24, 0xF3	; 243
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b 81       	ldd	r18, Y+3	; 0x03
     722:	3c 81       	ldd	r19, Y+4	; 0x04
     724:	33 27       	eor	r19, r19
     726:	36 95       	lsr	r19
     728:	27 95       	ror	r18
     72a:	36 95       	lsr	r19
     72c:	27 95       	ror	r18
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
     736:	82 ef       	ldi	r24, 0xF2	; 242
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	22 95       	swap	r18
     73e:	22 0f       	add	r18, r18
     740:	20 7e       	andi	r18, 0xE0	; 224
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
     746:	86 ef       	ldi	r24, 0xF6	; 246
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	20 ee       	ldi	r18, 0xE0	; 224
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
     750:	87 ef       	ldi	r24, 0xF7	; 247
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
     75a:	8f ee       	ldi	r24, 0xEF	; 239
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	2f ee       	ldi	r18, 0xEF	; 239
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	20 68       	ori	r18, 0x80	; 128
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
     76c:	8d ee       	ldi	r24, 0xED	; 237
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0a c0       	rjmp	.+20     	; 0x78e <CAN_InitRxMob+0xf8>
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	8f 30       	cpi	r24, 0x0F	; 15
     77e:	08 f4       	brcc	.+2      	; 0x782 <CAN_InitRxMob+0xec>
     780:	b3 cf       	rjmp	.-154    	; 0x6e8 <CAN_InitRxMob+0x52>
     782:	8d ee       	ldi	r24, 0xED	; 237
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	2a 81       	ldd	r18, Y+2	; 0x02
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <CAN_Init>:
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <CAN_Init+0xa>
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	8a 83       	std	Y+2, r24	; 0x02
     7ac:	f9 de       	rcall	.-526    	; 0x5a0 <CAN_InitModule>
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	2f c0       	rjmp	.+94     	; 0x810 <CAN_Init+0x74>
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	6d df       	rcall	.-294    	; 0x696 <CAN_InitRxMob>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	8c 01       	movw	r16, r24
     7c8:	04 5e       	subi	r16, 0xE4	; 228
     7ca:	1e 4f       	sbci	r17, 0xFE	; 254
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <calloc>
     7d8:	f8 01       	movw	r30, r16
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	80 83       	st	Z, r24
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	29 81       	ldd	r18, Y+1	; 0x01
     7e6:	22 2f       	mov	r18, r18
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	49 81       	ldd	r20, Y+1	; 0x01
     7ec:	44 2f       	mov	r20, r20
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	4c 5b       	subi	r20, 0xBC	; 188
     7f4:	5e 4f       	sbci	r21, 0xFE	; 254
     7f6:	fa 01       	movw	r30, r20
     7f8:	60 83       	st	Z, r22
     7fa:	26 5c       	subi	r18, 0xC6	; 198
     7fc:	3e 4f       	sbci	r19, 0xFE	; 254
     7fe:	f9 01       	movw	r30, r18
     800:	60 83       	st	Z, r22
     802:	80 5d       	subi	r24, 0xD0	; 208
     804:	9e 4f       	sbci	r25, 0xFE	; 254
     806:	fc 01       	movw	r30, r24
     808:	60 83       	st	Z, r22
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	99 81       	ldd	r25, Y+1	; 0x01
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	98 17       	cp	r25, r24
     816:	68 f2       	brcs	.-102    	; 0x7b2 <CAN_Init+0x16>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <CAN_Read+0x6>
     82c:	00 d0       	rcall	.+0      	; 0x82e <CAN_Read+0x8>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9b 83       	std	Y+3, r25	; 0x03
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     838:	00 00       	nop
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	8c 5b       	subi	r24, 0xBC	; 188
     844:	9e 4f       	sbci	r25, 0xFE	; 254
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	b1 f3       	breq	.-20     	; 0x83a <CAN_Read+0x14>

	for(i = 0; i < 8; ++i)
     84e:	19 82       	std	Y+1, r1	; 0x01
     850:	2c c0       	rjmp	.+88     	; 0x8aa <CAN_Read+0x84>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	3b 81       	ldd	r19, Y+3	; 0x03
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	2c 81       	ldd	r18, Y+4	; 0x04
     862:	22 2f       	mov	r18, r18
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	21 50       	subi	r18, 0x01	; 1
     868:	30 48       	sbci	r19, 0x80	; 128
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	24 5e       	subi	r18, 0xE4	; 228
     870:	3e 4f       	sbci	r19, 0xFE	; 254
     872:	f9 01       	movw	r30, r18
     874:	40 81       	ld	r20, Z
     876:	51 81       	ldd	r21, Z+1	; 0x01
     878:	2c 81       	ldd	r18, Y+4	; 0x04
     87a:	22 2f       	mov	r18, r18
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	31 09       	sbc	r19, r1
     882:	26 5c       	subi	r18, 0xC6	; 198
     884:	3e 4f       	sbci	r19, 0xFE	; 254
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	62 2f       	mov	r22, r18
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	29 81       	ldd	r18, Y+1	; 0x01
     890:	22 2f       	mov	r18, r18
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	26 0f       	add	r18, r22
     896:	37 1f       	adc	r19, r23
     898:	24 0f       	add	r18, r20
     89a:	35 1f       	adc	r19, r21
     89c:	f9 01       	movw	r30, r18
     89e:	20 81       	ld	r18, Z
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	88 f2       	brcs	.-94     	; 0x852 <CAN_Read+0x2c>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	86 5c       	subi	r24, 0xC6	; 198
     8ba:	9e 4f       	sbci	r25, 0xFE	; 254
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	25 30       	cpi	r18, 0x05	; 5
     8c8:	41 f4       	brne	.+16     	; 0x8da <CAN_Read+0xb4>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     8ca:	8c 81       	ldd	r24, Y+4	; 0x04
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	86 5c       	subi	r24, 0xC6	; 198
     8d4:	9e 4f       	sbci	r25, 0xFE	; 254
     8d6:	fc 01       	movw	r30, r24
     8d8:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     8da:	8c 81       	ldd	r24, Y+4	; 0x04
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	9c 01       	movw	r18, r24
     8e4:	2c 5b       	subi	r18, 0xBC	; 188
     8e6:	3e 4f       	sbci	r19, 0xFE	; 254
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	8c 5b       	subi	r24, 0xBC	; 188
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18

	return 0;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
}
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <CAN_Write+0x6>
     90c:	00 d0       	rcall	.+0      	; 0x90e <CAN_Write+0x8>
     90e:	00 d0       	rcall	.+0      	; 0x910 <CAN_Write+0xa>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	9d 83       	std	Y+5, r25	; 0x05
     916:	8c 83       	std	Y+4, r24	; 0x04
     918:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     91a:	00 00       	nop
     91c:	89 ed       	ldi	r24, 0xD9	; 217
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	82 95       	swap	r24
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	81 70       	andi	r24, 0x01	; 1
     92e:	99 27       	eor	r25, r25
     930:	89 2b       	or	r24, r25
     932:	a1 f7       	brne	.-24     	; 0x91c <CAN_Write+0x16>
     934:	89 ed       	ldi	r24, 0xD9	; 217
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	86 95       	lsr	r24
     93e:	86 95       	lsr	r24
     940:	86 95       	lsr	r24
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	81 70       	andi	r24, 0x01	; 1
     948:	99 27       	eor	r25, r25
     94a:	89 2b       	or	r24, r25
     94c:	39 f7       	brne	.-50     	; 0x91c <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     94e:	8d ee       	ldi	r24, 0xED	; 237
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     958:	1a 82       	std	Y+2, r1	; 0x02
     95a:	15 c0       	rjmp	.+42     	; 0x986 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     95c:	8d ee       	ldi	r24, 0xED	; 237
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2a 81       	ldd	r18, Y+2	; 0x02
     962:	22 95       	swap	r18
     964:	20 7f       	andi	r18, 0xF0	; 240
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     96a:	8f ee       	ldi	r24, 0xEF	; 239
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	82 95       	swap	r24
     974:	86 95       	lsr	r24
     976:	86 95       	lsr	r24
     978:	83 70       	andi	r24, 0x03	; 3
     97a:	88 23       	and	r24, r24
     97c:	09 f4       	brne	.+2      	; 0x980 <CAN_Write+0x7a>
			break;
     97e:	06 c0       	rjmp	.+12     	; 0x98c <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	8f 30       	cpi	r24, 0x0F	; 15
     98a:	40 f3       	brcs	.-48     	; 0x95c <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	8f 30       	cpi	r24, 0x0F	; 15
     990:	11 f4       	brne	.+4      	; 0x996 <CAN_Write+0x90>
		return -1;
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	39 c0       	rjmp	.+114    	; 0xa08 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     996:	82 ef       	ldi	r24, 0xF2	; 242
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2e 81       	ldd	r18, Y+6	; 0x06
     99c:	22 95       	swap	r18
     99e:	22 0f       	add	r18, r18
     9a0:	20 7e       	andi	r18, 0xE0	; 224
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     9a6:	83 ef       	ldi	r24, 0xF3	; 243
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	2e 81       	ldd	r18, Y+6	; 0x06
     9ac:	26 95       	lsr	r18
     9ae:	26 95       	lsr	r18
     9b0:	26 95       	lsr	r18
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     9b6:	8f ee       	ldi	r24, 0xEF	; 239
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	28 e0       	ldi	r18, 0x08	; 8
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     9c0:	19 82       	std	Y+1, r1	; 0x01
     9c2:	10 c0       	rjmp	.+32     	; 0x9e4 <CAN_Write+0xde>
		CANMSG = data[i];
     9c4:	8a ef       	ldi	r24, 0xFA	; 250
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	22 2f       	mov	r18, r18
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	4c 81       	ldd	r20, Y+4	; 0x04
     9d0:	5d 81       	ldd	r21, Y+5	; 0x05
     9d2:	24 0f       	add	r18, r20
     9d4:	35 1f       	adc	r19, r21
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 30       	cpi	r24, 0x08	; 8
     9e8:	68 f3       	brcs	.-38     	; 0x9c4 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     9ea:	8f ee       	ldi	r24, 0xEF	; 239
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2f ee       	ldi	r18, 0xEF	; 239
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	20 64       	ori	r18, 0x40	; 64
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     9fc:	8d ee       	ldi	r24, 0xED	; 237
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2b 81       	ldd	r18, Y+3	; 0x03
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18

	return 0;
     a06:	80 e0       	ldi	r24, 0x00	; 0
}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <__list_add>:
	if(value != 0)
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <__list_add+0x6>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <__list_add+0x8>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <__list_add+0xa>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	7c 83       	std	Y+4, r23	; 0x04
     a2e:	6b 83       	std	Y+3, r22	; 0x03
     a30:	5e 83       	std	Y+6, r21	; 0x06
     a32:	4d 83       	std	Y+5, r20	; 0x05
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	9e 81       	ldd	r25, Y+6	; 0x06
     a38:	29 81       	ldd	r18, Y+1	; 0x01
     a3a:	3a 81       	ldd	r19, Y+2	; 0x02
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 83       	std	Z+1, r19	; 0x01
     a40:	20 83       	st	Z, r18
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	2d 81       	ldd	r18, Y+5	; 0x05
     a48:	3e 81       	ldd	r19, Y+6	; 0x06
     a4a:	fc 01       	movw	r30, r24
     a4c:	33 83       	std	Z+3, r19	; 0x03
     a4e:	22 83       	std	Z+2, r18	; 0x02
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	2b 81       	ldd	r18, Y+3	; 0x03
     a56:	3c 81       	ldd	r19, Y+4	; 0x04
     a58:	fc 01       	movw	r30, r24
     a5a:	31 83       	std	Z+1, r19	; 0x01
     a5c:	20 83       	st	Z, r18
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	29 81       	ldd	r18, Y+1	; 0x01
     a64:	3a 81       	ldd	r19, Y+2	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	33 83       	std	Z+3, r19	; 0x03
     a6a:	22 83       	std	Z+2, r18	; 0x02
     a6c:	26 96       	adiw	r28, 0x06	; 6
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <list_add>:
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <list_add+0x6>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <list_add+0x8>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	7c 83       	std	Y+4, r23	; 0x04
     a90:	6b 83       	std	Y+3, r22	; 0x03
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	fc 01       	movw	r30, r24
     a98:	42 81       	ldd	r20, Z+2	; 0x02
     a9a:	53 81       	ldd	r21, Z+3	; 0x03
     a9c:	2b 81       	ldd	r18, Y+3	; 0x03
     a9e:	3c 81       	ldd	r19, Y+4	; 0x04
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	b9 01       	movw	r22, r18
     aa6:	b9 df       	rcall	.-142    	; 0xa1a <__list_add>
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <gpio_register_pin>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	2b 97       	sbiw	r28, 0x0b	; 11
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	89 87       	std	Y+9, r24	; 0x09
     acc:	6a 87       	std	Y+10, r22	; 0x0a
     ace:	4b 87       	std	Y+11, r20	; 0x0b
     ad0:	80 91 08 01 	lds	r24, 0x0108
     ad4:	90 91 09 01 	lds	r25, 0x0109
     ad8:	9c 83       	std	Y+4, r25	; 0x04
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	06 97       	sbiw	r24, 0x06	; 6
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	15 c0       	rjmp	.+42     	; 0xb12 <gpio_register_pin+0x5c>
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	fc 01       	movw	r30, r24
     aee:	90 81       	ld	r25, Z
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	98 17       	cp	r25, r24
     af4:	11 f4       	brne	.+4      	; 0xafa <gpio_register_pin+0x44>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	bb c0       	rjmp	.+374    	; 0xc70 <gpio_register_pin+0x1ba>
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	80 85       	ldd	r24, Z+8	; 0x08
     b02:	91 85       	ldd	r25, Z+9	; 0x09
     b04:	9e 83       	std	Y+6, r25	; 0x06
     b06:	8d 83       	std	Y+5, r24	; 0x05
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	06 97       	sbiw	r24, 0x06	; 6
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	06 96       	adiw	r24, 0x06	; 6
     b18:	86 50       	subi	r24, 0x06	; 6
     b1a:	91 40       	sbci	r25, 0x01	; 1
     b1c:	29 f7       	brne	.-54     	; 0xae8 <gpio_register_pin+0x32>
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	86 95       	lsr	r24
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	8f 83       	std	Y+7, r24	; 0x07
     b2a:	89 85       	ldd	r24, Y+9	; 0x09
     b2c:	87 70       	andi	r24, 0x07	; 7
     b2e:	88 87       	std	Y+8, r24	; 0x08
     b30:	8a 85       	ldd	r24, Y+10	; 0x0a
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <gpio_register_pin+0x82>
     b36:	55 c0       	rjmp	.+170    	; 0xbe2 <gpio_register_pin+0x12c>
     b38:	8f 81       	ldd	r24, Y+7	; 0x07
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9c 01       	movw	r18, r24
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	31 09       	sbc	r19, r1
     b44:	c9 01       	movw	r24, r18
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
     b4e:	81 96       	adiw	r24, 0x21	; 33
     b50:	ac 01       	movw	r20, r24
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c 01       	movw	r18, r24
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	31 09       	sbc	r19, r1
     b5e:	c9 01       	movw	r24, r18
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	81 96       	adiw	r24, 0x21	; 33
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	68 2f       	mov	r22, r24
     b70:	88 85       	ldd	r24, Y+8	; 0x08
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <gpio_register_pin+0xca>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	2a 95       	dec	r18
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <gpio_register_pin+0xc6>
     b84:	86 2b       	or	r24, r22
     b86:	fa 01       	movw	r30, r20
     b88:	80 83       	st	Z, r24
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9c 01       	movw	r18, r24
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	31 09       	sbc	r19, r1
     b96:	c9 01       	movw	r24, r18
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	82 96       	adiw	r24, 0x22	; 34
     ba2:	ac 01       	movw	r20, r24
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9c 01       	movw	r18, r24
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	31 09       	sbc	r19, r1
     bb0:	c9 01       	movw	r24, r18
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	82 96       	adiw	r24, 0x22	; 34
     bbc:	fc 01       	movw	r30, r24
     bbe:	80 81       	ld	r24, Z
     bc0:	68 2f       	mov	r22, r24
     bc2:	88 85       	ldd	r24, Y+8	; 0x08
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <gpio_register_pin+0x11c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	2a 95       	dec	r18
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <gpio_register_pin+0x118>
     bd6:	80 95       	com	r24
     bd8:	86 23       	and	r24, r22
     bda:	fa 01       	movw	r30, r20
     bdc:	80 83       	st	Z, r24
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	47 c0       	rjmp	.+142    	; 0xc70 <gpio_register_pin+0x1ba>
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 01       	movw	r18, r24
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	31 09       	sbc	r19, r1
     bee:	c9 01       	movw	r24, r18
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	81 96       	adiw	r24, 0x21	; 33
     bfa:	ac 01       	movw	r20, r24
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9c 01       	movw	r18, r24
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	31 09       	sbc	r19, r1
     c08:	c9 01       	movw	r24, r18
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	81 96       	adiw	r24, 0x21	; 33
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	68 2f       	mov	r22, r24
     c1a:	88 85       	ldd	r24, Y+8	; 0x08
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <gpio_register_pin+0x174>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <gpio_register_pin+0x170>
     c2e:	80 95       	com	r24
     c30:	86 23       	and	r24, r22
     c32:	fa 01       	movw	r30, r20
     c34:	80 83       	st	Z, r24
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <malloc>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	89 2b       	or	r24, r25
     c48:	11 f4       	brne	.+4      	; 0xc4e <gpio_register_pin+0x198>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <gpio_register_pin+0x1ba>
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	29 85       	ldd	r18, Y+9	; 0x09
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c5e:	fc 01       	movw	r30, r24
     c60:	21 83       	std	Z+1, r18	; 0x01
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	06 96       	adiw	r24, 0x06	; 6
     c68:	66 e0       	ldi	r22, 0x06	; 6
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	08 df       	rcall	.-496    	; 0xa7e <list_add>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	2b 96       	adiw	r28, 0x0b	; 11
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <__gpio_read_pin+0x6>
     c88:	1f 92       	push	r1
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	86 95       	lsr	r24
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	87 70       	andi	r24, 0x07	; 7
     ca0:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9c 01       	movw	r18, r24
     caa:	21 50       	subi	r18, 0x01	; 1
     cac:	31 09       	sbc	r19, r1
     cae:	c9 01       	movw	r24, r18
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	80 96       	adiw	r24, 0x20	; 32
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	2b 81       	ldd	r18, Y+3	; 0x03
     cc8:	22 2f       	mov	r18, r18
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <__gpio_read_pin+0x50>
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	2a 95       	dec	r18
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <__gpio_read_pin+0x4c>
     cd6:	81 70       	andi	r24, 0x01	; 1
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	29 97       	sbiw	r28, 0x09	; 9
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     cfa:	80 91 08 01 	lds	r24, 0x0108
     cfe:	90 91 09 01 	lds	r25, 0x0109
     d02:	9d 83       	std	Y+5, r25	; 0x05
     d04:	8c 83       	std	Y+4, r24	; 0x04
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	06 97       	sbiw	r24, 0x06	; 6
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	55 c0       	rjmp	.+170    	; 0xdbc <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	90 81       	ld	r25, Z
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	98 17       	cp	r25, r24
     d1e:	09 f0       	breq	.+2      	; 0xd22 <gpio_read_pin+0x3e>
     d20:	41 c0       	rjmp	.+130    	; 0xda4 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
     d22:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     d24:	1f c0       	rjmp	.+62     	; 0xd64 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	29 81       	ldd	r18, Y+1	; 0x01
     d2e:	3a 81       	ldd	r19, Y+2	; 0x02
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	02 96       	adiw	r24, 0x02	; 2
     d36:	fc 01       	movw	r30, r24
     d38:	40 81       	ld	r20, Z
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	02 96       	adiw	r24, 0x02	; 2
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	48 17       	cp	r20, r24
     d52:	29 f0       	breq	.+10     	; 0xd5e <gpio_read_pin+0x7a>
                    return input->previous_state;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	fc 01       	movw	r30, r24
     d5a:	85 81       	ldd	r24, Z+5	; 0x05
     d5c:	37 c0       	rjmp	.+110    	; 0xdcc <gpio_read_pin+0xe8>
                i++;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	f0 f2       	brcs	.-68     	; 0xd26 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	fc 01       	movw	r30, r24
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	89 27       	eor	r24, r25
     d76:	88 23       	and	r24, r24
     d78:	29 f0       	breq	.+10     	; 0xd84 <gpio_read_pin+0xa0>
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <gpio_read_pin+0xb0>
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	fc 01       	movw	r30, r24
     d8a:	92 81       	ldd	r25, Z+2	; 0x02
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	99 23       	and	r25, r25
     d90:	09 f0       	breq	.+2      	; 0xd94 <gpio_read_pin+0xb0>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	28 85       	ldd	r18, Y+8	; 0x08
     d9c:	fc 01       	movw	r30, r24
     d9e:	25 83       	std	Z+5, r18	; 0x05

            return state;
     da0:	88 85       	ldd	r24, Y+8	; 0x08
     da2:	14 c0       	rjmp	.+40     	; 0xdcc <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	fc 01       	movw	r30, r24
     daa:	80 85       	ldd	r24, Z+8	; 0x08
     dac:	91 85       	ldd	r25, Z+9	; 0x09
     dae:	9f 83       	std	Y+7, r25	; 0x07
     db0:	8e 83       	std	Y+6, r24	; 0x06
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	9f 81       	ldd	r25, Y+7	; 0x07
     db6:	06 97       	sbiw	r24, 0x06	; 6
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	06 96       	adiw	r24, 0x06	; 6
     dc2:	86 50       	subi	r24, 0x06	; 6
     dc4:	91 40       	sbci	r25, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <gpio_read_pin+0xe6>
     dc8:	a4 cf       	rjmp	.-184    	; 0xd12 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
}
     dcc:	29 96       	adiw	r28, 0x09	; 9
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <gpio_debouncer+0xa>
     de8:	00 d0       	rcall	.+0      	; 0xdea <gpio_debouncer+0xc>
     dea:	00 d0       	rcall	.+0      	; 0xdec <gpio_debouncer+0xe>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     df0:	80 91 08 01 	lds	r24, 0x0108
     df4:	90 91 09 01 	lds	r25, 0x0109
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	06 97       	sbiw	r24, 0x06	; 6
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	1d c0       	rjmp	.+58     	; 0xe42 <gpio_debouncer+0x64>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     e08:	00 91 4e 01 	lds	r16, 0x014E
     e0c:	10 91 4f 01 	lds	r17, 0x014F
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	34 df       	rcall	.-408    	; 0xc82 <__gpio_read_pin>
     e1a:	28 2f       	mov	r18, r24
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	80 0f       	add	r24, r16
     e22:	91 1f       	adc	r25, r17
     e24:	02 96       	adiw	r24, 0x02	; 2
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	fc 01       	movw	r30, r24
     e30:	80 85       	ldd	r24, Z+8	; 0x08
     e32:	91 85       	ldd	r25, Z+9	; 0x09
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	06 97       	sbiw	r24, 0x06	; 6
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	06 96       	adiw	r24, 0x06	; 6
     e48:	86 50       	subi	r24, 0x06	; 6
     e4a:	91 40       	sbci	r25, 0x01	; 1
     e4c:	e9 f6       	brne	.-70     	; 0xe08 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     e4e:	80 91 4e 01 	lds	r24, 0x014E
     e52:	90 91 4f 01 	lds	r25, 0x014F
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	90 93 4f 01 	sts	0x014F, r25
     e5c:	80 93 4e 01 	sts	0x014E, r24
     e60:	03 97       	sbiw	r24, 0x03	; 3
     e62:	21 f4       	brne	.+8      	; 0xe6c <gpio_debouncer+0x8e>
        count = 0;
     e64:	10 92 4f 01 	sts	0x014F, r1
     e68:	10 92 4e 01 	sts	0x014E, r1
	
}
     e6c:	26 96       	adiw	r28, 0x06	; 6
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <odometry_set_speed>:
	buffer[2] = distance & 0xFF;
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
		_delay_ms(50);

	return odometry_wait_until_done(callback);
}
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	67 97       	sbiw	r28, 0x17	; 23
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	8f 8b       	std	Y+23, r24	; 0x17
     e98:	80 91 50 01 	lds	r24, 0x0150
     e9c:	9f 89       	ldd	r25, Y+23	; 0x17
     e9e:	98 17       	cp	r25, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <odometry_set_speed+0x22>
     ea2:	7b c0       	rjmp	.+246    	; 0xf9a <odometry_set_speed+0x118>
     ea4:	86 e5       	ldi	r24, 0x56	; 86
     ea6:	8f 87       	std	Y+15, r24	; 0x0f
     ea8:	8f 89       	ldd	r24, Y+23	; 0x17
     eaa:	88 8b       	std	Y+16, r24	; 0x10
     eac:	6c c0       	rjmp	.+216    	; 0xf86 <odometry_set_speed+0x104>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a8 e4       	ldi	r26, 0x48	; 72
     eb4:	b2 e4       	ldi	r27, 0x42	; 66
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	ab 83       	std	Y+3, r26	; 0x03
     ebc:	bc 83       	std	Y+4, r27	; 0x04
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e4       	ldi	r19, 0x40	; 64
     ec2:	4c e1       	ldi	r20, 0x1C	; 28
     ec4:	55 e4       	ldi	r21, 0x45	; 69
     ec6:	69 81       	ldd	r22, Y+1	; 0x01
     ec8:	7a 81       	ldd	r23, Y+2	; 0x02
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	bc d7       	rcall	.+3960   	; 0x1e48 <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	af 83       	std	Y+7, r26	; 0x07
     eda:	b8 87       	std	Y+8, r27	; 0x08
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	6d 81       	ldd	r22, Y+5	; 0x05
     ee6:	7e 81       	ldd	r23, Y+6	; 0x06
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	5f d6       	rcall	.+3262   	; 0x1bac <__cmpsf2>
     eee:	88 23       	and	r24, r24
     ef0:	2c f4       	brge	.+10     	; 0xefc <odometry_set_speed+0x7a>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9a 87       	std	Y+10, r25	; 0x0a
     ef8:	89 87       	std	Y+9, r24	; 0x09
     efa:	3b c0       	rjmp	.+118    	; 0xf72 <odometry_set_speed+0xf0>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	4f e7       	ldi	r20, 0x7F	; 127
     f02:	57 e4       	ldi	r21, 0x47	; 71
     f04:	6d 81       	ldd	r22, Y+5	; 0x05
     f06:	7e 81       	ldd	r23, Y+6	; 0x06
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	98 85       	ldd	r25, Y+8	; 0x08
     f0c:	99 d7       	rcall	.+3890   	; 0x1e40 <__gesf2>
     f0e:	18 16       	cp	r1, r24
     f10:	3c f5       	brge	.+78     	; 0xf60 <odometry_set_speed+0xde>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	7a 81       	ldd	r23, Y+2	; 0x02
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	92 d7       	rcall	.+3876   	; 0x1e48 <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	ab d6       	rcall	.+3414   	; 0x1c84 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9a 87       	std	Y+10, r25	; 0x0a
     f34:	89 87       	std	Y+9, r24	; 0x09
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <odometry_set_speed+0xd4>
     f38:	8a ef       	ldi	r24, 0xFA	; 250
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9c 87       	std	Y+12, r25	; 0x0c
     f3e:	8b 87       	std	Y+11, r24	; 0x0b
     f40:	8b 85       	ldd	r24, Y+11	; 0x0b
     f42:	9c 85       	ldd	r25, Y+12	; 0x0c
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <odometry_set_speed+0xc2>
     f48:	9c 87       	std	Y+12, r25	; 0x0c
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	89 2b       	or	r24, r25
     f5c:	69 f7       	brne	.-38     	; 0xf38 <odometry_set_speed+0xb6>
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <odometry_set_speed+0x104>
     f60:	6d 81       	ldd	r22, Y+5	; 0x05
     f62:	7e 81       	ldd	r23, Y+6	; 0x06
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	8d d6       	rcall	.+3354   	; 0x1c84 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9a 87       	std	Y+10, r25	; 0x0a
     f70:	89 87       	std	Y+9, r24	; 0x09
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	9e 87       	std	Y+14, r25	; 0x0e
     f78:	8d 87       	std	Y+13, r24	; 0x0d
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <odometry_set_speed+0xfc>
     f82:	9e 87       	std	Y+14, r25	; 0x0e
     f84:	8d 87       	std	Y+13, r24	; 0x0d
     f86:	ce 01       	movw	r24, r28
     f88:	0f 96       	adiw	r24, 0x0f	; 15
     f8a:	63 ec       	ldi	r22, 0xC3	; 195
     f8c:	bc dc       	rcall	.-1672   	; 0x906 <CAN_Write>
     f8e:	88 23       	and	r24, r24
     f90:	09 f0       	breq	.+2      	; 0xf94 <odometry_set_speed+0x112>
     f92:	8d cf       	rjmp	.-230    	; 0xeae <odometry_set_speed+0x2c>
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	80 93 50 01 	sts	0x0150, r24
     f9a:	67 96       	adiw	r28, 0x17	; 23
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <odometry_query_position>:
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	66 97       	sbiw	r28, 0x16	; 22
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	80 e5       	ldi	r24, 0x50	; 80
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	6c c0       	rjmp	.+216    	; 0x109e <odometry_query_position+0xf2>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a8 e4       	ldi	r26, 0x48	; 72
     fcc:	b2 e4       	ldi	r27, 0x42	; 66
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	ab 83       	std	Y+3, r26	; 0x03
     fd4:	bc 83       	std	Y+4, r27	; 0x04
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e4       	ldi	r19, 0x40	; 64
     fda:	4c e1       	ldi	r20, 0x1C	; 28
     fdc:	55 e4       	ldi	r21, 0x45	; 69
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	7a 81       	ldd	r23, Y+2	; 0x02
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	30 d7       	rcall	.+3680   	; 0x1e48 <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	af 83       	std	Y+7, r26	; 0x07
     ff2:	b8 87       	std	Y+8, r27	; 0x08
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	6d 81       	ldd	r22, Y+5	; 0x05
     ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	d3 d5       	rcall	.+2982   	; 0x1bac <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	2c f4       	brge	.+10     	; 0x1014 <odometry_query_position+0x68>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9a 87       	std	Y+10, r25	; 0x0a
    1010:	89 87       	std	Y+9, r24	; 0x09
    1012:	3b c0       	rjmp	.+118    	; 0x108a <odometry_query_position+0xde>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	6d 81       	ldd	r22, Y+5	; 0x05
    101e:	7e 81       	ldd	r23, Y+6	; 0x06
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	0d d7       	rcall	.+3610   	; 0x1e40 <__gesf2>
    1026:	18 16       	cp	r1, r24
    1028:	3c f5       	brge	.+78     	; 0x1078 <odometry_query_position+0xcc>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	69 81       	ldd	r22, Y+1	; 0x01
    1034:	7a 81       	ldd	r23, Y+2	; 0x02
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	06 d7       	rcall	.+3596   	; 0x1e48 <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	1f d6       	rcall	.+3134   	; 0x1c84 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9a 87       	std	Y+10, r25	; 0x0a
    104c:	89 87       	std	Y+9, r24	; 0x09
    104e:	0f c0       	rjmp	.+30     	; 0x106e <odometry_query_position+0xc2>
    1050:	8a ef       	ldi	r24, 0xFA	; 250
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	8b 87       	std	Y+11, r24	; 0x0b
    1058:	8b 85       	ldd	r24, Y+11	; 0x0b
    105a:	9c 85       	ldd	r25, Y+12	; 0x0c
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <odometry_query_position+0xb0>
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	8b 87       	std	Y+11, r24	; 0x0b
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	9a 87       	std	Y+10, r25	; 0x0a
    106c:	89 87       	std	Y+9, r24	; 0x09
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	89 2b       	or	r24, r25
    1074:	69 f7       	brne	.-38     	; 0x1050 <odometry_query_position+0xa4>
    1076:	13 c0       	rjmp	.+38     	; 0x109e <odometry_query_position+0xf2>
    1078:	6d 81       	ldd	r22, Y+5	; 0x05
    107a:	7e 81       	ldd	r23, Y+6	; 0x06
    107c:	8f 81       	ldd	r24, Y+7	; 0x07
    107e:	98 85       	ldd	r25, Y+8	; 0x08
    1080:	01 d6       	rcall	.+3074   	; 0x1c84 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9a 87       	std	Y+10, r25	; 0x0a
    1088:	89 87       	std	Y+9, r24	; 0x09
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	9e 87       	std	Y+14, r25	; 0x0e
    1090:	8d 87       	std	Y+13, r24	; 0x0d
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	9e 85       	ldd	r25, Y+14	; 0x0e
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <odometry_query_position+0xea>
    109a:	9e 87       	std	Y+14, r25	; 0x0e
    109c:	8d 87       	std	Y+13, r24	; 0x0d
    109e:	ce 01       	movw	r24, r28
    10a0:	0f 96       	adiw	r24, 0x0f	; 15
    10a2:	63 ec       	ldi	r22, 0xC3	; 195
    10a4:	30 dc       	rcall	.-1952   	; 0x906 <CAN_Write>
    10a6:	88 23       	and	r24, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <odometry_query_position+0x100>
    10aa:	8d cf       	rjmp	.-230    	; 0xfc6 <odometry_query_position+0x1a>
    10ac:	ce 01       	movw	r24, r28
    10ae:	0f 96       	adiw	r24, 0x0f	; 15
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	b9 db       	rcall	.-2190   	; 0x826 <CAN_Read>
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	80 93 10 01 	sts	0x0110, r24
    10ba:	88 89       	ldd	r24, Y+16	; 0x10
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	38 2f       	mov	r19, r24
    10c2:	22 27       	eor	r18, r18
    10c4:	89 89       	ldd	r24, Y+17	; 0x11
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	82 2b       	or	r24, r18
    10cc:	93 2b       	or	r25, r19
    10ce:	90 93 0b 01 	sts	0x010B, r25
    10d2:	80 93 0a 01 	sts	0x010A, r24
    10d6:	8a 89       	ldd	r24, Y+18	; 0x12
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	38 2f       	mov	r19, r24
    10de:	22 27       	eor	r18, r18
    10e0:	8b 89       	ldd	r24, Y+19	; 0x13
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	82 2b       	or	r24, r18
    10e8:	93 2b       	or	r25, r19
    10ea:	90 93 0d 01 	sts	0x010D, r25
    10ee:	80 93 0c 01 	sts	0x010C, r24
    10f2:	8c 89       	ldd	r24, Y+20	; 0x14
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	38 2f       	mov	r19, r24
    10fa:	22 27       	eor	r18, r18
    10fc:	8d 89       	ldd	r24, Y+21	; 0x15
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	82 2b       	or	r24, r18
    1104:	93 2b       	or	r25, r19
    1106:	90 93 0f 01 	sts	0x010F, r25
    110a:	80 93 0e 01 	sts	0x010E, r24
    110e:	66 96       	adiw	r28, 0x16	; 22
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <odometry_wait_until_done>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	00 d0       	rcall	.+0      	; 0x1126 <odometry_wait_until_done+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <odometry_wait_until_done+0x8>
    1128:	00 d0       	rcall	.+0      	; 0x112a <odometry_wait_until_done+0xa>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	aa d3       	rcall	.+1876   	; 0x1888 <system_get_system_time>
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	ab 83       	std	Y+3, r26	; 0x03
    1142:	bc 83       	std	Y+4, r27	; 0x04
    1144:	33 df       	rcall	.-410    	; 0xfac <odometry_query_position>
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	89 2b       	or	r24, r25
    114c:	71 f0       	breq	.+28     	; 0x116a <odometry_wait_until_done+0x4a>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	ab 81       	ldd	r26, Y+3	; 0x03
    1154:	bc 81       	ldd	r27, Y+4	; 0x04
    1156:	2d 81       	ldd	r18, Y+5	; 0x05
    1158:	3e 81       	ldd	r19, Y+6	; 0x06
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	f9 01       	movw	r30, r18
    1160:	09 95       	icall
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	11 f4       	brne	.+4      	; 0x116a <odometry_wait_until_done+0x4a>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	09 c0       	rjmp	.+18     	; 0x117c <odometry_wait_until_done+0x5c>
    116a:	80 91 10 01 	lds	r24, 0x0110
    116e:	8d 34       	cpi	r24, 0x4D	; 77
    1170:	49 f3       	breq	.-46     	; 0x1144 <odometry_wait_until_done+0x24>
    1172:	80 91 10 01 	lds	r24, 0x0110
    1176:	82 35       	cpi	r24, 0x52	; 82
    1178:	29 f3       	breq	.-54     	; 0x1144 <odometry_wait_until_done+0x24>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6c 97       	sbiw	r28, 0x1c	; 28
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	98 8f       	std	Y+24, r25	; 0x18
    11a4:	8f 8b       	std	Y+23, r24	; 0x17
    11a6:	69 8f       	std	Y+25, r22	; 0x19
    11a8:	4a 8f       	std	Y+26, r20	; 0x1a
    11aa:	3c 8f       	std	Y+28, r19	; 0x1c
    11ac:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    11ae:	89 8d       	ldd	r24, Y+25	; 0x19
    11b0:	68 de       	rcall	.-816    	; 0xe82 <odometry_set_speed>

	buffer[0] = 'G';
    11b2:	87 e4       	ldi	r24, 0x47	; 71
    11b4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    11b6:	8f 89       	ldd	r24, Y+23	; 0x17
    11b8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	89 2f       	mov	r24, r25
    11c2:	99 0f       	add	r25, r25
    11c4:	99 0b       	sbc	r25, r25
    11c6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	fc 01       	movw	r30, r24
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	fc 01       	movw	r30, r24
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	89 2f       	mov	r24, r25
    11e0:	99 0f       	add	r25, r25
    11e2:	99 0b       	sbc	r25, r25
    11e4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	fc 01       	movw	r30, r24
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    11f2:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    11f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11f6:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    11f8:	6c c0       	rjmp	.+216    	; 0x12d2 <odometry_move_to_position+0x144>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a8 e4       	ldi	r26, 0x48	; 72
    1200:	b2 e4       	ldi	r27, 0x42	; 66
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	ab 83       	std	Y+3, r26	; 0x03
    1208:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e4       	ldi	r19, 0x40	; 64
    120e:	4c e1       	ldi	r20, 0x1C	; 28
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	69 81       	ldd	r22, Y+1	; 0x01
    1214:	7a 81       	ldd	r23, Y+2	; 0x02
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	16 d6       	rcall	.+3116   	; 0x1e48 <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	af 83       	std	Y+7, r26	; 0x07
    1226:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	6d 81       	ldd	r22, Y+5	; 0x05
    1232:	7e 81       	ldd	r23, Y+6	; 0x06
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	b9 d4       	rcall	.+2418   	; 0x1bac <__cmpsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <odometry_move_to_position+0xba>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9a 87       	std	Y+10, r25	; 0x0a
    1244:	89 87       	std	Y+9, r24	; 0x09
    1246:	3b c0       	rjmp	.+118    	; 0x12be <odometry_move_to_position+0x130>
	else if (__tmp > 65535)
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	3f ef       	ldi	r19, 0xFF	; 255
    124c:	4f e7       	ldi	r20, 0x7F	; 127
    124e:	57 e4       	ldi	r21, 0x47	; 71
    1250:	6d 81       	ldd	r22, Y+5	; 0x05
    1252:	7e 81       	ldd	r23, Y+6	; 0x06
    1254:	8f 81       	ldd	r24, Y+7	; 0x07
    1256:	98 85       	ldd	r25, Y+8	; 0x08
    1258:	f3 d5       	rcall	.+3046   	; 0x1e40 <__gesf2>
    125a:	18 16       	cp	r1, r24
    125c:	3c f5       	brge	.+78     	; 0x12ac <odometry_move_to_position+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	7a 81       	ldd	r23, Y+2	; 0x02
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	ec d5       	rcall	.+3032   	; 0x1e48 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	05 d5       	rcall	.+2570   	; 0x1c84 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9a 87       	std	Y+10, r25	; 0x0a
    1280:	89 87       	std	Y+9, r24	; 0x09
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <odometry_move_to_position+0x114>
    1284:	8a ef       	ldi	r24, 0xFA	; 250
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	8b 85       	ldd	r24, Y+11	; 0x0b
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <odometry_move_to_position+0x102>
    1294:	9c 87       	std	Y+12, r25	; 0x0c
    1296:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	9a 87       	std	Y+10, r25	; 0x0a
    12a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	89 2b       	or	r24, r25
    12a8:	69 f7       	brne	.-38     	; 0x1284 <odometry_move_to_position+0xf6>
    12aa:	13 c0       	rjmp	.+38     	; 0x12d2 <odometry_move_to_position+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	e7 d4       	rcall	.+2510   	; 0x1c84 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9a 87       	std	Y+10, r25	; 0x0a
    12bc:	89 87       	std	Y+9, r24	; 0x09
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	9e 87       	std	Y+14, r25	; 0x0e
    12c4:	8d 87       	std	Y+13, r24	; 0x0d
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <odometry_move_to_position+0x13c>
    12ce:	9e 87       	std	Y+14, r25	; 0x0e
    12d0:	8d 87       	std	Y+13, r24	; 0x0d
    12d2:	ce 01       	movw	r24, r28
    12d4:	0f 96       	adiw	r24, 0x0f	; 15
    12d6:	63 ec       	ldi	r22, 0xC3	; 195
    12d8:	16 db       	rcall	.-2516   	; 0x906 <CAN_Write>
    12da:	88 23       	and	r24, r24
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <odometry_move_to_position+0x152>
    12de:	8d cf       	rjmp	.-230    	; 0x11fa <odometry_move_to_position+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	1d df       	rcall	.-454    	; 0x1120 <odometry_wait_until_done>
}
    12e6:	6c 96       	adiw	r28, 0x1c	; 28
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	68 97       	sbiw	r28, 0x18	; 24
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	98 8f       	std	Y+24, r25	; 0x18
    130e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1310:	89 e4       	ldi	r24, 0x49	; 73
    1312:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1314:	8f 89       	ldd	r24, Y+23	; 0x17
    1316:	98 8d       	ldd	r25, Y+24	; 0x18
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	89 2f       	mov	r24, r25
    1320:	99 0f       	add	r25, r25
    1322:	99 0b       	sbc	r25, r25
    1324:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	fc 01       	movw	r30, r24
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	89 2f       	mov	r24, r25
    133e:	99 0f       	add	r25, r25
    1340:	99 0b       	sbc	r25, r25
    1342:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	fc 01       	movw	r30, r24
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    1350:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1352:	8f 89       	ldd	r24, Y+23	; 0x17
    1354:	98 8d       	ldd	r25, Y+24	; 0x18
    1356:	fc 01       	movw	r30, r24
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	95 81       	ldd	r25, Z+5	; 0x05
    135c:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    135e:	8f 89       	ldd	r24, Y+23	; 0x17
    1360:	98 8d       	ldd	r25, Y+24	; 0x18
    1362:	fc 01       	movw	r30, r24
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	90 93 0b 01 	sts	0x010B, r25
    136c:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1370:	8f 89       	ldd	r24, Y+23	; 0x17
    1372:	98 8d       	ldd	r25, Y+24	; 0x18
    1374:	fc 01       	movw	r30, r24
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	90 93 0d 01 	sts	0x010D, r25
    137e:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	fc 01       	movw	r30, r24
    1388:	84 81       	ldd	r24, Z+4	; 0x04
    138a:	95 81       	ldd	r25, Z+5	; 0x05
    138c:	90 93 0f 01 	sts	0x010F, r25
    1390:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1394:	6c c0       	rjmp	.+216    	; 0x146e <odometry_set_position+0x176>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a8 e4       	ldi	r26, 0x48	; 72
    139c:	b2 e4       	ldi	r27, 0x42	; 66
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	ab 83       	std	Y+3, r26	; 0x03
    13a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e4       	ldi	r19, 0x40	; 64
    13aa:	4c e1       	ldi	r20, 0x1C	; 28
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	69 81       	ldd	r22, Y+1	; 0x01
    13b0:	7a 81       	ldd	r23, Y+2	; 0x02
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	48 d5       	rcall	.+2704   	; 0x1e48 <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	af 83       	std	Y+7, r26	; 0x07
    13c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e8       	ldi	r20, 0x80	; 128
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	6d 81       	ldd	r22, Y+5	; 0x05
    13ce:	7e 81       	ldd	r23, Y+6	; 0x06
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	eb d3       	rcall	.+2006   	; 0x1bac <__cmpsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <odometry_set_position+0xec>
		__ticks = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9a 87       	std	Y+10, r25	; 0x0a
    13e0:	89 87       	std	Y+9, r24	; 0x09
    13e2:	3b c0       	rjmp	.+118    	; 0x145a <odometry_set_position+0x162>
	else if (__tmp > 65535)
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	6d 81       	ldd	r22, Y+5	; 0x05
    13ee:	7e 81       	ldd	r23, Y+6	; 0x06
    13f0:	8f 81       	ldd	r24, Y+7	; 0x07
    13f2:	98 85       	ldd	r25, Y+8	; 0x08
    13f4:	25 d5       	rcall	.+2634   	; 0x1e40 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	3c f5       	brge	.+78     	; 0x1448 <odometry_set_position+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	51 e4       	ldi	r21, 0x41	; 65
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	7a 81       	ldd	r23, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	1e d5       	rcall	.+2620   	; 0x1e48 <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	37 d4       	rcall	.+2158   	; 0x1c84 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9a 87       	std	Y+10, r25	; 0x0a
    141c:	89 87       	std	Y+9, r24	; 0x09
    141e:	0f c0       	rjmp	.+30     	; 0x143e <odometry_set_position+0x146>
    1420:	8a ef       	ldi	r24, 0xFA	; 250
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 87       	std	Y+12, r25	; 0x0c
    1426:	8b 87       	std	Y+11, r24	; 0x0b
    1428:	8b 85       	ldd	r24, Y+11	; 0x0b
    142a:	9c 85       	ldd	r25, Y+12	; 0x0c
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <odometry_set_position+0x134>
    1430:	9c 87       	std	Y+12, r25	; 0x0c
    1432:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	9a 87       	std	Y+10, r25	; 0x0a
    143c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	89 2b       	or	r24, r25
    1444:	69 f7       	brne	.-38     	; 0x1420 <odometry_set_position+0x128>
    1446:	13 c0       	rjmp	.+38     	; 0x146e <odometry_set_position+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1448:	6d 81       	ldd	r22, Y+5	; 0x05
    144a:	7e 81       	ldd	r23, Y+6	; 0x06
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	19 d4       	rcall	.+2098   	; 0x1c84 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9a 87       	std	Y+10, r25	; 0x0a
    1458:	89 87       	std	Y+9, r24	; 0x09
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	9e 87       	std	Y+14, r25	; 0x0e
    1460:	8d 87       	std	Y+13, r24	; 0x0d
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <odometry_set_position+0x16e>
    146a:	9e 87       	std	Y+14, r25	; 0x0e
    146c:	8d 87       	std	Y+13, r24	; 0x0d
    146e:	ce 01       	movw	r24, r28
    1470:	0f 96       	adiw	r24, 0x0f	; 15
    1472:	63 ec       	ldi	r22, 0xC3	; 195
    1474:	48 da       	rcall	.-2928   	; 0x906 <CAN_Write>
    1476:	88 23       	and	r24, r24
    1478:	09 f0       	breq	.+2      	; 0x147c <odometry_set_position+0x184>
    147a:	8d cf       	rjmp	.-230    	; 0x1396 <odometry_set_position+0x9e>
		_delay_ms(50);
}
    147c:	68 96       	adiw	r28, 0x18	; 24
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <purpleside>:
	{{100,100},NORMAL_SPEED,FORWARD,NULL},
	{{200,100},NORMAL_SPEED,FORWARD,NULL}
};

void purpleside(void)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	2b 97       	sbiw	r28, 0x0b	; 11
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    14a2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position	 = 0;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	8b 83       	std	Y+3, r24	; 0x03
	
	starting_position.x		= 0;
    14aa:	1e 82       	std	Y+6, r1	; 0x06
    14ac:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    14ae:	18 86       	std	Y+8, r1	; 0x08
    14b0:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    14b2:	1a 86       	std	Y+10, r1	; 0x0a
    14b4:	19 86       	std	Y+9, r1	; 0x09
	
	odometry_set_position(&starting_position);
    14b6:	ce 01       	movw	r24, r28
    14b8:	05 96       	adiw	r24, 0x05	; 5
    14ba:	1e df       	rcall	.-452    	; 0x12f8 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <purpleside+0x3a>
    14c6:	40 c0       	rjmp	.+128    	; 0x1548 <purpleside+0xba>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	3a c0       	rjmp	.+116    	; 0x1542 <purpleside+0xb4>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	6b e0       	ldi	r22, 0x0B	; 11
    14da:	62 9f       	mul	r22, r18
    14dc:	c0 01       	movw	r24, r0
    14de:	63 9f       	mul	r22, r19
    14e0:	90 0d       	add	r25, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	87 5e       	subi	r24, 0xE7	; 231
    14e6:	9e 4f       	sbci	r25, 0xFE	; 254
    14e8:	dc 01       	movw	r26, r24
    14ea:	ec 91       	ld	r30, X
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	6b e0       	ldi	r22, 0x0B	; 11
    14f4:	62 9f       	mul	r22, r18
    14f6:	c0 01       	movw	r24, r0
    14f8:	63 9f       	mul	r22, r19
    14fa:	90 0d       	add	r25, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	88 5e       	subi	r24, 0xE8	; 232
    1500:	9e 4f       	sbci	r25, 0xFE	; 254
    1502:	dc 01       	movw	r26, r24
    1504:	7c 91       	ld	r23, X
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	6b e0       	ldi	r22, 0x0B	; 11
    150e:	62 9f       	mul	r22, r18
    1510:	c0 01       	movw	r24, r0
    1512:	63 9f       	mul	r22, r19
    1514:	90 0d       	add	r25, r0
    1516:	11 24       	eor	r1, r1
    1518:	8f 5e       	subi	r24, 0xEF	; 239
    151a:	9e 4f       	sbci	r25, 0xFE	; 254
    151c:	9a 01       	movw	r18, r20
    151e:	4e 2f       	mov	r20, r30
    1520:	67 2f       	mov	r22, r23
    1522:	35 de       	rcall	.-918    	; 0x118e <odometry_move_to_position>
    1524:	8c 83       	std	Y+4, r24	; 0x04
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	09 f4       	brne	.+2      	; 0x152e <purpleside+0xa0>
					{
						break;
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <purpleside+0xba>
					}
					if(current_position == 0)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	21 f0       	breq	.+8      	; 0x153c <purpleside+0xae>
					{
						
					}
					else if(current_position == 1)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	09 f4       	brne	.+2      	; 0x153c <purpleside+0xae>
					{
						while(1);
    153a:	ff cf       	rjmp	.-2      	; 0x153a <purpleside+0xac>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	88 23       	and	r24, r24
    1546:	19 f2       	breq	.-122    	; 0x14ce <purpleside+0x40>
					{
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    1548:	b9 cf       	rjmp	.-142    	; 0x14bc <purpleside+0x2e>

0000154a <timer_init>:
    timer_callback = callback;
}


void timer_init(unsigned int freq)
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	00 d0       	rcall	.+0      	; 0x1554 <timer_init+0xa>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	fc 01       	movw	r30, r24
    1562:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1564:	81 e8       	ldi	r24, 0x81	; 129
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	29 e0       	ldi	r18, 0x09	; 9
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    156e:	08 e8       	ldi	r16, 0x88	; 136
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	cc 01       	movw	r24, r24
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	ad d3       	rcall	.+1882   	; 0x1cdc <__floatunsisf>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9c 01       	movw	r18, r24
    1588:	ad 01       	movw	r20, r26
    158a:	60 e8       	ldi	r22, 0x80	; 128
    158c:	76 e9       	ldi	r23, 0x96	; 150
    158e:	88 e1       	ldi	r24, 0x18	; 24
    1590:	9b e4       	ldi	r25, 0x4B	; 75
    1592:	10 d3       	rcall	.+1568   	; 0x1bb4 <__divsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	9f d2       	rcall	.+1342   	; 0x1ae4 <__addsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	6a d3       	rcall	.+1748   	; 0x1c84 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	f8 01       	movw	r30, r16
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    15ba:	8f e6       	ldi	r24, 0x6F	; 111
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	22 e0       	ldi	r18, 0x02	; 2
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18

	SREG |= 0x80;
    15c4:	8f e5       	ldi	r24, 0x5F	; 95
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2f e5       	ldi	r18, 0x5F	; 95
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	20 68       	ori	r18, 0x80	; 128
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	00 90 5f 00 	lds	r0, 0x005F
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	00 90 5b 00 	lds	r0, 0x005B
    15f4:	0f 92       	push	r0
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1616:	80 91 55 01 	lds	r24, 0x0155
    161a:	90 91 56 01 	lds	r25, 0x0156
    161e:	89 2b       	or	r24, r25
    1620:	31 f0       	breq	.+12     	; 0x162e <__vector_12+0x4a>
        timer_callback();
    1622:	80 91 55 01 	lds	r24, 0x0155
    1626:	90 91 56 01 	lds	r25, 0x0156
    162a:	fc 01       	movw	r30, r24
    162c:	09 95       	icall
	sys_time++;
    162e:	80 91 51 01 	lds	r24, 0x0151
    1632:	90 91 52 01 	lds	r25, 0x0152
    1636:	a0 91 53 01 	lds	r26, 0x0153
    163a:	b0 91 54 01 	lds	r27, 0x0154
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	a1 1d       	adc	r26, r1
    1642:	b1 1d       	adc	r27, r1
    1644:	80 93 51 01 	sts	0x0151, r24
    1648:	90 93 52 01 	sts	0x0152, r25
    164c:	a0 93 53 01 	sts	0x0153, r26
    1650:	b0 93 54 01 	sts	0x0154, r27
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	00 92 5b 00 	sts	0x005B, r0
    1676:	0f 90       	pop	r0
    1678:	00 92 5f 00 	sts	0x005F, r0
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <system_init>:

void system_init(void)
{
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	6c 97       	sbiw	r28, 0x1c	; 28
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	aa e7       	ldi	r26, 0x7A	; 122
    169c:	b4 e4       	ldi	r27, 0x44	; 68
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	ab 83       	std	Y+3, r26	; 0x03
    16a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e4       	ldi	r19, 0x40	; 64
    16aa:	4c e1       	ldi	r20, 0x1C	; 28
    16ac:	55 e4       	ldi	r21, 0x45	; 69
    16ae:	69 81       	ldd	r22, Y+1	; 0x01
    16b0:	7a 81       	ldd	r23, Y+2	; 0x02
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	c8 d3       	rcall	.+1936   	; 0x1e48 <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	af 83       	std	Y+7, r26	; 0x07
    16c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	6d 81       	ldd	r22, Y+5	; 0x05
    16ce:	7e 81       	ldd	r23, Y+6	; 0x06
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	98 85       	ldd	r25, Y+8	; 0x08
    16d4:	6b d2       	rcall	.+1238   	; 0x1bac <__cmpsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <system_init+0x62>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9a 87       	std	Y+10, r25	; 0x0a
    16e0:	89 87       	std	Y+9, r24	; 0x09
    16e2:	3b c0       	rjmp	.+118    	; 0x175a <system_init+0xd8>
	else if (__tmp > 65535)
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	6d 81       	ldd	r22, Y+5	; 0x05
    16ee:	7e 81       	ldd	r23, Y+6	; 0x06
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	a5 d3       	rcall	.+1866   	; 0x1e40 <__gesf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	3c f5       	brge	.+78     	; 0x1748 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	69 81       	ldd	r22, Y+1	; 0x01
    1704:	7a 81       	ldd	r23, Y+2	; 0x02
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	9e d3       	rcall	.+1852   	; 0x1e48 <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	b7 d2       	rcall	.+1390   	; 0x1c84 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9a 87       	std	Y+10, r25	; 0x0a
    171c:	89 87       	std	Y+9, r24	; 0x09
    171e:	0f c0       	rjmp	.+30     	; 0x173e <system_init+0xbc>
    1720:	8a ef       	ldi	r24, 0xFA	; 250
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	8b 87       	std	Y+11, r24	; 0x0b
    1728:	8b 85       	ldd	r24, Y+11	; 0x0b
    172a:	9c 85       	ldd	r25, Y+12	; 0x0c
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <system_init+0xaa>
    1730:	9c 87       	std	Y+12, r25	; 0x0c
    1732:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9a 87       	std	Y+10, r25	; 0x0a
    173c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	89 2b       	or	r24, r25
    1744:	69 f7       	brne	.-38     	; 0x1720 <system_init+0x9e>
    1746:	13 c0       	rjmp	.+38     	; 0x176e <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6d 81       	ldd	r22, Y+5	; 0x05
    174a:	7e 81       	ldd	r23, Y+6	; 0x06
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	99 d2       	rcall	.+1330   	; 0x1c84 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9a 87       	std	Y+10, r25	; 0x0a
    1758:	89 87       	std	Y+9, r24	; 0x09
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	9e 87       	std	Y+14, r25	; 0x0e
    1760:	8d 87       	std	Y+13, r24	; 0x0d
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <system_init+0xe4>
    176a:	9e 87       	std	Y+14, r25	; 0x0e
    176c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
    176e:	83 e3       	ldi	r24, 0x33	; 51
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	2f ef       	ldi	r18, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
	PORTG = 0xFF;
    1778:	84 e3       	ldi	r24, 0x34	; 52
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	aa e7       	ldi	r26, 0x7A	; 122
    1788:	b4 e4       	ldi	r27, 0x44	; 68
    178a:	8f 87       	std	Y+15, r24	; 0x0f
    178c:	98 8b       	std	Y+16, r25	; 0x10
    178e:	a9 8b       	std	Y+17, r26	; 0x11
    1790:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e4       	ldi	r19, 0x40	; 64
    1796:	4c e1       	ldi	r20, 0x1C	; 28
    1798:	55 e4       	ldi	r21, 0x45	; 69
    179a:	6f 85       	ldd	r22, Y+15	; 0x0f
    179c:	78 89       	ldd	r23, Y+16	; 0x10
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	9a 89       	ldd	r25, Y+18	; 0x12
    17a2:	52 d3       	rcall	.+1700   	; 0x1e48 <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	ad 8b       	std	Y+21, r26	; 0x15
    17ae:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	6b 89       	ldd	r22, Y+19	; 0x13
    17ba:	7c 89       	ldd	r23, Y+20	; 0x14
    17bc:	8d 89       	ldd	r24, Y+21	; 0x15
    17be:	9e 89       	ldd	r25, Y+22	; 0x16
    17c0:	f5 d1       	rcall	.+1002   	; 0x1bac <__cmpsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <system_init+0x14e>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	98 8f       	std	Y+24, r25	; 0x18
    17cc:	8f 8b       	std	Y+23, r24	; 0x17
    17ce:	3b c0       	rjmp	.+118    	; 0x1846 <system_init+0x1c4>
	else if (__tmp > 65535)
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	6b 89       	ldd	r22, Y+19	; 0x13
    17da:	7c 89       	ldd	r23, Y+20	; 0x14
    17dc:	8d 89       	ldd	r24, Y+21	; 0x15
    17de:	9e 89       	ldd	r25, Y+22	; 0x16
    17e0:	2f d3       	rcall	.+1630   	; 0x1e40 <__gesf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	3c f5       	brge	.+78     	; 0x1834 <system_init+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    17f0:	78 89       	ldd	r23, Y+16	; 0x10
    17f2:	89 89       	ldd	r24, Y+17	; 0x11
    17f4:	9a 89       	ldd	r25, Y+18	; 0x12
    17f6:	28 d3       	rcall	.+1616   	; 0x1e48 <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	41 d2       	rcall	.+1154   	; 0x1c84 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	98 8f       	std	Y+24, r25	; 0x18
    1808:	8f 8b       	std	Y+23, r24	; 0x17
    180a:	0f c0       	rjmp	.+30     	; 0x182a <system_init+0x1a8>
    180c:	8a ef       	ldi	r24, 0xFA	; 250
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9a 8f       	std	Y+26, r25	; 0x1a
    1812:	89 8f       	std	Y+25, r24	; 0x19
    1814:	89 8d       	ldd	r24, Y+25	; 0x19
    1816:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <system_init+0x196>
    181c:	9a 8f       	std	Y+26, r25	; 0x1a
    181e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	98 8f       	std	Y+24, r25	; 0x18
    1828:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	89 2b       	or	r24, r25
    1830:	69 f7       	brne	.-38     	; 0x180c <system_init+0x18a>
    1832:	13 c0       	rjmp	.+38     	; 0x185a <system_init+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6b 89       	ldd	r22, Y+19	; 0x13
    1836:	7c 89       	ldd	r23, Y+20	; 0x14
    1838:	8d 89       	ldd	r24, Y+21	; 0x15
    183a:	9e 89       	ldd	r25, Y+22	; 0x16
    183c:	23 d2       	rcall	.+1094   	; 0x1c84 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	98 8f       	std	Y+24, r25	; 0x18
    1844:	8f 8b       	std	Y+23, r24	; 0x17
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	9c 8f       	std	Y+28, r25	; 0x1c
    184c:	8b 8f       	std	Y+27, r24	; 0x1b
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <system_init+0x1d0>
    1856:	9c 8f       	std	Y+28, r25	; 0x1c
    1858:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
    185a:	84 e3       	ldi	r24, 0x34	; 52
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	fc 01       	movw	r30, r24
    1860:	10 82       	st	Z, r1
	servo_init(50);
    1862:	82 e3       	ldi	r24, 0x32	; 50
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 7f 01 	call	0x2fe	; 0x2fe <servo_init>
	timer_init(1000);
    186a:	88 ee       	ldi	r24, 0xE8	; 232
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	6d de       	rcall	.-806    	; 0x154a <timer_init>
	CAN_Init(1);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 ce 03 	call	0x79c	; 0x79c <CAN_Init>
}
    1876:	6c 96       	adiw	r28, 0x1c	; 28
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1890:	80 91 51 01 	lds	r24, 0x0151
    1894:	90 91 52 01 	lds	r25, 0x0152
    1898:	a0 91 53 01 	lds	r26, 0x0153
    189c:	b0 91 54 01 	lds	r27, 0x0154
}
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	00 90 5f 00 	lds	r0, 0x005F
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	00 90 5b 00 	lds	r0, 0x005B
    18ba:	0f 92       	push	r0
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	80 91 97 01 	lds	r24, 0x0197
    18d4:	88 23       	and	r24, r24
    18d6:	d1 f0       	breq	.+52     	; 0x190c <__vector_23+0x62>
    18d8:	80 91 97 01 	lds	r24, 0x0197
    18dc:	81 50       	subi	r24, 0x01	; 1
    18de:	80 93 97 01 	sts	0x0197, r24
    18e2:	86 ec       	ldi	r24, 0xC6	; 198
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	20 91 98 01 	lds	r18, 0x0198
    18ea:	22 2f       	mov	r18, r18
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	29 5a       	subi	r18, 0xA9	; 169
    18f0:	3e 4f       	sbci	r19, 0xFE	; 254
    18f2:	f9 01       	movw	r30, r18
    18f4:	20 81       	ld	r18, Z
    18f6:	fc 01       	movw	r30, r24
    18f8:	20 83       	st	Z, r18
    18fa:	80 91 98 01 	lds	r24, 0x0198
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 98 01 	sts	0x0198, r24
    1904:	80 34       	cpi	r24, 0x40	; 64
    1906:	11 f4       	brne	.+4      	; 0x190c <__vector_23+0x62>
    1908:	10 92 98 01 	sts	0x0198, r1
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	00 92 5b 00 	sts	0x005B, r0
    1922:	0f 90       	pop	r0
    1924:	00 92 5f 00 	sts	0x005F, r0
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_21>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	00 90 5f 00 	lds	r0, 0x005F
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	00 90 5b 00 	lds	r0, 0x005B
    193e:	0f 92       	push	r0
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	8f 93       	push	r24
    1946:	9f 93       	push	r25
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	1f 92       	push	r1
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	80 ec       	ldi	r24, 0xC0	; 192
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	8c 71       	andi	r24, 0x1C	; 28
    1968:	99 27       	eor	r25, r25
    196a:	89 2b       	or	r24, r25
    196c:	d1 f4       	brne	.+52     	; 0x19a2 <__vector_21+0x74>
    196e:	80 91 d9 01 	lds	r24, 0x01D9
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	26 ec       	ldi	r18, 0xC6	; 198
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	f9 01       	movw	r30, r18
    197c:	20 81       	ld	r18, Z
    197e:	87 56       	subi	r24, 0x67	; 103
    1980:	9e 4f       	sbci	r25, 0xFE	; 254
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
    1986:	80 91 d9 01 	lds	r24, 0x01D9
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	80 93 d9 01 	sts	0x01D9, r24
    1990:	80 34       	cpi	r24, 0x40	; 64
    1992:	11 f4       	brne	.+4      	; 0x1998 <__vector_21+0x6a>
    1994:	10 92 d9 01 	sts	0x01D9, r1
    1998:	80 91 da 01 	lds	r24, 0x01DA
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	80 93 da 01 	sts	0x01DA, r24
    19a2:	0f 90       	pop	r0
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	00 92 5b 00 	sts	0x005B, r0
    19ba:	0f 90       	pop	r0
    19bc:	00 92 5f 00 	sts	0x005F, r0
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	00 90 5f 00 	lds	r0, 0x005F
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	00 90 5b 00 	lds	r0, 0x005B
    19d6:	0f 92       	push	r0
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	ef 93       	push	r30
    19e2:	ff 93       	push	r31
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    19ec:	80 91 1b 02 	lds	r24, 0x021B
    19f0:	88 23       	and	r24, r24
    19f2:	d1 f0       	breq	.+52     	; 0x1a28 <__vector_34+0x62>
	{
		tx1_counter--;
    19f4:	80 91 1b 02 	lds	r24, 0x021B
    19f8:	81 50       	subi	r24, 0x01	; 1
    19fa:	80 93 1b 02 	sts	0x021B, r24
		UDR1=tx1_buffer[tx1_rd_index];
    19fe:	8e ec       	ldi	r24, 0xCE	; 206
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	20 91 1c 02 	lds	r18, 0x021C
    1a06:	22 2f       	mov	r18, r18
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	25 52       	subi	r18, 0x25	; 37
    1a0c:	3e 4f       	sbci	r19, 0xFE	; 254
    1a0e:	f9 01       	movw	r30, r18
    1a10:	20 81       	ld	r18, Z
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    1a16:	80 91 1c 02 	lds	r24, 0x021C
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 1c 02 	sts	0x021C, r24
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__vector_34+0x62>
			tx1_rd_index = 0;
    1a24:	10 92 1c 02 	sts	0x021C, r1
	}
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	00 92 5b 00 	sts	0x005B, r0
    1a3e:	0f 90       	pop	r0
    1a40:	00 92 5f 00 	sts	0x005F, r0
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_32>:

ISR(USART1_RX_vect)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	00 90 5f 00 	lds	r0, 0x005F
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	00 90 5b 00 	lds	r0, 0x005B
    1a5a:	0f 92       	push	r0
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	1f 92       	push	r1
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	8c 71       	andi	r24, 0x1C	; 28
    1a84:	99 27       	eor	r25, r25
    1a86:	89 2b       	or	r24, r25
    1a88:	d1 f4       	brne	.+52     	; 0x1abe <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    1a8a:	80 91 5d 02 	lds	r24, 0x025D
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	2e ec       	ldi	r18, 0xCE	; 206
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	20 81       	ld	r18, Z
    1a9a:	83 5e       	subi	r24, 0xE3	; 227
    1a9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1aa2:	80 91 5d 02 	lds	r24, 0x025D
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	80 93 5d 02 	sts	0x025D, r24
    1aac:	80 34       	cpi	r24, 0x40	; 64
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <__vector_32+0x6a>
		rx1_wr_index = 0;
    1ab0:	10 92 5d 02 	sts	0x025D, r1

		rx1_counter++;
    1ab4:	80 91 5e 02 	lds	r24, 0x025E
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	80 93 5e 02 	sts	0x025E, r24
	}
}
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	00 92 5b 00 	sts	0x005B, r0
    1ad6:	0f 90       	pop	r0
    1ad8:	00 92 5f 00 	sts	0x005F, r0
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <__subsf3>:
    1ae2:	50 58       	subi	r21, 0x80	; 128

00001ae4 <__addsf3>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	0e d0       	rcall	.+28     	; 0x1b06 <__addsf3x>
    1aea:	70 c1       	rjmp	.+736    	; 0x1dcc <__fp_round>
    1aec:	61 d1       	rcall	.+706    	; 0x1db0 <__fp_pscA>
    1aee:	30 f0       	brcs	.+12     	; 0x1afc <__addsf3+0x18>
    1af0:	66 d1       	rcall	.+716    	; 0x1dbe <__fp_pscB>
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__addsf3+0x18>
    1af4:	31 f4       	brne	.+12     	; 0x1b02 <__addsf3+0x1e>
    1af6:	9f 3f       	cpi	r25, 0xFF	; 255
    1af8:	11 f4       	brne	.+4      	; 0x1afe <__addsf3+0x1a>
    1afa:	1e f4       	brtc	.+6      	; 0x1b02 <__addsf3+0x1e>
    1afc:	56 c1       	rjmp	.+684    	; 0x1daa <__fp_nan>
    1afe:	0e f4       	brtc	.+2      	; 0x1b02 <__addsf3+0x1e>
    1b00:	e0 95       	com	r30
    1b02:	e7 fb       	bst	r30, 7
    1b04:	4c c1       	rjmp	.+664    	; 0x1d9e <__fp_inf>

00001b06 <__addsf3x>:
    1b06:	e9 2f       	mov	r30, r25
    1b08:	72 d1       	rcall	.+740    	; 0x1dee <__fp_split3>
    1b0a:	80 f3       	brcs	.-32     	; 0x1aec <__addsf3+0x8>
    1b0c:	ba 17       	cp	r27, r26
    1b0e:	62 07       	cpc	r22, r18
    1b10:	73 07       	cpc	r23, r19
    1b12:	84 07       	cpc	r24, r20
    1b14:	95 07       	cpc	r25, r21
    1b16:	18 f0       	brcs	.+6      	; 0x1b1e <__addsf3x+0x18>
    1b18:	71 f4       	brne	.+28     	; 0x1b36 <__addsf3x+0x30>
    1b1a:	9e f5       	brtc	.+102    	; 0x1b82 <__addsf3x+0x7c>
    1b1c:	8a c1       	rjmp	.+788    	; 0x1e32 <__fp_zero>
    1b1e:	0e f4       	brtc	.+2      	; 0x1b22 <__addsf3x+0x1c>
    1b20:	e0 95       	com	r30
    1b22:	0b 2e       	mov	r0, r27
    1b24:	ba 2f       	mov	r27, r26
    1b26:	a0 2d       	mov	r26, r0
    1b28:	0b 01       	movw	r0, r22
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	90 01       	movw	r18, r0
    1b2e:	0c 01       	movw	r0, r24
    1b30:	ca 01       	movw	r24, r20
    1b32:	a0 01       	movw	r20, r0
    1b34:	11 24       	eor	r1, r1
    1b36:	ff 27       	eor	r31, r31
    1b38:	59 1b       	sub	r21, r25
    1b3a:	99 f0       	breq	.+38     	; 0x1b62 <__addsf3x+0x5c>
    1b3c:	59 3f       	cpi	r21, 0xF9	; 249
    1b3e:	50 f4       	brcc	.+20     	; 0x1b54 <__addsf3x+0x4e>
    1b40:	50 3e       	cpi	r21, 0xE0	; 224
    1b42:	68 f1       	brcs	.+90     	; 0x1b9e <__addsf3x+0x98>
    1b44:	1a 16       	cp	r1, r26
    1b46:	f0 40       	sbci	r31, 0x00	; 0
    1b48:	a2 2f       	mov	r26, r18
    1b4a:	23 2f       	mov	r18, r19
    1b4c:	34 2f       	mov	r19, r20
    1b4e:	44 27       	eor	r20, r20
    1b50:	58 5f       	subi	r21, 0xF8	; 248
    1b52:	f3 cf       	rjmp	.-26     	; 0x1b3a <__addsf3x+0x34>
    1b54:	46 95       	lsr	r20
    1b56:	37 95       	ror	r19
    1b58:	27 95       	ror	r18
    1b5a:	a7 95       	ror	r26
    1b5c:	f0 40       	sbci	r31, 0x00	; 0
    1b5e:	53 95       	inc	r21
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__addsf3x+0x4e>
    1b62:	7e f4       	brtc	.+30     	; 0x1b82 <__addsf3x+0x7c>
    1b64:	1f 16       	cp	r1, r31
    1b66:	ba 0b       	sbc	r27, r26
    1b68:	62 0b       	sbc	r22, r18
    1b6a:	73 0b       	sbc	r23, r19
    1b6c:	84 0b       	sbc	r24, r20
    1b6e:	ba f0       	brmi	.+46     	; 0x1b9e <__addsf3x+0x98>
    1b70:	91 50       	subi	r25, 0x01	; 1
    1b72:	a1 f0       	breq	.+40     	; 0x1b9c <__addsf3x+0x96>
    1b74:	ff 0f       	add	r31, r31
    1b76:	bb 1f       	adc	r27, r27
    1b78:	66 1f       	adc	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	c2 f7       	brpl	.-16     	; 0x1b70 <__addsf3x+0x6a>
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <__addsf3x+0x98>
    1b82:	ba 0f       	add	r27, r26
    1b84:	62 1f       	adc	r22, r18
    1b86:	73 1f       	adc	r23, r19
    1b88:	84 1f       	adc	r24, r20
    1b8a:	48 f4       	brcc	.+18     	; 0x1b9e <__addsf3x+0x98>
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	b7 95       	ror	r27
    1b94:	f7 95       	ror	r31
    1b96:	9e 3f       	cpi	r25, 0xFE	; 254
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <__addsf3x+0x96>
    1b9a:	b3 cf       	rjmp	.-154    	; 0x1b02 <__addsf3+0x1e>
    1b9c:	93 95       	inc	r25
    1b9e:	88 0f       	add	r24, r24
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <__addsf3x+0x9e>
    1ba2:	99 27       	eor	r25, r25
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	97 95       	ror	r25
    1ba8:	87 95       	ror	r24
    1baa:	08 95       	ret

00001bac <__cmpsf2>:
    1bac:	d4 d0       	rcall	.+424    	; 0x1d56 <__fp_cmp>
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <__cmpsf2+0x6>
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	08 95       	ret

00001bb4 <__divsf3>:
    1bb4:	0c d0       	rcall	.+24     	; 0x1bce <__divsf3x>
    1bb6:	0a c1       	rjmp	.+532    	; 0x1dcc <__fp_round>
    1bb8:	02 d1       	rcall	.+516    	; 0x1dbe <__fp_pscB>
    1bba:	40 f0       	brcs	.+16     	; 0x1bcc <__divsf3+0x18>
    1bbc:	f9 d0       	rcall	.+498    	; 0x1db0 <__fp_pscA>
    1bbe:	30 f0       	brcs	.+12     	; 0x1bcc <__divsf3+0x18>
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <__divsf3+0x16>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <__divsf3+0x18>
    1bc6:	eb c0       	rjmp	.+470    	; 0x1d9e <__fp_inf>
    1bc8:	51 11       	cpse	r21, r1
    1bca:	34 c1       	rjmp	.+616    	; 0x1e34 <__fp_szero>
    1bcc:	ee c0       	rjmp	.+476    	; 0x1daa <__fp_nan>

00001bce <__divsf3x>:
    1bce:	0f d1       	rcall	.+542    	; 0x1dee <__fp_split3>
    1bd0:	98 f3       	brcs	.-26     	; 0x1bb8 <__divsf3+0x4>

00001bd2 <__divsf3_pse>:
    1bd2:	99 23       	and	r25, r25
    1bd4:	c9 f3       	breq	.-14     	; 0x1bc8 <__divsf3+0x14>
    1bd6:	55 23       	and	r21, r21
    1bd8:	b1 f3       	breq	.-20     	; 0x1bc6 <__divsf3+0x12>
    1bda:	95 1b       	sub	r25, r21
    1bdc:	55 0b       	sbc	r21, r21
    1bde:	bb 27       	eor	r27, r27
    1be0:	aa 27       	eor	r26, r26
    1be2:	62 17       	cp	r22, r18
    1be4:	73 07       	cpc	r23, r19
    1be6:	84 07       	cpc	r24, r20
    1be8:	38 f0       	brcs	.+14     	; 0x1bf8 <__divsf3_pse+0x26>
    1bea:	9f 5f       	subi	r25, 0xFF	; 255
    1bec:	5f 4f       	sbci	r21, 0xFF	; 255
    1bee:	22 0f       	add	r18, r18
    1bf0:	33 1f       	adc	r19, r19
    1bf2:	44 1f       	adc	r20, r20
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	a9 f3       	breq	.-22     	; 0x1be2 <__divsf3_pse+0x10>
    1bf8:	33 d0       	rcall	.+102    	; 0x1c60 <__divsf3_pse+0x8e>
    1bfa:	0e 2e       	mov	r0, r30
    1bfc:	3a f0       	brmi	.+14     	; 0x1c0c <__divsf3_pse+0x3a>
    1bfe:	e0 e8       	ldi	r30, 0x80	; 128
    1c00:	30 d0       	rcall	.+96     	; 0x1c62 <__divsf3_pse+0x90>
    1c02:	91 50       	subi	r25, 0x01	; 1
    1c04:	50 40       	sbci	r21, 0x00	; 0
    1c06:	e6 95       	lsr	r30
    1c08:	00 1c       	adc	r0, r0
    1c0a:	ca f7       	brpl	.-14     	; 0x1bfe <__divsf3_pse+0x2c>
    1c0c:	29 d0       	rcall	.+82     	; 0x1c60 <__divsf3_pse+0x8e>
    1c0e:	fe 2f       	mov	r31, r30
    1c10:	27 d0       	rcall	.+78     	; 0x1c60 <__divsf3_pse+0x8e>
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	26 17       	cp	r18, r22
    1c1c:	37 07       	cpc	r19, r23
    1c1e:	48 07       	cpc	r20, r24
    1c20:	ab 07       	cpc	r26, r27
    1c22:	b0 e8       	ldi	r27, 0x80	; 128
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <__divsf3_pse+0x56>
    1c26:	bb 0b       	sbc	r27, r27
    1c28:	80 2d       	mov	r24, r0
    1c2a:	bf 01       	movw	r22, r30
    1c2c:	ff 27       	eor	r31, r31
    1c2e:	93 58       	subi	r25, 0x83	; 131
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	2a f0       	brmi	.+10     	; 0x1c3e <__divsf3_pse+0x6c>
    1c34:	9e 3f       	cpi	r25, 0xFE	; 254
    1c36:	51 05       	cpc	r21, r1
    1c38:	68 f0       	brcs	.+26     	; 0x1c54 <__divsf3_pse+0x82>
    1c3a:	b1 c0       	rjmp	.+354    	; 0x1d9e <__fp_inf>
    1c3c:	fb c0       	rjmp	.+502    	; 0x1e34 <__fp_szero>
    1c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c40:	ec f3       	brlt	.-6      	; 0x1c3c <__divsf3_pse+0x6a>
    1c42:	98 3e       	cpi	r25, 0xE8	; 232
    1c44:	dc f3       	brlt	.-10     	; 0x1c3c <__divsf3_pse+0x6a>
    1c46:	86 95       	lsr	r24
    1c48:	77 95       	ror	r23
    1c4a:	67 95       	ror	r22
    1c4c:	b7 95       	ror	r27
    1c4e:	f7 95       	ror	r31
    1c50:	9f 5f       	subi	r25, 0xFF	; 255
    1c52:	c9 f7       	brne	.-14     	; 0x1c46 <__divsf3_pse+0x74>
    1c54:	88 0f       	add	r24, r24
    1c56:	91 1d       	adc	r25, r1
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	97 f9       	bld	r25, 7
    1c5e:	08 95       	ret
    1c60:	e1 e0       	ldi	r30, 0x01	; 1
    1c62:	66 0f       	add	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	88 1f       	adc	r24, r24
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	62 17       	cp	r22, r18
    1c6c:	73 07       	cpc	r23, r19
    1c6e:	84 07       	cpc	r24, r20
    1c70:	ba 07       	cpc	r27, r26
    1c72:	20 f0       	brcs	.+8      	; 0x1c7c <__divsf3_pse+0xaa>
    1c74:	62 1b       	sub	r22, r18
    1c76:	73 0b       	sbc	r23, r19
    1c78:	84 0b       	sbc	r24, r20
    1c7a:	ba 0b       	sbc	r27, r26
    1c7c:	ee 1f       	adc	r30, r30
    1c7e:	88 f7       	brcc	.-30     	; 0x1c62 <__divsf3_pse+0x90>
    1c80:	e0 95       	com	r30
    1c82:	08 95       	ret

00001c84 <__fixunssfsi>:
    1c84:	bc d0       	rcall	.+376    	; 0x1dfe <__fp_splitA>
    1c86:	88 f0       	brcs	.+34     	; 0x1caa <__fixunssfsi+0x26>
    1c88:	9f 57       	subi	r25, 0x7F	; 127
    1c8a:	90 f0       	brcs	.+36     	; 0x1cb0 <__fixunssfsi+0x2c>
    1c8c:	b9 2f       	mov	r27, r25
    1c8e:	99 27       	eor	r25, r25
    1c90:	b7 51       	subi	r27, 0x17	; 23
    1c92:	a0 f0       	brcs	.+40     	; 0x1cbc <__fixunssfsi+0x38>
    1c94:	d1 f0       	breq	.+52     	; 0x1cca <__fixunssfsi+0x46>
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	1a f0       	brmi	.+6      	; 0x1ca6 <__fixunssfsi+0x22>
    1ca0:	ba 95       	dec	r27
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__fixunssfsi+0x12>
    1ca4:	12 c0       	rjmp	.+36     	; 0x1cca <__fixunssfsi+0x46>
    1ca6:	b1 30       	cpi	r27, 0x01	; 1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <__fixunssfsi+0x46>
    1caa:	c3 d0       	rcall	.+390    	; 0x1e32 <__fp_zero>
    1cac:	b1 e0       	ldi	r27, 0x01	; 1
    1cae:	08 95       	ret
    1cb0:	c0 c0       	rjmp	.+384    	; 0x1e32 <__fp_zero>
    1cb2:	67 2f       	mov	r22, r23
    1cb4:	78 2f       	mov	r23, r24
    1cb6:	88 27       	eor	r24, r24
    1cb8:	b8 5f       	subi	r27, 0xF8	; 248
    1cba:	39 f0       	breq	.+14     	; 0x1cca <__fixunssfsi+0x46>
    1cbc:	b9 3f       	cpi	r27, 0xF9	; 249
    1cbe:	cc f3       	brlt	.-14     	; 0x1cb2 <__fixunssfsi+0x2e>
    1cc0:	86 95       	lsr	r24
    1cc2:	77 95       	ror	r23
    1cc4:	67 95       	ror	r22
    1cc6:	b3 95       	inc	r27
    1cc8:	d9 f7       	brne	.-10     	; 0x1cc0 <__fixunssfsi+0x3c>
    1cca:	3e f4       	brtc	.+14     	; 0x1cda <__fixunssfsi+0x56>
    1ccc:	90 95       	com	r25
    1cce:	80 95       	com	r24
    1cd0:	70 95       	com	r23
    1cd2:	61 95       	neg	r22
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	08 95       	ret

00001cdc <__floatunsisf>:
    1cdc:	e8 94       	clt
    1cde:	09 c0       	rjmp	.+18     	; 0x1cf2 <__floatsisf+0x12>

00001ce0 <__floatsisf>:
    1ce0:	97 fb       	bst	r25, 7
    1ce2:	3e f4       	brtc	.+14     	; 0x1cf2 <__floatsisf+0x12>
    1ce4:	90 95       	com	r25
    1ce6:	80 95       	com	r24
    1ce8:	70 95       	com	r23
    1cea:	61 95       	neg	r22
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	99 23       	and	r25, r25
    1cf4:	a9 f0       	breq	.+42     	; 0x1d20 <__floatsisf+0x40>
    1cf6:	f9 2f       	mov	r31, r25
    1cf8:	96 e9       	ldi	r25, 0x96	; 150
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	93 95       	inc	r25
    1cfe:	f6 95       	lsr	r31
    1d00:	87 95       	ror	r24
    1d02:	77 95       	ror	r23
    1d04:	67 95       	ror	r22
    1d06:	b7 95       	ror	r27
    1d08:	f1 11       	cpse	r31, r1
    1d0a:	f8 cf       	rjmp	.-16     	; 0x1cfc <__floatsisf+0x1c>
    1d0c:	fa f4       	brpl	.+62     	; 0x1d4c <__floatsisf+0x6c>
    1d0e:	bb 0f       	add	r27, r27
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <__floatsisf+0x36>
    1d12:	60 ff       	sbrs	r22, 0
    1d14:	1b c0       	rjmp	.+54     	; 0x1d4c <__floatsisf+0x6c>
    1d16:	6f 5f       	subi	r22, 0xFF	; 255
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	16 c0       	rjmp	.+44     	; 0x1d4c <__floatsisf+0x6c>
    1d20:	88 23       	and	r24, r24
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <__floatsisf+0x48>
    1d24:	96 e9       	ldi	r25, 0x96	; 150
    1d26:	11 c0       	rjmp	.+34     	; 0x1d4a <__floatsisf+0x6a>
    1d28:	77 23       	and	r23, r23
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <__floatsisf+0x54>
    1d2c:	9e e8       	ldi	r25, 0x8E	; 142
    1d2e:	87 2f       	mov	r24, r23
    1d30:	76 2f       	mov	r23, r22
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <__floatsisf+0x5e>
    1d34:	66 23       	and	r22, r22
    1d36:	71 f0       	breq	.+28     	; 0x1d54 <__floatsisf+0x74>
    1d38:	96 e8       	ldi	r25, 0x86	; 134
    1d3a:	86 2f       	mov	r24, r22
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	2a f0       	brmi	.+10     	; 0x1d4c <__floatsisf+0x6c>
    1d42:	9a 95       	dec	r25
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	da f7       	brpl	.-10     	; 0x1d42 <__floatsisf+0x62>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	97 f9       	bld	r25, 7
    1d54:	08 95       	ret

00001d56 <__fp_cmp>:
    1d56:	99 0f       	add	r25, r25
    1d58:	00 08       	sbc	r0, r0
    1d5a:	55 0f       	add	r21, r21
    1d5c:	aa 0b       	sbc	r26, r26
    1d5e:	e0 e8       	ldi	r30, 0x80	; 128
    1d60:	fe ef       	ldi	r31, 0xFE	; 254
    1d62:	16 16       	cp	r1, r22
    1d64:	17 06       	cpc	r1, r23
    1d66:	e8 07       	cpc	r30, r24
    1d68:	f9 07       	cpc	r31, r25
    1d6a:	c0 f0       	brcs	.+48     	; 0x1d9c <__fp_cmp+0x46>
    1d6c:	12 16       	cp	r1, r18
    1d6e:	13 06       	cpc	r1, r19
    1d70:	e4 07       	cpc	r30, r20
    1d72:	f5 07       	cpc	r31, r21
    1d74:	98 f0       	brcs	.+38     	; 0x1d9c <__fp_cmp+0x46>
    1d76:	62 1b       	sub	r22, r18
    1d78:	73 0b       	sbc	r23, r19
    1d7a:	84 0b       	sbc	r24, r20
    1d7c:	95 0b       	sbc	r25, r21
    1d7e:	39 f4       	brne	.+14     	; 0x1d8e <__fp_cmp+0x38>
    1d80:	0a 26       	eor	r0, r26
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <__fp_cmp+0x46>
    1d84:	23 2b       	or	r18, r19
    1d86:	24 2b       	or	r18, r20
    1d88:	25 2b       	or	r18, r21
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <__fp_cmp+0x3e>
    1d8c:	08 95       	ret
    1d8e:	0a 26       	eor	r0, r26
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__fp_cmp+0x3e>
    1d92:	a1 40       	sbci	r26, 0x01	; 1
    1d94:	a6 95       	lsr	r26
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	81 1d       	adc	r24, r1
    1d9a:	81 1d       	adc	r24, r1
    1d9c:	08 95       	ret

00001d9e <__fp_inf>:
    1d9e:	97 f9       	bld	r25, 7
    1da0:	9f 67       	ori	r25, 0x7F	; 127
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	08 95       	ret

00001daa <__fp_nan>:
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	80 ec       	ldi	r24, 0xC0	; 192
    1dae:	08 95       	ret

00001db0 <__fp_pscA>:
    1db0:	00 24       	eor	r0, r0
    1db2:	0a 94       	dec	r0
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	18 06       	cpc	r1, r24
    1dba:	09 06       	cpc	r0, r25
    1dbc:	08 95       	ret

00001dbe <__fp_pscB>:
    1dbe:	00 24       	eor	r0, r0
    1dc0:	0a 94       	dec	r0
    1dc2:	12 16       	cp	r1, r18
    1dc4:	13 06       	cpc	r1, r19
    1dc6:	14 06       	cpc	r1, r20
    1dc8:	05 06       	cpc	r0, r21
    1dca:	08 95       	ret

00001dcc <__fp_round>:
    1dcc:	09 2e       	mov	r0, r25
    1dce:	03 94       	inc	r0
    1dd0:	00 0c       	add	r0, r0
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <__fp_round+0xc>
    1dd4:	88 23       	and	r24, r24
    1dd6:	52 f0       	brmi	.+20     	; 0x1dec <__fp_round+0x20>
    1dd8:	bb 0f       	add	r27, r27
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <__fp_round+0x20>
    1ddc:	bf 2b       	or	r27, r31
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__fp_round+0x18>
    1de0:	60 ff       	sbrs	r22, 0
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <__fp_round+0x20>
    1de4:	6f 5f       	subi	r22, 0xFF	; 255
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	08 95       	ret

00001dee <__fp_split3>:
    1dee:	57 fd       	sbrc	r21, 7
    1df0:	90 58       	subi	r25, 0x80	; 128
    1df2:	44 0f       	add	r20, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	59 f0       	breq	.+22     	; 0x1e0e <__fp_splitA+0x10>
    1df8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfa:	71 f0       	breq	.+28     	; 0x1e18 <__fp_splitA+0x1a>
    1dfc:	47 95       	ror	r20

00001dfe <__fp_splitA>:
    1dfe:	88 0f       	add	r24, r24
    1e00:	97 fb       	bst	r25, 7
    1e02:	99 1f       	adc	r25, r25
    1e04:	61 f0       	breq	.+24     	; 0x1e1e <__fp_splitA+0x20>
    1e06:	9f 3f       	cpi	r25, 0xFF	; 255
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <__fp_splitA+0x2a>
    1e0a:	87 95       	ror	r24
    1e0c:	08 95       	ret
    1e0e:	12 16       	cp	r1, r18
    1e10:	13 06       	cpc	r1, r19
    1e12:	14 06       	cpc	r1, r20
    1e14:	55 1f       	adc	r21, r21
    1e16:	f2 cf       	rjmp	.-28     	; 0x1dfc <__fp_split3+0xe>
    1e18:	46 95       	lsr	r20
    1e1a:	f1 df       	rcall	.-30     	; 0x1dfe <__fp_splitA>
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <__fp_splitA+0x30>
    1e1e:	16 16       	cp	r1, r22
    1e20:	17 06       	cpc	r1, r23
    1e22:	18 06       	cpc	r1, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	f1 cf       	rjmp	.-30     	; 0x1e0a <__fp_splitA+0xc>
    1e28:	86 95       	lsr	r24
    1e2a:	71 05       	cpc	r23, r1
    1e2c:	61 05       	cpc	r22, r1
    1e2e:	08 94       	sec
    1e30:	08 95       	ret

00001e32 <__fp_zero>:
    1e32:	e8 94       	clt

00001e34 <__fp_szero>:
    1e34:	bb 27       	eor	r27, r27
    1e36:	66 27       	eor	r22, r22
    1e38:	77 27       	eor	r23, r23
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	97 f9       	bld	r25, 7
    1e3e:	08 95       	ret

00001e40 <__gesf2>:
    1e40:	8a df       	rcall	.-236    	; 0x1d56 <__fp_cmp>
    1e42:	08 f4       	brcc	.+2      	; 0x1e46 <__gesf2+0x6>
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	08 95       	ret

00001e48 <__mulsf3>:
    1e48:	0b d0       	rcall	.+22     	; 0x1e60 <__mulsf3x>
    1e4a:	c0 cf       	rjmp	.-128    	; 0x1dcc <__fp_round>
    1e4c:	b1 df       	rcall	.-158    	; 0x1db0 <__fp_pscA>
    1e4e:	28 f0       	brcs	.+10     	; 0x1e5a <__mulsf3+0x12>
    1e50:	b6 df       	rcall	.-148    	; 0x1dbe <__fp_pscB>
    1e52:	18 f0       	brcs	.+6      	; 0x1e5a <__mulsf3+0x12>
    1e54:	95 23       	and	r25, r21
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <__mulsf3+0x12>
    1e58:	a2 cf       	rjmp	.-188    	; 0x1d9e <__fp_inf>
    1e5a:	a7 cf       	rjmp	.-178    	; 0x1daa <__fp_nan>
    1e5c:	11 24       	eor	r1, r1
    1e5e:	ea cf       	rjmp	.-44     	; 0x1e34 <__fp_szero>

00001e60 <__mulsf3x>:
    1e60:	c6 df       	rcall	.-116    	; 0x1dee <__fp_split3>
    1e62:	a0 f3       	brcs	.-24     	; 0x1e4c <__mulsf3+0x4>

00001e64 <__mulsf3_pse>:
    1e64:	95 9f       	mul	r25, r21
    1e66:	d1 f3       	breq	.-12     	; 0x1e5c <__mulsf3+0x14>
    1e68:	95 0f       	add	r25, r21
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	55 1f       	adc	r21, r21
    1e6e:	62 9f       	mul	r22, r18
    1e70:	f0 01       	movw	r30, r0
    1e72:	72 9f       	mul	r23, r18
    1e74:	bb 27       	eor	r27, r27
    1e76:	f0 0d       	add	r31, r0
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	63 9f       	mul	r22, r19
    1e7c:	aa 27       	eor	r26, r26
    1e7e:	f0 0d       	add	r31, r0
    1e80:	b1 1d       	adc	r27, r1
    1e82:	aa 1f       	adc	r26, r26
    1e84:	64 9f       	mul	r22, r20
    1e86:	66 27       	eor	r22, r22
    1e88:	b0 0d       	add	r27, r0
    1e8a:	a1 1d       	adc	r26, r1
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	82 9f       	mul	r24, r18
    1e90:	22 27       	eor	r18, r18
    1e92:	b0 0d       	add	r27, r0
    1e94:	a1 1d       	adc	r26, r1
    1e96:	62 1f       	adc	r22, r18
    1e98:	73 9f       	mul	r23, r19
    1e9a:	b0 0d       	add	r27, r0
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	62 1f       	adc	r22, r18
    1ea0:	83 9f       	mul	r24, r19
    1ea2:	a0 0d       	add	r26, r0
    1ea4:	61 1d       	adc	r22, r1
    1ea6:	22 1f       	adc	r18, r18
    1ea8:	74 9f       	mul	r23, r20
    1eaa:	33 27       	eor	r19, r19
    1eac:	a0 0d       	add	r26, r0
    1eae:	61 1d       	adc	r22, r1
    1eb0:	23 1f       	adc	r18, r19
    1eb2:	84 9f       	mul	r24, r20
    1eb4:	60 0d       	add	r22, r0
    1eb6:	21 1d       	adc	r18, r1
    1eb8:	82 2f       	mov	r24, r18
    1eba:	76 2f       	mov	r23, r22
    1ebc:	6a 2f       	mov	r22, r26
    1ebe:	11 24       	eor	r1, r1
    1ec0:	9f 57       	subi	r25, 0x7F	; 127
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	8a f0       	brmi	.+34     	; 0x1ee8 <__mulsf3_pse+0x84>
    1ec6:	e1 f0       	breq	.+56     	; 0x1f00 <__mulsf3_pse+0x9c>
    1ec8:	88 23       	and	r24, r24
    1eca:	4a f0       	brmi	.+18     	; 0x1ede <__mulsf3_pse+0x7a>
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	66 1f       	adc	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	88 1f       	adc	r24, r24
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	a9 f7       	brne	.-22     	; 0x1ec8 <__mulsf3_pse+0x64>
    1ede:	9e 3f       	cpi	r25, 0xFE	; 254
    1ee0:	51 05       	cpc	r21, r1
    1ee2:	70 f0       	brcs	.+28     	; 0x1f00 <__mulsf3_pse+0x9c>
    1ee4:	5c cf       	rjmp	.-328    	; 0x1d9e <__fp_inf>
    1ee6:	a6 cf       	rjmp	.-180    	; 0x1e34 <__fp_szero>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	ec f3       	brlt	.-6      	; 0x1ee6 <__mulsf3_pse+0x82>
    1eec:	98 3e       	cpi	r25, 0xE8	; 232
    1eee:	dc f3       	brlt	.-10     	; 0x1ee6 <__mulsf3_pse+0x82>
    1ef0:	86 95       	lsr	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b7 95       	ror	r27
    1ef8:	f7 95       	ror	r31
    1efa:	e7 95       	ror	r30
    1efc:	9f 5f       	subi	r25, 0xFF	; 255
    1efe:	c1 f7       	brne	.-16     	; 0x1ef0 <__mulsf3_pse+0x8c>
    1f00:	fe 2b       	or	r31, r30
    1f02:	88 0f       	add	r24, r24
    1f04:	91 1d       	adc	r25, r1
    1f06:	96 95       	lsr	r25
    1f08:	87 95       	ror	r24
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	08 95       	ret

00001f0e <calloc>:
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	86 9f       	mul	r24, r22
    1f18:	80 01       	movw	r16, r0
    1f1a:	87 9f       	mul	r24, r23
    1f1c:	10 0d       	add	r17, r0
    1f1e:	96 9f       	mul	r25, r22
    1f20:	10 0d       	add	r17, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	c8 01       	movw	r24, r16
    1f26:	0d d0       	rcall	.+26     	; 0x1f42 <malloc>
    1f28:	ec 01       	movw	r28, r24
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <calloc+0x28>
    1f2e:	a8 01       	movw	r20, r16
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	33 d1       	rcall	.+614    	; 0x219c <memset>
    1f36:	ce 01       	movw	r24, r28
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <malloc>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <malloc+0xe>
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	e0 91 61 02 	lds	r30, 0x0261
    1f54:	f0 91 62 02 	lds	r31, 0x0262
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	c0 e0       	ldi	r28, 0x00	; 0
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
    1f60:	30 97       	sbiw	r30, 0x00	; 0
    1f62:	11 f1       	breq	.+68     	; 0x1fa8 <malloc+0x66>
    1f64:	40 81       	ld	r20, Z
    1f66:	51 81       	ldd	r21, Z+1	; 0x01
    1f68:	48 17       	cp	r20, r24
    1f6a:	59 07       	cpc	r21, r25
    1f6c:	c0 f0       	brcs	.+48     	; 0x1f9e <malloc+0x5c>
    1f6e:	48 17       	cp	r20, r24
    1f70:	59 07       	cpc	r21, r25
    1f72:	61 f4       	brne	.+24     	; 0x1f8c <malloc+0x4a>
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 97       	sbiw	r28, 0x00	; 0
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <malloc+0x40>
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	2b c0       	rjmp	.+86     	; 0x1fd8 <malloc+0x96>
    1f82:	90 93 62 02 	sts	0x0262, r25
    1f86:	80 93 61 02 	sts	0x0261, r24
    1f8a:	26 c0       	rjmp	.+76     	; 0x1fd8 <malloc+0x96>
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <malloc+0x56>
    1f92:	42 17       	cp	r20, r18
    1f94:	53 07       	cpc	r21, r19
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <malloc+0x5c>
    1f98:	9a 01       	movw	r18, r20
    1f9a:	be 01       	movw	r22, r28
    1f9c:	df 01       	movw	r26, r30
    1f9e:	ef 01       	movw	r28, r30
    1fa0:	02 80       	ldd	r0, Z+2	; 0x02
    1fa2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	dc cf       	rjmp	.-72     	; 0x1f60 <malloc+0x1e>
    1fa8:	21 15       	cp	r18, r1
    1faa:	31 05       	cpc	r19, r1
    1fac:	09 f1       	breq	.+66     	; 0x1ff0 <malloc+0xae>
    1fae:	28 1b       	sub	r18, r24
    1fb0:	39 0b       	sbc	r19, r25
    1fb2:	24 30       	cpi	r18, 0x04	; 4
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	90 f4       	brcc	.+36     	; 0x1fdc <malloc+0x9a>
    1fb8:	12 96       	adiw	r26, 0x02	; 2
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	13 97       	sbiw	r26, 0x03	; 3
    1fc0:	61 15       	cp	r22, r1
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	21 f0       	breq	.+8      	; 0x1fce <malloc+0x8c>
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	93 83       	std	Z+3, r25	; 0x03
    1fca:	82 83       	std	Z+2, r24	; 0x02
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <malloc+0x94>
    1fce:	90 93 62 02 	sts	0x0262, r25
    1fd2:	80 93 61 02 	sts	0x0261, r24
    1fd6:	fd 01       	movw	r30, r26
    1fd8:	32 96       	adiw	r30, 0x02	; 2
    1fda:	44 c0       	rjmp	.+136    	; 0x2064 <malloc+0x122>
    1fdc:	fd 01       	movw	r30, r26
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	81 93       	st	Z+, r24
    1fe4:	91 93       	st	Z+, r25
    1fe6:	22 50       	subi	r18, 0x02	; 2
    1fe8:	31 09       	sbc	r19, r1
    1fea:	2d 93       	st	X+, r18
    1fec:	3c 93       	st	X, r19
    1fee:	3a c0       	rjmp	.+116    	; 0x2064 <malloc+0x122>
    1ff0:	20 91 5f 02 	lds	r18, 0x025F
    1ff4:	30 91 60 02 	lds	r19, 0x0260
    1ff8:	23 2b       	or	r18, r19
    1ffa:	41 f4       	brne	.+16     	; 0x200c <malloc+0xca>
    1ffc:	20 91 02 01 	lds	r18, 0x0102
    2000:	30 91 03 01 	lds	r19, 0x0103
    2004:	30 93 60 02 	sts	0x0260, r19
    2008:	20 93 5f 02 	sts	0x025F, r18
    200c:	20 91 00 01 	lds	r18, 0x0100
    2010:	30 91 01 01 	lds	r19, 0x0101
    2014:	21 15       	cp	r18, r1
    2016:	31 05       	cpc	r19, r1
    2018:	41 f4       	brne	.+16     	; 0x202a <malloc+0xe8>
    201a:	2d b7       	in	r18, 0x3d	; 61
    201c:	3e b7       	in	r19, 0x3e	; 62
    201e:	40 91 04 01 	lds	r20, 0x0104
    2022:	50 91 05 01 	lds	r21, 0x0105
    2026:	24 1b       	sub	r18, r20
    2028:	35 0b       	sbc	r19, r21
    202a:	e0 91 5f 02 	lds	r30, 0x025F
    202e:	f0 91 60 02 	lds	r31, 0x0260
    2032:	e2 17       	cp	r30, r18
    2034:	f3 07       	cpc	r31, r19
    2036:	a0 f4       	brcc	.+40     	; 0x2060 <malloc+0x11e>
    2038:	2e 1b       	sub	r18, r30
    203a:	3f 0b       	sbc	r19, r31
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	78 f0       	brcs	.+30     	; 0x2060 <malloc+0x11e>
    2042:	ac 01       	movw	r20, r24
    2044:	4e 5f       	subi	r20, 0xFE	; 254
    2046:	5f 4f       	sbci	r21, 0xFF	; 255
    2048:	24 17       	cp	r18, r20
    204a:	35 07       	cpc	r19, r21
    204c:	48 f0       	brcs	.+18     	; 0x2060 <malloc+0x11e>
    204e:	4e 0f       	add	r20, r30
    2050:	5f 1f       	adc	r21, r31
    2052:	50 93 60 02 	sts	0x0260, r21
    2056:	40 93 5f 02 	sts	0x025F, r20
    205a:	81 93       	st	Z+, r24
    205c:	91 93       	st	Z+, r25
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <malloc+0x122>
    2060:	e0 e0       	ldi	r30, 0x00	; 0
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	cf 01       	movw	r24, r30
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <free>:
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	09 f4       	brne	.+2      	; 0x207a <free+0xe>
    2078:	8c c0       	rjmp	.+280    	; 0x2192 <free+0x126>
    207a:	fc 01       	movw	r30, r24
    207c:	32 97       	sbiw	r30, 0x02	; 2
    207e:	13 82       	std	Z+3, r1	; 0x03
    2080:	12 82       	std	Z+2, r1	; 0x02
    2082:	00 91 61 02 	lds	r16, 0x0261
    2086:	10 91 62 02 	lds	r17, 0x0262
    208a:	01 15       	cp	r16, r1
    208c:	11 05       	cpc	r17, r1
    208e:	81 f4       	brne	.+32     	; 0x20b0 <free+0x44>
    2090:	20 81       	ld	r18, Z
    2092:	31 81       	ldd	r19, Z+1	; 0x01
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	20 91 5f 02 	lds	r18, 0x025F
    209c:	30 91 60 02 	lds	r19, 0x0260
    20a0:	28 17       	cp	r18, r24
    20a2:	39 07       	cpc	r19, r25
    20a4:	79 f5       	brne	.+94     	; 0x2104 <free+0x98>
    20a6:	f0 93 60 02 	sts	0x0260, r31
    20aa:	e0 93 5f 02 	sts	0x025F, r30
    20ae:	71 c0       	rjmp	.+226    	; 0x2192 <free+0x126>
    20b0:	d8 01       	movw	r26, r16
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	ae 17       	cp	r26, r30
    20b8:	bf 07       	cpc	r27, r31
    20ba:	50 f4       	brcc	.+20     	; 0x20d0 <free+0x64>
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	2d 91       	ld	r18, X+
    20c0:	3c 91       	ld	r19, X
    20c2:	13 97       	sbiw	r26, 0x03	; 3
    20c4:	ad 01       	movw	r20, r26
    20c6:	21 15       	cp	r18, r1
    20c8:	31 05       	cpc	r19, r1
    20ca:	09 f1       	breq	.+66     	; 0x210e <free+0xa2>
    20cc:	d9 01       	movw	r26, r18
    20ce:	f3 cf       	rjmp	.-26     	; 0x20b6 <free+0x4a>
    20d0:	9d 01       	movw	r18, r26
    20d2:	da 01       	movw	r26, r20
    20d4:	33 83       	std	Z+3, r19	; 0x03
    20d6:	22 83       	std	Z+2, r18	; 0x02
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	86 0f       	add	r24, r22
    20de:	97 1f       	adc	r25, r23
    20e0:	82 17       	cp	r24, r18
    20e2:	93 07       	cpc	r25, r19
    20e4:	69 f4       	brne	.+26     	; 0x2100 <free+0x94>
    20e6:	ec 01       	movw	r28, r24
    20e8:	28 81       	ld	r18, Y
    20ea:	39 81       	ldd	r19, Y+1	; 0x01
    20ec:	26 0f       	add	r18, r22
    20ee:	37 1f       	adc	r19, r23
    20f0:	2e 5f       	subi	r18, 0xFE	; 254
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	31 83       	std	Z+1, r19	; 0x01
    20f6:	20 83       	st	Z, r18
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	93 83       	std	Z+3, r25	; 0x03
    20fe:	82 83       	std	Z+2, r24	; 0x02
    2100:	45 2b       	or	r20, r21
    2102:	29 f4       	brne	.+10     	; 0x210e <free+0xa2>
    2104:	f0 93 62 02 	sts	0x0262, r31
    2108:	e0 93 61 02 	sts	0x0261, r30
    210c:	42 c0       	rjmp	.+132    	; 0x2192 <free+0x126>
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	fc 93       	st	X, r31
    2112:	ee 93       	st	-X, r30
    2114:	12 97       	sbiw	r26, 0x02	; 2
    2116:	ed 01       	movw	r28, r26
    2118:	49 91       	ld	r20, Y+
    211a:	59 91       	ld	r21, Y+
    211c:	9e 01       	movw	r18, r28
    211e:	24 0f       	add	r18, r20
    2120:	35 1f       	adc	r19, r21
    2122:	e2 17       	cp	r30, r18
    2124:	f3 07       	cpc	r31, r19
    2126:	71 f4       	brne	.+28     	; 0x2144 <free+0xd8>
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	84 0f       	add	r24, r20
    212e:	95 1f       	adc	r25, r21
    2130:	02 96       	adiw	r24, 0x02	; 2
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	13 96       	adiw	r26, 0x03	; 3
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
    2142:	12 97       	sbiw	r26, 0x02	; 2
    2144:	e0 e0       	ldi	r30, 0x00	; 0
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	d8 01       	movw	r26, r16
    214a:	12 96       	adiw	r26, 0x02	; 2
    214c:	8d 91       	ld	r24, X+
    214e:	9c 91       	ld	r25, X
    2150:	13 97       	sbiw	r26, 0x03	; 3
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	19 f0       	breq	.+6      	; 0x215c <free+0xf0>
    2156:	f8 01       	movw	r30, r16
    2158:	8c 01       	movw	r16, r24
    215a:	f6 cf       	rjmp	.-20     	; 0x2148 <free+0xdc>
    215c:	8d 91       	ld	r24, X+
    215e:	9c 91       	ld	r25, X
    2160:	98 01       	movw	r18, r16
    2162:	2e 5f       	subi	r18, 0xFE	; 254
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	82 0f       	add	r24, r18
    2168:	93 1f       	adc	r25, r19
    216a:	20 91 5f 02 	lds	r18, 0x025F
    216e:	30 91 60 02 	lds	r19, 0x0260
    2172:	28 17       	cp	r18, r24
    2174:	39 07       	cpc	r19, r25
    2176:	69 f4       	brne	.+26     	; 0x2192 <free+0x126>
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	29 f4       	brne	.+10     	; 0x2186 <free+0x11a>
    217c:	10 92 62 02 	sts	0x0262, r1
    2180:	10 92 61 02 	sts	0x0261, r1
    2184:	02 c0       	rjmp	.+4      	; 0x218a <free+0x11e>
    2186:	13 82       	std	Z+3, r1	; 0x03
    2188:	12 82       	std	Z+2, r1	; 0x02
    218a:	10 93 60 02 	sts	0x0260, r17
    218e:	00 93 5f 02 	sts	0x025F, r16
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <memset>:
    219c:	dc 01       	movw	r26, r24
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <memset+0x6>
    21a0:	6d 93       	st	X+, r22
    21a2:	41 50       	subi	r20, 0x01	; 1
    21a4:	50 40       	sbci	r21, 0x00	; 0
    21a6:	e0 f7       	brcc	.-8      	; 0x21a0 <memset+0x4>
    21a8:	08 95       	ret

000021aa <_exit>:
    21aa:	f8 94       	cli

000021ac <__stop_program>:
    21ac:	ff cf       	rjmp	.-2      	; 0x21ac <__stop_program>
