
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000201a  000020ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000201a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080010a  0080010a  000020b8  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008a5  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002896  00000000  00000000  00002cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afc  00000000  00000000  00005573  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d84  00000000  00000000  0000606f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e0  00000000  00000000  00008df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa4  00000000  00000000  000093d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000338  00000000  00000000  00009e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(-10);
	servo_set_right_grabber_position(80);//200 is for the half step
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	if(sys_time >= 90000)
		actuators_umbrella();
	sys_time++;
}
void delay(double ms)
{
       6:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c5       	rjmp	.+2686   	; 0xac8 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e1       	ldi	r30, 0x1A	; 26
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 35       	cpi	r26, 0x51	; 81
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "actuators.h"

int set = 1;

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2f 97       	sbiw	r28, 0x0f	; 15
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
	}*/
	
	signed char i;
	while(1)
	{
		i=check_back_sensors(BACK_ALL);
     1ce:	8d ef       	ldi	r24, 0xFD	; 253
     1d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <check_back_sensors>
     1d4:	8f 87       	std	Y+15, r24	; 0x0f
		if(i == DETECTED)
     1d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	29 f4       	brne	.+10     	; 0x1e6 <main+0x114>
		{
			PORTG = 0xff;
     1dc:	e4 e3       	ldi	r30, 0x34	; 52
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	80 83       	st	Z, r24
     1e4:	f4 cf       	rjmp	.-24     	; 0x1ce <main+0xfc>
		}
		else
		{
			PORTG = 0x00;
     1e6:	e4 e3       	ldi	r30, 0x34	; 52
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	10 82       	st	Z, r1
     1ec:	f0 cf       	rjmp	.-32     	; 0x1ce <main+0xfc>

000001ee <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <servo_init+0xa>
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	9a 83       	std	Y+2, r25	; 0x02
     1fe:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 63       	ori	r24, 0x38	; 56
     20c:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     20e:	a4 e2       	ldi	r26, 0x24	; 36
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e4 e2       	ldi	r30, 0x24	; 36
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     21c:	e4 e9       	ldi	r30, 0x94	; 148
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
	TCNT0 = 0;
     224:	e6 e4       	ldi	r30, 0x46	; 70
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	10 82       	st	Z, r1

	OCR3A = 0;
     22a:	e8 e9       	ldi	r30, 0x98	; 152
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	11 82       	std	Z+1, r1	; 0x01
     230:	10 82       	st	Z, r1
	OCR3B = 0;
     232:	ea e9       	ldi	r30, 0x9A	; 154
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	11 82       	std	Z+1, r1	; 0x01
     238:	10 82       	st	Z, r1
	OCR3C = 0;
     23a:	ec e9       	ldi	r30, 0x9C	; 156
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	11 82       	std	Z+1, r1	; 0x01
     240:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     242:	e0 e9       	ldi	r30, 0x90	; 144
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	8e eb       	ldi	r24, 0xBE	; 190
     248:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     24a:	e1 e9       	ldi	r30, 0x91	; 145
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8a e1       	ldi	r24, 0x1A	; 26
     250:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     252:	e4 e4       	ldi	r30, 0x44	; 68
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	8b e6       	ldi	r24, 0x6B	; 107
     258:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     25a:	06 e9       	ldi	r16, 0x96	; 150
     25c:	10 e0       	ldi	r17, 0x00	; 0
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	cc 01       	movw	r24, r24
     264:	a0 e0       	ldi	r26, 0x00	; 0
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	bc 01       	movw	r22, r24
     26a:	cd 01       	movw	r24, r26
     26c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	bc 01       	movw	r22, r24
     276:	cd 01       	movw	r24, r26
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	51 e4       	ldi	r21, 0x41	; 65
     280:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	9c 01       	movw	r18, r24
     28a:	ad 01       	movw	r20, r26
     28c:	60 e8       	ldi	r22, 0x80	; 128
     28e:	76 e9       	ldi	r23, 0x96	; 150
     290:	88 e1       	ldi	r24, 0x18	; 24
     292:	9b e4       	ldi	r25, 0x4B	; 75
     294:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	bc 01       	movw	r22, r24
     29e:	cd 01       	movw	r24, r26
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	5f e3       	ldi	r21, 0x3F	; 63
     2a8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	bc 01       	movw	r22, r24
     2b2:	cd 01       	movw	r24, r26
     2b4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	f8 01       	movw	r30, r16
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	80 83       	st	Z, r24
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	08 95       	ret

000002d0 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	00 d0       	rcall	.+0      	; 0x2de <servo_set_duty_cycle_umbrella+0xe>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <servo_set_duty_cycle_umbrella+0x10>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	9c 83       	std	Y+4, r25	; 0x04
     2e6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2e8:	e6 e9       	ldi	r30, 0x96	; 150
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	cc 01       	movw	r24, r24
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	bc 01       	movw	r22, r24
     304:	cd 01       	movw	r24, r26
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	4f e7       	ldi	r20, 0x7F	; 127
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	7c 01       	movw	r14, r24
     318:	8d 01       	movw	r16, r26
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	9c 81       	ldd	r25, Y+4	; 0x04
     31e:	aa 27       	eor	r26, r26
     320:	97 fd       	sbrc	r25, 7
     322:	a0 95       	com	r26
     324:	ba 2f       	mov	r27, r26
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     32e:	9b 01       	movw	r18, r22
     330:	ac 01       	movw	r20, r24
     332:	c8 01       	movw	r24, r16
     334:	b7 01       	movw	r22, r14
     336:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	5f e3       	ldi	r21, 0x3F	; 63
     34a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	bc 01       	movw	r22, r24
     354:	cd 01       	movw	r24, r26
     356:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	9a 83       	std	Y+2, r25	; 0x02
     360:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     362:	e9 e9       	ldi	r30, 0x99	; 153
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	89 2f       	mov	r24, r25
     36c:	99 27       	eor	r25, r25
     36e:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     370:	e8 e9       	ldi	r30, 0x98	; 152
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	80 83       	st	Z, r24
}
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	cf 91       	pop	r28
     382:	df 91       	pop	r29
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	08 95       	ret

0000038e <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	00 d0       	rcall	.+0      	; 0x39c <servo_set_duty_cycle_door+0xe>
     39c:	00 d0       	rcall	.+0      	; 0x39e <servo_set_duty_cycle_door+0x10>
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3a6:	e6 e9       	ldi	r30, 0x96	; 150
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	cc 01       	movw	r24, r24
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	4f e7       	ldi	r20, 0x7F	; 127
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	7c 01       	movw	r14, r24
     3d6:	8d 01       	movw	r16, r26
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	aa 27       	eor	r26, r26
     3de:	97 fd       	sbrc	r25, 7
     3e0:	a0 95       	com	r26
     3e2:	ba 2f       	mov	r27, r26
     3e4:	bc 01       	movw	r22, r24
     3e6:	cd 01       	movw	r24, r26
     3e8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c8 01       	movw	r24, r16
     3f2:	b7 01       	movw	r22, r14
     3f4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	5f e3       	ldi	r21, 0x3F	; 63
     408:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	bc 01       	movw	r22, r24
     412:	cd 01       	movw	r24, r26
     414:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     420:	eb e9       	ldi	r30, 0x9B	; 155
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	89 2f       	mov	r24, r25
     42a:	99 27       	eor	r25, r25
     42c:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     42e:	ea e9       	ldi	r30, 0x9A	; 154
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	80 83       	st	Z, r24
}
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	08 95       	ret

0000044c <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	00 d0       	rcall	.+0      	; 0x45a <servo_set_duty_cycle_left_grabber+0xe>
     45a:	00 d0       	rcall	.+0      	; 0x45c <servo_set_duty_cycle_left_grabber+0x10>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	9c 83       	std	Y+4, r25	; 0x04
     462:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     464:	e6 e9       	ldi	r30, 0x96	; 150
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	cc 01       	movw	r24, r24
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	bc 01       	movw	r22, r24
     474:	cd 01       	movw	r24, r26
     476:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__floatunsisf>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4f e7       	ldi	r20, 0x7F	; 127
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	7c 01       	movw	r14, r24
     494:	8d 01       	movw	r16, r26
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	9c 81       	ldd	r25, Y+4	; 0x04
     49a:	aa 27       	eor	r26, r26
     49c:	97 fd       	sbrc	r25, 7
     49e:	a0 95       	com	r26
     4a0:	ba 2f       	mov	r27, r26
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
     4ae:	c8 01       	movw	r24, r16
     4b0:	b7 01       	movw	r22, r14
     4b2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	bc 01       	movw	r22, r24
     4d0:	cd 01       	movw	r24, r26
     4d2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	9a 83       	std	Y+2, r25	; 0x02
     4dc:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4de:	ed e9       	ldi	r30, 0x9D	; 157
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	89 2f       	mov	r24, r25
     4e8:	99 27       	eor	r25, r25
     4ea:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4ec:	ec e9       	ldi	r30, 0x9C	; 156
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	80 83       	st	Z, r24
}
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	0f 92       	push	r0
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	99 27       	eor	r25, r25
     51a:	87 fd       	sbrc	r24, 7
     51c:	90 95       	com	r25
     51e:	a9 2f       	mov	r26, r25
     520:	b9 2f       	mov	r27, r25
     522:	bc 01       	movw	r22, r24
     524:	cd 01       	movw	r24, r26
     526:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	bc 01       	movw	r22, r24
     530:	cd 01       	movw	r24, r26
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	44 eb       	ldi	r20, 0xB4	; 180
     538:	52 e4       	ldi	r21, 0x42	; 66
     53a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	26 e6       	ldi	r18, 0x66	; 102
     548:	36 e6       	ldi	r19, 0x66	; 102
     54a:	46 e3       	ldi	r20, 0x36	; 54
     54c:	51 ec       	ldi	r21, 0xC1	; 193
     54e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	bc 01       	movw	r22, r24
     558:	cd 01       	movw	r24, r26
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4c e6       	ldi	r20, 0x6C	; 108
     560:	53 e4       	ldi	r21, 0x43	; 67
     562:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	9c 01       	movw	r18, r24
     56c:	ad 01       	movw	r20, r26
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	8f e7       	ldi	r24, 0x7F	; 127
     574:	93 e4       	ldi	r25, 0x43	; 67
     576:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__subsf3>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	bc 01       	movw	r22, r24
     580:	cd 01       	movw	r24, r26
     582:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	a2 de       	rcall	.-700    	; 0x2d0 <servo_set_duty_cycle_umbrella>
}
     58c:	0f 90       	pop	r0
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	0f 92       	push	r0
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	99 27       	eor	r25, r25
     5a4:	87 fd       	sbrc	r24, 7
     5a6:	90 95       	com	r25
     5a8:	a9 2f       	mov	r26, r25
     5aa:	b9 2f       	mov	r27, r25
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	44 eb       	ldi	r20, 0xB4	; 180
     5c2:	52 e4       	ldi	r21, 0x42	; 66
     5c4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	26 e6       	ldi	r18, 0x66	; 102
     5d2:	36 e6       	ldi	r19, 0x66	; 102
     5d4:	46 e3       	ldi	r20, 0x36	; 54
     5d6:	51 ec       	ldi	r21, 0xC1	; 193
     5d8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4c e6       	ldi	r20, 0x6C	; 108
     5ea:	53 e4       	ldi	r21, 0x43	; 67
     5ec:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	9c 01       	movw	r18, r24
     5f6:	ad 01       	movw	r20, r26
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	8f e7       	ldi	r24, 0x7F	; 127
     5fe:	93 e4       	ldi	r25, 0x43	; 67
     600:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__subsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     610:	dc 01       	movw	r26, r24
     612:	cb 01       	movw	r24, r22
     614:	bc de       	rcall	.-648    	; 0x38e <servo_set_duty_cycle_door>
}
     616:	0f 90       	pop	r0
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	0f 92       	push	r0
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	99 27       	eor	r25, r25
     62e:	87 fd       	sbrc	r24, 7
     630:	90 95       	com	r25
     632:	a9 2f       	mov	r26, r25
     634:	b9 2f       	mov	r27, r25
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <__floatsisf>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	bc 01       	movw	r22, r24
     644:	cd 01       	movw	r24, r26
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	44 eb       	ldi	r20, 0xB4	; 180
     64c:	52 e4       	ldi	r21, 0x42	; 66
     64e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__divsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	26 e6       	ldi	r18, 0x66	; 102
     65c:	36 e6       	ldi	r19, 0x66	; 102
     65e:	46 e3       	ldi	r20, 0x36	; 54
     660:	51 ec       	ldi	r21, 0xC1	; 193
     662:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	4c e6       	ldi	r20, 0x6C	; 108
     674:	53 e4       	ldi	r21, 0x43	; 67
     676:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__addsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	9c 01       	movw	r18, r24
     680:	ad 01       	movw	r20, r26
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	8f e7       	ldi	r24, 0x7F	; 127
     688:	93 e4       	ldi	r25, 0x43	; 67
     68a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__subsf3>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	d6 de       	rcall	.-596    	; 0x44c <servo_set_duty_cycle_left_grabber>
}
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	08 95       	ret

000006a8 <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	0f 92       	push	r0
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6b4:	e7 e4       	ldi	r30, 0x47	; 71
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	80 83       	st	Z, r24
}
     6bc:	0f 90       	pop	r0
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-10);
     6cc:	86 ef       	ldi	r24, 0xF6	; 246
     6ce:	a7 df       	rcall	.-178    	; 0x61e <servo_set_left_grabber_position>
	servo_set_right_grabber_position(80);//200 is for the half step
     6d0:	80 e5       	ldi	r24, 0x50	; 80
     6d2:	ea df       	rcall	.-44     	; 0x6a8 <servo_set_right_grabber_position>
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	2e 97       	sbiw	r28, 0x0e	; 14
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     6ee:	8a e5       	ldi	r24, 0x5A	; 90
     6f0:	51 df       	rcall	.-350    	; 0x594 <servo_set_door_position>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	aa ef       	ldi	r26, 0xFA	; 250
     6f8:	b4 e4       	ldi	r27, 0x44	; 68
     6fa:	8b 87       	std	Y+11, r24	; 0x0b
     6fc:	9c 87       	std	Y+12, r25	; 0x0c
     6fe:	ad 87       	std	Y+13, r26	; 0x0d
     700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     702:	6b 85       	ldd	r22, Y+11	; 0x0b
     704:	7c 85       	ldd	r23, Y+12	; 0x0c
     706:	8d 85       	ldd	r24, Y+13	; 0x0d
     708:	9e 85       	ldd	r25, Y+14	; 0x0e
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e4       	ldi	r19, 0x40	; 64
     70e:	4c e1       	ldi	r20, 0x1C	; 28
     710:	55 e4       	ldi	r21, 0x45	; 69
     712:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	8f 83       	std	Y+7, r24	; 0x07
     71c:	98 87       	std	Y+8, r25	; 0x08
     71e:	a9 87       	std	Y+9, r26	; 0x09
     720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     722:	6f 81       	ldd	r22, Y+7	; 0x07
     724:	78 85       	ldd	r23, Y+8	; 0x08
     726:	89 85       	ldd	r24, Y+9	; 0x09
     728:	9a 85       	ldd	r25, Y+10	; 0x0a
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e8       	ldi	r20, 0x80	; 128
     730:	5f e3       	ldi	r21, 0x3F	; 63
     732:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__cmpsf2>
     736:	88 23       	and	r24, r24
     738:	2c f4       	brge	.+10     	; 0x744 <actuators_umbrella+0x6a>
		__ticks = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	9e 83       	std	Y+6, r25	; 0x06
     740:	8d 83       	std	Y+5, r24	; 0x05
     742:	3f c0       	rjmp	.+126    	; 0x7c2 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     744:	6f 81       	ldd	r22, Y+7	; 0x07
     746:	78 85       	ldd	r23, Y+8	; 0x08
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	3f ef       	ldi	r19, 0xFF	; 255
     750:	4f e7       	ldi	r20, 0x7F	; 127
     752:	57 e4       	ldi	r21, 0x47	; 71
     754:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__gesf2>
     758:	18 16       	cp	r1, r24
     75a:	4c f5       	brge	.+82     	; 0x7ae <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75c:	6b 85       	ldd	r22, Y+11	; 0x0b
     75e:	7c 85       	ldd	r23, Y+12	; 0x0c
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
     762:	9e 85       	ldd	r25, Y+14	; 0x0e
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e2       	ldi	r20, 0x20	; 32
     76a:	51 e4       	ldi	r21, 0x41	; 65
     76c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	bc 01       	movw	r22, r24
     776:	cd 01       	movw	r24, r26
     778:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	9e 83       	std	Y+6, r25	; 0x06
     782:	8d 83       	std	Y+5, r24	; 0x05
     784:	0f c0       	rjmp	.+30     	; 0x7a4 <actuators_umbrella+0xca>
     786:	8a ef       	ldi	r24, 0xFA	; 250
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9c 83       	std	Y+4, r25	; 0x04
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <actuators_umbrella+0xb8>
     796:	9c 83       	std	Y+4, r25	; 0x04
     798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     79a:	8d 81       	ldd	r24, Y+5	; 0x05
     79c:	9e 81       	ldd	r25, Y+6	; 0x06
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	9e 83       	std	Y+6, r25	; 0x06
     7a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a4:	8d 81       	ldd	r24, Y+5	; 0x05
     7a6:	9e 81       	ldd	r25, Y+6	; 0x06
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	69 f7       	brne	.-38     	; 0x786 <actuators_umbrella+0xac>
     7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ae:	6f 81       	ldd	r22, Y+7	; 0x07
     7b0:	78 85       	ldd	r23, Y+8	; 0x08
     7b2:	89 85       	ldd	r24, Y+9	; 0x09
     7b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	8d 83       	std	Y+5, r24	; 0x05
     7c2:	8d 81       	ldd	r24, Y+5	; 0x05
     7c4:	9e 81       	ldd	r25, Y+6	; 0x06
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	89 83       	std	Y+1, r24	; 0x01
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <actuators_umbrella+0xf4>
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_set_umbrella_position(70);
     7d6:	86 e4       	ldi	r24, 0x46	; 70
     7d8:	98 de       	rcall	.-720    	; 0x50a <servo_set_umbrella_position>
	
}
     7da:	2e 96       	adiw	r28, 0x0e	; 14
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	cf 91       	pop	r28
     7e8:	df 91       	pop	r29
     7ea:	08 95       	ret

000007ec <actuators_setup>:
void actuators_setup(void)
{
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	aa 97       	sbiw	r28, 0x2a	; 42
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     800:	8a e5       	ldi	r24, 0x5A	; 90
     802:	c8 de       	rcall	.-624    	; 0x594 <servo_set_door_position>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	aa e7       	ldi	r26, 0x7A	; 122
     80a:	b4 e4       	ldi	r27, 0x44	; 68
     80c:	8f a3       	std	Y+39, r24	; 0x27
     80e:	98 a7       	std	Y+40, r25	; 0x28
     810:	a9 a7       	std	Y+41, r26	; 0x29
     812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     814:	6f a1       	ldd	r22, Y+39	; 0x27
     816:	78 a5       	ldd	r23, Y+40	; 0x28
     818:	89 a5       	ldd	r24, Y+41	; 0x29
     81a:	9a a5       	ldd	r25, Y+42	; 0x2a
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e4       	ldi	r19, 0x40	; 64
     820:	4c e1       	ldi	r20, 0x1C	; 28
     822:	55 e4       	ldi	r21, 0x45	; 69
     824:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	8b a3       	std	Y+35, r24	; 0x23
     82e:	9c a3       	std	Y+36, r25	; 0x24
     830:	ad a3       	std	Y+37, r26	; 0x25
     832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     834:	6b a1       	ldd	r22, Y+35	; 0x23
     836:	7c a1       	ldd	r23, Y+36	; 0x24
     838:	8d a1       	ldd	r24, Y+37	; 0x25
     83a:	9e a1       	ldd	r25, Y+38	; 0x26
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e8       	ldi	r20, 0x80	; 128
     842:	5f e3       	ldi	r21, 0x3F	; 63
     844:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__cmpsf2>
     848:	88 23       	and	r24, r24
     84a:	2c f4       	brge	.+10     	; 0x856 <actuators_setup+0x6a>
		__ticks = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9a a3       	std	Y+34, r25	; 0x22
     852:	89 a3       	std	Y+33, r24	; 0x21
     854:	3f c0       	rjmp	.+126    	; 0x8d4 <actuators_setup+0xe8>
	else if (__tmp > 65535)
     856:	6b a1       	ldd	r22, Y+35	; 0x23
     858:	7c a1       	ldd	r23, Y+36	; 0x24
     85a:	8d a1       	ldd	r24, Y+37	; 0x25
     85c:	9e a1       	ldd	r25, Y+38	; 0x26
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	3f ef       	ldi	r19, 0xFF	; 255
     862:	4f e7       	ldi	r20, 0x7F	; 127
     864:	57 e4       	ldi	r21, 0x47	; 71
     866:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__gesf2>
     86a:	18 16       	cp	r1, r24
     86c:	4c f5       	brge	.+82     	; 0x8c0 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86e:	6f a1       	ldd	r22, Y+39	; 0x27
     870:	78 a5       	ldd	r23, Y+40	; 0x28
     872:	89 a5       	ldd	r24, Y+41	; 0x29
     874:	9a a5       	ldd	r25, Y+42	; 0x2a
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e2       	ldi	r20, 0x20	; 32
     87c:	51 e4       	ldi	r21, 0x41	; 65
     87e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	9a a3       	std	Y+34, r25	; 0x22
     894:	89 a3       	std	Y+33, r24	; 0x21
     896:	0f c0       	rjmp	.+30     	; 0x8b6 <actuators_setup+0xca>
     898:	8a ef       	ldi	r24, 0xFA	; 250
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	98 a3       	std	Y+32, r25	; 0x20
     89e:	8f 8f       	std	Y+31, r24	; 0x1f
     8a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8a2:	98 a1       	ldd	r25, Y+32	; 0x20
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <actuators_setup+0xb8>
     8a8:	98 a3       	std	Y+32, r25	; 0x20
     8aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ac:	89 a1       	ldd	r24, Y+33	; 0x21
     8ae:	9a a1       	ldd	r25, Y+34	; 0x22
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	9a a3       	std	Y+34, r25	; 0x22
     8b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b6:	89 a1       	ldd	r24, Y+33	; 0x21
     8b8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	69 f7       	brne	.-38     	; 0x898 <actuators_setup+0xac>
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8c0:	6b a1       	ldd	r22, Y+35	; 0x23
     8c2:	7c a1       	ldd	r23, Y+36	; 0x24
     8c4:	8d a1       	ldd	r24, Y+37	; 0x25
     8c6:	9e a1       	ldd	r25, Y+38	; 0x26
     8c8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     8cc:	dc 01       	movw	r26, r24
     8ce:	cb 01       	movw	r24, r22
     8d0:	9a a3       	std	Y+34, r25	; 0x22
     8d2:	89 a3       	std	Y+33, r24	; 0x21
     8d4:	89 a1       	ldd	r24, Y+33	; 0x21
     8d6:	9a a1       	ldd	r25, Y+34	; 0x22
     8d8:	9e 8f       	std	Y+30, r25	; 0x1e
     8da:	8d 8f       	std	Y+29, r24	; 0x1d
     8dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8de:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <actuators_setup+0xf4>
     8e4:	9e 8f       	std	Y+30, r25	; 0x1e
     8e6:	8d 8f       	std	Y+29, r24	; 0x1d
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	aa e7       	ldi	r26, 0x7A	; 122
     8ee:	b4 e4       	ldi	r27, 0x44	; 68
     8f0:	89 8f       	std	Y+25, r24	; 0x19
     8f2:	9a 8f       	std	Y+26, r25	; 0x1a
     8f4:	ab 8f       	std	Y+27, r26	; 0x1b
     8f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	69 8d       	ldd	r22, Y+25	; 0x19
     8fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e4       	ldi	r19, 0x40	; 64
     904:	4c e1       	ldi	r20, 0x1C	; 28
     906:	55 e4       	ldi	r21, 0x45	; 69
     908:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 8b       	std	Y+21, r24	; 0x15
     912:	9e 8b       	std	Y+22, r25	; 0x16
     914:	af 8b       	std	Y+23, r26	; 0x17
     916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     918:	6d 89       	ldd	r22, Y+21	; 0x15
     91a:	7e 89       	ldd	r23, Y+22	; 0x16
     91c:	8f 89       	ldd	r24, Y+23	; 0x17
     91e:	98 8d       	ldd	r25, Y+24	; 0x18
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e8       	ldi	r20, 0x80	; 128
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <actuators_setup+0x14e>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9c 8b       	std	Y+20, r25	; 0x14
     936:	8b 8b       	std	Y+19, r24	; 0x13
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <actuators_setup+0x1cc>
	else if (__tmp > 65535)
     93a:	6d 89       	ldd	r22, Y+21	; 0x15
     93c:	7e 89       	ldd	r23, Y+22	; 0x16
     93e:	8f 89       	ldd	r24, Y+23	; 0x17
     940:	98 8d       	ldd	r25, Y+24	; 0x18
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	4f e7       	ldi	r20, 0x7F	; 127
     948:	57 e4       	ldi	r21, 0x47	; 71
     94a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <actuators_setup+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	69 8d       	ldd	r22, Y+25	; 0x19
     954:	7a 8d       	ldd	r23, Y+26	; 0x1a
     956:	8b 8d       	ldd	r24, Y+27	; 0x1b
     958:	9c 8d       	ldd	r25, Y+28	; 0x1c
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e2       	ldi	r20, 0x20	; 32
     960:	51 e4       	ldi	r21, 0x41	; 65
     962:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9c 8b       	std	Y+20, r25	; 0x14
     978:	8b 8b       	std	Y+19, r24	; 0x13
     97a:	0f c0       	rjmp	.+30     	; 0x99a <actuators_setup+0x1ae>
     97c:	8a ef       	ldi	r24, 0xFA	; 250
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	9a 8b       	std	Y+18, r25	; 0x12
     982:	89 8b       	std	Y+17, r24	; 0x11
     984:	89 89       	ldd	r24, Y+17	; 0x11
     986:	9a 89       	ldd	r25, Y+18	; 0x12
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <actuators_setup+0x19c>
     98c:	9a 8b       	std	Y+18, r25	; 0x12
     98e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	8b 89       	ldd	r24, Y+19	; 0x13
     992:	9c 89       	ldd	r25, Y+20	; 0x14
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	8b 89       	ldd	r24, Y+19	; 0x13
     99c:	9c 89       	ldd	r25, Y+20	; 0x14
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	69 f7       	brne	.-38     	; 0x97c <actuators_setup+0x190>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <actuators_setup+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 89       	ldd	r22, Y+21	; 0x15
     9a6:	7e 89       	ldd	r23, Y+22	; 0x16
     9a8:	8f 89       	ldd	r24, Y+23	; 0x17
     9aa:	98 8d       	ldd	r25, Y+24	; 0x18
     9ac:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9c 8b       	std	Y+20, r25	; 0x14
     9b6:	8b 8b       	std	Y+19, r24	; 0x13
     9b8:	8b 89       	ldd	r24, Y+19	; 0x13
     9ba:	9c 89       	ldd	r25, Y+20	; 0x14
     9bc:	98 8b       	std	Y+16, r25	; 0x10
     9be:	8f 87       	std	Y+15, r24	; 0x0f
     9c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c2:	98 89       	ldd	r25, Y+16	; 0x10
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <actuators_setup+0x1d8>
     9c8:	98 8b       	std	Y+16, r25	; 0x10
     9ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	//servo_set_umbrella_position(-89);
	_delay_ms(1000);
	servo_set_door_position(30);
     9cc:	8e e1       	ldi	r24, 0x1E	; 30
     9ce:	e2 dd       	rcall	.-1084   	; 0x594 <servo_set_door_position>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	aa ef       	ldi	r26, 0xFA	; 250
     9d6:	b3 e4       	ldi	r27, 0x43	; 67
     9d8:	8b 87       	std	Y+11, r24	; 0x0b
     9da:	9c 87       	std	Y+12, r25	; 0x0c
     9dc:	ad 87       	std	Y+13, r26	; 0x0d
     9de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e4       	ldi	r19, 0x40	; 64
     9ec:	4c e1       	ldi	r20, 0x1C	; 28
     9ee:	55 e4       	ldi	r21, 0x45	; 69
     9f0:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	8f 83       	std	Y+7, r24	; 0x07
     9fa:	98 87       	std	Y+8, r25	; 0x08
     9fc:	a9 87       	std	Y+9, r26	; 0x09
     9fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a00:	6f 81       	ldd	r22, Y+7	; 0x07
     a02:	78 85       	ldd	r23, Y+8	; 0x08
     a04:	89 85       	ldd	r24, Y+9	; 0x09
     a06:	9a 85       	ldd	r25, Y+10	; 0x0a
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e8       	ldi	r20, 0x80	; 128
     a0e:	5f e3       	ldi	r21, 0x3F	; 63
     a10:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__cmpsf2>
     a14:	88 23       	and	r24, r24
     a16:	2c f4       	brge	.+10     	; 0xa22 <actuators_setup+0x236>
		__ticks = 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9e 83       	std	Y+6, r25	; 0x06
     a1e:	8d 83       	std	Y+5, r24	; 0x05
     a20:	3f c0       	rjmp	.+126    	; 0xaa0 <actuators_setup+0x2b4>
	else if (__tmp > 65535)
     a22:	6f 81       	ldd	r22, Y+7	; 0x07
     a24:	78 85       	ldd	r23, Y+8	; 0x08
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	4f e7       	ldi	r20, 0x7F	; 127
     a30:	57 e4       	ldi	r21, 0x47	; 71
     a32:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__gesf2>
     a36:	18 16       	cp	r1, r24
     a38:	4c f5       	brge	.+82     	; 0xa8c <actuators_setup+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a40:	9e 85       	ldd	r25, Y+14	; 0x0e
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e2       	ldi	r20, 0x20	; 32
     a48:	51 e4       	ldi	r21, 0x41	; 65
     a4a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	9e 83       	std	Y+6, r25	; 0x06
     a60:	8d 83       	std	Y+5, r24	; 0x05
     a62:	0f c0       	rjmp	.+30     	; 0xa82 <actuators_setup+0x296>
     a64:	8a ef       	ldi	r24, 0xFA	; 250
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <actuators_setup+0x284>
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a78:	8d 81       	ldd	r24, Y+5	; 0x05
     a7a:	9e 81       	ldd	r25, Y+6	; 0x06
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9e 83       	std	Y+6, r25	; 0x06
     a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	9e 81       	ldd	r25, Y+6	; 0x06
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	69 f7       	brne	.-38     	; 0xa64 <actuators_setup+0x278>
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <actuators_setup+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8c:	6f 81       	ldd	r22, Y+7	; 0x07
     a8e:	78 85       	ldd	r23, Y+8	; 0x08
     a90:	89 85       	ldd	r24, Y+9	; 0x09
     a92:	9a 85       	ldd	r25, Y+10	; 0x0a
     a94:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__fixunssfsi>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	9e 83       	std	Y+6, r25	; 0x06
     a9e:	8d 83       	std	Y+5, r24	; 0x05
     aa0:	8d 81       	ldd	r24, Y+5	; 0x05
     aa2:	9e 81       	ldd	r25, Y+6	; 0x06
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <actuators_setup+0x2c0>
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     ab4:	07 de       	rcall	.-1010   	; 0x6c4 <servo_set_grabbers_up>
}
     ab6:	aa 96       	adiw	r28, 0x2a	; 42
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	00 90 5b 00 	lds	r0, 0x005B
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <__vector_18+0x2a>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <__vector_18+0x2c>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     af8:	ed ee       	ldi	r30, 0xED	; 237
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     b00:	1b 82       	std	Y+3, r1	; 0x03
     b02:	9c c0       	rjmp	.+312    	; 0xc3c <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     b04:	ed ee       	ldi	r30, 0xED	; 237
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	82 95       	swap	r24
     b0c:	80 7f       	andi	r24, 0xF0	; 240
     b0e:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     b10:	ee ee       	ldi	r30, 0xEE	; 238
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	82 95       	swap	r24
     b18:	86 95       	lsr	r24
     b1a:	87 70       	andi	r24, 0x07	; 7
     b1c:	88 2f       	mov	r24, r24
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	81 70       	andi	r24, 0x01	; 1
     b22:	90 70       	andi	r25, 0x00	; 0
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <__vector_18+0x62>
     b28:	6e c0       	rjmp	.+220    	; 0xc06 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     b2a:	ef ee       	ldi	r30, 0xEF	; 239
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 e8       	ldi	r24, 0x80	; 128
     b30:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     b32:	ae ee       	ldi	r26, 0xEE	; 238
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ee ee       	ldi	r30, 0xEE	; 238
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	8f 7d       	andi	r24, 0xDF	; 223
     b3e:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     b40:	e2 ef       	ldi	r30, 0xF2	; 242
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	82 95       	swap	r24
     b48:	86 95       	lsr	r24
     b4a:	87 70       	andi	r24, 0x07	; 7
     b4c:	28 2f       	mov	r18, r24
     b4e:	e3 ef       	ldi	r30, 0xF3	; 243
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	82 2b       	or	r24, r18
     b66:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	2a c0       	rjmp	.+84     	; 0xbc0 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	82 1b       	sub	r24, r18
     b78:	93 0b       	sbc	r25, r19
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	90 95       	com	r25
     b80:	81 95       	neg	r24
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	fc 01       	movw	r30, r24
     b86:	e6 5f       	subi	r30, 0xF6	; 246
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	40 81       	ld	r20, Z
     b8c:	51 81       	ldd	r21, Z+1	; 0x01
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	fc 01       	movw	r30, r24
     b98:	e2 5e       	subi	r30, 0xE2	; 226
     b9a:	fe 4f       	sbci	r31, 0xFE	; 254
     b9c:	80 81       	ld	r24, Z
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	da 01       	movw	r26, r20
     bae:	a8 0f       	add	r26, r24
     bb0:	b9 1f       	adc	r27, r25
     bb2:	ea ef       	ldi	r30, 0xFA	; 250
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 30       	cpi	r24, 0x08	; 8
     bc4:	98 f2       	brcs	.-90     	; 0xb6c <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	fc 01       	movw	r30, r24
     bd0:	e2 5e       	subi	r30, 0xE2	; 226
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	80 83       	st	Z, r24
     bda:	80 81       	ld	r24, Z
     bdc:	85 30       	cpi	r24, 0x05	; 5
     bde:	41 f4       	brne	.+16     	; 0xbf0 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	fc 01       	movw	r30, r24
     bea:	e2 5e       	subi	r30, 0xE2	; 226
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	fc 01       	movw	r30, r24
     bfa:	ee 5c       	subi	r30, 0xCE	; 206
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 83       	st	Z, r24
     c04:	1f c0       	rjmp	.+62     	; 0xc44 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     c06:	ee ee       	ldi	r30, 0xEE	; 238
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	82 95       	swap	r24
     c0e:	86 95       	lsr	r24
     c10:	86 95       	lsr	r24
     c12:	83 70       	andi	r24, 0x03	; 3
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	88 23       	and	r24, r24
     c1e:	59 f0       	breq	.+22     	; 0xc36 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     c20:	ef ee       	ldi	r30, 0xEF	; 239
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     c26:	ae ee       	ldi	r26, 0xEE	; 238
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ee ee       	ldi	r30, 0xEE	; 238
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8f 7b       	andi	r24, 0xBF	; 191
     c32:	8c 93       	st	X, r24
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	8f 30       	cpi	r24, 0x0F	; 15
     c40:	08 f4       	brcc	.+2      	; 0xc44 <__vector_18+0x17c>
     c42:	60 cf       	rjmp	.-320    	; 0xb04 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     c44:	ed ee       	ldi	r30, 0xED	; 237
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     c4c:	aa ed       	ldi	r26, 0xDA	; 218
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ea ed       	ldi	r30, 0xDA	; 218
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8c 93       	st	X, r24
}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	00 92 5b 00 	sts	0x005B, r0
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <CAN_InitModule+0x6>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     c92:	e8 ed       	ldi	r30, 0xD8	; 216
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     c9a:	1a 82       	std	Y+2, r1	; 0x02
     c9c:	32 c0       	rjmp	.+100    	; 0xd02 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     c9e:	ed ee       	ldi	r30, 0xED	; 237
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	82 95       	swap	r24
     ca6:	80 7f       	andi	r24, 0xF0	; 240
     ca8:	80 83       	st	Z, r24

		CANSTMOB = 0;
     caa:	ee ee       	ldi	r30, 0xEE	; 238
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	10 82       	st	Z, r1
		CANCDMOB = 0;
     cb0:	ef ee       	ldi	r30, 0xEF	; 239
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1

		CANIDT1 = 0;
     cb6:	e3 ef       	ldi	r30, 0xF3	; 243
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
		CANIDT2 = 0;
     cbc:	e2 ef       	ldi	r30, 0xF2	; 242
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
		CANIDT3 = 0;
     cc2:	e1 ef       	ldi	r30, 0xF1	; 241
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
		CANIDT4 = 0;
     cc8:	e0 ef       	ldi	r30, 0xF0	; 240
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
		CANIDM1 = 0;
     cce:	e7 ef       	ldi	r30, 0xF7	; 247
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
		CANIDM2 = 0;
     cd4:	e6 ef       	ldi	r30, 0xF6	; 246
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
		CANIDM3 = 0;
     cda:	e5 ef       	ldi	r30, 0xF5	; 245
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
		CANIDM4 = 0;
     ce0:	e4 ef       	ldi	r30, 0xF4	; 244
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     ce6:	19 82       	std	Y+1, r1	; 0x01
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <CAN_InitModule+0x6e>
			CANMSG = 0;
     cea:	ea ef       	ldi	r30, 0xFA	; 250
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	b8 f3       	brcs	.-18     	; 0xcea <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	8f 30       	cpi	r24, 0x0F	; 15
     d06:	58 f2       	brcs	.-106    	; 0xc9e <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     d08:	e8 ed       	ldi	r30, 0xD8	; 216
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     d10:	e2 ee       	ldi	r30, 0xE2	; 226
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     d18:	e3 ee       	ldi	r30, 0xE3	; 227
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     d20:	e4 ee       	ldi	r30, 0xE4	; 228
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	8e e5       	ldi	r24, 0x5E	; 94
     d26:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     d28:	e5 ee       	ldi	r30, 0xE5	; 229
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     d2e:	eb ed       	ldi	r30, 0xDB	; 219
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 eb       	ldi	r24, 0xB0	; 176
     d34:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     d36:	ef ed       	ldi	r30, 0xDF	; 223
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	8f e7       	ldi	r24, 0x7F	; 127
     d3c:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     d3e:	ee ed       	ldi	r30, 0xDE	; 222
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	80 83       	st	Z, r24
	sei();
     d46:	78 94       	sei
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <CAN_InitRxMob+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <CAN_InitRxMob+0x8>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     d64:	ed ee       	ldi	r30, 0xED	; 237
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     d6c:	e9 ed       	ldi	r30, 0xD9	; 217
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	82 95       	swap	r24
     d74:	8f 70       	andi	r24, 0x0F	; 15
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	81 70       	andi	r24, 0x01	; 1
     d7c:	90 70       	andi	r25, 0x00	; 0
     d7e:	88 23       	and	r24, r24
     d80:	a9 f7       	brne	.-22     	; 0xd6c <CAN_InitRxMob+0x1a>
     d82:	e9 ed       	ldi	r30, 0xD9	; 217
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	86 95       	lsr	r24
     d8a:	86 95       	lsr	r24
     d8c:	86 95       	lsr	r24
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	81 70       	andi	r24, 0x01	; 1
     d94:	90 70       	andi	r25, 0x00	; 0
     d96:	88 23       	and	r24, r24
     d98:	49 f7       	brne	.-46     	; 0xd6c <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     d9a:	1a 82       	std	Y+2, r1	; 0x02
     d9c:	3f c0       	rjmp	.+126    	; 0xe1c <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     d9e:	ed ee       	ldi	r30, 0xED	; 237
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	82 95       	swap	r24
     da6:	80 7f       	andi	r24, 0xF0	; 240
     da8:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     daa:	ef ee       	ldi	r30, 0xEF	; 239
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	82 95       	swap	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	83 70       	andi	r24, 0x03	; 3
     db8:	88 23       	and	r24, r24
     dba:	69 f5       	brne	.+90     	; 0xe16 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     dbc:	ef ee       	ldi	r30, 0xEF	; 239
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	8f e0       	ldi	r24, 0x0F	; 15
     dc2:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     dc4:	e3 ef       	ldi	r30, 0xF3	; 243
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     ddc:	e2 ef       	ldi	r30, 0xF2	; 242
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	82 95       	swap	r24
     de4:	88 0f       	add	r24, r24
     de6:	80 7e       	andi	r24, 0xE0	; 224
     de8:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     dea:	e6 ef       	ldi	r30, 0xF6	; 246
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 ee       	ldi	r24, 0xE0	; 224
     df0:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     df2:	e7 ef       	ldi	r30, 0xF7	; 247
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     dfa:	af ee       	ldi	r26, 0xEF	; 239
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ef ee       	ldi	r30, 0xEF	; 239
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 68       	ori	r24, 0x80	; 128
     e06:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     e08:	ed ee       	ldi	r30, 0xED	; 237
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	80 83       	st	Z, r24

		return 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	8a 83       	std	Y+2, r24	; 0x02
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	8f 30       	cpi	r24, 0x0F	; 15
     e20:	08 f4       	brcc	.+2      	; 0xe24 <CAN_InitRxMob+0xd2>
     e22:	bd cf       	rjmp	.-134    	; 0xd9e <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     e24:	ed ee       	ldi	r30, 0xED	; 237
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	80 83       	st	Z, r24

	return 0;
     e2c:	1d 82       	std	Y+5, r1	; 0x05
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <CAN_Init+0xa>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     e50:	1b df       	rcall	.-458    	; 0xc88 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     e52:	19 82       	std	Y+1, r1	; 0x01
     e54:	35 c0       	rjmp	.+106    	; 0xec0 <CAN_Init+0x80>
	{
		CAN_InitRxMob(i + 1);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	79 df       	rcall	.-270    	; 0xd52 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	8c 01       	movw	r16, r24
     e6c:	06 5f       	subi	r16, 0xF6	; 246
     e6e:	1e 4f       	sbci	r17, 0xFE	; 254
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	a8 d7       	rcall	.+3920   	; 0x1dca <calloc>
     e7a:	f8 01       	movw	r30, r16
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	48 2f       	mov	r20, r24
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	fc 01       	movw	r30, r24
     e94:	ee 5c       	subi	r30, 0xCE	; 206
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	10 82       	st	Z, r1
     e9a:	fc 01       	movw	r30, r24
     e9c:	ee 5c       	subi	r30, 0xCE	; 206
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	80 81       	ld	r24, Z
     ea2:	f9 01       	movw	r30, r18
     ea4:	e8 5d       	subi	r30, 0xD8	; 216
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	80 83       	st	Z, r24
     eaa:	f9 01       	movw	r30, r18
     eac:	e8 5d       	subi	r30, 0xD8	; 216
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	80 81       	ld	r24, Z
     eb2:	fa 01       	movw	r30, r20
     eb4:	e2 5e       	subi	r30, 0xE2	; 226
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	98 17       	cp	r25, r24
     ec6:	38 f2       	brcs	.-114    	; 0xe56 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	08 95       	ret

00000ed6 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	2c 97       	sbiw	r28, 0x0c	; 12
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	89 87       	std	Y+9, r24	; 0x09
     eec:	6a 87       	std	Y+10, r22	; 0x0a
     eee:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     ef0:	80 91 08 01 	lds	r24, 0x0108
     ef4:	90 91 09 01 	lds	r25, 0x0109
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	06 97       	sbiw	r24, 0x06	; 6
     f02:	98 87       	std	Y+8, r25	; 0x08
     f04:	8f 83       	std	Y+7, r24	; 0x07
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     f08:	ef 81       	ldd	r30, Y+7	; 0x07
     f0a:	f8 85       	ldd	r31, Y+8	; 0x08
     f0c:	90 81       	ld	r25, Z
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	98 17       	cp	r25, r24
     f12:	19 f4       	brne	.+6      	; 0xf1a <gpio_register_pin+0x44>
            return 1;
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	2c 87       	std	Y+12, r18	; 0x0c
     f18:	c8 c0       	rjmp	.+400    	; 0x10aa <gpio_register_pin+0x1d4>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f1a:	ef 81       	ldd	r30, Y+7	; 0x07
     f1c:	f8 85       	ldd	r31, Y+8	; 0x08
     f1e:	80 85       	ldd	r24, Z+8	; 0x08
     f20:	91 85       	ldd	r25, Z+9	; 0x09
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	06 97       	sbiw	r24, 0x06	; 6
     f2c:	98 87       	std	Y+8, r25	; 0x08
     f2e:	8f 83       	std	Y+7, r24	; 0x07
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	06 96       	adiw	r24, 0x06	; 6
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	86 30       	cpi	r24, 0x06	; 6
     f3a:	92 07       	cpc	r25, r18
     f3c:	29 f7       	brne	.-54     	; 0xf08 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	87 70       	andi	r24, 0x07	; 7
     f4e:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     f50:	8a 85       	ldd	r24, Y+10	; 0x0a
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	09 f0       	breq	.+2      	; 0xf58 <gpio_register_pin+0x82>
     f56:	48 c0       	rjmp	.+144    	; 0xfe8 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c9 01       	movw	r24, r18
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	4e 96       	adiw	r24, 0x1e	; 30
     f6a:	dc 01       	movw	r26, r24
     f6c:	8e 81       	ldd	r24, Y+6	; 0x06
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	c9 01       	movw	r24, r18
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	4e 96       	adiw	r24, 0x1e	; 30
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <gpio_register_pin+0xbe>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	2a 95       	dec	r18
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <gpio_register_pin+0xba>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	c9 01       	movw	r24, r18
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	4f 96       	adiw	r24, 0x1f	; 31
     fae:	dc 01       	movw	r26, r24
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	4f 96       	adiw	r24, 0x1f	; 31
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <gpio_register_pin+0x104>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <gpio_register_pin+0x100>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
        return 0;
     fe4:	1c 86       	std	Y+12, r1	; 0x0c
     fe6:	61 c0       	rjmp	.+194    	; 0x10aa <gpio_register_pin+0x1d4>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	c9 01       	movw	r24, r18
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	4e 96       	adiw	r24, 0x1e	; 30
     ffa:	dc 01       	movw	r26, r24
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	c9 01       	movw	r24, r18
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	4e 96       	adiw	r24, 0x1e	; 30
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <gpio_register_pin+0x14e>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	2a 95       	dec	r18
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <gpio_register_pin+0x14a>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	c9 01       	movw	r24, r18
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	82 0f       	add	r24, r18
    103c:	93 1f       	adc	r25, r19
    103e:	4f 96       	adiw	r24, 0x1f	; 31
    1040:	dc 01       	movw	r26, r24
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	4f 96       	adiw	r24, 0x1f	; 31
    1054:	fc 01       	movw	r30, r24
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <gpio_register_pin+0x194>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <gpio_register_pin+0x190>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	c3 d6       	rcall	.+3462   	; 0x1dfe <malloc>
    1078:	98 87       	std	Y+8, r25	; 0x08
    107a:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    107c:	8f 81       	ldd	r24, Y+7	; 0x07
    107e:	98 85       	ldd	r25, Y+8	; 0x08
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	19 f4       	brne	.+6      	; 0x108a <gpio_register_pin+0x1b4>
        return 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	8c 87       	std	Y+12, r24	; 0x0c
    1088:	10 c0       	rjmp	.+32     	; 0x10aa <gpio_register_pin+0x1d4>

    input->pin       = pin;
    108a:	ef 81       	ldd	r30, Y+7	; 0x07
    108c:	f8 85       	ldd	r31, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1092:	ef 81       	ldd	r30, Y+7	; 0x07
    1094:	f8 85       	ldd	r31, Y+8	; 0x08
    1096:	8b 85       	ldd	r24, Y+11	; 0x0b
    1098:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	06 96       	adiw	r24, 0x06	; 6
    10a0:	26 e0       	ldi	r18, 0x06	; 6
    10a2:	31 e0       	ldi	r19, 0x01	; 1
    10a4:	b9 01       	movw	r22, r18
    10a6:	0b d0       	rcall	.+22     	; 0x10be <list_add>

    return 0;
    10a8:	1c 86       	std	Y+12, r1	; 0x0c
    10aa:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    10ac:	2c 96       	adiw	r28, 0x0c	; 12
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <list_add+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <list_add+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	7c 83       	std	Y+4, r23	; 0x04
    10d0:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    10d2:	eb 81       	ldd	r30, Y+3	; 0x03
    10d4:	fc 81       	ldd	r31, Y+4	; 0x04
    10d6:	42 81       	ldd	r20, Z+2	; 0x02
    10d8:	53 81       	ldd	r21, Z+3	; 0x03
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	b9 01       	movw	r22, r18
    10e4:	07 d0       	rcall	.+14     	; 0x10f4 <__list_add>
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <__list_add+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <__list_add+0x8>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <__list_add+0xa>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	7c 83       	std	Y+4, r23	; 0x04
    1108:	6b 83       	std	Y+3, r22	; 0x03
    110a:	5e 83       	std	Y+6, r21	; 0x06
    110c:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    110e:	ed 81       	ldd	r30, Y+5	; 0x05
    1110:	fe 81       	ldd	r31, Y+6	; 0x06
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
    new->next = next;
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	93 83       	std	Z+3, r25	; 0x03
    1124:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
    prev->next = new;
    1132:	eb 81       	ldd	r30, Y+3	; 0x03
    1134:	fc 81       	ldd	r31, Y+4	; 0x04
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	93 83       	std	Z+3, r25	; 0x03
    113c:	82 83       	std	Z+2, r24	; 0x02
}
    113e:	26 96       	adiw	r28, 0x06	; 6
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <__gpio_read_pin+0x6>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	86 95       	lsr	r24
    1162:	86 95       	lsr	r24
    1164:	86 95       	lsr	r24
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	87 70       	andi	r24, 0x07	; 7
    116e:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	c9 01       	movw	r24, r18
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	82 0f       	add	r24, r18
    117e:	93 1f       	adc	r25, r19
    1180:	4d 96       	adiw	r24, 0x1d	; 29
    1182:	fc 01       	movw	r30, r24
    1184:	80 81       	ld	r24, Z
    1186:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <__gpio_read_pin+0x4c>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <__gpio_read_pin+0x48>
    11a0:	ca 01       	movw	r24, r20
    11a2:	81 70       	andi	r24, 0x01	; 1
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	2b 97       	sbiw	r28, 0x0b	; 11
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11c6:	80 91 08 01 	lds	r24, 0x0108
    11ca:	90 91 09 01 	lds	r25, 0x0109
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	06 97       	sbiw	r24, 0x06	; 6
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	8f 83       	std	Y+7, r24	; 0x07
    11dc:	55 c0       	rjmp	.+170    	; 0x1288 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    11de:	ef 81       	ldd	r30, Y+7	; 0x07
    11e0:	f8 85       	ldd	r31, Y+8	; 0x08
    11e2:	90 81       	ld	r25, Z
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	98 17       	cp	r25, r24
    11e8:	09 f0       	breq	.+2      	; 0x11ec <gpio_read_pin+0x3c>
    11ea:	43 c0       	rjmp	.+134    	; 0x1272 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    11ec:	1c 82       	std	Y+4, r1	; 0x04
    11ee:	21 c0       	rjmp	.+66     	; 0x1232 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8f 81       	ldd	r24, Y+7	; 0x07
    11f8:	98 85       	ldd	r25, Y+8	; 0x08
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	fc 01       	movw	r30, r24
    1200:	32 96       	adiw	r30, 0x02	; 2
    1202:	40 81       	ld	r20, Z
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9c 01       	movw	r18, r24
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	8f 81       	ldd	r24, Y+7	; 0x07
    1212:	98 85       	ldd	r25, Y+8	; 0x08
    1214:	82 0f       	add	r24, r18
    1216:	93 1f       	adc	r25, r19
    1218:	fc 01       	movw	r30, r24
    121a:	32 96       	adiw	r30, 0x02	; 2
    121c:	80 81       	ld	r24, Z
    121e:	48 17       	cp	r20, r24
    1220:	29 f0       	breq	.+10     	; 0x122c <gpio_read_pin+0x7c>
                    return input->previous_state;
    1222:	ef 81       	ldd	r30, Y+7	; 0x07
    1224:	f8 85       	ldd	r31, Y+8	; 0x08
    1226:	25 81       	ldd	r18, Z+5	; 0x05
    1228:	2b 87       	std	Y+11, r18	; 0x0b
    122a:	38 c0       	rjmp	.+112    	; 0x129c <gpio_read_pin+0xec>
                i++;
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	e0 f2       	brcs	.-72     	; 0x11f0 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1238:	ef 81       	ldd	r30, Y+7	; 0x07
    123a:	f8 85       	ldd	r31, Y+8	; 0x08
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	89 27       	eor	r24, r25
    1242:	88 23       	and	r24, r24
    1244:	29 f0       	breq	.+10     	; 0x1250 <gpio_read_pin+0xa0>
    1246:	ef 81       	ldd	r30, Y+7	; 0x07
    1248:	f8 85       	ldd	r31, Y+8	; 0x08
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	8a 87       	std	Y+10, r24	; 0x0a
    124e:	08 c0       	rjmp	.+16     	; 0x1260 <gpio_read_pin+0xb0>
    1250:	ef 81       	ldd	r30, Y+7	; 0x07
    1252:	f8 85       	ldd	r31, Y+8	; 0x08
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	1a 86       	std	Y+10, r1	; 0x0a
    1258:	88 23       	and	r24, r24
    125a:	11 f4       	brne	.+4      	; 0x1260 <gpio_read_pin+0xb0>
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	2a 87       	std	Y+10, r18	; 0x0a
    1260:	8a 85       	ldd	r24, Y+10	; 0x0a
    1262:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1264:	ef 81       	ldd	r30, Y+7	; 0x07
    1266:	f8 85       	ldd	r31, Y+8	; 0x08
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	85 83       	std	Z+5, r24	; 0x05

            return state;
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	2b 87       	std	Y+11, r18	; 0x0b
    1270:	15 c0       	rjmp	.+42     	; 0x129c <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1272:	ef 81       	ldd	r30, Y+7	; 0x07
    1274:	f8 85       	ldd	r31, Y+8	; 0x08
    1276:	80 85       	ldd	r24, Z+8	; 0x08
    1278:	91 85       	ldd	r25, Z+9	; 0x09
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	06 97       	sbiw	r24, 0x06	; 6
    1284:	98 87       	std	Y+8, r25	; 0x08
    1286:	8f 83       	std	Y+7, r24	; 0x07
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	06 96       	adiw	r24, 0x06	; 6
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	86 30       	cpi	r24, 0x06	; 6
    1292:	92 07       	cpc	r25, r18
    1294:	09 f0       	breq	.+2      	; 0x1298 <gpio_read_pin+0xe8>
    1296:	a3 cf       	rjmp	.-186    	; 0x11de <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    129e:	2b 96       	adiw	r28, 0x0b	; 11
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <gpio_debouncer+0xa>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <gpio_debouncer+0xc>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <gpio_debouncer+0xe>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12c2:	80 91 08 01 	lds	r24, 0x0108
    12c6:	90 91 09 01 	lds	r25, 0x0109
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	06 97       	sbiw	r24, 0x06	; 6
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    12da:	00 91 3c 01 	lds	r16, 0x013C
    12de:	10 91 3d 01 	lds	r17, 0x013D
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	80 81       	ld	r24, Z
    12e8:	33 df       	rcall	.-410    	; 0x1150 <__gpio_read_pin>
    12ea:	28 2f       	mov	r18, r24
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	80 0f       	add	r24, r16
    12f2:	91 1f       	adc	r25, r17
    12f4:	fc 01       	movw	r30, r24
    12f6:	32 96       	adiw	r30, 0x02	; 2
    12f8:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12fa:	ed 81       	ldd	r30, Y+5	; 0x05
    12fc:	fe 81       	ldd	r31, Y+6	; 0x06
    12fe:	80 85       	ldd	r24, Z+8	; 0x08
    1300:	91 85       	ldd	r25, Z+9	; 0x09
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	06 97       	sbiw	r24, 0x06	; 6
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	06 96       	adiw	r24, 0x06	; 6
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	86 30       	cpi	r24, 0x06	; 6
    131a:	92 07       	cpc	r25, r18
    131c:	f1 f6       	brne	.-68     	; 0x12da <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    131e:	80 91 3c 01 	lds	r24, 0x013C
    1322:	90 91 3d 01 	lds	r25, 0x013D
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	90 93 3d 01 	sts	0x013D, r25
    132c:	80 93 3c 01 	sts	0x013C, r24
    1330:	80 91 3c 01 	lds	r24, 0x013C
    1334:	90 91 3d 01 	lds	r25, 0x013D
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	21 f4       	brne	.+8      	; 0x1346 <gpio_debouncer+0x96>
        count = 0;
    133e:	10 92 3d 01 	sts	0x013D, r1
    1342:	10 92 3c 01 	sts	0x013C, r1
	
}
    1346:	26 96       	adiw	r28, 0x06	; 6
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <timer_register_callback+0x6>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	90 93 3f 01 	sts	0x013F, r25
    1372:	80 93 3e 01 	sts	0x013E, r24
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <timer_init+0xa>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1392:	e0 e8       	ldi	r30, 0x80	; 128
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1398:	e1 e8       	ldi	r30, 0x81	; 129
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	89 e0       	ldi	r24, 0x09	; 9
    139e:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    13a0:	08 e8       	ldi	r16, 0x88	; 136
    13a2:	10 e0       	ldi	r17, 0x00	; 0
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	cc 01       	movw	r24, r24
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	f2 d3       	rcall	.+2020   	; 0x1b98 <__floatunsisf>
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	60 e8       	ldi	r22, 0x80	; 128
    13ba:	76 e9       	ldi	r23, 0x96	; 150
    13bc:	88 e1       	ldi	r24, 0x18	; 24
    13be:	9b e4       	ldi	r25, 0x4B	; 75
    13c0:	52 d3       	rcall	.+1700   	; 0x1a66 <__divsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	e1 d2       	rcall	.+1474   	; 0x1996 <__addsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	b1 d3       	rcall	.+1890   	; 0x1b40 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	f8 01       	movw	r30, r16
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    13e8:	ef e6       	ldi	r30, 0x6F	; 111
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	80 83       	st	Z, r24

	SREG |= 0x80;
    13f0:	af e5       	ldi	r26, 0x5F	; 95
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e5       	ldi	r30, 0x5F	; 95
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 68       	ori	r24, 0x80	; 128
    13fc:	8c 93       	st	X, r24
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	00 90 5b 00 	lds	r0, 0x005B
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	6f 93       	push	r22
    1426:	7f 93       	push	r23
    1428:	8f 93       	push	r24
    142a:	9f 93       	push	r25
    142c:	af 93       	push	r26
    142e:	bf 93       	push	r27
    1430:	ef 93       	push	r30
    1432:	ff 93       	push	r31
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    143c:	80 91 3e 01 	lds	r24, 0x013E
    1440:	90 91 3f 01 	lds	r25, 0x013F
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	29 f0       	breq	.+10     	; 0x1452 <__vector_12+0x46>
        timer_callback();
    1448:	e0 91 3e 01 	lds	r30, 0x013E
    144c:	f0 91 3f 01 	lds	r31, 0x013F
    1450:	09 95       	icall
	if(sys_time >= 90000)
    1452:	80 91 40 01 	lds	r24, 0x0140
    1456:	90 91 41 01 	lds	r25, 0x0141
    145a:	a0 91 42 01 	lds	r26, 0x0142
    145e:	b0 91 43 01 	lds	r27, 0x0143
    1462:	80 39       	cpi	r24, 0x90	; 144
    1464:	2f e5       	ldi	r18, 0x5F	; 95
    1466:	92 07       	cpc	r25, r18
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	a2 07       	cpc	r26, r18
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	b2 07       	cpc	r27, r18
    1470:	08 f0       	brcs	.+2      	; 0x1474 <__vector_12+0x68>
		actuators_umbrella();
    1472:	33 d9       	rcall	.-3482   	; 0x6da <actuators_umbrella>
	sys_time++;
    1474:	80 91 40 01 	lds	r24, 0x0140
    1478:	90 91 41 01 	lds	r25, 0x0141
    147c:	a0 91 42 01 	lds	r26, 0x0142
    1480:	b0 91 43 01 	lds	r27, 0x0143
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	a1 1d       	adc	r26, r1
    1488:	b1 1d       	adc	r27, r1
    148a:	80 93 40 01 	sts	0x0140, r24
    148e:	90 93 41 01 	sts	0x0141, r25
    1492:	a0 93 42 01 	sts	0x0142, r26
    1496:	b0 93 43 01 	sts	0x0143, r27
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	00 92 5b 00 	sts	0x005B, r0
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	0f 90       	pop	r0
    14c2:	1f 90       	pop	r1
    14c4:	18 95       	reti

000014c6 <system_reset_system_time>:
	
	return 0;
}

void system_reset_system_time(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    14ce:	10 92 40 01 	sts	0x0140, r1
    14d2:	10 92 41 01 	sts	0x0141, r1
    14d6:	10 92 42 01 	sts	0x0142, r1
    14da:	10 92 43 01 	sts	0x0143, r1
}
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <system_set_match_started>:
void system_set_match_started(void)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 44 01 	sts	0x0144, r24
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <system_init>:
	uint32_t current;
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
void system_init(void)
{	
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	6c 97       	sbiw	r28, 0x1c	; 28
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    150c:	88 e5       	ldi	r24, 0x58	; 88
    150e:	99 e0       	ldi	r25, 0x09	; 9
    1510:	25 df       	rcall	.-438    	; 0x135c <timer_register_callback>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a8 ec       	ldi	r26, 0xC8	; 200
    1518:	b2 e4       	ldi	r27, 0x42	; 66
    151a:	89 8f       	std	Y+25, r24	; 0x19
    151c:	9a 8f       	std	Y+26, r25	; 0x1a
    151e:	ab 8f       	std	Y+27, r26	; 0x1b
    1520:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1522:	69 8d       	ldd	r22, Y+25	; 0x19
    1524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e4       	ldi	r19, 0x40	; 64
    152e:	4c e1       	ldi	r20, 0x1C	; 28
    1530:	55 e4       	ldi	r21, 0x45	; 69
    1532:	e8 d3       	rcall	.+2000   	; 0x1d04 <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8d 8b       	std	Y+21, r24	; 0x15
    153a:	9e 8b       	std	Y+22, r25	; 0x16
    153c:	af 8b       	std	Y+23, r26	; 0x17
    153e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1540:	6d 89       	ldd	r22, Y+21	; 0x15
    1542:	7e 89       	ldd	r23, Y+22	; 0x16
    1544:	8f 89       	ldd	r24, Y+23	; 0x17
    1546:	98 8d       	ldd	r25, Y+24	; 0x18
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	86 d2       	rcall	.+1292   	; 0x1a5e <__cmpsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <system_init+0x68>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	3b c0       	rjmp	.+118    	; 0x15d6 <system_init+0xde>
	else if (__tmp > 65535)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	c5 d3       	rcall	.+1930   	; 0x1cfc <__gesf2>
    1572:	18 16       	cp	r1, r24
    1574:	3c f5       	brge	.+78     	; 0x15c4 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	69 8d       	ldd	r22, Y+25	; 0x19
    1578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	be d3       	rcall	.+1916   	; 0x1d04 <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	d7 d2       	rcall	.+1454   	; 0x1b40 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <system_init+0xc2>
    159c:	8a ef       	ldi	r24, 0xFA	; 250
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	9a 89       	ldd	r25, Y+18	; 0x12
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <system_init+0xb0>
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8b 89       	ldd	r24, Y+19	; 0x13
    15bc:	9c 89       	ldd	r25, Y+20	; 0x14
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <system_init+0xa4>
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6d 89       	ldd	r22, Y+21	; 0x15
    15c6:	7e 89       	ldd	r23, Y+22	; 0x16
    15c8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ca:	98 8d       	ldd	r25, Y+24	; 0x18
    15cc:	b9 d2       	rcall	.+1394   	; 0x1b40 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	98 8b       	std	Y+16, r25	; 0x10
    15dc:	8f 87       	std	Y+15, r24	; 0x0f
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 89       	ldd	r25, Y+16	; 0x10
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <system_init+0xea>
    15e6:	98 8b       	std	Y+16, r25	; 0x10
    15e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    15ea:	88 e2       	ldi	r24, 0x28	; 40
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	72 dc       	rcall	.-1820   	; 0xed6 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    15f2:	89 e2       	ldi	r24, 0x29	; 41
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	6e dc       	rcall	.-1828   	; 0xed6 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	6a dc       	rcall	.-1836   	; 0xed6 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    1602:	8a e0       	ldi	r24, 0x0A	; 10
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	66 dc       	rcall	.-1844   	; 0xed6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    160a:	8c e0       	ldi	r24, 0x0C	; 12
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	62 dc       	rcall	.-1852   	; 0xed6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    1612:	8e e0       	ldi	r24, 0x0E	; 14
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	5e dc       	rcall	.-1860   	; 0xed6 <gpio_register_pin>
	
	
	DDRG = 0xff;
    161a:	e3 e3       	ldi	r30, 0x33	; 51
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	80 83       	st	Z, r24
	PORTG = 0x00;
    1622:	e4 e3       	ldi	r30, 0x34	; 52
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	10 82       	st	Z, r1
	servo_init(50);
    1628:	82 e3       	ldi	r24, 0x32	; 50
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <servo_init>
	timer_init(1000);
    1630:	88 ee       	ldi	r24, 0xE8	; 232
    1632:	93 e0       	ldi	r25, 0x03	; 3
    1634:	a5 de       	rcall	.-694    	; 0x1380 <timer_init>
	CAN_Init(1);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	03 dc       	rcall	.-2042   	; 0xe40 <CAN_Init>

	actuators_setup();
    163a:	d8 d8       	rcall	.-3664   	; 0x7ec <actuators_setup>
	
	while(!(gpio_read_pin(JUMPER_PIN)));
    163c:	88 e2       	ldi	r24, 0x28	; 40
    163e:	b8 dd       	rcall	.-1168   	; 0x11b0 <gpio_read_pin>
    1640:	88 23       	and	r24, r24
    1642:	e1 f3       	breq	.-8      	; 0x163c <system_init+0x144>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e2       	ldi	r26, 0x20	; 32
    164a:	b1 e4       	ldi	r27, 0x41	; 65
    164c:	8b 87       	std	Y+11, r24	; 0x0b
    164e:	9c 87       	std	Y+12, r25	; 0x0c
    1650:	ad 87       	std	Y+13, r26	; 0x0d
    1652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e4       	ldi	r19, 0x40	; 64
    1660:	4c e1       	ldi	r20, 0x1C	; 28
    1662:	55 e4       	ldi	r21, 0x45	; 69
    1664:	4f d3       	rcall	.+1694   	; 0x1d04 <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	a9 87       	std	Y+9, r26	; 0x09
    1670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	ed d1       	rcall	.+986    	; 0x1a5e <__cmpsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <system_init+0x19a>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	3b c0       	rjmp	.+118    	; 0x1708 <system_init+0x210>
	else if (__tmp > 65535)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	2c d3       	rcall	.+1624   	; 0x1cfc <__gesf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	3c f5       	brge	.+78     	; 0x16f6 <system_init+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	25 d3       	rcall	.+1610   	; 0x1d04 <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	3e d2       	rcall	.+1148   	; 0x1b40 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <system_init+0x1f4>
    16ce:	8a ef       	ldi	r24, 0xFA	; 250
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <system_init+0x1e2>
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <system_init+0x1d6>
    16f4:	13 c0       	rjmp	.+38     	; 0x171c <system_init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 d2       	rcall	.+1088   	; 0x1b40 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <system_init+0x21c>
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	PORTG = 0xff;
    171c:	e4 e3       	ldi	r30, 0x34	; 52
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	80 83       	st	Z, r24
	system_reset_system_time();
    1724:	d0 de       	rcall	.-608    	; 0x14c6 <system_reset_system_time>
	system_set_match_started();
    1726:	de de       	rcall	.-580    	; 0x14e4 <system_set_match_started>
}
    1728:	6c 96       	adiw	r28, 0x1c	; 28
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <check_back_sensors>:
	}
	
	return NOT_DETECTED;
}
signed char check_back_sensors(signed char sensor)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <check_back_sensors+0x6>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == BACK_ALL)
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	8d 3f       	cpi	r24, 0xFD	; 253
    174a:	59 f4       	brne	.+22     	; 0x1762 <check_back_sensors+0x28>
	{
		if(!(gpio_read_pin(SENSOR_B_L_PIN)) || !(gpio_read_pin(SENSOR_B_R_PIN)))
    174c:	8c e0       	ldi	r24, 0x0C	; 12
    174e:	30 dd       	rcall	.-1440   	; 0x11b0 <gpio_read_pin>
    1750:	88 23       	and	r24, r24
    1752:	21 f0       	breq	.+8      	; 0x175c <check_back_sensors+0x22>
    1754:	8e e0       	ldi	r24, 0x0E	; 14
    1756:	2c dd       	rcall	.-1448   	; 0x11b0 <gpio_read_pin>
    1758:	88 23       	and	r24, r24
    175a:	19 f4       	brne	.+6      	; 0x1762 <check_back_sensors+0x28>
		{
			return DETECTED;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <check_back_sensors+0x2a>
		}
	}
	
	return NOT_DETECTED;
    1762:	1a 82       	std	Y+2, r1	; 0x02
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	00 90 5b 00 	lds	r0, 0x005B
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    1794:	80 91 45 01 	lds	r24, 0x0145
    1798:	88 23       	and	r24, r24
    179a:	d9 f0       	breq	.+54     	; 0x17d2 <__vector_23+0x62>
	{
		tx0_counter--;
    179c:	80 91 45 01 	lds	r24, 0x0145
    17a0:	81 50       	subi	r24, 0x01	; 1
    17a2:	80 93 45 01 	sts	0x0145, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    17a6:	a6 ec       	ldi	r26, 0xC6	; 198
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	80 91 46 01 	lds	r24, 0x0146
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	fc 01       	movw	r30, r24
    17b4:	e3 5b       	subi	r30, 0xB3	; 179
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	80 81       	ld	r24, Z
    17ba:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    17bc:	80 91 46 01 	lds	r24, 0x0146
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	80 93 46 01 	sts	0x0146, r24
    17c6:	80 91 46 01 	lds	r24, 0x0146
    17ca:	80 34       	cpi	r24, 0x40	; 64
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <__vector_23+0x62>
			tx0_rd_index = 0;
    17ce:	10 92 46 01 	sts	0x0146, r1
	}
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	0f 90       	pop	r0
    17e4:	00 92 5b 00 	sts	0x005B, r0
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	00 90 5b 00 	lds	r0, 0x005B
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	2f 93       	push	r18
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	0f 92       	push	r0
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    1816:	e0 ec       	ldi	r30, 0xC0	; 192
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	8c 71       	andi	r24, 0x1C	; 28
    1826:	90 70       	andi	r25, 0x00	; 0
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	d9 f4       	brne	.+54     	; 0x1862 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    182c:	80 91 47 01 	lds	r24, 0x0147
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	e6 ec       	ldi	r30, 0xC6	; 198
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	20 81       	ld	r18, Z
    183a:	fc 01       	movw	r30, r24
    183c:	e3 57       	subi	r30, 0x73	; 115
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    1842:	80 91 47 01 	lds	r24, 0x0147
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 47 01 	sts	0x0147, r24
    184c:	80 91 47 01 	lds	r24, 0x0147
    1850:	80 34       	cpi	r24, 0x40	; 64
    1852:	11 f4       	brne	.+4      	; 0x1858 <__vector_21+0x66>
			rx0_wr_index = 0;
    1854:	10 92 47 01 	sts	0x0147, r1

		rx0_counter++;
    1858:	80 91 48 01 	lds	r24, 0x0148
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	80 93 48 01 	sts	0x0148, r24
	}
}
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	9f 91       	pop	r25
    186e:	8f 91       	pop	r24
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	00 92 5b 00 	sts	0x005B, r0
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	00 90 5b 00 	lds	r0, 0x005B
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    18a6:	80 91 49 01 	lds	r24, 0x0149
    18aa:	88 23       	and	r24, r24
    18ac:	d9 f0       	breq	.+54     	; 0x18e4 <__vector_34+0x62>
	{
		tx1_counter--;
    18ae:	80 91 49 01 	lds	r24, 0x0149
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	80 93 49 01 	sts	0x0149, r24
		UDR1=tx1_buffer[tx1_rd_index];
    18b8:	ae ec       	ldi	r26, 0xCE	; 206
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	80 91 4a 01 	lds	r24, 0x014A
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	fc 01       	movw	r30, r24
    18c6:	e3 53       	subi	r30, 0x33	; 51
    18c8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ca:	80 81       	ld	r24, Z
    18cc:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    18ce:	80 91 4a 01 	lds	r24, 0x014A
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 93 4a 01 	sts	0x014A, r24
    18d8:	80 91 4a 01 	lds	r24, 0x014A
    18dc:	80 34       	cpi	r24, 0x40	; 64
    18de:	11 f4       	brne	.+4      	; 0x18e4 <__vector_34+0x62>
			tx1_rd_index = 0;
    18e0:	10 92 4a 01 	sts	0x014A, r1
	}
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	0f 90       	pop	r0
    18f6:	00 92 5b 00 	sts	0x005B, r0
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_32>:

ISR(USART1_RX_vect)
{
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	00 90 5b 00 	lds	r0, 0x005B
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	ef 93       	push	r30
    191c:	ff 93       	push	r31
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1928:	e8 ec       	ldi	r30, 0xC8	; 200
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	8c 71       	andi	r24, 0x1C	; 28
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	d9 f4       	brne	.+54     	; 0x1974 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    193e:	80 91 4b 01 	lds	r24, 0x014B
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	ee ec       	ldi	r30, 0xCE	; 206
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	20 81       	ld	r18, Z
    194c:	fc 01       	movw	r30, r24
    194e:	e3 5f       	subi	r30, 0xF3	; 243
    1950:	fd 4f       	sbci	r31, 0xFD	; 253
    1952:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1954:	80 91 4b 01 	lds	r24, 0x014B
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	80 93 4b 01 	sts	0x014B, r24
    195e:	80 91 4b 01 	lds	r24, 0x014B
    1962:	80 34       	cpi	r24, 0x40	; 64
    1964:	11 f4       	brne	.+4      	; 0x196a <__vector_32+0x66>
		rx1_wr_index = 0;
    1966:	10 92 4b 01 	sts	0x014B, r1

		rx1_counter++;
    196a:	80 91 4c 01 	lds	r24, 0x014C
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	80 93 4c 01 	sts	0x014C, r24
	}
}
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	ff 91       	pop	r31
    197c:	ef 91       	pop	r30
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	00 92 5b 00 	sts	0x005B, r0
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 90       	pop	r0
    1990:	1f 90       	pop	r1
    1992:	18 95       	reti

00001994 <__subsf3>:
    1994:	50 58       	subi	r21, 0x80	; 128

00001996 <__addsf3>:
    1996:	bb 27       	eor	r27, r27
    1998:	aa 27       	eor	r26, r26
    199a:	0e d0       	rcall	.+28     	; 0x19b8 <__addsf3x>
    199c:	75 c1       	rjmp	.+746    	; 0x1c88 <__fp_round>
    199e:	66 d1       	rcall	.+716    	; 0x1c6c <__fp_pscA>
    19a0:	30 f0       	brcs	.+12     	; 0x19ae <__addsf3+0x18>
    19a2:	6b d1       	rcall	.+726    	; 0x1c7a <__fp_pscB>
    19a4:	20 f0       	brcs	.+8      	; 0x19ae <__addsf3+0x18>
    19a6:	31 f4       	brne	.+12     	; 0x19b4 <__addsf3+0x1e>
    19a8:	9f 3f       	cpi	r25, 0xFF	; 255
    19aa:	11 f4       	brne	.+4      	; 0x19b0 <__addsf3+0x1a>
    19ac:	1e f4       	brtc	.+6      	; 0x19b4 <__addsf3+0x1e>
    19ae:	5b c1       	rjmp	.+694    	; 0x1c66 <__fp_nan>
    19b0:	0e f4       	brtc	.+2      	; 0x19b4 <__addsf3+0x1e>
    19b2:	e0 95       	com	r30
    19b4:	e7 fb       	bst	r30, 7
    19b6:	51 c1       	rjmp	.+674    	; 0x1c5a <__fp_inf>

000019b8 <__addsf3x>:
    19b8:	e9 2f       	mov	r30, r25
    19ba:	77 d1       	rcall	.+750    	; 0x1caa <__fp_split3>
    19bc:	80 f3       	brcs	.-32     	; 0x199e <__addsf3+0x8>
    19be:	ba 17       	cp	r27, r26
    19c0:	62 07       	cpc	r22, r18
    19c2:	73 07       	cpc	r23, r19
    19c4:	84 07       	cpc	r24, r20
    19c6:	95 07       	cpc	r25, r21
    19c8:	18 f0       	brcs	.+6      	; 0x19d0 <__addsf3x+0x18>
    19ca:	71 f4       	brne	.+28     	; 0x19e8 <__addsf3x+0x30>
    19cc:	9e f5       	brtc	.+102    	; 0x1a34 <__addsf3x+0x7c>
    19ce:	8f c1       	rjmp	.+798    	; 0x1cee <__fp_zero>
    19d0:	0e f4       	brtc	.+2      	; 0x19d4 <__addsf3x+0x1c>
    19d2:	e0 95       	com	r30
    19d4:	0b 2e       	mov	r0, r27
    19d6:	ba 2f       	mov	r27, r26
    19d8:	a0 2d       	mov	r26, r0
    19da:	0b 01       	movw	r0, r22
    19dc:	b9 01       	movw	r22, r18
    19de:	90 01       	movw	r18, r0
    19e0:	0c 01       	movw	r0, r24
    19e2:	ca 01       	movw	r24, r20
    19e4:	a0 01       	movw	r20, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	ff 27       	eor	r31, r31
    19ea:	59 1b       	sub	r21, r25
    19ec:	99 f0       	breq	.+38     	; 0x1a14 <__addsf3x+0x5c>
    19ee:	59 3f       	cpi	r21, 0xF9	; 249
    19f0:	50 f4       	brcc	.+20     	; 0x1a06 <__addsf3x+0x4e>
    19f2:	50 3e       	cpi	r21, 0xE0	; 224
    19f4:	68 f1       	brcs	.+90     	; 0x1a50 <__addsf3x+0x98>
    19f6:	1a 16       	cp	r1, r26
    19f8:	f0 40       	sbci	r31, 0x00	; 0
    19fa:	a2 2f       	mov	r26, r18
    19fc:	23 2f       	mov	r18, r19
    19fe:	34 2f       	mov	r19, r20
    1a00:	44 27       	eor	r20, r20
    1a02:	58 5f       	subi	r21, 0xF8	; 248
    1a04:	f3 cf       	rjmp	.-26     	; 0x19ec <__addsf3x+0x34>
    1a06:	46 95       	lsr	r20
    1a08:	37 95       	ror	r19
    1a0a:	27 95       	ror	r18
    1a0c:	a7 95       	ror	r26
    1a0e:	f0 40       	sbci	r31, 0x00	; 0
    1a10:	53 95       	inc	r21
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__addsf3x+0x4e>
    1a14:	7e f4       	brtc	.+30     	; 0x1a34 <__addsf3x+0x7c>
    1a16:	1f 16       	cp	r1, r31
    1a18:	ba 0b       	sbc	r27, r26
    1a1a:	62 0b       	sbc	r22, r18
    1a1c:	73 0b       	sbc	r23, r19
    1a1e:	84 0b       	sbc	r24, r20
    1a20:	ba f0       	brmi	.+46     	; 0x1a50 <__addsf3x+0x98>
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	a1 f0       	breq	.+40     	; 0x1a4e <__addsf3x+0x96>
    1a26:	ff 0f       	add	r31, r31
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	c2 f7       	brpl	.-16     	; 0x1a22 <__addsf3x+0x6a>
    1a32:	0e c0       	rjmp	.+28     	; 0x1a50 <__addsf3x+0x98>
    1a34:	ba 0f       	add	r27, r26
    1a36:	62 1f       	adc	r22, r18
    1a38:	73 1f       	adc	r23, r19
    1a3a:	84 1f       	adc	r24, r20
    1a3c:	48 f4       	brcc	.+18     	; 0x1a50 <__addsf3x+0x98>
    1a3e:	87 95       	ror	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	f7 95       	ror	r31
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <__addsf3x+0x96>
    1a4c:	b3 cf       	rjmp	.-154    	; 0x19b4 <__addsf3+0x1e>
    1a4e:	93 95       	inc	r25
    1a50:	88 0f       	add	r24, r24
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <__addsf3x+0x9e>
    1a54:	99 27       	eor	r25, r25
    1a56:	ee 0f       	add	r30, r30
    1a58:	97 95       	ror	r25
    1a5a:	87 95       	ror	r24
    1a5c:	08 95       	ret

00001a5e <__cmpsf2>:
    1a5e:	d9 d0       	rcall	.+434    	; 0x1c12 <__fp_cmp>
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <__cmpsf2+0x6>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	08 95       	ret

00001a66 <__divsf3>:
    1a66:	0c d0       	rcall	.+24     	; 0x1a80 <__divsf3x>
    1a68:	0f c1       	rjmp	.+542    	; 0x1c88 <__fp_round>
    1a6a:	07 d1       	rcall	.+526    	; 0x1c7a <__fp_pscB>
    1a6c:	40 f0       	brcs	.+16     	; 0x1a7e <__divsf3+0x18>
    1a6e:	fe d0       	rcall	.+508    	; 0x1c6c <__fp_pscA>
    1a70:	30 f0       	brcs	.+12     	; 0x1a7e <__divsf3+0x18>
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <__divsf3+0x16>
    1a74:	5f 3f       	cpi	r21, 0xFF	; 255
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <__divsf3+0x18>
    1a78:	f0 c0       	rjmp	.+480    	; 0x1c5a <__fp_inf>
    1a7a:	51 11       	cpse	r21, r1
    1a7c:	39 c1       	rjmp	.+626    	; 0x1cf0 <__fp_szero>
    1a7e:	f3 c0       	rjmp	.+486    	; 0x1c66 <__fp_nan>

00001a80 <__divsf3x>:
    1a80:	14 d1       	rcall	.+552    	; 0x1caa <__fp_split3>
    1a82:	98 f3       	brcs	.-26     	; 0x1a6a <__divsf3+0x4>

00001a84 <__divsf3_pse>:
    1a84:	99 23       	and	r25, r25
    1a86:	c9 f3       	breq	.-14     	; 0x1a7a <__divsf3+0x14>
    1a88:	55 23       	and	r21, r21
    1a8a:	b1 f3       	breq	.-20     	; 0x1a78 <__divsf3+0x12>
    1a8c:	95 1b       	sub	r25, r21
    1a8e:	55 0b       	sbc	r21, r21
    1a90:	bb 27       	eor	r27, r27
    1a92:	aa 27       	eor	r26, r26
    1a94:	62 17       	cp	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	38 f0       	brcs	.+14     	; 0x1aaa <__divsf3_pse+0x26>
    1a9c:	9f 5f       	subi	r25, 0xFF	; 255
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	a9 f3       	breq	.-22     	; 0x1a94 <__divsf3_pse+0x10>
    1aaa:	33 d0       	rcall	.+102    	; 0x1b12 <__divsf3_pse+0x8e>
    1aac:	0e 2e       	mov	r0, r30
    1aae:	3a f0       	brmi	.+14     	; 0x1abe <__divsf3_pse+0x3a>
    1ab0:	e0 e8       	ldi	r30, 0x80	; 128
    1ab2:	30 d0       	rcall	.+96     	; 0x1b14 <__divsf3_pse+0x90>
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	e6 95       	lsr	r30
    1aba:	00 1c       	adc	r0, r0
    1abc:	ca f7       	brpl	.-14     	; 0x1ab0 <__divsf3_pse+0x2c>
    1abe:	29 d0       	rcall	.+82     	; 0x1b12 <__divsf3_pse+0x8e>
    1ac0:	fe 2f       	mov	r31, r30
    1ac2:	27 d0       	rcall	.+78     	; 0x1b12 <__divsf3_pse+0x8e>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	bb 1f       	adc	r27, r27
    1acc:	26 17       	cp	r18, r22
    1ace:	37 07       	cpc	r19, r23
    1ad0:	48 07       	cpc	r20, r24
    1ad2:	ab 07       	cpc	r26, r27
    1ad4:	b0 e8       	ldi	r27, 0x80	; 128
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <__divsf3_pse+0x56>
    1ad8:	bb 0b       	sbc	r27, r27
    1ada:	80 2d       	mov	r24, r0
    1adc:	bf 01       	movw	r22, r30
    1ade:	ff 27       	eor	r31, r31
    1ae0:	93 58       	subi	r25, 0x83	; 131
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	2a f0       	brmi	.+10     	; 0x1af0 <__divsf3_pse+0x6c>
    1ae6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae8:	51 05       	cpc	r21, r1
    1aea:	68 f0       	brcs	.+26     	; 0x1b06 <__divsf3_pse+0x82>
    1aec:	b6 c0       	rjmp	.+364    	; 0x1c5a <__fp_inf>
    1aee:	00 c1       	rjmp	.+512    	; 0x1cf0 <__fp_szero>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	ec f3       	brlt	.-6      	; 0x1aee <__divsf3_pse+0x6a>
    1af4:	98 3e       	cpi	r25, 0xE8	; 232
    1af6:	dc f3       	brlt	.-10     	; 0x1aee <__divsf3_pse+0x6a>
    1af8:	86 95       	lsr	r24
    1afa:	77 95       	ror	r23
    1afc:	67 95       	ror	r22
    1afe:	b7 95       	ror	r27
    1b00:	f7 95       	ror	r31
    1b02:	9f 5f       	subi	r25, 0xFF	; 255
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__divsf3_pse+0x74>
    1b06:	88 0f       	add	r24, r24
    1b08:	91 1d       	adc	r25, r1
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	97 f9       	bld	r25, 7
    1b10:	08 95       	ret
    1b12:	e1 e0       	ldi	r30, 0x01	; 1
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	62 17       	cp	r22, r18
    1b1e:	73 07       	cpc	r23, r19
    1b20:	84 07       	cpc	r24, r20
    1b22:	ba 07       	cpc	r27, r26
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__divsf3_pse+0xaa>
    1b26:	62 1b       	sub	r22, r18
    1b28:	73 0b       	sbc	r23, r19
    1b2a:	84 0b       	sbc	r24, r20
    1b2c:	ba 0b       	sbc	r27, r26
    1b2e:	ee 1f       	adc	r30, r30
    1b30:	88 f7       	brcc	.-30     	; 0x1b14 <__divsf3_pse+0x90>
    1b32:	e0 95       	com	r30
    1b34:	08 95       	ret

00001b36 <__fixsfsi>:
    1b36:	04 d0       	rcall	.+8      	; 0x1b40 <__fixunssfsi>
    1b38:	68 94       	set
    1b3a:	b1 11       	cpse	r27, r1
    1b3c:	d9 c0       	rjmp	.+434    	; 0x1cf0 <__fp_szero>
    1b3e:	08 95       	ret

00001b40 <__fixunssfsi>:
    1b40:	bc d0       	rcall	.+376    	; 0x1cba <__fp_splitA>
    1b42:	88 f0       	brcs	.+34     	; 0x1b66 <__fixunssfsi+0x26>
    1b44:	9f 57       	subi	r25, 0x7F	; 127
    1b46:	90 f0       	brcs	.+36     	; 0x1b6c <__fixunssfsi+0x2c>
    1b48:	b9 2f       	mov	r27, r25
    1b4a:	99 27       	eor	r25, r25
    1b4c:	b7 51       	subi	r27, 0x17	; 23
    1b4e:	a0 f0       	brcs	.+40     	; 0x1b78 <__fixunssfsi+0x38>
    1b50:	d1 f0       	breq	.+52     	; 0x1b86 <__fixunssfsi+0x46>
    1b52:	66 0f       	add	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	88 1f       	adc	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	1a f0       	brmi	.+6      	; 0x1b62 <__fixunssfsi+0x22>
    1b5c:	ba 95       	dec	r27
    1b5e:	c9 f7       	brne	.-14     	; 0x1b52 <__fixunssfsi+0x12>
    1b60:	12 c0       	rjmp	.+36     	; 0x1b86 <__fixunssfsi+0x46>
    1b62:	b1 30       	cpi	r27, 0x01	; 1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <__fixunssfsi+0x46>
    1b66:	c3 d0       	rcall	.+390    	; 0x1cee <__fp_zero>
    1b68:	b1 e0       	ldi	r27, 0x01	; 1
    1b6a:	08 95       	ret
    1b6c:	c0 c0       	rjmp	.+384    	; 0x1cee <__fp_zero>
    1b6e:	67 2f       	mov	r22, r23
    1b70:	78 2f       	mov	r23, r24
    1b72:	88 27       	eor	r24, r24
    1b74:	b8 5f       	subi	r27, 0xF8	; 248
    1b76:	39 f0       	breq	.+14     	; 0x1b86 <__fixunssfsi+0x46>
    1b78:	b9 3f       	cpi	r27, 0xF9	; 249
    1b7a:	cc f3       	brlt	.-14     	; 0x1b6e <__fixunssfsi+0x2e>
    1b7c:	86 95       	lsr	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b3 95       	inc	r27
    1b84:	d9 f7       	brne	.-10     	; 0x1b7c <__fixunssfsi+0x3c>
    1b86:	3e f4       	brtc	.+14     	; 0x1b96 <__fixunssfsi+0x56>
    1b88:	90 95       	com	r25
    1b8a:	80 95       	com	r24
    1b8c:	70 95       	com	r23
    1b8e:	61 95       	neg	r22
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	8f 4f       	sbci	r24, 0xFF	; 255
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	08 95       	ret

00001b98 <__floatunsisf>:
    1b98:	e8 94       	clt
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <__floatsisf+0x12>

00001b9c <__floatsisf>:
    1b9c:	97 fb       	bst	r25, 7
    1b9e:	3e f4       	brtc	.+14     	; 0x1bae <__floatsisf+0x12>
    1ba0:	90 95       	com	r25
    1ba2:	80 95       	com	r24
    1ba4:	70 95       	com	r23
    1ba6:	61 95       	neg	r22
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	99 23       	and	r25, r25
    1bb0:	a9 f0       	breq	.+42     	; 0x1bdc <__floatsisf+0x40>
    1bb2:	f9 2f       	mov	r31, r25
    1bb4:	96 e9       	ldi	r25, 0x96	; 150
    1bb6:	bb 27       	eor	r27, r27
    1bb8:	93 95       	inc	r25
    1bba:	f6 95       	lsr	r31
    1bbc:	87 95       	ror	r24
    1bbe:	77 95       	ror	r23
    1bc0:	67 95       	ror	r22
    1bc2:	b7 95       	ror	r27
    1bc4:	f1 11       	cpse	r31, r1
    1bc6:	f8 cf       	rjmp	.-16     	; 0x1bb8 <__floatsisf+0x1c>
    1bc8:	fa f4       	brpl	.+62     	; 0x1c08 <__floatsisf+0x6c>
    1bca:	bb 0f       	add	r27, r27
    1bcc:	11 f4       	brne	.+4      	; 0x1bd2 <__floatsisf+0x36>
    1bce:	60 ff       	sbrs	r22, 0
    1bd0:	1b c0       	rjmp	.+54     	; 0x1c08 <__floatsisf+0x6c>
    1bd2:	6f 5f       	subi	r22, 0xFF	; 255
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	16 c0       	rjmp	.+44     	; 0x1c08 <__floatsisf+0x6c>
    1bdc:	88 23       	and	r24, r24
    1bde:	11 f0       	breq	.+4      	; 0x1be4 <__floatsisf+0x48>
    1be0:	96 e9       	ldi	r25, 0x96	; 150
    1be2:	11 c0       	rjmp	.+34     	; 0x1c06 <__floatsisf+0x6a>
    1be4:	77 23       	and	r23, r23
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <__floatsisf+0x54>
    1be8:	9e e8       	ldi	r25, 0x8E	; 142
    1bea:	87 2f       	mov	r24, r23
    1bec:	76 2f       	mov	r23, r22
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <__floatsisf+0x5e>
    1bf0:	66 23       	and	r22, r22
    1bf2:	71 f0       	breq	.+28     	; 0x1c10 <__floatsisf+0x74>
    1bf4:	96 e8       	ldi	r25, 0x86	; 134
    1bf6:	86 2f       	mov	r24, r22
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	2a f0       	brmi	.+10     	; 0x1c08 <__floatsisf+0x6c>
    1bfe:	9a 95       	dec	r25
    1c00:	66 0f       	add	r22, r22
    1c02:	77 1f       	adc	r23, r23
    1c04:	88 1f       	adc	r24, r24
    1c06:	da f7       	brpl	.-10     	; 0x1bfe <__floatsisf+0x62>
    1c08:	88 0f       	add	r24, r24
    1c0a:	96 95       	lsr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	97 f9       	bld	r25, 7
    1c10:	08 95       	ret

00001c12 <__fp_cmp>:
    1c12:	99 0f       	add	r25, r25
    1c14:	00 08       	sbc	r0, r0
    1c16:	55 0f       	add	r21, r21
    1c18:	aa 0b       	sbc	r26, r26
    1c1a:	e0 e8       	ldi	r30, 0x80	; 128
    1c1c:	fe ef       	ldi	r31, 0xFE	; 254
    1c1e:	16 16       	cp	r1, r22
    1c20:	17 06       	cpc	r1, r23
    1c22:	e8 07       	cpc	r30, r24
    1c24:	f9 07       	cpc	r31, r25
    1c26:	c0 f0       	brcs	.+48     	; 0x1c58 <__fp_cmp+0x46>
    1c28:	12 16       	cp	r1, r18
    1c2a:	13 06       	cpc	r1, r19
    1c2c:	e4 07       	cpc	r30, r20
    1c2e:	f5 07       	cpc	r31, r21
    1c30:	98 f0       	brcs	.+38     	; 0x1c58 <__fp_cmp+0x46>
    1c32:	62 1b       	sub	r22, r18
    1c34:	73 0b       	sbc	r23, r19
    1c36:	84 0b       	sbc	r24, r20
    1c38:	95 0b       	sbc	r25, r21
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <__fp_cmp+0x38>
    1c3c:	0a 26       	eor	r0, r26
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <__fp_cmp+0x46>
    1c40:	23 2b       	or	r18, r19
    1c42:	24 2b       	or	r18, r20
    1c44:	25 2b       	or	r18, r21
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <__fp_cmp+0x3e>
    1c48:	08 95       	ret
    1c4a:	0a 26       	eor	r0, r26
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <__fp_cmp+0x3e>
    1c4e:	a1 40       	sbci	r26, 0x01	; 1
    1c50:	a6 95       	lsr	r26
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	81 1d       	adc	r24, r1
    1c56:	81 1d       	adc	r24, r1
    1c58:	08 95       	ret

00001c5a <__fp_inf>:
    1c5a:	97 f9       	bld	r25, 7
    1c5c:	9f 67       	ori	r25, 0x7F	; 127
    1c5e:	80 e8       	ldi	r24, 0x80	; 128
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	08 95       	ret

00001c66 <__fp_nan>:
    1c66:	9f ef       	ldi	r25, 0xFF	; 255
    1c68:	80 ec       	ldi	r24, 0xC0	; 192
    1c6a:	08 95       	ret

00001c6c <__fp_pscA>:
    1c6c:	00 24       	eor	r0, r0
    1c6e:	0a 94       	dec	r0
    1c70:	16 16       	cp	r1, r22
    1c72:	17 06       	cpc	r1, r23
    1c74:	18 06       	cpc	r1, r24
    1c76:	09 06       	cpc	r0, r25
    1c78:	08 95       	ret

00001c7a <__fp_pscB>:
    1c7a:	00 24       	eor	r0, r0
    1c7c:	0a 94       	dec	r0
    1c7e:	12 16       	cp	r1, r18
    1c80:	13 06       	cpc	r1, r19
    1c82:	14 06       	cpc	r1, r20
    1c84:	05 06       	cpc	r0, r21
    1c86:	08 95       	ret

00001c88 <__fp_round>:
    1c88:	09 2e       	mov	r0, r25
    1c8a:	03 94       	inc	r0
    1c8c:	00 0c       	add	r0, r0
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <__fp_round+0xc>
    1c90:	88 23       	and	r24, r24
    1c92:	52 f0       	brmi	.+20     	; 0x1ca8 <__fp_round+0x20>
    1c94:	bb 0f       	add	r27, r27
    1c96:	40 f4       	brcc	.+16     	; 0x1ca8 <__fp_round+0x20>
    1c98:	bf 2b       	or	r27, r31
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <__fp_round+0x18>
    1c9c:	60 ff       	sbrs	r22, 0
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <__fp_round+0x20>
    1ca0:	6f 5f       	subi	r22, 0xFF	; 255
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	08 95       	ret

00001caa <__fp_split3>:
    1caa:	57 fd       	sbrc	r21, 7
    1cac:	90 58       	subi	r25, 0x80	; 128
    1cae:	44 0f       	add	r20, r20
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	59 f0       	breq	.+22     	; 0x1cca <__fp_splitA+0x10>
    1cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb6:	71 f0       	breq	.+28     	; 0x1cd4 <__fp_splitA+0x1a>
    1cb8:	47 95       	ror	r20

00001cba <__fp_splitA>:
    1cba:	88 0f       	add	r24, r24
    1cbc:	97 fb       	bst	r25, 7
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	61 f0       	breq	.+24     	; 0x1cda <__fp_splitA+0x20>
    1cc2:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc4:	79 f0       	breq	.+30     	; 0x1ce4 <__fp_splitA+0x2a>
    1cc6:	87 95       	ror	r24
    1cc8:	08 95       	ret
    1cca:	12 16       	cp	r1, r18
    1ccc:	13 06       	cpc	r1, r19
    1cce:	14 06       	cpc	r1, r20
    1cd0:	55 1f       	adc	r21, r21
    1cd2:	f2 cf       	rjmp	.-28     	; 0x1cb8 <__fp_split3+0xe>
    1cd4:	46 95       	lsr	r20
    1cd6:	f1 df       	rcall	.-30     	; 0x1cba <__fp_splitA>
    1cd8:	08 c0       	rjmp	.+16     	; 0x1cea <__fp_splitA+0x30>
    1cda:	16 16       	cp	r1, r22
    1cdc:	17 06       	cpc	r1, r23
    1cde:	18 06       	cpc	r1, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	f1 cf       	rjmp	.-30     	; 0x1cc6 <__fp_splitA+0xc>
    1ce4:	86 95       	lsr	r24
    1ce6:	71 05       	cpc	r23, r1
    1ce8:	61 05       	cpc	r22, r1
    1cea:	08 94       	sec
    1cec:	08 95       	ret

00001cee <__fp_zero>:
    1cee:	e8 94       	clt

00001cf0 <__fp_szero>:
    1cf0:	bb 27       	eor	r27, r27
    1cf2:	66 27       	eor	r22, r22
    1cf4:	77 27       	eor	r23, r23
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret

00001cfc <__gesf2>:
    1cfc:	8a df       	rcall	.-236    	; 0x1c12 <__fp_cmp>
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <__gesf2+0x6>
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	08 95       	ret

00001d04 <__mulsf3>:
    1d04:	0b d0       	rcall	.+22     	; 0x1d1c <__mulsf3x>
    1d06:	c0 cf       	rjmp	.-128    	; 0x1c88 <__fp_round>
    1d08:	b1 df       	rcall	.-158    	; 0x1c6c <__fp_pscA>
    1d0a:	28 f0       	brcs	.+10     	; 0x1d16 <__mulsf3+0x12>
    1d0c:	b6 df       	rcall	.-148    	; 0x1c7a <__fp_pscB>
    1d0e:	18 f0       	brcs	.+6      	; 0x1d16 <__mulsf3+0x12>
    1d10:	95 23       	and	r25, r21
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <__mulsf3+0x12>
    1d14:	a2 cf       	rjmp	.-188    	; 0x1c5a <__fp_inf>
    1d16:	a7 cf       	rjmp	.-178    	; 0x1c66 <__fp_nan>
    1d18:	11 24       	eor	r1, r1
    1d1a:	ea cf       	rjmp	.-44     	; 0x1cf0 <__fp_szero>

00001d1c <__mulsf3x>:
    1d1c:	c6 df       	rcall	.-116    	; 0x1caa <__fp_split3>
    1d1e:	a0 f3       	brcs	.-24     	; 0x1d08 <__mulsf3+0x4>

00001d20 <__mulsf3_pse>:
    1d20:	95 9f       	mul	r25, r21
    1d22:	d1 f3       	breq	.-12     	; 0x1d18 <__mulsf3+0x14>
    1d24:	95 0f       	add	r25, r21
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	55 1f       	adc	r21, r21
    1d2a:	62 9f       	mul	r22, r18
    1d2c:	f0 01       	movw	r30, r0
    1d2e:	72 9f       	mul	r23, r18
    1d30:	bb 27       	eor	r27, r27
    1d32:	f0 0d       	add	r31, r0
    1d34:	b1 1d       	adc	r27, r1
    1d36:	63 9f       	mul	r22, r19
    1d38:	aa 27       	eor	r26, r26
    1d3a:	f0 0d       	add	r31, r0
    1d3c:	b1 1d       	adc	r27, r1
    1d3e:	aa 1f       	adc	r26, r26
    1d40:	64 9f       	mul	r22, r20
    1d42:	66 27       	eor	r22, r22
    1d44:	b0 0d       	add	r27, r0
    1d46:	a1 1d       	adc	r26, r1
    1d48:	66 1f       	adc	r22, r22
    1d4a:	82 9f       	mul	r24, r18
    1d4c:	22 27       	eor	r18, r18
    1d4e:	b0 0d       	add	r27, r0
    1d50:	a1 1d       	adc	r26, r1
    1d52:	62 1f       	adc	r22, r18
    1d54:	73 9f       	mul	r23, r19
    1d56:	b0 0d       	add	r27, r0
    1d58:	a1 1d       	adc	r26, r1
    1d5a:	62 1f       	adc	r22, r18
    1d5c:	83 9f       	mul	r24, r19
    1d5e:	a0 0d       	add	r26, r0
    1d60:	61 1d       	adc	r22, r1
    1d62:	22 1f       	adc	r18, r18
    1d64:	74 9f       	mul	r23, r20
    1d66:	33 27       	eor	r19, r19
    1d68:	a0 0d       	add	r26, r0
    1d6a:	61 1d       	adc	r22, r1
    1d6c:	23 1f       	adc	r18, r19
    1d6e:	84 9f       	mul	r24, r20
    1d70:	60 0d       	add	r22, r0
    1d72:	21 1d       	adc	r18, r1
    1d74:	82 2f       	mov	r24, r18
    1d76:	76 2f       	mov	r23, r22
    1d78:	6a 2f       	mov	r22, r26
    1d7a:	11 24       	eor	r1, r1
    1d7c:	9f 57       	subi	r25, 0x7F	; 127
    1d7e:	50 40       	sbci	r21, 0x00	; 0
    1d80:	8a f0       	brmi	.+34     	; 0x1da4 <__mulsf3_pse+0x84>
    1d82:	e1 f0       	breq	.+56     	; 0x1dbc <__mulsf3_pse+0x9c>
    1d84:	88 23       	and	r24, r24
    1d86:	4a f0       	brmi	.+18     	; 0x1d9a <__mulsf3_pse+0x7a>
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	91 50       	subi	r25, 0x01	; 1
    1d96:	50 40       	sbci	r21, 0x00	; 0
    1d98:	a9 f7       	brne	.-22     	; 0x1d84 <__mulsf3_pse+0x64>
    1d9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9c:	51 05       	cpc	r21, r1
    1d9e:	70 f0       	brcs	.+28     	; 0x1dbc <__mulsf3_pse+0x9c>
    1da0:	5c cf       	rjmp	.-328    	; 0x1c5a <__fp_inf>
    1da2:	a6 cf       	rjmp	.-180    	; 0x1cf0 <__fp_szero>
    1da4:	5f 3f       	cpi	r21, 0xFF	; 255
    1da6:	ec f3       	brlt	.-6      	; 0x1da2 <__mulsf3_pse+0x82>
    1da8:	98 3e       	cpi	r25, 0xE8	; 232
    1daa:	dc f3       	brlt	.-10     	; 0x1da2 <__mulsf3_pse+0x82>
    1dac:	86 95       	lsr	r24
    1dae:	77 95       	ror	r23
    1db0:	67 95       	ror	r22
    1db2:	b7 95       	ror	r27
    1db4:	f7 95       	ror	r31
    1db6:	e7 95       	ror	r30
    1db8:	9f 5f       	subi	r25, 0xFF	; 255
    1dba:	c1 f7       	brne	.-16     	; 0x1dac <__mulsf3_pse+0x8c>
    1dbc:	fe 2b       	or	r31, r30
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret

00001dca <calloc>:
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	68 9f       	mul	r22, r24
    1dd4:	80 01       	movw	r16, r0
    1dd6:	69 9f       	mul	r22, r25
    1dd8:	10 0d       	add	r17, r0
    1dda:	78 9f       	mul	r23, r24
    1ddc:	10 0d       	add	r17, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	c8 01       	movw	r24, r16
    1de2:	0d d0       	rcall	.+26     	; 0x1dfe <malloc>
    1de4:	ec 01       	movw	r28, r24
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	21 f0       	breq	.+8      	; 0x1df2 <calloc+0x28>
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	a8 01       	movw	r20, r16
    1df0:	0b d1       	rcall	.+534    	; 0x2008 <memset>
    1df2:	ce 01       	movw	r24, r28
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret

00001dfe <malloc>:
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	bc 01       	movw	r22, r24
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	91 05       	cpc	r25, r1
    1e08:	10 f4       	brcc	.+4      	; 0x1e0e <malloc+0x10>
    1e0a:	62 e0       	ldi	r22, 0x02	; 2
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	a0 91 4f 02 	lds	r26, 0x024F
    1e12:	b0 91 50 02 	lds	r27, 0x0250
    1e16:	ed 01       	movw	r28, r26
    1e18:	e0 e0       	ldi	r30, 0x00	; 0
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	21 c0       	rjmp	.+66     	; 0x1e64 <malloc+0x66>
    1e22:	88 81       	ld	r24, Y
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	86 17       	cp	r24, r22
    1e28:	97 07       	cpc	r25, r23
    1e2a:	69 f4       	brne	.+26     	; 0x1e46 <malloc+0x48>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	30 97       	sbiw	r30, 0x00	; 0
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <malloc+0x3c>
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <malloc+0x44>
    1e3a:	90 93 50 02 	sts	0x0250, r25
    1e3e:	80 93 4f 02 	sts	0x024F, r24
    1e42:	fe 01       	movw	r30, r28
    1e44:	34 c0       	rjmp	.+104    	; 0x1eae <malloc+0xb0>
    1e46:	68 17       	cp	r22, r24
    1e48:	79 07       	cpc	r23, r25
    1e4a:	38 f4       	brcc	.+14     	; 0x1e5a <malloc+0x5c>
    1e4c:	41 15       	cp	r20, r1
    1e4e:	51 05       	cpc	r21, r1
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <malloc+0x5a>
    1e52:	84 17       	cp	r24, r20
    1e54:	95 07       	cpc	r25, r21
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <malloc+0x5c>
    1e58:	ac 01       	movw	r20, r24
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	9c 01       	movw	r18, r24
    1e62:	e9 01       	movw	r28, r18
    1e64:	20 97       	sbiw	r28, 0x00	; 0
    1e66:	e9 f6       	brne	.-70     	; 0x1e22 <malloc+0x24>
    1e68:	41 15       	cp	r20, r1
    1e6a:	51 05       	cpc	r21, r1
    1e6c:	a9 f1       	breq	.+106    	; 0x1ed8 <malloc+0xda>
    1e6e:	ca 01       	movw	r24, r20
    1e70:	86 1b       	sub	r24, r22
    1e72:	97 0b       	sbc	r25, r23
    1e74:	04 97       	sbiw	r24, 0x04	; 4
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <malloc+0x7c>
    1e78:	ba 01       	movw	r22, r20
    1e7a:	e0 e0       	ldi	r30, 0x00	; 0
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	2a c0       	rjmp	.+84     	; 0x1ed4 <malloc+0xd6>
    1e80:	8d 91       	ld	r24, X+
    1e82:	9c 91       	ld	r25, X
    1e84:	11 97       	sbiw	r26, 0x01	; 1
    1e86:	84 17       	cp	r24, r20
    1e88:	95 07       	cpc	r25, r21
    1e8a:	f9 f4       	brne	.+62     	; 0x1eca <malloc+0xcc>
    1e8c:	64 17       	cp	r22, r20
    1e8e:	75 07       	cpc	r23, r21
    1e90:	81 f4       	brne	.+32     	; 0x1eb2 <malloc+0xb4>
    1e92:	12 96       	adiw	r26, 0x02	; 2
    1e94:	8d 91       	ld	r24, X+
    1e96:	9c 91       	ld	r25, X
    1e98:	13 97       	sbiw	r26, 0x03	; 3
    1e9a:	30 97       	sbiw	r30, 0x00	; 0
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <malloc+0xa6>
    1e9e:	93 83       	std	Z+3, r25	; 0x03
    1ea0:	82 83       	std	Z+2, r24	; 0x02
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <malloc+0xae>
    1ea4:	90 93 50 02 	sts	0x0250, r25
    1ea8:	80 93 4f 02 	sts	0x024F, r24
    1eac:	fd 01       	movw	r30, r26
    1eae:	32 96       	adiw	r30, 0x02	; 2
    1eb0:	4f c0       	rjmp	.+158    	; 0x1f50 <malloc+0x152>
    1eb2:	ca 01       	movw	r24, r20
    1eb4:	86 1b       	sub	r24, r22
    1eb6:	97 0b       	sbc	r25, r23
    1eb8:	fd 01       	movw	r30, r26
    1eba:	e8 0f       	add	r30, r24
    1ebc:	f9 1f       	adc	r31, r25
    1ebe:	61 93       	st	Z+, r22
    1ec0:	71 93       	st	Z+, r23
    1ec2:	02 97       	sbiw	r24, 0x02	; 2
    1ec4:	8d 93       	st	X+, r24
    1ec6:	9c 93       	st	X, r25
    1ec8:	43 c0       	rjmp	.+134    	; 0x1f50 <malloc+0x152>
    1eca:	fd 01       	movw	r30, r26
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	d9 01       	movw	r26, r18
    1ed4:	10 97       	sbiw	r26, 0x00	; 0
    1ed6:	a1 f6       	brne	.-88     	; 0x1e80 <malloc+0x82>
    1ed8:	80 91 4d 02 	lds	r24, 0x024D
    1edc:	90 91 4e 02 	lds	r25, 0x024E
    1ee0:	89 2b       	or	r24, r25
    1ee2:	41 f4       	brne	.+16     	; 0x1ef4 <malloc+0xf6>
    1ee4:	80 91 02 01 	lds	r24, 0x0102
    1ee8:	90 91 03 01 	lds	r25, 0x0103
    1eec:	90 93 4e 02 	sts	0x024E, r25
    1ef0:	80 93 4d 02 	sts	0x024D, r24
    1ef4:	40 91 04 01 	lds	r20, 0x0104
    1ef8:	50 91 05 01 	lds	r21, 0x0105
    1efc:	41 15       	cp	r20, r1
    1efe:	51 05       	cpc	r21, r1
    1f00:	41 f4       	brne	.+16     	; 0x1f12 <malloc+0x114>
    1f02:	4d b7       	in	r20, 0x3d	; 61
    1f04:	5e b7       	in	r21, 0x3e	; 62
    1f06:	80 91 00 01 	lds	r24, 0x0100
    1f0a:	90 91 01 01 	lds	r25, 0x0101
    1f0e:	48 1b       	sub	r20, r24
    1f10:	59 0b       	sbc	r21, r25
    1f12:	20 91 4d 02 	lds	r18, 0x024D
    1f16:	30 91 4e 02 	lds	r19, 0x024E
    1f1a:	24 17       	cp	r18, r20
    1f1c:	35 07       	cpc	r19, r21
    1f1e:	b0 f4       	brcc	.+44     	; 0x1f4c <malloc+0x14e>
    1f20:	ca 01       	movw	r24, r20
    1f22:	82 1b       	sub	r24, r18
    1f24:	93 0b       	sbc	r25, r19
    1f26:	86 17       	cp	r24, r22
    1f28:	97 07       	cpc	r25, r23
    1f2a:	80 f0       	brcs	.+32     	; 0x1f4c <malloc+0x14e>
    1f2c:	ab 01       	movw	r20, r22
    1f2e:	4e 5f       	subi	r20, 0xFE	; 254
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	84 17       	cp	r24, r20
    1f34:	95 07       	cpc	r25, r21
    1f36:	50 f0       	brcs	.+20     	; 0x1f4c <malloc+0x14e>
    1f38:	42 0f       	add	r20, r18
    1f3a:	53 1f       	adc	r21, r19
    1f3c:	50 93 4e 02 	sts	0x024E, r21
    1f40:	40 93 4d 02 	sts	0x024D, r20
    1f44:	f9 01       	movw	r30, r18
    1f46:	61 93       	st	Z+, r22
    1f48:	71 93       	st	Z+, r23
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <malloc+0x152>
    1f4c:	e0 e0       	ldi	r30, 0x00	; 0
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	cf 01       	movw	r24, r30
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <free>:
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <free+0xa>
    1f60:	50 c0       	rjmp	.+160    	; 0x2002 <free+0xaa>
    1f62:	ec 01       	movw	r28, r24
    1f64:	22 97       	sbiw	r28, 0x02	; 2
    1f66:	1b 82       	std	Y+3, r1	; 0x03
    1f68:	1a 82       	std	Y+2, r1	; 0x02
    1f6a:	a0 91 4f 02 	lds	r26, 0x024F
    1f6e:	b0 91 50 02 	lds	r27, 0x0250
    1f72:	10 97       	sbiw	r26, 0x00	; 0
    1f74:	09 f1       	breq	.+66     	; 0x1fb8 <free+0x60>
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	ac 17       	cp	r26, r28
    1f7c:	bd 07       	cpc	r27, r29
    1f7e:	08 f1       	brcs	.+66     	; 0x1fc2 <free+0x6a>
    1f80:	bb 83       	std	Y+3, r27	; 0x03
    1f82:	aa 83       	std	Y+2, r26	; 0x02
    1f84:	fe 01       	movw	r30, r28
    1f86:	21 91       	ld	r18, Z+
    1f88:	31 91       	ld	r19, Z+
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	ae 17       	cp	r26, r30
    1f90:	bf 07       	cpc	r27, r31
    1f92:	79 f4       	brne	.+30     	; 0x1fb2 <free+0x5a>
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	11 97       	sbiw	r26, 0x01	; 1
    1f9a:	28 0f       	add	r18, r24
    1f9c:	39 1f       	adc	r19, r25
    1f9e:	2e 5f       	subi	r18, 0xFE	; 254
    1fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa2:	39 83       	std	Y+1, r19	; 0x01
    1fa4:	28 83       	st	Y, r18
    1fa6:	12 96       	adiw	r26, 0x02	; 2
    1fa8:	8d 91       	ld	r24, X+
    1faa:	9c 91       	ld	r25, X
    1fac:	13 97       	sbiw	r26, 0x03	; 3
    1fae:	9b 83       	std	Y+3, r25	; 0x03
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	41 15       	cp	r20, r1
    1fb4:	51 05       	cpc	r21, r1
    1fb6:	71 f4       	brne	.+28     	; 0x1fd4 <free+0x7c>
    1fb8:	d0 93 50 02 	sts	0x0250, r29
    1fbc:	c0 93 4f 02 	sts	0x024F, r28
    1fc0:	20 c0       	rjmp	.+64     	; 0x2002 <free+0xaa>
    1fc2:	12 96       	adiw	r26, 0x02	; 2
    1fc4:	8d 91       	ld	r24, X+
    1fc6:	9c 91       	ld	r25, X
    1fc8:	13 97       	sbiw	r26, 0x03	; 3
    1fca:	ad 01       	movw	r20, r26
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <free+0x7c>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	d3 cf       	rjmp	.-90     	; 0x1f7a <free+0x22>
    1fd4:	fa 01       	movw	r30, r20
    1fd6:	d3 83       	std	Z+3, r29	; 0x03
    1fd8:	c2 83       	std	Z+2, r28	; 0x02
    1fda:	21 91       	ld	r18, Z+
    1fdc:	31 91       	ld	r19, Z+
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	ce 17       	cp	r28, r30
    1fe4:	df 07       	cpc	r29, r31
    1fe6:	69 f4       	brne	.+26     	; 0x2002 <free+0xaa>
    1fe8:	88 81       	ld	r24, Y
    1fea:	99 81       	ldd	r25, Y+1	; 0x01
    1fec:	28 0f       	add	r18, r24
    1fee:	39 1f       	adc	r19, r25
    1ff0:	2e 5f       	subi	r18, 0xFE	; 254
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	fa 01       	movw	r30, r20
    1ff6:	31 83       	std	Z+1, r19	; 0x01
    1ff8:	20 83       	st	Z, r18
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	93 83       	std	Z+3, r25	; 0x03
    2000:	82 83       	std	Z+2, r24	; 0x02
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <memset>:
    2008:	dc 01       	movw	r26, r24
    200a:	01 c0       	rjmp	.+2      	; 0x200e <memset+0x6>
    200c:	6d 93       	st	X+, r22
    200e:	41 50       	subi	r20, 0x01	; 1
    2010:	50 40       	sbci	r21, 0x00	; 0
    2012:	e0 f7       	brcc	.-8      	; 0x200c <memset+0x4>
    2014:	08 95       	ret

00002016 <_exit>:
    2016:	f8 94       	cli

00002018 <__stop_program>:
    2018:	ff cf       	rjmp	.-2      	; 0x2018 <__stop_program>
