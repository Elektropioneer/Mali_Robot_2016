
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00004bd4  00004c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001da  008001da  00004d42  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  00004d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008a1  00000000  00000000  000050c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000288a  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aed  00000000  00000000  000081ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e15  00000000  00000000  00008cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e0  00000000  00000000  0000baf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa0  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000338  00000000  00000000  0000cb70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       2:	00 00       	nop
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
	if(sys_time >= 90000)
		actuators_umbrella();
	sys_time++;
}
void delay(double ms)
{
       a:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	6a c5       	rjmp	.+2772   	; 0xb1e <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 95 21 	jmp	0x432a	; 0x432a <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ed       	ldi	r30, 0xD4	; 212
      a8:	fb e4       	ldi	r31, 0x4B	; 75
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 3d       	cpi	r26, 0xDA	; 218
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	aa ed       	ldi	r26, 0xDA	; 218
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 32       	cpi	r26, 0x22	; 34
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "actuators.h"

int set = 1;

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	2a c0       	rjmp	.+84     	; 0x1fa <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	15 c0       	rjmp	.+42     	; 0x1fa <main+0x128>
	_delay_ms(100);
	
	while(set)
	{
		if(sides_switch_check() == 0)
     1d0:	0e 94 2e 20 	call	0x405c	; 0x405c <sides_switch_check>
     1d4:	88 23       	and	r24, r24
     1d6:	49 f4       	brne	.+18     	; 0x1ea <main+0x118>
		{
			set = 2;
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	90 93 07 01 	sts	0x0107, r25
     1e0:	80 93 06 01 	sts	0x0106, r24
			greenside();	
     1e4:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <greenside>
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <main+0x128>
		}
		else
		{
			set = 3;
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 07 01 	sts	0x0107, r25
     1f2:	80 93 06 01 	sts	0x0106, r24
			purpleside();	
     1f6:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <purpleside>
{

	system_init();
	_delay_ms(100);
	
	while(set)
     1fa:	80 91 06 01 	lds	r24, 0x0106
     1fe:	90 91 07 01 	lds	r25, 0x0107
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	29 f7       	brne	.-54     	; 0x1d0 <main+0xfe>
			purpleside();	
		}
	}
	while(1)
	{
		if(set == 2)
     206:	80 91 06 01 	lds	r24, 0x0106
     20a:	90 91 07 01 	lds	r25, 0x0107
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	91 05       	cpc	r25, r1
     212:	19 f4       	brne	.+6      	; 0x21a <main+0x148>
		{
			greenside();
     214:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <greenside>
     218:	f6 cf       	rjmp	.-20     	; 0x206 <main+0x134>
		}
		else if(set == 3)
     21a:	80 91 06 01 	lds	r24, 0x0106
     21e:	90 91 07 01 	lds	r25, 0x0107
     222:	83 30       	cpi	r24, 0x03	; 3
     224:	91 05       	cpc	r25, r1
     226:	79 f7       	brne	.-34     	; 0x206 <main+0x134>
		{
			purpleside();
     228:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <purpleside>
     22c:	ec cf       	rjmp	.-40     	; 0x206 <main+0x134>

0000022e <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	00 d0       	rcall	.+0      	; 0x238 <servo_init+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     240:	ad e2       	ldi	r26, 0x2D	; 45
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	ed e2       	ldi	r30, 0x2D	; 45
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	88 63       	ori	r24, 0x38	; 56
     24c:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     24e:	a4 e2       	ldi	r26, 0x24	; 36
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e4 e2       	ldi	r30, 0x24	; 36
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     25c:	e4 e9       	ldi	r30, 0x94	; 148
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	11 82       	std	Z+1, r1	; 0x01
     262:	10 82       	st	Z, r1
	TCNT0 = 0;
     264:	e6 e4       	ldi	r30, 0x46	; 70
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	10 82       	st	Z, r1

	OCR3A = 0;
     26a:	e8 e9       	ldi	r30, 0x98	; 152
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	11 82       	std	Z+1, r1	; 0x01
     270:	10 82       	st	Z, r1
	OCR3B = 0;
     272:	ea e9       	ldi	r30, 0x9A	; 154
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	11 82       	std	Z+1, r1	; 0x01
     278:	10 82       	st	Z, r1
	OCR3C = 0;
     27a:	ec e9       	ldi	r30, 0x9C	; 156
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	11 82       	std	Z+1, r1	; 0x01
     280:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     282:	e0 e9       	ldi	r30, 0x90	; 144
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	8e eb       	ldi	r24, 0xBE	; 190
     288:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     28a:	e1 e9       	ldi	r30, 0x91	; 145
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	8a e1       	ldi	r24, 0x1A	; 26
     290:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     292:	e4 e4       	ldi	r30, 0x44	; 68
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	8b e6       	ldi	r24, 0x6B	; 107
     298:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     29a:	06 e9       	ldi	r16, 0x96	; 150
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	cc 01       	movw	r24, r24
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 a9 23 	call	0x4752	; 0x4752 <__floatunsisf>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	51 e4       	ldi	r21, 0x41	; 65
     2c0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	9c 01       	movw	r18, r24
     2ca:	ad 01       	movw	r20, r26
     2cc:	60 e8       	ldi	r22, 0x80	; 128
     2ce:	76 e9       	ldi	r23, 0x96	; 150
     2d0:	88 e1       	ldi	r24, 0x18	; 24
     2d2:	9b e4       	ldi	r25, 0x4B	; 75
     2d4:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	f8 01       	movw	r30, r16
     2fe:	91 83       	std	Z+1, r25	; 0x01
     300:	80 83       	st	Z, r24
}
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	cf 91       	pop	r28
     308:	df 91       	pop	r29
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	00 d0       	rcall	.+0      	; 0x31e <servo_set_duty_cycle_umbrella+0xe>
     31e:	00 d0       	rcall	.+0      	; 0x320 <servo_set_duty_cycle_umbrella+0x10>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9c 83       	std	Y+4, r25	; 0x04
     326:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     328:	e6 e9       	ldi	r30, 0x96	; 150
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	cc 01       	movw	r24, r24
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 a9 23 	call	0x4752	; 0x4752 <__floatunsisf>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4f e7       	ldi	r20, 0x7F	; 127
     34c:	53 e4       	ldi	r21, 0x43	; 67
     34e:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	7c 01       	movw	r14, r24
     358:	8d 01       	movw	r16, r26
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	aa 27       	eor	r26, r26
     360:	97 fd       	sbrc	r25, 7
     362:	a0 95       	com	r26
     364:	ba 2f       	mov	r27, r26
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     3a2:	e9 e9       	ldi	r30, 0x99	; 153
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	89 2f       	mov	r24, r25
     3ac:	99 27       	eor	r25, r25
     3ae:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     3b0:	e8 e9       	ldi	r30, 0x98	; 152
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	80 83       	st	Z, r24
}
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <servo_set_duty_cycle_door+0xe>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <servo_set_duty_cycle_door+0x10>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3e6:	e6 e9       	ldi	r30, 0x96	; 150
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	cc 01       	movw	r24, r24
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	0e 94 a9 23 	call	0x4752	; 0x4752 <__floatunsisf>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	4f e7       	ldi	r20, 0x7F	; 127
     40a:	53 e4       	ldi	r21, 0x43	; 67
     40c:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	7c 01       	movw	r14, r24
     416:	8d 01       	movw	r16, r26
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	9c 81       	ldd	r25, Y+4	; 0x04
     41c:	aa 27       	eor	r26, r26
     41e:	97 fd       	sbrc	r25, 7
     420:	a0 95       	com	r26
     422:	ba 2f       	mov	r27, r26
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c8 01       	movw	r24, r16
     432:	b7 01       	movw	r22, r14
     434:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	9a 83       	std	Y+2, r25	; 0x02
     45e:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     460:	eb e9       	ldi	r30, 0x9B	; 155
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	89 2f       	mov	r24, r25
     46a:	99 27       	eor	r25, r25
     46c:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     46e:	ea e9       	ldi	r30, 0x9A	; 154
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	80 83       	st	Z, r24
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	08 95       	ret

0000048c <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <servo_set_duty_cycle_left_grabber+0xe>
     49a:	00 d0       	rcall	.+0      	; 0x49c <servo_set_duty_cycle_left_grabber+0x10>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	9c 83       	std	Y+4, r25	; 0x04
     4a2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     4a4:	e6 e9       	ldi	r30, 0x96	; 150
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	cc 01       	movw	r24, r24
     4ae:	a0 e0       	ldi	r26, 0x00	; 0
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 a9 23 	call	0x4752	; 0x4752 <__floatunsisf>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	bc 01       	movw	r22, r24
     4c0:	cd 01       	movw	r24, r26
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	7c 01       	movw	r14, r24
     4d4:	8d 01       	movw	r16, r26
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	9c 81       	ldd	r25, Y+4	; 0x04
     4da:	aa 27       	eor	r26, r26
     4dc:	97 fd       	sbrc	r25, 7
     4de:	a0 95       	com	r26
     4e0:	ba 2f       	mov	r27, r26
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     4ea:	9b 01       	movw	r18, r22
     4ec:	ac 01       	movw	r20, r24
     4ee:	c8 01       	movw	r24, r16
     4f0:	b7 01       	movw	r22, r14
     4f2:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	5f e3       	ldi	r21, 0x3F	; 63
     506:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     50a:	dc 01       	movw	r26, r24
     50c:	cb 01       	movw	r24, r22
     50e:	bc 01       	movw	r22, r24
     510:	cd 01       	movw	r24, r26
     512:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     51e:	ed e9       	ldi	r30, 0x9D	; 157
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	89 2f       	mov	r24, r25
     528:	99 27       	eor	r25, r25
     52a:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     52c:	ec e9       	ldi	r30, 0x9C	; 156
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	80 83       	st	Z, r24
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	0f 92       	push	r0
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	99 27       	eor	r25, r25
     55a:	87 fd       	sbrc	r24, 7
     55c:	90 95       	com	r25
     55e:	a9 2f       	mov	r26, r25
     560:	b9 2f       	mov	r27, r25
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	bc 01       	movw	r22, r24
     570:	cd 01       	movw	r24, r26
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	44 eb       	ldi	r20, 0xB4	; 180
     578:	52 e4       	ldi	r21, 0x42	; 66
     57a:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	26 e6       	ldi	r18, 0x66	; 102
     588:	36 e6       	ldi	r19, 0x66	; 102
     58a:	46 e3       	ldi	r20, 0x36	; 54
     58c:	51 ec       	ldi	r21, 0xC1	; 193
     58e:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4c e6       	ldi	r20, 0x6C	; 108
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	9c 01       	movw	r18, r24
     5ac:	ad 01       	movw	r20, r26
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	8f e7       	ldi	r24, 0x7F	; 127
     5b4:	93 e4       	ldi	r25, 0x43	; 67
     5b6:	0e 94 a7 22 	call	0x454e	; 0x454e <__subsf3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	bc 01       	movw	r22, r24
     5c0:	cd 01       	movw	r24, r26
     5c2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__fixsfsi>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	a2 de       	rcall	.-700    	; 0x310 <servo_set_duty_cycle_umbrella>
}
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	08 95       	ret

000005d4 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     5d4:	df 93       	push	r29
     5d6:	cf 93       	push	r28
     5d8:	0f 92       	push	r0
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	99 27       	eor	r25, r25
     5e4:	87 fd       	sbrc	r24, 7
     5e6:	90 95       	com	r25
     5e8:	a9 2f       	mov	r26, r25
     5ea:	b9 2f       	mov	r27, r25
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	44 eb       	ldi	r20, 0xB4	; 180
     602:	52 e4       	ldi	r21, 0x42	; 66
     604:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	26 e6       	ldi	r18, 0x66	; 102
     612:	36 e6       	ldi	r19, 0x66	; 102
     614:	46 e3       	ldi	r20, 0x36	; 54
     616:	51 ec       	ldi	r21, 0xC1	; 193
     618:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	4c e6       	ldi	r20, 0x6C	; 108
     62a:	53 e4       	ldi	r21, 0x43	; 67
     62c:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	9c 01       	movw	r18, r24
     636:	ad 01       	movw	r20, r26
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8f e7       	ldi	r24, 0x7F	; 127
     63e:	93 e4       	ldi	r25, 0x43	; 67
     640:	0e 94 a7 22 	call	0x454e	; 0x454e <__subsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__fixsfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	bc de       	rcall	.-648    	; 0x3ce <servo_set_duty_cycle_door>
}
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	99 27       	eor	r25, r25
     66e:	87 fd       	sbrc	r24, 7
     670:	90 95       	com	r25
     672:	a9 2f       	mov	r26, r25
     674:	b9 2f       	mov	r27, r25
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 ab 23 	call	0x4756	; 0x4756 <__floatsisf>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	44 eb       	ldi	r20, 0xB4	; 180
     68c:	52 e4       	ldi	r21, 0x42	; 66
     68e:	0e 94 10 23 	call	0x4620	; 0x4620 <__divsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	26 e6       	ldi	r18, 0x66	; 102
     69c:	36 e6       	ldi	r19, 0x66	; 102
     69e:	46 e3       	ldi	r20, 0x36	; 54
     6a0:	51 ec       	ldi	r21, 0xC1	; 193
     6a2:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	4c e6       	ldi	r20, 0x6C	; 108
     6b4:	53 e4       	ldi	r21, 0x43	; 67
     6b6:	0e 94 a8 22 	call	0x4550	; 0x4550 <__addsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	9c 01       	movw	r18, r24
     6c0:	ad 01       	movw	r20, r26
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8f e7       	ldi	r24, 0x7F	; 127
     6c8:	93 e4       	ldi	r25, 0x43	; 67
     6ca:	0e 94 a7 22 	call	0x454e	; 0x454e <__subsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__fixsfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	d6 de       	rcall	.-596    	; 0x48c <servo_set_duty_cycle_left_grabber>
}
     6e0:	0f 90       	pop	r0
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	0f 92       	push	r0
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6f4:	e7 e4       	ldi	r30, 0x47	; 71
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	80 83       	st	Z, r24
}
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-10);
     70c:	86 ef       	ldi	r24, 0xF6	; 246
     70e:	a7 df       	rcall	.-178    	; 0x65e <servo_set_left_grabber_position>
	servo_set_right_grabber_position(80);//200 is for the half step
     710:	80 e5       	ldi	r24, 0x50	; 80
     712:	ea df       	rcall	.-44     	; 0x6e8 <servo_set_right_grabber_position>
}
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <servo_set_grabbers_down>:
void servo_set_grabbers_down(void)
{
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(89);
     722:	89 e5       	ldi	r24, 0x59	; 89
     724:	9c df       	rcall	.-200    	; 0x65e <servo_set_left_grabber_position>
	servo_set_right_grabber_position(250);
     726:	8a ef       	ldi	r24, 0xFA	; 250
     728:	df df       	rcall	.-66     	; 0x6e8 <servo_set_right_grabber_position>
}
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	2e 97       	sbiw	r28, 0x0e	; 14
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     744:	8a e5       	ldi	r24, 0x5A	; 90
     746:	46 df       	rcall	.-372    	; 0x5d4 <servo_set_door_position>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	aa ef       	ldi	r26, 0xFA	; 250
     74e:	b4 e4       	ldi	r27, 0x44	; 68
     750:	8b 87       	std	Y+11, r24	; 0x0b
     752:	9c 87       	std	Y+12, r25	; 0x0c
     754:	ad 87       	std	Y+13, r26	; 0x0d
     756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     758:	6b 85       	ldd	r22, Y+11	; 0x0b
     75a:	7c 85       	ldd	r23, Y+12	; 0x0c
     75c:	8d 85       	ldd	r24, Y+13	; 0x0d
     75e:	9e 85       	ldd	r25, Y+14	; 0x0e
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e4       	ldi	r19, 0x40	; 64
     764:	4c e1       	ldi	r20, 0x1C	; 28
     766:	55 e4       	ldi	r21, 0x45	; 69
     768:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	8f 83       	std	Y+7, r24	; 0x07
     772:	98 87       	std	Y+8, r25	; 0x08
     774:	a9 87       	std	Y+9, r26	; 0x09
     776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     778:	6f 81       	ldd	r22, Y+7	; 0x07
     77a:	78 85       	ldd	r23, Y+8	; 0x08
     77c:	89 85       	ldd	r24, Y+9	; 0x09
     77e:	9a 85       	ldd	r25, Y+10	; 0x0a
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e8       	ldi	r20, 0x80	; 128
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
     78c:	88 23       	and	r24, r24
     78e:	2c f4       	brge	.+10     	; 0x79a <actuators_umbrella+0x6a>
		__ticks = 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	9e 83       	std	Y+6, r25	; 0x06
     796:	8d 83       	std	Y+5, r24	; 0x05
     798:	3f c0       	rjmp	.+126    	; 0x818 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     79a:	6f 81       	ldd	r22, Y+7	; 0x07
     79c:	78 85       	ldd	r23, Y+8	; 0x08
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	3f ef       	ldi	r19, 0xFF	; 255
     7a6:	4f e7       	ldi	r20, 0x7F	; 127
     7a8:	57 e4       	ldi	r21, 0x47	; 71
     7aa:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	4c f5       	brge	.+82     	; 0x804 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b2:	6b 85       	ldd	r22, Y+11	; 0x0b
     7b4:	7c 85       	ldd	r23, Y+12	; 0x0c
     7b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e2       	ldi	r20, 0x20	; 32
     7c0:	51 e4       	ldi	r21, 0x41	; 65
     7c2:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	bc 01       	movw	r22, r24
     7cc:	cd 01       	movw	r24, r26
     7ce:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	9e 83       	std	Y+6, r25	; 0x06
     7d8:	8d 83       	std	Y+5, r24	; 0x05
     7da:	0f c0       	rjmp	.+30     	; 0x7fa <actuators_umbrella+0xca>
     7dc:	8a ef       	ldi	r24, 0xFA	; 250
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <actuators_umbrella+0xb8>
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f0:	8d 81       	ldd	r24, Y+5	; 0x05
     7f2:	9e 81       	ldd	r25, Y+6	; 0x06
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	9e 83       	std	Y+6, r25	; 0x06
     7f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	69 f7       	brne	.-38     	; 0x7dc <actuators_umbrella+0xac>
     802:	14 c0       	rjmp	.+40     	; 0x82c <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     804:	6f 81       	ldd	r22, Y+7	; 0x07
     806:	78 85       	ldd	r23, Y+8	; 0x08
     808:	89 85       	ldd	r24, Y+9	; 0x09
     80a:	9a 85       	ldd	r25, Y+10	; 0x0a
     80c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <actuators_umbrella+0xf4>
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_set_umbrella_position(70);
     82c:	86 e4       	ldi	r24, 0x46	; 70
     82e:	8d de       	rcall	.-742    	; 0x54a <servo_set_umbrella_position>
	
}
     830:	2e 96       	adiw	r28, 0x0e	; 14
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	08 95       	ret

00000842 <actuators_setup>:
void actuators_setup(void)
{
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	aa 97       	sbiw	r28, 0x2a	; 42
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     856:	8a e5       	ldi	r24, 0x5A	; 90
     858:	bd de       	rcall	.-646    	; 0x5d4 <servo_set_door_position>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	aa e7       	ldi	r26, 0x7A	; 122
     860:	b4 e4       	ldi	r27, 0x44	; 68
     862:	8f a3       	std	Y+39, r24	; 0x27
     864:	98 a7       	std	Y+40, r25	; 0x28
     866:	a9 a7       	std	Y+41, r26	; 0x29
     868:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     86a:	6f a1       	ldd	r22, Y+39	; 0x27
     86c:	78 a5       	ldd	r23, Y+40	; 0x28
     86e:	89 a5       	ldd	r24, Y+41	; 0x29
     870:	9a a5       	ldd	r25, Y+42	; 0x2a
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e4       	ldi	r19, 0x40	; 64
     876:	4c e1       	ldi	r20, 0x1C	; 28
     878:	55 e4       	ldi	r21, 0x45	; 69
     87a:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	8b a3       	std	Y+35, r24	; 0x23
     884:	9c a3       	std	Y+36, r25	; 0x24
     886:	ad a3       	std	Y+37, r26	; 0x25
     888:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     88a:	6b a1       	ldd	r22, Y+35	; 0x23
     88c:	7c a1       	ldd	r23, Y+36	; 0x24
     88e:	8d a1       	ldd	r24, Y+37	; 0x25
     890:	9e a1       	ldd	r25, Y+38	; 0x26
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e8       	ldi	r20, 0x80	; 128
     898:	5f e3       	ldi	r21, 0x3F	; 63
     89a:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
     89e:	88 23       	and	r24, r24
     8a0:	2c f4       	brge	.+10     	; 0x8ac <actuators_setup+0x6a>
		__ticks = 1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9a a3       	std	Y+34, r25	; 0x22
     8a8:	89 a3       	std	Y+33, r24	; 0x21
     8aa:	3f c0       	rjmp	.+126    	; 0x92a <actuators_setup+0xe8>
	else if (__tmp > 65535)
     8ac:	6b a1       	ldd	r22, Y+35	; 0x23
     8ae:	7c a1       	ldd	r23, Y+36	; 0x24
     8b0:	8d a1       	ldd	r24, Y+37	; 0x25
     8b2:	9e a1       	ldd	r25, Y+38	; 0x26
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	3f ef       	ldi	r19, 0xFF	; 255
     8b8:	4f e7       	ldi	r20, 0x7F	; 127
     8ba:	57 e4       	ldi	r21, 0x47	; 71
     8bc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
     8c0:	18 16       	cp	r1, r24
     8c2:	4c f5       	brge	.+82     	; 0x916 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c4:	6f a1       	ldd	r22, Y+39	; 0x27
     8c6:	78 a5       	ldd	r23, Y+40	; 0x28
     8c8:	89 a5       	ldd	r24, Y+41	; 0x29
     8ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e2       	ldi	r20, 0x20	; 32
     8d2:	51 e4       	ldi	r21, 0x41	; 65
     8d4:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	bc 01       	movw	r22, r24
     8de:	cd 01       	movw	r24, r26
     8e0:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	9a a3       	std	Y+34, r25	; 0x22
     8ea:	89 a3       	std	Y+33, r24	; 0x21
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <actuators_setup+0xca>
     8ee:	8a ef       	ldi	r24, 0xFA	; 250
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	98 a3       	std	Y+32, r25	; 0x20
     8f4:	8f 8f       	std	Y+31, r24	; 0x1f
     8f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8f8:	98 a1       	ldd	r25, Y+32	; 0x20
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <actuators_setup+0xb8>
     8fe:	98 a3       	std	Y+32, r25	; 0x20
     900:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     902:	89 a1       	ldd	r24, Y+33	; 0x21
     904:	9a a1       	ldd	r25, Y+34	; 0x22
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	9a a3       	std	Y+34, r25	; 0x22
     90a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     90c:	89 a1       	ldd	r24, Y+33	; 0x21
     90e:	9a a1       	ldd	r25, Y+34	; 0x22
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	69 f7       	brne	.-38     	; 0x8ee <actuators_setup+0xac>
     914:	14 c0       	rjmp	.+40     	; 0x93e <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     916:	6b a1       	ldd	r22, Y+35	; 0x23
     918:	7c a1       	ldd	r23, Y+36	; 0x24
     91a:	8d a1       	ldd	r24, Y+37	; 0x25
     91c:	9e a1       	ldd	r25, Y+38	; 0x26
     91e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	89 a1       	ldd	r24, Y+33	; 0x21
     92c:	9a a1       	ldd	r25, Y+34	; 0x22
     92e:	9e 8f       	std	Y+30, r25	; 0x1e
     930:	8d 8f       	std	Y+29, r24	; 0x1d
     932:	8d 8d       	ldd	r24, Y+29	; 0x1d
     934:	9e 8d       	ldd	r25, Y+30	; 0x1e
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <actuators_setup+0xf4>
     93a:	9e 8f       	std	Y+30, r25	; 0x1e
     93c:	8d 8f       	std	Y+29, r24	; 0x1d
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	aa e7       	ldi	r26, 0x7A	; 122
     944:	b4 e4       	ldi	r27, 0x44	; 68
     946:	89 8f       	std	Y+25, r24	; 0x19
     948:	9a 8f       	std	Y+26, r25	; 0x1a
     94a:	ab 8f       	std	Y+27, r26	; 0x1b
     94c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     94e:	69 8d       	ldd	r22, Y+25	; 0x19
     950:	7a 8d       	ldd	r23, Y+26	; 0x1a
     952:	8b 8d       	ldd	r24, Y+27	; 0x1b
     954:	9c 8d       	ldd	r25, Y+28	; 0x1c
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e4       	ldi	r19, 0x40	; 64
     95a:	4c e1       	ldi	r20, 0x1C	; 28
     95c:	55 e4       	ldi	r21, 0x45	; 69
     95e:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	8d 8b       	std	Y+21, r24	; 0x15
     968:	9e 8b       	std	Y+22, r25	; 0x16
     96a:	af 8b       	std	Y+23, r26	; 0x17
     96c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     96e:	6d 89       	ldd	r22, Y+21	; 0x15
     970:	7e 89       	ldd	r23, Y+22	; 0x16
     972:	8f 89       	ldd	r24, Y+23	; 0x17
     974:	98 8d       	ldd	r25, Y+24	; 0x18
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	2c f4       	brge	.+10     	; 0x990 <actuators_setup+0x14e>
		__ticks = 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9c 8b       	std	Y+20, r25	; 0x14
     98c:	8b 8b       	std	Y+19, r24	; 0x13
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <actuators_setup+0x1cc>
	else if (__tmp > 65535)
     990:	6d 89       	ldd	r22, Y+21	; 0x15
     992:	7e 89       	ldd	r23, Y+22	; 0x16
     994:	8f 89       	ldd	r24, Y+23	; 0x17
     996:	98 8d       	ldd	r25, Y+24	; 0x18
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	4f e7       	ldi	r20, 0x7F	; 127
     99e:	57 e4       	ldi	r21, 0x47	; 71
     9a0:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	4c f5       	brge	.+82     	; 0x9fa <actuators_setup+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	69 8d       	ldd	r22, Y+25	; 0x19
     9aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	cd 01       	movw	r24, r26
     9c4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9c 8b       	std	Y+20, r25	; 0x14
     9ce:	8b 8b       	std	Y+19, r24	; 0x13
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <actuators_setup+0x1ae>
     9d2:	8a ef       	ldi	r24, 0xFA	; 250
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9a 8b       	std	Y+18, r25	; 0x12
     9d8:	89 8b       	std	Y+17, r24	; 0x11
     9da:	89 89       	ldd	r24, Y+17	; 0x11
     9dc:	9a 89       	ldd	r25, Y+18	; 0x12
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <actuators_setup+0x19c>
     9e2:	9a 8b       	std	Y+18, r25	; 0x12
     9e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e6:	8b 89       	ldd	r24, Y+19	; 0x13
     9e8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	9c 8b       	std	Y+20, r25	; 0x14
     9ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f0:	8b 89       	ldd	r24, Y+19	; 0x13
     9f2:	9c 89       	ldd	r25, Y+20	; 0x14
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <actuators_setup+0x190>
     9f8:	14 c0       	rjmp	.+40     	; 0xa22 <actuators_setup+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	6d 89       	ldd	r22, Y+21	; 0x15
     9fc:	7e 89       	ldd	r23, Y+22	; 0x16
     9fe:	8f 89       	ldd	r24, Y+23	; 0x17
     a00:	98 8d       	ldd	r25, Y+24	; 0x18
     a02:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9c 8b       	std	Y+20, r25	; 0x14
     a0c:	8b 8b       	std	Y+19, r24	; 0x13
     a0e:	8b 89       	ldd	r24, Y+19	; 0x13
     a10:	9c 89       	ldd	r25, Y+20	; 0x14
     a12:	98 8b       	std	Y+16, r25	; 0x10
     a14:	8f 87       	std	Y+15, r24	; 0x0f
     a16:	8f 85       	ldd	r24, Y+15	; 0x0f
     a18:	98 89       	ldd	r25, Y+16	; 0x10
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <actuators_setup+0x1d8>
     a1e:	98 8b       	std	Y+16, r25	; 0x10
     a20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	//servo_set_umbrella_position(-89);
	_delay_ms(1000);
	servo_set_door_position(30);
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	d7 dd       	rcall	.-1106   	; 0x5d4 <servo_set_door_position>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	aa ef       	ldi	r26, 0xFA	; 250
     a2c:	b3 e4       	ldi	r27, 0x43	; 67
     a2e:	8b 87       	std	Y+11, r24	; 0x0b
     a30:	9c 87       	std	Y+12, r25	; 0x0c
     a32:	ad 87       	std	Y+13, r26	; 0x0d
     a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a36:	6b 85       	ldd	r22, Y+11	; 0x0b
     a38:	7c 85       	ldd	r23, Y+12	; 0x0c
     a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e4       	ldi	r19, 0x40	; 64
     a42:	4c e1       	ldi	r20, 0x1C	; 28
     a44:	55 e4       	ldi	r21, 0x45	; 69
     a46:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	8f 83       	std	Y+7, r24	; 0x07
     a50:	98 87       	std	Y+8, r25	; 0x08
     a52:	a9 87       	std	Y+9, r26	; 0x09
     a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a56:	6f 81       	ldd	r22, Y+7	; 0x07
     a58:	78 85       	ldd	r23, Y+8	; 0x08
     a5a:	89 85       	ldd	r24, Y+9	; 0x09
     a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e8       	ldi	r20, 0x80	; 128
     a64:	5f e3       	ldi	r21, 0x3F	; 63
     a66:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
     a6a:	88 23       	and	r24, r24
     a6c:	2c f4       	brge	.+10     	; 0xa78 <actuators_setup+0x236>
		__ticks = 1;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	9e 83       	std	Y+6, r25	; 0x06
     a74:	8d 83       	std	Y+5, r24	; 0x05
     a76:	3f c0       	rjmp	.+126    	; 0xaf6 <actuators_setup+0x2b4>
	else if (__tmp > 65535)
     a78:	6f 81       	ldd	r22, Y+7	; 0x07
     a7a:	78 85       	ldd	r23, Y+8	; 0x08
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	4f e7       	ldi	r20, 0x7F	; 127
     a86:	57 e4       	ldi	r21, 0x47	; 71
     a88:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	4c f5       	brge	.+82     	; 0xae2 <actuators_setup+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a90:	6b 85       	ldd	r22, Y+11	; 0x0b
     a92:	7c 85       	ldd	r23, Y+12	; 0x0c
     a94:	8d 85       	ldd	r24, Y+13	; 0x0d
     a96:	9e 85       	ldd	r25, Y+14	; 0x0e
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e2       	ldi	r20, 0x20	; 32
     a9e:	51 e4       	ldi	r21, 0x41	; 65
     aa0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	bc 01       	movw	r22, r24
     aaa:	cd 01       	movw	r24, r26
     aac:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	9e 83       	std	Y+6, r25	; 0x06
     ab6:	8d 83       	std	Y+5, r24	; 0x05
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <actuators_setup+0x296>
     aba:	8a ef       	ldi	r24, 0xFA	; 250
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	8b 83       	std	Y+3, r24	; 0x03
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <actuators_setup+0x284>
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	9e 81       	ldd	r25, Y+6	; 0x06
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9e 83       	std	Y+6, r25	; 0x06
     ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	9e 81       	ldd	r25, Y+6	; 0x06
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	69 f7       	brne	.-38     	; 0xaba <actuators_setup+0x278>
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <actuators_setup+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae2:	6f 81       	ldd	r22, Y+7	; 0x07
     ae4:	78 85       	ldd	r23, Y+8	; 0x08
     ae6:	89 85       	ldd	r24, Y+9	; 0x09
     ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aea:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	9e 83       	std	Y+6, r25	; 0x06
     af4:	8d 83       	std	Y+5, r24	; 0x05
     af6:	8d 81       	ldd	r24, Y+5	; 0x05
     af8:	9e 81       	ldd	r25, Y+6	; 0x06
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <actuators_setup+0x2c0>
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     b0a:	fc dd       	rcall	.-1032   	; 0x704 <servo_set_grabbers_up>
}
     b0c:	aa 96       	adiw	r28, 0x2a	; 42
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	00 90 5b 00 	lds	r0, 0x005B
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <__vector_18+0x2a>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <__vector_18+0x2c>
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     b4e:	ed ee       	ldi	r30, 0xED	; 237
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     b56:	1b 82       	std	Y+3, r1	; 0x03
     b58:	9c c0       	rjmp	.+312    	; 0xc92 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     b5a:	ed ee       	ldi	r30, 0xED	; 237
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	82 95       	swap	r24
     b62:	80 7f       	andi	r24, 0xF0	; 240
     b64:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     b66:	ee ee       	ldi	r30, 0xEE	; 238
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	82 95       	swap	r24
     b6e:	86 95       	lsr	r24
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	90 70       	andi	r25, 0x00	; 0
     b7a:	88 23       	and	r24, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <__vector_18+0x62>
     b7e:	6e c0       	rjmp	.+220    	; 0xc5c <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     b80:	ef ee       	ldi	r30, 0xEF	; 239
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 e8       	ldi	r24, 0x80	; 128
     b86:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     b88:	ae ee       	ldi	r26, 0xEE	; 238
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ee ee       	ldi	r30, 0xEE	; 238
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 7d       	andi	r24, 0xDF	; 223
     b94:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     b96:	e2 ef       	ldi	r30, 0xF2	; 242
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	82 95       	swap	r24
     b9e:	86 95       	lsr	r24
     ba0:	87 70       	andi	r24, 0x07	; 7
     ba2:	28 2f       	mov	r18, r24
     ba4:	e3 ef       	ldi	r30, 0xF3	; 243
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	82 2b       	or	r24, r18
     bbc:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     bbe:	19 82       	std	Y+1, r1	; 0x01
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	82 1b       	sub	r24, r18
     bce:	93 0b       	sbc	r25, r19
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	90 95       	com	r25
     bd6:	81 95       	neg	r24
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	fc 01       	movw	r30, r24
     bdc:	e6 52       	subi	r30, 0x26	; 38
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	40 81       	ld	r20, Z
     be2:	51 81       	ldd	r21, Z+1	; 0x01
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	fc 01       	movw	r30, r24
     bee:	e2 51       	subi	r30, 0x12	; 18
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	80 81       	ld	r24, Z
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	82 0f       	add	r24, r18
     c00:	93 1f       	adc	r25, r19
     c02:	da 01       	movw	r26, r20
     c04:	a8 0f       	add	r26, r24
     c06:	b9 1f       	adc	r27, r25
     c08:	ea ef       	ldi	r30, 0xFA	; 250
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	88 30       	cpi	r24, 0x08	; 8
     c1a:	98 f2       	brcs	.-90     	; 0xbc2 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	fc 01       	movw	r30, r24
     c26:	e2 51       	subi	r30, 0x12	; 18
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	80 81       	ld	r24, Z
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	80 83       	st	Z, r24
     c30:	80 81       	ld	r24, Z
     c32:	85 30       	cpi	r24, 0x05	; 5
     c34:	41 f4       	brne	.+16     	; 0xc46 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	fc 01       	movw	r30, r24
     c40:	e2 51       	subi	r30, 0x12	; 18
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	fc 01       	movw	r30, r24
     c50:	ee 5f       	subi	r30, 0xFE	; 254
     c52:	fd 4f       	sbci	r31, 0xFD	; 253
     c54:	80 81       	ld	r24, Z
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	80 83       	st	Z, r24
     c5a:	1f c0       	rjmp	.+62     	; 0xc9a <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     c5c:	ee ee       	ldi	r30, 0xEE	; 238
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	82 95       	swap	r24
     c64:	86 95       	lsr	r24
     c66:	86 95       	lsr	r24
     c68:	83 70       	andi	r24, 0x03	; 3
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	90 70       	andi	r25, 0x00	; 0
     c72:	88 23       	and	r24, r24
     c74:	59 f0       	breq	.+22     	; 0xc8c <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     c76:	ef ee       	ldi	r30, 0xEF	; 239
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     c7c:	ae ee       	ldi	r26, 0xEE	; 238
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ee ee       	ldi	r30, 0xEE	; 238
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 7b       	andi	r24, 0xBF	; 191
     c88:	8c 93       	st	X, r24
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	8b 83       	std	Y+3, r24	; 0x03
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	8f 30       	cpi	r24, 0x0F	; 15
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__vector_18+0x17c>
     c98:	60 cf       	rjmp	.-320    	; 0xb5a <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     c9a:	ed ee       	ldi	r30, 0xED	; 237
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     ca2:	aa ed       	ldi	r26, 0xDA	; 218
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea ed       	ldi	r30, 0xDA	; 218
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8c 93       	st	X, r24
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	00 92 5b 00 	sts	0x005B, r0
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <CAN_InitModule>:


static void CAN_InitModule(void)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <CAN_InitModule+0x6>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     ce8:	e8 ed       	ldi	r30, 0xD8	; 216
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     cf0:	1a 82       	std	Y+2, r1	; 0x02
     cf2:	32 c0       	rjmp	.+100    	; 0xd58 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     cf4:	ed ee       	ldi	r30, 0xED	; 237
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	82 95       	swap	r24
     cfc:	80 7f       	andi	r24, 0xF0	; 240
     cfe:	80 83       	st	Z, r24

		CANSTMOB = 0;
     d00:	ee ee       	ldi	r30, 0xEE	; 238
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	10 82       	st	Z, r1
		CANCDMOB = 0;
     d06:	ef ee       	ldi	r30, 0xEF	; 239
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1

		CANIDT1 = 0;
     d0c:	e3 ef       	ldi	r30, 0xF3	; 243
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	10 82       	st	Z, r1
		CANIDT2 = 0;
     d12:	e2 ef       	ldi	r30, 0xF2	; 242
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	10 82       	st	Z, r1
		CANIDT3 = 0;
     d18:	e1 ef       	ldi	r30, 0xF1	; 241
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	10 82       	st	Z, r1
		CANIDT4 = 0;
     d1e:	e0 ef       	ldi	r30, 0xF0	; 240
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	10 82       	st	Z, r1
		CANIDM1 = 0;
     d24:	e7 ef       	ldi	r30, 0xF7	; 247
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1
		CANIDM2 = 0;
     d2a:	e6 ef       	ldi	r30, 0xF6	; 246
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	10 82       	st	Z, r1
		CANIDM3 = 0;
     d30:	e5 ef       	ldi	r30, 0xF5	; 245
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	10 82       	st	Z, r1
		CANIDM4 = 0;
     d36:	e4 ef       	ldi	r30, 0xF4	; 244
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <CAN_InitModule+0x6e>
			CANMSG = 0;
     d40:	ea ef       	ldi	r30, 0xFA	; 250
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	b8 f3       	brcs	.-18     	; 0xd40 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	8a 83       	std	Y+2, r24	; 0x02
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	8f 30       	cpi	r24, 0x0F	; 15
     d5c:	58 f2       	brcs	.-106    	; 0xcf4 <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     d5e:	e8 ed       	ldi	r30, 0xD8	; 216
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     d66:	e2 ee       	ldi	r30, 0xE2	; 226
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     d6e:	e3 ee       	ldi	r30, 0xE3	; 227
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	88 e0       	ldi	r24, 0x08	; 8
     d74:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     d76:	e4 ee       	ldi	r30, 0xE4	; 228
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8e e5       	ldi	r24, 0x5E	; 94
     d7c:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     d7e:	e5 ee       	ldi	r30, 0xE5	; 229
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     d84:	eb ed       	ldi	r30, 0xDB	; 219
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 eb       	ldi	r24, 0xB0	; 176
     d8a:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     d8c:	ef ed       	ldi	r30, 0xDF	; 223
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8f e7       	ldi	r24, 0x7F	; 127
     d92:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     d94:	ee ed       	ldi	r30, 0xDE	; 222
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	80 83       	st	Z, r24
	sei();
     d9c:	78 94       	sei
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <CAN_InitRxMob+0x6>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <CAN_InitRxMob+0x8>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9c 83       	std	Y+4, r25	; 0x04
     db8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     dba:	ed ee       	ldi	r30, 0xED	; 237
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     dc2:	e9 ed       	ldi	r30, 0xD9	; 217
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	88 23       	and	r24, r24
     dd6:	a9 f7       	brne	.-22     	; 0xdc2 <CAN_InitRxMob+0x1a>
     dd8:	e9 ed       	ldi	r30, 0xD9	; 217
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	86 95       	lsr	r24
     de0:	86 95       	lsr	r24
     de2:	86 95       	lsr	r24
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	81 70       	andi	r24, 0x01	; 1
     dea:	90 70       	andi	r25, 0x00	; 0
     dec:	88 23       	and	r24, r24
     dee:	49 f7       	brne	.-46     	; 0xdc2 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     df0:	1a 82       	std	Y+2, r1	; 0x02
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     df4:	ed ee       	ldi	r30, 0xED	; 237
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	82 95       	swap	r24
     dfc:	80 7f       	andi	r24, 0xF0	; 240
     dfe:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     e00:	ef ee       	ldi	r30, 0xEF	; 239
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 95       	swap	r24
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	83 70       	andi	r24, 0x03	; 3
     e0e:	88 23       	and	r24, r24
     e10:	69 f5       	brne	.+90     	; 0xe6c <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     e12:	ef ee       	ldi	r30, 0xEF	; 239
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	8f e0       	ldi	r24, 0x0F	; 15
     e18:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     e1a:	e3 ef       	ldi	r30, 0xF3	; 243
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	90 70       	andi	r25, 0x00	; 0
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	96 95       	lsr	r25
     e2a:	87 95       	ror	r24
     e2c:	96 95       	lsr	r25
     e2e:	87 95       	ror	r24
     e30:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     e32:	e2 ef       	ldi	r30, 0xF2	; 242
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	82 95       	swap	r24
     e3a:	88 0f       	add	r24, r24
     e3c:	80 7e       	andi	r24, 0xE0	; 224
     e3e:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     e40:	e6 ef       	ldi	r30, 0xF6	; 246
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 ee       	ldi	r24, 0xE0	; 224
     e46:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     e48:	e7 ef       	ldi	r30, 0xF7	; 247
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     e50:	af ee       	ldi	r26, 0xEF	; 239
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef ee       	ldi	r30, 0xEF	; 239
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     e5e:	ed ee       	ldi	r30, 0xED	; 237
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	80 83       	st	Z, r24

		return 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	8f 30       	cpi	r24, 0x0F	; 15
     e76:	08 f4       	brcc	.+2      	; 0xe7a <CAN_InitRxMob+0xd2>
     e78:	bd cf       	rjmp	.-134    	; 0xdf4 <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     e7a:	ed ee       	ldi	r30, 0xED	; 237
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	80 83       	st	Z, r24

	return 0;
     e82:	1d 82       	std	Y+5, r1	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <CAN_Init+0xa>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     ea6:	1b df       	rcall	.-458    	; 0xcde <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     ea8:	19 82       	std	Y+1, r1	; 0x01
     eaa:	36 c0       	rjmp	.+108    	; 0xf18 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	79 df       	rcall	.-270    	; 0xda8 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	8c 01       	movw	r16, r24
     ec2:	06 52       	subi	r16, 0x26	; 38
     ec4:	1e 4f       	sbci	r17, 0xFE	; 254
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 c2 24 	call	0x4984	; 0x4984 <calloc>
     ed2:	f8 01       	movw	r30, r16
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	48 2f       	mov	r20, r24
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	ee 5f       	subi	r30, 0xFE	; 254
     eee:	fd 4f       	sbci	r31, 0xFD	; 253
     ef0:	10 82       	st	Z, r1
     ef2:	fc 01       	movw	r30, r24
     ef4:	ee 5f       	subi	r30, 0xFE	; 254
     ef6:	fd 4f       	sbci	r31, 0xFD	; 253
     ef8:	80 81       	ld	r24, Z
     efa:	f9 01       	movw	r30, r18
     efc:	e8 50       	subi	r30, 0x08	; 8
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	80 83       	st	Z, r24
     f02:	f9 01       	movw	r30, r18
     f04:	e8 50       	subi	r30, 0x08	; 8
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	fa 01       	movw	r30, r20
     f0c:	e2 51       	subi	r30, 0x12	; 18
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	99 81       	ldd	r25, Y+1	; 0x01
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	98 17       	cp	r25, r24
     f1e:	30 f2       	brcs	.-116    	; 0xeac <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <CAN_Read+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <CAN_Read+0x8>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	fc 01       	movw	r30, r24
     f52:	ee 5f       	subi	r30, 0xFE	; 254
     f54:	fd 4f       	sbci	r31, 0xFD	; 253
     f56:	80 81       	ld	r24, Z
     f58:	88 23       	and	r24, r24
     f5a:	b1 f3       	breq	.-20     	; 0xf48 <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	30 c0       	rjmp	.+96     	; 0xfc0 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	dc 01       	movw	r26, r24
     f6c:	a2 0f       	add	r26, r18
     f6e:	b3 1f       	adc	r27, r19
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	82 1b       	sub	r24, r18
     f7c:	93 0b       	sbc	r25, r19
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	90 95       	com	r25
     f84:	81 95       	neg	r24
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	fc 01       	movw	r30, r24
     f8a:	e6 52       	subi	r30, 0x26	; 38
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	40 81       	ld	r20, Z
     f90:	51 81       	ldd	r21, Z+1	; 0x01
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	fc 01       	movw	r30, r24
     f9c:	e8 50       	subi	r30, 0x08	; 8
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	80 81       	ld	r24, Z
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	82 0f       	add	r24, r18
     fae:	93 1f       	adc	r25, r19
     fb0:	fa 01       	movw	r30, r20
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	80 81       	ld	r24, Z
     fb8:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	88 30       	cpi	r24, 0x08	; 8
     fc4:	68 f2       	brcs	.-102    	; 0xf60 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	fc 01       	movw	r30, r24
     fd0:	e8 50       	subi	r30, 0x08	; 8
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	80 83       	st	Z, r24
     fda:	80 81       	ld	r24, Z
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	41 f4       	brne	.+16     	; 0xff0 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	fc 01       	movw	r30, r24
     fea:	e8 50       	subi	r30, 0x08	; 8
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9c 01       	movw	r18, r24
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	30 40       	sbci	r19, 0x00	; 0
     ffc:	f9 01       	movw	r30, r18
     ffe:	ee 5f       	subi	r30, 0xFE	; 254
    1000:	fd 4f       	sbci	r31, 0xFD	; 253
    1002:	80 81       	ld	r24, Z
    1004:	81 50       	subi	r24, 0x01	; 1
    1006:	f9 01       	movw	r30, r18
    1008:	ee 5f       	subi	r30, 0xFE	; 254
    100a:	fd 4f       	sbci	r31, 0xFD	; 253
    100c:	80 83       	st	Z, r24

	return 0;
    100e:	80 e0       	ldi	r24, 0x00	; 0
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	27 97       	sbiw	r28, 0x07	; 7
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	9d 83       	std	Y+5, r25	; 0x05
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1038:	e9 ed       	ldi	r30, 0xD9	; 217
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 95       	swap	r24
    1040:	8f 70       	andi	r24, 0x0F	; 15
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	88 23       	and	r24, r24
    104c:	a9 f7       	brne	.-22     	; 0x1038 <CAN_Write+0x1a>
    104e:	e9 ed       	ldi	r30, 0xD9	; 217
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	86 95       	lsr	r24
    1056:	86 95       	lsr	r24
    1058:	86 95       	lsr	r24
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	88 23       	and	r24, r24
    1064:	49 f7       	brne	.-46     	; 0x1038 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1066:	ed ee       	ldi	r30, 0xED	; 237
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    106e:	1a 82       	std	Y+2, r1	; 0x02
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
    1072:	ed ee       	ldi	r30, 0xED	; 237
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	82 95       	swap	r24
    107a:	80 7f       	andi	r24, 0xF0	; 240
    107c:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    107e:	ef ee       	ldi	r30, 0xEF	; 239
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	82 95       	swap	r24
    1086:	86 95       	lsr	r24
    1088:	86 95       	lsr	r24
    108a:	83 70       	andi	r24, 0x03	; 3
    108c:	88 23       	and	r24, r24
    108e:	31 f0       	breq	.+12     	; 0x109c <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	8f 30       	cpi	r24, 0x0F	; 15
    109a:	58 f3       	brcs	.-42     	; 0x1072 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8f 30       	cpi	r24, 0x0F	; 15
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <CAN_Write+0x8a>
		return -1;
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	8f 83       	std	Y+7, r24	; 0x07
    10a6:	32 c0       	rjmp	.+100    	; 0x110c <__stack+0xd>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    10a8:	e2 ef       	ldi	r30, 0xF2	; 242
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	82 95       	swap	r24
    10b0:	88 0f       	add	r24, r24
    10b2:	80 7e       	andi	r24, 0xE0	; 224
    10b4:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    10b6:	e3 ef       	ldi	r30, 0xF3	; 243
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	86 95       	lsr	r24
    10be:	86 95       	lsr	r24
    10c0:	86 95       	lsr	r24
    10c2:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    10c4:	ef ee       	ldi	r30, 0xEF	; 239
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	88 e0       	ldi	r24, 0x08	; 8
    10ca:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    10cc:	1b 82       	std	Y+3, r1	; 0x03
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <CAN_Write+0xd0>
		CANMSG = data[i];
    10d0:	aa ef       	ldi	r26, 0xFA	; 250
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 0f       	add	r30, r18
    10e2:	f3 1f       	adc	r31, r19
    10e4:	80 81       	ld	r24, Z
    10e6:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	70 f3       	brcs	.-36     	; 0x10d0 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    10f4:	af ee       	ldi	r26, 0xEF	; 239
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ef ee       	ldi	r30, 0xEF	; 239
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 64       	ori	r24, 0x40	; 64
    1100:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    1102:	ed ee       	ldi	r30, 0xED	; 237
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	80 83       	st	Z, r24

	return 0;
    110a:	1f 82       	std	Y+7, r1	; 0x07
    110c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    110e:	27 96       	adiw	r28, 0x07	; 7
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	2c 97       	sbiw	r28, 0x0c	; 12
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	89 87       	std	Y+9, r24	; 0x09
    1136:	6a 87       	std	Y+10, r22	; 0x0a
    1138:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    113a:	80 91 0a 01 	lds	r24, 0x010A
    113e:	90 91 0b 01 	lds	r25, 0x010B
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	06 97       	sbiw	r24, 0x06	; 6
    114c:	98 87       	std	Y+8, r25	; 0x08
    114e:	8f 83       	std	Y+7, r24	; 0x07
    1150:	14 c0       	rjmp	.+40     	; 0x117a <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    1152:	ef 81       	ldd	r30, Y+7	; 0x07
    1154:	f8 85       	ldd	r31, Y+8	; 0x08
    1156:	90 81       	ld	r25, Z
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	98 17       	cp	r25, r24
    115c:	19 f4       	brne	.+6      	; 0x1164 <gpio_register_pin+0x44>
            return 1;
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	2c 87       	std	Y+12, r18	; 0x0c
    1162:	c9 c0       	rjmp	.+402    	; 0x12f6 <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1164:	ef 81       	ldd	r30, Y+7	; 0x07
    1166:	f8 85       	ldd	r31, Y+8	; 0x08
    1168:	80 85       	ldd	r24, Z+8	; 0x08
    116a:	91 85       	ldd	r25, Z+9	; 0x09
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	06 97       	sbiw	r24, 0x06	; 6
    1176:	98 87       	std	Y+8, r25	; 0x08
    1178:	8f 83       	std	Y+7, r24	; 0x07
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	06 96       	adiw	r24, 0x06	; 6
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	92 07       	cpc	r25, r18
    1186:	29 f7       	brne	.-54     	; 0x1152 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	86 95       	lsr	r24
    118c:	86 95       	lsr	r24
    118e:	86 95       	lsr	r24
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	87 70       	andi	r24, 0x07	; 7
    1198:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    119a:	8a 85       	ldd	r24, Y+10	; 0x0a
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <gpio_register_pin+0x82>
    11a0:	48 c0       	rjmp	.+144    	; 0x1232 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	c9 01       	movw	r24, r18
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	82 0f       	add	r24, r18
    11b0:	93 1f       	adc	r25, r19
    11b2:	4e 96       	adiw	r24, 0x1e	; 30
    11b4:	dc 01       	movw	r26, r24
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	4e 96       	adiw	r24, 0x1e	; 30
    11c8:	fc 01       	movw	r30, r24
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <gpio_register_pin+0xbe>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	2a 95       	dec	r18
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <gpio_register_pin+0xba>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	c9 01       	movw	r24, r18
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	82 0f       	add	r24, r18
    11f4:	93 1f       	adc	r25, r19
    11f6:	4f 96       	adiw	r24, 0x1f	; 31
    11f8:	dc 01       	movw	r26, r24
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	c9 01       	movw	r24, r18
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	82 0f       	add	r24, r18
    1208:	93 1f       	adc	r25, r19
    120a:	4f 96       	adiw	r24, 0x1f	; 31
    120c:	fc 01       	movw	r30, r24
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <gpio_register_pin+0x104>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <gpio_register_pin+0x100>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
        return 0;
    122e:	1c 86       	std	Y+12, r1	; 0x0c
    1230:	62 c0       	rjmp	.+196    	; 0x12f6 <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	4e 96       	adiw	r24, 0x1e	; 30
    1244:	dc 01       	movw	r26, r24
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	c9 01       	movw	r24, r18
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	4e 96       	adiw	r24, 0x1e	; 30
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <gpio_register_pin+0x14e>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <gpio_register_pin+0x14a>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	c9 01       	movw	r24, r18
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	4f 96       	adiw	r24, 0x1f	; 31
    128a:	dc 01       	movw	r26, r24
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	c9 01       	movw	r24, r18
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	82 0f       	add	r24, r18
    129a:	93 1f       	adc	r25, r19
    129c:	4f 96       	adiw	r24, 0x1f	; 31
    129e:	fc 01       	movw	r30, r24
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <gpio_register_pin+0x194>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	2a 95       	dec	r18
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <gpio_register_pin+0x190>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <malloc>
    12c4:	98 87       	std	Y+8, r25	; 0x08
    12c6:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    12c8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ca:	98 85       	ldd	r25, Y+8	; 0x08
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <gpio_register_pin+0x1b6>
        return 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	8c 87       	std	Y+12, r24	; 0x0c
    12d4:	10 c0       	rjmp	.+32     	; 0x12f6 <gpio_register_pin+0x1d6>

    input->pin       = pin;
    12d6:	ef 81       	ldd	r30, Y+7	; 0x07
    12d8:	f8 85       	ldd	r31, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    12de:	ef 81       	ldd	r30, Y+7	; 0x07
    12e0:	f8 85       	ldd	r31, Y+8	; 0x08
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    12e6:	8f 81       	ldd	r24, Y+7	; 0x07
    12e8:	98 85       	ldd	r25, Y+8	; 0x08
    12ea:	06 96       	adiw	r24, 0x06	; 6
    12ec:	28 e0       	ldi	r18, 0x08	; 8
    12ee:	31 e0       	ldi	r19, 0x01	; 1
    12f0:	b9 01       	movw	r22, r18
    12f2:	0b d0       	rcall	.+22     	; 0x130a <list_add>

    return 0;
    12f4:	1c 86       	std	Y+12, r1	; 0x0c
    12f6:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    12f8:	2c 96       	adiw	r28, 0x0c	; 12
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <list_add+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <list_add+0x8>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	7c 83       	std	Y+4, r23	; 0x04
    131c:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	42 81       	ldd	r20, Z+2	; 0x02
    1324:	53 81       	ldd	r21, Z+3	; 0x03
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	b9 01       	movw	r22, r18
    1330:	07 d0       	rcall	.+14     	; 0x1340 <__list_add>
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <__list_add+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <__list_add+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <__list_add+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	7c 83       	std	Y+4, r23	; 0x04
    1354:	6b 83       	std	Y+3, r22	; 0x03
    1356:	5e 83       	std	Y+6, r21	; 0x06
    1358:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    135a:	ed 81       	ldd	r30, Y+5	; 0x05
    135c:	fe 81       	ldd	r31, Y+6	; 0x06
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
    new->next = next;
    1366:	e9 81       	ldd	r30, Y+1	; 0x01
    1368:	fa 81       	ldd	r31, Y+2	; 0x02
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	93 83       	std	Z+3, r25	; 0x03
    1370:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    prev->next = new;
    137e:	eb 81       	ldd	r30, Y+3	; 0x03
    1380:	fc 81       	ldd	r31, Y+4	; 0x04
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	93 83       	std	Z+3, r25	; 0x03
    1388:	82 83       	std	Z+2, r24	; 0x02
}
    138a:	26 96       	adiw	r28, 0x06	; 6
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <__gpio_read_pin+0x6>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	86 95       	lsr	r24
    13ae:	86 95       	lsr	r24
    13b0:	86 95       	lsr	r24
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	87 70       	andi	r24, 0x07	; 7
    13ba:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	c9 01       	movw	r24, r18
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	4d 96       	adiw	r24, 0x1d	; 29
    13ce:	fc 01       	movw	r30, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <__gpio_read_pin+0x4c>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <__gpio_read_pin+0x48>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	2b 97       	sbiw	r28, 0x0b	; 11
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1412:	80 91 0a 01 	lds	r24, 0x010A
    1416:	90 91 0b 01 	lds	r25, 0x010B
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	06 97       	sbiw	r24, 0x06	; 6
    1424:	98 87       	std	Y+8, r25	; 0x08
    1426:	8f 83       	std	Y+7, r24	; 0x07
    1428:	55 c0       	rjmp	.+170    	; 0x14d4 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    142a:	ef 81       	ldd	r30, Y+7	; 0x07
    142c:	f8 85       	ldd	r31, Y+8	; 0x08
    142e:	90 81       	ld	r25, Z
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	98 17       	cp	r25, r24
    1434:	09 f0       	breq	.+2      	; 0x1438 <gpio_read_pin+0x3c>
    1436:	43 c0       	rjmp	.+134    	; 0x14be <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    1438:	1c 82       	std	Y+4, r1	; 0x04
    143a:	21 c0       	rjmp	.+66     	; 0x147e <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	82 0f       	add	r24, r18
    1448:	93 1f       	adc	r25, r19
    144a:	fc 01       	movw	r30, r24
    144c:	32 96       	adiw	r30, 0x02	; 2
    144e:	40 81       	ld	r20, Z
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	8f 81       	ldd	r24, Y+7	; 0x07
    145e:	98 85       	ldd	r25, Y+8	; 0x08
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	fc 01       	movw	r30, r24
    1466:	32 96       	adiw	r30, 0x02	; 2
    1468:	80 81       	ld	r24, Z
    146a:	48 17       	cp	r20, r24
    146c:	29 f0       	breq	.+10     	; 0x1478 <gpio_read_pin+0x7c>
                    return input->previous_state;
    146e:	ef 81       	ldd	r30, Y+7	; 0x07
    1470:	f8 85       	ldd	r31, Y+8	; 0x08
    1472:	25 81       	ldd	r18, Z+5	; 0x05
    1474:	2b 87       	std	Y+11, r18	; 0x0b
    1476:	38 c0       	rjmp	.+112    	; 0x14e8 <gpio_read_pin+0xec>
                i++;
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	e0 f2       	brcs	.-72     	; 0x143c <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1484:	ef 81       	ldd	r30, Y+7	; 0x07
    1486:	f8 85       	ldd	r31, Y+8	; 0x08
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	89 27       	eor	r24, r25
    148e:	88 23       	and	r24, r24
    1490:	29 f0       	breq	.+10     	; 0x149c <gpio_read_pin+0xa0>
    1492:	ef 81       	ldd	r30, Y+7	; 0x07
    1494:	f8 85       	ldd	r31, Y+8	; 0x08
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	8a 87       	std	Y+10, r24	; 0x0a
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <gpio_read_pin+0xb0>
    149c:	ef 81       	ldd	r30, Y+7	; 0x07
    149e:	f8 85       	ldd	r31, Y+8	; 0x08
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	1a 86       	std	Y+10, r1	; 0x0a
    14a4:	88 23       	and	r24, r24
    14a6:	11 f4       	brne	.+4      	; 0x14ac <gpio_read_pin+0xb0>
    14a8:	21 e0       	ldi	r18, 0x01	; 1
    14aa:	2a 87       	std	Y+10, r18	; 0x0a
    14ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ae:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    14b0:	ef 81       	ldd	r30, Y+7	; 0x07
    14b2:	f8 85       	ldd	r31, Y+8	; 0x08
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	85 83       	std	Z+5, r24	; 0x05

            return state;
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	2b 87       	std	Y+11, r18	; 0x0b
    14bc:	15 c0       	rjmp	.+42     	; 0x14e8 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14be:	ef 81       	ldd	r30, Y+7	; 0x07
    14c0:	f8 85       	ldd	r31, Y+8	; 0x08
    14c2:	80 85       	ldd	r24, Z+8	; 0x08
    14c4:	91 85       	ldd	r25, Z+9	; 0x09
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	06 97       	sbiw	r24, 0x06	; 6
    14d0:	98 87       	std	Y+8, r25	; 0x08
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	06 96       	adiw	r24, 0x06	; 6
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	92 07       	cpc	r25, r18
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <gpio_read_pin+0xe8>
    14e2:	a3 cf       	rjmp	.-186    	; 0x142a <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    14ea:	2b 96       	adiw	r28, 0x0b	; 11
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <gpio_debouncer+0xa>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <gpio_debouncer+0xc>
    1508:	00 d0       	rcall	.+0      	; 0x150a <gpio_debouncer+0xe>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    150e:	80 91 0a 01 	lds	r24, 0x010A
    1512:	90 91 0b 01 	lds	r25, 0x010B
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	06 97       	sbiw	r24, 0x06	; 6
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	1b c0       	rjmp	.+54     	; 0x155c <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1526:	00 91 0c 02 	lds	r16, 0x020C
    152a:	10 91 0d 02 	lds	r17, 0x020D
    152e:	ed 81       	ldd	r30, Y+5	; 0x05
    1530:	fe 81       	ldd	r31, Y+6	; 0x06
    1532:	80 81       	ld	r24, Z
    1534:	33 df       	rcall	.-410    	; 0x139c <__gpio_read_pin>
    1536:	28 2f       	mov	r18, r24
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	80 0f       	add	r24, r16
    153e:	91 1f       	adc	r25, r17
    1540:	fc 01       	movw	r30, r24
    1542:	32 96       	adiw	r30, 0x02	; 2
    1544:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1546:	ed 81       	ldd	r30, Y+5	; 0x05
    1548:	fe 81       	ldd	r31, Y+6	; 0x06
    154a:	80 85       	ldd	r24, Z+8	; 0x08
    154c:	91 85       	ldd	r25, Z+9	; 0x09
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	06 97       	sbiw	r24, 0x06	; 6
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	06 96       	adiw	r24, 0x06	; 6
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	92 07       	cpc	r25, r18
    1568:	f1 f6       	brne	.-68     	; 0x1526 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    156a:	80 91 0c 02 	lds	r24, 0x020C
    156e:	90 91 0d 02 	lds	r25, 0x020D
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	90 93 0d 02 	sts	0x020D, r25
    1578:	80 93 0c 02 	sts	0x020C, r24
    157c:	80 91 0c 02 	lds	r24, 0x020C
    1580:	90 91 0d 02 	lds	r25, 0x020D
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	21 f4       	brne	.+8      	; 0x1592 <gpio_debouncer+0x96>
        count = 0;
    158a:	10 92 0d 02 	sts	0x020D, r1
    158e:	10 92 0c 02 	sts	0x020C, r1
	
}
    1592:	26 96       	adiw	r28, 0x06	; 6
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <grabbers_down_green>:


char grabbers_down_green(uint32_t start_time)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <grabbers_down_green+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <grabbers_down_green+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	69 83       	std	Y+1, r22	; 0x01
    15b6:	7a 83       	std	Y+2, r23	; 0x02
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_down();
    15bc:	ae d8       	rcall	.-3748   	; 0x71a <servo_set_grabbers_down>
	return 0;
    15be:	80 e0       	ldi	r24, 0x00	; 0
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <grabbers_up_green>:
char grabbers_up_green(uint32_t start_time)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <grabbers_up_green+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <grabbers_up_green+0x8>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	69 83       	std	Y+1, r22	; 0x01
    15dc:	7a 83       	std	Y+2, r23	; 0x02
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_up();
    15e2:	90 d8       	rcall	.-3808   	; 0x704 <servo_set_grabbers_up>
	return 0;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <greenside>:
	{{280,1750},90,BACKWARD,grabbers_up_green},					//POSITION 7			GOING INFRONT DOORS
	{{280,1910},20,FORWARD,NULL}									//POSITION 8			GOING INTO THE DOORS

};
void greenside(void)
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	c5 5a       	subi	r28, 0xA5	; 165
    1602:	d0 40       	sbci	r29, 0x00	; 0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    160e:	fe 01       	movw	r30, r28
    1610:	e2 56       	subi	r30, 0x62	; 98
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    1616:	fe 01       	movw	r30, r28
    1618:	e3 56       	subi	r30, 0x63	; 99
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    161e:	fe 01       	movw	r30, r28
    1620:	e5 56       	subi	r30, 0x65	; 101
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	80 83       	st	Z, r24
	
	starting_position.x		= 180;
    1628:	fe 01       	movw	r30, r28
    162a:	e1 56       	subi	r30, 0x61	; 97
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	84 eb       	ldi	r24, 0xB4	; 180
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
	starting_position.y		= 990;
    1636:	fe 01       	movw	r30, r28
    1638:	e1 56       	subi	r30, 0x61	; 97
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	8e ed       	ldi	r24, 0xDE	; 222
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	93 83       	std	Z+3, r25	; 0x03
    1642:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    1644:	fe 01       	movw	r30, r28
    1646:	e1 56       	subi	r30, 0x61	; 97
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	8a e5       	ldi	r24, 0x5A	; 90
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	95 83       	std	Z+5, r25	; 0x05
    1650:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    1652:	ce 01       	movw	r24, r28
    1654:	81 56       	subi	r24, 0x61	; 97
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    165c:	fe 01       	movw	r30, r28
    165e:	e5 56       	subi	r30, 0x65	; 101
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	99 27       	eor	r25, r25
    1666:	87 fd       	sbrc	r24, 7
    1668:	90 95       	com	r25
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	91 05       	cpc	r25, r1
    166e:	b1 f7       	brne	.-20     	; 0x165c <greenside+0x68>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1670:	fe 01       	movw	r30, r28
    1672:	e2 56       	subi	r30, 0x62	; 98
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	de 01       	movw	r26, r28
    1678:	a3 56       	subi	r26, 0x63	; 99
    167a:	bf 4f       	sbci	r27, 0xFF	; 255
    167c:	8c 91       	ld	r24, X
    167e:	80 83       	st	Z, r24
    1680:	5c c7       	rjmp	.+3768   	; 0x253a <greenside+0xf46>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_one_positions[current_position].point), green_tactic_one_positions[current_position].speed,
    1682:	fe 01       	movw	r30, r28
    1684:	e2 56       	subi	r30, 0x62	; 98
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	ca 01       	movw	r24, r20
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	9c 01       	movw	r18, r24
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	84 0f       	add	r24, r20
    16a4:	95 1f       	adc	r25, r21
    16a6:	8d 5e       	subi	r24, 0xED	; 237
    16a8:	9e 4f       	sbci	r25, 0xFE	; 254
    16aa:	bc 01       	movw	r22, r24
    16ac:	fe 01       	movw	r30, r28
    16ae:	e2 56       	subi	r30, 0x62	; 98
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	ca 01       	movw	r24, r20
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	9c 01       	movw	r18, r24
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	84 0f       	add	r24, r20
    16ce:	95 1f       	adc	r25, r21
    16d0:	fc 01       	movw	r30, r24
    16d2:	e6 5e       	subi	r30, 0xE6	; 230
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	a0 81       	ld	r26, Z
    16d8:	fe 01       	movw	r30, r28
    16da:	e2 56       	subi	r30, 0x62	; 98
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	ca 01       	movw	r24, r20
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	9c 01       	movw	r18, r24
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	84 0f       	add	r24, r20
    16fa:	95 1f       	adc	r25, r21
    16fc:	fc 01       	movw	r30, r24
    16fe:	e5 5e       	subi	r30, 0xE5	; 229
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	80 81       	ld	r24, Z
    1704:	b8 2f       	mov	r27, r24
    1706:	fe 01       	movw	r30, r28
    1708:	e2 56       	subi	r30, 0x62	; 98
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	ca 01       	movw	r24, r20
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	9c 01       	movw	r18, r24
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	82 0f       	add	r24, r18
    1724:	93 1f       	adc	r25, r19
    1726:	84 0f       	add	r24, r20
    1728:	95 1f       	adc	r25, r21
    172a:	fc 01       	movw	r30, r24
    172c:	e4 5e       	subi	r30, 0xE4	; 228
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	20 81       	ld	r18, Z
    1732:	31 81       	ldd	r19, Z+1	; 0x01
    1734:	cb 01       	movw	r24, r22
    1736:	6a 2f       	mov	r22, r26
    1738:	4b 2f       	mov	r20, r27
    173a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <odometry_move_to_position>
    173e:	fe 01       	movw	r30, r28
    1740:	e4 56       	subi	r30, 0x64	; 100
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 83       	st	Z, r24
					green_tactic_one_positions[current_position].direction,green_tactic_one_positions[current_position].callback);
		
					if(odometry_status == ODOMETRY_FAIL)
    1746:	fe 01       	movw	r30, r28
    1748:	e4 56       	subi	r30, 0x64	; 100
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	09 f4       	brne	.+2      	; 0x1754 <greenside+0x160>
    1752:	84 cf       	rjmp	.-248    	; 0x165c <greenside+0x68>
					{
						break;
					}
					else if(current_position == 1 || current_position == 3)
    1754:	fe 01       	movw	r30, r28
    1756:	e2 56       	subi	r30, 0x62	; 98
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	39 f0       	breq	.+14     	; 0x176e <greenside+0x17a>
    1760:	fe 01       	movw	r30, r28
    1762:	e2 56       	subi	r30, 0x62	; 98
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	09 f0       	breq	.+2      	; 0x176e <greenside+0x17a>
    176c:	b5 c0       	rjmp	.+362    	; 0x18d8 <greenside+0x2e4>
    176e:	fe 01       	movw	r30, r28
    1770:	e9 56       	subi	r30, 0x69	; 105
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	aa e7       	ldi	r26, 0x7A	; 122
    177a:	b4 e4       	ldi	r27, 0x44	; 68
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	8e 01       	movw	r16, r28
    1786:	0d 56       	subi	r16, 0x6D	; 109
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	e9 56       	subi	r30, 0x69	; 105
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e4       	ldi	r19, 0x40	; 64
    179c:	4c e1       	ldi	r20, 0x1C	; 28
    179e:	55 e4       	ldi	r21, 0x45	; 69
    17a0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	a2 83       	std	Z+2, r26	; 0x02
    17b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b2:	fe 01       	movw	r30, r28
    17b4:	ed 56       	subi	r30, 0x6D	; 109
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	44 f4       	brge	.+16     	; 0x17e0 <greenside+0x1ec>
		__ticks = 1;
    17d0:	fe 01       	movw	r30, r28
    17d2:	ef 56       	subi	r30, 0x6F	; 111
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	80 83       	st	Z, r24
    17de:	64 c0       	rjmp	.+200    	; 0x18a8 <greenside+0x2b4>
	else if (__tmp > 65535)
    17e0:	fe 01       	movw	r30, r28
    17e2:	ed 56       	subi	r30, 0x6D	; 109
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <greenside+0x20c>
    17fe:	43 c0       	rjmp	.+134    	; 0x1886 <greenside+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	fe 01       	movw	r30, r28
    1802:	e9 56       	subi	r30, 0x69	; 105
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8e 01       	movw	r16, r28
    1820:	0f 56       	subi	r16, 0x6F	; 111
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	f8 01       	movw	r30, r16
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <greenside+0x282>
    1838:	fe 01       	movw	r30, r28
    183a:	e1 57       	subi	r30, 0x71	; 113
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	8a ef       	ldi	r24, 0xFA	; 250
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
    1846:	fe 01       	movw	r30, r28
    1848:	e1 57       	subi	r30, 0x71	; 113
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <greenside+0x25c>
    1854:	fe 01       	movw	r30, r28
    1856:	e1 57       	subi	r30, 0x71	; 113
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	de 01       	movw	r26, r28
    1860:	af 56       	subi	r26, 0x6F	; 111
    1862:	bf 4f       	sbci	r27, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	ef 56       	subi	r30, 0x6F	; 111
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	11 96       	adiw	r26, 0x01	; 1
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	fe 01       	movw	r30, r28
    1878:	ef 56       	subi	r30, 0x6F	; 111
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	d1 f6       	brne	.-76     	; 0x1838 <greenside+0x244>
    1884:	51 c6       	rjmp	.+3234   	; 0x2528 <greenside+0xf34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	8e 01       	movw	r16, r28
    1888:	0f 56       	subi	r16, 0x6F	; 111
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	ed 56       	subi	r30, 0x6D	; 109
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	de 01       	movw	r26, r28
    18aa:	a3 57       	subi	r26, 0x73	; 115
    18ac:	bf 4f       	sbci	r27, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 56       	subi	r30, 0x6F	; 111
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	11 96       	adiw	r26, 0x01	; 1
    18ba:	9c 93       	st	X, r25
    18bc:	8e 93       	st	-X, r24
    18be:	fe 01       	movw	r30, r28
    18c0:	e3 57       	subi	r30, 0x73	; 115
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <greenside+0x2d4>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e3 57       	subi	r30, 0x73	; 115
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	28 c6       	rjmp	.+3152   	; 0x2528 <greenside+0xf34>
					{
						_delay_ms(1000);
			
					}
					else if(current_position == 6)
    18d8:	fe 01       	movw	r30, r28
    18da:	e2 56       	subi	r30, 0x62	; 98
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	86 30       	cpi	r24, 0x06	; 6
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <greenside+0x2f2>
    18e4:	e6 c2       	rjmp	.+1484   	; 0x1eb2 <greenside+0x8be>
					{
						servo_set_left_grabber_position(20);
    18e6:	84 e1       	ldi	r24, 0x14	; 20
    18e8:	0e 94 2f 03 	call	0x65e	; 0x65e <servo_set_left_grabber_position>
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 57       	subi	r30, 0x77	; 119
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a8 e4       	ldi	r26, 0x48	; 72
    18f8:	b4 e4       	ldi	r27, 0x44	; 68
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	8e 01       	movw	r16, r28
    1904:	0b 57       	subi	r16, 0x7B	; 123
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	fe 01       	movw	r30, r28
    190a:	e7 57       	subi	r30, 0x77	; 119
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e4       	ldi	r19, 0x40	; 64
    191a:	4c e1       	ldi	r20, 0x1C	; 28
    191c:	55 e4       	ldi	r21, 0x45	; 69
    191e:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	a2 83       	std	Z+2, r26	; 0x02
    192e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1930:	fe 01       	movw	r30, r28
    1932:	eb 57       	subi	r30, 0x7B	; 123
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    194a:	88 23       	and	r24, r24
    194c:	44 f4       	brge	.+16     	; 0x195e <greenside+0x36a>
		__ticks = 1;
    194e:	fe 01       	movw	r30, r28
    1950:	ed 57       	subi	r30, 0x7D	; 125
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
    195c:	64 c0       	rjmp	.+200    	; 0x1a26 <greenside+0x432>
	else if (__tmp > 65535)
    195e:	fe 01       	movw	r30, r28
    1960:	eb 57       	subi	r30, 0x7B	; 123
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    1978:	18 16       	cp	r1, r24
    197a:	0c f0       	brlt	.+2      	; 0x197e <greenside+0x38a>
    197c:	43 c0       	rjmp	.+134    	; 0x1a04 <greenside+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	fe 01       	movw	r30, r28
    1980:	e7 57       	subi	r30, 0x77	; 119
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8e 01       	movw	r16, r28
    199e:	0d 57       	subi	r16, 0x7D	; 125
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	f8 01       	movw	r30, r16
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	1f c0       	rjmp	.+62     	; 0x19f4 <greenside+0x400>
    19b6:	fe 01       	movw	r30, r28
    19b8:	ef 57       	subi	r30, 0x7F	; 127
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	8a ef       	ldi	r24, 0xFA	; 250
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	80 83       	st	Z, r24
    19c4:	fe 01       	movw	r30, r28
    19c6:	ef 57       	subi	r30, 0x7F	; 127
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <greenside+0x3da>
    19d2:	fe 01       	movw	r30, r28
    19d4:	ef 57       	subi	r30, 0x7F	; 127
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	de 01       	movw	r26, r28
    19de:	ad 57       	subi	r26, 0x7D	; 125
    19e0:	bf 4f       	sbci	r27, 0xFF	; 255
    19e2:	fe 01       	movw	r30, r28
    19e4:	ed 57       	subi	r30, 0x7D	; 125
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	11 96       	adiw	r26, 0x01	; 1
    19f0:	9c 93       	st	X, r25
    19f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	fe 01       	movw	r30, r28
    19f6:	ed 57       	subi	r30, 0x7D	; 125
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 81       	ld	r24, Z
    19fc:	91 81       	ldd	r25, Z+1	; 0x01
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	d1 f6       	brne	.-76     	; 0x19b6 <greenside+0x3c2>
    1a02:	27 c0       	rjmp	.+78     	; 0x1a52 <greenside+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a04:	8e 01       	movw	r16, r28
    1a06:	0d 57       	subi	r16, 0x7D	; 125
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	eb 57       	subi	r30, 0x7B	; 123
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	f8 01       	movw	r30, r16
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
    1a26:	de 01       	movw	r26, r28
    1a28:	a1 58       	subi	r26, 0x81	; 129
    1a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ed 57       	subi	r30, 0x7D	; 125
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	8d 93       	st	X+, r24
    1a38:	9c 93       	st	X, r25
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 58       	subi	r30, 0x81	; 129
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <greenside+0x450>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e1 58       	subi	r30, 0x81	; 129
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_rotate(-45,LOW_SPEED,NULL);
    1a52:	83 ed       	ldi	r24, 0xD3	; 211
    1a54:	9f ef       	ldi	r25, 0xFF	; 255
    1a56:	6e e1       	ldi	r22, 0x1E	; 30
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <odometry_rotate>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e5 58       	subi	r30, 0x85	; 133
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	aa ef       	ldi	r26, 0xFA	; 250
    1a6c:	b3 e4       	ldi	r27, 0x43	; 67
    1a6e:	80 83       	st	Z, r24
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	8e 01       	movw	r16, r28
    1a78:	09 58       	subi	r16, 0x89	; 137
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e5 58       	subi	r30, 0x85	; 133
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e4       	ldi	r19, 0x40	; 64
    1a8e:	4c e1       	ldi	r20, 0x1C	; 28
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	80 83       	st	Z, r24
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	a2 83       	std	Z+2, r26	; 0x02
    1aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e9 58       	subi	r30, 0x89	; 137
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	44 f4       	brge	.+16     	; 0x1ad2 <greenside+0x4de>
		__ticks = 1;
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	eb 58       	subi	r30, 0x8B	; 139
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	64 c0       	rjmp	.+200    	; 0x1b9a <greenside+0x5a6>
	else if (__tmp > 65535)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e9 58       	subi	r30, 0x89	; 137
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <greenside+0x4fe>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <greenside+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	fe 01       	movw	r30, r28
    1af4:	e5 58       	subi	r30, 0x85	; 133
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e 01       	movw	r16, r28
    1b12:	0b 58       	subi	r16, 0x8B	; 139
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	f8 01       	movw	r30, r16
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	1f c0       	rjmp	.+62     	; 0x1b68 <greenside+0x574>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ed 58       	subi	r30, 0x8D	; 141
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	8a ef       	ldi	r24, 0xFA	; 250
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 58       	subi	r30, 0x8D	; 141
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <greenside+0x54e>
    1b46:	fe 01       	movw	r30, r28
    1b48:	ed 58       	subi	r30, 0x8D	; 141
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	de 01       	movw	r26, r28
    1b52:	ab 58       	subi	r26, 0x8B	; 139
    1b54:	bf 4f       	sbci	r27, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	eb 58       	subi	r30, 0x8B	; 139
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	eb 58       	subi	r30, 0x8B	; 139
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	d1 f6       	brne	.-76     	; 0x1b2a <greenside+0x536>
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <greenside+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	0b 58       	subi	r16, 0x8B	; 139
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e9 58       	subi	r30, 0x89	; 137
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	de 01       	movw	r26, r28
    1b9c:	af 58       	subi	r26, 0x8F	; 143
    1b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	eb 58       	subi	r30, 0x8B	; 139
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	8d 93       	st	X+, r24
    1bac:	9c 93       	st	X, r25
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ef 58       	subi	r30, 0x8F	; 143
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <greenside+0x5c4>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 58       	subi	r30, 0x8F	; 143
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
						_delay_ms(500);
						servo_set_right_grabber_position(100);
    1bc6:	84 e6       	ldi	r24, 0x64	; 100
    1bc8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <servo_set_right_grabber_position>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e3 59       	subi	r30, 0x93	; 147
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a8 e4       	ldi	r26, 0x48	; 72
    1bd8:	b4 e4       	ldi	r27, 0x44	; 68
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	07 59       	subi	r16, 0x97	; 151
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	e3 59       	subi	r30, 0x93	; 147
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e4       	ldi	r19, 0x40	; 64
    1bfa:	4c e1       	ldi	r20, 0x1C	; 28
    1bfc:	55 e4       	ldi	r21, 0x45	; 69
    1bfe:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e7 59       	subi	r30, 0x97	; 151
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <greenside+0x64a>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e9 59       	subi	r30, 0x99	; 153
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <greenside+0x712>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 59       	subi	r30, 0x97	; 151
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <greenside+0x66a>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <greenside+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 59       	subi	r30, 0x93	; 147
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	09 59       	subi	r16, 0x99	; 153
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <greenside+0x6e0>
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 59       	subi	r30, 0x9B	; 155
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	8a ef       	ldi	r24, 0xFA	; 250
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	eb 59       	subi	r30, 0x9B	; 155
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <greenside+0x6ba>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	eb 59       	subi	r30, 0x9B	; 155
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a9 59       	subi	r26, 0x99	; 153
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e9 59       	subi	r30, 0x99	; 153
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e9 59       	subi	r30, 0x99	; 153
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <greenside+0x6a2>
    1ce2:	27 c0       	rjmp	.+78     	; 0x1d32 <greenside+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	09 59       	subi	r16, 0x99	; 153
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e7 59       	subi	r30, 0x97	; 151
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	ad 59       	subi	r26, 0x9D	; 157
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e9 59       	subi	r30, 0x99	; 153
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	8d 93       	st	X+, r24
    1d18:	9c 93       	st	X, r25
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 59       	subi	r30, 0x9D	; 157
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <greenside+0x730>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 59       	subi	r30, 0x9D	; 157
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_move_straight(-200,LOW_SPEED,NULL);
    1d32:	88 e3       	ldi	r24, 0x38	; 56
    1d34:	9f ef       	ldi	r25, 0xFF	; 255
    1d36:	6e e1       	ldi	r22, 0x1E	; 30
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	a0 d5       	rcall	.+2880   	; 0x287e <odometry_move_straight>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e1 5a       	subi	r30, 0xA1	; 161
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	aa ef       	ldi	r26, 0xFA	; 250
    1d4a:	b3 e4       	ldi	r27, 0x43	; 67
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	8e 01       	movw	r16, r28
    1d56:	05 5a       	subi	r16, 0xA5	; 165
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e1 5a       	subi	r30, 0xA1	; 161
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e4       	ldi	r19, 0x40	; 64
    1d6c:	4c e1       	ldi	r20, 0x1C	; 28
    1d6e:	55 e4       	ldi	r21, 0x45	; 69
    1d70:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5a       	subi	r30, 0xA5	; 165
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	44 f4       	brge	.+16     	; 0x1db0 <greenside+0x7bc>
		__ticks = 1;
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5a       	subi	r30, 0xA7	; 167
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	64 c0       	rjmp	.+200    	; 0x1e78 <greenside+0x884>
	else if (__tmp > 65535)
    1db0:	fe 01       	movw	r30, r28
    1db2:	e5 5a       	subi	r30, 0xA5	; 165
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <greenside+0x7dc>
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <greenside+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e1 5a       	subi	r30, 0xA1	; 161
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8e 01       	movw	r16, r28
    1df0:	07 5a       	subi	r16, 0xA7	; 167
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	f8 01       	movw	r30, r16
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	1f c0       	rjmp	.+62     	; 0x1e46 <greenside+0x852>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e9 5a       	subi	r30, 0xA9	; 169
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	8a ef       	ldi	r24, 0xFA	; 250
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    1e16:	fe 01       	movw	r30, r28
    1e18:	e9 5a       	subi	r30, 0xA9	; 169
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <greenside+0x82c>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 5a       	subi	r30, 0xA9	; 169
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	de 01       	movw	r26, r28
    1e30:	a7 5a       	subi	r26, 0xA7	; 167
    1e32:	bf 4f       	sbci	r27, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	e7 5a       	subi	r30, 0xA7	; 167
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	11 96       	adiw	r26, 0x01	; 1
    1e42:	9c 93       	st	X, r25
    1e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e7 5a       	subi	r30, 0xA7	; 167
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	d1 f6       	brne	.-76     	; 0x1e08 <greenside+0x814>
    1e54:	27 c0       	rjmp	.+78     	; 0x1ea4 <greenside+0x8b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	8e 01       	movw	r16, r28
    1e58:	07 5a       	subi	r16, 0xA7	; 167
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e5 5a       	subi	r30, 0xA5	; 165
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	f8 01       	movw	r30, r16
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	de 01       	movw	r26, r28
    1e7a:	ab 5a       	subi	r26, 0xAB	; 171
    1e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e7 5a       	subi	r30, 0xA7	; 167
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	8d 93       	st	X+, r24
    1e8a:	9c 93       	st	X, r25
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	eb 5a       	subi	r30, 0xAB	; 171
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <greenside+0x8a2>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	eb 5a       	subi	r30, 0xAB	; 171
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
						_delay_ms(500);
						odometry_set_angle(-90,LOW_SPEED,NULL);
    1ea4:	86 ea       	ldi	r24, 0xA6	; 166
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	6e e1       	ldi	r22, 0x1E	; 30
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	c9 d7       	rcall	.+3986   	; 0x2e42 <odometry_set_angle>
    1eb0:	3b c3       	rjmp	.+1654   	; 0x2528 <greenside+0xf34>
					
					}
					else if(current_position == 10 || current_position == 11)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e2 56       	subi	r30, 0x62	; 98
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	8a 30       	cpi	r24, 0x0A	; 10
    1ebc:	39 f0       	breq	.+14     	; 0x1ecc <greenside+0x8d8>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e2 56       	subi	r30, 0x62	; 98
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8b 30       	cpi	r24, 0x0B	; 11
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <greenside+0x8d8>
    1eca:	b5 c0       	rjmp	.+362    	; 0x2036 <greenside+0xa42>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ef 5a       	subi	r30, 0xAF	; 175
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	aa e7       	ldi	r26, 0x7A	; 122
    1ed8:	b4 e4       	ldi	r27, 0x44	; 68
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	03 5b       	subi	r16, 0xB3	; 179
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ef 5a       	subi	r30, 0xAF	; 175
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e4       	ldi	r19, 0x40	; 64
    1efa:	4c e1       	ldi	r20, 0x1C	; 28
    1efc:	55 e4       	ldi	r21, 0x45	; 69
    1efe:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e3 5b       	subi	r30, 0xB3	; 179
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	44 f4       	brge	.+16     	; 0x1f3e <greenside+0x94a>
		__ticks = 1;
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e5 5b       	subi	r30, 0xB5	; 181
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
    1f3c:	64 c0       	rjmp	.+200    	; 0x2006 <greenside+0xa12>
	else if (__tmp > 65535)
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e3 5b       	subi	r30, 0xB3	; 179
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	0c f0       	brlt	.+2      	; 0x1f5e <greenside+0x96a>
    1f5c:	43 c0       	rjmp	.+134    	; 0x1fe4 <greenside+0x9f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ef 5a       	subi	r30, 0xAF	; 175
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	05 5b       	subi	r16, 0xB5	; 181
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	f8 01       	movw	r30, r16
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	1f c0       	rjmp	.+62     	; 0x1fd4 <greenside+0x9e0>
    1f96:	fe 01       	movw	r30, r28
    1f98:	e7 5b       	subi	r30, 0xB7	; 183
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	8a ef       	ldi	r24, 0xFA	; 250
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e7 5b       	subi	r30, 0xB7	; 183
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <greenside+0x9ba>
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e7 5b       	subi	r30, 0xB7	; 183
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	de 01       	movw	r26, r28
    1fbe:	a5 5b       	subi	r26, 0xB5	; 181
    1fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e5 5b       	subi	r30, 0xB5	; 181
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	11 96       	adiw	r26, 0x01	; 1
    1fd0:	9c 93       	st	X, r25
    1fd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5b       	subi	r30, 0xB5	; 181
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	d1 f6       	brne	.-76     	; 0x1f96 <greenside+0x9a2>
    1fe2:	a2 c2       	rjmp	.+1348   	; 0x2528 <greenside+0xf34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	8e 01       	movw	r16, r28
    1fe6:	05 5b       	subi	r16, 0xB5	; 181
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e3 5b       	subi	r30, 0xB3	; 179
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	de 01       	movw	r26, r28
    2008:	a9 5b       	subi	r26, 0xB9	; 185
    200a:	bf 4f       	sbci	r27, 0xFF	; 255
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5b       	subi	r30, 0xB5	; 181
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	9c 93       	st	X, r25
    201a:	8e 93       	st	-X, r24
    201c:	fe 01       	movw	r30, r28
    201e:	e9 5b       	subi	r30, 0xB9	; 185
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <greenside+0xa32>
    202a:	fe 01       	movw	r30, r28
    202c:	e9 5b       	subi	r30, 0xB9	; 185
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	79 c2       	rjmp	.+1266   	; 0x2528 <greenside+0xf34>
					{
						_delay_ms(1000);
					}
					else if(current_position == 8)
    2036:	fe 01       	movw	r30, r28
    2038:	e2 56       	subi	r30, 0x62	; 98
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	88 30       	cpi	r24, 0x08	; 8
    2040:	09 f0       	breq	.+2      	; 0x2044 <greenside+0xa50>
    2042:	72 c2       	rjmp	.+1252   	; 0x2528 <greenside+0xf34>
					{
						odometry_move_straight(-200,LOW_SPEED,NULL);
    2044:	88 e3       	ldi	r24, 0x38	; 56
    2046:	9f ef       	ldi	r25, 0xFF	; 255
    2048:	6e e1       	ldi	r22, 0x1E	; 30
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	17 d4       	rcall	.+2094   	; 0x287e <odometry_move_straight>
    2050:	fe 01       	movw	r30, r28
    2052:	ed 5b       	subi	r30, 0xBD	; 189
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a8 e4       	ldi	r26, 0x48	; 72
    205c:	b4 e4       	ldi	r27, 0x44	; 68
    205e:	80 83       	st	Z, r24
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	a2 83       	std	Z+2, r26	; 0x02
    2064:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	8e 01       	movw	r16, r28
    2068:	01 5c       	subi	r16, 0xC1	; 193
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	ed 5b       	subi	r30, 0xBD	; 189
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e4       	ldi	r19, 0x40	; 64
    207e:	4c e1       	ldi	r20, 0x1C	; 28
    2080:	55 e4       	ldi	r21, 0x45	; 69
    2082:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	f8 01       	movw	r30, r16
    208c:	80 83       	st	Z, r24
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	a2 83       	std	Z+2, r26	; 0x02
    2092:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2094:	fe 01       	movw	r30, r28
    2096:	ff 96       	adiw	r30, 0x3f	; 63
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <greenside+0xac6>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e af       	std	Y+62, r25	; 0x3e
    20b6:	8d af       	std	Y+61, r24	; 0x3d
    20b8:	46 c0       	rjmp	.+140    	; 0x2146 <greenside+0xb52>
	else if (__tmp > 65535)
    20ba:	fe 01       	movw	r30, r28
    20bc:	ff 96       	adiw	r30, 0x3f	; 63
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	64 f5       	brge	.+88     	; 0x212e <greenside+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	fe 01       	movw	r30, r28
    20d8:	ed 5b       	subi	r30, 0xBD	; 189
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e af       	std	Y+62, r25	; 0x3e
    2102:	8d af       	std	Y+61, r24	; 0x3d
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <greenside+0xb30>
    2106:	8a ef       	ldi	r24, 0xFA	; 250
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c af       	std	Y+60, r25	; 0x3c
    210c:	8b af       	std	Y+59, r24	; 0x3b
    210e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2110:	9c ad       	ldd	r25, Y+60	; 0x3c
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <greenside+0xb1e>
    2116:	9c af       	std	Y+60, r25	; 0x3c
    2118:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8d ad       	ldd	r24, Y+61	; 0x3d
    211c:	9e ad       	ldd	r25, Y+62	; 0x3e
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e af       	std	Y+62, r25	; 0x3e
    2122:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8d ad       	ldd	r24, Y+61	; 0x3d
    2126:	9e ad       	ldd	r25, Y+62	; 0x3e
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <greenside+0xb12>
    212c:	16 c0       	rjmp	.+44     	; 0x215a <greenside+0xb66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	fe 01       	movw	r30, r28
    2130:	ff 96       	adiw	r30, 0x3f	; 63
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e af       	std	Y+62, r25	; 0x3e
    2144:	8d af       	std	Y+61, r24	; 0x3d
    2146:	8d ad       	ldd	r24, Y+61	; 0x3d
    2148:	9e ad       	ldd	r25, Y+62	; 0x3e
    214a:	9a af       	std	Y+58, r25	; 0x3a
    214c:	89 af       	std	Y+57, r24	; 0x39
    214e:	89 ad       	ldd	r24, Y+57	; 0x39
    2150:	9a ad       	ldd	r25, Y+58	; 0x3a
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <greenside+0xb5e>
    2156:	9a af       	std	Y+58, r25	; 0x3a
    2158:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(800);
						odometry_rotate(90,LOW_SPEED,NULL);
    215a:	8a e5       	ldi	r24, 0x5A	; 90
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	6e e1       	ldi	r22, 0x1E	; 30
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	c5 d5       	rcall	.+2954   	; 0x2cf0 <odometry_rotate>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	aa ef       	ldi	r26, 0xFA	; 250
    216c:	b3 e4       	ldi	r27, 0x43	; 67
    216e:	8d ab       	std	Y+53, r24	; 0x35
    2170:	9e ab       	std	Y+54, r25	; 0x36
    2172:	af ab       	std	Y+55, r26	; 0x37
    2174:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6d a9       	ldd	r22, Y+53	; 0x35
    2178:	7e a9       	ldd	r23, Y+54	; 0x36
    217a:	8f a9       	ldd	r24, Y+55	; 0x37
    217c:	98 ad       	ldd	r25, Y+56	; 0x38
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e4       	ldi	r19, 0x40	; 64
    2182:	4c e1       	ldi	r20, 0x1C	; 28
    2184:	55 e4       	ldi	r21, 0x45	; 69
    2186:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	89 ab       	std	Y+49, r24	; 0x31
    2190:	9a ab       	std	Y+50, r25	; 0x32
    2192:	ab ab       	std	Y+51, r26	; 0x33
    2194:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2196:	69 a9       	ldd	r22, Y+49	; 0x31
    2198:	7a a9       	ldd	r23, Y+50	; 0x32
    219a:	8b a9       	ldd	r24, Y+51	; 0x33
    219c:	9c a9       	ldd	r25, Y+52	; 0x34
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <greenside+0xbc4>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <greenside+0xc42>
	else if (__tmp > 65535)
    21b8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ba:	7a a9       	ldd	r23, Y+50	; 0x32
    21bc:	8b a9       	ldd	r24, Y+51	; 0x33
    21be:	9c a9       	ldd	r25, Y+52	; 0x34
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <greenside+0xc2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6d a9       	ldd	r22, Y+53	; 0x35
    21d2:	7e a9       	ldd	r23, Y+54	; 0x36
    21d4:	8f a9       	ldd	r24, Y+55	; 0x37
    21d6:	98 ad       	ldd	r25, Y+56	; 0x38
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	98 ab       	std	Y+48, r25	; 0x30
    21f6:	8f a7       	std	Y+47, r24	; 0x2f
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <greenside+0xc24>
    21fa:	8a ef       	ldi	r24, 0xFA	; 250
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9e a7       	std	Y+46, r25	; 0x2e
    2200:	8d a7       	std	Y+45, r24	; 0x2d
    2202:	8d a5       	ldd	r24, Y+45	; 0x2d
    2204:	9e a5       	ldd	r25, Y+46	; 0x2e
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <greenside+0xc12>
    220a:	9e a7       	std	Y+46, r25	; 0x2e
    220c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2210:	98 a9       	ldd	r25, Y+48	; 0x30
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	98 ab       	std	Y+48, r25	; 0x30
    2216:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8f a5       	ldd	r24, Y+47	; 0x2f
    221a:	98 a9       	ldd	r25, Y+48	; 0x30
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <greenside+0xc06>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <greenside+0xc56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	69 a9       	ldd	r22, Y+49	; 0x31
    2224:	7a a9       	ldd	r23, Y+50	; 0x32
    2226:	8b a9       	ldd	r24, Y+51	; 0x33
    2228:	9c a9       	ldd	r25, Y+52	; 0x34
    222a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	98 ab       	std	Y+48, r25	; 0x30
    2234:	8f a7       	std	Y+47, r24	; 0x2f
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	9c a7       	std	Y+44, r25	; 0x2c
    223c:	8b a7       	std	Y+43, r24	; 0x2b
    223e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2240:	9c a5       	ldd	r25, Y+44	; 0x2c
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <greenside+0xc4e>
    2246:	9c a7       	std	Y+44, r25	; 0x2c
    2248:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						odometry_move_straight(300,LOW_SPEED,NULL);
    224a:	8c e2       	ldi	r24, 0x2C	; 44
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	6e e1       	ldi	r22, 0x1E	; 30
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	14 d3       	rcall	.+1576   	; 0x287e <odometry_move_straight>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a8 e4       	ldi	r26, 0x48	; 72
    225c:	b4 e4       	ldi	r27, 0x44	; 68
    225e:	8f a3       	std	Y+39, r24	; 0x27
    2260:	98 a7       	std	Y+40, r25	; 0x28
    2262:	a9 a7       	std	Y+41, r26	; 0x29
    2264:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6f a1       	ldd	r22, Y+39	; 0x27
    2268:	78 a5       	ldd	r23, Y+40	; 0x28
    226a:	89 a5       	ldd	r24, Y+41	; 0x29
    226c:	9a a5       	ldd	r25, Y+42	; 0x2a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e4       	ldi	r19, 0x40	; 64
    2272:	4c e1       	ldi	r20, 0x1C	; 28
    2274:	55 e4       	ldi	r21, 0x45	; 69
    2276:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8b a3       	std	Y+35, r24	; 0x23
    2280:	9c a3       	std	Y+36, r25	; 0x24
    2282:	ad a3       	std	Y+37, r26	; 0x25
    2284:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2286:	6b a1       	ldd	r22, Y+35	; 0x23
    2288:	7c a1       	ldd	r23, Y+36	; 0x24
    228a:	8d a1       	ldd	r24, Y+37	; 0x25
    228c:	9e a1       	ldd	r25, Y+38	; 0x26
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <greenside+0xcb4>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <greenside+0xd32>
	else if (__tmp > 65535)
    22a8:	6b a1       	ldd	r22, Y+35	; 0x23
    22aa:	7c a1       	ldd	r23, Y+36	; 0x24
    22ac:	8d a1       	ldd	r24, Y+37	; 0x25
    22ae:	9e a1       	ldd	r25, Y+38	; 0x26
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <greenside+0xd1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6f a1       	ldd	r22, Y+39	; 0x27
    22c2:	78 a5       	ldd	r23, Y+40	; 0x28
    22c4:	89 a5       	ldd	r24, Y+41	; 0x29
    22c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	89 a3       	std	Y+33, r24	; 0x21
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <greenside+0xd14>
    22ea:	8a ef       	ldi	r24, 0xFA	; 250
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	98 a3       	std	Y+32, r25	; 0x20
    22f0:	8f 8f       	std	Y+31, r24	; 0x1f
    22f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22f4:	98 a1       	ldd	r25, Y+32	; 0x20
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <greenside+0xd02>
    22fa:	98 a3       	std	Y+32, r25	; 0x20
    22fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2300:	9a a1       	ldd	r25, Y+34	; 0x22
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9a a3       	std	Y+34, r25	; 0x22
    2306:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	89 a1       	ldd	r24, Y+33	; 0x21
    230a:	9a a1       	ldd	r25, Y+34	; 0x22
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <greenside+0xcf6>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <greenside+0xd46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6b a1       	ldd	r22, Y+35	; 0x23
    2314:	7c a1       	ldd	r23, Y+36	; 0x24
    2316:	8d a1       	ldd	r24, Y+37	; 0x25
    2318:	9e a1       	ldd	r25, Y+38	; 0x26
    231a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9a a3       	std	Y+34, r25	; 0x22
    2324:	89 a3       	std	Y+33, r24	; 0x21
    2326:	89 a1       	ldd	r24, Y+33	; 0x21
    2328:	9a a1       	ldd	r25, Y+34	; 0x22
    232a:	9e 8f       	std	Y+30, r25	; 0x1e
    232c:	8d 8f       	std	Y+29, r24	; 0x1d
    232e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2330:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <greenside+0xd3e>
    2336:	9e 8f       	std	Y+30, r25	; 0x1e
    2338:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(800);
						odometry_rotate(-90,LOW_SPEED,NULL);
    233a:	86 ea       	ldi	r24, 0xA6	; 166
    233c:	9f ef       	ldi	r25, 0xFF	; 255
    233e:	6e e1       	ldi	r22, 0x1E	; 30
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	d5 d4       	rcall	.+2474   	; 0x2cf0 <odometry_rotate>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	aa ef       	ldi	r26, 0xFA	; 250
    234c:	b3 e4       	ldi	r27, 0x43	; 67
    234e:	89 8f       	std	Y+25, r24	; 0x19
    2350:	9a 8f       	std	Y+26, r25	; 0x1a
    2352:	ab 8f       	std	Y+27, r26	; 0x1b
    2354:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	69 8d       	ldd	r22, Y+25	; 0x19
    2358:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e4       	ldi	r19, 0x40	; 64
    2362:	4c e1       	ldi	r20, 0x1C	; 28
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8d 8b       	std	Y+21, r24	; 0x15
    2370:	9e 8b       	std	Y+22, r25	; 0x16
    2372:	af 8b       	std	Y+23, r26	; 0x17
    2374:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <greenside+0xda4>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <greenside+0xe22>
	else if (__tmp > 65535)
    2398:	6d 89       	ldd	r22, Y+21	; 0x15
    239a:	7e 89       	ldd	r23, Y+22	; 0x16
    239c:	8f 89       	ldd	r24, Y+23	; 0x17
    239e:	98 8d       	ldd	r25, Y+24	; 0x18
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <greenside+0xe0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	69 8d       	ldd	r22, Y+25	; 0x19
    23b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <greenside+0xe04>
    23da:	8a ef       	ldi	r24, 0xFA	; 250
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9a 8b       	std	Y+18, r25	; 0x12
    23e0:	89 8b       	std	Y+17, r24	; 0x11
    23e2:	89 89       	ldd	r24, Y+17	; 0x11
    23e4:	9a 89       	ldd	r25, Y+18	; 0x12
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <greenside+0xdf2>
    23ea:	9a 8b       	std	Y+18, r25	; 0x12
    23ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8b 89       	ldd	r24, Y+19	; 0x13
    23f0:	9c 89       	ldd	r25, Y+20	; 0x14
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9c 8b       	std	Y+20, r25	; 0x14
    23f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <greenside+0xde6>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <greenside+0xe36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9c 8b       	std	Y+20, r25	; 0x14
    2414:	8b 8b       	std	Y+19, r24	; 0x13
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	98 8b       	std	Y+16, r25	; 0x10
    241c:	8f 87       	std	Y+15, r24	; 0x0f
    241e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2420:	98 89       	ldd	r25, Y+16	; 0x10
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <greenside+0xe2e>
    2426:	98 8b       	std	Y+16, r25	; 0x10
    2428:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						odometry_move_straight(190,20,NULL);
    242a:	8e eb       	ldi	r24, 0xBE	; 190
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	64 e1       	ldi	r22, 0x14	; 20
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	24 d2       	rcall	.+1096   	; 0x287e <odometry_move_straight>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	aa e7       	ldi	r26, 0x7A	; 122
    243c:	b4 e4       	ldi	r27, 0x44	; 68
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e4       	ldi	r19, 0x40	; 64
    2452:	4c e1       	ldi	r20, 0x1C	; 28
    2454:	55 e4       	ldi	r21, 0x45	; 69
    2456:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <greenside+0xe94>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <greenside+0xf12>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <greenside+0xefe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <greenside+0xef4>
    24ca:	8a ef       	ldi	r24, 0xFA	; 250
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <greenside+0xee2>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <greenside+0xed6>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <greenside+0xf26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <greenside+0xf1e>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						odometry_move_straight(-150,20,NULL);
    251a:	8a e6       	ldi	r24, 0x6A	; 106
    251c:	9f ef       	ldi	r25, 0xFF	; 255
    251e:	64 e1       	ldi	r22, 0x14	; 20
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	ac d1       	rcall	.+856    	; 0x287e <odometry_move_straight>
    2526:	ff cf       	rjmp	.-2      	; 0x2526 <greenside+0xf32>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2528:	de 01       	movw	r26, r28
    252a:	a2 56       	subi	r26, 0x62	; 98
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e2 56       	subi	r30, 0x62	; 98
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	8f 5f       	subi	r24, 0xFF	; 255
    2538:	8c 93       	st	X, r24
    253a:	fe 01       	movw	r30, r28
    253c:	e2 56       	subi	r30, 0x62	; 98
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	89 30       	cpi	r24, 0x09	; 9
    2544:	08 f4       	brcc	.+2      	; 0x2548 <greenside+0xf54>
    2546:	9d c8       	rjmp	.-3782   	; 0x1682 <greenside+0x8e>
    2548:	89 c8       	rjmp	.-3822   	; 0x165c <greenside+0x68>

0000254a <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	67 97       	sbiw	r28, 0x17	; 23
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    2560:	90 91 0e 02 	lds	r25, 0x020E
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	89 17       	cp	r24, r25
    2568:	09 f4       	brne	.+2      	; 0x256c <odometry_set_speed+0x22>
    256a:	82 c0       	rjmp	.+260    	; 0x2670 <odometry_set_speed+0x126>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    256c:	86 e5       	ldi	r24, 0x56	; 86
    256e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    2570:	8f 89       	ldd	r24, Y+23	; 0x17
    2572:	88 8b       	std	Y+16, r24	; 0x10
    2574:	72 c0       	rjmp	.+228    	; 0x265a <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a8 e4       	ldi	r26, 0x48	; 72
    257c:	b2 e4       	ldi	r27, 0x42	; 66
    257e:	8b 87       	std	Y+11, r24	; 0x0b
    2580:	9c 87       	std	Y+12, r25	; 0x0c
    2582:	ad 87       	std	Y+13, r26	; 0x0d
    2584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e4       	ldi	r19, 0x40	; 64
    2592:	4c e1       	ldi	r20, 0x1C	; 28
    2594:	55 e4       	ldi	r21, 0x45	; 69
    2596:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8f 83       	std	Y+7, r24	; 0x07
    25a0:	98 87       	std	Y+8, r25	; 0x08
    25a2:	a9 87       	std	Y+9, r26	; 0x09
    25a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <odometry_set_speed+0x7e>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	8d 83       	std	Y+5, r24	; 0x05
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <odometry_set_speed+0xde>
    260a:	8a ef       	ldi	r24, 0xFA	; 250
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <odometry_set_speed+0xcc>
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <odometry_set_speed+0xc0>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	6f 81       	ldd	r22, Y+7	; 0x07
    2634:	78 85       	ldd	r23, Y+8	; 0x08
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	9a 85       	ldd	r25, Y+10	; 0x0a
    263a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <odometry_set_speed+0x108>
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	ce 01       	movw	r24, r28
    265c:	0f 96       	adiw	r24, 0x0f	; 15
    265e:	63 ec       	ldi	r22, 0xC3	; 195
    2660:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    2664:	88 23       	and	r24, r24
    2666:	09 f0       	breq	.+2      	; 0x266a <odometry_set_speed+0x120>
    2668:	86 cf       	rjmp	.-244    	; 0x2576 <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	80 93 0e 02 	sts	0x020E, r24
}
    2670:	67 96       	adiw	r28, 0x17	; 23
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <odometry_query_position>:

static void odometry_query_position(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	66 97       	sbiw	r28, 0x16	; 22
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    2696:	80 e5       	ldi	r24, 0x50	; 80
    2698:	8f 87       	std	Y+15, r24	; 0x0f
    269a:	72 c0       	rjmp	.+228    	; 0x2780 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a8 e4       	ldi	r26, 0x48	; 72
    26a2:	b2 e4       	ldi	r27, 0x42	; 66
    26a4:	8b 87       	std	Y+11, r24	; 0x0b
    26a6:	9c 87       	std	Y+12, r25	; 0x0c
    26a8:	ad 87       	std	Y+13, r26	; 0x0d
    26aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e4       	ldi	r19, 0x40	; 64
    26b8:	4c e1       	ldi	r20, 0x1C	; 28
    26ba:	55 e4       	ldi	r21, 0x45	; 69
    26bc:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8f 83       	std	Y+7, r24	; 0x07
    26c6:	98 87       	std	Y+8, r25	; 0x08
    26c8:	a9 87       	std	Y+9, r26	; 0x09
    26ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	2c f4       	brge	.+10     	; 0x26ee <odometry_query_position+0x6c>
		__ticks = 1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	3f c0       	rjmp	.+126    	; 0x276c <odometry_query_position+0xea>
	else if (__tmp > 65535)
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	3f ef       	ldi	r19, 0xFF	; 255
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	57 e4       	ldi	r21, 0x47	; 71
    26fe:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    2702:	18 16       	cp	r1, r24
    2704:	4c f5       	brge	.+82     	; 0x2758 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	6b 85       	ldd	r22, Y+11	; 0x0b
    2708:	7c 85       	ldd	r23, Y+12	; 0x0c
    270a:	8d 85       	ldd	r24, Y+13	; 0x0d
    270c:	9e 85       	ldd	r25, Y+14	; 0x0e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	0f c0       	rjmp	.+30     	; 0x274e <odometry_query_position+0xcc>
    2730:	8a ef       	ldi	r24, 0xFA	; 250
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <odometry_query_position+0xba>
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	69 f7       	brne	.-38     	; 0x2730 <odometry_query_position+0xae>
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <odometry_query_position+0xf6>
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	ce 01       	movw	r24, r28
    2782:	0f 96       	adiw	r24, 0x0f	; 15
    2784:	63 ec       	ldi	r22, 0xC3	; 195
    2786:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    278a:	88 23       	and	r24, r24
    278c:	09 f0       	breq	.+2      	; 0x2790 <odometry_query_position+0x10e>
    278e:	86 cf       	rjmp	.-244    	; 0x269c <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    2790:	ce 01       	movw	r24, r28
    2792:	0f 96       	adiw	r24, 0x0f	; 15
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	0e 94 97 07 	call	0xf2e	; 0xf2e <CAN_Read>
	//nije uso
	position.state = buffer[0];
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	80 93 12 01 	sts	0x0112, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    27a0:	88 89       	ldd	r24, Y+16	; 0x10
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	38 2f       	mov	r19, r24
    27a8:	22 27       	eor	r18, r18
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	82 2b       	or	r24, r18
    27b2:	93 2b       	or	r25, r19
    27b4:	90 93 0d 01 	sts	0x010D, r25
    27b8:	80 93 0c 01 	sts	0x010C, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    27bc:	8a 89       	ldd	r24, Y+18	; 0x12
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	38 2f       	mov	r19, r24
    27c4:	22 27       	eor	r18, r18
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	82 2b       	or	r24, r18
    27ce:	93 2b       	or	r25, r19
    27d0:	90 93 0f 01 	sts	0x010F, r25
    27d4:	80 93 0e 01 	sts	0x010E, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    27d8:	8c 89       	ldd	r24, Y+20	; 0x14
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	38 2f       	mov	r19, r24
    27e0:	22 27       	eor	r18, r18
    27e2:	8d 89       	ldd	r24, Y+21	; 0x15
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	82 2b       	or	r24, r18
    27ea:	93 2b       	or	r25, r19
    27ec:	90 93 11 01 	sts	0x0111, r25
    27f0:	80 93 10 01 	sts	0x0110, r24
}
    27f4:	66 96       	adiw	r28, 0x16	; 22
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	27 97       	sbiw	r28, 0x07	; 7
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    281e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <system_get_system_time>
    2822:	aa 27       	eor	r26, r26
    2824:	97 fd       	sbrc	r25, 7
    2826:	a0 95       	com	r26
    2828:	ba 2f       	mov	r27, r26
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	ab 83       	std	Y+3, r26	; 0x03
    2830:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    2832:	27 df       	rcall	.-434    	; 0x2682 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	71 f0       	breq	.+28     	; 0x2858 <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	ab 81       	ldd	r26, Y+3	; 0x03
    2842:	bc 81       	ldd	r27, Y+4	; 0x04
    2844:	ed 81       	ldd	r30, Y+5	; 0x05
    2846:	fe 81       	ldd	r31, Y+6	; 0x06
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	09 95       	icall
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	19 f4       	brne	.+6      	; 0x2858 <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	8f 83       	std	Y+7, r24	; 0x07
    2856:	09 c0       	rjmp	.+18     	; 0x286a <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    2858:	80 91 12 01 	lds	r24, 0x0112
    285c:	8d 34       	cpi	r24, 0x4D	; 77
    285e:	49 f3       	breq	.-46     	; 0x2832 <odometry_wait_until_done+0x2c>
    2860:	80 91 12 01 	lds	r24, 0x0112
    2864:	82 35       	cpi	r24, 0x52	; 82
    2866:	29 f3       	breq	.-54     	; 0x2832 <odometry_wait_until_done+0x2c>
	
	return ODOMETRY_SUCCESS;
    2868:	1f 82       	std	Y+7, r1	; 0x07
    286a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    286c:	27 96       	adiw	r28, 0x07	; 7
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	cf 91       	pop	r28
    287a:	df 91       	pop	r29
    287c:	08 95       	ret

0000287e <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	6b 97       	sbiw	r28, 0x1b	; 27
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	98 8f       	std	Y+24, r25	; 0x18
    2894:	8f 8b       	std	Y+23, r24	; 0x17
    2896:	69 8f       	std	Y+25, r22	; 0x19
    2898:	5b 8f       	std	Y+27, r21	; 0x1b
    289a:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    289c:	89 8d       	ldd	r24, Y+25	; 0x19
    289e:	55 de       	rcall	.-854    	; 0x254a <odometry_set_speed>
	distance *= -1;
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	90 95       	com	r25
    28a6:	81 95       	neg	r24
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	98 8f       	std	Y+24, r25	; 0x18
    28ac:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    28ae:	84 e4       	ldi	r24, 0x44	; 68
    28b0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	89 2f       	mov	r24, r25
    28b8:	99 0f       	add	r25, r25
    28ba:	99 0b       	sbc	r25, r25
    28bc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    28be:	8f 89       	ldd	r24, Y+23	; 0x17
    28c0:	89 8b       	std	Y+17, r24	; 0x11
    28c2:	72 c0       	rjmp	.+228    	; 0x29a8 <odometry_move_straight+0x12a>
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a8 e4       	ldi	r26, 0x48	; 72
    28ca:	b2 e4       	ldi	r27, 0x42	; 66
    28cc:	8b 87       	std	Y+11, r24	; 0x0b
    28ce:	9c 87       	std	Y+12, r25	; 0x0c
    28d0:	ad 87       	std	Y+13, r26	; 0x0d
    28d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28da:	9e 85       	ldd	r25, Y+14	; 0x0e
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e4       	ldi	r19, 0x40	; 64
    28e0:	4c e1       	ldi	r20, 0x1C	; 28
    28e2:	55 e4       	ldi	r21, 0x45	; 69
    28e4:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	8f 83       	std	Y+7, r24	; 0x07
    28ee:	98 87       	std	Y+8, r25	; 0x08
    28f0:	a9 87       	std	Y+9, r26	; 0x09
    28f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f4:	6f 81       	ldd	r22, Y+7	; 0x07
    28f6:	78 85       	ldd	r23, Y+8	; 0x08
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e8       	ldi	r20, 0x80	; 128
    2902:	5f e3       	ldi	r21, 0x3F	; 63
    2904:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    2908:	88 23       	and	r24, r24
    290a:	2c f4       	brge	.+10     	; 0x2916 <odometry_move_straight+0x98>
		__ticks = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9e 83       	std	Y+6, r25	; 0x06
    2912:	8d 83       	std	Y+5, r24	; 0x05
    2914:	3f c0       	rjmp	.+126    	; 0x2994 <odometry_move_straight+0x116>
	else if (__tmp > 65535)
    2916:	6f 81       	ldd	r22, Y+7	; 0x07
    2918:	78 85       	ldd	r23, Y+8	; 0x08
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	9a 85       	ldd	r25, Y+10	; 0x0a
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	3f ef       	ldi	r19, 0xFF	; 255
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	57 e4       	ldi	r21, 0x47	; 71
    2926:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    292a:	18 16       	cp	r1, r24
    292c:	4c f5       	brge	.+82     	; 0x2980 <odometry_move_straight+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2930:	7c 85       	ldd	r23, Y+12	; 0x0c
    2932:	8d 85       	ldd	r24, Y+13	; 0x0d
    2934:	9e 85       	ldd	r25, Y+14	; 0x0e
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e2       	ldi	r20, 0x20	; 32
    293c:	51 e4       	ldi	r21, 0x41	; 65
    293e:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	bc 01       	movw	r22, r24
    2948:	cd 01       	movw	r24, r26
    294a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <odometry_move_straight+0xf8>
    2958:	8a ef       	ldi	r24, 0xFA	; 250
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9c 83       	std	Y+4, r25	; 0x04
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	9c 81       	ldd	r25, Y+4	; 0x04
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <odometry_move_straight+0xe6>
    2968:	9c 83       	std	Y+4, r25	; 0x04
    296a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	9e 83       	std	Y+6, r25	; 0x06
    2974:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	69 f7       	brne	.-38     	; 0x2958 <odometry_move_straight+0xda>
    297e:	14 c0       	rjmp	.+40     	; 0x29a8 <odometry_move_straight+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	8d 81       	ldd	r24, Y+5	; 0x05
    2996:	9e 81       	ldd	r25, Y+6	; 0x06
    2998:	9a 83       	std	Y+2, r25	; 0x02
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <odometry_move_straight+0x122>
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	ce 01       	movw	r24, r28
    29aa:	0f 96       	adiw	r24, 0x0f	; 15
    29ac:	63 ec       	ldi	r22, 0xC3	; 195
    29ae:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    29b2:	88 23       	and	r24, r24
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <odometry_move_straight+0x13a>
    29b6:	86 cf       	rjmp	.-244    	; 0x28c4 <odometry_move_straight+0x46>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    29b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29bc:	24 df       	rcall	.-440    	; 0x2806 <odometry_wait_until_done>
}
    29be:	6b 96       	adiw	r28, 0x1b	; 27
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	6c 97       	sbiw	r28, 0x1c	; 28
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	98 8f       	std	Y+24, r25	; 0x18
    29e6:	8f 8b       	std	Y+23, r24	; 0x17
    29e8:	69 8f       	std	Y+25, r22	; 0x19
    29ea:	4a 8f       	std	Y+26, r20	; 0x1a
    29ec:	3c 8f       	std	Y+28, r19	; 0x1c
    29ee:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    29f0:	89 8d       	ldd	r24, Y+25	; 0x19
    29f2:	ab dd       	rcall	.-1194   	; 0x254a <odometry_set_speed>

	buffer[0] = 'G';
    29f4:	87 e4       	ldi	r24, 0x47	; 71
    29f6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    29f8:	ef 89       	ldd	r30, Y+23	; 0x17
    29fa:	f8 8d       	ldd	r31, Y+24	; 0x18
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	89 2f       	mov	r24, r25
    2a02:	99 0f       	add	r25, r25
    2a04:	99 0b       	sbc	r25, r25
    2a06:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2a08:	ef 89       	ldd	r30, Y+23	; 0x17
    2a0a:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    2a12:	ef 89       	ldd	r30, Y+23	; 0x17
    2a14:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	89 2f       	mov	r24, r25
    2a1c:	99 0f       	add	r25, r25
    2a1e:	99 0b       	sbc	r25, r25
    2a20:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2a22:	ef 89       	ldd	r30, Y+23	; 0x17
    2a24:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    2a2c:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    2a2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a30:	81 95       	neg	r24
    2a32:	8d 8b       	std	Y+21, r24	; 0x15
    2a34:	72 c0       	rjmp	.+228    	; 0x2b1a <odometry_move_to_position+0x14a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a8 e4       	ldi	r26, 0x48	; 72
    2a3c:	b2 e4       	ldi	r27, 0x42	; 66
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	ad 87       	std	Y+13, r26	; 0x0d
    2a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e4       	ldi	r19, 0x40	; 64
    2a52:	4c e1       	ldi	r20, 0x1C	; 28
    2a54:	55 e4       	ldi	r21, 0x45	; 69
    2a56:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8f 83       	std	Y+7, r24	; 0x07
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	a9 87       	std	Y+9, r26	; 0x09
    2a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <odometry_move_to_position+0xb8>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <odometry_move_to_position+0x136>
	else if (__tmp > 65535)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <odometry_move_to_position+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <odometry_move_to_position+0x118>
    2aca:	8a ef       	ldi	r24, 0xFA	; 250
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <odometry_move_to_position+0x106>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <odometry_move_to_position+0xfa>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <odometry_move_to_position+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <odometry_move_to_position+0x142>
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	0f 96       	adiw	r24, 0x0f	; 15
    2b1e:	63 ec       	ldi	r22, 0xC3	; 195
    2b20:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    2b24:	88 23       	and	r24, r24
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <odometry_move_to_position+0x15a>
    2b28:	86 cf       	rjmp	.-244    	; 0x2a36 <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	6b de       	rcall	.-810    	; 0x2806 <odometry_wait_until_done>
}
    2b30:	6c 96       	adiw	r28, 0x1c	; 28
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	69 97       	sbiw	r28, 0x19	; 25
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	99 8f       	std	Y+25, r25	; 0x19
    2b58:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    2b5a:	89 e4       	ldi	r24, 0x49	; 73
    2b5c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    2b5e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b60:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	89 2f       	mov	r24, r25
    2b68:	99 0f       	add	r25, r25
    2b6a:	99 0b       	sbc	r25, r25
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    2b6e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b70:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    2b78:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b7a:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	89 2f       	mov	r24, r25
    2b82:	99 0f       	add	r25, r25
    2b84:	99 0b       	sbc	r25, r25
    2b86:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    2b88:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b8a:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    2b92:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b94:	f9 8d       	ldd	r31, Y+25	; 0x19
    2b96:	84 81       	ldd	r24, Z+4	; 0x04
    2b98:	95 81       	ldd	r25, Z+5	; 0x05
    2b9a:	81 95       	neg	r24
    2b9c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    2b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba0:	99 27       	eor	r25, r25
    2ba2:	87 fd       	sbrc	r24, 7
    2ba4:	90 95       	com	r25
    2ba6:	89 2f       	mov	r24, r25
    2ba8:	99 0f       	add	r25, r25
    2baa:	99 0b       	sbc	r25, r25
    2bac:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    2bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb0:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    2bb2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bb4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	90 93 0d 01 	sts	0x010D, r25
    2bbe:	80 93 0c 01 	sts	0x010C, r24
	position.y	   = new_position->y;
    2bc2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bc4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	90 93 0f 01 	sts	0x010F, r25
    2bce:	80 93 0e 01 	sts	0x010E, r24
	position.angle = -1 * new_position->angle;
    2bd2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bd4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bd6:	84 81       	ldd	r24, Z+4	; 0x04
    2bd8:	95 81       	ldd	r25, Z+5	; 0x05
    2bda:	90 95       	com	r25
    2bdc:	81 95       	neg	r24
    2bde:	9f 4f       	sbci	r25, 0xFF	; 255
    2be0:	90 93 11 01 	sts	0x0111, r25
    2be4:	80 93 10 01 	sts	0x0110, r24
    2be8:	72 c0       	rjmp	.+228    	; 0x2cce <odometry_set_position+0x18c>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a8 e4       	ldi	r26, 0x48	; 72
    2bf0:	b2 e4       	ldi	r27, 0x42	; 66
    2bf2:	8b 87       	std	Y+11, r24	; 0x0b
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	ad 87       	std	Y+13, r26	; 0x0d
    2bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e4       	ldi	r19, 0x40	; 64
    2c06:	4c e1       	ldi	r20, 0x1C	; 28
    2c08:	55 e4       	ldi	r21, 0x45	; 69
    2c0a:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8f 83       	std	Y+7, r24	; 0x07
    2c14:	98 87       	std	Y+8, r25	; 0x08
    2c16:	a9 87       	std	Y+9, r26	; 0x09
    2c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <odometry_set_position+0xfa>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <odometry_set_position+0x178>
	else if (__tmp > 65535)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <odometry_set_position+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <odometry_set_position+0x15a>
    2c7e:	8a ef       	ldi	r24, 0xFA	; 250
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <odometry_set_position+0x148>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <odometry_set_position+0x13c>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <odometry_set_position+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <odometry_set_position+0x184>
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	ce 01       	movw	r24, r28
    2cd0:	40 96       	adiw	r24, 0x10	; 16
    2cd2:	63 ec       	ldi	r22, 0xC3	; 195
    2cd4:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f0       	breq	.+2      	; 0x2cde <odometry_set_position+0x19c>
    2cdc:	86 cf       	rjmp	.-244    	; 0x2bea <odometry_set_position+0xa8>
		_delay_ms(50);
}
    2cde:	69 96       	adiw	r28, 0x19	; 25
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	6b 97       	sbiw	r28, 0x1b	; 27
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	98 8f       	std	Y+24, r25	; 0x18
    2d06:	8f 8b       	std	Y+23, r24	; 0x17
    2d08:	69 8f       	std	Y+25, r22	; 0x19
    2d0a:	5b 8f       	std	Y+27, r21	; 0x1b
    2d0c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2d0e:	89 8d       	ldd	r24, Y+25	; 0x19
    2d10:	1c dc       	rcall	.-1992   	; 0x254a <odometry_set_speed>

	angle *= -1;
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	90 95       	com	r25
    2d18:	81 95       	neg	r24
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	98 8f       	std	Y+24, r25	; 0x18
    2d1e:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    2d20:	84 e5       	ldi	r24, 0x54	; 84
    2d22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	89 2f       	mov	r24, r25
    2d2a:	99 0f       	add	r25, r25
    2d2c:	99 0b       	sbc	r25, r25
    2d2e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2d30:	8f 89       	ldd	r24, Y+23	; 0x17
    2d32:	89 8b       	std	Y+17, r24	; 0x11
    2d34:	72 c0       	rjmp	.+228    	; 0x2e1a <odometry_rotate+0x12a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a8 e4       	ldi	r26, 0x48	; 72
    2d3c:	b2 e4       	ldi	r27, 0x42	; 66
    2d3e:	8b 87       	std	Y+11, r24	; 0x0b
    2d40:	9c 87       	std	Y+12, r25	; 0x0c
    2d42:	ad 87       	std	Y+13, r26	; 0x0d
    2d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e4       	ldi	r19, 0x40	; 64
    2d52:	4c e1       	ldi	r20, 0x1C	; 28
    2d54:	55 e4       	ldi	r21, 0x45	; 69
    2d56:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
    2d60:	98 87       	std	Y+8, r25	; 0x08
    2d62:	a9 87       	std	Y+9, r26	; 0x09
    2d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <odometry_rotate+0x98>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <odometry_rotate+0x116>
	else if (__tmp > 65535)
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <odometry_rotate+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <odometry_rotate+0xf8>
    2dca:	8a ef       	ldi	r24, 0xFA	; 250
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9c 83       	std	Y+4, r25	; 0x04
    2dd0:	8b 83       	std	Y+3, r24	; 0x03
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <odometry_rotate+0xe6>
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <odometry_rotate+0xda>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <odometry_rotate+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <odometry_rotate+0x122>
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	0f 96       	adiw	r24, 0x0f	; 15
    2e1e:	63 ec       	ldi	r22, 0xC3	; 195
    2e20:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    2e24:	88 23       	and	r24, r24
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <odometry_rotate+0x13a>
    2e28:	86 cf       	rjmp	.-244    	; 0x2d36 <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2e2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e2e:	eb dc       	rcall	.-1578   	; 0x2806 <odometry_wait_until_done>

}
    2e30:	6b 96       	adiw	r28, 0x1b	; 27
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <odometry_set_angle>:

uint8_t odometry_set_angle(int16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	6b 97       	sbiw	r28, 0x1b	; 27
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	98 8f       	std	Y+24, r25	; 0x18
    2e58:	8f 8b       	std	Y+23, r24	; 0x17
    2e5a:	69 8f       	std	Y+25, r22	; 0x19
    2e5c:	5b 8f       	std	Y+27, r21	; 0x1b
    2e5e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2e60:	89 8d       	ldd	r24, Y+25	; 0x19
    2e62:	73 db       	rcall	.-2330   	; 0x254a <odometry_set_speed>

	angle *= -1;
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	90 95       	com	r25
    2e6a:	81 95       	neg	r24
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	98 8f       	std	Y+24, r25	; 0x18
    2e70:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'A';
    2e72:	81 e4       	ldi	r24, 0x41	; 65
    2e74:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2e76:	8f 89       	ldd	r24, Y+23	; 0x17
    2e78:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7a:	89 2f       	mov	r24, r25
    2e7c:	99 0f       	add	r25, r25
    2e7e:	99 0b       	sbc	r25, r25
    2e80:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2e82:	8f 89       	ldd	r24, Y+23	; 0x17
    2e84:	89 8b       	std	Y+17, r24	; 0x11
    2e86:	72 c0       	rjmp	.+228    	; 0x2f6c <odometry_set_angle+0x12a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a8 e4       	ldi	r26, 0x48	; 72
    2e8e:	b2 e4       	ldi	r27, 0x42	; 66
    2e90:	8b 87       	std	Y+11, r24	; 0x0b
    2e92:	9c 87       	std	Y+12, r25	; 0x0c
    2e94:	ad 87       	std	Y+13, r26	; 0x0d
    2e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e4       	ldi	r19, 0x40	; 64
    2ea4:	4c e1       	ldi	r20, 0x1C	; 28
    2ea6:	55 e4       	ldi	r21, 0x45	; 69
    2ea8:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8f 83       	std	Y+7, r24	; 0x07
    2eb2:	98 87       	std	Y+8, r25	; 0x08
    2eb4:	a9 87       	std	Y+9, r26	; 0x09
    2eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <odometry_set_angle+0x98>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <odometry_set_angle+0x116>
	else if (__tmp > 65535)
    2eda:	6f 81       	ldd	r22, Y+7	; 0x07
    2edc:	78 85       	ldd	r23, Y+8	; 0x08
    2ede:	89 85       	ldd	r24, Y+9	; 0x09
    2ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <odometry_set_angle+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <odometry_set_angle+0xf8>
    2f1c:	8a ef       	ldi	r24, 0xFA	; 250
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <odometry_set_angle+0xe6>
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <odometry_set_angle+0xda>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <odometry_set_angle+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	6f 81       	ldd	r22, Y+7	; 0x07
    2f46:	78 85       	ldd	r23, Y+8	; 0x08
    2f48:	89 85       	ldd	r24, Y+9	; 0x09
    2f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <odometry_set_angle+0x122>
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	0f 96       	adiw	r24, 0x0f	; 15
    2f70:	63 ec       	ldi	r22, 0xC3	; 195
    2f72:	0e 94 0f 08 	call	0x101e	; 0x101e <CAN_Write>
    2f76:	88 23       	and	r24, r24
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <odometry_set_angle+0x13a>
    2f7a:	86 cf       	rjmp	.-244    	; 0x2e88 <odometry_set_angle+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2f7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f80:	42 dc       	rcall	.-1916   	; 0x2806 <odometry_wait_until_done>
}
    2f82:	6b 96       	adiw	r28, 0x1b	; 27
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <grabbers_down_purple>:


char grabbers_down_purple(uint32_t start_time)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <grabbers_down_purple+0x6>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <grabbers_down_purple+0x8>
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	69 83       	std	Y+1, r22	; 0x01
    2fa2:	7a 83       	std	Y+2, r23	; 0x02
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_down();
    2fa8:	0e 94 8d 03 	call	0x71a	; 0x71a <servo_set_grabbers_down>
	return 0;
    2fac:	80 e0       	ldi	r24, 0x00	; 0
}
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <grabbers_up_purple>:
char grabbers_up_purple(uint32_t start_time)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <grabbers_up_purple+0x6>
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <grabbers_up_purple+0x8>
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	69 83       	std	Y+1, r22	; 0x01
    2fca:	7a 83       	std	Y+2, r23	; 0x02
    2fcc:	8b 83       	std	Y+3, r24	; 0x03
    2fce:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_up();
    2fd0:	0e 94 82 03 	call	0x704	; 0x704 <servo_set_grabbers_up>
	return 0;
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <purpleside>:
	{{280,200},90,BACKWARD,grabbers_up_purple},					//POSITION 7			GOING INFRONT DOORS
	{{280,90},20,FORWARD,NULL}									//POSITION 8			GOING INTO THE DOORS

};
void purpleside(void)
{
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	c5 5a       	subi	r28, 0xA5	; 165
    2ff2:	d0 40       	sbci	r29, 0x00	; 0
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    2ffe:	fe 01       	movw	r30, r28
    3000:	e2 56       	subi	r30, 0x62	; 98
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    3006:	fe 01       	movw	r30, r28
    3008:	e3 56       	subi	r30, 0x63	; 99
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    300e:	fe 01       	movw	r30, r28
    3010:	e5 56       	subi	r30, 0x65	; 101
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	80 83       	st	Z, r24
	
	starting_position.x		= 180;
    3018:	fe 01       	movw	r30, r28
    301a:	e1 56       	subi	r30, 0x61	; 97
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	84 eb       	ldi	r24, 0xB4	; 180
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
	starting_position.y		= 1010;
    3026:	fe 01       	movw	r30, r28
    3028:	e1 56       	subi	r30, 0x61	; 97
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	82 ef       	ldi	r24, 0xF2	; 242
    302e:	93 e0       	ldi	r25, 0x03	; 3
    3030:	93 83       	std	Z+3, r25	; 0x03
    3032:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    3034:	fe 01       	movw	r30, r28
    3036:	e1 56       	subi	r30, 0x61	; 97
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	8a e5       	ldi	r24, 0x5A	; 90
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	95 83       	std	Z+5, r25	; 0x05
    3040:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    3042:	ce 01       	movw	r24, r28
    3044:	81 56       	subi	r24, 0x61	; 97
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	7c dd       	rcall	.-1288   	; 0x2b42 <odometry_set_position>
	
	while(1)
	{
		switch(active_state)
    304a:	fe 01       	movw	r30, r28
    304c:	e5 56       	subi	r30, 0x65	; 101
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	99 27       	eor	r25, r25
    3054:	87 fd       	sbrc	r24, 7
    3056:	90 95       	com	r25
    3058:	82 30       	cpi	r24, 0x02	; 2
    305a:	91 05       	cpc	r25, r1
    305c:	b1 f7       	brne	.-20     	; 0x304a <purpleside+0x66>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    305e:	fe 01       	movw	r30, r28
    3060:	e2 56       	subi	r30, 0x62	; 98
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	de 01       	movw	r26, r28
    3066:	a3 56       	subi	r26, 0x63	; 99
    3068:	bf 4f       	sbci	r27, 0xFF	; 255
    306a:	8c 91       	ld	r24, X
    306c:	80 83       	st	Z, r24
    306e:	38 c7       	rjmp	.+3696   	; 0x3ee0 <purpleside+0xefc>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    3070:	fe 01       	movw	r30, r28
    3072:	e2 56       	subi	r30, 0x62	; 98
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 81       	ld	r24, Z
    3078:	48 2f       	mov	r20, r24
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	ca 01       	movw	r24, r20
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	9c 01       	movw	r18, r24
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	82 0f       	add	r24, r18
    308e:	93 1f       	adc	r25, r19
    3090:	84 0f       	add	r24, r20
    3092:	95 1f       	adc	r25, r21
    3094:	8a 58       	subi	r24, 0x8A	; 138
    3096:	9e 4f       	sbci	r25, 0xFE	; 254
    3098:	bc 01       	movw	r22, r24
    309a:	fe 01       	movw	r30, r28
    309c:	e2 56       	subi	r30, 0x62	; 98
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	48 2f       	mov	r20, r24
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	ca 01       	movw	r24, r20
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	9c 01       	movw	r18, r24
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	82 0f       	add	r24, r18
    30b8:	93 1f       	adc	r25, r19
    30ba:	84 0f       	add	r24, r20
    30bc:	95 1f       	adc	r25, r21
    30be:	fc 01       	movw	r30, r24
    30c0:	e3 58       	subi	r30, 0x83	; 131
    30c2:	fe 4f       	sbci	r31, 0xFE	; 254
    30c4:	a0 81       	ld	r26, Z
    30c6:	fe 01       	movw	r30, r28
    30c8:	e2 56       	subi	r30, 0x62	; 98
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	48 2f       	mov	r20, r24
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	ca 01       	movw	r24, r20
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	9c 01       	movw	r18, r24
    30da:	22 0f       	add	r18, r18
    30dc:	33 1f       	adc	r19, r19
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	82 0f       	add	r24, r18
    30e4:	93 1f       	adc	r25, r19
    30e6:	84 0f       	add	r24, r20
    30e8:	95 1f       	adc	r25, r21
    30ea:	fc 01       	movw	r30, r24
    30ec:	e2 58       	subi	r30, 0x82	; 130
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	80 81       	ld	r24, Z
    30f2:	b8 2f       	mov	r27, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	e2 56       	subi	r30, 0x62	; 98
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	48 2f       	mov	r20, r24
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	ca 01       	movw	r24, r20
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	9c 01       	movw	r18, r24
    3108:	22 0f       	add	r18, r18
    310a:	33 1f       	adc	r19, r19
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	82 0f       	add	r24, r18
    3112:	93 1f       	adc	r25, r19
    3114:	84 0f       	add	r24, r20
    3116:	95 1f       	adc	r25, r21
    3118:	fc 01       	movw	r30, r24
    311a:	e1 58       	subi	r30, 0x81	; 129
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	20 81       	ld	r18, Z
    3120:	31 81       	ldd	r19, Z+1	; 0x01
    3122:	cb 01       	movw	r24, r22
    3124:	6a 2f       	mov	r22, r26
    3126:	4b 2f       	mov	r20, r27
    3128:	53 dc       	rcall	.-1882   	; 0x29d0 <odometry_move_to_position>
    312a:	fe 01       	movw	r30, r28
    312c:	e4 56       	subi	r30, 0x64	; 100
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 83       	st	Z, r24
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 

					if(odometry_status == ODOMETRY_FAIL)
    3132:	fe 01       	movw	r30, r28
    3134:	e4 56       	subi	r30, 0x64	; 100
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f4       	brne	.+2      	; 0x3140 <purpleside+0x15c>
    313e:	85 cf       	rjmp	.-246    	; 0x304a <purpleside+0x66>
					{
						break;
					}
					else if(current_position == 1 || current_position == 3)
    3140:	fe 01       	movw	r30, r28
    3142:	e2 56       	subi	r30, 0x62	; 98
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	39 f0       	breq	.+14     	; 0x315a <purpleside+0x176>
    314c:	fe 01       	movw	r30, r28
    314e:	e2 56       	subi	r30, 0x62	; 98
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	83 30       	cpi	r24, 0x03	; 3
    3156:	09 f0       	breq	.+2      	; 0x315a <purpleside+0x176>
    3158:	b5 c0       	rjmp	.+362    	; 0x32c4 <purpleside+0x2e0>
    315a:	fe 01       	movw	r30, r28
    315c:	e9 56       	subi	r30, 0x69	; 105
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	aa e7       	ldi	r26, 0x7A	; 122
    3166:	b4 e4       	ldi	r27, 0x44	; 68
    3168:	80 83       	st	Z, r24
    316a:	91 83       	std	Z+1, r25	; 0x01
    316c:	a2 83       	std	Z+2, r26	; 0x02
    316e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3170:	8e 01       	movw	r16, r28
    3172:	0d 56       	subi	r16, 0x6D	; 109
    3174:	1f 4f       	sbci	r17, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	e9 56       	subi	r30, 0x69	; 105
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e4       	ldi	r19, 0x40	; 64
    3188:	4c e1       	ldi	r20, 0x1C	; 28
    318a:	55 e4       	ldi	r21, 0x45	; 69
    318c:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	f8 01       	movw	r30, r16
    3196:	80 83       	st	Z, r24
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    319e:	fe 01       	movw	r30, r28
    31a0:	ed 56       	subi	r30, 0x6D	; 109
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	44 f4       	brge	.+16     	; 0x31cc <purpleside+0x1e8>
		__ticks = 1;
    31bc:	fe 01       	movw	r30, r28
    31be:	ef 56       	subi	r30, 0x6F	; 111
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
    31ca:	64 c0       	rjmp	.+200    	; 0x3294 <purpleside+0x2b0>
	else if (__tmp > 65535)
    31cc:	fe 01       	movw	r30, r28
    31ce:	ed 56       	subi	r30, 0x6D	; 109
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	3f ef       	ldi	r19, 0xFF	; 255
    31de:	4f e7       	ldi	r20, 0x7F	; 127
    31e0:	57 e4       	ldi	r21, 0x47	; 71
    31e2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    31e6:	18 16       	cp	r1, r24
    31e8:	0c f0       	brlt	.+2      	; 0x31ec <purpleside+0x208>
    31ea:	43 c0       	rjmp	.+134    	; 0x3272 <purpleside+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ec:	fe 01       	movw	r30, r28
    31ee:	e9 56       	subi	r30, 0x69	; 105
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	60 81       	ld	r22, Z
    31f4:	71 81       	ldd	r23, Z+1	; 0x01
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e2       	ldi	r20, 0x20	; 32
    3200:	51 e4       	ldi	r21, 0x41	; 65
    3202:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	8e 01       	movw	r16, r28
    320c:	0f 56       	subi	r16, 0x6F	; 111
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	bc 01       	movw	r22, r24
    3212:	cd 01       	movw	r24, r26
    3214:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	f8 01       	movw	r30, r16
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	1f c0       	rjmp	.+62     	; 0x3262 <purpleside+0x27e>
    3224:	fe 01       	movw	r30, r28
    3226:	e1 57       	subi	r30, 0x71	; 113
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	8a ef       	ldi	r24, 0xFA	; 250
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
    3232:	fe 01       	movw	r30, r28
    3234:	e1 57       	subi	r30, 0x71	; 113
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <purpleside+0x258>
    3240:	fe 01       	movw	r30, r28
    3242:	e1 57       	subi	r30, 0x71	; 113
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324a:	de 01       	movw	r26, r28
    324c:	af 56       	subi	r26, 0x6F	; 111
    324e:	bf 4f       	sbci	r27, 0xFF	; 255
    3250:	fe 01       	movw	r30, r28
    3252:	ef 56       	subi	r30, 0x6F	; 111
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	11 96       	adiw	r26, 0x01	; 1
    325e:	9c 93       	st	X, r25
    3260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3262:	fe 01       	movw	r30, r28
    3264:	ef 56       	subi	r30, 0x6F	; 111
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 81       	ld	r24, Z
    326a:	91 81       	ldd	r25, Z+1	; 0x01
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	d1 f6       	brne	.-76     	; 0x3224 <purpleside+0x240>
    3270:	2e c6       	rjmp	.+3164   	; 0x3ece <purpleside+0xeea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	8e 01       	movw	r16, r28
    3274:	0f 56       	subi	r16, 0x6F	; 111
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	ed 56       	subi	r30, 0x6D	; 109
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	f8 01       	movw	r30, r16
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    3294:	de 01       	movw	r26, r28
    3296:	a3 57       	subi	r26, 0x73	; 115
    3298:	bf 4f       	sbci	r27, 0xFF	; 255
    329a:	fe 01       	movw	r30, r28
    329c:	ef 56       	subi	r30, 0x6F	; 111
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	11 96       	adiw	r26, 0x01	; 1
    32a6:	9c 93       	st	X, r25
    32a8:	8e 93       	st	-X, r24
    32aa:	fe 01       	movw	r30, r28
    32ac:	e3 57       	subi	r30, 0x73	; 115
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <purpleside+0x2d0>
    32b8:	fe 01       	movw	r30, r28
    32ba:	e3 57       	subi	r30, 0x73	; 115
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
    32c2:	05 c6       	rjmp	.+3082   	; 0x3ece <purpleside+0xeea>
					{
						_delay_ms(1000);
					}
					else if(current_position == 6)
    32c4:	fe 01       	movw	r30, r28
    32c6:	e2 56       	subi	r30, 0x62	; 98
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	80 81       	ld	r24, Z
    32cc:	86 30       	cpi	r24, 0x06	; 6
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <purpleside+0x2ee>
    32d0:	e2 c2       	rjmp	.+1476   	; 0x3896 <purpleside+0x8b2>
					{
						servo_set_right_grabber_position(100);
    32d2:	84 e6       	ldi	r24, 0x64	; 100
    32d4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <servo_set_right_grabber_position>
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 57       	subi	r30, 0x77	; 119
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	a8 e4       	ldi	r26, 0x48	; 72
    32e4:	b4 e4       	ldi	r27, 0x44	; 68
    32e6:	80 83       	st	Z, r24
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	a2 83       	std	Z+2, r26	; 0x02
    32ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	8e 01       	movw	r16, r28
    32f0:	0b 57       	subi	r16, 0x7B	; 123
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	fe 01       	movw	r30, r28
    32f6:	e7 57       	subi	r30, 0x77	; 119
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e4       	ldi	r19, 0x40	; 64
    3306:	4c e1       	ldi	r20, 0x1C	; 28
    3308:	55 e4       	ldi	r21, 0x45	; 69
    330a:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	f8 01       	movw	r30, r16
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    331c:	fe 01       	movw	r30, r28
    331e:	eb 57       	subi	r30, 0x7B	; 123
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	5f e3       	ldi	r21, 0x3F	; 63
    3332:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    3336:	88 23       	and	r24, r24
    3338:	44 f4       	brge	.+16     	; 0x334a <purpleside+0x366>
		__ticks = 1;
    333a:	fe 01       	movw	r30, r28
    333c:	ed 57       	subi	r30, 0x7D	; 125
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	64 c0       	rjmp	.+200    	; 0x3412 <purpleside+0x42e>
	else if (__tmp > 65535)
    334a:	fe 01       	movw	r30, r28
    334c:	eb 57       	subi	r30, 0x7B	; 123
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    3364:	18 16       	cp	r1, r24
    3366:	0c f0       	brlt	.+2      	; 0x336a <purpleside+0x386>
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <purpleside+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	fe 01       	movw	r30, r28
    336c:	e7 57       	subi	r30, 0x77	; 119
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	8e 01       	movw	r16, r28
    338a:	0d 57       	subi	r16, 0x7D	; 125
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	1f c0       	rjmp	.+62     	; 0x33e0 <purpleside+0x3fc>
    33a2:	fe 01       	movw	r30, r28
    33a4:	ef 57       	subi	r30, 0x7F	; 127
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	8a ef       	ldi	r24, 0xFA	; 250
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
    33b0:	fe 01       	movw	r30, r28
    33b2:	ef 57       	subi	r30, 0x7F	; 127
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <purpleside+0x3d6>
    33be:	fe 01       	movw	r30, r28
    33c0:	ef 57       	subi	r30, 0x7F	; 127
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	de 01       	movw	r26, r28
    33ca:	ad 57       	subi	r26, 0x7D	; 125
    33cc:	bf 4f       	sbci	r27, 0xFF	; 255
    33ce:	fe 01       	movw	r30, r28
    33d0:	ed 57       	subi	r30, 0x7D	; 125
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	80 81       	ld	r24, Z
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	11 96       	adiw	r26, 0x01	; 1
    33dc:	9c 93       	st	X, r25
    33de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	fe 01       	movw	r30, r28
    33e2:	ed 57       	subi	r30, 0x7D	; 125
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	d1 f6       	brne	.-76     	; 0x33a2 <purpleside+0x3be>
    33ee:	27 c0       	rjmp	.+78     	; 0x343e <purpleside+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	8e 01       	movw	r16, r28
    33f2:	0d 57       	subi	r16, 0x7D	; 125
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	eb 57       	subi	r30, 0x7B	; 123
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	f8 01       	movw	r30, r16
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	de 01       	movw	r26, r28
    3414:	a1 58       	subi	r26, 0x81	; 129
    3416:	bf 4f       	sbci	r27, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	ed 57       	subi	r30, 0x7D	; 125
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	8d 93       	st	X+, r24
    3424:	9c 93       	st	X, r25
    3426:	fe 01       	movw	r30, r28
    3428:	e1 58       	subi	r30, 0x81	; 129
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <purpleside+0x44c>
    3434:	fe 01       	movw	r30, r28
    3436:	e1 58       	subi	r30, 0x81	; 129
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_rotate(45,LOW_SPEED,NULL);
    343e:	8d e2       	ldi	r24, 0x2D	; 45
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	6e e1       	ldi	r22, 0x1E	; 30
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	53 dc       	rcall	.-1882   	; 0x2cf0 <odometry_rotate>
    344a:	fe 01       	movw	r30, r28
    344c:	e5 58       	subi	r30, 0x85	; 133
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	aa ef       	ldi	r26, 0xFA	; 250
    3456:	b3 e4       	ldi	r27, 0x43	; 67
    3458:	80 83       	st	Z, r24
    345a:	91 83       	std	Z+1, r25	; 0x01
    345c:	a2 83       	std	Z+2, r26	; 0x02
    345e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3460:	8e 01       	movw	r16, r28
    3462:	09 58       	subi	r16, 0x89	; 137
    3464:	1f 4f       	sbci	r17, 0xFF	; 255
    3466:	fe 01       	movw	r30, r28
    3468:	e5 58       	subi	r30, 0x85	; 133
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e4       	ldi	r19, 0x40	; 64
    3478:	4c e1       	ldi	r20, 0x1C	; 28
    347a:	55 e4       	ldi	r21, 0x45	; 69
    347c:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	f8 01       	movw	r30, r16
    3486:	80 83       	st	Z, r24
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	a2 83       	std	Z+2, r26	; 0x02
    348c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    348e:	fe 01       	movw	r30, r28
    3490:	e9 58       	subi	r30, 0x89	; 137
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e8       	ldi	r20, 0x80	; 128
    34a2:	5f e3       	ldi	r21, 0x3F	; 63
    34a4:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    34a8:	88 23       	and	r24, r24
    34aa:	44 f4       	brge	.+16     	; 0x34bc <purpleside+0x4d8>
		__ticks = 1;
    34ac:	fe 01       	movw	r30, r28
    34ae:	eb 58       	subi	r30, 0x8B	; 139
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	64 c0       	rjmp	.+200    	; 0x3584 <purpleside+0x5a0>
	else if (__tmp > 65535)
    34bc:	fe 01       	movw	r30, r28
    34be:	e9 58       	subi	r30, 0x89	; 137
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	3f ef       	ldi	r19, 0xFF	; 255
    34ce:	4f e7       	ldi	r20, 0x7F	; 127
    34d0:	57 e4       	ldi	r21, 0x47	; 71
    34d2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    34d6:	18 16       	cp	r1, r24
    34d8:	0c f0       	brlt	.+2      	; 0x34dc <purpleside+0x4f8>
    34da:	43 c0       	rjmp	.+134    	; 0x3562 <purpleside+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34dc:	fe 01       	movw	r30, r28
    34de:	e5 58       	subi	r30, 0x85	; 133
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	8e 01       	movw	r16, r28
    34fc:	0b 58       	subi	r16, 0x8B	; 139
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	f8 01       	movw	r30, r16
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	1f c0       	rjmp	.+62     	; 0x3552 <purpleside+0x56e>
    3514:	fe 01       	movw	r30, r28
    3516:	ed 58       	subi	r30, 0x8D	; 141
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	8a ef       	ldi	r24, 0xFA	; 250
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
    3522:	fe 01       	movw	r30, r28
    3524:	ed 58       	subi	r30, 0x8D	; 141
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	f1 f7       	brne	.-4      	; 0x352c <purpleside+0x548>
    3530:	fe 01       	movw	r30, r28
    3532:	ed 58       	subi	r30, 0x8D	; 141
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353a:	de 01       	movw	r26, r28
    353c:	ab 58       	subi	r26, 0x8B	; 139
    353e:	bf 4f       	sbci	r27, 0xFF	; 255
    3540:	fe 01       	movw	r30, r28
    3542:	eb 58       	subi	r30, 0x8B	; 139
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 81       	ld	r24, Z
    3548:	91 81       	ldd	r25, Z+1	; 0x01
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	11 96       	adiw	r26, 0x01	; 1
    354e:	9c 93       	st	X, r25
    3550:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3552:	fe 01       	movw	r30, r28
    3554:	eb 58       	subi	r30, 0x8B	; 139
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 81       	ld	r24, Z
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	d1 f6       	brne	.-76     	; 0x3514 <purpleside+0x530>
    3560:	27 c0       	rjmp	.+78     	; 0x35b0 <purpleside+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	8e 01       	movw	r16, r28
    3564:	0b 58       	subi	r16, 0x8B	; 139
    3566:	1f 4f       	sbci	r17, 0xFF	; 255
    3568:	fe 01       	movw	r30, r28
    356a:	e9 58       	subi	r30, 0x89	; 137
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	f8 01       	movw	r30, r16
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	80 83       	st	Z, r24
    3584:	de 01       	movw	r26, r28
    3586:	af 58       	subi	r26, 0x8F	; 143
    3588:	bf 4f       	sbci	r27, 0xFF	; 255
    358a:	fe 01       	movw	r30, r28
    358c:	eb 58       	subi	r30, 0x8B	; 139
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	8d 93       	st	X+, r24
    3596:	9c 93       	st	X, r25
    3598:	fe 01       	movw	r30, r28
    359a:	ef 58       	subi	r30, 0x8F	; 143
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <purpleside+0x5be>
    35a6:	fe 01       	movw	r30, r28
    35a8:	ef 58       	subi	r30, 0x8F	; 143
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
						_delay_ms(500);
						servo_set_left_grabber_position(20);
    35b0:	84 e1       	ldi	r24, 0x14	; 20
    35b2:	0e 94 2f 03 	call	0x65e	; 0x65e <servo_set_left_grabber_position>
    35b6:	fe 01       	movw	r30, r28
    35b8:	e3 59       	subi	r30, 0x93	; 147
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a8 e4       	ldi	r26, 0x48	; 72
    35c2:	b4 e4       	ldi	r27, 0x44	; 68
    35c4:	80 83       	st	Z, r24
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	a2 83       	std	Z+2, r26	; 0x02
    35ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	8e 01       	movw	r16, r28
    35ce:	07 59       	subi	r16, 0x97	; 151
    35d0:	1f 4f       	sbci	r17, 0xFF	; 255
    35d2:	fe 01       	movw	r30, r28
    35d4:	e3 59       	subi	r30, 0x93	; 147
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e4       	ldi	r19, 0x40	; 64
    35e4:	4c e1       	ldi	r20, 0x1C	; 28
    35e6:	55 e4       	ldi	r21, 0x45	; 69
    35e8:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	f8 01       	movw	r30, r16
    35f2:	80 83       	st	Z, r24
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	a2 83       	std	Z+2, r26	; 0x02
    35f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35fa:	fe 01       	movw	r30, r28
    35fc:	e7 59       	subi	r30, 0x97	; 151
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e8       	ldi	r20, 0x80	; 128
    360e:	5f e3       	ldi	r21, 0x3F	; 63
    3610:	0e 94 0c 23 	call	0x4618	; 0x4618 <__cmpsf2>
    3614:	88 23       	and	r24, r24
    3616:	44 f4       	brge	.+16     	; 0x3628 <purpleside+0x644>
		__ticks = 1;
    3618:	fe 01       	movw	r30, r28
    361a:	e9 59       	subi	r30, 0x99	; 153
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
    3626:	64 c0       	rjmp	.+200    	; 0x36f0 <purpleside+0x70c>
	else if (__tmp > 65535)
    3628:	fe 01       	movw	r30, r28
    362a:	e7 59       	subi	r30, 0x97	; 151
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	93 81       	ldd	r25, Z+3	; 0x03
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    3642:	18 16       	cp	r1, r24
    3644:	0c f0       	brlt	.+2      	; 0x3648 <purpleside+0x664>
    3646:	43 c0       	rjmp	.+134    	; 0x36ce <purpleside+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3648:	fe 01       	movw	r30, r28
    364a:	e3 59       	subi	r30, 0x93	; 147
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 81       	ld	r22, Z
    3650:	71 81       	ldd	r23, Z+1	; 0x01
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	8e 01       	movw	r16, r28
    3668:	09 59       	subi	r16, 0x99	; 153
    366a:	1f 4f       	sbci	r17, 0xFF	; 255
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	f8 01       	movw	r30, r16
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	80 83       	st	Z, r24
    367e:	1f c0       	rjmp	.+62     	; 0x36be <purpleside+0x6da>
    3680:	fe 01       	movw	r30, r28
    3682:	eb 59       	subi	r30, 0x9B	; 155
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	8a ef       	ldi	r24, 0xFA	; 250
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
    368e:	fe 01       	movw	r30, r28
    3690:	eb 59       	subi	r30, 0x9B	; 155
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <purpleside+0x6b4>
    369c:	fe 01       	movw	r30, r28
    369e:	eb 59       	subi	r30, 0x9B	; 155
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	de 01       	movw	r26, r28
    36a8:	a9 59       	subi	r26, 0x99	; 153
    36aa:	bf 4f       	sbci	r27, 0xFF	; 255
    36ac:	fe 01       	movw	r30, r28
    36ae:	e9 59       	subi	r30, 0x99	; 153
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	11 96       	adiw	r26, 0x01	; 1
    36ba:	9c 93       	st	X, r25
    36bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36be:	fe 01       	movw	r30, r28
    36c0:	e9 59       	subi	r30, 0x99	; 153
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	d1 f6       	brne	.-76     	; 0x3680 <purpleside+0x69c>
    36cc:	27 c0       	rjmp	.+78     	; 0x371c <purpleside+0x738>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	8e 01       	movw	r16, r28
    36d0:	09 59       	subi	r16, 0x99	; 153
    36d2:	1f 4f       	sbci	r17, 0xFF	; 255
    36d4:	fe 01       	movw	r30, r28
    36d6:	e7 59       	subi	r30, 0x97	; 151
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	f8 01       	movw	r30, r16
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	de 01       	movw	r26, r28
    36f2:	ad 59       	subi	r26, 0x9D	; 157
    36f4:	bf 4f       	sbci	r27, 0xFF	; 255
    36f6:	fe 01       	movw	r30, r28
    36f8:	e9 59       	subi	r30, 0x99	; 153
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	8d 93       	st	X+, r24
    3702:	9c 93       	st	X, r25
    3704:	fe 01       	movw	r30, r28
    3706:	ed 59       	subi	r30, 0x9D	; 157
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <purpleside+0x72a>
    3712:	fe 01       	movw	r30, r28
    3714:	ed 59       	subi	r30, 0x9D	; 157
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	91 83       	std	Z+1, r25	; 0x01
    371a:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_move_straight(-200,LOW_SPEED,NULL);
    371c:	88 e3       	ldi	r24, 0x38	; 56
    371e:	9f ef       	ldi	r25, 0xFF	; 255
    3720:	6e e1       	ldi	r22, 0x1E	; 30
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	ab d8       	rcall	.-3754   	; 0x287e <odometry_move_straight>
    3728:	fe 01       	movw	r30, r28
    372a:	e1 5a       	subi	r30, 0xA1	; 161
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	aa ef       	ldi	r26, 0xFA	; 250
    3734:	b3 e4       	ldi	r27, 0x43	; 67
    3736:	80 83       	st	Z, r24
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	a2 83       	std	Z+2, r26	; 0x02
    373c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373e:	8e 01       	movw	r16, r28
    3740:	05 5a       	subi	r16, 0xA5	; 165
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	fe 01       	movw	r30, r28
    3746:	e1 5a       	subi	r30, 0xA1	; 161
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e4       	ldi	r19, 0x40	; 64
    3756:	4c e1       	ldi	r20, 0x1C	; 28
    3758:	55 e4       	ldi	r21, 0x45	; 69
    375a:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	f8 01       	movw	r30, r16
    3764:	80 83       	st	Z, r24
    3766:	91 83       	std	Z+1, r25	; 0x01
    3768:	a2 83       	std	Z+2, r26	; 0x02
    376a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    376c:	fe 01       	movw	r30, r28
    376e:	e5 5a       	subi	r30, 0xA5	; 165
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	4a d7       	rcall	.+3732   	; 0x4618 <__cmpsf2>
    3784:	88 23       	and	r24, r24
    3786:	44 f4       	brge	.+16     	; 0x3798 <purpleside+0x7b4>
		__ticks = 1;
    3788:	fe 01       	movw	r30, r28
    378a:	e7 5a       	subi	r30, 0xA7	; 167
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	91 83       	std	Z+1, r25	; 0x01
    3794:	80 83       	st	Z, r24
    3796:	62 c0       	rjmp	.+196    	; 0x385c <purpleside+0x878>
	else if (__tmp > 65535)
    3798:	fe 01       	movw	r30, r28
    379a:	e5 5a       	subi	r30, 0xA5	; 165
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__gesf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	0c f0       	brlt	.+2      	; 0x37b8 <purpleside+0x7d4>
    37b6:	42 c0       	rjmp	.+132    	; 0x383c <purpleside+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	fe 01       	movw	r30, r28
    37ba:	e1 5a       	subi	r30, 0xA1	; 161
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e2       	ldi	r20, 0x20	; 32
    37cc:	51 e4       	ldi	r21, 0x41	; 65
    37ce:	0e 94 5f 24 	call	0x48be	; 0x48be <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8e 01       	movw	r16, r28
    37d8:	07 5a       	subi	r16, 0xA7	; 167
    37da:	1f 4f       	sbci	r17, 0xFF	; 255
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	8c d7       	rcall	.+3864   	; 0x46fa <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	1f c0       	rjmp	.+62     	; 0x382c <purpleside+0x848>
    37ee:	fe 01       	movw	r30, r28
    37f0:	e9 5a       	subi	r30, 0xA9	; 169
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	8a ef       	ldi	r24, 0xFA	; 250
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
    37fc:	fe 01       	movw	r30, r28
    37fe:	e9 5a       	subi	r30, 0xA9	; 169
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <purpleside+0x822>
    380a:	fe 01       	movw	r30, r28
    380c:	e9 5a       	subi	r30, 0xA9	; 169
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	de 01       	movw	r26, r28
    3816:	a7 5a       	subi	r26, 0xA7	; 167
    3818:	bf 4f       	sbci	r27, 0xFF	; 255
    381a:	fe 01       	movw	r30, r28
    381c:	e7 5a       	subi	r30, 0xA7	; 167
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	11 96       	adiw	r26, 0x01	; 1
    3828:	9c 93       	st	X, r25
    382a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	fe 01       	movw	r30, r28
    382e:	e7 5a       	subi	r30, 0xA7	; 167
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	d1 f6       	brne	.-76     	; 0x37ee <purpleside+0x80a>
    383a:	26 c0       	rjmp	.+76     	; 0x3888 <purpleside+0x8a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383c:	8e 01       	movw	r16, r28
    383e:	07 5a       	subi	r16, 0xA7	; 167
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	fe 01       	movw	r30, r28
    3844:	e5 5a       	subi	r30, 0xA5	; 165
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	54 d7       	rcall	.+3752   	; 0x46fa <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	f8 01       	movw	r30, r16
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	80 83       	st	Z, r24
    385c:	de 01       	movw	r26, r28
    385e:	ab 5a       	subi	r26, 0xAB	; 171
    3860:	bf 4f       	sbci	r27, 0xFF	; 255
    3862:	fe 01       	movw	r30, r28
    3864:	e7 5a       	subi	r30, 0xA7	; 167
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 81       	ld	r24, Z
    386a:	91 81       	ldd	r25, Z+1	; 0x01
    386c:	8d 93       	st	X+, r24
    386e:	9c 93       	st	X, r25
    3870:	fe 01       	movw	r30, r28
    3872:	eb 5a       	subi	r30, 0xAB	; 171
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	91 81       	ldd	r25, Z+1	; 0x01
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <purpleside+0x896>
    387e:	fe 01       	movw	r30, r28
    3880:	eb 5a       	subi	r30, 0xAB	; 171
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
						_delay_ms(500);
						odometry_set_angle(90,LOW_SPEED,NULL);
    3888:	8a e5       	ldi	r24, 0x5A	; 90
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	6e e1       	ldi	r22, 0x1E	; 30
    388e:	40 e0       	ldi	r20, 0x00	; 0
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	d7 da       	rcall	.-2642   	; 0x2e42 <odometry_set_angle>
    3894:	1c c3       	rjmp	.+1592   	; 0x3ece <purpleside+0xeea>
						
					}
					else if(current_position == 10 || current_position == 11)
    3896:	fe 01       	movw	r30, r28
    3898:	e2 56       	subi	r30, 0x62	; 98
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	8a 30       	cpi	r24, 0x0A	; 10
    38a0:	39 f0       	breq	.+14     	; 0x38b0 <purpleside+0x8cc>
    38a2:	fe 01       	movw	r30, r28
    38a4:	e2 56       	subi	r30, 0x62	; 98
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	8b 30       	cpi	r24, 0x0B	; 11
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <purpleside+0x8cc>
    38ae:	af c0       	rjmp	.+350    	; 0x3a0e <purpleside+0xa2a>
    38b0:	fe 01       	movw	r30, r28
    38b2:	ef 5a       	subi	r30, 0xAF	; 175
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	aa e7       	ldi	r26, 0x7A	; 122
    38bc:	b4 e4       	ldi	r27, 0x44	; 68
    38be:	80 83       	st	Z, r24
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	a2 83       	std	Z+2, r26	; 0x02
    38c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c6:	8e 01       	movw	r16, r28
    38c8:	03 5b       	subi	r16, 0xB3	; 179
    38ca:	1f 4f       	sbci	r17, 0xFF	; 255
    38cc:	fe 01       	movw	r30, r28
    38ce:	ef 5a       	subi	r30, 0xAF	; 175
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e4       	ldi	r19, 0x40	; 64
    38de:	4c e1       	ldi	r20, 0x1C	; 28
    38e0:	55 e4       	ldi	r21, 0x45	; 69
    38e2:	ed d7       	rcall	.+4058   	; 0x48be <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	f8 01       	movw	r30, r16
    38ea:	80 83       	st	Z, r24
    38ec:	91 83       	std	Z+1, r25	; 0x01
    38ee:	a2 83       	std	Z+2, r26	; 0x02
    38f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38f2:	fe 01       	movw	r30, r28
    38f4:	e3 5b       	subi	r30, 0xB3	; 179
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	60 81       	ld	r22, Z
    38fa:	71 81       	ldd	r23, Z+1	; 0x01
    38fc:	82 81       	ldd	r24, Z+2	; 0x02
    38fe:	93 81       	ldd	r25, Z+3	; 0x03
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	40 e8       	ldi	r20, 0x80	; 128
    3906:	5f e3       	ldi	r21, 0x3F	; 63
    3908:	87 d6       	rcall	.+3342   	; 0x4618 <__cmpsf2>
    390a:	88 23       	and	r24, r24
    390c:	44 f4       	brge	.+16     	; 0x391e <purpleside+0x93a>
		__ticks = 1;
    390e:	fe 01       	movw	r30, r28
    3910:	e5 5b       	subi	r30, 0xB5	; 181
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
    391c:	60 c0       	rjmp	.+192    	; 0x39de <purpleside+0x9fa>
	else if (__tmp > 65535)
    391e:	fe 01       	movw	r30, r28
    3920:	e3 5b       	subi	r30, 0xB3	; 179
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	60 81       	ld	r22, Z
    3926:	71 81       	ldd	r23, Z+1	; 0x01
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	93 81       	ldd	r25, Z+3	; 0x03
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	c0 d7       	rcall	.+3968   	; 0x48b6 <__gesf2>
    3936:	18 16       	cp	r1, r24
    3938:	0c f0       	brlt	.+2      	; 0x393c <purpleside+0x958>
    393a:	41 c0       	rjmp	.+130    	; 0x39be <purpleside+0x9da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	fe 01       	movw	r30, r28
    393e:	ef 5a       	subi	r30, 0xAF	; 175
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	b5 d7       	rcall	.+3946   	; 0x48be <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	8e 01       	movw	r16, r28
    395a:	05 5b       	subi	r16, 0xB5	; 181
    395c:	1f 4f       	sbci	r17, 0xFF	; 255
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	cb d6       	rcall	.+3478   	; 0x46fa <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	f8 01       	movw	r30, r16
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
    396e:	1f c0       	rjmp	.+62     	; 0x39ae <purpleside+0x9ca>
    3970:	fe 01       	movw	r30, r28
    3972:	e7 5b       	subi	r30, 0xB7	; 183
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	8a ef       	ldi	r24, 0xFA	; 250
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	fe 01       	movw	r30, r28
    3980:	e7 5b       	subi	r30, 0xB7	; 183
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	80 81       	ld	r24, Z
    3986:	91 81       	ldd	r25, Z+1	; 0x01
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <purpleside+0x9a4>
    398c:	fe 01       	movw	r30, r28
    398e:	e7 5b       	subi	r30, 0xB7	; 183
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3996:	de 01       	movw	r26, r28
    3998:	a5 5b       	subi	r26, 0xB5	; 181
    399a:	bf 4f       	sbci	r27, 0xFF	; 255
    399c:	fe 01       	movw	r30, r28
    399e:	e5 5b       	subi	r30, 0xB5	; 181
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	11 96       	adiw	r26, 0x01	; 1
    39aa:	9c 93       	st	X, r25
    39ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ae:	fe 01       	movw	r30, r28
    39b0:	e5 5b       	subi	r30, 0xB5	; 181
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	80 81       	ld	r24, Z
    39b6:	91 81       	ldd	r25, Z+1	; 0x01
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	d1 f6       	brne	.-76     	; 0x3970 <purpleside+0x98c>
    39bc:	88 c2       	rjmp	.+1296   	; 0x3ece <purpleside+0xeea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39be:	8e 01       	movw	r16, r28
    39c0:	05 5b       	subi	r16, 0xB5	; 181
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
    39c4:	fe 01       	movw	r30, r28
    39c6:	e3 5b       	subi	r30, 0xB3	; 179
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	60 81       	ld	r22, Z
    39cc:	71 81       	ldd	r23, Z+1	; 0x01
    39ce:	82 81       	ldd	r24, Z+2	; 0x02
    39d0:	93 81       	ldd	r25, Z+3	; 0x03
    39d2:	93 d6       	rcall	.+3366   	; 0x46fa <__fixunssfsi>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	f8 01       	movw	r30, r16
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
    39de:	de 01       	movw	r26, r28
    39e0:	a9 5b       	subi	r26, 0xB9	; 185
    39e2:	bf 4f       	sbci	r27, 0xFF	; 255
    39e4:	fe 01       	movw	r30, r28
    39e6:	e5 5b       	subi	r30, 0xB5	; 181
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	11 96       	adiw	r26, 0x01	; 1
    39f0:	9c 93       	st	X, r25
    39f2:	8e 93       	st	-X, r24
    39f4:	fe 01       	movw	r30, r28
    39f6:	e9 5b       	subi	r30, 0xB9	; 185
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <purpleside+0xa1a>
    3a02:	fe 01       	movw	r30, r28
    3a04:	e9 5b       	subi	r30, 0xB9	; 185
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
    3a0c:	60 c2       	rjmp	.+1216   	; 0x3ece <purpleside+0xeea>
					{
						_delay_ms(1000);
					}
					else if(current_position == 8)
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e2 56       	subi	r30, 0x62	; 98
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	88 30       	cpi	r24, 0x08	; 8
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <purpleside+0xa38>
    3a1a:	59 c2       	rjmp	.+1202   	; 0x3ece <purpleside+0xeea>
					{
						odometry_move_straight(-200,LOW_SPEED,NULL);
    3a1c:	88 e3       	ldi	r24, 0x38	; 56
    3a1e:	9f ef       	ldi	r25, 0xFF	; 255
    3a20:	6e e1       	ldi	r22, 0x1E	; 30
    3a22:	40 e0       	ldi	r20, 0x00	; 0
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	0e 94 3f 14 	call	0x287e	; 0x287e <odometry_move_straight>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	ed 5b       	subi	r30, 0xBD	; 189
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	a8 e4       	ldi	r26, 0x48	; 72
    3a36:	b4 e4       	ldi	r27, 0x44	; 68
    3a38:	80 83       	st	Z, r24
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	a2 83       	std	Z+2, r26	; 0x02
    3a3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a40:	8e 01       	movw	r16, r28
    3a42:	01 5c       	subi	r16, 0xC1	; 193
    3a44:	1f 4f       	sbci	r17, 0xFF	; 255
    3a46:	fe 01       	movw	r30, r28
    3a48:	ed 5b       	subi	r30, 0xBD	; 189
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e4       	ldi	r19, 0x40	; 64
    3a58:	4c e1       	ldi	r20, 0x1C	; 28
    3a5a:	55 e4       	ldi	r21, 0x45	; 69
    3a5c:	30 d7       	rcall	.+3680   	; 0x48be <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	f8 01       	movw	r30, r16
    3a64:	80 83       	st	Z, r24
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	a2 83       	std	Z+2, r26	; 0x02
    3a6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	ff 96       	adiw	r30, 0x3f	; 63
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	cb d5       	rcall	.+2966   	; 0x4618 <__cmpsf2>
    3a82:	88 23       	and	r24, r24
    3a84:	2c f4       	brge	.+10     	; 0x3a90 <purpleside+0xaac>
		__ticks = 1;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	9e af       	std	Y+62, r25	; 0x3e
    3a8c:	8d af       	std	Y+61, r24	; 0x3d
    3a8e:	42 c0       	rjmp	.+132    	; 0x3b14 <purpleside+0xb30>
	else if (__tmp > 65535)
    3a90:	fe 01       	movw	r30, r28
    3a92:	ff 96       	adiw	r30, 0x3f	; 63
    3a94:	60 81       	ld	r22, Z
    3a96:	71 81       	ldd	r23, Z+1	; 0x01
    3a98:	82 81       	ldd	r24, Z+2	; 0x02
    3a9a:	93 81       	ldd	r25, Z+3	; 0x03
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	08 d7       	rcall	.+3600   	; 0x48b6 <__gesf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	54 f5       	brge	.+84     	; 0x3afe <purpleside+0xb1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	fe 01       	movw	r30, r28
    3aac:	ed 5b       	subi	r30, 0xBD	; 189
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e2       	ldi	r20, 0x20	; 32
    3abe:	51 e4       	ldi	r21, 0x41	; 65
    3ac0:	fe d6       	rcall	.+3580   	; 0x48be <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	17 d6       	rcall	.+3118   	; 0x46fa <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9e af       	std	Y+62, r25	; 0x3e
    3ad2:	8d af       	std	Y+61, r24	; 0x3d
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <purpleside+0xb10>
    3ad6:	8a ef       	ldi	r24, 0xFA	; 250
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9c af       	std	Y+60, r25	; 0x3c
    3adc:	8b af       	std	Y+59, r24	; 0x3b
    3ade:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ae0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <purpleside+0xafe>
    3ae6:	9c af       	std	Y+60, r25	; 0x3c
    3ae8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    3aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9e af       	std	Y+62, r25	; 0x3e
    3af2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3af6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <purpleside+0xaf2>
    3afc:	15 c0       	rjmp	.+42     	; 0x3b28 <purpleside+0xb44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	fe 01       	movw	r30, r28
    3b00:	ff 96       	adiw	r30, 0x3f	; 63
    3b02:	60 81       	ld	r22, Z
    3b04:	71 81       	ldd	r23, Z+1	; 0x01
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	f7 d5       	rcall	.+3054   	; 0x46fa <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	9e af       	std	Y+62, r25	; 0x3e
    3b12:	8d af       	std	Y+61, r24	; 0x3d
    3b14:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b16:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b18:	9a af       	std	Y+58, r25	; 0x3a
    3b1a:	89 af       	std	Y+57, r24	; 0x39
    3b1c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <purpleside+0xb3c>
    3b24:	9a af       	std	Y+58, r25	; 0x3a
    3b26:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(800);
						odometry_rotate(-90,LOW_SPEED,NULL);
    3b28:	86 ea       	ldi	r24, 0xA6	; 166
    3b2a:	9f ef       	ldi	r25, 0xFF	; 255
    3b2c:	6e e1       	ldi	r22, 0x1E	; 30
    3b2e:	40 e0       	ldi	r20, 0x00	; 0
    3b30:	50 e0       	ldi	r21, 0x00	; 0
    3b32:	de d8       	rcall	.-3652   	; 0x2cf0 <odometry_rotate>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	aa ef       	ldi	r26, 0xFA	; 250
    3b3a:	b3 e4       	ldi	r27, 0x43	; 67
    3b3c:	8d ab       	std	Y+53, r24	; 0x35
    3b3e:	9e ab       	std	Y+54, r25	; 0x36
    3b40:	af ab       	std	Y+55, r26	; 0x37
    3b42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b44:	6d a9       	ldd	r22, Y+53	; 0x35
    3b46:	7e a9       	ldd	r23, Y+54	; 0x36
    3b48:	8f a9       	ldd	r24, Y+55	; 0x37
    3b4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e4       	ldi	r19, 0x40	; 64
    3b50:	4c e1       	ldi	r20, 0x1C	; 28
    3b52:	55 e4       	ldi	r21, 0x45	; 69
    3b54:	b4 d6       	rcall	.+3432   	; 0x48be <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	89 ab       	std	Y+49, r24	; 0x31
    3b5c:	9a ab       	std	Y+50, r25	; 0x32
    3b5e:	ab ab       	std	Y+51, r26	; 0x33
    3b60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b62:	69 a9       	ldd	r22, Y+49	; 0x31
    3b64:	7a a9       	ldd	r23, Y+50	; 0x32
    3b66:	8b a9       	ldd	r24, Y+51	; 0x33
    3b68:	9c a9       	ldd	r25, Y+52	; 0x34
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e8       	ldi	r20, 0x80	; 128
    3b70:	5f e3       	ldi	r21, 0x3F	; 63
    3b72:	52 d5       	rcall	.+2724   	; 0x4618 <__cmpsf2>
    3b74:	88 23       	and	r24, r24
    3b76:	2c f4       	brge	.+10     	; 0x3b82 <purpleside+0xb9e>
		__ticks = 1;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	98 ab       	std	Y+48, r25	; 0x30
    3b7e:	8f a7       	std	Y+47, r24	; 0x2f
    3b80:	3b c0       	rjmp	.+118    	; 0x3bf8 <purpleside+0xc14>
	else if (__tmp > 65535)
    3b82:	69 a9       	ldd	r22, Y+49	; 0x31
    3b84:	7a a9       	ldd	r23, Y+50	; 0x32
    3b86:	8b a9       	ldd	r24, Y+51	; 0x33
    3b88:	9c a9       	ldd	r25, Y+52	; 0x34
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	91 d6       	rcall	.+3362   	; 0x48b6 <__gesf2>
    3b94:	18 16       	cp	r1, r24
    3b96:	3c f5       	brge	.+78     	; 0x3be6 <purpleside+0xc02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b98:	6d a9       	ldd	r22, Y+53	; 0x35
    3b9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	8a d6       	rcall	.+3348   	; 0x48be <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	a3 d5       	rcall	.+2886   	; 0x46fa <__fixunssfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	98 ab       	std	Y+48, r25	; 0x30
    3bba:	8f a7       	std	Y+47, r24	; 0x2f
    3bbc:	0f c0       	rjmp	.+30     	; 0x3bdc <purpleside+0xbf8>
    3bbe:	8a ef       	ldi	r24, 0xFA	; 250
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	9e a7       	std	Y+46, r25	; 0x2e
    3bc4:	8d a7       	std	Y+45, r24	; 0x2d
    3bc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	f1 f7       	brne	.-4      	; 0x3bca <purpleside+0xbe6>
    3bce:	9e a7       	std	Y+46, r25	; 0x2e
    3bd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	98 ab       	std	Y+48, r25	; 0x30
    3bda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bde:	98 a9       	ldd	r25, Y+48	; 0x30
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	69 f7       	brne	.-38     	; 0x3bbe <purpleside+0xbda>
    3be4:	13 c0       	rjmp	.+38     	; 0x3c0c <purpleside+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be6:	69 a9       	ldd	r22, Y+49	; 0x31
    3be8:	7a a9       	ldd	r23, Y+50	; 0x32
    3bea:	8b a9       	ldd	r24, Y+51	; 0x33
    3bec:	9c a9       	ldd	r25, Y+52	; 0x34
    3bee:	85 d5       	rcall	.+2826   	; 0x46fa <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	98 ab       	std	Y+48, r25	; 0x30
    3bf6:	8f a7       	std	Y+47, r24	; 0x2f
    3bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    3bfc:	9c a7       	std	Y+44, r25	; 0x2c
    3bfe:	8b a7       	std	Y+43, r24	; 0x2b
    3c00:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c02:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	f1 f7       	brne	.-4      	; 0x3c04 <purpleside+0xc20>
    3c08:	9c a7       	std	Y+44, r25	; 0x2c
    3c0a:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						odometry_move_straight(300,LOW_SPEED,NULL);
    3c0c:	8c e2       	ldi	r24, 0x2C	; 44
    3c0e:	91 e0       	ldi	r25, 0x01	; 1
    3c10:	6e e1       	ldi	r22, 0x1E	; 30
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	0e 94 3f 14 	call	0x287e	; 0x287e <odometry_move_straight>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	a8 e4       	ldi	r26, 0x48	; 72
    3c20:	b4 e4       	ldi	r27, 0x44	; 68
    3c22:	8f a3       	std	Y+39, r24	; 0x27
    3c24:	98 a7       	std	Y+40, r25	; 0x28
    3c26:	a9 a7       	std	Y+41, r26	; 0x29
    3c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e4       	ldi	r19, 0x40	; 64
    3c36:	4c e1       	ldi	r20, 0x1C	; 28
    3c38:	55 e4       	ldi	r21, 0x45	; 69
    3c3a:	41 d6       	rcall	.+3202   	; 0x48be <__mulsf3>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	8b a3       	std	Y+35, r24	; 0x23
    3c42:	9c a3       	std	Y+36, r25	; 0x24
    3c44:	ad a3       	std	Y+37, r26	; 0x25
    3c46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c48:	6b a1       	ldd	r22, Y+35	; 0x23
    3c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	df d4       	rcall	.+2494   	; 0x4618 <__cmpsf2>
    3c5a:	88 23       	and	r24, r24
    3c5c:	2c f4       	brge	.+10     	; 0x3c68 <purpleside+0xc84>
		__ticks = 1;
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	9a a3       	std	Y+34, r25	; 0x22
    3c64:	89 a3       	std	Y+33, r24	; 0x21
    3c66:	3b c0       	rjmp	.+118    	; 0x3cde <purpleside+0xcfa>
	else if (__tmp > 65535)
    3c68:	6b a1       	ldd	r22, Y+35	; 0x23
    3c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	3f ef       	ldi	r19, 0xFF	; 255
    3c74:	4f e7       	ldi	r20, 0x7F	; 127
    3c76:	57 e4       	ldi	r21, 0x47	; 71
    3c78:	1e d6       	rcall	.+3132   	; 0x48b6 <__gesf2>
    3c7a:	18 16       	cp	r1, r24
    3c7c:	3c f5       	brge	.+78     	; 0x3ccc <purpleside+0xce8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c7e:	6f a1       	ldd	r22, Y+39	; 0x27
    3c80:	78 a5       	ldd	r23, Y+40	; 0x28
    3c82:	89 a5       	ldd	r24, Y+41	; 0x29
    3c84:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e2       	ldi	r20, 0x20	; 32
    3c8c:	51 e4       	ldi	r21, 0x41	; 65
    3c8e:	17 d6       	rcall	.+3118   	; 0x48be <__mulsf3>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	30 d5       	rcall	.+2656   	; 0x46fa <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	9a a3       	std	Y+34, r25	; 0x22
    3ca0:	89 a3       	std	Y+33, r24	; 0x21
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <purpleside+0xcde>
    3ca4:	8a ef       	ldi	r24, 0xFA	; 250
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	98 a3       	std	Y+32, r25	; 0x20
    3caa:	8f 8f       	std	Y+31, r24	; 0x1f
    3cac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cae:	98 a1       	ldd	r25, Y+32	; 0x20
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <purpleside+0xccc>
    3cb4:	98 a3       	std	Y+32, r25	; 0x20
    3cb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3cba:	9a a1       	ldd	r25, Y+34	; 0x22
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	9a a3       	std	Y+34, r25	; 0x22
    3cc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	69 f7       	brne	.-38     	; 0x3ca4 <purpleside+0xcc0>
    3cca:	13 c0       	rjmp	.+38     	; 0x3cf2 <purpleside+0xd0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cce:	7c a1       	ldd	r23, Y+36	; 0x24
    3cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd4:	12 d5       	rcall	.+2596   	; 0x46fa <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	9a a3       	std	Y+34, r25	; 0x22
    3cdc:	89 a3       	std	Y+33, r24	; 0x21
    3cde:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <purpleside+0xd06>
    3cee:	9e 8f       	std	Y+30, r25	; 0x1e
    3cf0:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(800);
						odometry_rotate(90,LOW_SPEED,NULL);
    3cf2:	8a e5       	ldi	r24, 0x5A	; 90
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	6e e1       	ldi	r22, 0x1E	; 30
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <odometry_rotate>
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	aa ef       	ldi	r26, 0xFA	; 250
    3d06:	b3 e4       	ldi	r27, 0x43	; 67
    3d08:	89 8f       	std	Y+25, r24	; 0x19
    3d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    3d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d10:	69 8d       	ldd	r22, Y+25	; 0x19
    3d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e4       	ldi	r19, 0x40	; 64
    3d1c:	4c e1       	ldi	r20, 0x1C	; 28
    3d1e:	55 e4       	ldi	r21, 0x45	; 69
    3d20:	ce d5       	rcall	.+2972   	; 0x48be <__mulsf3>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	8d 8b       	std	Y+21, r24	; 0x15
    3d28:	9e 8b       	std	Y+22, r25	; 0x16
    3d2a:	af 8b       	std	Y+23, r26	; 0x17
    3d2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d30:	7e 89       	ldd	r23, Y+22	; 0x16
    3d32:	8f 89       	ldd	r24, Y+23	; 0x17
    3d34:	98 8d       	ldd	r25, Y+24	; 0x18
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	40 e8       	ldi	r20, 0x80	; 128
    3d3c:	5f e3       	ldi	r21, 0x3F	; 63
    3d3e:	6c d4       	rcall	.+2264   	; 0x4618 <__cmpsf2>
    3d40:	88 23       	and	r24, r24
    3d42:	2c f4       	brge	.+10     	; 0x3d4e <purpleside+0xd6a>
		__ticks = 1;
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	9c 8b       	std	Y+20, r25	; 0x14
    3d4a:	8b 8b       	std	Y+19, r24	; 0x13
    3d4c:	3b c0       	rjmp	.+118    	; 0x3dc4 <purpleside+0xde0>
	else if (__tmp > 65535)
    3d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d50:	7e 89       	ldd	r23, Y+22	; 0x16
    3d52:	8f 89       	ldd	r24, Y+23	; 0x17
    3d54:	98 8d       	ldd	r25, Y+24	; 0x18
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	3f ef       	ldi	r19, 0xFF	; 255
    3d5a:	4f e7       	ldi	r20, 0x7F	; 127
    3d5c:	57 e4       	ldi	r21, 0x47	; 71
    3d5e:	ab d5       	rcall	.+2902   	; 0x48b6 <__gesf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	3c f5       	brge	.+78     	; 0x3db2 <purpleside+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d64:	69 8d       	ldd	r22, Y+25	; 0x19
    3d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e2       	ldi	r20, 0x20	; 32
    3d72:	51 e4       	ldi	r21, 0x41	; 65
    3d74:	a4 d5       	rcall	.+2888   	; 0x48be <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	bd d4       	rcall	.+2426   	; 0x46fa <__fixunssfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	9c 8b       	std	Y+20, r25	; 0x14
    3d86:	8b 8b       	std	Y+19, r24	; 0x13
    3d88:	0f c0       	rjmp	.+30     	; 0x3da8 <purpleside+0xdc4>
    3d8a:	8a ef       	ldi	r24, 0xFA	; 250
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	9a 8b       	std	Y+18, r25	; 0x12
    3d90:	89 8b       	std	Y+17, r24	; 0x11
    3d92:	89 89       	ldd	r24, Y+17	; 0x11
    3d94:	9a 89       	ldd	r25, Y+18	; 0x12
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <purpleside+0xdb2>
    3d9a:	9a 8b       	std	Y+18, r25	; 0x12
    3d9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3da0:	9c 89       	ldd	r25, Y+20	; 0x14
    3da2:	01 97       	sbiw	r24, 0x01	; 1
    3da4:	9c 8b       	std	Y+20, r25	; 0x14
    3da6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dac:	00 97       	sbiw	r24, 0x00	; 0
    3dae:	69 f7       	brne	.-38     	; 0x3d8a <purpleside+0xda6>
    3db0:	13 c0       	rjmp	.+38     	; 0x3dd8 <purpleside+0xdf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db2:	6d 89       	ldd	r22, Y+21	; 0x15
    3db4:	7e 89       	ldd	r23, Y+22	; 0x16
    3db6:	8f 89       	ldd	r24, Y+23	; 0x17
    3db8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dba:	9f d4       	rcall	.+2366   	; 0x46fa <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	9c 8b       	std	Y+20, r25	; 0x14
    3dc2:	8b 8b       	std	Y+19, r24	; 0x13
    3dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc8:	98 8b       	std	Y+16, r25	; 0x10
    3dca:	8f 87       	std	Y+15, r24	; 0x0f
    3dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dce:	98 89       	ldd	r25, Y+16	; 0x10
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <purpleside+0xdec>
    3dd4:	98 8b       	std	Y+16, r25	; 0x10
    3dd6:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						odometry_move_straight(190,20,NULL);
    3dd8:	8e eb       	ldi	r24, 0xBE	; 190
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	64 e1       	ldi	r22, 0x14	; 20
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	0e 94 3f 14 	call	0x287e	; 0x287e <odometry_move_straight>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	aa e7       	ldi	r26, 0x7A	; 122
    3dec:	b4 e4       	ldi	r27, 0x44	; 68
    3dee:	8b 87       	std	Y+11, r24	; 0x0b
    3df0:	9c 87       	std	Y+12, r25	; 0x0c
    3df2:	ad 87       	std	Y+13, r26	; 0x0d
    3df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e4       	ldi	r19, 0x40	; 64
    3e02:	4c e1       	ldi	r20, 0x1C	; 28
    3e04:	55 e4       	ldi	r21, 0x45	; 69
    3e06:	5b d5       	rcall	.+2742   	; 0x48be <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	8f 83       	std	Y+7, r24	; 0x07
    3e0e:	98 87       	std	Y+8, r25	; 0x08
    3e10:	a9 87       	std	Y+9, r26	; 0x09
    3e12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e14:	6f 81       	ldd	r22, Y+7	; 0x07
    3e16:	78 85       	ldd	r23, Y+8	; 0x08
    3e18:	89 85       	ldd	r24, Y+9	; 0x09
    3e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e8       	ldi	r20, 0x80	; 128
    3e22:	5f e3       	ldi	r21, 0x3F	; 63
    3e24:	f9 d3       	rcall	.+2034   	; 0x4618 <__cmpsf2>
    3e26:	88 23       	and	r24, r24
    3e28:	2c f4       	brge	.+10     	; 0x3e34 <purpleside+0xe50>
		__ticks = 1;
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	3b c0       	rjmp	.+118    	; 0x3eaa <purpleside+0xec6>
	else if (__tmp > 65535)
    3e34:	6f 81       	ldd	r22, Y+7	; 0x07
    3e36:	78 85       	ldd	r23, Y+8	; 0x08
    3e38:	89 85       	ldd	r24, Y+9	; 0x09
    3e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	3f ef       	ldi	r19, 0xFF	; 255
    3e40:	4f e7       	ldi	r20, 0x7F	; 127
    3e42:	57 e4       	ldi	r21, 0x47	; 71
    3e44:	38 d5       	rcall	.+2672   	; 0x48b6 <__gesf2>
    3e46:	18 16       	cp	r1, r24
    3e48:	3c f5       	brge	.+78     	; 0x3e98 <purpleside+0xeb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e2       	ldi	r20, 0x20	; 32
    3e58:	51 e4       	ldi	r21, 0x41	; 65
    3e5a:	31 d5       	rcall	.+2658   	; 0x48be <__mulsf3>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	4a d4       	rcall	.+2196   	; 0x46fa <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
    3e6e:	0f c0       	rjmp	.+30     	; 0x3e8e <purpleside+0xeaa>
    3e70:	8a ef       	ldi	r24, 0xFA	; 250
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9c 83       	std	Y+4, r25	; 0x04
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    3e78:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <purpleside+0xe98>
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e84:	8d 81       	ldd	r24, Y+5	; 0x05
    3e86:	9e 81       	ldd	r25, Y+6	; 0x06
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	9e 83       	std	Y+6, r25	; 0x06
    3e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e90:	9e 81       	ldd	r25, Y+6	; 0x06
    3e92:	00 97       	sbiw	r24, 0x00	; 0
    3e94:	69 f7       	brne	.-38     	; 0x3e70 <purpleside+0xe8c>
    3e96:	13 c0       	rjmp	.+38     	; 0x3ebe <purpleside+0xeda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e98:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9a:	78 85       	ldd	r23, Y+8	; 0x08
    3e9c:	89 85       	ldd	r24, Y+9	; 0x09
    3e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea0:	2c d4       	rcall	.+2136   	; 0x46fa <__fixunssfsi>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	9e 83       	std	Y+6, r25	; 0x06
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3eac:	9e 81       	ldd	r25, Y+6	; 0x06
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <purpleside+0xed2>
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						odometry_move_straight(-150,20,NULL);
    3ebe:	8a e6       	ldi	r24, 0x6A	; 106
    3ec0:	9f ef       	ldi	r25, 0xFF	; 255
    3ec2:	64 e1       	ldi	r22, 0x14	; 20
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	0e 94 3f 14 	call	0x287e	; 0x287e <odometry_move_straight>
    3ecc:	ff cf       	rjmp	.-2      	; 0x3ecc <purpleside+0xee8>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    3ece:	de 01       	movw	r26, r28
    3ed0:	a2 56       	subi	r26, 0x62	; 98
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e2 56       	subi	r30, 0x62	; 98
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	8f 5f       	subi	r24, 0xFF	; 255
    3ede:	8c 93       	st	X, r24
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e2 56       	subi	r30, 0x62	; 98
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	89 30       	cpi	r24, 0x09	; 9
    3eea:	08 f4       	brcc	.+2      	; 0x3eee <purpleside+0xf0a>
    3eec:	c1 c8       	rjmp	.-3710   	; 0x3070 <purpleside+0x8c>
    3eee:	ad c8       	rjmp	.-3750   	; 0x304a <purpleside+0x66>

00003ef0 <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <timer_register_callback+0x6>
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	9a 81       	ldd	r25, Y+2	; 0x02
    3f02:	90 93 10 02 	sts	0x0210, r25
    3f06:	80 93 0f 02 	sts	0x020F, r24
}
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	df 93       	push	r29
    3f1a:	cf 93       	push	r28
    3f1c:	00 d0       	rcall	.+0      	; 0x3f1e <timer_init+0xa>
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	9a 83       	std	Y+2, r25	; 0x02
    3f24:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    3f26:	e0 e8       	ldi	r30, 0x80	; 128
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    3f2c:	e1 e8       	ldi	r30, 0x81	; 129
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	89 e0       	ldi	r24, 0x09	; 9
    3f32:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    3f34:	08 e8       	ldi	r16, 0x88	; 136
    3f36:	10 e0       	ldi	r17, 0x00	; 0
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3c:	cc 01       	movw	r24, r24
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	05 d4       	rcall	.+2058   	; 0x4752 <__floatunsisf>
    3f48:	9b 01       	movw	r18, r22
    3f4a:	ac 01       	movw	r20, r24
    3f4c:	60 e8       	ldi	r22, 0x80	; 128
    3f4e:	76 e9       	ldi	r23, 0x96	; 150
    3f50:	88 e1       	ldi	r24, 0x18	; 24
    3f52:	9b e4       	ldi	r25, 0x4B	; 75
    3f54:	65 d3       	rcall	.+1738   	; 0x4620 <__divsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	5f e3       	ldi	r21, 0x3F	; 63
    3f66:	f4 d2       	rcall	.+1512   	; 0x4550 <__addsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	c4 d3       	rcall	.+1928   	; 0x46fa <__fixunssfsi>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	f8 01       	movw	r30, r16
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    3f7c:	ef e6       	ldi	r30, 0x6F	; 111
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	80 83       	st	Z, r24

	SREG |= 0x80;
    3f84:	af e5       	ldi	r26, 0x5F	; 95
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	ef e5       	ldi	r30, 0x5F	; 95
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	80 68       	ori	r24, 0x80	; 128
    3f90:	8c 93       	st	X, r24
}
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	cf 91       	pop	r28
    3f98:	df 91       	pop	r29
    3f9a:	1f 91       	pop	r17
    3f9c:	0f 91       	pop	r16
    3f9e:	08 95       	ret

00003fa0 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    3fa0:	1f 92       	push	r1
    3fa2:	0f 92       	push	r0
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	0f 92       	push	r0
    3fa8:	00 90 5b 00 	lds	r0, 0x005B
    3fac:	0f 92       	push	r0
    3fae:	11 24       	eor	r1, r1
    3fb0:	2f 93       	push	r18
    3fb2:	3f 93       	push	r19
    3fb4:	4f 93       	push	r20
    3fb6:	5f 93       	push	r21
    3fb8:	6f 93       	push	r22
    3fba:	7f 93       	push	r23
    3fbc:	8f 93       	push	r24
    3fbe:	9f 93       	push	r25
    3fc0:	af 93       	push	r26
    3fc2:	bf 93       	push	r27
    3fc4:	ef 93       	push	r30
    3fc6:	ff 93       	push	r31
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    3fd0:	80 91 0f 02 	lds	r24, 0x020F
    3fd4:	90 91 10 02 	lds	r25, 0x0210
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	29 f0       	breq	.+10     	; 0x3fe6 <__vector_12+0x46>
        timer_callback();
    3fdc:	e0 91 0f 02 	lds	r30, 0x020F
    3fe0:	f0 91 10 02 	lds	r31, 0x0210
    3fe4:	09 95       	icall
	if(sys_time >= 90000)
    3fe6:	80 91 11 02 	lds	r24, 0x0211
    3fea:	90 91 12 02 	lds	r25, 0x0212
    3fee:	a0 91 13 02 	lds	r26, 0x0213
    3ff2:	b0 91 14 02 	lds	r27, 0x0214
    3ff6:	80 39       	cpi	r24, 0x90	; 144
    3ff8:	2f e5       	ldi	r18, 0x5F	; 95
    3ffa:	92 07       	cpc	r25, r18
    3ffc:	21 e0       	ldi	r18, 0x01	; 1
    3ffe:	a2 07       	cpc	r26, r18
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	b2 07       	cpc	r27, r18
    4004:	10 f0       	brcs	.+4      	; 0x400a <__vector_12+0x6a>
		actuators_umbrella();
    4006:	0e 94 98 03 	call	0x730	; 0x730 <actuators_umbrella>
	sys_time++;
    400a:	80 91 11 02 	lds	r24, 0x0211
    400e:	90 91 12 02 	lds	r25, 0x0212
    4012:	a0 91 13 02 	lds	r26, 0x0213
    4016:	b0 91 14 02 	lds	r27, 0x0214
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	a1 1d       	adc	r26, r1
    401e:	b1 1d       	adc	r27, r1
    4020:	80 93 11 02 	sts	0x0211, r24
    4024:	90 93 12 02 	sts	0x0212, r25
    4028:	a0 93 13 02 	sts	0x0213, r26
    402c:	b0 93 14 02 	sts	0x0214, r27
}
    4030:	cf 91       	pop	r28
    4032:	df 91       	pop	r29
    4034:	ff 91       	pop	r31
    4036:	ef 91       	pop	r30
    4038:	bf 91       	pop	r27
    403a:	af 91       	pop	r26
    403c:	9f 91       	pop	r25
    403e:	8f 91       	pop	r24
    4040:	7f 91       	pop	r23
    4042:	6f 91       	pop	r22
    4044:	5f 91       	pop	r21
    4046:	4f 91       	pop	r20
    4048:	3f 91       	pop	r19
    404a:	2f 91       	pop	r18
    404c:	0f 90       	pop	r0
    404e:	00 92 5b 00 	sts	0x005B, r0
    4052:	0f 90       	pop	r0
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	0f 90       	pop	r0
    4058:	1f 90       	pop	r1
    405a:	18 95       	reti

0000405c <sides_switch_check>:
void wait_for_big_robot(double time_to_wait)
{
	while(sys_time < time_to_wait);
}
signed char sides_switch_check(void)
{
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	0f 92       	push	r0
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    4066:	89 e2       	ldi	r24, 0x29	; 41
    4068:	0e 94 fe 09 	call	0x13fc	; 0x13fc <gpio_read_pin>
    406c:	81 30       	cpi	r24, 0x01	; 1
    406e:	19 f4       	brne	.+6      	; 0x4076 <sides_switch_check+0x1a>
	{
		return 1;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	01 c0       	rjmp	.+2      	; 0x4078 <sides_switch_check+0x1c>
	}
	
	return 0;
    4076:	19 82       	std	Y+1, r1	; 0x01
    4078:	89 81       	ldd	r24, Y+1	; 0x01
}
    407a:	0f 90       	pop	r0
    407c:	cf 91       	pop	r28
    407e:	df 91       	pop	r29
    4080:	08 95       	ret

00004082 <system_reset_system_time>:

void system_reset_system_time(void)
{
    4082:	df 93       	push	r29
    4084:	cf 93       	push	r28
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    408a:	10 92 11 02 	sts	0x0211, r1
    408e:	10 92 12 02 	sts	0x0212, r1
    4092:	10 92 13 02 	sts	0x0213, r1
    4096:	10 92 14 02 	sts	0x0214, r1
}
    409a:	cf 91       	pop	r28
    409c:	df 91       	pop	r29
    409e:	08 95       	ret

000040a0 <system_set_match_started>:
void system_set_match_started(void)
{
    40a0:	df 93       	push	r29
    40a2:	cf 93       	push	r28
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	80 93 15 02 	sts	0x0215, r24
}
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    40bc:	80 91 11 02 	lds	r24, 0x0211
    40c0:	90 91 12 02 	lds	r25, 0x0212
    40c4:	a0 91 13 02 	lds	r26, 0x0213
    40c8:	b0 91 14 02 	lds	r27, 0x0214
}
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <system_init>:
	uint32_t current;
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
void system_init(void)
{	
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	6c 97       	sbiw	r28, 0x1c	; 28
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    40ea:	8e e7       	ldi	r24, 0x7E	; 126
    40ec:	9a e0       	ldi	r25, 0x0A	; 10
    40ee:	00 df       	rcall	.-512    	; 0x3ef0 <timer_register_callback>
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	a8 ec       	ldi	r26, 0xC8	; 200
    40f6:	b2 e4       	ldi	r27, 0x42	; 66
    40f8:	89 8f       	std	Y+25, r24	; 0x19
    40fa:	9a 8f       	std	Y+26, r25	; 0x1a
    40fc:	ab 8f       	std	Y+27, r26	; 0x1b
    40fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4100:	69 8d       	ldd	r22, Y+25	; 0x19
    4102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e4       	ldi	r19, 0x40	; 64
    410c:	4c e1       	ldi	r20, 0x1C	; 28
    410e:	55 e4       	ldi	r21, 0x45	; 69
    4110:	d6 d3       	rcall	.+1964   	; 0x48be <__mulsf3>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	8d 8b       	std	Y+21, r24	; 0x15
    4118:	9e 8b       	std	Y+22, r25	; 0x16
    411a:	af 8b       	std	Y+23, r26	; 0x17
    411c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    411e:	6d 89       	ldd	r22, Y+21	; 0x15
    4120:	7e 89       	ldd	r23, Y+22	; 0x16
    4122:	8f 89       	ldd	r24, Y+23	; 0x17
    4124:	98 8d       	ldd	r25, Y+24	; 0x18
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e8       	ldi	r20, 0x80	; 128
    412c:	5f e3       	ldi	r21, 0x3F	; 63
    412e:	74 d2       	rcall	.+1256   	; 0x4618 <__cmpsf2>
    4130:	88 23       	and	r24, r24
    4132:	2c f4       	brge	.+10     	; 0x413e <system_init+0x68>
		__ticks = 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9c 8b       	std	Y+20, r25	; 0x14
    413a:	8b 8b       	std	Y+19, r24	; 0x13
    413c:	3b c0       	rjmp	.+118    	; 0x41b4 <system_init+0xde>
	else if (__tmp > 65535)
    413e:	6d 89       	ldd	r22, Y+21	; 0x15
    4140:	7e 89       	ldd	r23, Y+22	; 0x16
    4142:	8f 89       	ldd	r24, Y+23	; 0x17
    4144:	98 8d       	ldd	r25, Y+24	; 0x18
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	3f ef       	ldi	r19, 0xFF	; 255
    414a:	4f e7       	ldi	r20, 0x7F	; 127
    414c:	57 e4       	ldi	r21, 0x47	; 71
    414e:	b3 d3       	rcall	.+1894   	; 0x48b6 <__gesf2>
    4150:	18 16       	cp	r1, r24
    4152:	3c f5       	brge	.+78     	; 0x41a2 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4154:	69 8d       	ldd	r22, Y+25	; 0x19
    4156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    415a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e2       	ldi	r20, 0x20	; 32
    4162:	51 e4       	ldi	r21, 0x41	; 65
    4164:	ac d3       	rcall	.+1880   	; 0x48be <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	bc 01       	movw	r22, r24
    416c:	cd 01       	movw	r24, r26
    416e:	c5 d2       	rcall	.+1418   	; 0x46fa <__fixunssfsi>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	9c 8b       	std	Y+20, r25	; 0x14
    4176:	8b 8b       	std	Y+19, r24	; 0x13
    4178:	0f c0       	rjmp	.+30     	; 0x4198 <system_init+0xc2>
    417a:	8a ef       	ldi	r24, 0xFA	; 250
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	9a 8b       	std	Y+18, r25	; 0x12
    4180:	89 8b       	std	Y+17, r24	; 0x11
    4182:	89 89       	ldd	r24, Y+17	; 0x11
    4184:	9a 89       	ldd	r25, Y+18	; 0x12
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	f1 f7       	brne	.-4      	; 0x4186 <system_init+0xb0>
    418a:	9a 8b       	std	Y+18, r25	; 0x12
    418c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418e:	8b 89       	ldd	r24, Y+19	; 0x13
    4190:	9c 89       	ldd	r25, Y+20	; 0x14
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	9c 8b       	std	Y+20, r25	; 0x14
    4196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4198:	8b 89       	ldd	r24, Y+19	; 0x13
    419a:	9c 89       	ldd	r25, Y+20	; 0x14
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	69 f7       	brne	.-38     	; 0x417a <system_init+0xa4>
    41a0:	13 c0       	rjmp	.+38     	; 0x41c8 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a2:	6d 89       	ldd	r22, Y+21	; 0x15
    41a4:	7e 89       	ldd	r23, Y+22	; 0x16
    41a6:	8f 89       	ldd	r24, Y+23	; 0x17
    41a8:	98 8d       	ldd	r25, Y+24	; 0x18
    41aa:	a7 d2       	rcall	.+1358   	; 0x46fa <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	9c 8b       	std	Y+20, r25	; 0x14
    41b2:	8b 8b       	std	Y+19, r24	; 0x13
    41b4:	8b 89       	ldd	r24, Y+19	; 0x13
    41b6:	9c 89       	ldd	r25, Y+20	; 0x14
    41b8:	98 8b       	std	Y+16, r25	; 0x10
    41ba:	8f 87       	std	Y+15, r24	; 0x0f
    41bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41be:	98 89       	ldd	r25, Y+16	; 0x10
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <system_init+0xea>
    41c4:	98 8b       	std	Y+16, r25	; 0x10
    41c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    41c8:	88 e2       	ldi	r24, 0x28	; 40
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    41d2:	89 e2       	ldi	r24, 0x29	; 41
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    41dc:	88 e0       	ldi	r24, 0x08	; 8
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    41e6:	8a e0       	ldi	r24, 0x0A	; 10
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    41f0:	8c e0       	ldi	r24, 0x0C	; 12
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    41fa:	8e e0       	ldi	r24, 0x0E	; 14
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	40 e0       	ldi	r20, 0x00	; 0
    4200:	0e 94 90 08 	call	0x1120	; 0x1120 <gpio_register_pin>
	
	
	DDRG = 0xff;
    4204:	e3 e3       	ldi	r30, 0x33	; 51
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	8f ef       	ldi	r24, 0xFF	; 255
    420a:	80 83       	st	Z, r24
	PORTG = 0x00;
    420c:	e4 e3       	ldi	r30, 0x34	; 52
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	10 82       	st	Z, r1
	servo_init(50);
    4212:	82 e3       	ldi	r24, 0x32	; 50
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 17 01 	call	0x22e	; 0x22e <servo_init>
	timer_init(1000);
    421a:	88 ee       	ldi	r24, 0xE8	; 232
    421c:	93 e0       	ldi	r25, 0x03	; 3
    421e:	7a de       	rcall	.-780    	; 0x3f14 <timer_init>
	CAN_Init(1);
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	0e 94 4b 07 	call	0xe96	; 0xe96 <CAN_Init>

	actuators_setup();
    4226:	0e 94 21 04 	call	0x842	; 0x842 <actuators_setup>
	
	while(!(gpio_read_pin(JUMPER_PIN)));
    422a:	88 e2       	ldi	r24, 0x28	; 40
    422c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <gpio_read_pin>
    4230:	88 23       	and	r24, r24
    4232:	d9 f3       	breq	.-10     	; 0x422a <system_init+0x154>
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	a0 e2       	ldi	r26, 0x20	; 32
    423a:	b1 e4       	ldi	r27, 0x41	; 65
    423c:	8b 87       	std	Y+11, r24	; 0x0b
    423e:	9c 87       	std	Y+12, r25	; 0x0c
    4240:	ad 87       	std	Y+13, r26	; 0x0d
    4242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4244:	6b 85       	ldd	r22, Y+11	; 0x0b
    4246:	7c 85       	ldd	r23, Y+12	; 0x0c
    4248:	8d 85       	ldd	r24, Y+13	; 0x0d
    424a:	9e 85       	ldd	r25, Y+14	; 0x0e
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e4       	ldi	r19, 0x40	; 64
    4250:	4c e1       	ldi	r20, 0x1C	; 28
    4252:	55 e4       	ldi	r21, 0x45	; 69
    4254:	34 d3       	rcall	.+1640   	; 0x48be <__mulsf3>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	8f 83       	std	Y+7, r24	; 0x07
    425c:	98 87       	std	Y+8, r25	; 0x08
    425e:	a9 87       	std	Y+9, r26	; 0x09
    4260:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4262:	6f 81       	ldd	r22, Y+7	; 0x07
    4264:	78 85       	ldd	r23, Y+8	; 0x08
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	9a 85       	ldd	r25, Y+10	; 0x0a
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e8       	ldi	r20, 0x80	; 128
    4270:	5f e3       	ldi	r21, 0x3F	; 63
    4272:	d2 d1       	rcall	.+932    	; 0x4618 <__cmpsf2>
    4274:	88 23       	and	r24, r24
    4276:	2c f4       	brge	.+10     	; 0x4282 <system_init+0x1ac>
		__ticks = 1;
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	9e 83       	std	Y+6, r25	; 0x06
    427e:	8d 83       	std	Y+5, r24	; 0x05
    4280:	3b c0       	rjmp	.+118    	; 0x42f8 <system_init+0x222>
	else if (__tmp > 65535)
    4282:	6f 81       	ldd	r22, Y+7	; 0x07
    4284:	78 85       	ldd	r23, Y+8	; 0x08
    4286:	89 85       	ldd	r24, Y+9	; 0x09
    4288:	9a 85       	ldd	r25, Y+10	; 0x0a
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	3f ef       	ldi	r19, 0xFF	; 255
    428e:	4f e7       	ldi	r20, 0x7F	; 127
    4290:	57 e4       	ldi	r21, 0x47	; 71
    4292:	11 d3       	rcall	.+1570   	; 0x48b6 <__gesf2>
    4294:	18 16       	cp	r1, r24
    4296:	3c f5       	brge	.+78     	; 0x42e6 <system_init+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4298:	6b 85       	ldd	r22, Y+11	; 0x0b
    429a:	7c 85       	ldd	r23, Y+12	; 0x0c
    429c:	8d 85       	ldd	r24, Y+13	; 0x0d
    429e:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e2       	ldi	r20, 0x20	; 32
    42a6:	51 e4       	ldi	r21, 0x41	; 65
    42a8:	0a d3       	rcall	.+1556   	; 0x48be <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	bc 01       	movw	r22, r24
    42b0:	cd 01       	movw	r24, r26
    42b2:	23 d2       	rcall	.+1094   	; 0x46fa <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
    42bc:	0f c0       	rjmp	.+30     	; 0x42dc <system_init+0x206>
    42be:	8a ef       	ldi	r24, 0xFA	; 250
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03
    42c6:	8b 81       	ldd	r24, Y+3	; 0x03
    42c8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ca:	01 97       	sbiw	r24, 0x01	; 1
    42cc:	f1 f7       	brne	.-4      	; 0x42ca <system_init+0x1f4>
    42ce:	9c 83       	std	Y+4, r25	; 0x04
    42d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d2:	8d 81       	ldd	r24, Y+5	; 0x05
    42d4:	9e 81       	ldd	r25, Y+6	; 0x06
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	9e 83       	std	Y+6, r25	; 0x06
    42da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42dc:	8d 81       	ldd	r24, Y+5	; 0x05
    42de:	9e 81       	ldd	r25, Y+6	; 0x06
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	69 f7       	brne	.-38     	; 0x42be <system_init+0x1e8>
    42e4:	13 c0       	rjmp	.+38     	; 0x430c <system_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e6:	6f 81       	ldd	r22, Y+7	; 0x07
    42e8:	78 85       	ldd	r23, Y+8	; 0x08
    42ea:	89 85       	ldd	r24, Y+9	; 0x09
    42ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ee:	05 d2       	rcall	.+1034   	; 0x46fa <__fixunssfsi>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	9e 83       	std	Y+6, r25	; 0x06
    42f6:	8d 83       	std	Y+5, r24	; 0x05
    42f8:	8d 81       	ldd	r24, Y+5	; 0x05
    42fa:	9e 81       	ldd	r25, Y+6	; 0x06
    42fc:	9a 83       	std	Y+2, r25	; 0x02
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	f1 f7       	brne	.-4      	; 0x4304 <system_init+0x22e>
    4308:	9a 83       	std	Y+2, r25	; 0x02
    430a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	PORTG = 0xff;
    430c:	e4 e3       	ldi	r30, 0x34	; 52
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	80 83       	st	Z, r24
	system_reset_system_time();
    4314:	b6 de       	rcall	.-660    	; 0x4082 <system_reset_system_time>
	system_set_match_started();
    4316:	c4 de       	rcall	.-632    	; 0x40a0 <system_set_match_started>
}
    4318:	6c 96       	adiw	r28, 0x1c	; 28
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	f8 94       	cli
    431e:	de bf       	out	0x3e, r29	; 62
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	cd bf       	out	0x3d, r28	; 61
    4324:	cf 91       	pop	r28
    4326:	df 91       	pop	r29
    4328:	08 95       	ret

0000432a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    432a:	1f 92       	push	r1
    432c:	0f 92       	push	r0
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	0f 92       	push	r0
    4332:	00 90 5b 00 	lds	r0, 0x005B
    4336:	0f 92       	push	r0
    4338:	11 24       	eor	r1, r1
    433a:	8f 93       	push	r24
    433c:	9f 93       	push	r25
    433e:	af 93       	push	r26
    4340:	bf 93       	push	r27
    4342:	ef 93       	push	r30
    4344:	ff 93       	push	r31
    4346:	df 93       	push	r29
    4348:	cf 93       	push	r28
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    434e:	80 91 16 02 	lds	r24, 0x0216
    4352:	88 23       	and	r24, r24
    4354:	d9 f0       	breq	.+54     	; 0x438c <__vector_23+0x62>
	{
		tx0_counter--;
    4356:	80 91 16 02 	lds	r24, 0x0216
    435a:	81 50       	subi	r24, 0x01	; 1
    435c:	80 93 16 02 	sts	0x0216, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    4360:	a6 ec       	ldi	r26, 0xC6	; 198
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	80 91 17 02 	lds	r24, 0x0217
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	fc 01       	movw	r30, r24
    436e:	e2 5e       	subi	r30, 0xE2	; 226
    4370:	fd 4f       	sbci	r31, 0xFD	; 253
    4372:	80 81       	ld	r24, Z
    4374:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    4376:	80 91 17 02 	lds	r24, 0x0217
    437a:	8f 5f       	subi	r24, 0xFF	; 255
    437c:	80 93 17 02 	sts	0x0217, r24
    4380:	80 91 17 02 	lds	r24, 0x0217
    4384:	80 34       	cpi	r24, 0x40	; 64
    4386:	11 f4       	brne	.+4      	; 0x438c <__vector_23+0x62>
			tx0_rd_index = 0;
    4388:	10 92 17 02 	sts	0x0217, r1
	}
}
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	ff 91       	pop	r31
    4392:	ef 91       	pop	r30
    4394:	bf 91       	pop	r27
    4396:	af 91       	pop	r26
    4398:	9f 91       	pop	r25
    439a:	8f 91       	pop	r24
    439c:	0f 90       	pop	r0
    439e:	00 92 5b 00 	sts	0x005B, r0
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	1f 90       	pop	r1
    43aa:	18 95       	reti

000043ac <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    43ac:	1f 92       	push	r1
    43ae:	0f 92       	push	r0
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	0f 92       	push	r0
    43b4:	00 90 5b 00 	lds	r0, 0x005B
    43b8:	0f 92       	push	r0
    43ba:	11 24       	eor	r1, r1
    43bc:	2f 93       	push	r18
    43be:	8f 93       	push	r24
    43c0:	9f 93       	push	r25
    43c2:	ef 93       	push	r30
    43c4:	ff 93       	push	r31
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	0f 92       	push	r0
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    43d0:	e0 ec       	ldi	r30, 0xC0	; 192
    43d2:	f0 e0       	ldi	r31, 0x00	; 0
    43d4:	80 81       	ld	r24, Z
    43d6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	88 2f       	mov	r24, r24
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	8c 71       	andi	r24, 0x1C	; 28
    43e0:	90 70       	andi	r25, 0x00	; 0
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	d9 f4       	brne	.+54     	; 0x441c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    43e6:	80 91 18 02 	lds	r24, 0x0218
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	e6 ec       	ldi	r30, 0xC6	; 198
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	20 81       	ld	r18, Z
    43f4:	fc 01       	movw	r30, r24
    43f6:	e2 5a       	subi	r30, 0xA2	; 162
    43f8:	fd 4f       	sbci	r31, 0xFD	; 253
    43fa:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    43fc:	80 91 18 02 	lds	r24, 0x0218
    4400:	8f 5f       	subi	r24, 0xFF	; 255
    4402:	80 93 18 02 	sts	0x0218, r24
    4406:	80 91 18 02 	lds	r24, 0x0218
    440a:	80 34       	cpi	r24, 0x40	; 64
    440c:	11 f4       	brne	.+4      	; 0x4412 <__vector_21+0x66>
			rx0_wr_index = 0;
    440e:	10 92 18 02 	sts	0x0218, r1

		rx0_counter++;
    4412:	80 91 19 02 	lds	r24, 0x0219
    4416:	8f 5f       	subi	r24, 0xFF	; 255
    4418:	80 93 19 02 	sts	0x0219, r24
	}
}
    441c:	0f 90       	pop	r0
    441e:	cf 91       	pop	r28
    4420:	df 91       	pop	r29
    4422:	ff 91       	pop	r31
    4424:	ef 91       	pop	r30
    4426:	9f 91       	pop	r25
    4428:	8f 91       	pop	r24
    442a:	2f 91       	pop	r18
    442c:	0f 90       	pop	r0
    442e:	00 92 5b 00 	sts	0x005B, r0
    4432:	0f 90       	pop	r0
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	0f 90       	pop	r0
    4438:	1f 90       	pop	r1
    443a:	18 95       	reti

0000443c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    443c:	1f 92       	push	r1
    443e:	0f 92       	push	r0
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	0f 92       	push	r0
    4444:	00 90 5b 00 	lds	r0, 0x005B
    4448:	0f 92       	push	r0
    444a:	11 24       	eor	r1, r1
    444c:	8f 93       	push	r24
    444e:	9f 93       	push	r25
    4450:	af 93       	push	r26
    4452:	bf 93       	push	r27
    4454:	ef 93       	push	r30
    4456:	ff 93       	push	r31
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    4460:	80 91 1a 02 	lds	r24, 0x021A
    4464:	88 23       	and	r24, r24
    4466:	d9 f0       	breq	.+54     	; 0x449e <__vector_34+0x62>
	{
		tx1_counter--;
    4468:	80 91 1a 02 	lds	r24, 0x021A
    446c:	81 50       	subi	r24, 0x01	; 1
    446e:	80 93 1a 02 	sts	0x021A, r24
		UDR1=tx1_buffer[tx1_rd_index];
    4472:	ae ec       	ldi	r26, 0xCE	; 206
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	80 91 1b 02 	lds	r24, 0x021B
    447a:	88 2f       	mov	r24, r24
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	fc 01       	movw	r30, r24
    4480:	e2 56       	subi	r30, 0x62	; 98
    4482:	fd 4f       	sbci	r31, 0xFD	; 253
    4484:	80 81       	ld	r24, Z
    4486:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    4488:	80 91 1b 02 	lds	r24, 0x021B
    448c:	8f 5f       	subi	r24, 0xFF	; 255
    448e:	80 93 1b 02 	sts	0x021B, r24
    4492:	80 91 1b 02 	lds	r24, 0x021B
    4496:	80 34       	cpi	r24, 0x40	; 64
    4498:	11 f4       	brne	.+4      	; 0x449e <__vector_34+0x62>
			tx1_rd_index = 0;
    449a:	10 92 1b 02 	sts	0x021B, r1
	}
}
    449e:	cf 91       	pop	r28
    44a0:	df 91       	pop	r29
    44a2:	ff 91       	pop	r31
    44a4:	ef 91       	pop	r30
    44a6:	bf 91       	pop	r27
    44a8:	af 91       	pop	r26
    44aa:	9f 91       	pop	r25
    44ac:	8f 91       	pop	r24
    44ae:	0f 90       	pop	r0
    44b0:	00 92 5b 00 	sts	0x005B, r0
    44b4:	0f 90       	pop	r0
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	0f 90       	pop	r0
    44ba:	1f 90       	pop	r1
    44bc:	18 95       	reti

000044be <__vector_32>:

ISR(USART1_RX_vect)
{
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	00 90 5b 00 	lds	r0, 0x005B
    44ca:	0f 92       	push	r0
    44cc:	11 24       	eor	r1, r1
    44ce:	2f 93       	push	r18
    44d0:	8f 93       	push	r24
    44d2:	9f 93       	push	r25
    44d4:	ef 93       	push	r30
    44d6:	ff 93       	push	r31
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	0f 92       	push	r0
    44de:	cd b7       	in	r28, 0x3d	; 61
    44e0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    44e2:	e8 ec       	ldi	r30, 0xC8	; 200
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	88 2f       	mov	r24, r24
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	8c 71       	andi	r24, 0x1C	; 28
    44f2:	90 70       	andi	r25, 0x00	; 0
    44f4:	00 97       	sbiw	r24, 0x00	; 0
    44f6:	d9 f4       	brne	.+54     	; 0x452e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    44f8:	80 91 1c 02 	lds	r24, 0x021C
    44fc:	88 2f       	mov	r24, r24
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	ee ec       	ldi	r30, 0xCE	; 206
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	20 81       	ld	r18, Z
    4506:	fc 01       	movw	r30, r24
    4508:	e2 52       	subi	r30, 0x22	; 34
    450a:	fd 4f       	sbci	r31, 0xFD	; 253
    450c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    450e:	80 91 1c 02 	lds	r24, 0x021C
    4512:	8f 5f       	subi	r24, 0xFF	; 255
    4514:	80 93 1c 02 	sts	0x021C, r24
    4518:	80 91 1c 02 	lds	r24, 0x021C
    451c:	80 34       	cpi	r24, 0x40	; 64
    451e:	11 f4       	brne	.+4      	; 0x4524 <__vector_32+0x66>
		rx1_wr_index = 0;
    4520:	10 92 1c 02 	sts	0x021C, r1

		rx1_counter++;
    4524:	80 91 1d 02 	lds	r24, 0x021D
    4528:	8f 5f       	subi	r24, 0xFF	; 255
    452a:	80 93 1d 02 	sts	0x021D, r24
	}
}
    452e:	0f 90       	pop	r0
    4530:	cf 91       	pop	r28
    4532:	df 91       	pop	r29
    4534:	ff 91       	pop	r31
    4536:	ef 91       	pop	r30
    4538:	9f 91       	pop	r25
    453a:	8f 91       	pop	r24
    453c:	2f 91       	pop	r18
    453e:	0f 90       	pop	r0
    4540:	00 92 5b 00 	sts	0x005B, r0
    4544:	0f 90       	pop	r0
    4546:	0f be       	out	0x3f, r0	; 63
    4548:	0f 90       	pop	r0
    454a:	1f 90       	pop	r1
    454c:	18 95       	reti

0000454e <__subsf3>:
    454e:	50 58       	subi	r21, 0x80	; 128

00004550 <__addsf3>:
    4550:	bb 27       	eor	r27, r27
    4552:	aa 27       	eor	r26, r26
    4554:	0e d0       	rcall	.+28     	; 0x4572 <__addsf3x>
    4556:	75 c1       	rjmp	.+746    	; 0x4842 <__fp_round>
    4558:	66 d1       	rcall	.+716    	; 0x4826 <__fp_pscA>
    455a:	30 f0       	brcs	.+12     	; 0x4568 <__addsf3+0x18>
    455c:	6b d1       	rcall	.+726    	; 0x4834 <__fp_pscB>
    455e:	20 f0       	brcs	.+8      	; 0x4568 <__addsf3+0x18>
    4560:	31 f4       	brne	.+12     	; 0x456e <__addsf3+0x1e>
    4562:	9f 3f       	cpi	r25, 0xFF	; 255
    4564:	11 f4       	brne	.+4      	; 0x456a <__addsf3+0x1a>
    4566:	1e f4       	brtc	.+6      	; 0x456e <__addsf3+0x1e>
    4568:	5b c1       	rjmp	.+694    	; 0x4820 <__fp_nan>
    456a:	0e f4       	brtc	.+2      	; 0x456e <__addsf3+0x1e>
    456c:	e0 95       	com	r30
    456e:	e7 fb       	bst	r30, 7
    4570:	51 c1       	rjmp	.+674    	; 0x4814 <__fp_inf>

00004572 <__addsf3x>:
    4572:	e9 2f       	mov	r30, r25
    4574:	77 d1       	rcall	.+750    	; 0x4864 <__fp_split3>
    4576:	80 f3       	brcs	.-32     	; 0x4558 <__addsf3+0x8>
    4578:	ba 17       	cp	r27, r26
    457a:	62 07       	cpc	r22, r18
    457c:	73 07       	cpc	r23, r19
    457e:	84 07       	cpc	r24, r20
    4580:	95 07       	cpc	r25, r21
    4582:	18 f0       	brcs	.+6      	; 0x458a <__addsf3x+0x18>
    4584:	71 f4       	brne	.+28     	; 0x45a2 <__addsf3x+0x30>
    4586:	9e f5       	brtc	.+102    	; 0x45ee <__addsf3x+0x7c>
    4588:	8f c1       	rjmp	.+798    	; 0x48a8 <__fp_zero>
    458a:	0e f4       	brtc	.+2      	; 0x458e <__addsf3x+0x1c>
    458c:	e0 95       	com	r30
    458e:	0b 2e       	mov	r0, r27
    4590:	ba 2f       	mov	r27, r26
    4592:	a0 2d       	mov	r26, r0
    4594:	0b 01       	movw	r0, r22
    4596:	b9 01       	movw	r22, r18
    4598:	90 01       	movw	r18, r0
    459a:	0c 01       	movw	r0, r24
    459c:	ca 01       	movw	r24, r20
    459e:	a0 01       	movw	r20, r0
    45a0:	11 24       	eor	r1, r1
    45a2:	ff 27       	eor	r31, r31
    45a4:	59 1b       	sub	r21, r25
    45a6:	99 f0       	breq	.+38     	; 0x45ce <__addsf3x+0x5c>
    45a8:	59 3f       	cpi	r21, 0xF9	; 249
    45aa:	50 f4       	brcc	.+20     	; 0x45c0 <__addsf3x+0x4e>
    45ac:	50 3e       	cpi	r21, 0xE0	; 224
    45ae:	68 f1       	brcs	.+90     	; 0x460a <__addsf3x+0x98>
    45b0:	1a 16       	cp	r1, r26
    45b2:	f0 40       	sbci	r31, 0x00	; 0
    45b4:	a2 2f       	mov	r26, r18
    45b6:	23 2f       	mov	r18, r19
    45b8:	34 2f       	mov	r19, r20
    45ba:	44 27       	eor	r20, r20
    45bc:	58 5f       	subi	r21, 0xF8	; 248
    45be:	f3 cf       	rjmp	.-26     	; 0x45a6 <__addsf3x+0x34>
    45c0:	46 95       	lsr	r20
    45c2:	37 95       	ror	r19
    45c4:	27 95       	ror	r18
    45c6:	a7 95       	ror	r26
    45c8:	f0 40       	sbci	r31, 0x00	; 0
    45ca:	53 95       	inc	r21
    45cc:	c9 f7       	brne	.-14     	; 0x45c0 <__addsf3x+0x4e>
    45ce:	7e f4       	brtc	.+30     	; 0x45ee <__addsf3x+0x7c>
    45d0:	1f 16       	cp	r1, r31
    45d2:	ba 0b       	sbc	r27, r26
    45d4:	62 0b       	sbc	r22, r18
    45d6:	73 0b       	sbc	r23, r19
    45d8:	84 0b       	sbc	r24, r20
    45da:	ba f0       	brmi	.+46     	; 0x460a <__addsf3x+0x98>
    45dc:	91 50       	subi	r25, 0x01	; 1
    45de:	a1 f0       	breq	.+40     	; 0x4608 <__addsf3x+0x96>
    45e0:	ff 0f       	add	r31, r31
    45e2:	bb 1f       	adc	r27, r27
    45e4:	66 1f       	adc	r22, r22
    45e6:	77 1f       	adc	r23, r23
    45e8:	88 1f       	adc	r24, r24
    45ea:	c2 f7       	brpl	.-16     	; 0x45dc <__addsf3x+0x6a>
    45ec:	0e c0       	rjmp	.+28     	; 0x460a <__addsf3x+0x98>
    45ee:	ba 0f       	add	r27, r26
    45f0:	62 1f       	adc	r22, r18
    45f2:	73 1f       	adc	r23, r19
    45f4:	84 1f       	adc	r24, r20
    45f6:	48 f4       	brcc	.+18     	; 0x460a <__addsf3x+0x98>
    45f8:	87 95       	ror	r24
    45fa:	77 95       	ror	r23
    45fc:	67 95       	ror	r22
    45fe:	b7 95       	ror	r27
    4600:	f7 95       	ror	r31
    4602:	9e 3f       	cpi	r25, 0xFE	; 254
    4604:	08 f0       	brcs	.+2      	; 0x4608 <__addsf3x+0x96>
    4606:	b3 cf       	rjmp	.-154    	; 0x456e <__addsf3+0x1e>
    4608:	93 95       	inc	r25
    460a:	88 0f       	add	r24, r24
    460c:	08 f0       	brcs	.+2      	; 0x4610 <__addsf3x+0x9e>
    460e:	99 27       	eor	r25, r25
    4610:	ee 0f       	add	r30, r30
    4612:	97 95       	ror	r25
    4614:	87 95       	ror	r24
    4616:	08 95       	ret

00004618 <__cmpsf2>:
    4618:	d9 d0       	rcall	.+434    	; 0x47cc <__fp_cmp>
    461a:	08 f4       	brcc	.+2      	; 0x461e <__cmpsf2+0x6>
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	08 95       	ret

00004620 <__divsf3>:
    4620:	0c d0       	rcall	.+24     	; 0x463a <__divsf3x>
    4622:	0f c1       	rjmp	.+542    	; 0x4842 <__fp_round>
    4624:	07 d1       	rcall	.+526    	; 0x4834 <__fp_pscB>
    4626:	40 f0       	brcs	.+16     	; 0x4638 <__divsf3+0x18>
    4628:	fe d0       	rcall	.+508    	; 0x4826 <__fp_pscA>
    462a:	30 f0       	brcs	.+12     	; 0x4638 <__divsf3+0x18>
    462c:	21 f4       	brne	.+8      	; 0x4636 <__divsf3+0x16>
    462e:	5f 3f       	cpi	r21, 0xFF	; 255
    4630:	19 f0       	breq	.+6      	; 0x4638 <__divsf3+0x18>
    4632:	f0 c0       	rjmp	.+480    	; 0x4814 <__fp_inf>
    4634:	51 11       	cpse	r21, r1
    4636:	39 c1       	rjmp	.+626    	; 0x48aa <__fp_szero>
    4638:	f3 c0       	rjmp	.+486    	; 0x4820 <__fp_nan>

0000463a <__divsf3x>:
    463a:	14 d1       	rcall	.+552    	; 0x4864 <__fp_split3>
    463c:	98 f3       	brcs	.-26     	; 0x4624 <__divsf3+0x4>

0000463e <__divsf3_pse>:
    463e:	99 23       	and	r25, r25
    4640:	c9 f3       	breq	.-14     	; 0x4634 <__divsf3+0x14>
    4642:	55 23       	and	r21, r21
    4644:	b1 f3       	breq	.-20     	; 0x4632 <__divsf3+0x12>
    4646:	95 1b       	sub	r25, r21
    4648:	55 0b       	sbc	r21, r21
    464a:	bb 27       	eor	r27, r27
    464c:	aa 27       	eor	r26, r26
    464e:	62 17       	cp	r22, r18
    4650:	73 07       	cpc	r23, r19
    4652:	84 07       	cpc	r24, r20
    4654:	38 f0       	brcs	.+14     	; 0x4664 <__divsf3_pse+0x26>
    4656:	9f 5f       	subi	r25, 0xFF	; 255
    4658:	5f 4f       	sbci	r21, 0xFF	; 255
    465a:	22 0f       	add	r18, r18
    465c:	33 1f       	adc	r19, r19
    465e:	44 1f       	adc	r20, r20
    4660:	aa 1f       	adc	r26, r26
    4662:	a9 f3       	breq	.-22     	; 0x464e <__divsf3_pse+0x10>
    4664:	33 d0       	rcall	.+102    	; 0x46cc <__divsf3_pse+0x8e>
    4666:	0e 2e       	mov	r0, r30
    4668:	3a f0       	brmi	.+14     	; 0x4678 <__divsf3_pse+0x3a>
    466a:	e0 e8       	ldi	r30, 0x80	; 128
    466c:	30 d0       	rcall	.+96     	; 0x46ce <__divsf3_pse+0x90>
    466e:	91 50       	subi	r25, 0x01	; 1
    4670:	50 40       	sbci	r21, 0x00	; 0
    4672:	e6 95       	lsr	r30
    4674:	00 1c       	adc	r0, r0
    4676:	ca f7       	brpl	.-14     	; 0x466a <__divsf3_pse+0x2c>
    4678:	29 d0       	rcall	.+82     	; 0x46cc <__divsf3_pse+0x8e>
    467a:	fe 2f       	mov	r31, r30
    467c:	27 d0       	rcall	.+78     	; 0x46cc <__divsf3_pse+0x8e>
    467e:	66 0f       	add	r22, r22
    4680:	77 1f       	adc	r23, r23
    4682:	88 1f       	adc	r24, r24
    4684:	bb 1f       	adc	r27, r27
    4686:	26 17       	cp	r18, r22
    4688:	37 07       	cpc	r19, r23
    468a:	48 07       	cpc	r20, r24
    468c:	ab 07       	cpc	r26, r27
    468e:	b0 e8       	ldi	r27, 0x80	; 128
    4690:	09 f0       	breq	.+2      	; 0x4694 <__divsf3_pse+0x56>
    4692:	bb 0b       	sbc	r27, r27
    4694:	80 2d       	mov	r24, r0
    4696:	bf 01       	movw	r22, r30
    4698:	ff 27       	eor	r31, r31
    469a:	93 58       	subi	r25, 0x83	; 131
    469c:	5f 4f       	sbci	r21, 0xFF	; 255
    469e:	2a f0       	brmi	.+10     	; 0x46aa <__divsf3_pse+0x6c>
    46a0:	9e 3f       	cpi	r25, 0xFE	; 254
    46a2:	51 05       	cpc	r21, r1
    46a4:	68 f0       	brcs	.+26     	; 0x46c0 <__divsf3_pse+0x82>
    46a6:	b6 c0       	rjmp	.+364    	; 0x4814 <__fp_inf>
    46a8:	00 c1       	rjmp	.+512    	; 0x48aa <__fp_szero>
    46aa:	5f 3f       	cpi	r21, 0xFF	; 255
    46ac:	ec f3       	brlt	.-6      	; 0x46a8 <__divsf3_pse+0x6a>
    46ae:	98 3e       	cpi	r25, 0xE8	; 232
    46b0:	dc f3       	brlt	.-10     	; 0x46a8 <__divsf3_pse+0x6a>
    46b2:	86 95       	lsr	r24
    46b4:	77 95       	ror	r23
    46b6:	67 95       	ror	r22
    46b8:	b7 95       	ror	r27
    46ba:	f7 95       	ror	r31
    46bc:	9f 5f       	subi	r25, 0xFF	; 255
    46be:	c9 f7       	brne	.-14     	; 0x46b2 <__divsf3_pse+0x74>
    46c0:	88 0f       	add	r24, r24
    46c2:	91 1d       	adc	r25, r1
    46c4:	96 95       	lsr	r25
    46c6:	87 95       	ror	r24
    46c8:	97 f9       	bld	r25, 7
    46ca:	08 95       	ret
    46cc:	e1 e0       	ldi	r30, 0x01	; 1
    46ce:	66 0f       	add	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	88 1f       	adc	r24, r24
    46d4:	bb 1f       	adc	r27, r27
    46d6:	62 17       	cp	r22, r18
    46d8:	73 07       	cpc	r23, r19
    46da:	84 07       	cpc	r24, r20
    46dc:	ba 07       	cpc	r27, r26
    46de:	20 f0       	brcs	.+8      	; 0x46e8 <__divsf3_pse+0xaa>
    46e0:	62 1b       	sub	r22, r18
    46e2:	73 0b       	sbc	r23, r19
    46e4:	84 0b       	sbc	r24, r20
    46e6:	ba 0b       	sbc	r27, r26
    46e8:	ee 1f       	adc	r30, r30
    46ea:	88 f7       	brcc	.-30     	; 0x46ce <__divsf3_pse+0x90>
    46ec:	e0 95       	com	r30
    46ee:	08 95       	ret

000046f0 <__fixsfsi>:
    46f0:	04 d0       	rcall	.+8      	; 0x46fa <__fixunssfsi>
    46f2:	68 94       	set
    46f4:	b1 11       	cpse	r27, r1
    46f6:	d9 c0       	rjmp	.+434    	; 0x48aa <__fp_szero>
    46f8:	08 95       	ret

000046fa <__fixunssfsi>:
    46fa:	bc d0       	rcall	.+376    	; 0x4874 <__fp_splitA>
    46fc:	88 f0       	brcs	.+34     	; 0x4720 <__fixunssfsi+0x26>
    46fe:	9f 57       	subi	r25, 0x7F	; 127
    4700:	90 f0       	brcs	.+36     	; 0x4726 <__fixunssfsi+0x2c>
    4702:	b9 2f       	mov	r27, r25
    4704:	99 27       	eor	r25, r25
    4706:	b7 51       	subi	r27, 0x17	; 23
    4708:	a0 f0       	brcs	.+40     	; 0x4732 <__fixunssfsi+0x38>
    470a:	d1 f0       	breq	.+52     	; 0x4740 <__fixunssfsi+0x46>
    470c:	66 0f       	add	r22, r22
    470e:	77 1f       	adc	r23, r23
    4710:	88 1f       	adc	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	1a f0       	brmi	.+6      	; 0x471c <__fixunssfsi+0x22>
    4716:	ba 95       	dec	r27
    4718:	c9 f7       	brne	.-14     	; 0x470c <__fixunssfsi+0x12>
    471a:	12 c0       	rjmp	.+36     	; 0x4740 <__fixunssfsi+0x46>
    471c:	b1 30       	cpi	r27, 0x01	; 1
    471e:	81 f0       	breq	.+32     	; 0x4740 <__fixunssfsi+0x46>
    4720:	c3 d0       	rcall	.+390    	; 0x48a8 <__fp_zero>
    4722:	b1 e0       	ldi	r27, 0x01	; 1
    4724:	08 95       	ret
    4726:	c0 c0       	rjmp	.+384    	; 0x48a8 <__fp_zero>
    4728:	67 2f       	mov	r22, r23
    472a:	78 2f       	mov	r23, r24
    472c:	88 27       	eor	r24, r24
    472e:	b8 5f       	subi	r27, 0xF8	; 248
    4730:	39 f0       	breq	.+14     	; 0x4740 <__fixunssfsi+0x46>
    4732:	b9 3f       	cpi	r27, 0xF9	; 249
    4734:	cc f3       	brlt	.-14     	; 0x4728 <__fixunssfsi+0x2e>
    4736:	86 95       	lsr	r24
    4738:	77 95       	ror	r23
    473a:	67 95       	ror	r22
    473c:	b3 95       	inc	r27
    473e:	d9 f7       	brne	.-10     	; 0x4736 <__fixunssfsi+0x3c>
    4740:	3e f4       	brtc	.+14     	; 0x4750 <__fixunssfsi+0x56>
    4742:	90 95       	com	r25
    4744:	80 95       	com	r24
    4746:	70 95       	com	r23
    4748:	61 95       	neg	r22
    474a:	7f 4f       	sbci	r23, 0xFF	; 255
    474c:	8f 4f       	sbci	r24, 0xFF	; 255
    474e:	9f 4f       	sbci	r25, 0xFF	; 255
    4750:	08 95       	ret

00004752 <__floatunsisf>:
    4752:	e8 94       	clt
    4754:	09 c0       	rjmp	.+18     	; 0x4768 <__floatsisf+0x12>

00004756 <__floatsisf>:
    4756:	97 fb       	bst	r25, 7
    4758:	3e f4       	brtc	.+14     	; 0x4768 <__floatsisf+0x12>
    475a:	90 95       	com	r25
    475c:	80 95       	com	r24
    475e:	70 95       	com	r23
    4760:	61 95       	neg	r22
    4762:	7f 4f       	sbci	r23, 0xFF	; 255
    4764:	8f 4f       	sbci	r24, 0xFF	; 255
    4766:	9f 4f       	sbci	r25, 0xFF	; 255
    4768:	99 23       	and	r25, r25
    476a:	a9 f0       	breq	.+42     	; 0x4796 <__floatsisf+0x40>
    476c:	f9 2f       	mov	r31, r25
    476e:	96 e9       	ldi	r25, 0x96	; 150
    4770:	bb 27       	eor	r27, r27
    4772:	93 95       	inc	r25
    4774:	f6 95       	lsr	r31
    4776:	87 95       	ror	r24
    4778:	77 95       	ror	r23
    477a:	67 95       	ror	r22
    477c:	b7 95       	ror	r27
    477e:	f1 11       	cpse	r31, r1
    4780:	f8 cf       	rjmp	.-16     	; 0x4772 <__floatsisf+0x1c>
    4782:	fa f4       	brpl	.+62     	; 0x47c2 <__floatsisf+0x6c>
    4784:	bb 0f       	add	r27, r27
    4786:	11 f4       	brne	.+4      	; 0x478c <__floatsisf+0x36>
    4788:	60 ff       	sbrs	r22, 0
    478a:	1b c0       	rjmp	.+54     	; 0x47c2 <__floatsisf+0x6c>
    478c:	6f 5f       	subi	r22, 0xFF	; 255
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	8f 4f       	sbci	r24, 0xFF	; 255
    4792:	9f 4f       	sbci	r25, 0xFF	; 255
    4794:	16 c0       	rjmp	.+44     	; 0x47c2 <__floatsisf+0x6c>
    4796:	88 23       	and	r24, r24
    4798:	11 f0       	breq	.+4      	; 0x479e <__floatsisf+0x48>
    479a:	96 e9       	ldi	r25, 0x96	; 150
    479c:	11 c0       	rjmp	.+34     	; 0x47c0 <__floatsisf+0x6a>
    479e:	77 23       	and	r23, r23
    47a0:	21 f0       	breq	.+8      	; 0x47aa <__floatsisf+0x54>
    47a2:	9e e8       	ldi	r25, 0x8E	; 142
    47a4:	87 2f       	mov	r24, r23
    47a6:	76 2f       	mov	r23, r22
    47a8:	05 c0       	rjmp	.+10     	; 0x47b4 <__floatsisf+0x5e>
    47aa:	66 23       	and	r22, r22
    47ac:	71 f0       	breq	.+28     	; 0x47ca <__floatsisf+0x74>
    47ae:	96 e8       	ldi	r25, 0x86	; 134
    47b0:	86 2f       	mov	r24, r22
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	60 e0       	ldi	r22, 0x00	; 0
    47b6:	2a f0       	brmi	.+10     	; 0x47c2 <__floatsisf+0x6c>
    47b8:	9a 95       	dec	r25
    47ba:	66 0f       	add	r22, r22
    47bc:	77 1f       	adc	r23, r23
    47be:	88 1f       	adc	r24, r24
    47c0:	da f7       	brpl	.-10     	; 0x47b8 <__floatsisf+0x62>
    47c2:	88 0f       	add	r24, r24
    47c4:	96 95       	lsr	r25
    47c6:	87 95       	ror	r24
    47c8:	97 f9       	bld	r25, 7
    47ca:	08 95       	ret

000047cc <__fp_cmp>:
    47cc:	99 0f       	add	r25, r25
    47ce:	00 08       	sbc	r0, r0
    47d0:	55 0f       	add	r21, r21
    47d2:	aa 0b       	sbc	r26, r26
    47d4:	e0 e8       	ldi	r30, 0x80	; 128
    47d6:	fe ef       	ldi	r31, 0xFE	; 254
    47d8:	16 16       	cp	r1, r22
    47da:	17 06       	cpc	r1, r23
    47dc:	e8 07       	cpc	r30, r24
    47de:	f9 07       	cpc	r31, r25
    47e0:	c0 f0       	brcs	.+48     	; 0x4812 <__fp_cmp+0x46>
    47e2:	12 16       	cp	r1, r18
    47e4:	13 06       	cpc	r1, r19
    47e6:	e4 07       	cpc	r30, r20
    47e8:	f5 07       	cpc	r31, r21
    47ea:	98 f0       	brcs	.+38     	; 0x4812 <__fp_cmp+0x46>
    47ec:	62 1b       	sub	r22, r18
    47ee:	73 0b       	sbc	r23, r19
    47f0:	84 0b       	sbc	r24, r20
    47f2:	95 0b       	sbc	r25, r21
    47f4:	39 f4       	brne	.+14     	; 0x4804 <__fp_cmp+0x38>
    47f6:	0a 26       	eor	r0, r26
    47f8:	61 f0       	breq	.+24     	; 0x4812 <__fp_cmp+0x46>
    47fa:	23 2b       	or	r18, r19
    47fc:	24 2b       	or	r18, r20
    47fe:	25 2b       	or	r18, r21
    4800:	21 f4       	brne	.+8      	; 0x480a <__fp_cmp+0x3e>
    4802:	08 95       	ret
    4804:	0a 26       	eor	r0, r26
    4806:	09 f4       	brne	.+2      	; 0x480a <__fp_cmp+0x3e>
    4808:	a1 40       	sbci	r26, 0x01	; 1
    480a:	a6 95       	lsr	r26
    480c:	8f ef       	ldi	r24, 0xFF	; 255
    480e:	81 1d       	adc	r24, r1
    4810:	81 1d       	adc	r24, r1
    4812:	08 95       	ret

00004814 <__fp_inf>:
    4814:	97 f9       	bld	r25, 7
    4816:	9f 67       	ori	r25, 0x7F	; 127
    4818:	80 e8       	ldi	r24, 0x80	; 128
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	60 e0       	ldi	r22, 0x00	; 0
    481e:	08 95       	ret

00004820 <__fp_nan>:
    4820:	9f ef       	ldi	r25, 0xFF	; 255
    4822:	80 ec       	ldi	r24, 0xC0	; 192
    4824:	08 95       	ret

00004826 <__fp_pscA>:
    4826:	00 24       	eor	r0, r0
    4828:	0a 94       	dec	r0
    482a:	16 16       	cp	r1, r22
    482c:	17 06       	cpc	r1, r23
    482e:	18 06       	cpc	r1, r24
    4830:	09 06       	cpc	r0, r25
    4832:	08 95       	ret

00004834 <__fp_pscB>:
    4834:	00 24       	eor	r0, r0
    4836:	0a 94       	dec	r0
    4838:	12 16       	cp	r1, r18
    483a:	13 06       	cpc	r1, r19
    483c:	14 06       	cpc	r1, r20
    483e:	05 06       	cpc	r0, r21
    4840:	08 95       	ret

00004842 <__fp_round>:
    4842:	09 2e       	mov	r0, r25
    4844:	03 94       	inc	r0
    4846:	00 0c       	add	r0, r0
    4848:	11 f4       	brne	.+4      	; 0x484e <__fp_round+0xc>
    484a:	88 23       	and	r24, r24
    484c:	52 f0       	brmi	.+20     	; 0x4862 <__fp_round+0x20>
    484e:	bb 0f       	add	r27, r27
    4850:	40 f4       	brcc	.+16     	; 0x4862 <__fp_round+0x20>
    4852:	bf 2b       	or	r27, r31
    4854:	11 f4       	brne	.+4      	; 0x485a <__fp_round+0x18>
    4856:	60 ff       	sbrs	r22, 0
    4858:	04 c0       	rjmp	.+8      	; 0x4862 <__fp_round+0x20>
    485a:	6f 5f       	subi	r22, 0xFF	; 255
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	8f 4f       	sbci	r24, 0xFF	; 255
    4860:	9f 4f       	sbci	r25, 0xFF	; 255
    4862:	08 95       	ret

00004864 <__fp_split3>:
    4864:	57 fd       	sbrc	r21, 7
    4866:	90 58       	subi	r25, 0x80	; 128
    4868:	44 0f       	add	r20, r20
    486a:	55 1f       	adc	r21, r21
    486c:	59 f0       	breq	.+22     	; 0x4884 <__fp_splitA+0x10>
    486e:	5f 3f       	cpi	r21, 0xFF	; 255
    4870:	71 f0       	breq	.+28     	; 0x488e <__fp_splitA+0x1a>
    4872:	47 95       	ror	r20

00004874 <__fp_splitA>:
    4874:	88 0f       	add	r24, r24
    4876:	97 fb       	bst	r25, 7
    4878:	99 1f       	adc	r25, r25
    487a:	61 f0       	breq	.+24     	; 0x4894 <__fp_splitA+0x20>
    487c:	9f 3f       	cpi	r25, 0xFF	; 255
    487e:	79 f0       	breq	.+30     	; 0x489e <__fp_splitA+0x2a>
    4880:	87 95       	ror	r24
    4882:	08 95       	ret
    4884:	12 16       	cp	r1, r18
    4886:	13 06       	cpc	r1, r19
    4888:	14 06       	cpc	r1, r20
    488a:	55 1f       	adc	r21, r21
    488c:	f2 cf       	rjmp	.-28     	; 0x4872 <__fp_split3+0xe>
    488e:	46 95       	lsr	r20
    4890:	f1 df       	rcall	.-30     	; 0x4874 <__fp_splitA>
    4892:	08 c0       	rjmp	.+16     	; 0x48a4 <__fp_splitA+0x30>
    4894:	16 16       	cp	r1, r22
    4896:	17 06       	cpc	r1, r23
    4898:	18 06       	cpc	r1, r24
    489a:	99 1f       	adc	r25, r25
    489c:	f1 cf       	rjmp	.-30     	; 0x4880 <__fp_splitA+0xc>
    489e:	86 95       	lsr	r24
    48a0:	71 05       	cpc	r23, r1
    48a2:	61 05       	cpc	r22, r1
    48a4:	08 94       	sec
    48a6:	08 95       	ret

000048a8 <__fp_zero>:
    48a8:	e8 94       	clt

000048aa <__fp_szero>:
    48aa:	bb 27       	eor	r27, r27
    48ac:	66 27       	eor	r22, r22
    48ae:	77 27       	eor	r23, r23
    48b0:	cb 01       	movw	r24, r22
    48b2:	97 f9       	bld	r25, 7
    48b4:	08 95       	ret

000048b6 <__gesf2>:
    48b6:	8a df       	rcall	.-236    	; 0x47cc <__fp_cmp>
    48b8:	08 f4       	brcc	.+2      	; 0x48bc <__gesf2+0x6>
    48ba:	8f ef       	ldi	r24, 0xFF	; 255
    48bc:	08 95       	ret

000048be <__mulsf3>:
    48be:	0b d0       	rcall	.+22     	; 0x48d6 <__mulsf3x>
    48c0:	c0 cf       	rjmp	.-128    	; 0x4842 <__fp_round>
    48c2:	b1 df       	rcall	.-158    	; 0x4826 <__fp_pscA>
    48c4:	28 f0       	brcs	.+10     	; 0x48d0 <__mulsf3+0x12>
    48c6:	b6 df       	rcall	.-148    	; 0x4834 <__fp_pscB>
    48c8:	18 f0       	brcs	.+6      	; 0x48d0 <__mulsf3+0x12>
    48ca:	95 23       	and	r25, r21
    48cc:	09 f0       	breq	.+2      	; 0x48d0 <__mulsf3+0x12>
    48ce:	a2 cf       	rjmp	.-188    	; 0x4814 <__fp_inf>
    48d0:	a7 cf       	rjmp	.-178    	; 0x4820 <__fp_nan>
    48d2:	11 24       	eor	r1, r1
    48d4:	ea cf       	rjmp	.-44     	; 0x48aa <__fp_szero>

000048d6 <__mulsf3x>:
    48d6:	c6 df       	rcall	.-116    	; 0x4864 <__fp_split3>
    48d8:	a0 f3       	brcs	.-24     	; 0x48c2 <__mulsf3+0x4>

000048da <__mulsf3_pse>:
    48da:	95 9f       	mul	r25, r21
    48dc:	d1 f3       	breq	.-12     	; 0x48d2 <__mulsf3+0x14>
    48de:	95 0f       	add	r25, r21
    48e0:	50 e0       	ldi	r21, 0x00	; 0
    48e2:	55 1f       	adc	r21, r21
    48e4:	62 9f       	mul	r22, r18
    48e6:	f0 01       	movw	r30, r0
    48e8:	72 9f       	mul	r23, r18
    48ea:	bb 27       	eor	r27, r27
    48ec:	f0 0d       	add	r31, r0
    48ee:	b1 1d       	adc	r27, r1
    48f0:	63 9f       	mul	r22, r19
    48f2:	aa 27       	eor	r26, r26
    48f4:	f0 0d       	add	r31, r0
    48f6:	b1 1d       	adc	r27, r1
    48f8:	aa 1f       	adc	r26, r26
    48fa:	64 9f       	mul	r22, r20
    48fc:	66 27       	eor	r22, r22
    48fe:	b0 0d       	add	r27, r0
    4900:	a1 1d       	adc	r26, r1
    4902:	66 1f       	adc	r22, r22
    4904:	82 9f       	mul	r24, r18
    4906:	22 27       	eor	r18, r18
    4908:	b0 0d       	add	r27, r0
    490a:	a1 1d       	adc	r26, r1
    490c:	62 1f       	adc	r22, r18
    490e:	73 9f       	mul	r23, r19
    4910:	b0 0d       	add	r27, r0
    4912:	a1 1d       	adc	r26, r1
    4914:	62 1f       	adc	r22, r18
    4916:	83 9f       	mul	r24, r19
    4918:	a0 0d       	add	r26, r0
    491a:	61 1d       	adc	r22, r1
    491c:	22 1f       	adc	r18, r18
    491e:	74 9f       	mul	r23, r20
    4920:	33 27       	eor	r19, r19
    4922:	a0 0d       	add	r26, r0
    4924:	61 1d       	adc	r22, r1
    4926:	23 1f       	adc	r18, r19
    4928:	84 9f       	mul	r24, r20
    492a:	60 0d       	add	r22, r0
    492c:	21 1d       	adc	r18, r1
    492e:	82 2f       	mov	r24, r18
    4930:	76 2f       	mov	r23, r22
    4932:	6a 2f       	mov	r22, r26
    4934:	11 24       	eor	r1, r1
    4936:	9f 57       	subi	r25, 0x7F	; 127
    4938:	50 40       	sbci	r21, 0x00	; 0
    493a:	8a f0       	brmi	.+34     	; 0x495e <__mulsf3_pse+0x84>
    493c:	e1 f0       	breq	.+56     	; 0x4976 <__mulsf3_pse+0x9c>
    493e:	88 23       	and	r24, r24
    4940:	4a f0       	brmi	.+18     	; 0x4954 <__mulsf3_pse+0x7a>
    4942:	ee 0f       	add	r30, r30
    4944:	ff 1f       	adc	r31, r31
    4946:	bb 1f       	adc	r27, r27
    4948:	66 1f       	adc	r22, r22
    494a:	77 1f       	adc	r23, r23
    494c:	88 1f       	adc	r24, r24
    494e:	91 50       	subi	r25, 0x01	; 1
    4950:	50 40       	sbci	r21, 0x00	; 0
    4952:	a9 f7       	brne	.-22     	; 0x493e <__mulsf3_pse+0x64>
    4954:	9e 3f       	cpi	r25, 0xFE	; 254
    4956:	51 05       	cpc	r21, r1
    4958:	70 f0       	brcs	.+28     	; 0x4976 <__mulsf3_pse+0x9c>
    495a:	5c cf       	rjmp	.-328    	; 0x4814 <__fp_inf>
    495c:	a6 cf       	rjmp	.-180    	; 0x48aa <__fp_szero>
    495e:	5f 3f       	cpi	r21, 0xFF	; 255
    4960:	ec f3       	brlt	.-6      	; 0x495c <__mulsf3_pse+0x82>
    4962:	98 3e       	cpi	r25, 0xE8	; 232
    4964:	dc f3       	brlt	.-10     	; 0x495c <__mulsf3_pse+0x82>
    4966:	86 95       	lsr	r24
    4968:	77 95       	ror	r23
    496a:	67 95       	ror	r22
    496c:	b7 95       	ror	r27
    496e:	f7 95       	ror	r31
    4970:	e7 95       	ror	r30
    4972:	9f 5f       	subi	r25, 0xFF	; 255
    4974:	c1 f7       	brne	.-16     	; 0x4966 <__mulsf3_pse+0x8c>
    4976:	fe 2b       	or	r31, r30
    4978:	88 0f       	add	r24, r24
    497a:	91 1d       	adc	r25, r1
    497c:	96 95       	lsr	r25
    497e:	87 95       	ror	r24
    4980:	97 f9       	bld	r25, 7
    4982:	08 95       	ret

00004984 <calloc>:
    4984:	0f 93       	push	r16
    4986:	1f 93       	push	r17
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	68 9f       	mul	r22, r24
    498e:	80 01       	movw	r16, r0
    4990:	69 9f       	mul	r22, r25
    4992:	10 0d       	add	r17, r0
    4994:	78 9f       	mul	r23, r24
    4996:	10 0d       	add	r17, r0
    4998:	11 24       	eor	r1, r1
    499a:	c8 01       	movw	r24, r16
    499c:	0d d0       	rcall	.+26     	; 0x49b8 <malloc>
    499e:	ec 01       	movw	r28, r24
    49a0:	00 97       	sbiw	r24, 0x00	; 0
    49a2:	21 f0       	breq	.+8      	; 0x49ac <calloc+0x28>
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	a8 01       	movw	r20, r16
    49aa:	0b d1       	rcall	.+534    	; 0x4bc2 <memset>
    49ac:	ce 01       	movw	r24, r28
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	08 95       	ret

000049b8 <malloc>:
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	bc 01       	movw	r22, r24
    49be:	82 30       	cpi	r24, 0x02	; 2
    49c0:	91 05       	cpc	r25, r1
    49c2:	10 f4       	brcc	.+4      	; 0x49c8 <malloc+0x10>
    49c4:	62 e0       	ldi	r22, 0x02	; 2
    49c6:	70 e0       	ldi	r23, 0x00	; 0
    49c8:	a0 91 20 03 	lds	r26, 0x0320
    49cc:	b0 91 21 03 	lds	r27, 0x0321
    49d0:	ed 01       	movw	r28, r26
    49d2:	e0 e0       	ldi	r30, 0x00	; 0
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	21 c0       	rjmp	.+66     	; 0x4a1e <malloc+0x66>
    49dc:	88 81       	ld	r24, Y
    49de:	99 81       	ldd	r25, Y+1	; 0x01
    49e0:	86 17       	cp	r24, r22
    49e2:	97 07       	cpc	r25, r23
    49e4:	69 f4       	brne	.+26     	; 0x4a00 <malloc+0x48>
    49e6:	8a 81       	ldd	r24, Y+2	; 0x02
    49e8:	9b 81       	ldd	r25, Y+3	; 0x03
    49ea:	30 97       	sbiw	r30, 0x00	; 0
    49ec:	19 f0       	breq	.+6      	; 0x49f4 <malloc+0x3c>
    49ee:	93 83       	std	Z+3, r25	; 0x03
    49f0:	82 83       	std	Z+2, r24	; 0x02
    49f2:	04 c0       	rjmp	.+8      	; 0x49fc <malloc+0x44>
    49f4:	90 93 21 03 	sts	0x0321, r25
    49f8:	80 93 20 03 	sts	0x0320, r24
    49fc:	fe 01       	movw	r30, r28
    49fe:	34 c0       	rjmp	.+104    	; 0x4a68 <malloc+0xb0>
    4a00:	68 17       	cp	r22, r24
    4a02:	79 07       	cpc	r23, r25
    4a04:	38 f4       	brcc	.+14     	; 0x4a14 <malloc+0x5c>
    4a06:	41 15       	cp	r20, r1
    4a08:	51 05       	cpc	r21, r1
    4a0a:	19 f0       	breq	.+6      	; 0x4a12 <malloc+0x5a>
    4a0c:	84 17       	cp	r24, r20
    4a0e:	95 07       	cpc	r25, r21
    4a10:	08 f4       	brcc	.+2      	; 0x4a14 <malloc+0x5c>
    4a12:	ac 01       	movw	r20, r24
    4a14:	fe 01       	movw	r30, r28
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1a:	9c 01       	movw	r18, r24
    4a1c:	e9 01       	movw	r28, r18
    4a1e:	20 97       	sbiw	r28, 0x00	; 0
    4a20:	e9 f6       	brne	.-70     	; 0x49dc <malloc+0x24>
    4a22:	41 15       	cp	r20, r1
    4a24:	51 05       	cpc	r21, r1
    4a26:	a9 f1       	breq	.+106    	; 0x4a92 <malloc+0xda>
    4a28:	ca 01       	movw	r24, r20
    4a2a:	86 1b       	sub	r24, r22
    4a2c:	97 0b       	sbc	r25, r23
    4a2e:	04 97       	sbiw	r24, 0x04	; 4
    4a30:	08 f4       	brcc	.+2      	; 0x4a34 <malloc+0x7c>
    4a32:	ba 01       	movw	r22, r20
    4a34:	e0 e0       	ldi	r30, 0x00	; 0
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	2a c0       	rjmp	.+84     	; 0x4a8e <malloc+0xd6>
    4a3a:	8d 91       	ld	r24, X+
    4a3c:	9c 91       	ld	r25, X
    4a3e:	11 97       	sbiw	r26, 0x01	; 1
    4a40:	84 17       	cp	r24, r20
    4a42:	95 07       	cpc	r25, r21
    4a44:	f9 f4       	brne	.+62     	; 0x4a84 <malloc+0xcc>
    4a46:	64 17       	cp	r22, r20
    4a48:	75 07       	cpc	r23, r21
    4a4a:	81 f4       	brne	.+32     	; 0x4a6c <malloc+0xb4>
    4a4c:	12 96       	adiw	r26, 0x02	; 2
    4a4e:	8d 91       	ld	r24, X+
    4a50:	9c 91       	ld	r25, X
    4a52:	13 97       	sbiw	r26, 0x03	; 3
    4a54:	30 97       	sbiw	r30, 0x00	; 0
    4a56:	19 f0       	breq	.+6      	; 0x4a5e <malloc+0xa6>
    4a58:	93 83       	std	Z+3, r25	; 0x03
    4a5a:	82 83       	std	Z+2, r24	; 0x02
    4a5c:	04 c0       	rjmp	.+8      	; 0x4a66 <malloc+0xae>
    4a5e:	90 93 21 03 	sts	0x0321, r25
    4a62:	80 93 20 03 	sts	0x0320, r24
    4a66:	fd 01       	movw	r30, r26
    4a68:	32 96       	adiw	r30, 0x02	; 2
    4a6a:	4f c0       	rjmp	.+158    	; 0x4b0a <malloc+0x152>
    4a6c:	ca 01       	movw	r24, r20
    4a6e:	86 1b       	sub	r24, r22
    4a70:	97 0b       	sbc	r25, r23
    4a72:	fd 01       	movw	r30, r26
    4a74:	e8 0f       	add	r30, r24
    4a76:	f9 1f       	adc	r31, r25
    4a78:	61 93       	st	Z+, r22
    4a7a:	71 93       	st	Z+, r23
    4a7c:	02 97       	sbiw	r24, 0x02	; 2
    4a7e:	8d 93       	st	X+, r24
    4a80:	9c 93       	st	X, r25
    4a82:	43 c0       	rjmp	.+134    	; 0x4b0a <malloc+0x152>
    4a84:	fd 01       	movw	r30, r26
    4a86:	82 81       	ldd	r24, Z+2	; 0x02
    4a88:	93 81       	ldd	r25, Z+3	; 0x03
    4a8a:	9c 01       	movw	r18, r24
    4a8c:	d9 01       	movw	r26, r18
    4a8e:	10 97       	sbiw	r26, 0x00	; 0
    4a90:	a1 f6       	brne	.-88     	; 0x4a3a <malloc+0x82>
    4a92:	80 91 1e 03 	lds	r24, 0x031E
    4a96:	90 91 1f 03 	lds	r25, 0x031F
    4a9a:	89 2b       	or	r24, r25
    4a9c:	41 f4       	brne	.+16     	; 0x4aae <malloc+0xf6>
    4a9e:	80 91 02 01 	lds	r24, 0x0102
    4aa2:	90 91 03 01 	lds	r25, 0x0103
    4aa6:	90 93 1f 03 	sts	0x031F, r25
    4aaa:	80 93 1e 03 	sts	0x031E, r24
    4aae:	40 91 04 01 	lds	r20, 0x0104
    4ab2:	50 91 05 01 	lds	r21, 0x0105
    4ab6:	41 15       	cp	r20, r1
    4ab8:	51 05       	cpc	r21, r1
    4aba:	41 f4       	brne	.+16     	; 0x4acc <malloc+0x114>
    4abc:	4d b7       	in	r20, 0x3d	; 61
    4abe:	5e b7       	in	r21, 0x3e	; 62
    4ac0:	80 91 00 01 	lds	r24, 0x0100
    4ac4:	90 91 01 01 	lds	r25, 0x0101
    4ac8:	48 1b       	sub	r20, r24
    4aca:	59 0b       	sbc	r21, r25
    4acc:	20 91 1e 03 	lds	r18, 0x031E
    4ad0:	30 91 1f 03 	lds	r19, 0x031F
    4ad4:	24 17       	cp	r18, r20
    4ad6:	35 07       	cpc	r19, r21
    4ad8:	b0 f4       	brcc	.+44     	; 0x4b06 <malloc+0x14e>
    4ada:	ca 01       	movw	r24, r20
    4adc:	82 1b       	sub	r24, r18
    4ade:	93 0b       	sbc	r25, r19
    4ae0:	86 17       	cp	r24, r22
    4ae2:	97 07       	cpc	r25, r23
    4ae4:	80 f0       	brcs	.+32     	; 0x4b06 <malloc+0x14e>
    4ae6:	ab 01       	movw	r20, r22
    4ae8:	4e 5f       	subi	r20, 0xFE	; 254
    4aea:	5f 4f       	sbci	r21, 0xFF	; 255
    4aec:	84 17       	cp	r24, r20
    4aee:	95 07       	cpc	r25, r21
    4af0:	50 f0       	brcs	.+20     	; 0x4b06 <malloc+0x14e>
    4af2:	42 0f       	add	r20, r18
    4af4:	53 1f       	adc	r21, r19
    4af6:	50 93 1f 03 	sts	0x031F, r21
    4afa:	40 93 1e 03 	sts	0x031E, r20
    4afe:	f9 01       	movw	r30, r18
    4b00:	61 93       	st	Z+, r22
    4b02:	71 93       	st	Z+, r23
    4b04:	02 c0       	rjmp	.+4      	; 0x4b0a <malloc+0x152>
    4b06:	e0 e0       	ldi	r30, 0x00	; 0
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	cf 01       	movw	r24, r30
    4b0c:	df 91       	pop	r29
    4b0e:	cf 91       	pop	r28
    4b10:	08 95       	ret

00004b12 <free>:
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	09 f4       	brne	.+2      	; 0x4b1c <free+0xa>
    4b1a:	50 c0       	rjmp	.+160    	; 0x4bbc <free+0xaa>
    4b1c:	ec 01       	movw	r28, r24
    4b1e:	22 97       	sbiw	r28, 0x02	; 2
    4b20:	1b 82       	std	Y+3, r1	; 0x03
    4b22:	1a 82       	std	Y+2, r1	; 0x02
    4b24:	a0 91 20 03 	lds	r26, 0x0320
    4b28:	b0 91 21 03 	lds	r27, 0x0321
    4b2c:	10 97       	sbiw	r26, 0x00	; 0
    4b2e:	09 f1       	breq	.+66     	; 0x4b72 <free+0x60>
    4b30:	40 e0       	ldi	r20, 0x00	; 0
    4b32:	50 e0       	ldi	r21, 0x00	; 0
    4b34:	ac 17       	cp	r26, r28
    4b36:	bd 07       	cpc	r27, r29
    4b38:	08 f1       	brcs	.+66     	; 0x4b7c <free+0x6a>
    4b3a:	bb 83       	std	Y+3, r27	; 0x03
    4b3c:	aa 83       	std	Y+2, r26	; 0x02
    4b3e:	fe 01       	movw	r30, r28
    4b40:	21 91       	ld	r18, Z+
    4b42:	31 91       	ld	r19, Z+
    4b44:	e2 0f       	add	r30, r18
    4b46:	f3 1f       	adc	r31, r19
    4b48:	ae 17       	cp	r26, r30
    4b4a:	bf 07       	cpc	r27, r31
    4b4c:	79 f4       	brne	.+30     	; 0x4b6c <free+0x5a>
    4b4e:	8d 91       	ld	r24, X+
    4b50:	9c 91       	ld	r25, X
    4b52:	11 97       	sbiw	r26, 0x01	; 1
    4b54:	28 0f       	add	r18, r24
    4b56:	39 1f       	adc	r19, r25
    4b58:	2e 5f       	subi	r18, 0xFE	; 254
    4b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5c:	39 83       	std	Y+1, r19	; 0x01
    4b5e:	28 83       	st	Y, r18
    4b60:	12 96       	adiw	r26, 0x02	; 2
    4b62:	8d 91       	ld	r24, X+
    4b64:	9c 91       	ld	r25, X
    4b66:	13 97       	sbiw	r26, 0x03	; 3
    4b68:	9b 83       	std	Y+3, r25	; 0x03
    4b6a:	8a 83       	std	Y+2, r24	; 0x02
    4b6c:	41 15       	cp	r20, r1
    4b6e:	51 05       	cpc	r21, r1
    4b70:	71 f4       	brne	.+28     	; 0x4b8e <free+0x7c>
    4b72:	d0 93 21 03 	sts	0x0321, r29
    4b76:	c0 93 20 03 	sts	0x0320, r28
    4b7a:	20 c0       	rjmp	.+64     	; 0x4bbc <free+0xaa>
    4b7c:	12 96       	adiw	r26, 0x02	; 2
    4b7e:	8d 91       	ld	r24, X+
    4b80:	9c 91       	ld	r25, X
    4b82:	13 97       	sbiw	r26, 0x03	; 3
    4b84:	ad 01       	movw	r20, r26
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	11 f0       	breq	.+4      	; 0x4b8e <free+0x7c>
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	d3 cf       	rjmp	.-90     	; 0x4b34 <free+0x22>
    4b8e:	fa 01       	movw	r30, r20
    4b90:	d3 83       	std	Z+3, r29	; 0x03
    4b92:	c2 83       	std	Z+2, r28	; 0x02
    4b94:	21 91       	ld	r18, Z+
    4b96:	31 91       	ld	r19, Z+
    4b98:	e2 0f       	add	r30, r18
    4b9a:	f3 1f       	adc	r31, r19
    4b9c:	ce 17       	cp	r28, r30
    4b9e:	df 07       	cpc	r29, r31
    4ba0:	69 f4       	brne	.+26     	; 0x4bbc <free+0xaa>
    4ba2:	88 81       	ld	r24, Y
    4ba4:	99 81       	ldd	r25, Y+1	; 0x01
    4ba6:	28 0f       	add	r18, r24
    4ba8:	39 1f       	adc	r19, r25
    4baa:	2e 5f       	subi	r18, 0xFE	; 254
    4bac:	3f 4f       	sbci	r19, 0xFF	; 255
    4bae:	fa 01       	movw	r30, r20
    4bb0:	31 83       	std	Z+1, r19	; 0x01
    4bb2:	20 83       	st	Z, r18
    4bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb8:	93 83       	std	Z+3, r25	; 0x03
    4bba:	82 83       	std	Z+2, r24	; 0x02
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	08 95       	ret

00004bc2 <memset>:
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	01 c0       	rjmp	.+2      	; 0x4bc8 <memset+0x6>
    4bc6:	6d 93       	st	X+, r22
    4bc8:	41 50       	subi	r20, 0x01	; 1
    4bca:	50 40       	sbci	r21, 0x00	; 0
    4bcc:	e0 f7       	brcc	.-8      	; 0x4bc6 <memset+0x4>
    4bce:	08 95       	ret

00004bd0 <_exit>:
    4bd0:	f8 94       	cli

00004bd2 <__stop_program>:
    4bd2:	ff cf       	rjmp	.-2      	; 0x4bd2 <__stop_program>
