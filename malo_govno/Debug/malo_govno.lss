
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000013c4  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800106  00800106  0000145e  2**0
                  ALLOC
  3 .debug_aranges 00000298  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000055c  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a9a  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090b  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ba7  00000000  00000000  00003ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00005ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c6  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000250  00000000  00000000  00006776  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	servo_set_duty_cycle_kisobran( 255-(236.0 - ((double)angle / 90.0) * 11.4));

}

static void servo_set_duty_cycle_vrata(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0f c4       	rjmp	.+2078   	; 0x850 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b6 c1       	rjmp	.+876    	; 0x3b6 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c5       	rjmp	.+2886   	; 0xb9c <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c5       	rjmp	.+2748   	; 0xb1a <__vector_23>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	16 c6       	rjmp	.+3116   	; 0xcae <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	d1 c5       	rjmp	.+2978   	; 0xc2c <__vector_34>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ec       	ldi	r30, 0xC4	; 196
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 34       	cpi	r26, 0x4B	; 75
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	19 d4       	rcall	.+2098   	; 0x91a <system_init>
	while(1)
	{
		servo_set_kisobran_position(-86);
      e8:	8a ea       	ldi	r24, 0xAA	; 170
      ea:	26 d1       	rcall	.+588    	; 0x338 <servo_set_kisobran_position>
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	aa e7       	ldi	r26, 0x7A	; 122
      f2:	b5 e4       	ldi	r27, 0x45	; 69
      f4:	8b 87       	std	Y+11, r24	; 0x0b
      f6:	9c 87       	std	Y+12, r25	; 0x0c
      f8:	ad 87       	std	Y+13, r26	; 0x0d
      fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fc:	6b 85       	ldd	r22, Y+11	; 0x0b
      fe:	7c 85       	ldd	r23, Y+12	; 0x0c
     100:	8d 85       	ldd	r24, Y+13	; 0x0d
     102:	9e 85       	ldd	r25, Y+14	; 0x0e
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e4       	ldi	r19, 0x40	; 64
     108:	4c e1       	ldi	r20, 0x1C	; 28
     10a:	55 e4       	ldi	r21, 0x45	; 69
     10c:	d0 d7       	rcall	.+4000   	; 0x10ae <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	6e d6       	rcall	.+3292   	; 0xe08 <__cmpsf2>
     12c:	88 23       	and	r24, r24
     12e:	2c f4       	brge	.+10     	; 0x13a <main+0x68>
		__ticks = 1;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	9e 83       	std	Y+6, r25	; 0x06
     136:	8d 83       	std	Y+5, r24	; 0x05
     138:	3b c0       	rjmp	.+118    	; 0x1b0 <main+0xde>
	else if (__tmp > 65535)
     13a:	6f 81       	ldd	r22, Y+7	; 0x07
     13c:	78 85       	ldd	r23, Y+8	; 0x08
     13e:	89 85       	ldd	r24, Y+9	; 0x09
     140:	9a 85       	ldd	r25, Y+10	; 0x0a
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	3f ef       	ldi	r19, 0xFF	; 255
     146:	4f e7       	ldi	r20, 0x7F	; 127
     148:	57 e4       	ldi	r21, 0x47	; 71
     14a:	ad d7       	rcall	.+3930   	; 0x10a6 <__gesf2>
     14c:	18 16       	cp	r1, r24
     14e:	3c f5       	brge	.+78     	; 0x19e <main+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     150:	6b 85       	ldd	r22, Y+11	; 0x0b
     152:	7c 85       	ldd	r23, Y+12	; 0x0c
     154:	8d 85       	ldd	r24, Y+13	; 0x0d
     156:	9e 85       	ldd	r25, Y+14	; 0x0e
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	a6 d7       	rcall	.+3916   	; 0x10ae <__mulsf3>
     162:	dc 01       	movw	r26, r24
     164:	cb 01       	movw	r24, r22
     166:	bc 01       	movw	r22, r24
     168:	cd 01       	movw	r24, r26
     16a:	bf d6       	rcall	.+3454   	; 0xeea <__fixunssfsi>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	9e 83       	std	Y+6, r25	; 0x06
     172:	8d 83       	std	Y+5, r24	; 0x05
     174:	0f c0       	rjmp	.+30     	; 0x194 <main+0xc2>
     176:	8a ef       	ldi	r24, 0xFA	; 250
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9c 83       	std	Y+4, r25	; 0x04
     17c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17e:	8b 81       	ldd	r24, Y+3	; 0x03
     180:	9c 81       	ldd	r25, Y+4	; 0x04
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <main+0xb0>
     186:	9c 83       	std	Y+4, r25	; 0x04
     188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	9e 81       	ldd	r25, Y+6	; 0x06
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	9e 83       	std	Y+6, r25	; 0x06
     192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     194:	8d 81       	ldd	r24, Y+5	; 0x05
     196:	9e 81       	ldd	r25, Y+6	; 0x06
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	69 f7       	brne	.-38     	; 0x176 <main+0xa4>
     19c:	13 c0       	rjmp	.+38     	; 0x1c4 <main+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     19e:	6f 81       	ldd	r22, Y+7	; 0x07
     1a0:	78 85       	ldd	r23, Y+8	; 0x08
     1a2:	89 85       	ldd	r24, Y+9	; 0x09
     1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a6:	a1 d6       	rcall	.+3394   	; 0xeea <__fixunssfsi>
     1a8:	dc 01       	movw	r26, r24
     1aa:	cb 01       	movw	r24, r22
     1ac:	9e 83       	std	Y+6, r25	; 0x06
     1ae:	8d 83       	std	Y+5, r24	; 0x05
     1b0:	8d 81       	ldd	r24, Y+5	; 0x05
     1b2:	9e 81       	ldd	r25, Y+6	; 0x06
     1b4:	9a 83       	std	Y+2, r25	; 0x02
     1b6:	89 83       	std	Y+1, r24	; 0x01
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xea>
     1c0:	9a 83       	std	Y+2, r25	; 0x02
     1c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
		servo_set_kisobran_position(90);
     1c4:	8a e5       	ldi	r24, 0x5A	; 90
     1c6:	b8 d0       	rcall	.+368    	; 0x338 <servo_set_kisobran_position>
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0xf6>

000001ca <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	df 93       	push	r29
     1d0:	cf 93       	push	r28
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <servo_init+0xa>
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1dc:	ad e2       	ldi	r26, 0x2D	; 45
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	ed e2       	ldi	r30, 0x2D	; 45
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	88 63       	ori	r24, 0x38	; 56
     1e8:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     1ea:	e4 e9       	ldi	r30, 0x94	; 148
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	11 82       	std	Z+1, r1	; 0x01
     1f0:	10 82       	st	Z, r1
	OCR3A = 0;
     1f2:	e8 e9       	ldi	r30, 0x98	; 152
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	11 82       	std	Z+1, r1	; 0x01
     1f8:	10 82       	st	Z, r1
	OCR3B = 0;
     1fa:	ea e9       	ldi	r30, 0x9A	; 154
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	11 82       	std	Z+1, r1	; 0x01
     200:	10 82       	st	Z, r1
	OCR3C = 0;
     202:	ec e9       	ldi	r30, 0x9C	; 156
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	11 82       	std	Z+1, r1	; 0x01
     208:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     20a:	e0 e9       	ldi	r30, 0x90	; 144
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	8e eb       	ldi	r24, 0xBE	; 190
     210:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     212:	e1 e9       	ldi	r30, 0x91	; 145
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	8a e1       	ldi	r24, 0x1A	; 26
     218:	80 83       	st	Z, r24
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     21a:	06 e9       	ldi	r16, 0x96	; 150
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	cc 01       	movw	r24, r24
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	8a d6       	rcall	.+3348   	; 0xf42 <__floatunsisf>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	51 e4       	ldi	r21, 0x41	; 65
     23e:	37 d7       	rcall	.+3694   	; 0x10ae <__mulsf3>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	9c 01       	movw	r18, r24
     246:	ad 01       	movw	r20, r26
     248:	60 e8       	ldi	r22, 0x80	; 128
     24a:	76 e9       	ldi	r23, 0x96	; 150
     24c:	88 e1       	ldi	r24, 0x18	; 24
     24e:	9b e4       	ldi	r25, 0x4B	; 75
     250:	df d5       	rcall	.+3006   	; 0xe10 <__divsf3>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	bc 01       	movw	r22, r24
     258:	cd 01       	movw	r24, r26
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	5f e3       	ldi	r21, 0x3F	; 63
     262:	6e d5       	rcall	.+2780   	; 0xd40 <__addsf3>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	bc 01       	movw	r22, r24
     26a:	cd 01       	movw	r24, r26
     26c:	3e d6       	rcall	.+3196   	; 0xeea <__fixunssfsi>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	f8 01       	movw	r30, r16
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
}//END OF servo_init
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	cf 91       	pop	r28
     27e:	df 91       	pop	r29
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	08 95       	ret

00000286 <servo_set_duty_cycle_kisobran>:


static void servo_set_duty_cycle_kisobran(int16_t value)
{
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	00 d0       	rcall	.+0      	; 0x294 <servo_set_duty_cycle_kisobran+0xe>
     294:	00 d0       	rcall	.+0      	; 0x296 <servo_set_duty_cycle_kisobran+0x10>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	9c 83       	std	Y+4, r25	; 0x04
     29c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     29e:	e6 e9       	ldi	r30, 0x96	; 150
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	cc 01       	movw	r24, r24
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	bc 01       	movw	r22, r24
     2ae:	cd 01       	movw	r24, r26
     2b0:	48 d6       	rcall	.+3216   	; 0xf42 <__floatunsisf>
     2b2:	dc 01       	movw	r26, r24
     2b4:	cb 01       	movw	r24, r22
     2b6:	bc 01       	movw	r22, r24
     2b8:	cd 01       	movw	r24, r26
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4f e7       	ldi	r20, 0x7F	; 127
     2c0:	53 e4       	ldi	r21, 0x43	; 67
     2c2:	a6 d5       	rcall	.+2892   	; 0xe10 <__divsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	7c 01       	movw	r14, r24
     2ca:	8d 01       	movw	r16, r26
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	aa 27       	eor	r26, r26
     2d2:	97 fd       	sbrc	r25, 7
     2d4:	a0 95       	com	r26
     2d6:	ba 2f       	mov	r27, r26
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	34 d6       	rcall	.+3176   	; 0xf46 <__floatsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c8 01       	movw	r24, r16
     2e4:	b7 01       	movw	r22, r14
     2e6:	e3 d6       	rcall	.+3526   	; 0x10ae <__mulsf3>
     2e8:	dc 01       	movw	r26, r24
     2ea:	cb 01       	movw	r24, r22
     2ec:	bc 01       	movw	r22, r24
     2ee:	cd 01       	movw	r24, r26
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	23 d5       	rcall	.+2630   	; 0xd40 <__addsf3>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	bc 01       	movw	r22, r24
     300:	cd 01       	movw	r24, r26
     302:	f3 d5       	rcall	.+3046   	; 0xeea <__fixunssfsi>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	9a 83       	std	Y+2, r25	; 0x02
     30a:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     30c:	e9 e9       	ldi	r30, 0x99	; 153
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	89 2f       	mov	r24, r25
     316:	99 27       	eor	r25, r25
     318:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     31a:	e8 e9       	ldi	r30, 0x98	; 152
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	80 83       	st	Z, r24
	
}//END OF servo_position
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

00000338 <servo_set_kisobran_position>:

void servo_set_kisobran_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	0f 92       	push	r0
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_kisobran( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	99 27       	eor	r25, r25
     348:	87 fd       	sbrc	r24, 7
     34a:	90 95       	com	r25
     34c:	a9 2f       	mov	r26, r25
     34e:	b9 2f       	mov	r27, r25
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	f8 d5       	rcall	.+3056   	; 0xf46 <__floatsisf>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	bc 01       	movw	r22, r24
     35c:	cd 01       	movw	r24, r26
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	44 eb       	ldi	r20, 0xB4	; 180
     364:	52 e4       	ldi	r21, 0x42	; 66
     366:	54 d5       	rcall	.+2728   	; 0xe10 <__divsf3>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	26 e6       	ldi	r18, 0x66	; 102
     372:	36 e6       	ldi	r19, 0x66	; 102
     374:	46 e3       	ldi	r20, 0x36	; 54
     376:	51 ec       	ldi	r21, 0xC1	; 193
     378:	9a d6       	rcall	.+3380   	; 0x10ae <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	4c e6       	ldi	r20, 0x6C	; 108
     388:	53 e4       	ldi	r21, 0x43	; 67
     38a:	da d4       	rcall	.+2484   	; 0xd40 <__addsf3>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9c 01       	movw	r18, r24
     392:	ad 01       	movw	r20, r26
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	8f e7       	ldi	r24, 0x7F	; 127
     39a:	93 e4       	ldi	r25, 0x43	; 67
     39c:	d0 d4       	rcall	.+2464   	; 0xd3e <__subsf3>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	9c d5       	rcall	.+2872   	; 0xee0 <__fixsfsi>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	6c df       	rcall	.-296    	; 0x286 <servo_set_duty_cycle_kisobran>

}
     3ae:	0f 90       	pop	r0
     3b0:	cf 91       	pop	r28
     3b2:	df 91       	pop	r29
     3b4:	08 95       	ret

000003b6 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     3b6:	1f 92       	push	r1
     3b8:	0f 92       	push	r0
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	0f 92       	push	r0
     3be:	00 90 5b 00 	lds	r0, 0x005B
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <__vector_18+0x2a>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <__vector_18+0x2c>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     3e6:	ed ee       	ldi	r30, 0xED	; 237
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     3ee:	1b 82       	std	Y+3, r1	; 0x03
     3f0:	9c c0       	rjmp	.+312    	; 0x52a <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     3f2:	ed ee       	ldi	r30, 0xED	; 237
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	8b 81       	ldd	r24, Y+3	; 0x03
     3f8:	82 95       	swap	r24
     3fa:	80 7f       	andi	r24, 0xF0	; 240
     3fc:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     3fe:	ee ee       	ldi	r30, 0xEE	; 238
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	82 95       	swap	r24
     406:	86 95       	lsr	r24
     408:	87 70       	andi	r24, 0x07	; 7
     40a:	88 2f       	mov	r24, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	81 70       	andi	r24, 0x01	; 1
     410:	90 70       	andi	r25, 0x00	; 0
     412:	88 23       	and	r24, r24
     414:	09 f4       	brne	.+2      	; 0x418 <__vector_18+0x62>
     416:	6e c0       	rjmp	.+220    	; 0x4f4 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     418:	ef ee       	ldi	r30, 0xEF	; 239
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     420:	ae ee       	ldi	r26, 0xEE	; 238
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	ee ee       	ldi	r30, 0xEE	; 238
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8f 7d       	andi	r24, 0xDF	; 223
     42c:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     42e:	e2 ef       	ldi	r30, 0xF2	; 242
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	82 95       	swap	r24
     436:	86 95       	lsr	r24
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	28 2f       	mov	r18, r24
     43c:	e3 ef       	ldi	r30, 0xF3	; 243
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	82 2b       	or	r24, r18
     454:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     456:	19 82       	std	Y+1, r1	; 0x01
     458:	2a c0       	rjmp	.+84     	; 0x4ae <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	82 1b       	sub	r24, r18
     466:	93 0b       	sbc	r25, r19
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	90 95       	com	r25
     46e:	81 95       	neg	r24
     470:	9f 4f       	sbci	r25, 0xFF	; 255
     472:	fc 01       	movw	r30, r24
     474:	ea 5f       	subi	r30, 0xFA	; 250
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	40 81       	ld	r20, Z
     47a:	51 81       	ldd	r21, Z+1	; 0x01
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	fc 01       	movw	r30, r24
     486:	e6 5e       	subi	r30, 0xE6	; 230
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	80 81       	ld	r24, Z
     48c:	28 2f       	mov	r18, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	82 0f       	add	r24, r18
     498:	93 1f       	adc	r25, r19
     49a:	da 01       	movw	r26, r20
     49c:	a8 0f       	add	r26, r24
     49e:	b9 1f       	adc	r27, r25
     4a0:	ea ef       	ldi	r30, 0xFA	; 250
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	88 30       	cpi	r24, 0x08	; 8
     4b2:	98 f2       	brcs	.-90     	; 0x45a <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 2f       	mov	r24, r24
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	80 81       	ld	r24, Z
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	80 83       	st	Z, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	41 f4       	brne	.+16     	; 0x4de <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	fc 01       	movw	r30, r24
     4d8:	e6 5e       	subi	r30, 0xE6	; 230
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	fc 01       	movw	r30, r24
     4e8:	e2 5d       	subi	r30, 0xD2	; 210
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254
     4ec:	80 81       	ld	r24, Z
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 83       	st	Z, r24
     4f2:	1f c0       	rjmp	.+62     	; 0x532 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     4f4:	ee ee       	ldi	r30, 0xEE	; 238
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	82 95       	swap	r24
     4fc:	86 95       	lsr	r24
     4fe:	86 95       	lsr	r24
     500:	83 70       	andi	r24, 0x03	; 3
     502:	88 2f       	mov	r24, r24
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	81 70       	andi	r24, 0x01	; 1
     508:	90 70       	andi	r25, 0x00	; 0
     50a:	88 23       	and	r24, r24
     50c:	59 f0       	breq	.+22     	; 0x524 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     50e:	ef ee       	ldi	r30, 0xEF	; 239
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     514:	ae ee       	ldi	r26, 0xEE	; 238
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	ee ee       	ldi	r30, 0xEE	; 238
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8f 7b       	andi	r24, 0xBF	; 191
     520:	8c 93       	st	X, r24
     522:	07 c0       	rjmp	.+14     	; 0x532 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	8f 5f       	subi	r24, 0xFF	; 255
     528:	8b 83       	std	Y+3, r24	; 0x03
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	8f 30       	cpi	r24, 0x0F	; 15
     52e:	08 f4       	brcc	.+2      	; 0x532 <__vector_18+0x17c>
     530:	60 cf       	rjmp	.-320    	; 0x3f2 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     532:	ed ee       	ldi	r30, 0xED	; 237
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	8c 81       	ldd	r24, Y+4	; 0x04
     538:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     53a:	aa ed       	ldi	r26, 0xDA	; 218
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	ea ed       	ldi	r30, 0xDA	; 218
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	8c 93       	st	X, r24
}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	00 92 5b 00 	sts	0x005B, r0
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	00 d0       	rcall	.+0      	; 0x57c <CAN_InitModule+0x6>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     580:	e8 ed       	ldi	r30, 0xD8	; 216
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     588:	1a 82       	std	Y+2, r1	; 0x02
     58a:	32 c0       	rjmp	.+100    	; 0x5f0 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     58c:	ed ee       	ldi	r30, 0xED	; 237
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	82 95       	swap	r24
     594:	80 7f       	andi	r24, 0xF0	; 240
     596:	80 83       	st	Z, r24

		CANSTMOB = 0;
     598:	ee ee       	ldi	r30, 0xEE	; 238
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	10 82       	st	Z, r1
		CANCDMOB = 0;
     59e:	ef ee       	ldi	r30, 0xEF	; 239
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	10 82       	st	Z, r1

		CANIDT1 = 0;
     5a4:	e3 ef       	ldi	r30, 0xF3	; 243
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	10 82       	st	Z, r1
		CANIDT2 = 0;
     5aa:	e2 ef       	ldi	r30, 0xF2	; 242
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	10 82       	st	Z, r1
		CANIDT3 = 0;
     5b0:	e1 ef       	ldi	r30, 0xF1	; 241
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	10 82       	st	Z, r1
		CANIDT4 = 0;
     5b6:	e0 ef       	ldi	r30, 0xF0	; 240
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	10 82       	st	Z, r1
		CANIDM1 = 0;
     5bc:	e7 ef       	ldi	r30, 0xF7	; 247
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	10 82       	st	Z, r1
		CANIDM2 = 0;
     5c2:	e6 ef       	ldi	r30, 0xF6	; 246
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     5c8:	e5 ef       	ldi	r30, 0xF5	; 245
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	10 82       	st	Z, r1
		CANIDM4 = 0;
     5ce:	e4 ef       	ldi	r30, 0xF4	; 244
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5d4:	19 82       	std	Y+1, r1	; 0x01
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <CAN_InitModule+0x6e>
			CANMSG = 0;
     5d8:	ea ef       	ldi	r30, 0xFA	; 250
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	88 30       	cpi	r24, 0x08	; 8
     5e8:	b8 f3       	brcs	.-18     	; 0x5d8 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	8a 83       	std	Y+2, r24	; 0x02
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	8f 30       	cpi	r24, 0x0F	; 15
     5f4:	58 f2       	brcs	.-106    	; 0x58c <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     5f6:	e8 ed       	ldi	r30, 0xD8	; 216
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     5fe:	e2 ee       	ldi	r30, 0xE2	; 226
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     606:	e3 ee       	ldi	r30, 0xE3	; 227
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     60e:	e4 ee       	ldi	r30, 0xE4	; 228
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	8e e5       	ldi	r24, 0x5E	; 94
     614:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     616:	e5 ee       	ldi	r30, 0xE5	; 229
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     61c:	eb ed       	ldi	r30, 0xDB	; 219
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 eb       	ldi	r24, 0xB0	; 176
     622:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     624:	ef ed       	ldi	r30, 0xDF	; 223
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	8f e7       	ldi	r24, 0x7F	; 127
     62a:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     62c:	ee ed       	ldi	r30, 0xDE	; 222
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	80 83       	st	Z, r24
	sei();
     634:	78 94       	sei
}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	00 d0       	rcall	.+0      	; 0x646 <CAN_InitRxMob+0x6>
     646:	00 d0       	rcall	.+0      	; 0x648 <CAN_InitRxMob+0x8>
     648:	0f 92       	push	r0
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	9c 83       	std	Y+4, r25	; 0x04
     650:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     652:	ed ee       	ldi	r30, 0xED	; 237
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     65a:	e9 ed       	ldi	r30, 0xD9	; 217
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	82 95       	swap	r24
     662:	8f 70       	andi	r24, 0x0F	; 15
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	81 70       	andi	r24, 0x01	; 1
     66a:	90 70       	andi	r25, 0x00	; 0
     66c:	88 23       	and	r24, r24
     66e:	a9 f7       	brne	.-22     	; 0x65a <CAN_InitRxMob+0x1a>
     670:	e9 ed       	ldi	r30, 0xD9	; 217
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	86 95       	lsr	r24
     678:	86 95       	lsr	r24
     67a:	86 95       	lsr	r24
     67c:	88 2f       	mov	r24, r24
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	81 70       	andi	r24, 0x01	; 1
     682:	90 70       	andi	r25, 0x00	; 0
     684:	88 23       	and	r24, r24
     686:	49 f7       	brne	.-46     	; 0x65a <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     688:	1a 82       	std	Y+2, r1	; 0x02
     68a:	3f c0       	rjmp	.+126    	; 0x70a <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     68c:	ed ee       	ldi	r30, 0xED	; 237
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	82 95       	swap	r24
     694:	80 7f       	andi	r24, 0xF0	; 240
     696:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     698:	ef ee       	ldi	r30, 0xEF	; 239
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	82 95       	swap	r24
     6a0:	86 95       	lsr	r24
     6a2:	86 95       	lsr	r24
     6a4:	83 70       	andi	r24, 0x03	; 3
     6a6:	88 23       	and	r24, r24
     6a8:	69 f5       	brne	.+90     	; 0x704 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     6aa:	ef ee       	ldi	r30, 0xEF	; 239
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     6b2:	e3 ef       	ldi	r30, 0xF3	; 243
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	90 70       	andi	r25, 0x00	; 0
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	96 95       	lsr	r25
     6c2:	87 95       	ror	r24
     6c4:	96 95       	lsr	r25
     6c6:	87 95       	ror	r24
     6c8:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     6ca:	e2 ef       	ldi	r30, 0xF2	; 242
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	82 95       	swap	r24
     6d2:	88 0f       	add	r24, r24
     6d4:	80 7e       	andi	r24, 0xE0	; 224
     6d6:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     6d8:	e6 ef       	ldi	r30, 0xF6	; 246
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 ee       	ldi	r24, 0xE0	; 224
     6de:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     6e0:	e7 ef       	ldi	r30, 0xF7	; 247
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     6e8:	af ee       	ldi	r26, 0xEF	; 239
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	ef ee       	ldi	r30, 0xEF	; 239
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	80 68       	ori	r24, 0x80	; 128
     6f4:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     6f6:	ed ee       	ldi	r30, 0xED	; 237
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	80 83       	st	Z, r24

		return 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	0c c0       	rjmp	.+24     	; 0x71c <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	8f 30       	cpi	r24, 0x0F	; 15
     70e:	08 f4       	brcc	.+2      	; 0x712 <CAN_InitRxMob+0xd2>
     710:	bd cf       	rjmp	.-134    	; 0x68c <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     712:	ed ee       	ldi	r30, 0xED	; 237
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	80 83       	st	Z, r24

	return 0;
     71a:	1d 82       	std	Y+5, r1	; 0x05
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <CAN_Init+0xa>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     73e:	1b df       	rcall	.-458    	; 0x576 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     740:	19 82       	std	Y+1, r1	; 0x01
     742:	35 c0       	rjmp	.+106    	; 0x7ae <CAN_Init+0x80>
	{
		CAN_InitRxMob(i + 1);
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	79 df       	rcall	.-270    	; 0x640 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	8c 01       	movw	r16, r24
     75a:	0a 5f       	subi	r16, 0xFA	; 250
     75c:	1e 4f       	sbci	r17, 0xFE	; 254
     75e:	85 e0       	ldi	r24, 0x05	; 5
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	06 d5       	rcall	.+2572   	; 0x1174 <calloc>
     768:	f8 01       	movw	r30, r16
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	48 2f       	mov	r20, r24
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	28 2f       	mov	r18, r24
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	e2 5d       	subi	r30, 0xD2	; 210
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	10 82       	st	Z, r1
     788:	fc 01       	movw	r30, r24
     78a:	e2 5d       	subi	r30, 0xD2	; 210
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	80 81       	ld	r24, Z
     790:	f9 01       	movw	r30, r18
     792:	ec 5d       	subi	r30, 0xDC	; 220
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	80 83       	st	Z, r24
     798:	f9 01       	movw	r30, r18
     79a:	ec 5d       	subi	r30, 0xDC	; 220
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	80 81       	ld	r24, Z
     7a0:	fa 01       	movw	r30, r20
     7a2:	e6 5e       	subi	r30, 0xE6	; 230
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	98 17       	cp	r25, r24
     7b4:	38 f2       	brcs	.-114    	; 0x744 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <timer_init>:


void timer_init(unsigned int freq)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <timer_init+0xa>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     7d6:	e0 e8       	ldi	r30, 0x80	; 128
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     7dc:	e1 e8       	ldi	r30, 0x81	; 129
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	89 e0       	ldi	r24, 0x09	; 9
     7e2:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     7e4:	08 e8       	ldi	r16, 0x88	; 136
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	cc 01       	movw	r24, r24
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	a5 d3       	rcall	.+1866   	; 0xf42 <__floatunsisf>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	60 e8       	ldi	r22, 0x80	; 128
     7fe:	76 e9       	ldi	r23, 0x96	; 150
     800:	88 e1       	ldi	r24, 0x18	; 24
     802:	9b e4       	ldi	r25, 0x4B	; 75
     804:	05 d3       	rcall	.+1546   	; 0xe10 <__divsf3>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	bc 01       	movw	r22, r24
     80c:	cd 01       	movw	r24, r26
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	5f e3       	ldi	r21, 0x3F	; 63
     816:	94 d2       	rcall	.+1320   	; 0xd40 <__addsf3>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	64 d3       	rcall	.+1736   	; 0xeea <__fixunssfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	f8 01       	movw	r30, r16
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     82c:	ef e6       	ldi	r30, 0x6F	; 111
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	80 83       	st	Z, r24

	SREG |= 0x80;
     834:	af e5       	ldi	r26, 0x5F	; 95
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	ef e5       	ldi	r30, 0x5F	; 95
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	80 68       	ori	r24, 0x80	; 128
     840:	8c 93       	st	X, r24
}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	00 90 5b 00 	lds	r0, 0x005B
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     880:	80 91 38 01 	lds	r24, 0x0138
     884:	90 91 39 01 	lds	r25, 0x0139
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	29 f0       	breq	.+10     	; 0x896 <__vector_12+0x46>
        timer_callback();
     88c:	e0 91 38 01 	lds	r30, 0x0138
     890:	f0 91 39 01 	lds	r31, 0x0139
     894:	09 95       	icall
	sys_time++;
     896:	80 91 3a 01 	lds	r24, 0x013A
     89a:	90 91 3b 01 	lds	r25, 0x013B
     89e:	a0 91 3c 01 	lds	r26, 0x013C
     8a2:	b0 91 3d 01 	lds	r27, 0x013D
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	a1 1d       	adc	r26, r1
     8aa:	b1 1d       	adc	r27, r1
     8ac:	80 93 3a 01 	sts	0x013A, r24
     8b0:	90 93 3b 01 	sts	0x013B, r25
     8b4:	a0 93 3c 01 	sts	0x013C, r26
     8b8:	b0 93 3d 01 	sts	0x013D, r27
}
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	00 92 5b 00 	sts	0x005B, r0
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
     8f0:	10 92 3a 01 	sts	0x013A, r1
     8f4:	10 92 3b 01 	sts	0x013B, r1
     8f8:	10 92 3c 01 	sts	0x013C, r1
     8fc:	10 92 3d 01 	sts	0x013D, r1
}
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	08 95       	ret

00000906 <system_set_match_started>:
void system_set_match_started(void)
{
     906:	df 93       	push	r29
     908:	cf 93       	push	r28
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 3e 01 	sts	0x013E, r24
}
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	08 95       	ret

0000091a <system_init>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
void system_init(void)
{
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	6c 97       	sbiw	r28, 0x1c	; 28
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	aa e7       	ldi	r26, 0x7A	; 122
     934:	b4 e4       	ldi	r27, 0x44	; 68
     936:	89 8f       	std	Y+25, r24	; 0x19
     938:	9a 8f       	std	Y+26, r25	; 0x1a
     93a:	ab 8f       	std	Y+27, r26	; 0x1b
     93c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     93e:	69 8d       	ldd	r22, Y+25	; 0x19
     940:	7a 8d       	ldd	r23, Y+26	; 0x1a
     942:	8b 8d       	ldd	r24, Y+27	; 0x1b
     944:	9c 8d       	ldd	r25, Y+28	; 0x1c
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e4       	ldi	r19, 0x40	; 64
     94a:	4c e1       	ldi	r20, 0x1C	; 28
     94c:	55 e4       	ldi	r21, 0x45	; 69
     94e:	af d3       	rcall	.+1886   	; 0x10ae <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	8d 8b       	std	Y+21, r24	; 0x15
     956:	9e 8b       	std	Y+22, r25	; 0x16
     958:	af 8b       	std	Y+23, r26	; 0x17
     95a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     95c:	6d 89       	ldd	r22, Y+21	; 0x15
     95e:	7e 89       	ldd	r23, Y+22	; 0x16
     960:	8f 89       	ldd	r24, Y+23	; 0x17
     962:	98 8d       	ldd	r25, Y+24	; 0x18
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	4d d2       	rcall	.+1178   	; 0xe08 <__cmpsf2>
     96e:	88 23       	and	r24, r24
     970:	2c f4       	brge	.+10     	; 0x97c <system_init+0x62>
		__ticks = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9c 8b       	std	Y+20, r25	; 0x14
     978:	8b 8b       	std	Y+19, r24	; 0x13
     97a:	3b c0       	rjmp	.+118    	; 0x9f2 <system_init+0xd8>
	else if (__tmp > 65535)
     97c:	6d 89       	ldd	r22, Y+21	; 0x15
     97e:	7e 89       	ldd	r23, Y+22	; 0x16
     980:	8f 89       	ldd	r24, Y+23	; 0x17
     982:	98 8d       	ldd	r25, Y+24	; 0x18
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f e7       	ldi	r20, 0x7F	; 127
     98a:	57 e4       	ldi	r21, 0x47	; 71
     98c:	8c d3       	rcall	.+1816   	; 0x10a6 <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	3c f5       	brge	.+78     	; 0x9e0 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     992:	69 8d       	ldd	r22, Y+25	; 0x19
     994:	7a 8d       	ldd	r23, Y+26	; 0x1a
     996:	8b 8d       	ldd	r24, Y+27	; 0x1b
     998:	9c 8d       	ldd	r25, Y+28	; 0x1c
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	51 e4       	ldi	r21, 0x41	; 65
     9a2:	85 d3       	rcall	.+1802   	; 0x10ae <__mulsf3>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	bc 01       	movw	r22, r24
     9aa:	cd 01       	movw	r24, r26
     9ac:	9e d2       	rcall	.+1340   	; 0xeea <__fixunssfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	9c 8b       	std	Y+20, r25	; 0x14
     9b4:	8b 8b       	std	Y+19, r24	; 0x13
     9b6:	0f c0       	rjmp	.+30     	; 0x9d6 <system_init+0xbc>
     9b8:	8a ef       	ldi	r24, 0xFA	; 250
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9a 8b       	std	Y+18, r25	; 0x12
     9be:	89 8b       	std	Y+17, r24	; 0x11
     9c0:	89 89       	ldd	r24, Y+17	; 0x11
     9c2:	9a 89       	ldd	r25, Y+18	; 0x12
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <system_init+0xaa>
     9c8:	9a 8b       	std	Y+18, r25	; 0x12
     9ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9cc:	8b 89       	ldd	r24, Y+19	; 0x13
     9ce:	9c 89       	ldd	r25, Y+20	; 0x14
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	9c 8b       	std	Y+20, r25	; 0x14
     9d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d6:	8b 89       	ldd	r24, Y+19	; 0x13
     9d8:	9c 89       	ldd	r25, Y+20	; 0x14
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	69 f7       	brne	.-38     	; 0x9b8 <system_init+0x9e>
     9de:	13 c0       	rjmp	.+38     	; 0xa06 <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e0:	6d 89       	ldd	r22, Y+21	; 0x15
     9e2:	7e 89       	ldd	r23, Y+22	; 0x16
     9e4:	8f 89       	ldd	r24, Y+23	; 0x17
     9e6:	98 8d       	ldd	r25, Y+24	; 0x18
     9e8:	80 d2       	rcall	.+1280   	; 0xeea <__fixunssfsi>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	9c 8b       	std	Y+20, r25	; 0x14
     9f0:	8b 8b       	std	Y+19, r24	; 0x13
     9f2:	8b 89       	ldd	r24, Y+19	; 0x13
     9f4:	9c 89       	ldd	r25, Y+20	; 0x14
     9f6:	98 8b       	std	Y+16, r25	; 0x10
     9f8:	8f 87       	std	Y+15, r24	; 0x0f
     9fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fc:	98 89       	ldd	r25, Y+16	; 0x10
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <system_init+0xe4>
     a02:	98 8b       	std	Y+16, r25	; 0x10
     a04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DDRG = 0xff;
     a06:	e3 e3       	ldi	r30, 0x33	; 51
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	80 83       	st	Z, r24
	PORTG = 0xFF;
     a0e:	e4 e3       	ldi	r30, 0x34	; 52
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	80 83       	st	Z, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	aa e7       	ldi	r26, 0x7A	; 122
     a1c:	b4 e4       	ldi	r27, 0x44	; 68
     a1e:	8b 87       	std	Y+11, r24	; 0x0b
     a20:	9c 87       	std	Y+12, r25	; 0x0c
     a22:	ad 87       	std	Y+13, r26	; 0x0d
     a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a26:	6b 85       	ldd	r22, Y+11	; 0x0b
     a28:	7c 85       	ldd	r23, Y+12	; 0x0c
     a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e4       	ldi	r19, 0x40	; 64
     a32:	4c e1       	ldi	r20, 0x1C	; 28
     a34:	55 e4       	ldi	r21, 0x45	; 69
     a36:	3b d3       	rcall	.+1654   	; 0x10ae <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	8f 83       	std	Y+7, r24	; 0x07
     a3e:	98 87       	std	Y+8, r25	; 0x08
     a40:	a9 87       	std	Y+9, r26	; 0x09
     a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a44:	6f 81       	ldd	r22, Y+7	; 0x07
     a46:	78 85       	ldd	r23, Y+8	; 0x08
     a48:	89 85       	ldd	r24, Y+9	; 0x09
     a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 e8       	ldi	r20, 0x80	; 128
     a52:	5f e3       	ldi	r21, 0x3F	; 63
     a54:	d9 d1       	rcall	.+946    	; 0xe08 <__cmpsf2>
     a56:	88 23       	and	r24, r24
     a58:	2c f4       	brge	.+10     	; 0xa64 <system_init+0x14a>
		__ticks = 1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9e 83       	std	Y+6, r25	; 0x06
     a60:	8d 83       	std	Y+5, r24	; 0x05
     a62:	3b c0       	rjmp	.+118    	; 0xada <system_init+0x1c0>
	else if (__tmp > 65535)
     a64:	6f 81       	ldd	r22, Y+7	; 0x07
     a66:	78 85       	ldd	r23, Y+8	; 0x08
     a68:	89 85       	ldd	r24, Y+9	; 0x09
     a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	3f ef       	ldi	r19, 0xFF	; 255
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	57 e4       	ldi	r21, 0x47	; 71
     a74:	18 d3       	rcall	.+1584   	; 0x10a6 <__gesf2>
     a76:	18 16       	cp	r1, r24
     a78:	3c f5       	brge	.+78     	; 0xac8 <system_init+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a80:	9e 85       	ldd	r25, Y+14	; 0x0e
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e2       	ldi	r20, 0x20	; 32
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	11 d3       	rcall	.+1570   	; 0x10ae <__mulsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	bc 01       	movw	r22, r24
     a92:	cd 01       	movw	r24, r26
     a94:	2a d2       	rcall	.+1108   	; 0xeea <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	9e 83       	std	Y+6, r25	; 0x06
     a9c:	8d 83       	std	Y+5, r24	; 0x05
     a9e:	0f c0       	rjmp	.+30     	; 0xabe <system_init+0x1a4>
     aa0:	8a ef       	ldi	r24, 0xFA	; 250
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <system_init+0x192>
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab4:	8d 81       	ldd	r24, Y+5	; 0x05
     ab6:	9e 81       	ldd	r25, Y+6	; 0x06
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	9e 83       	std	Y+6, r25	; 0x06
     abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     abe:	8d 81       	ldd	r24, Y+5	; 0x05
     ac0:	9e 81       	ldd	r25, Y+6	; 0x06
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	69 f7       	brne	.-38     	; 0xaa0 <system_init+0x186>
     ac6:	13 c0       	rjmp	.+38     	; 0xaee <system_init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ac8:	6f 81       	ldd	r22, Y+7	; 0x07
     aca:	78 85       	ldd	r23, Y+8	; 0x08
     acc:	89 85       	ldd	r24, Y+9	; 0x09
     ace:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad0:	0c d2       	rcall	.+1048   	; 0xeea <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	8d 81       	ldd	r24, Y+5	; 0x05
     adc:	9e 81       	ldd	r25, Y+6	; 0x06
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <system_init+0x1cc>
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	PORTG = 0x00;
     aee:	e4 e3       	ldi	r30, 0x34	; 52
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	10 82       	st	Z, r1
	servo_init(50);
     af4:	82 e3       	ldi	r24, 0x32	; 50
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	68 db       	rcall	.-2352   	; 0x1ca <servo_init>
	timer_init(1000);
     afa:	88 ee       	ldi	r24, 0xE8	; 232
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	62 de       	rcall	.-828    	; 0x7c4 <timer_init>
	CAN_Init(1);
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	15 de       	rcall	.-982    	; 0x72e <CAN_Init>


	//gpio_register_pin(39,GPIO_DIRECTION_INPUT,false);				//jumper PORTF pin 2 BUT CHECK IT FIRST!!!
	
	//while(system_jumper_check() == 1);
	system_reset_system_time();
     b04:	f1 de       	rcall	.-542    	; 0x8e8 <system_reset_system_time>
	system_set_match_started();
     b06:	ff de       	rcall	.-514    	; 0x906 <system_set_match_started>
     b08:	6c 96       	adiw	r28, 0x1c	; 28
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	00 90 5b 00 	lds	r0, 0x005B
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
     b3e:	80 91 3f 01 	lds	r24, 0x013F
     b42:	88 23       	and	r24, r24
     b44:	d9 f0       	breq	.+54     	; 0xb7c <__vector_23+0x62>
	{
		tx0_counter--;
     b46:	80 91 3f 01 	lds	r24, 0x013F
     b4a:	81 50       	subi	r24, 0x01	; 1
     b4c:	80 93 3f 01 	sts	0x013F, r24
		UDR0 = tx0_buffer[tx0_rd_index];
     b50:	a6 ec       	ldi	r26, 0xC6	; 198
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	80 91 40 01 	lds	r24, 0x0140
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	fc 01       	movw	r30, r24
     b5e:	e9 5b       	subi	r30, 0xB9	; 185
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	80 81       	ld	r24, Z
     b64:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
     b66:	80 91 40 01 	lds	r24, 0x0140
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 40 01 	sts	0x0140, r24
     b70:	80 91 40 01 	lds	r24, 0x0140
     b74:	80 34       	cpi	r24, 0x40	; 64
     b76:	11 f4       	brne	.+4      	; 0xb7c <__vector_23+0x62>
			tx0_rd_index = 0;
     b78:	10 92 40 01 	sts	0x0140, r1
	}
}
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	0f 90       	pop	r0
     b8e:	00 92 5b 00 	sts	0x005B, r0
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	00 90 5b 00 	lds	r0, 0x005B
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	2f 93       	push	r18
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
     bc0:	e0 ec       	ldi	r30, 0xC0	; 192
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	8c 71       	andi	r24, 0x1C	; 28
     bd0:	90 70       	andi	r25, 0x00	; 0
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	d9 f4       	brne	.+54     	; 0xc0c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
     bd6:	80 91 41 01 	lds	r24, 0x0141
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	e6 ec       	ldi	r30, 0xC6	; 198
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	20 81       	ld	r18, Z
     be4:	fc 01       	movw	r30, r24
     be6:	e9 57       	subi	r30, 0x79	; 121
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
     bec:	80 91 41 01 	lds	r24, 0x0141
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 41 01 	sts	0x0141, r24
     bf6:	80 91 41 01 	lds	r24, 0x0141
     bfa:	80 34       	cpi	r24, 0x40	; 64
     bfc:	11 f4       	brne	.+4      	; 0xc02 <__vector_21+0x66>
			rx0_wr_index = 0;
     bfe:	10 92 41 01 	sts	0x0141, r1

		rx0_counter++;
     c02:	80 91 42 01 	lds	r24, 0x0142
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	80 93 42 01 	sts	0x0142, r24
	}
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	ff 91       	pop	r31
     c14:	ef 91       	pop	r30
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	00 92 5b 00 	sts	0x005B, r0
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	00 90 5b 00 	lds	r0, 0x005B
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     c50:	80 91 43 01 	lds	r24, 0x0143
     c54:	88 23       	and	r24, r24
     c56:	d9 f0       	breq	.+54     	; 0xc8e <__vector_34+0x62>
	{
		tx1_counter--;
     c58:	80 91 43 01 	lds	r24, 0x0143
     c5c:	81 50       	subi	r24, 0x01	; 1
     c5e:	80 93 43 01 	sts	0x0143, r24
		UDR1=tx1_buffer[tx1_rd_index];
     c62:	ae ec       	ldi	r26, 0xCE	; 206
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	80 91 44 01 	lds	r24, 0x0144
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	e9 53       	subi	r30, 0x39	; 57
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	80 81       	ld	r24, Z
     c76:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     c78:	80 91 44 01 	lds	r24, 0x0144
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	80 93 44 01 	sts	0x0144, r24
     c82:	80 91 44 01 	lds	r24, 0x0144
     c86:	80 34       	cpi	r24, 0x40	; 64
     c88:	11 f4       	brne	.+4      	; 0xc8e <__vector_34+0x62>
			tx1_rd_index = 0;
     c8a:	10 92 44 01 	sts	0x0144, r1
	}
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	0f 90       	pop	r0
     ca0:	00 92 5b 00 	sts	0x005B, r0
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <__vector_32>:

ISR(USART1_RX_vect)
{
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	00 90 5b 00 	lds	r0, 0x005B
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     cd2:	e8 ec       	ldi	r30, 0xC8	; 200
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	8c 71       	andi	r24, 0x1C	; 28
     ce2:	90 70       	andi	r25, 0x00	; 0
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	d9 f4       	brne	.+54     	; 0xd1e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     ce8:	80 91 45 01 	lds	r24, 0x0145
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	ee ec       	ldi	r30, 0xCE	; 206
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	20 81       	ld	r18, Z
     cf6:	fc 01       	movw	r30, r24
     cf8:	e9 5f       	subi	r30, 0xF9	; 249
     cfa:	fd 4f       	sbci	r31, 0xFD	; 253
     cfc:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     cfe:	80 91 45 01 	lds	r24, 0x0145
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	80 93 45 01 	sts	0x0145, r24
     d08:	80 91 45 01 	lds	r24, 0x0145
     d0c:	80 34       	cpi	r24, 0x40	; 64
     d0e:	11 f4       	brne	.+4      	; 0xd14 <__vector_32+0x66>
		rx1_wr_index = 0;
     d10:	10 92 45 01 	sts	0x0145, r1

		rx1_counter++;
     d14:	80 91 46 01 	lds	r24, 0x0146
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 46 01 	sts	0x0146, r24
	}
}
     d1e:	0f 90       	pop	r0
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	9f 91       	pop	r25
     d2a:	8f 91       	pop	r24
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	00 92 5b 00 	sts	0x005B, r0
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <__subsf3>:
     d3e:	50 58       	subi	r21, 0x80	; 128

00000d40 <__addsf3>:
     d40:	bb 27       	eor	r27, r27
     d42:	aa 27       	eor	r26, r26
     d44:	0e d0       	rcall	.+28     	; 0xd62 <__addsf3x>
     d46:	75 c1       	rjmp	.+746    	; 0x1032 <__fp_round>
     d48:	66 d1       	rcall	.+716    	; 0x1016 <__fp_pscA>
     d4a:	30 f0       	brcs	.+12     	; 0xd58 <__addsf3+0x18>
     d4c:	6b d1       	rcall	.+726    	; 0x1024 <__fp_pscB>
     d4e:	20 f0       	brcs	.+8      	; 0xd58 <__addsf3+0x18>
     d50:	31 f4       	brne	.+12     	; 0xd5e <__addsf3+0x1e>
     d52:	9f 3f       	cpi	r25, 0xFF	; 255
     d54:	11 f4       	brne	.+4      	; 0xd5a <__addsf3+0x1a>
     d56:	1e f4       	brtc	.+6      	; 0xd5e <__addsf3+0x1e>
     d58:	5b c1       	rjmp	.+694    	; 0x1010 <__fp_nan>
     d5a:	0e f4       	brtc	.+2      	; 0xd5e <__addsf3+0x1e>
     d5c:	e0 95       	com	r30
     d5e:	e7 fb       	bst	r30, 7
     d60:	51 c1       	rjmp	.+674    	; 0x1004 <__fp_inf>

00000d62 <__addsf3x>:
     d62:	e9 2f       	mov	r30, r25
     d64:	77 d1       	rcall	.+750    	; 0x1054 <__fp_split3>
     d66:	80 f3       	brcs	.-32     	; 0xd48 <__addsf3+0x8>
     d68:	ba 17       	cp	r27, r26
     d6a:	62 07       	cpc	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	18 f0       	brcs	.+6      	; 0xd7a <__addsf3x+0x18>
     d74:	71 f4       	brne	.+28     	; 0xd92 <__addsf3x+0x30>
     d76:	9e f5       	brtc	.+102    	; 0xdde <__addsf3x+0x7c>
     d78:	8f c1       	rjmp	.+798    	; 0x1098 <__fp_zero>
     d7a:	0e f4       	brtc	.+2      	; 0xd7e <__addsf3x+0x1c>
     d7c:	e0 95       	com	r30
     d7e:	0b 2e       	mov	r0, r27
     d80:	ba 2f       	mov	r27, r26
     d82:	a0 2d       	mov	r26, r0
     d84:	0b 01       	movw	r0, r22
     d86:	b9 01       	movw	r22, r18
     d88:	90 01       	movw	r18, r0
     d8a:	0c 01       	movw	r0, r24
     d8c:	ca 01       	movw	r24, r20
     d8e:	a0 01       	movw	r20, r0
     d90:	11 24       	eor	r1, r1
     d92:	ff 27       	eor	r31, r31
     d94:	59 1b       	sub	r21, r25
     d96:	99 f0       	breq	.+38     	; 0xdbe <__addsf3x+0x5c>
     d98:	59 3f       	cpi	r21, 0xF9	; 249
     d9a:	50 f4       	brcc	.+20     	; 0xdb0 <__addsf3x+0x4e>
     d9c:	50 3e       	cpi	r21, 0xE0	; 224
     d9e:	68 f1       	brcs	.+90     	; 0xdfa <__addsf3x+0x98>
     da0:	1a 16       	cp	r1, r26
     da2:	f0 40       	sbci	r31, 0x00	; 0
     da4:	a2 2f       	mov	r26, r18
     da6:	23 2f       	mov	r18, r19
     da8:	34 2f       	mov	r19, r20
     daa:	44 27       	eor	r20, r20
     dac:	58 5f       	subi	r21, 0xF8	; 248
     dae:	f3 cf       	rjmp	.-26     	; 0xd96 <__addsf3x+0x34>
     db0:	46 95       	lsr	r20
     db2:	37 95       	ror	r19
     db4:	27 95       	ror	r18
     db6:	a7 95       	ror	r26
     db8:	f0 40       	sbci	r31, 0x00	; 0
     dba:	53 95       	inc	r21
     dbc:	c9 f7       	brne	.-14     	; 0xdb0 <__addsf3x+0x4e>
     dbe:	7e f4       	brtc	.+30     	; 0xdde <__addsf3x+0x7c>
     dc0:	1f 16       	cp	r1, r31
     dc2:	ba 0b       	sbc	r27, r26
     dc4:	62 0b       	sbc	r22, r18
     dc6:	73 0b       	sbc	r23, r19
     dc8:	84 0b       	sbc	r24, r20
     dca:	ba f0       	brmi	.+46     	; 0xdfa <__addsf3x+0x98>
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	a1 f0       	breq	.+40     	; 0xdf8 <__addsf3x+0x96>
     dd0:	ff 0f       	add	r31, r31
     dd2:	bb 1f       	adc	r27, r27
     dd4:	66 1f       	adc	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	c2 f7       	brpl	.-16     	; 0xdcc <__addsf3x+0x6a>
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <__addsf3x+0x98>
     dde:	ba 0f       	add	r27, r26
     de0:	62 1f       	adc	r22, r18
     de2:	73 1f       	adc	r23, r19
     de4:	84 1f       	adc	r24, r20
     de6:	48 f4       	brcc	.+18     	; 0xdfa <__addsf3x+0x98>
     de8:	87 95       	ror	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9e 3f       	cpi	r25, 0xFE	; 254
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__addsf3x+0x96>
     df6:	b3 cf       	rjmp	.-154    	; 0xd5e <__addsf3+0x1e>
     df8:	93 95       	inc	r25
     dfa:	88 0f       	add	r24, r24
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <__addsf3x+0x9e>
     dfe:	99 27       	eor	r25, r25
     e00:	ee 0f       	add	r30, r30
     e02:	97 95       	ror	r25
     e04:	87 95       	ror	r24
     e06:	08 95       	ret

00000e08 <__cmpsf2>:
     e08:	d9 d0       	rcall	.+434    	; 0xfbc <__fp_cmp>
     e0a:	08 f4       	brcc	.+2      	; 0xe0e <__cmpsf2+0x6>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	08 95       	ret

00000e10 <__divsf3>:
     e10:	0c d0       	rcall	.+24     	; 0xe2a <__divsf3x>
     e12:	0f c1       	rjmp	.+542    	; 0x1032 <__fp_round>
     e14:	07 d1       	rcall	.+526    	; 0x1024 <__fp_pscB>
     e16:	40 f0       	brcs	.+16     	; 0xe28 <__divsf3+0x18>
     e18:	fe d0       	rcall	.+508    	; 0x1016 <__fp_pscA>
     e1a:	30 f0       	brcs	.+12     	; 0xe28 <__divsf3+0x18>
     e1c:	21 f4       	brne	.+8      	; 0xe26 <__divsf3+0x16>
     e1e:	5f 3f       	cpi	r21, 0xFF	; 255
     e20:	19 f0       	breq	.+6      	; 0xe28 <__divsf3+0x18>
     e22:	f0 c0       	rjmp	.+480    	; 0x1004 <__fp_inf>
     e24:	51 11       	cpse	r21, r1
     e26:	39 c1       	rjmp	.+626    	; 0x109a <__fp_szero>
     e28:	f3 c0       	rjmp	.+486    	; 0x1010 <__fp_nan>

00000e2a <__divsf3x>:
     e2a:	14 d1       	rcall	.+552    	; 0x1054 <__fp_split3>
     e2c:	98 f3       	brcs	.-26     	; 0xe14 <__divsf3+0x4>

00000e2e <__divsf3_pse>:
     e2e:	99 23       	and	r25, r25
     e30:	c9 f3       	breq	.-14     	; 0xe24 <__divsf3+0x14>
     e32:	55 23       	and	r21, r21
     e34:	b1 f3       	breq	.-20     	; 0xe22 <__divsf3+0x12>
     e36:	95 1b       	sub	r25, r21
     e38:	55 0b       	sbc	r21, r21
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	62 17       	cp	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__divsf3_pse+0x26>
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	aa 1f       	adc	r26, r26
     e52:	a9 f3       	breq	.-22     	; 0xe3e <__divsf3_pse+0x10>
     e54:	33 d0       	rcall	.+102    	; 0xebc <__divsf3_pse+0x8e>
     e56:	0e 2e       	mov	r0, r30
     e58:	3a f0       	brmi	.+14     	; 0xe68 <__divsf3_pse+0x3a>
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	30 d0       	rcall	.+96     	; 0xebe <__divsf3_pse+0x90>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	50 40       	sbci	r21, 0x00	; 0
     e62:	e6 95       	lsr	r30
     e64:	00 1c       	adc	r0, r0
     e66:	ca f7       	brpl	.-14     	; 0xe5a <__divsf3_pse+0x2c>
     e68:	29 d0       	rcall	.+82     	; 0xebc <__divsf3_pse+0x8e>
     e6a:	fe 2f       	mov	r31, r30
     e6c:	27 d0       	rcall	.+78     	; 0xebc <__divsf3_pse+0x8e>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	26 17       	cp	r18, r22
     e78:	37 07       	cpc	r19, r23
     e7a:	48 07       	cpc	r20, r24
     e7c:	ab 07       	cpc	r26, r27
     e7e:	b0 e8       	ldi	r27, 0x80	; 128
     e80:	09 f0       	breq	.+2      	; 0xe84 <__divsf3_pse+0x56>
     e82:	bb 0b       	sbc	r27, r27
     e84:	80 2d       	mov	r24, r0
     e86:	bf 01       	movw	r22, r30
     e88:	ff 27       	eor	r31, r31
     e8a:	93 58       	subi	r25, 0x83	; 131
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	2a f0       	brmi	.+10     	; 0xe9a <__divsf3_pse+0x6c>
     e90:	9e 3f       	cpi	r25, 0xFE	; 254
     e92:	51 05       	cpc	r21, r1
     e94:	68 f0       	brcs	.+26     	; 0xeb0 <__divsf3_pse+0x82>
     e96:	b6 c0       	rjmp	.+364    	; 0x1004 <__fp_inf>
     e98:	00 c1       	rjmp	.+512    	; 0x109a <__fp_szero>
     e9a:	5f 3f       	cpi	r21, 0xFF	; 255
     e9c:	ec f3       	brlt	.-6      	; 0xe98 <__divsf3_pse+0x6a>
     e9e:	98 3e       	cpi	r25, 0xE8	; 232
     ea0:	dc f3       	brlt	.-10     	; 0xe98 <__divsf3_pse+0x6a>
     ea2:	86 95       	lsr	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	b7 95       	ror	r27
     eaa:	f7 95       	ror	r31
     eac:	9f 5f       	subi	r25, 0xFF	; 255
     eae:	c9 f7       	brne	.-14     	; 0xea2 <__divsf3_pse+0x74>
     eb0:	88 0f       	add	r24, r24
     eb2:	91 1d       	adc	r25, r1
     eb4:	96 95       	lsr	r25
     eb6:	87 95       	ror	r24
     eb8:	97 f9       	bld	r25, 7
     eba:	08 95       	ret
     ebc:	e1 e0       	ldi	r30, 0x01	; 1
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	bb 1f       	adc	r27, r27
     ec6:	62 17       	cp	r22, r18
     ec8:	73 07       	cpc	r23, r19
     eca:	84 07       	cpc	r24, r20
     ecc:	ba 07       	cpc	r27, r26
     ece:	20 f0       	brcs	.+8      	; 0xed8 <__divsf3_pse+0xaa>
     ed0:	62 1b       	sub	r22, r18
     ed2:	73 0b       	sbc	r23, r19
     ed4:	84 0b       	sbc	r24, r20
     ed6:	ba 0b       	sbc	r27, r26
     ed8:	ee 1f       	adc	r30, r30
     eda:	88 f7       	brcc	.-30     	; 0xebe <__divsf3_pse+0x90>
     edc:	e0 95       	com	r30
     ede:	08 95       	ret

00000ee0 <__fixsfsi>:
     ee0:	04 d0       	rcall	.+8      	; 0xeea <__fixunssfsi>
     ee2:	68 94       	set
     ee4:	b1 11       	cpse	r27, r1
     ee6:	d9 c0       	rjmp	.+434    	; 0x109a <__fp_szero>
     ee8:	08 95       	ret

00000eea <__fixunssfsi>:
     eea:	bc d0       	rcall	.+376    	; 0x1064 <__fp_splitA>
     eec:	88 f0       	brcs	.+34     	; 0xf10 <__fixunssfsi+0x26>
     eee:	9f 57       	subi	r25, 0x7F	; 127
     ef0:	90 f0       	brcs	.+36     	; 0xf16 <__fixunssfsi+0x2c>
     ef2:	b9 2f       	mov	r27, r25
     ef4:	99 27       	eor	r25, r25
     ef6:	b7 51       	subi	r27, 0x17	; 23
     ef8:	a0 f0       	brcs	.+40     	; 0xf22 <__fixunssfsi+0x38>
     efa:	d1 f0       	breq	.+52     	; 0xf30 <__fixunssfsi+0x46>
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	1a f0       	brmi	.+6      	; 0xf0c <__fixunssfsi+0x22>
     f06:	ba 95       	dec	r27
     f08:	c9 f7       	brne	.-14     	; 0xefc <__fixunssfsi+0x12>
     f0a:	12 c0       	rjmp	.+36     	; 0xf30 <__fixunssfsi+0x46>
     f0c:	b1 30       	cpi	r27, 0x01	; 1
     f0e:	81 f0       	breq	.+32     	; 0xf30 <__fixunssfsi+0x46>
     f10:	c3 d0       	rcall	.+390    	; 0x1098 <__fp_zero>
     f12:	b1 e0       	ldi	r27, 0x01	; 1
     f14:	08 95       	ret
     f16:	c0 c0       	rjmp	.+384    	; 0x1098 <__fp_zero>
     f18:	67 2f       	mov	r22, r23
     f1a:	78 2f       	mov	r23, r24
     f1c:	88 27       	eor	r24, r24
     f1e:	b8 5f       	subi	r27, 0xF8	; 248
     f20:	39 f0       	breq	.+14     	; 0xf30 <__fixunssfsi+0x46>
     f22:	b9 3f       	cpi	r27, 0xF9	; 249
     f24:	cc f3       	brlt	.-14     	; 0xf18 <__fixunssfsi+0x2e>
     f26:	86 95       	lsr	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	b3 95       	inc	r27
     f2e:	d9 f7       	brne	.-10     	; 0xf26 <__fixunssfsi+0x3c>
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__fixunssfsi+0x56>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__floatunsisf>:
     f42:	e8 94       	clt
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <__floatsisf+0x12>

00000f46 <__floatsisf>:
     f46:	97 fb       	bst	r25, 7
     f48:	3e f4       	brtc	.+14     	; 0xf58 <__floatsisf+0x12>
     f4a:	90 95       	com	r25
     f4c:	80 95       	com	r24
     f4e:	70 95       	com	r23
     f50:	61 95       	neg	r22
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	99 23       	and	r25, r25
     f5a:	a9 f0       	breq	.+42     	; 0xf86 <__floatsisf+0x40>
     f5c:	f9 2f       	mov	r31, r25
     f5e:	96 e9       	ldi	r25, 0x96	; 150
     f60:	bb 27       	eor	r27, r27
     f62:	93 95       	inc	r25
     f64:	f6 95       	lsr	r31
     f66:	87 95       	ror	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b7 95       	ror	r27
     f6e:	f1 11       	cpse	r31, r1
     f70:	f8 cf       	rjmp	.-16     	; 0xf62 <__floatsisf+0x1c>
     f72:	fa f4       	brpl	.+62     	; 0xfb2 <__floatsisf+0x6c>
     f74:	bb 0f       	add	r27, r27
     f76:	11 f4       	brne	.+4      	; 0xf7c <__floatsisf+0x36>
     f78:	60 ff       	sbrs	r22, 0
     f7a:	1b c0       	rjmp	.+54     	; 0xfb2 <__floatsisf+0x6c>
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	16 c0       	rjmp	.+44     	; 0xfb2 <__floatsisf+0x6c>
     f86:	88 23       	and	r24, r24
     f88:	11 f0       	breq	.+4      	; 0xf8e <__floatsisf+0x48>
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <__floatsisf+0x6a>
     f8e:	77 23       	and	r23, r23
     f90:	21 f0       	breq	.+8      	; 0xf9a <__floatsisf+0x54>
     f92:	9e e8       	ldi	r25, 0x8E	; 142
     f94:	87 2f       	mov	r24, r23
     f96:	76 2f       	mov	r23, r22
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__floatsisf+0x5e>
     f9a:	66 23       	and	r22, r22
     f9c:	71 f0       	breq	.+28     	; 0xfba <__floatsisf+0x74>
     f9e:	96 e8       	ldi	r25, 0x86	; 134
     fa0:	86 2f       	mov	r24, r22
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	2a f0       	brmi	.+10     	; 0xfb2 <__floatsisf+0x6c>
     fa8:	9a 95       	dec	r25
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	da f7       	brpl	.-10     	; 0xfa8 <__floatsisf+0x62>
     fb2:	88 0f       	add	r24, r24
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__fp_cmp>:
     fbc:	99 0f       	add	r25, r25
     fbe:	00 08       	sbc	r0, r0
     fc0:	55 0f       	add	r21, r21
     fc2:	aa 0b       	sbc	r26, r26
     fc4:	e0 e8       	ldi	r30, 0x80	; 128
     fc6:	fe ef       	ldi	r31, 0xFE	; 254
     fc8:	16 16       	cp	r1, r22
     fca:	17 06       	cpc	r1, r23
     fcc:	e8 07       	cpc	r30, r24
     fce:	f9 07       	cpc	r31, r25
     fd0:	c0 f0       	brcs	.+48     	; 0x1002 <__fp_cmp+0x46>
     fd2:	12 16       	cp	r1, r18
     fd4:	13 06       	cpc	r1, r19
     fd6:	e4 07       	cpc	r30, r20
     fd8:	f5 07       	cpc	r31, r21
     fda:	98 f0       	brcs	.+38     	; 0x1002 <__fp_cmp+0x46>
     fdc:	62 1b       	sub	r22, r18
     fde:	73 0b       	sbc	r23, r19
     fe0:	84 0b       	sbc	r24, r20
     fe2:	95 0b       	sbc	r25, r21
     fe4:	39 f4       	brne	.+14     	; 0xff4 <__fp_cmp+0x38>
     fe6:	0a 26       	eor	r0, r26
     fe8:	61 f0       	breq	.+24     	; 0x1002 <__fp_cmp+0x46>
     fea:	23 2b       	or	r18, r19
     fec:	24 2b       	or	r18, r20
     fee:	25 2b       	or	r18, r21
     ff0:	21 f4       	brne	.+8      	; 0xffa <__fp_cmp+0x3e>
     ff2:	08 95       	ret
     ff4:	0a 26       	eor	r0, r26
     ff6:	09 f4       	brne	.+2      	; 0xffa <__fp_cmp+0x3e>
     ff8:	a1 40       	sbci	r26, 0x01	; 1
     ffa:	a6 95       	lsr	r26
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	81 1d       	adc	r24, r1
    1000:	81 1d       	adc	r24, r1
    1002:	08 95       	ret

00001004 <__fp_inf>:
    1004:	97 f9       	bld	r25, 7
    1006:	9f 67       	ori	r25, 0x7F	; 127
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	08 95       	ret

00001010 <__fp_nan>:
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	08 95       	ret

00001016 <__fp_pscA>:
    1016:	00 24       	eor	r0, r0
    1018:	0a 94       	dec	r0
    101a:	16 16       	cp	r1, r22
    101c:	17 06       	cpc	r1, r23
    101e:	18 06       	cpc	r1, r24
    1020:	09 06       	cpc	r0, r25
    1022:	08 95       	ret

00001024 <__fp_pscB>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	12 16       	cp	r1, r18
    102a:	13 06       	cpc	r1, r19
    102c:	14 06       	cpc	r1, r20
    102e:	05 06       	cpc	r0, r21
    1030:	08 95       	ret

00001032 <__fp_round>:
    1032:	09 2e       	mov	r0, r25
    1034:	03 94       	inc	r0
    1036:	00 0c       	add	r0, r0
    1038:	11 f4       	brne	.+4      	; 0x103e <__fp_round+0xc>
    103a:	88 23       	and	r24, r24
    103c:	52 f0       	brmi	.+20     	; 0x1052 <__fp_round+0x20>
    103e:	bb 0f       	add	r27, r27
    1040:	40 f4       	brcc	.+16     	; 0x1052 <__fp_round+0x20>
    1042:	bf 2b       	or	r27, r31
    1044:	11 f4       	brne	.+4      	; 0x104a <__fp_round+0x18>
    1046:	60 ff       	sbrs	r22, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <__fp_round+0x20>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__fp_split3>:
    1054:	57 fd       	sbrc	r21, 7
    1056:	90 58       	subi	r25, 0x80	; 128
    1058:	44 0f       	add	r20, r20
    105a:	55 1f       	adc	r21, r21
    105c:	59 f0       	breq	.+22     	; 0x1074 <__fp_splitA+0x10>
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	71 f0       	breq	.+28     	; 0x107e <__fp_splitA+0x1a>
    1062:	47 95       	ror	r20

00001064 <__fp_splitA>:
    1064:	88 0f       	add	r24, r24
    1066:	97 fb       	bst	r25, 7
    1068:	99 1f       	adc	r25, r25
    106a:	61 f0       	breq	.+24     	; 0x1084 <__fp_splitA+0x20>
    106c:	9f 3f       	cpi	r25, 0xFF	; 255
    106e:	79 f0       	breq	.+30     	; 0x108e <__fp_splitA+0x2a>
    1070:	87 95       	ror	r24
    1072:	08 95       	ret
    1074:	12 16       	cp	r1, r18
    1076:	13 06       	cpc	r1, r19
    1078:	14 06       	cpc	r1, r20
    107a:	55 1f       	adc	r21, r21
    107c:	f2 cf       	rjmp	.-28     	; 0x1062 <__fp_split3+0xe>
    107e:	46 95       	lsr	r20
    1080:	f1 df       	rcall	.-30     	; 0x1064 <__fp_splitA>
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <__fp_splitA+0x30>
    1084:	16 16       	cp	r1, r22
    1086:	17 06       	cpc	r1, r23
    1088:	18 06       	cpc	r1, r24
    108a:	99 1f       	adc	r25, r25
    108c:	f1 cf       	rjmp	.-30     	; 0x1070 <__fp_splitA+0xc>
    108e:	86 95       	lsr	r24
    1090:	71 05       	cpc	r23, r1
    1092:	61 05       	cpc	r22, r1
    1094:	08 94       	sec
    1096:	08 95       	ret

00001098 <__fp_zero>:
    1098:	e8 94       	clt

0000109a <__fp_szero>:
    109a:	bb 27       	eor	r27, r27
    109c:	66 27       	eor	r22, r22
    109e:	77 27       	eor	r23, r23
    10a0:	cb 01       	movw	r24, r22
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret

000010a6 <__gesf2>:
    10a6:	8a df       	rcall	.-236    	; 0xfbc <__fp_cmp>
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <__gesf2+0x6>
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__mulsf3>:
    10ae:	0b d0       	rcall	.+22     	; 0x10c6 <__mulsf3x>
    10b0:	c0 cf       	rjmp	.-128    	; 0x1032 <__fp_round>
    10b2:	b1 df       	rcall	.-158    	; 0x1016 <__fp_pscA>
    10b4:	28 f0       	brcs	.+10     	; 0x10c0 <__mulsf3+0x12>
    10b6:	b6 df       	rcall	.-148    	; 0x1024 <__fp_pscB>
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <__mulsf3+0x12>
    10ba:	95 23       	and	r25, r21
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__mulsf3+0x12>
    10be:	a2 cf       	rjmp	.-188    	; 0x1004 <__fp_inf>
    10c0:	a7 cf       	rjmp	.-178    	; 0x1010 <__fp_nan>
    10c2:	11 24       	eor	r1, r1
    10c4:	ea cf       	rjmp	.-44     	; 0x109a <__fp_szero>

000010c6 <__mulsf3x>:
    10c6:	c6 df       	rcall	.-116    	; 0x1054 <__fp_split3>
    10c8:	a0 f3       	brcs	.-24     	; 0x10b2 <__mulsf3+0x4>

000010ca <__mulsf3_pse>:
    10ca:	95 9f       	mul	r25, r21
    10cc:	d1 f3       	breq	.-12     	; 0x10c2 <__mulsf3+0x14>
    10ce:	95 0f       	add	r25, r21
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	55 1f       	adc	r21, r21
    10d4:	62 9f       	mul	r22, r18
    10d6:	f0 01       	movw	r30, r0
    10d8:	72 9f       	mul	r23, r18
    10da:	bb 27       	eor	r27, r27
    10dc:	f0 0d       	add	r31, r0
    10de:	b1 1d       	adc	r27, r1
    10e0:	63 9f       	mul	r22, r19
    10e2:	aa 27       	eor	r26, r26
    10e4:	f0 0d       	add	r31, r0
    10e6:	b1 1d       	adc	r27, r1
    10e8:	aa 1f       	adc	r26, r26
    10ea:	64 9f       	mul	r22, r20
    10ec:	66 27       	eor	r22, r22
    10ee:	b0 0d       	add	r27, r0
    10f0:	a1 1d       	adc	r26, r1
    10f2:	66 1f       	adc	r22, r22
    10f4:	82 9f       	mul	r24, r18
    10f6:	22 27       	eor	r18, r18
    10f8:	b0 0d       	add	r27, r0
    10fa:	a1 1d       	adc	r26, r1
    10fc:	62 1f       	adc	r22, r18
    10fe:	73 9f       	mul	r23, r19
    1100:	b0 0d       	add	r27, r0
    1102:	a1 1d       	adc	r26, r1
    1104:	62 1f       	adc	r22, r18
    1106:	83 9f       	mul	r24, r19
    1108:	a0 0d       	add	r26, r0
    110a:	61 1d       	adc	r22, r1
    110c:	22 1f       	adc	r18, r18
    110e:	74 9f       	mul	r23, r20
    1110:	33 27       	eor	r19, r19
    1112:	a0 0d       	add	r26, r0
    1114:	61 1d       	adc	r22, r1
    1116:	23 1f       	adc	r18, r19
    1118:	84 9f       	mul	r24, r20
    111a:	60 0d       	add	r22, r0
    111c:	21 1d       	adc	r18, r1
    111e:	82 2f       	mov	r24, r18
    1120:	76 2f       	mov	r23, r22
    1122:	6a 2f       	mov	r22, r26
    1124:	11 24       	eor	r1, r1
    1126:	9f 57       	subi	r25, 0x7F	; 127
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	8a f0       	brmi	.+34     	; 0x114e <__stack+0x4f>
    112c:	e1 f0       	breq	.+56     	; 0x1166 <__stack+0x67>
    112e:	88 23       	and	r24, r24
    1130:	4a f0       	brmi	.+18     	; 0x1144 <__stack+0x45>
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	bb 1f       	adc	r27, r27
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	91 50       	subi	r25, 0x01	; 1
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	a9 f7       	brne	.-22     	; 0x112e <__stack+0x2f>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	70 f0       	brcs	.+28     	; 0x1166 <__stack+0x67>
    114a:	5c cf       	rjmp	.-328    	; 0x1004 <__fp_inf>
    114c:	a6 cf       	rjmp	.-180    	; 0x109a <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__stack+0x4d>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__stack+0x4d>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	e7 95       	ror	r30
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	c1 f7       	brne	.-16     	; 0x1156 <__stack+0x57>
    1166:	fe 2b       	or	r31, r30
    1168:	88 0f       	add	r24, r24
    116a:	91 1d       	adc	r25, r1
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret

00001174 <calloc>:
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	68 9f       	mul	r22, r24
    117e:	80 01       	movw	r16, r0
    1180:	69 9f       	mul	r22, r25
    1182:	10 0d       	add	r17, r0
    1184:	78 9f       	mul	r23, r24
    1186:	10 0d       	add	r17, r0
    1188:	11 24       	eor	r1, r1
    118a:	c8 01       	movw	r24, r16
    118c:	0d d0       	rcall	.+26     	; 0x11a8 <malloc>
    118e:	ec 01       	movw	r28, r24
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	21 f0       	breq	.+8      	; 0x119c <calloc+0x28>
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	a8 01       	movw	r20, r16
    119a:	0b d1       	rcall	.+534    	; 0x13b2 <memset>
    119c:	ce 01       	movw	r24, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <malloc>:
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	bc 01       	movw	r22, r24
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	91 05       	cpc	r25, r1
    11b2:	10 f4       	brcc	.+4      	; 0x11b8 <malloc+0x10>
    11b4:	62 e0       	ldi	r22, 0x02	; 2
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	a0 91 49 02 	lds	r26, 0x0249
    11bc:	b0 91 4a 02 	lds	r27, 0x024A
    11c0:	ed 01       	movw	r28, r26
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	21 c0       	rjmp	.+66     	; 0x120e <malloc+0x66>
    11cc:	88 81       	ld	r24, Y
    11ce:	99 81       	ldd	r25, Y+1	; 0x01
    11d0:	86 17       	cp	r24, r22
    11d2:	97 07       	cpc	r25, r23
    11d4:	69 f4       	brne	.+26     	; 0x11f0 <malloc+0x48>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	30 97       	sbiw	r30, 0x00	; 0
    11dc:	19 f0       	breq	.+6      	; 0x11e4 <malloc+0x3c>
    11de:	93 83       	std	Z+3, r25	; 0x03
    11e0:	82 83       	std	Z+2, r24	; 0x02
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <malloc+0x44>
    11e4:	90 93 4a 02 	sts	0x024A, r25
    11e8:	80 93 49 02 	sts	0x0249, r24
    11ec:	fe 01       	movw	r30, r28
    11ee:	34 c0       	rjmp	.+104    	; 0x1258 <malloc+0xb0>
    11f0:	68 17       	cp	r22, r24
    11f2:	79 07       	cpc	r23, r25
    11f4:	38 f4       	brcc	.+14     	; 0x1204 <malloc+0x5c>
    11f6:	41 15       	cp	r20, r1
    11f8:	51 05       	cpc	r21, r1
    11fa:	19 f0       	breq	.+6      	; 0x1202 <malloc+0x5a>
    11fc:	84 17       	cp	r24, r20
    11fe:	95 07       	cpc	r25, r21
    1200:	08 f4       	brcc	.+2      	; 0x1204 <malloc+0x5c>
    1202:	ac 01       	movw	r20, r24
    1204:	fe 01       	movw	r30, r28
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	9c 01       	movw	r18, r24
    120c:	e9 01       	movw	r28, r18
    120e:	20 97       	sbiw	r28, 0x00	; 0
    1210:	e9 f6       	brne	.-70     	; 0x11cc <malloc+0x24>
    1212:	41 15       	cp	r20, r1
    1214:	51 05       	cpc	r21, r1
    1216:	a9 f1       	breq	.+106    	; 0x1282 <malloc+0xda>
    1218:	ca 01       	movw	r24, r20
    121a:	86 1b       	sub	r24, r22
    121c:	97 0b       	sbc	r25, r23
    121e:	04 97       	sbiw	r24, 0x04	; 4
    1220:	08 f4       	brcc	.+2      	; 0x1224 <malloc+0x7c>
    1222:	ba 01       	movw	r22, r20
    1224:	e0 e0       	ldi	r30, 0x00	; 0
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	2a c0       	rjmp	.+84     	; 0x127e <malloc+0xd6>
    122a:	8d 91       	ld	r24, X+
    122c:	9c 91       	ld	r25, X
    122e:	11 97       	sbiw	r26, 0x01	; 1
    1230:	84 17       	cp	r24, r20
    1232:	95 07       	cpc	r25, r21
    1234:	f9 f4       	brne	.+62     	; 0x1274 <malloc+0xcc>
    1236:	64 17       	cp	r22, r20
    1238:	75 07       	cpc	r23, r21
    123a:	81 f4       	brne	.+32     	; 0x125c <malloc+0xb4>
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	13 97       	sbiw	r26, 0x03	; 3
    1244:	30 97       	sbiw	r30, 0x00	; 0
    1246:	19 f0       	breq	.+6      	; 0x124e <malloc+0xa6>
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <malloc+0xae>
    124e:	90 93 4a 02 	sts	0x024A, r25
    1252:	80 93 49 02 	sts	0x0249, r24
    1256:	fd 01       	movw	r30, r26
    1258:	32 96       	adiw	r30, 0x02	; 2
    125a:	4f c0       	rjmp	.+158    	; 0x12fa <malloc+0x152>
    125c:	ca 01       	movw	r24, r20
    125e:	86 1b       	sub	r24, r22
    1260:	97 0b       	sbc	r25, r23
    1262:	fd 01       	movw	r30, r26
    1264:	e8 0f       	add	r30, r24
    1266:	f9 1f       	adc	r31, r25
    1268:	61 93       	st	Z+, r22
    126a:	71 93       	st	Z+, r23
    126c:	02 97       	sbiw	r24, 0x02	; 2
    126e:	8d 93       	st	X+, r24
    1270:	9c 93       	st	X, r25
    1272:	43 c0       	rjmp	.+134    	; 0x12fa <malloc+0x152>
    1274:	fd 01       	movw	r30, r26
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	9c 01       	movw	r18, r24
    127c:	d9 01       	movw	r26, r18
    127e:	10 97       	sbiw	r26, 0x00	; 0
    1280:	a1 f6       	brne	.-88     	; 0x122a <malloc+0x82>
    1282:	80 91 47 02 	lds	r24, 0x0247
    1286:	90 91 48 02 	lds	r25, 0x0248
    128a:	89 2b       	or	r24, r25
    128c:	41 f4       	brne	.+16     	; 0x129e <malloc+0xf6>
    128e:	80 91 02 01 	lds	r24, 0x0102
    1292:	90 91 03 01 	lds	r25, 0x0103
    1296:	90 93 48 02 	sts	0x0248, r25
    129a:	80 93 47 02 	sts	0x0247, r24
    129e:	40 91 04 01 	lds	r20, 0x0104
    12a2:	50 91 05 01 	lds	r21, 0x0105
    12a6:	41 15       	cp	r20, r1
    12a8:	51 05       	cpc	r21, r1
    12aa:	41 f4       	brne	.+16     	; 0x12bc <malloc+0x114>
    12ac:	4d b7       	in	r20, 0x3d	; 61
    12ae:	5e b7       	in	r21, 0x3e	; 62
    12b0:	80 91 00 01 	lds	r24, 0x0100
    12b4:	90 91 01 01 	lds	r25, 0x0101
    12b8:	48 1b       	sub	r20, r24
    12ba:	59 0b       	sbc	r21, r25
    12bc:	20 91 47 02 	lds	r18, 0x0247
    12c0:	30 91 48 02 	lds	r19, 0x0248
    12c4:	24 17       	cp	r18, r20
    12c6:	35 07       	cpc	r19, r21
    12c8:	b0 f4       	brcc	.+44     	; 0x12f6 <malloc+0x14e>
    12ca:	ca 01       	movw	r24, r20
    12cc:	82 1b       	sub	r24, r18
    12ce:	93 0b       	sbc	r25, r19
    12d0:	86 17       	cp	r24, r22
    12d2:	97 07       	cpc	r25, r23
    12d4:	80 f0       	brcs	.+32     	; 0x12f6 <malloc+0x14e>
    12d6:	ab 01       	movw	r20, r22
    12d8:	4e 5f       	subi	r20, 0xFE	; 254
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	84 17       	cp	r24, r20
    12de:	95 07       	cpc	r25, r21
    12e0:	50 f0       	brcs	.+20     	; 0x12f6 <malloc+0x14e>
    12e2:	42 0f       	add	r20, r18
    12e4:	53 1f       	adc	r21, r19
    12e6:	50 93 48 02 	sts	0x0248, r21
    12ea:	40 93 47 02 	sts	0x0247, r20
    12ee:	f9 01       	movw	r30, r18
    12f0:	61 93       	st	Z+, r22
    12f2:	71 93       	st	Z+, r23
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <malloc+0x152>
    12f6:	e0 e0       	ldi	r30, 0x00	; 0
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	cf 01       	movw	r24, r30
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <free>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	09 f4       	brne	.+2      	; 0x130c <free+0xa>
    130a:	50 c0       	rjmp	.+160    	; 0x13ac <free+0xaa>
    130c:	ec 01       	movw	r28, r24
    130e:	22 97       	sbiw	r28, 0x02	; 2
    1310:	1b 82       	std	Y+3, r1	; 0x03
    1312:	1a 82       	std	Y+2, r1	; 0x02
    1314:	a0 91 49 02 	lds	r26, 0x0249
    1318:	b0 91 4a 02 	lds	r27, 0x024A
    131c:	10 97       	sbiw	r26, 0x00	; 0
    131e:	09 f1       	breq	.+66     	; 0x1362 <free+0x60>
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	ac 17       	cp	r26, r28
    1326:	bd 07       	cpc	r27, r29
    1328:	08 f1       	brcs	.+66     	; 0x136c <free+0x6a>
    132a:	bb 83       	std	Y+3, r27	; 0x03
    132c:	aa 83       	std	Y+2, r26	; 0x02
    132e:	fe 01       	movw	r30, r28
    1330:	21 91       	ld	r18, Z+
    1332:	31 91       	ld	r19, Z+
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	ae 17       	cp	r26, r30
    133a:	bf 07       	cpc	r27, r31
    133c:	79 f4       	brne	.+30     	; 0x135c <free+0x5a>
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	11 97       	sbiw	r26, 0x01	; 1
    1344:	28 0f       	add	r18, r24
    1346:	39 1f       	adc	r19, r25
    1348:	2e 5f       	subi	r18, 0xFE	; 254
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	39 83       	std	Y+1, r19	; 0x01
    134e:	28 83       	st	Y, r18
    1350:	12 96       	adiw	r26, 0x02	; 2
    1352:	8d 91       	ld	r24, X+
    1354:	9c 91       	ld	r25, X
    1356:	13 97       	sbiw	r26, 0x03	; 3
    1358:	9b 83       	std	Y+3, r25	; 0x03
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	71 f4       	brne	.+28     	; 0x137e <free+0x7c>
    1362:	d0 93 4a 02 	sts	0x024A, r29
    1366:	c0 93 49 02 	sts	0x0249, r28
    136a:	20 c0       	rjmp	.+64     	; 0x13ac <free+0xaa>
    136c:	12 96       	adiw	r26, 0x02	; 2
    136e:	8d 91       	ld	r24, X+
    1370:	9c 91       	ld	r25, X
    1372:	13 97       	sbiw	r26, 0x03	; 3
    1374:	ad 01       	movw	r20, r26
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	11 f0       	breq	.+4      	; 0x137e <free+0x7c>
    137a:	dc 01       	movw	r26, r24
    137c:	d3 cf       	rjmp	.-90     	; 0x1324 <free+0x22>
    137e:	fa 01       	movw	r30, r20
    1380:	d3 83       	std	Z+3, r29	; 0x03
    1382:	c2 83       	std	Z+2, r28	; 0x02
    1384:	21 91       	ld	r18, Z+
    1386:	31 91       	ld	r19, Z+
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	ce 17       	cp	r28, r30
    138e:	df 07       	cpc	r29, r31
    1390:	69 f4       	brne	.+26     	; 0x13ac <free+0xaa>
    1392:	88 81       	ld	r24, Y
    1394:	99 81       	ldd	r25, Y+1	; 0x01
    1396:	28 0f       	add	r18, r24
    1398:	39 1f       	adc	r19, r25
    139a:	2e 5f       	subi	r18, 0xFE	; 254
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	fa 01       	movw	r30, r20
    13a0:	31 83       	std	Z+1, r19	; 0x01
    13a2:	20 83       	st	Z, r18
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	93 83       	std	Z+3, r25	; 0x03
    13aa:	82 83       	std	Z+2, r24	; 0x02
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <memset>:
    13b2:	dc 01       	movw	r26, r24
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <memset+0x6>
    13b6:	6d 93       	st	X+, r22
    13b8:	41 50       	subi	r20, 0x01	; 1
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	e0 f7       	brcc	.-8      	; 0x13b6 <memset+0x4>
    13be:	08 95       	ret

000013c0 <_exit>:
    13c0:	f8 94       	cli

000013c2 <__stop_program>:
    13c2:	ff cf       	rjmp	.-2      	; 0x13c2 <__stop_program>
