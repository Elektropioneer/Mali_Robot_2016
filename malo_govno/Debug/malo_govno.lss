
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000264a  000026de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000264a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  0080011c  0080011c  000026fa  2**0
                  ALLOC
  3 .debug_aranges 000002a8  00000000  00000000  000026fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000590  00000000  00000000  000029a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b9c  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090d  00000000  00000000  00004ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d11  00000000  00000000  000053db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  000070ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000081f  00000000  00000000  0000751c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000260  00000000  00000000  00007d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	if(sys_time >= 80000)
		actuators_kisobran();
	sys_time++;
}
uint8_t system_jumper_check(void)
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c3       	rjmp	.+2016   	; 0x82a <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e4       	ldi	r30, 0x4A	; 74
      a8:	f6 e2       	ldi	r31, 0x26	; 38
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 36       	cpi	r26, 0x64	; 100
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 23 13 	jmp	0x2646	; 0x2646 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "sides.h"
#include "actuators.h"


int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62

	system_init();
      da:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <system_init>
	//90
	
	while(1)
	{
		greenside();
      de:	0e 94 56 09 	call	0x12ac	; 0x12ac <greenside>
      e2:	fd cf       	rjmp	.-6      	; 0xde <main+0xc>

000000e4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	df 93       	push	r29
      ea:	cf 93       	push	r28
      ec:	00 d0       	rcall	.+0      	; 0xee <servo_init+0xa>
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	9a 83       	std	Y+2, r25	; 0x02
      f4:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
      f6:	ad e2       	ldi	r26, 0x2D	; 45
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	ed e2       	ldi	r30, 0x2D	; 45
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	88 63       	ori	r24, 0x38	; 56
     102:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     104:	e4 e9       	ldi	r30, 0x94	; 148
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	11 82       	std	Z+1, r1	; 0x01
     10a:	10 82       	st	Z, r1
	OCR3A = 0;
     10c:	e8 e9       	ldi	r30, 0x98	; 152
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	11 82       	std	Z+1, r1	; 0x01
     112:	10 82       	st	Z, r1
	OCR3B = 0;
     114:	ea e9       	ldi	r30, 0x9A	; 154
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	11 82       	std	Z+1, r1	; 0x01
     11a:	10 82       	st	Z, r1
	OCR3C = 0;
     11c:	ec e9       	ldi	r30, 0x9C	; 156
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	11 82       	std	Z+1, r1	; 0x01
     122:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     124:	e0 e9       	ldi	r30, 0x90	; 144
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	8e eb       	ldi	r24, 0xBE	; 190
     12a:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     12c:	e1 e9       	ldi	r30, 0x91	; 145
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	8a e1       	ldi	r24, 0x1A	; 26
     132:	80 83       	st	Z, r24
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     134:	06 e9       	ldi	r16, 0x96	; 150
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	cc 01       	movw	r24, r24
     13e:	a0 e0       	ldi	r26, 0x00	; 0
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	51 e4       	ldi	r21, 0x41	; 65
     15a:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     15e:	dc 01       	movw	r26, r24
     160:	cb 01       	movw	r24, r22
     162:	9c 01       	movw	r18, r24
     164:	ad 01       	movw	r20, r26
     166:	60 e8       	ldi	r22, 0x80	; 128
     168:	76 e9       	ldi	r23, 0x96	; 150
     16a:	88 e1       	ldi	r24, 0x18	; 24
     16c:	9b e4       	ldi	r25, 0x4B	; 75
     16e:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	bc 01       	movw	r22, r24
     178:	cd 01       	movw	r24, r26
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	5f e3       	ldi	r21, 0x3F	; 63
     182:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__addsf3>
     186:	dc 01       	movw	r26, r24
     188:	cb 01       	movw	r24, r22
     18a:	bc 01       	movw	r22, r24
     18c:	cd 01       	movw	r24, r26
     18e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     192:	dc 01       	movw	r26, r24
     194:	cb 01       	movw	r24, r22
     196:	f8 01       	movw	r30, r16
     198:	91 83       	std	Z+1, r25	; 0x01
     19a:	80 83       	st	Z, r24
}//END OF servo_init
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	cf 91       	pop	r28
     1a2:	df 91       	pop	r29
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <servo_set_duty_cycle_kisobran>:


static void servo_set_duty_cycle_kisobran(int16_t value)
{
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <servo_set_duty_cycle_kisobran+0xe>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <servo_set_duty_cycle_kisobran+0x10>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	9c 83       	std	Y+4, r25	; 0x04
     1c0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     1c2:	e6 e9       	ldi	r30, 0x96	; 150
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	91 81       	ldd	r25, Z+1	; 0x01
     1ca:	cc 01       	movw	r24, r24
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	bc 01       	movw	r22, r24
     1d2:	cd 01       	movw	r24, r26
     1d4:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
     1d8:	dc 01       	movw	r26, r24
     1da:	cb 01       	movw	r24, r22
     1dc:	bc 01       	movw	r22, r24
     1de:	cd 01       	movw	r24, r26
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	4f e7       	ldi	r20, 0x7F	; 127
     1e6:	53 e4       	ldi	r21, 0x43	; 67
     1e8:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
     1ec:	dc 01       	movw	r26, r24
     1ee:	cb 01       	movw	r24, r22
     1f0:	7c 01       	movw	r14, r24
     1f2:	8d 01       	movw	r16, r26
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	aa 27       	eor	r26, r26
     1fa:	97 fd       	sbrc	r25, 7
     1fc:	a0 95       	com	r26
     1fe:	ba 2f       	mov	r27, r26
     200:	bc 01       	movw	r22, r24
     202:	cd 01       	movw	r24, r26
     204:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c8 01       	movw	r24, r16
     20e:	b7 01       	movw	r22, r14
     210:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	5f e3       	ldi	r21, 0x3F	; 63
     224:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__addsf3>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	9a 83       	std	Y+2, r25	; 0x02
     23a:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     23c:	e9 e9       	ldi	r30, 0x99	; 153
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	89 2f       	mov	r24, r25
     246:	99 27       	eor	r25, r25
     248:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     24a:	e8 e9       	ldi	r30, 0x98	; 152
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	80 83       	st	Z, r24
	
}//END OF servo_position
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	cf 91       	pop	r28
     25c:	df 91       	pop	r29
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	08 95       	ret

00000268 <servo_set_kisobran_position>:

void servo_set_kisobran_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	0f 92       	push	r0
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_kisobran( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	99 27       	eor	r25, r25
     278:	87 fd       	sbrc	r24, 7
     27a:	90 95       	com	r25
     27c:	a9 2f       	mov	r26, r25
     27e:	b9 2f       	mov	r27, r25
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	bc 01       	movw	r22, r24
     28e:	cd 01       	movw	r24, r26
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	44 eb       	ldi	r20, 0xB4	; 180
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	bc 01       	movw	r22, r24
     2a2:	cd 01       	movw	r24, r26
     2a4:	26 e6       	ldi	r18, 0x66	; 102
     2a6:	36 e6       	ldi	r19, 0x66	; 102
     2a8:	46 e3       	ldi	r20, 0x36	; 54
     2aa:	51 ec       	ldi	r21, 0xC1	; 193
     2ac:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	4c e6       	ldi	r20, 0x6C	; 108
     2be:	53 e4       	ldi	r21, 0x43	; 67
     2c0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__addsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	9c 01       	movw	r18, r24
     2ca:	ad 01       	movw	r20, r26
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	8f e7       	ldi	r24, 0x7F	; 127
     2d2:	93 e4       	ldi	r25, 0x43	; 67
     2d4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__subsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixsfsi>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	60 df       	rcall	.-320    	; 0x1aa <servo_set_duty_cycle_kisobran>

}
     2ea:	0f 90       	pop	r0
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	08 95       	ret

000002f2 <servo_set_duty_cycle_vrata>:

static void servo_set_duty_cycle_vrata(int16_t value)
{
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	00 d0       	rcall	.+0      	; 0x300 <servo_set_duty_cycle_vrata+0xe>
     300:	00 d0       	rcall	.+0      	; 0x302 <servo_set_duty_cycle_vrata+0x10>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     30a:	e6 e9       	ldi	r30, 0x96	; 150
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	91 81       	ldd	r25, Z+1	; 0x01
     312:	cc 01       	movw	r24, r24
     314:	a0 e0       	ldi	r26, 0x00	; 0
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	bc 01       	movw	r22, r24
     31a:	cd 01       	movw	r24, r26
     31c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	4f e7       	ldi	r20, 0x7F	; 127
     32e:	53 e4       	ldi	r21, 0x43	; 67
     330:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	7c 01       	movw	r14, r24
     33a:	8d 01       	movw	r16, r26
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	aa 27       	eor	r26, r26
     342:	97 fd       	sbrc	r25, 7
     344:	a0 95       	com	r26
     346:	ba 2f       	mov	r27, r26
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
     354:	c8 01       	movw	r24, r16
     356:	b7 01       	movw	r22, r14
     358:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	bc 01       	movw	r22, r24
     362:	cd 01       	movw	r24, r26
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	5f e3       	ldi	r21, 0x3F	; 63
     36c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__addsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     384:	eb e9       	ldi	r30, 0x9B	; 155
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	89 2f       	mov	r24, r25
     38e:	99 27       	eor	r25, r25
     390:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     392:	ea e9       	ldi	r30, 0x9A	; 154
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	80 83       	st	Z, r24
	
}//END OF servo_position
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	08 95       	ret

000003b0 <servo_set_vrata_position>:
void servo_set_vrata_position(int8_t angle)
{
     3b0:	df 93       	push	r29
     3b2:	cf 93       	push	r28
     3b4:	0f 92       	push	r0
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_vrata( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	99 27       	eor	r25, r25
     3c0:	87 fd       	sbrc	r24, 7
     3c2:	90 95       	com	r25
     3c4:	a9 2f       	mov	r26, r25
     3c6:	b9 2f       	mov	r27, r25
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	bc 01       	movw	r22, r24
     3d6:	cd 01       	movw	r24, r26
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	44 eb       	ldi	r20, 0xB4	; 180
     3de:	52 e4       	ldi	r21, 0x42	; 66
     3e0:	0e 94 4b 10 	call	0x2096	; 0x2096 <__divsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	26 e6       	ldi	r18, 0x66	; 102
     3ee:	36 e6       	ldi	r19, 0x66	; 102
     3f0:	46 e3       	ldi	r20, 0x36	; 54
     3f2:	51 ec       	ldi	r21, 0xC1	; 193
     3f4:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	4c e6       	ldi	r20, 0x6C	; 108
     406:	53 e4       	ldi	r21, 0x43	; 67
     408:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__addsf3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9c 01       	movw	r18, r24
     412:	ad 01       	movw	r20, r26
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	8f e7       	ldi	r24, 0x7F	; 127
     41a:	93 e4       	ldi	r25, 0x43	; 67
     41c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__subsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fixsfsi>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	60 df       	rcall	.-320    	; 0x2f2 <servo_set_duty_cycle_vrata>
}
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <actuators_setup_kisobran>:
void actuators_setup_kisobran(void)
{
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	6c 97       	sbiw	r28, 0x1c	; 28
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
	servo_set_kisobran_position(-86);
     44e:	8a ea       	ldi	r24, 0xAA	; 170
     450:	0b df       	rcall	.-490    	; 0x268 <servo_set_kisobran_position>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	aa e7       	ldi	r26, 0x7A	; 122
     458:	b4 e4       	ldi	r27, 0x44	; 68
     45a:	89 8f       	std	Y+25, r24	; 0x19
     45c:	9a 8f       	std	Y+26, r25	; 0x1a
     45e:	ab 8f       	std	Y+27, r26	; 0x1b
     460:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     462:	69 8d       	ldd	r22, Y+25	; 0x19
     464:	7a 8d       	ldd	r23, Y+26	; 0x1a
     466:	8b 8d       	ldd	r24, Y+27	; 0x1b
     468:	9c 8d       	ldd	r25, Y+28	; 0x1c
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e4       	ldi	r19, 0x40	; 64
     46e:	4c e1       	ldi	r20, 0x1C	; 28
     470:	55 e4       	ldi	r21, 0x45	; 69
     472:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	8d 8b       	std	Y+21, r24	; 0x15
     47c:	9e 8b       	std	Y+22, r25	; 0x16
     47e:	af 8b       	std	Y+23, r26	; 0x17
     480:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     482:	6d 89       	ldd	r22, Y+21	; 0x15
     484:	7e 89       	ldd	r23, Y+22	; 0x16
     486:	8f 89       	ldd	r24, Y+23	; 0x17
     488:	98 8d       	ldd	r25, Y+24	; 0x18
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e8       	ldi	r20, 0x80	; 128
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	0e 94 47 10 	call	0x208e	; 0x208e <__cmpsf2>
     496:	88 23       	and	r24, r24
     498:	2c f4       	brge	.+10     	; 0x4a4 <actuators_setup_kisobran+0x6a>
		__ticks = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9c 8b       	std	Y+20, r25	; 0x14
     4a0:	8b 8b       	std	Y+19, r24	; 0x13
     4a2:	3f c0       	rjmp	.+126    	; 0x522 <actuators_setup_kisobran+0xe8>
	else if (__tmp > 65535)
     4a4:	6d 89       	ldd	r22, Y+21	; 0x15
     4a6:	7e 89       	ldd	r23, Y+22	; 0x16
     4a8:	8f 89       	ldd	r24, Y+23	; 0x17
     4aa:	98 8d       	ldd	r25, Y+24	; 0x18
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	3f ef       	ldi	r19, 0xFF	; 255
     4b0:	4f e7       	ldi	r20, 0x7F	; 127
     4b2:	57 e4       	ldi	r21, 0x47	; 71
     4b4:	0e 94 96 11 	call	0x232c	; 0x232c <__gesf2>
     4b8:	18 16       	cp	r1, r24
     4ba:	4c f5       	brge	.+82     	; 0x50e <actuators_setup_kisobran+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4bc:	69 8d       	ldd	r22, Y+25	; 0x19
     4be:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e2       	ldi	r20, 0x20	; 32
     4ca:	51 e4       	ldi	r21, 0x41	; 65
     4cc:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	bc 01       	movw	r22, r24
     4d6:	cd 01       	movw	r24, r26
     4d8:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	9c 8b       	std	Y+20, r25	; 0x14
     4e2:	8b 8b       	std	Y+19, r24	; 0x13
     4e4:	0f c0       	rjmp	.+30     	; 0x504 <actuators_setup_kisobran+0xca>
     4e6:	8a ef       	ldi	r24, 0xFA	; 250
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	9a 8b       	std	Y+18, r25	; 0x12
     4ec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ee:	89 89       	ldd	r24, Y+17	; 0x11
     4f0:	9a 89       	ldd	r25, Y+18	; 0x12
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <actuators_setup_kisobran+0xb8>
     4f6:	9a 8b       	std	Y+18, r25	; 0x12
     4f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4fa:	8b 89       	ldd	r24, Y+19	; 0x13
     4fc:	9c 89       	ldd	r25, Y+20	; 0x14
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	9c 8b       	std	Y+20, r25	; 0x14
     502:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     504:	8b 89       	ldd	r24, Y+19	; 0x13
     506:	9c 89       	ldd	r25, Y+20	; 0x14
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	69 f7       	brne	.-38     	; 0x4e6 <actuators_setup_kisobran+0xac>
     50c:	14 c0       	rjmp	.+40     	; 0x536 <actuators_setup_kisobran+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     50e:	6d 89       	ldd	r22, Y+21	; 0x15
     510:	7e 89       	ldd	r23, Y+22	; 0x16
     512:	8f 89       	ldd	r24, Y+23	; 0x17
     514:	98 8d       	ldd	r25, Y+24	; 0x18
     516:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	9c 8b       	std	Y+20, r25	; 0x14
     520:	8b 8b       	std	Y+19, r24	; 0x13
     522:	8b 89       	ldd	r24, Y+19	; 0x13
     524:	9c 89       	ldd	r25, Y+20	; 0x14
     526:	98 8b       	std	Y+16, r25	; 0x10
     528:	8f 87       	std	Y+15, r24	; 0x0f
     52a:	8f 85       	ldd	r24, Y+15	; 0x0f
     52c:	98 89       	ldd	r25, Y+16	; 0x10
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <actuators_setup_kisobran+0xf4>
     532:	98 8b       	std	Y+16, r25	; 0x10
     534:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_vrata_position(0);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	3b df       	rcall	.-394    	; 0x3b0 <servo_set_vrata_position>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	aa e7       	ldi	r26, 0x7A	; 122
     540:	b4 e4       	ldi	r27, 0x44	; 68
     542:	8b 87       	std	Y+11, r24	; 0x0b
     544:	9c 87       	std	Y+12, r25	; 0x0c
     546:	ad 87       	std	Y+13, r26	; 0x0d
     548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     54a:	6b 85       	ldd	r22, Y+11	; 0x0b
     54c:	7c 85       	ldd	r23, Y+12	; 0x0c
     54e:	8d 85       	ldd	r24, Y+13	; 0x0d
     550:	9e 85       	ldd	r25, Y+14	; 0x0e
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e4       	ldi	r19, 0x40	; 64
     556:	4c e1       	ldi	r20, 0x1C	; 28
     558:	55 e4       	ldi	r21, 0x45	; 69
     55a:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	8f 83       	std	Y+7, r24	; 0x07
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	a9 87       	std	Y+9, r26	; 0x09
     568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     56a:	6f 81       	ldd	r22, Y+7	; 0x07
     56c:	78 85       	ldd	r23, Y+8	; 0x08
     56e:	89 85       	ldd	r24, Y+9	; 0x09
     570:	9a 85       	ldd	r25, Y+10	; 0x0a
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	0e 94 47 10 	call	0x208e	; 0x208e <__cmpsf2>
     57e:	88 23       	and	r24, r24
     580:	2c f4       	brge	.+10     	; 0x58c <actuators_setup_kisobran+0x152>
		__ticks = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9e 83       	std	Y+6, r25	; 0x06
     588:	8d 83       	std	Y+5, r24	; 0x05
     58a:	3f c0       	rjmp	.+126    	; 0x60a <actuators_setup_kisobran+0x1d0>
	else if (__tmp > 65535)
     58c:	6f 81       	ldd	r22, Y+7	; 0x07
     58e:	78 85       	ldd	r23, Y+8	; 0x08
     590:	89 85       	ldd	r24, Y+9	; 0x09
     592:	9a 85       	ldd	r25, Y+10	; 0x0a
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 96 11 	call	0x232c	; 0x232c <__gesf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	4c f5       	brge	.+82     	; 0x5f6 <actuators_setup_kisobran+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e2       	ldi	r20, 0x20	; 32
     5b2:	51 e4       	ldi	r21, 0x41	; 65
     5b4:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     5c4:	dc 01       	movw	r26, r24
     5c6:	cb 01       	movw	r24, r22
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <actuators_setup_kisobran+0x1b2>
     5ce:	8a ef       	ldi	r24, 0xFA	; 250
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	9c 83       	std	Y+4, r25	; 0x04
     5d4:	8b 83       	std	Y+3, r24	; 0x03
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <actuators_setup_kisobran+0x1a0>
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	00 97       	sbiw	r24, 0x00	; 0
     5f2:	69 f7       	brne	.-38     	; 0x5ce <actuators_setup_kisobran+0x194>
     5f4:	14 c0       	rjmp	.+40     	; 0x61e <actuators_setup_kisobran+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f6:	6f 81       	ldd	r22, Y+7	; 0x07
     5f8:	78 85       	ldd	r23, Y+8	; 0x08
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	9e 83       	std	Y+6, r25	; 0x06
     608:	8d 83       	std	Y+5, r24	; 0x05
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <actuators_setup_kisobran+0x1dc>
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     61e:	6c 96       	adiw	r28, 0x1c	; 28
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	08 95       	ret

00000630 <actuators_kisobran>:
void actuators_kisobran(void)
{
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	6c 97       	sbiw	r28, 0x1c	; 28
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
	servo_set_vrata_position(90);
     644:	8a e5       	ldi	r24, 0x5A	; 90
     646:	b4 de       	rcall	.-664    	; 0x3b0 <servo_set_vrata_position>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	aa e7       	ldi	r26, 0x7A	; 122
     64e:	b4 e4       	ldi	r27, 0x44	; 68
     650:	89 8f       	std	Y+25, r24	; 0x19
     652:	9a 8f       	std	Y+26, r25	; 0x1a
     654:	ab 8f       	std	Y+27, r26	; 0x1b
     656:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     658:	69 8d       	ldd	r22, Y+25	; 0x19
     65a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     65c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     65e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e4       	ldi	r19, 0x40	; 64
     664:	4c e1       	ldi	r20, 0x1C	; 28
     666:	55 e4       	ldi	r21, 0x45	; 69
     668:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	8d 8b       	std	Y+21, r24	; 0x15
     672:	9e 8b       	std	Y+22, r25	; 0x16
     674:	af 8b       	std	Y+23, r26	; 0x17
     676:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     678:	6d 89       	ldd	r22, Y+21	; 0x15
     67a:	7e 89       	ldd	r23, Y+22	; 0x16
     67c:	8f 89       	ldd	r24, Y+23	; 0x17
     67e:	98 8d       	ldd	r25, Y+24	; 0x18
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e8       	ldi	r20, 0x80	; 128
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	0e 94 47 10 	call	0x208e	; 0x208e <__cmpsf2>
     68c:	88 23       	and	r24, r24
     68e:	2c f4       	brge	.+10     	; 0x69a <actuators_kisobran+0x6a>
		__ticks = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	9c 8b       	std	Y+20, r25	; 0x14
     696:	8b 8b       	std	Y+19, r24	; 0x13
     698:	3f c0       	rjmp	.+126    	; 0x718 <actuators_kisobran+0xe8>
	else if (__tmp > 65535)
     69a:	6d 89       	ldd	r22, Y+21	; 0x15
     69c:	7e 89       	ldd	r23, Y+22	; 0x16
     69e:	8f 89       	ldd	r24, Y+23	; 0x17
     6a0:	98 8d       	ldd	r25, Y+24	; 0x18
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	3f ef       	ldi	r19, 0xFF	; 255
     6a6:	4f e7       	ldi	r20, 0x7F	; 127
     6a8:	57 e4       	ldi	r21, 0x47	; 71
     6aa:	0e 94 96 11 	call	0x232c	; 0x232c <__gesf2>
     6ae:	18 16       	cp	r1, r24
     6b0:	4c f5       	brge	.+82     	; 0x704 <actuators_kisobran+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b2:	69 8d       	ldd	r22, Y+25	; 0x19
     6b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	9c 8b       	std	Y+20, r25	; 0x14
     6d8:	8b 8b       	std	Y+19, r24	; 0x13
     6da:	0f c0       	rjmp	.+30     	; 0x6fa <actuators_kisobran+0xca>
     6dc:	8a ef       	ldi	r24, 0xFA	; 250
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9a 8b       	std	Y+18, r25	; 0x12
     6e2:	89 8b       	std	Y+17, r24	; 0x11
     6e4:	89 89       	ldd	r24, Y+17	; 0x11
     6e6:	9a 89       	ldd	r25, Y+18	; 0x12
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <actuators_kisobran+0xb8>
     6ec:	9a 8b       	std	Y+18, r25	; 0x12
     6ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f0:	8b 89       	ldd	r24, Y+19	; 0x13
     6f2:	9c 89       	ldd	r25, Y+20	; 0x14
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	9c 8b       	std	Y+20, r25	; 0x14
     6f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6fa:	8b 89       	ldd	r24, Y+19	; 0x13
     6fc:	9c 89       	ldd	r25, Y+20	; 0x14
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	69 f7       	brne	.-38     	; 0x6dc <actuators_kisobran+0xac>
     702:	14 c0       	rjmp	.+40     	; 0x72c <actuators_kisobran+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     704:	6d 89       	ldd	r22, Y+21	; 0x15
     706:	7e 89       	ldd	r23, Y+22	; 0x16
     708:	8f 89       	ldd	r24, Y+23	; 0x17
     70a:	98 8d       	ldd	r25, Y+24	; 0x18
     70c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	9c 8b       	std	Y+20, r25	; 0x14
     716:	8b 8b       	std	Y+19, r24	; 0x13
     718:	8b 89       	ldd	r24, Y+19	; 0x13
     71a:	9c 89       	ldd	r25, Y+20	; 0x14
     71c:	98 8b       	std	Y+16, r25	; 0x10
     71e:	8f 87       	std	Y+15, r24	; 0x0f
     720:	8f 85       	ldd	r24, Y+15	; 0x0f
     722:	98 89       	ldd	r25, Y+16	; 0x10
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <actuators_kisobran+0xf4>
     728:	98 8b       	std	Y+16, r25	; 0x10
     72a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_kisobran_position(85);
     72c:	85 e5       	ldi	r24, 0x55	; 85
     72e:	9c dd       	rcall	.-1224   	; 0x268 <servo_set_kisobran_position>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	aa e7       	ldi	r26, 0x7A	; 122
     736:	b4 e4       	ldi	r27, 0x44	; 68
     738:	8b 87       	std	Y+11, r24	; 0x0b
     73a:	9c 87       	std	Y+12, r25	; 0x0c
     73c:	ad 87       	std	Y+13, r26	; 0x0d
     73e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     740:	6b 85       	ldd	r22, Y+11	; 0x0b
     742:	7c 85       	ldd	r23, Y+12	; 0x0c
     744:	8d 85       	ldd	r24, Y+13	; 0x0d
     746:	9e 85       	ldd	r25, Y+14	; 0x0e
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e4       	ldi	r19, 0x40	; 64
     74c:	4c e1       	ldi	r20, 0x1C	; 28
     74e:	55 e4       	ldi	r21, 0x45	; 69
     750:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	8f 83       	std	Y+7, r24	; 0x07
     75a:	98 87       	std	Y+8, r25	; 0x08
     75c:	a9 87       	std	Y+9, r26	; 0x09
     75e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     760:	6f 81       	ldd	r22, Y+7	; 0x07
     762:	78 85       	ldd	r23, Y+8	; 0x08
     764:	89 85       	ldd	r24, Y+9	; 0x09
     766:	9a 85       	ldd	r25, Y+10	; 0x0a
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e8       	ldi	r20, 0x80	; 128
     76e:	5f e3       	ldi	r21, 0x3F	; 63
     770:	0e 94 47 10 	call	0x208e	; 0x208e <__cmpsf2>
     774:	88 23       	and	r24, r24
     776:	2c f4       	brge	.+10     	; 0x782 <actuators_kisobran+0x152>
		__ticks = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	3f c0       	rjmp	.+126    	; 0x800 <actuators_kisobran+0x1d0>
	else if (__tmp > 65535)
     782:	6f 81       	ldd	r22, Y+7	; 0x07
     784:	78 85       	ldd	r23, Y+8	; 0x08
     786:	89 85       	ldd	r24, Y+9	; 0x09
     788:	9a 85       	ldd	r25, Y+10	; 0x0a
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	3f ef       	ldi	r19, 0xFF	; 255
     78e:	4f e7       	ldi	r20, 0x7F	; 127
     790:	57 e4       	ldi	r21, 0x47	; 71
     792:	0e 94 96 11 	call	0x232c	; 0x232c <__gesf2>
     796:	18 16       	cp	r1, r24
     798:	4c f5       	brge	.+82     	; 0x7ec <actuators_kisobran+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79a:	6b 85       	ldd	r22, Y+11	; 0x0b
     79c:	7c 85       	ldd	r23, Y+12	; 0x0c
     79e:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e2       	ldi	r20, 0x20	; 32
     7a8:	51 e4       	ldi	r21, 0x41	; 65
     7aa:	0e 94 9a 11 	call	0x2334	; 0x2334 <__mulsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	8d 83       	std	Y+5, r24	; 0x05
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <actuators_kisobran+0x1b2>
     7c4:	8a ef       	ldi	r24, 0xFA	; 250
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9c 83       	std	Y+4, r25	; 0x04
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <actuators_kisobran+0x1a0>
     7d4:	9c 83       	std	Y+4, r25	; 0x04
     7d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	9e 83       	std	Y+6, r25	; 0x06
     7e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	69 f7       	brne	.-38     	; 0x7c4 <actuators_kisobran+0x194>
     7ea:	14 c0       	rjmp	.+40     	; 0x814 <actuators_kisobran+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ec:	6f 81       	ldd	r22, Y+7	; 0x07
     7ee:	78 85       	ldd	r23, Y+8	; 0x08
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixunssfsi>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	8d 83       	std	Y+5, r24	; 0x05
     800:	8d 81       	ldd	r24, Y+5	; 0x05
     802:	9e 81       	ldd	r25, Y+6	; 0x06
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <actuators_kisobran+0x1dc>
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	servo_set_vrata_position(0);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	cc dd       	rcall	.-1128   	; 0x3b0 <servo_set_vrata_position>
}
     818:	6c 96       	adiw	r28, 0x1c	; 28
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <__vector_18>:
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	00 90 5b 00 	lds	r0, 0x005B
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	00 d0       	rcall	.+0      	; 0x854 <__vector_18+0x2a>
     854:	00 d0       	rcall	.+0      	; 0x856 <__vector_18+0x2c>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	ed ee       	ldi	r30, 0xED	; 237
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8c 83       	std	Y+4, r24	; 0x04
     862:	1b 82       	std	Y+3, r1	; 0x03
     864:	9c c0       	rjmp	.+312    	; 0x99e <__vector_18+0x174>
     866:	ed ee       	ldi	r30, 0xED	; 237
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	82 95       	swap	r24
     86e:	80 7f       	andi	r24, 0xF0	; 240
     870:	80 83       	st	Z, r24
     872:	ee ee       	ldi	r30, 0xEE	; 238
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	82 95       	swap	r24
     87a:	86 95       	lsr	r24
     87c:	87 70       	andi	r24, 0x07	; 7
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	81 70       	andi	r24, 0x01	; 1
     884:	90 70       	andi	r25, 0x00	; 0
     886:	88 23       	and	r24, r24
     888:	09 f4       	brne	.+2      	; 0x88c <__vector_18+0x62>
     88a:	6e c0       	rjmp	.+220    	; 0x968 <__vector_18+0x13e>
     88c:	ef ee       	ldi	r30, 0xEF	; 239
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	80 83       	st	Z, r24
     894:	ae ee       	ldi	r26, 0xEE	; 238
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	ee ee       	ldi	r30, 0xEE	; 238
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	8f 7d       	andi	r24, 0xDF	; 223
     8a0:	8c 93       	st	X, r24
     8a2:	e2 ef       	ldi	r30, 0xF2	; 242
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	82 95       	swap	r24
     8aa:	86 95       	lsr	r24
     8ac:	87 70       	andi	r24, 0x07	; 7
     8ae:	28 2f       	mov	r18, r24
     8b0:	e3 ef       	ldi	r30, 0xF3	; 243
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	82 2b       	or	r24, r18
     8c8:	8a 83       	std	Y+2, r24	; 0x02
     8ca:	19 82       	std	Y+1, r1	; 0x01
     8cc:	2a c0       	rjmp	.+84     	; 0x922 <__vector_18+0xf8>
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	82 1b       	sub	r24, r18
     8da:	93 0b       	sbc	r25, r19
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	90 95       	com	r25
     8e2:	81 95       	neg	r24
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	fc 01       	movw	r30, r24
     8e8:	e4 5e       	subi	r30, 0xE4	; 228
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	40 81       	ld	r20, Z
     8ee:	51 81       	ldd	r21, Z+1	; 0x01
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	fc 01       	movw	r30, r24
     8fa:	e0 5d       	subi	r30, 0xD0	; 208
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	80 81       	ld	r24, Z
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	da 01       	movw	r26, r20
     910:	a8 0f       	add	r26, r24
     912:	b9 1f       	adc	r27, r25
     914:	ea ef       	ldi	r30, 0xFA	; 250
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	8c 93       	st	X, r24
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	88 30       	cpi	r24, 0x08	; 8
     926:	98 f2       	brcs	.-90     	; 0x8ce <__vector_18+0xa4>
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	fc 01       	movw	r30, r24
     932:	e0 5d       	subi	r30, 0xD0	; 208
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	80 81       	ld	r24, Z
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	80 83       	st	Z, r24
     93c:	80 81       	ld	r24, Z
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	41 f4       	brne	.+16     	; 0x952 <__vector_18+0x128>
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	fc 01       	movw	r30, r24
     94c:	e0 5d       	subi	r30, 0xD0	; 208
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	10 82       	st	Z, r1
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	88 2f       	mov	r24, r24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	fc 01       	movw	r30, r24
     95c:	ec 5b       	subi	r30, 0xBC	; 188
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	80 81       	ld	r24, Z
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 83       	st	Z, r24
     966:	1f c0       	rjmp	.+62     	; 0x9a6 <__vector_18+0x17c>
     968:	ee ee       	ldi	r30, 0xEE	; 238
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	82 95       	swap	r24
     970:	86 95       	lsr	r24
     972:	86 95       	lsr	r24
     974:	83 70       	andi	r24, 0x03	; 3
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	81 70       	andi	r24, 0x01	; 1
     97c:	90 70       	andi	r25, 0x00	; 0
     97e:	88 23       	and	r24, r24
     980:	59 f0       	breq	.+22     	; 0x998 <__vector_18+0x16e>
     982:	ef ee       	ldi	r30, 0xEF	; 239
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	10 82       	st	Z, r1
     988:	ae ee       	ldi	r26, 0xEE	; 238
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ee ee       	ldi	r30, 0xEE	; 238
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8f 7b       	andi	r24, 0xBF	; 191
     994:	8c 93       	st	X, r24
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <__vector_18+0x17c>
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	8b 83       	std	Y+3, r24	; 0x03
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	8f 30       	cpi	r24, 0x0F	; 15
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <__vector_18+0x17c>
     9a4:	60 cf       	rjmp	.-320    	; 0x866 <__vector_18+0x3c>
     9a6:	ed ee       	ldi	r30, 0xED	; 237
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	8c 81       	ldd	r24, Y+4	; 0x04
     9ac:	80 83       	st	Z, r24
     9ae:	aa ed       	ldi	r26, 0xDA	; 218
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ea ed       	ldi	r30, 0xDA	; 218
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	8c 93       	st	X, r24
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	00 92 5b 00 	sts	0x005B, r0
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <CAN_InitModule>:
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <CAN_InitModule+0x6>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	e8 ed       	ldi	r30, 0xD8	; 216
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 83       	st	Z, r24
     9fc:	1a 82       	std	Y+2, r1	; 0x02
     9fe:	32 c0       	rjmp	.+100    	; 0xa64 <CAN_InitModule+0x7a>
     a00:	ed ee       	ldi	r30, 0xED	; 237
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	82 95       	swap	r24
     a08:	80 7f       	andi	r24, 0xF0	; 240
     a0a:	80 83       	st	Z, r24
     a0c:	ee ee       	ldi	r30, 0xEE	; 238
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	10 82       	st	Z, r1
     a12:	ef ee       	ldi	r30, 0xEF	; 239
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	10 82       	st	Z, r1
     a18:	e3 ef       	ldi	r30, 0xF3	; 243
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	10 82       	st	Z, r1
     a1e:	e2 ef       	ldi	r30, 0xF2	; 242
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	10 82       	st	Z, r1
     a24:	e1 ef       	ldi	r30, 0xF1	; 241
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	10 82       	st	Z, r1
     a2a:	e0 ef       	ldi	r30, 0xF0	; 240
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	10 82       	st	Z, r1
     a30:	e7 ef       	ldi	r30, 0xF7	; 247
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	10 82       	st	Z, r1
     a36:	e6 ef       	ldi	r30, 0xF6	; 246
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	10 82       	st	Z, r1
     a3c:	e5 ef       	ldi	r30, 0xF5	; 245
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	10 82       	st	Z, r1
     a42:	e4 ef       	ldi	r30, 0xF4	; 244
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	10 82       	st	Z, r1
     a48:	19 82       	std	Y+1, r1	; 0x01
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <CAN_InitModule+0x6e>
     a4c:	ea ef       	ldi	r30, 0xFA	; 250
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	10 82       	st	Z, r1
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	88 30       	cpi	r24, 0x08	; 8
     a5c:	b8 f3       	brcs	.-18     	; 0xa4c <CAN_InitModule+0x62>
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	8a 83       	std	Y+2, r24	; 0x02
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	8f 30       	cpi	r24, 0x0F	; 15
     a68:	58 f2       	brcs	.-106    	; 0xa00 <CAN_InitModule+0x16>
     a6a:	e8 ed       	ldi	r30, 0xD8	; 216
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 83       	st	Z, r24
     a72:	e2 ee       	ldi	r30, 0xE2	; 226
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 83       	st	Z, r24
     a7a:	e3 ee       	ldi	r30, 0xE3	; 227
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	80 83       	st	Z, r24
     a82:	e4 ee       	ldi	r30, 0xE4	; 228
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	8e e5       	ldi	r24, 0x5E	; 94
     a88:	80 83       	st	Z, r24
     a8a:	e5 ee       	ldi	r30, 0xE5	; 229
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	10 82       	st	Z, r1
     a90:	eb ed       	ldi	r30, 0xDB	; 219
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 eb       	ldi	r24, 0xB0	; 176
     a96:	80 83       	st	Z, r24
     a98:	ef ed       	ldi	r30, 0xDF	; 223
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	8f e7       	ldi	r24, 0x7F	; 127
     a9e:	80 83       	st	Z, r24
     aa0:	ee ed       	ldi	r30, 0xDE	; 222
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	80 83       	st	Z, r24
     aa8:	78 94       	sei
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <CAN_InitRxMob>:
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	00 d0       	rcall	.+0      	; 0xaba <CAN_InitRxMob+0x6>
     aba:	00 d0       	rcall	.+0      	; 0xabc <CAN_InitRxMob+0x8>
     abc:	0f 92       	push	r0
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
     ac6:	ed ee       	ldi	r30, 0xED	; 237
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	e9 ed       	ldi	r30, 0xD9	; 217
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	82 95       	swap	r24
     ad6:	8f 70       	andi	r24, 0x0F	; 15
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	90 70       	andi	r25, 0x00	; 0
     ae0:	88 23       	and	r24, r24
     ae2:	a9 f7       	brne	.-22     	; 0xace <CAN_InitRxMob+0x1a>
     ae4:	e9 ed       	ldi	r30, 0xD9	; 217
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	86 95       	lsr	r24
     aec:	86 95       	lsr	r24
     aee:	86 95       	lsr	r24
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	81 70       	andi	r24, 0x01	; 1
     af6:	90 70       	andi	r25, 0x00	; 0
     af8:	88 23       	and	r24, r24
     afa:	49 f7       	brne	.-46     	; 0xace <CAN_InitRxMob+0x1a>
     afc:	1a 82       	std	Y+2, r1	; 0x02
     afe:	3f c0       	rjmp	.+126    	; 0xb7e <CAN_InitRxMob+0xca>
     b00:	ed ee       	ldi	r30, 0xED	; 237
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	82 95       	swap	r24
     b08:	80 7f       	andi	r24, 0xF0	; 240
     b0a:	80 83       	st	Z, r24
     b0c:	ef ee       	ldi	r30, 0xEF	; 239
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	82 95       	swap	r24
     b14:	86 95       	lsr	r24
     b16:	86 95       	lsr	r24
     b18:	83 70       	andi	r24, 0x03	; 3
     b1a:	88 23       	and	r24, r24
     b1c:	69 f5       	brne	.+90     	; 0xb78 <CAN_InitRxMob+0xc4>
     b1e:	ef ee       	ldi	r30, 0xEF	; 239
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	8f e0       	ldi	r24, 0x0F	; 15
     b24:	80 83       	st	Z, r24
     b26:	e3 ef       	ldi	r30, 0xF3	; 243
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	90 70       	andi	r25, 0x00	; 0
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	96 95       	lsr	r25
     b36:	87 95       	ror	r24
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	80 83       	st	Z, r24
     b3e:	e2 ef       	ldi	r30, 0xF2	; 242
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	82 95       	swap	r24
     b46:	88 0f       	add	r24, r24
     b48:	80 7e       	andi	r24, 0xE0	; 224
     b4a:	80 83       	st	Z, r24
     b4c:	e6 ef       	ldi	r30, 0xF6	; 246
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 ee       	ldi	r24, 0xE0	; 224
     b52:	80 83       	st	Z, r24
     b54:	e7 ef       	ldi	r30, 0xF7	; 247
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	80 83       	st	Z, r24
     b5c:	af ee       	ldi	r26, 0xEF	; 239
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef ee       	ldi	r30, 0xEF	; 239
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
     b6a:	ed ee       	ldi	r30, 0xED	; 237
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8d 83       	std	Y+5, r24	; 0x05
     b76:	0c c0       	rjmp	.+24     	; 0xb90 <CAN_InitRxMob+0xdc>
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	8a 83       	std	Y+2, r24	; 0x02
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	8f 30       	cpi	r24, 0x0F	; 15
     b82:	08 f4       	brcc	.+2      	; 0xb86 <CAN_InitRxMob+0xd2>
     b84:	bd cf       	rjmp	.-134    	; 0xb00 <CAN_InitRxMob+0x4c>
     b86:	ed ee       	ldi	r30, 0xED	; 237
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	80 83       	st	Z, r24
     b8e:	1d 82       	std	Y+5, r1	; 0x05
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <CAN_Init>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <CAN_Init+0xa>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	1b df       	rcall	.-458    	; 0x9ea <CAN_InitModule>
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	36 c0       	rjmp	.+108    	; 0xc24 <CAN_Init+0x82>
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	79 df       	rcall	.-270    	; 0xab4 <CAN_InitRxMob>
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	8c 01       	movw	r16, r24
     bce:	04 5e       	subi	r16, 0xE4	; 228
     bd0:	1e 4f       	sbci	r17, 0xFE	; 254
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e 94 fd 11 	call	0x23fa	; 0x23fa <calloc>
     bde:	f8 01       	movw	r30, r16
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	80 83       	st	Z, r24
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	48 2f       	mov	r20, r24
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fc 01       	movw	r30, r24
     bf8:	ec 5b       	subi	r30, 0xBC	; 188
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	10 82       	st	Z, r1
     bfe:	fc 01       	movw	r30, r24
     c00:	ec 5b       	subi	r30, 0xBC	; 188
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	80 81       	ld	r24, Z
     c06:	f9 01       	movw	r30, r18
     c08:	e6 5c       	subi	r30, 0xC6	; 198
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	80 83       	st	Z, r24
     c0e:	f9 01       	movw	r30, r18
     c10:	e6 5c       	subi	r30, 0xC6	; 198
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	80 81       	ld	r24, Z
     c16:	fa 01       	movw	r30, r20
     c18:	e0 5d       	subi	r30, 0xD0	; 208
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	80 83       	st	Z, r24
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	99 81       	ldd	r25, Y+1	; 0x01
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	98 17       	cp	r25, r24
     c2a:	30 f2       	brcs	.-116    	; 0xbb8 <CAN_Init+0x16>
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <CAN_Read>:
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <CAN_Read+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <CAN_Read+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	6c 83       	std	Y+4, r22	; 0x04
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	fc 01       	movw	r30, r24
     c56:	ec 5b       	subi	r30, 0xBC	; 188
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	b1 f3       	breq	.-20     	; 0xc4c <CAN_Read+0x12>
     c60:	19 82       	std	Y+1, r1	; 0x01
     c62:	30 c0       	rjmp	.+96     	; 0xcc4 <CAN_Read+0x8a>
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	dc 01       	movw	r26, r24
     c70:	a2 0f       	add	r26, r18
     c72:	b3 1f       	adc	r27, r19
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	82 1b       	sub	r24, r18
     c80:	93 0b       	sbc	r25, r19
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	90 95       	com	r25
     c88:	81 95       	neg	r24
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	fc 01       	movw	r30, r24
     c8e:	e4 5e       	subi	r30, 0xE4	; 228
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	40 81       	ld	r20, Z
     c94:	51 81       	ldd	r21, Z+1	; 0x01
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	fc 01       	movw	r30, r24
     ca0:	e6 5c       	subi	r30, 0xC6	; 198
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	80 81       	ld	r24, Z
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	fa 01       	movw	r30, r20
     cb6:	e8 0f       	add	r30, r24
     cb8:	f9 1f       	adc	r31, r25
     cba:	80 81       	ld	r24, Z
     cbc:	8c 93       	st	X, r24
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	68 f2       	brcs	.-102    	; 0xc64 <CAN_Read+0x2a>
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	fc 01       	movw	r30, r24
     cd4:	e6 5c       	subi	r30, 0xC6	; 198
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	80 81       	ld	r24, Z
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 83       	st	Z, r24
     cde:	80 81       	ld	r24, Z
     ce0:	85 30       	cpi	r24, 0x05	; 5
     ce2:	41 f4       	brne	.+16     	; 0xcf4 <CAN_Read+0xba>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	fc 01       	movw	r30, r24
     cee:	e6 5c       	subi	r30, 0xC6	; 198
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
     cf2:	10 82       	st	Z, r1
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9c 01       	movw	r18, r24
     cfc:	21 50       	subi	r18, 0x01	; 1
     cfe:	30 40       	sbci	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	ec 5b       	subi	r30, 0xBC	; 188
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	f9 01       	movw	r30, r18
     d0c:	ec 5b       	subi	r30, 0xBC	; 188
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 83       	st	Z, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <CAN_Write>:
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	27 97       	sbiw	r28, 0x07	; 7
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	9d 83       	std	Y+5, r25	; 0x05
     d38:	8c 83       	std	Y+4, r24	; 0x04
     d3a:	6e 83       	std	Y+6, r22	; 0x06
     d3c:	e9 ed       	ldi	r30, 0xD9	; 217
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 95       	swap	r24
     d44:	8f 70       	andi	r24, 0x0F	; 15
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	88 23       	and	r24, r24
     d50:	a9 f7       	brne	.-22     	; 0xd3c <CAN_Write+0x1a>
     d52:	e9 ed       	ldi	r30, 0xD9	; 217
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	86 95       	lsr	r24
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	81 70       	andi	r24, 0x01	; 1
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	88 23       	and	r24, r24
     d68:	49 f7       	brne	.-46     	; 0xd3c <CAN_Write+0x1a>
     d6a:	ed ee       	ldi	r30, 0xED	; 237
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	12 c0       	rjmp	.+36     	; 0xd9a <CAN_Write+0x78>
     d76:	ed ee       	ldi	r30, 0xED	; 237
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	82 95       	swap	r24
     d7e:	80 7f       	andi	r24, 0xF0	; 240
     d80:	80 83       	st	Z, r24
     d82:	ef ee       	ldi	r30, 0xEF	; 239
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	82 95       	swap	r24
     d8a:	86 95       	lsr	r24
     d8c:	86 95       	lsr	r24
     d8e:	83 70       	andi	r24, 0x03	; 3
     d90:	88 23       	and	r24, r24
     d92:	31 f0       	breq	.+12     	; 0xda0 <CAN_Write+0x7e>
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	8a 83       	std	Y+2, r24	; 0x02
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	8f 30       	cpi	r24, 0x0F	; 15
     d9e:	58 f3       	brcs	.-42     	; 0xd76 <CAN_Write+0x54>
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	8f 30       	cpi	r24, 0x0F	; 15
     da4:	19 f4       	brne	.+6      	; 0xdac <CAN_Write+0x8a>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	8f 83       	std	Y+7, r24	; 0x07
     daa:	32 c0       	rjmp	.+100    	; 0xe10 <CAN_Write+0xee>
     dac:	e2 ef       	ldi	r30, 0xF2	; 242
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	82 95       	swap	r24
     db4:	88 0f       	add	r24, r24
     db6:	80 7e       	andi	r24, 0xE0	; 224
     db8:	80 83       	st	Z, r24
     dba:	e3 ef       	ldi	r30, 0xF3	; 243
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	86 95       	lsr	r24
     dc2:	86 95       	lsr	r24
     dc4:	86 95       	lsr	r24
     dc6:	80 83       	st	Z, r24
     dc8:	ef ee       	ldi	r30, 0xEF	; 239
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	80 83       	st	Z, r24
     dd0:	1b 82       	std	Y+3, r1	; 0x03
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <CAN_Write+0xd0>
     dd4:	aa ef       	ldi	r26, 0xFA	; 250
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	fc 01       	movw	r30, r24
     de4:	e2 0f       	add	r30, r18
     de6:	f3 1f       	adc	r31, r19
     de8:	80 81       	ld	r24, Z
     dea:	8c 93       	st	X, r24
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	70 f3       	brcs	.-36     	; 0xdd4 <CAN_Write+0xb2>
     df8:	af ee       	ldi	r26, 0xEF	; 239
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ef ee       	ldi	r30, 0xEF	; 239
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	8c 93       	st	X, r24
     e06:	ed ee       	ldi	r30, 0xED	; 237
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	1f 82       	std	Y+7, r1	; 0x07
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	27 96       	adiw	r28, 0x07	; 7
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	2c 97       	sbiw	r28, 0x0c	; 12
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	89 87       	std	Y+9, r24	; 0x09
     e3a:	6a 87       	std	Y+10, r22	; 0x0a
     e3c:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e3e:	80 91 08 01 	lds	r24, 0x0108
     e42:	90 91 09 01 	lds	r25, 0x0109
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	06 97       	sbiw	r24, 0x06	; 6
     e50:	98 87       	std	Y+8, r25	; 0x08
     e52:	8f 83       	std	Y+7, r24	; 0x07
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     e56:	ef 81       	ldd	r30, Y+7	; 0x07
     e58:	f8 85       	ldd	r31, Y+8	; 0x08
     e5a:	90 81       	ld	r25, Z
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	98 17       	cp	r25, r24
     e60:	19 f4       	brne	.+6      	; 0xe68 <gpio_register_pin+0x44>
            return 1;
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	2c 87       	std	Y+12, r18	; 0x0c
     e66:	c9 c0       	rjmp	.+402    	; 0xffa <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e68:	ef 81       	ldd	r30, Y+7	; 0x07
     e6a:	f8 85       	ldd	r31, Y+8	; 0x08
     e6c:	80 85       	ldd	r24, Z+8	; 0x08
     e6e:	91 85       	ldd	r25, Z+9	; 0x09
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	06 97       	sbiw	r24, 0x06	; 6
     e7a:	98 87       	std	Y+8, r25	; 0x08
     e7c:	8f 83       	std	Y+7, r24	; 0x07
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	06 96       	adiw	r24, 0x06	; 6
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	86 30       	cpi	r24, 0x06	; 6
     e88:	92 07       	cpc	r25, r18
     e8a:	29 f7       	brne	.-54     	; 0xe56 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	86 95       	lsr	r24
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	87 70       	andi	r24, 0x07	; 7
     e9c:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     e9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <gpio_register_pin+0x82>
     ea4:	48 c0       	rjmp	.+144    	; 0xf36 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	c9 01       	movw	r24, r18
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	4e 96       	adiw	r24, 0x1e	; 30
     eb8:	dc 01       	movw	r26, r24
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	c9 01       	movw	r24, r18
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	4e 96       	adiw	r24, 0x1e	; 30
     ecc:	fc 01       	movw	r30, r24
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <gpio_register_pin+0xbe>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	2a 95       	dec	r18
     ee4:	e2 f7       	brpl	.-8      	; 0xede <gpio_register_pin+0xba>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	4f 96       	adiw	r24, 0x1f	; 31
     efc:	dc 01       	movw	r26, r24
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	4f 96       	adiw	r24, 0x1f	; 31
     f10:	fc 01       	movw	r30, r24
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <gpio_register_pin+0x104>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <gpio_register_pin+0x100>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
        return 0;
     f32:	1c 86       	std	Y+12, r1	; 0x0c
     f34:	62 c0       	rjmp	.+196    	; 0xffa <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	c9 01       	movw	r24, r18
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	4e 96       	adiw	r24, 0x1e	; 30
     f48:	dc 01       	movw	r26, r24
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c9 01       	movw	r24, r18
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	4e 96       	adiw	r24, 0x1e	; 30
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <gpio_register_pin+0x14e>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	2a 95       	dec	r18
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <gpio_register_pin+0x14a>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	c9 01       	movw	r24, r18
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	4f 96       	adiw	r24, 0x1f	; 31
     f8e:	dc 01       	movw	r26, r24
     f90:	8e 81       	ldd	r24, Y+6	; 0x06
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	4f 96       	adiw	r24, 0x1f	; 31
     fa2:	fc 01       	movw	r30, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <gpio_register_pin+0x194>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	2a 95       	dec	r18
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <gpio_register_pin+0x190>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     fc0:	8a e0       	ldi	r24, 0x0A	; 10
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 17 12 	call	0x242e	; 0x242e <malloc>
     fc8:	98 87       	std	Y+8, r25	; 0x08
     fca:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     fcc:	8f 81       	ldd	r24, Y+7	; 0x07
     fce:	98 85       	ldd	r25, Y+8	; 0x08
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	19 f4       	brne	.+6      	; 0xfda <gpio_register_pin+0x1b6>
        return 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	8c 87       	std	Y+12, r24	; 0x0c
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <gpio_register_pin+0x1d6>

    input->pin       = pin;
     fda:	ef 81       	ldd	r30, Y+7	; 0x07
     fdc:	f8 85       	ldd	r31, Y+8	; 0x08
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     fe2:	ef 81       	ldd	r30, Y+7	; 0x07
     fe4:	f8 85       	ldd	r31, Y+8	; 0x08
     fe6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe8:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	98 85       	ldd	r25, Y+8	; 0x08
     fee:	06 96       	adiw	r24, 0x06	; 6
     ff0:	26 e0       	ldi	r18, 0x06	; 6
     ff2:	31 e0       	ldi	r19, 0x01	; 1
     ff4:	b9 01       	movw	r22, r18
     ff6:	0b d0       	rcall	.+22     	; 0x100e <list_add>

    return 0;
     ff8:	1c 86       	std	Y+12, r1	; 0x0c
     ffa:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     ffc:	2c 96       	adiw	r28, 0x0c	; 12
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <list_add+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <list_add+0x8>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	7c 83       	std	Y+4, r23	; 0x04
    1020:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    1022:	eb 81       	ldd	r30, Y+3	; 0x03
    1024:	fc 81       	ldd	r31, Y+4	; 0x04
    1026:	42 81       	ldd	r20, Z+2	; 0x02
    1028:	53 81       	ldd	r21, Z+3	; 0x03
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	2b 81       	ldd	r18, Y+3	; 0x03
    1030:	3c 81       	ldd	r19, Y+4	; 0x04
    1032:	b9 01       	movw	r22, r18
    1034:	07 d0       	rcall	.+14     	; 0x1044 <__list_add>
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <__list_add+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <__list_add+0x8>
    104c:	00 d0       	rcall	.+0      	; 0x104e <__list_add+0xa>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	7c 83       	std	Y+4, r23	; 0x04
    1058:	6b 83       	std	Y+3, r22	; 0x03
    105a:	5e 83       	std	Y+6, r21	; 0x06
    105c:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    105e:	ed 81       	ldd	r30, Y+5	; 0x05
    1060:	fe 81       	ldd	r31, Y+6	; 0x06
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
    new->next = next;
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    prev->next = new;
    1082:	eb 81       	ldd	r30, Y+3	; 0x03
    1084:	fc 81       	ldd	r31, Y+4	; 0x04
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	93 83       	std	Z+3, r25	; 0x03
    108c:	82 83       	std	Z+2, r24	; 0x02
}
    108e:	26 96       	adiw	r28, 0x06	; 6
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <__gpio_read_pin+0x6>
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	86 95       	lsr	r24
    10b2:	86 95       	lsr	r24
    10b4:	86 95       	lsr	r24
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	87 70       	andi	r24, 0x07	; 7
    10be:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	c9 01       	movw	r24, r18
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	4d 96       	adiw	r24, 0x1d	; 29
    10d2:	fc 01       	movw	r30, r24
    10d4:	80 81       	ld	r24, Z
    10d6:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <__gpio_read_pin+0x4c>
    10e8:	55 95       	asr	r21
    10ea:	47 95       	ror	r20
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <__gpio_read_pin+0x48>
    10f0:	ca 01       	movw	r24, r20
    10f2:	81 70       	andi	r24, 0x01	; 1
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	2b 97       	sbiw	r28, 0x0b	; 11
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1116:	80 91 08 01 	lds	r24, 0x0108
    111a:	90 91 09 01 	lds	r25, 0x0109
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	06 97       	sbiw	r24, 0x06	; 6
    1128:	98 87       	std	Y+8, r25	; 0x08
    112a:	8f 83       	std	Y+7, r24	; 0x07
    112c:	55 c0       	rjmp	.+170    	; 0x11d8 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    112e:	ef 81       	ldd	r30, Y+7	; 0x07
    1130:	f8 85       	ldd	r31, Y+8	; 0x08
    1132:	90 81       	ld	r25, Z
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	98 17       	cp	r25, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <gpio_read_pin+0x3c>
    113a:	43 c0       	rjmp	.+134    	; 0x11c2 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    113c:	1c 82       	std	Y+4, r1	; 0x04
    113e:	21 c0       	rjmp	.+66     	; 0x1182 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
    1148:	98 85       	ldd	r25, Y+8	; 0x08
    114a:	82 0f       	add	r24, r18
    114c:	93 1f       	adc	r25, r19
    114e:	fc 01       	movw	r30, r24
    1150:	32 96       	adiw	r30, 0x02	; 2
    1152:	40 81       	ld	r20, Z
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c 01       	movw	r18, r24
    115c:	2f 5f       	subi	r18, 0xFF	; 255
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	8f 81       	ldd	r24, Y+7	; 0x07
    1162:	98 85       	ldd	r25, Y+8	; 0x08
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	fc 01       	movw	r30, r24
    116a:	32 96       	adiw	r30, 0x02	; 2
    116c:	80 81       	ld	r24, Z
    116e:	48 17       	cp	r20, r24
    1170:	29 f0       	breq	.+10     	; 0x117c <gpio_read_pin+0x7c>
                    return input->previous_state;
    1172:	ef 81       	ldd	r30, Y+7	; 0x07
    1174:	f8 85       	ldd	r31, Y+8	; 0x08
    1176:	25 81       	ldd	r18, Z+5	; 0x05
    1178:	2b 87       	std	Y+11, r18	; 0x0b
    117a:	38 c0       	rjmp	.+112    	; 0x11ec <gpio_read_pin+0xec>
                i++;
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	e0 f2       	brcs	.-72     	; 0x1140 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1188:	ef 81       	ldd	r30, Y+7	; 0x07
    118a:	f8 85       	ldd	r31, Y+8	; 0x08
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 27       	eor	r24, r25
    1192:	88 23       	and	r24, r24
    1194:	29 f0       	breq	.+10     	; 0x11a0 <gpio_read_pin+0xa0>
    1196:	ef 81       	ldd	r30, Y+7	; 0x07
    1198:	f8 85       	ldd	r31, Y+8	; 0x08
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	8a 87       	std	Y+10, r24	; 0x0a
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <gpio_read_pin+0xb0>
    11a0:	ef 81       	ldd	r30, Y+7	; 0x07
    11a2:	f8 85       	ldd	r31, Y+8	; 0x08
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	1a 86       	std	Y+10, r1	; 0x0a
    11a8:	88 23       	and	r24, r24
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <gpio_read_pin+0xb0>
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	2a 87       	std	Y+10, r18	; 0x0a
    11b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b2:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    11b4:	ef 81       	ldd	r30, Y+7	; 0x07
    11b6:	f8 85       	ldd	r31, Y+8	; 0x08
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	85 83       	std	Z+5, r24	; 0x05

            return state;
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	2b 87       	std	Y+11, r18	; 0x0b
    11c0:	15 c0       	rjmp	.+42     	; 0x11ec <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11c2:	ef 81       	ldd	r30, Y+7	; 0x07
    11c4:	f8 85       	ldd	r31, Y+8	; 0x08
    11c6:	80 85       	ldd	r24, Z+8	; 0x08
    11c8:	91 85       	ldd	r25, Z+9	; 0x09
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	06 97       	sbiw	r24, 0x06	; 6
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	06 96       	adiw	r24, 0x06	; 6
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	86 30       	cpi	r24, 0x06	; 6
    11e2:	92 07       	cpc	r25, r18
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <gpio_read_pin+0xe8>
    11e6:	a3 cf       	rjmp	.-186    	; 0x112e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	8b 87       	std	Y+11, r24	; 0x0b
    11ec:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    11ee:	2b 96       	adiw	r28, 0x0b	; 11
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <gpio_debouncer+0xa>
    120a:	00 d0       	rcall	.+0      	; 0x120c <gpio_debouncer+0xc>
    120c:	00 d0       	rcall	.+0      	; 0x120e <gpio_debouncer+0xe>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1212:	80 91 08 01 	lds	r24, 0x0108
    1216:	90 91 09 01 	lds	r25, 0x0109
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	06 97       	sbiw	r24, 0x06	; 6
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	1b c0       	rjmp	.+54     	; 0x1260 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    122a:	00 91 4e 01 	lds	r16, 0x014E
    122e:	10 91 4f 01 	lds	r17, 0x014F
    1232:	ed 81       	ldd	r30, Y+5	; 0x05
    1234:	fe 81       	ldd	r31, Y+6	; 0x06
    1236:	80 81       	ld	r24, Z
    1238:	33 df       	rcall	.-410    	; 0x10a0 <__gpio_read_pin>
    123a:	28 2f       	mov	r18, r24
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	80 0f       	add	r24, r16
    1242:	91 1f       	adc	r25, r17
    1244:	fc 01       	movw	r30, r24
    1246:	32 96       	adiw	r30, 0x02	; 2
    1248:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    124a:	ed 81       	ldd	r30, Y+5	; 0x05
    124c:	fe 81       	ldd	r31, Y+6	; 0x06
    124e:	80 85       	ldd	r24, Z+8	; 0x08
    1250:	91 85       	ldd	r25, Z+9	; 0x09
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	06 97       	sbiw	r24, 0x06	; 6
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	06 96       	adiw	r24, 0x06	; 6
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	86 30       	cpi	r24, 0x06	; 6
    126a:	92 07       	cpc	r25, r18
    126c:	f1 f6       	brne	.-68     	; 0x122a <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    126e:	80 91 4e 01 	lds	r24, 0x014E
    1272:	90 91 4f 01 	lds	r25, 0x014F
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	90 93 4f 01 	sts	0x014F, r25
    127c:	80 93 4e 01 	sts	0x014E, r24
    1280:	80 91 4e 01 	lds	r24, 0x014E
    1284:	90 91 4f 01 	lds	r25, 0x014F
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	21 f4       	brne	.+8      	; 0x1296 <gpio_debouncer+0x96>
        count = 0;
    128e:	10 92 4f 01 	sts	0x014F, r1
    1292:	10 92 4e 01 	sts	0x014E, r1
	
}
    1296:	26 96       	adiw	r28, 0x06	; 6
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <greenside>:
{
	{{85,500}, 110, FORWARD, NULL}
};

void greenside(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	2b 97       	sbiw	r28, 0x0b	; 11
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    12c0:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
    12c2:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 85;
    12c8:	85 e5       	ldi	r24, 0x55	; 85
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 670;
    12d0:	8e e9       	ldi	r24, 0x9E	; 158
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	98 87       	std	Y+8, r25	; 0x08
    12d6:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
    12d8:	86 ea       	ldi	r24, 0xA6	; 166
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	9a 87       	std	Y+10, r25	; 0x0a
    12de:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
    12e0:	ce 01       	movw	r24, r28
    12e2:	05 96       	adiw	r24, 0x05	; 5
    12e4:	a5 d2       	rcall	.+1354   	; 0x1830 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	d1 f7       	brne	.-12     	; 0x12e6 <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	8c 83       	std	Y+4, r24	; 0x04
    12f6:	5c c0       	rjmp	.+184    	; 0x13b0 <greenside+0x104>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	48 2f       	mov	r20, r24
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	ca 01       	movw	r24, r20
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	9c 01       	movw	r18, r24
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	82 0f       	add	r24, r18
    1310:	93 1f       	adc	r25, r19
    1312:	84 0f       	add	r24, r20
    1314:	95 1f       	adc	r25, r21
    1316:	8f 5e       	subi	r24, 0xEF	; 239
    1318:	9e 4f       	sbci	r25, 0xFE	; 254
    131a:	bc 01       	movw	r22, r24
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	48 2f       	mov	r20, r24
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	ca 01       	movw	r24, r20
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	9c 01       	movw	r18, r24
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	82 0f       	add	r24, r18
    1334:	93 1f       	adc	r25, r19
    1336:	84 0f       	add	r24, r20
    1338:	95 1f       	adc	r25, r21
    133a:	fc 01       	movw	r30, r24
    133c:	e8 5e       	subi	r30, 0xE8	; 232
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	a0 81       	ld	r26, Z
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	48 2f       	mov	r20, r24
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	ca 01       	movw	r24, r20
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	9c 01       	movw	r18, r24
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	84 0f       	add	r24, r20
    135e:	95 1f       	adc	r25, r21
    1360:	fc 01       	movw	r30, r24
    1362:	e7 5e       	subi	r30, 0xE7	; 231
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	b0 81       	ld	r27, Z
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	48 2f       	mov	r20, r24
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	ca 01       	movw	r24, r20
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	9c 01       	movw	r18, r24
    1376:	22 0f       	add	r18, r18
    1378:	33 1f       	adc	r19, r19
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	84 0f       	add	r24, r20
    1384:	95 1f       	adc	r25, r21
    1386:	fc 01       	movw	r30, r24
    1388:	e6 5e       	subi	r30, 0xE6	; 230
    138a:	fe 4f       	sbci	r31, 0xFE	; 254
    138c:	20 81       	ld	r18, Z
    138e:	31 81       	ldd	r19, Z+1	; 0x01
    1390:	cb 01       	movw	r24, r22
    1392:	6a 2f       	mov	r22, r26
    1394:	4b 2f       	mov	r20, r27
    1396:	9b d1       	rcall	.+822    	; 0x16ce <odometry_move_to_position>
    1398:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <greenside+0xf6>
    13a0:	a2 cf       	rjmp	.-188    	; 0x12e6 <greenside+0x3a>
					{
						break;
					}
					if(current_position == 0)
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	88 23       	and	r24, r24
    13a6:	09 f4       	brne	.+2      	; 0x13aa <greenside+0xfe>
    13a8:	ff cf       	rjmp	.-2      	; 0x13a8 <greenside+0xfc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	88 23       	and	r24, r24
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <greenside+0x10c>
    13b6:	a0 cf       	rjmp	.-192    	; 0x12f8 <greenside+0x4c>
    13b8:	96 cf       	rjmp	.-212    	; 0x12e6 <greenside+0x3a>

000013ba <odometry_set_speed>:
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	67 97       	sbiw	r28, 0x17	; 23
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	8f 8b       	std	Y+23, r24	; 0x17
    13d0:	90 91 50 01 	lds	r25, 0x0150
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	89 17       	cp	r24, r25
    13d8:	09 f4       	brne	.+2      	; 0x13dc <odometry_set_speed+0x22>
    13da:	7b c0       	rjmp	.+246    	; 0x14d2 <odometry_set_speed+0x118>
    13dc:	86 e5       	ldi	r24, 0x56	; 86
    13de:	8f 87       	std	Y+15, r24	; 0x0f
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	88 8b       	std	Y+16, r24	; 0x10
    13e4:	6c c0       	rjmp	.+216    	; 0x14be <odometry_set_speed+0x104>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a8 e4       	ldi	r26, 0x48	; 72
    13ec:	b2 e4       	ldi	r27, 0x42	; 66
    13ee:	8b 87       	std	Y+11, r24	; 0x0b
    13f0:	9c 87       	std	Y+12, r25	; 0x0c
    13f2:	ad 87       	std	Y+13, r26	; 0x0d
    13f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e4       	ldi	r19, 0x40	; 64
    1402:	4c e1       	ldi	r20, 0x1C	; 28
    1404:	55 e4       	ldi	r21, 0x45	; 69
    1406:	96 d7       	rcall	.+3884   	; 0x2334 <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	34 d6       	rcall	.+3176   	; 0x208e <__cmpsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <odometry_set_speed+0x7a>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	3b c0       	rjmp	.+118    	; 0x14aa <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	73 d7       	rcall	.+3814   	; 0x232c <__gesf2>
    1446:	18 16       	cp	r1, r24
    1448:	3c f5       	brge	.+78     	; 0x1498 <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	6c d7       	rcall	.+3800   	; 0x2334 <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	85 d6       	rcall	.+3338   	; 0x2170 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <odometry_set_speed+0xd4>
    1470:	8a ef       	ldi	r24, 0xFA	; 250
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <odometry_set_speed+0xc2>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <odometry_set_speed+0xb6>
    1496:	13 c0       	rjmp	.+38     	; 0x14be <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	67 d6       	rcall	.+3278   	; 0x2170 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <odometry_set_speed+0xfc>
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	ce 01       	movw	r24, r28
    14c0:	0f 96       	adiw	r24, 0x0f	; 15
    14c2:	63 ec       	ldi	r22, 0xC3	; 195
    14c4:	2e dc       	rcall	.-1956   	; 0xd22 <CAN_Write>
    14c6:	88 23       	and	r24, r24
    14c8:	09 f0       	breq	.+2      	; 0x14cc <odometry_set_speed+0x112>
    14ca:	8d cf       	rjmp	.-230    	; 0x13e6 <odometry_set_speed+0x2c>
    14cc:	8f 89       	ldd	r24, Y+23	; 0x17
    14ce:	80 93 50 01 	sts	0x0150, r24
    14d2:	67 96       	adiw	r28, 0x17	; 23
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <odometry_query_position>:
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	66 97       	sbiw	r28, 0x16	; 22
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	80 e5       	ldi	r24, 0x50	; 80
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
    14fc:	6c c0       	rjmp	.+216    	; 0x15d6 <odometry_query_position+0xf2>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a8 e4       	ldi	r26, 0x48	; 72
    1504:	b2 e4       	ldi	r27, 0x42	; 66
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e4       	ldi	r19, 0x40	; 64
    151a:	4c e1       	ldi	r20, 0x1C	; 28
    151c:	55 e4       	ldi	r21, 0x45	; 69
    151e:	0a d7       	rcall	.+3604   	; 0x2334 <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	a9 87       	std	Y+9, r26	; 0x09
    152a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	a8 d5       	rcall	.+2896   	; 0x208e <__cmpsf2>
    153e:	88 23       	and	r24, r24
    1540:	2c f4       	brge	.+10     	; 0x154c <odometry_query_position+0x68>
		__ticks = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	3b c0       	rjmp	.+118    	; 0x15c2 <odometry_query_position+0xde>
	else if (__tmp > 65535)
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	3f ef       	ldi	r19, 0xFF	; 255
    1558:	4f e7       	ldi	r20, 0x7F	; 127
    155a:	57 e4       	ldi	r21, 0x47	; 71
    155c:	e7 d6       	rcall	.+3534   	; 0x232c <__gesf2>
    155e:	18 16       	cp	r1, r24
    1560:	3c f5       	brge	.+78     	; 0x15b0 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6b 85       	ldd	r22, Y+11	; 0x0b
    1564:	7c 85       	ldd	r23, Y+12	; 0x0c
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	e0 d6       	rcall	.+3520   	; 0x2334 <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	f9 d5       	rcall	.+3058   	; 0x2170 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <odometry_query_position+0xc2>
    1588:	8a ef       	ldi	r24, 0xFA	; 250
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <odometry_query_position+0xb0>
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <odometry_query_position+0xa4>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	db d5       	rcall	.+2998   	; 0x2170 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <odometry_query_position+0xea>
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	ce 01       	movw	r24, r28
    15d8:	0f 96       	adiw	r24, 0x0f	; 15
    15da:	63 ec       	ldi	r22, 0xC3	; 195
    15dc:	a2 db       	rcall	.-2236   	; 0xd22 <CAN_Write>
    15de:	88 23       	and	r24, r24
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <odometry_query_position+0x100>
    15e2:	8d cf       	rjmp	.-230    	; 0x14fe <odometry_query_position+0x1a>
    15e4:	ce 01       	movw	r24, r28
    15e6:	0f 96       	adiw	r24, 0x0f	; 15
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	27 db       	rcall	.-2482   	; 0xc3a <CAN_Read>
    15ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ee:	80 93 10 01 	sts	0x0110, r24
    15f2:	88 89       	ldd	r24, Y+16	; 0x10
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	38 2f       	mov	r19, r24
    15fa:	22 27       	eor	r18, r18
    15fc:	89 89       	ldd	r24, Y+17	; 0x11
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	82 2b       	or	r24, r18
    1604:	93 2b       	or	r25, r19
    1606:	90 93 0b 01 	sts	0x010B, r25
    160a:	80 93 0a 01 	sts	0x010A, r24
    160e:	8a 89       	ldd	r24, Y+18	; 0x12
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	38 2f       	mov	r19, r24
    1616:	22 27       	eor	r18, r18
    1618:	8b 89       	ldd	r24, Y+19	; 0x13
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	82 2b       	or	r24, r18
    1620:	93 2b       	or	r25, r19
    1622:	90 93 0d 01 	sts	0x010D, r25
    1626:	80 93 0c 01 	sts	0x010C, r24
    162a:	8c 89       	ldd	r24, Y+20	; 0x14
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	38 2f       	mov	r19, r24
    1632:	22 27       	eor	r18, r18
    1634:	8d 89       	ldd	r24, Y+21	; 0x15
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	82 2b       	or	r24, r18
    163c:	93 2b       	or	r25, r19
    163e:	90 93 0f 01 	sts	0x010F, r25
    1642:	80 93 0e 01 	sts	0x010E, r24
    1646:	66 96       	adiw	r28, 0x16	; 22
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <odometry_wait_until_done>:
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	27 97       	sbiw	r28, 0x07	; 7
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	78 d2       	rcall	.+1264   	; 0x1b62 <system_get_system_time>
    1672:	aa 27       	eor	r26, r26
    1674:	97 fd       	sbrc	r25, 7
    1676:	a0 95       	com	r26
    1678:	ba 2f       	mov	r27, r26
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	ab 83       	std	Y+3, r26	; 0x03
    1680:	bc 83       	std	Y+4, r27	; 0x04
    1682:	30 df       	rcall	.-416    	; 0x14e4 <odometry_query_position>
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	71 f0       	breq	.+28     	; 0x16a8 <odometry_wait_until_done+0x50>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	ab 81       	ldd	r26, Y+3	; 0x03
    1692:	bc 81       	ldd	r27, Y+4	; 0x04
    1694:	ed 81       	ldd	r30, Y+5	; 0x05
    1696:	fe 81       	ldd	r31, Y+6	; 0x06
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	09 95       	icall
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <odometry_wait_until_done+0x50>
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8f 83       	std	Y+7, r24	; 0x07
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <odometry_wait_until_done+0x62>
    16a8:	80 91 10 01 	lds	r24, 0x0110
    16ac:	8d 34       	cpi	r24, 0x4D	; 77
    16ae:	49 f3       	breq	.-46     	; 0x1682 <odometry_wait_until_done+0x2a>
    16b0:	80 91 10 01 	lds	r24, 0x0110
    16b4:	82 35       	cpi	r24, 0x52	; 82
    16b6:	29 f3       	breq	.-54     	; 0x1682 <odometry_wait_until_done+0x2a>
    16b8:	1f 82       	std	Y+7, r1	; 0x07
    16ba:	8f 81       	ldd	r24, Y+7	; 0x07
    16bc:	27 96       	adiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <odometry_move_to_position>:
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	6c 97       	sbiw	r28, 0x1c	; 28
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	98 8f       	std	Y+24, r25	; 0x18
    16e4:	8f 8b       	std	Y+23, r24	; 0x17
    16e6:	69 8f       	std	Y+25, r22	; 0x19
    16e8:	4a 8f       	std	Y+26, r20	; 0x1a
    16ea:	3c 8f       	std	Y+28, r19	; 0x1c
    16ec:	2b 8f       	std	Y+27, r18	; 0x1b
    16ee:	89 8d       	ldd	r24, Y+25	; 0x19
    16f0:	64 de       	rcall	.-824    	; 0x13ba <odometry_set_speed>
    16f2:	87 e4       	ldi	r24, 0x47	; 71
    16f4:	8f 87       	std	Y+15, r24	; 0x0f
    16f6:	ef 89       	ldd	r30, Y+23	; 0x17
    16f8:	f8 8d       	ldd	r31, Y+24	; 0x18
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	89 2f       	mov	r24, r25
    1700:	99 0f       	add	r25, r25
    1702:	99 0b       	sbc	r25, r25
    1704:	88 8b       	std	Y+16, r24	; 0x10
    1706:	ef 89       	ldd	r30, Y+23	; 0x17
    1708:	f8 8d       	ldd	r31, Y+24	; 0x18
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	89 8b       	std	Y+17, r24	; 0x11
    1710:	ef 89       	ldd	r30, Y+23	; 0x17
    1712:	f8 8d       	ldd	r31, Y+24	; 0x18
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	89 2f       	mov	r24, r25
    171a:	99 0f       	add	r25, r25
    171c:	99 0b       	sbc	r25, r25
    171e:	8a 8b       	std	Y+18, r24	; 0x12
    1720:	ef 89       	ldd	r30, Y+23	; 0x17
    1722:	f8 8d       	ldd	r31, Y+24	; 0x18
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	1c 8a       	std	Y+20, r1	; 0x14
    172c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    172e:	8d 8b       	std	Y+21, r24	; 0x15
    1730:	6c c0       	rjmp	.+216    	; 0x180a <odometry_move_to_position+0x13c>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a8 e4       	ldi	r26, 0x48	; 72
    1738:	b2 e4       	ldi	r27, 0x42	; 66
    173a:	8b 87       	std	Y+11, r24	; 0x0b
    173c:	9c 87       	std	Y+12, r25	; 0x0c
    173e:	ad 87       	std	Y+13, r26	; 0x0d
    1740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e4       	ldi	r19, 0x40	; 64
    174e:	4c e1       	ldi	r20, 0x1C	; 28
    1750:	55 e4       	ldi	r21, 0x45	; 69
    1752:	f0 d5       	rcall	.+3040   	; 0x2334 <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	8f 83       	std	Y+7, r24	; 0x07
    175a:	98 87       	std	Y+8, r25	; 0x08
    175c:	a9 87       	std	Y+9, r26	; 0x09
    175e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	8e d4       	rcall	.+2332   	; 0x208e <__cmpsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <odometry_move_to_position+0xb2>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <odometry_move_to_position+0x128>
	else if (__tmp > 65535)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	cd d5       	rcall	.+2970   	; 0x232c <__gesf2>
    1792:	18 16       	cp	r1, r24
    1794:	3c f5       	brge	.+78     	; 0x17e4 <odometry_move_to_position+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	c6 d5       	rcall	.+2956   	; 0x2334 <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	df d4       	rcall	.+2494   	; 0x2170 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <odometry_move_to_position+0x10c>
    17bc:	8a ef       	ldi	r24, 0xFA	; 250
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <odometry_move_to_position+0xfa>
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <odometry_move_to_position+0xee>
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <odometry_move_to_position+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	c1 d4       	rcall	.+2434   	; 0x2170 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <odometry_move_to_position+0x134>
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	ce 01       	movw	r24, r28
    180c:	0f 96       	adiw	r24, 0x0f	; 15
    180e:	63 ec       	ldi	r22, 0xC3	; 195
    1810:	88 da       	rcall	.-2800   	; 0xd22 <CAN_Write>
    1812:	88 23       	and	r24, r24
    1814:	09 f0       	breq	.+2      	; 0x1818 <odometry_move_to_position+0x14a>
    1816:	8d cf       	rjmp	.-230    	; 0x1732 <odometry_move_to_position+0x64>
    1818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181c:	1d df       	rcall	.-454    	; 0x1658 <odometry_wait_until_done>
    181e:	6c 96       	adiw	r28, 0x1c	; 28
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <odometry_set_position>:
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	68 97       	sbiw	r28, 0x18	; 24
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	98 8f       	std	Y+24, r25	; 0x18
    1846:	8f 8b       	std	Y+23, r24	; 0x17
    1848:	89 e4       	ldi	r24, 0x49	; 73
    184a:	8f 87       	std	Y+15, r24	; 0x0f
    184c:	ef 89       	ldd	r30, Y+23	; 0x17
    184e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	89 2f       	mov	r24, r25
    1856:	99 0f       	add	r25, r25
    1858:	99 0b       	sbc	r25, r25
    185a:	88 8b       	std	Y+16, r24	; 0x10
    185c:	ef 89       	ldd	r30, Y+23	; 0x17
    185e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	89 8b       	std	Y+17, r24	; 0x11
    1866:	ef 89       	ldd	r30, Y+23	; 0x17
    1868:	f8 8d       	ldd	r31, Y+24	; 0x18
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	89 2f       	mov	r24, r25
    1870:	99 0f       	add	r25, r25
    1872:	99 0b       	sbc	r25, r25
    1874:	8a 8b       	std	Y+18, r24	; 0x12
    1876:	ef 89       	ldd	r30, Y+23	; 0x17
    1878:	f8 8d       	ldd	r31, Y+24	; 0x18
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	8b 8b       	std	Y+19, r24	; 0x13
    1880:	ef 89       	ldd	r30, Y+23	; 0x17
    1882:	f8 8d       	ldd	r31, Y+24	; 0x18
    1884:	84 81       	ldd	r24, Z+4	; 0x04
    1886:	95 81       	ldd	r25, Z+5	; 0x05
    1888:	89 2f       	mov	r24, r25
    188a:	99 0f       	add	r25, r25
    188c:	99 0b       	sbc	r25, r25
    188e:	8c 8b       	std	Y+20, r24	; 0x14
    1890:	ef 89       	ldd	r30, Y+23	; 0x17
    1892:	f8 8d       	ldd	r31, Y+24	; 0x18
    1894:	84 81       	ldd	r24, Z+4	; 0x04
    1896:	95 81       	ldd	r25, Z+5	; 0x05
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	ef 89       	ldd	r30, Y+23	; 0x17
    189c:	f8 8d       	ldd	r31, Y+24	; 0x18
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	90 93 0b 01 	sts	0x010B, r25
    18a6:	80 93 0a 01 	sts	0x010A, r24
    18aa:	ef 89       	ldd	r30, Y+23	; 0x17
    18ac:	f8 8d       	ldd	r31, Y+24	; 0x18
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	90 93 0d 01 	sts	0x010D, r25
    18b6:	80 93 0c 01 	sts	0x010C, r24
    18ba:	ef 89       	ldd	r30, Y+23	; 0x17
    18bc:	f8 8d       	ldd	r31, Y+24	; 0x18
    18be:	84 81       	ldd	r24, Z+4	; 0x04
    18c0:	95 81       	ldd	r25, Z+5	; 0x05
    18c2:	90 93 0f 01 	sts	0x010F, r25
    18c6:	80 93 0e 01 	sts	0x010E, r24
    18ca:	6c c0       	rjmp	.+216    	; 0x19a4 <odometry_set_position+0x174>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a8 e4       	ldi	r26, 0x48	; 72
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	8b 87       	std	Y+11, r24	; 0x0b
    18d6:	9c 87       	std	Y+12, r25	; 0x0c
    18d8:	ad 87       	std	Y+13, r26	; 0x0d
    18da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18de:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e4       	ldi	r19, 0x40	; 64
    18e8:	4c e1       	ldi	r20, 0x1C	; 28
    18ea:	55 e4       	ldi	r21, 0x45	; 69
    18ec:	23 d5       	rcall	.+2630   	; 0x2334 <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8f 83       	std	Y+7, r24	; 0x07
    18f4:	98 87       	std	Y+8, r25	; 0x08
    18f6:	a9 87       	std	Y+9, r26	; 0x09
    18f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	c1 d3       	rcall	.+1922   	; 0x208e <__cmpsf2>
    190c:	88 23       	and	r24, r24
    190e:	2c f4       	brge	.+10     	; 0x191a <odometry_set_position+0xea>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	3b c0       	rjmp	.+118    	; 0x1990 <odometry_set_position+0x160>
	else if (__tmp > 65535)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	3f ef       	ldi	r19, 0xFF	; 255
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	57 e4       	ldi	r21, 0x47	; 71
    192a:	00 d5       	rcall	.+2560   	; 0x232c <__gesf2>
    192c:	18 16       	cp	r1, r24
    192e:	3c f5       	brge	.+78     	; 0x197e <odometry_set_position+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	f9 d4       	rcall	.+2546   	; 0x2334 <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	12 d4       	rcall	.+2084   	; 0x2170 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <odometry_set_position+0x144>
    1956:	8a ef       	ldi	r24, 0xFA	; 250
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <odometry_set_position+0x132>
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <odometry_set_position+0x126>
    197c:	13 c0       	rjmp	.+38     	; 0x19a4 <odometry_set_position+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	f4 d3       	rcall	.+2024   	; 0x2170 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <odometry_set_position+0x16c>
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	ce 01       	movw	r24, r28
    19a6:	0f 96       	adiw	r24, 0x0f	; 15
    19a8:	63 ec       	ldi	r22, 0xC3	; 195
    19aa:	bb d9       	rcall	.-3210   	; 0xd22 <CAN_Write>
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <odometry_set_position+0x182>
    19b0:	8d cf       	rjmp	.-230    	; 0x18cc <odometry_set_position+0x9c>
    19b2:	68 96       	adiw	r28, 0x18	; 24
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <timer_register_callback>:
static void (*timer_callback)(void) = NULL;

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <timer_register_callback+0x6>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	90 93 52 01 	sts	0x0152, r25
    19da:	80 93 51 01 	sts	0x0151, r24
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <timer_init>:


void timer_init(unsigned int freq)
{
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <timer_init+0xa>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    19fa:	e0 e8       	ldi	r30, 0x80	; 128
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1a00:	e1 e8       	ldi	r30, 0x81	; 129
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	89 e0       	ldi	r24, 0x09	; 9
    1a06:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1a08:	08 e8       	ldi	r16, 0x88	; 136
    1a0a:	10 e0       	ldi	r17, 0x00	; 0
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	cc 01       	movw	r24, r24
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	d6 d3       	rcall	.+1964   	; 0x21c8 <__floatunsisf>
    1a1c:	9b 01       	movw	r18, r22
    1a1e:	ac 01       	movw	r20, r24
    1a20:	60 e8       	ldi	r22, 0x80	; 128
    1a22:	76 e9       	ldi	r23, 0x96	; 150
    1a24:	88 e1       	ldi	r24, 0x18	; 24
    1a26:	9b e4       	ldi	r25, 0x4B	; 75
    1a28:	36 d3       	rcall	.+1644   	; 0x2096 <__divsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	c5 d2       	rcall	.+1418   	; 0x1fc6 <__addsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	95 d3       	rcall	.+1834   	; 0x2170 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1a50:	ef e6       	ldi	r30, 0x6F	; 111
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	80 83       	st	Z, r24

	SREG |= 0x80;
    1a58:	af e5       	ldi	r26, 0x5F	; 95
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ef e5       	ldi	r30, 0x5F	; 95
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	8c 93       	st	X, r24
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	00 90 5b 00 	lds	r0, 0x005B
    1a80:	0f 92       	push	r0
    1a82:	11 24       	eor	r1, r1
    1a84:	2f 93       	push	r18
    1a86:	3f 93       	push	r19
    1a88:	4f 93       	push	r20
    1a8a:	5f 93       	push	r21
    1a8c:	6f 93       	push	r22
    1a8e:	7f 93       	push	r23
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1aa4:	80 91 51 01 	lds	r24, 0x0151
    1aa8:	90 91 52 01 	lds	r25, 0x0152
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	29 f0       	breq	.+10     	; 0x1aba <__vector_12+0x46>
        timer_callback();
    1ab0:	e0 91 51 01 	lds	r30, 0x0151
    1ab4:	f0 91 52 01 	lds	r31, 0x0152
    1ab8:	09 95       	icall
	if(sys_time >= 80000)
    1aba:	80 91 53 01 	lds	r24, 0x0153
    1abe:	90 91 54 01 	lds	r25, 0x0154
    1ac2:	a0 91 55 01 	lds	r26, 0x0155
    1ac6:	b0 91 56 01 	lds	r27, 0x0156
    1aca:	80 38       	cpi	r24, 0x80	; 128
    1acc:	28 e3       	ldi	r18, 0x38	; 56
    1ace:	92 07       	cpc	r25, r18
    1ad0:	21 e0       	ldi	r18, 0x01	; 1
    1ad2:	a2 07       	cpc	r26, r18
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	b2 07       	cpc	r27, r18
    1ad8:	10 f0       	brcs	.+4      	; 0x1ade <__vector_12+0x6a>
		actuators_kisobran();
    1ada:	0e 94 18 03 	call	0x630	; 0x630 <actuators_kisobran>
	sys_time++;
    1ade:	80 91 53 01 	lds	r24, 0x0153
    1ae2:	90 91 54 01 	lds	r25, 0x0154
    1ae6:	a0 91 55 01 	lds	r26, 0x0155
    1aea:	b0 91 56 01 	lds	r27, 0x0156
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	a1 1d       	adc	r26, r1
    1af2:	b1 1d       	adc	r27, r1
    1af4:	80 93 53 01 	sts	0x0153, r24
    1af8:	90 93 54 01 	sts	0x0154, r25
    1afc:	a0 93 55 01 	sts	0x0155, r26
    1b00:	b0 93 56 01 	sts	0x0156, r27
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	00 92 5b 00 	sts	0x005B, r0
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    1b38:	10 92 53 01 	sts	0x0153, r1
    1b3c:	10 92 54 01 	sts	0x0154, r1
    1b40:	10 92 55 01 	sts	0x0155, r1
    1b44:	10 92 56 01 	sts	0x0156, r1
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <system_set_match_started>:
void system_set_match_started(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 57 01 	sts	0x0157, r24
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1b6a:	80 91 53 01 	lds	r24, 0x0153
    1b6e:	90 91 54 01 	lds	r25, 0x0154
    1b72:	a0 91 55 01 	lds	r26, 0x0155
    1b76:	b0 91 56 01 	lds	r27, 0x0156
}
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <system_init>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
void system_init(void)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	6c 97       	sbiw	r28, 0x1c	; 28
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
	timer_register_callback(gpio_debouncer);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	99 e0       	ldi	r25, 0x09	; 9
    1b9c:	13 df       	rcall	.-474    	; 0x19c4 <timer_register_callback>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ba4:	b2 e4       	ldi	r27, 0x42	; 66
    1ba6:	89 8f       	std	Y+25, r24	; 0x19
    1ba8:	9a 8f       	std	Y+26, r25	; 0x1a
    1baa:	ab 8f       	std	Y+27, r26	; 0x1b
    1bac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e4       	ldi	r19, 0x40	; 64
    1bba:	4c e1       	ldi	r20, 0x1C	; 28
    1bbc:	55 e4       	ldi	r21, 0x45	; 69
    1bbe:	ba d3       	rcall	.+1908   	; 0x2334 <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8d 8b       	std	Y+21, r24	; 0x15
    1bc6:	9e 8b       	std	Y+22, r25	; 0x16
    1bc8:	af 8b       	std	Y+23, r26	; 0x17
    1bca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bce:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	58 d2       	rcall	.+1200   	; 0x208e <__cmpsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	2c f4       	brge	.+10     	; 0x1bec <system_init+0x68>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 8b       	std	Y+20, r25	; 0x14
    1be8:	8b 8b       	std	Y+19, r24	; 0x13
    1bea:	3b c0       	rjmp	.+118    	; 0x1c62 <system_init+0xde>
	else if (__tmp > 65535)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	97 d3       	rcall	.+1838   	; 0x232c <__gesf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	3c f5       	brge	.+78     	; 0x1c50 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	69 8d       	ldd	r22, Y+25	; 0x19
    1c04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	90 d3       	rcall	.+1824   	; 0x2334 <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	a9 d2       	rcall	.+1362   	; 0x2170 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <system_init+0xc2>
    1c28:	8a ef       	ldi	r24, 0xFA	; 250
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9a 8b       	std	Y+18, r25	; 0x12
    1c2e:	89 8b       	std	Y+17, r24	; 0x11
    1c30:	89 89       	ldd	r24, Y+17	; 0x11
    1c32:	9a 89       	ldd	r25, Y+18	; 0x12
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <system_init+0xb0>
    1c38:	9a 8b       	std	Y+18, r25	; 0x12
    1c3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <system_init+0xa4>
    1c4e:	13 c0       	rjmp	.+38     	; 0x1c76 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6d 89       	ldd	r22, Y+21	; 0x15
    1c52:	7e 89       	ldd	r23, Y+22	; 0x16
    1c54:	8f 89       	ldd	r24, Y+23	; 0x17
    1c56:	98 8d       	ldd	r25, Y+24	; 0x18
    1c58:	8b d2       	rcall	.+1302   	; 0x2170 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	98 8b       	std	Y+16, r25	; 0x10
    1c68:	8f 87       	std	Y+15, r24	; 0x0f
    1c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6c:	98 89       	ldd	r25, Y+16	; 0x10
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <system_init+0xea>
    1c72:	98 8b       	std	Y+16, r25	; 0x10
    1c74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);
    1c76:	88 e0       	ldi	r24, 0x08	; 8
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	d3 d8       	rcall	.-3674   	; 0xe24 <gpio_register_pin>
	
	
	DDRG = 0xff;
    1c7e:	e3 e3       	ldi	r30, 0x33	; 51
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	80 83       	st	Z, r24
	servo_init(50);
    1c86:	82 e3       	ldi	r24, 0x32	; 50
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 72 00 	call	0xe4	; 0xe4 <servo_init>
	timer_init(1000);
    1c8e:	88 ee       	ldi	r24, 0xE8	; 232
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	aa de       	rcall	.-684    	; 0x19e8 <timer_init>
	CAN_Init(1);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	0e 94 d1 05 	call	0xba2	; 0xba2 <CAN_Init>

	actuators_setup_kisobran();
    1c9a:	0e 94 1d 02 	call	0x43a	; 0x43a <actuators_setup_kisobran>
    1c9e:	6c c0       	rjmp	.+216    	; 0x1d78 <system_init+0x1f4>
	
	while(gpio_read_pin(8))
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e2       	ldi	r26, 0x20	; 32
    1ca6:	b1 e4       	ldi	r27, 0x41	; 65
    1ca8:	8b 87       	std	Y+11, r24	; 0x0b
    1caa:	9c 87       	std	Y+12, r25	; 0x0c
    1cac:	ad 87       	std	Y+13, r26	; 0x0d
    1cae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e4       	ldi	r19, 0x40	; 64
    1cbc:	4c e1       	ldi	r20, 0x1C	; 28
    1cbe:	55 e4       	ldi	r21, 0x45	; 69
    1cc0:	39 d3       	rcall	.+1650   	; 0x2334 <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	d7 d1       	rcall	.+942    	; 0x208e <__cmpsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <system_init+0x16a>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3b c0       	rjmp	.+118    	; 0x1d64 <system_init+0x1e0>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	16 d3       	rcall	.+1580   	; 0x232c <__gesf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	3c f5       	brge	.+78     	; 0x1d52 <system_init+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0f d3       	rcall	.+1566   	; 0x2334 <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	28 d2       	rcall	.+1104   	; 0x2170 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <system_init+0x1c4>
    1d2a:	8a ef       	ldi	r24, 0xFA	; 250
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <system_init+0x1b2>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <system_init+0x1a6>
    1d50:	13 c0       	rjmp	.+38     	; 0x1d78 <system_init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0a d2       	rcall	.+1044   	; 0x2170 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <system_init+0x1ec>
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	88 e0       	ldi	r24, 0x08	; 8
    1d7a:	c2 d9       	rcall	.-3196   	; 0x1100 <gpio_read_pin>
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <system_init+0x1fe>
    1d80:	8f cf       	rjmp	.-226    	; 0x1ca0 <system_init+0x11c>
		_delay_ms(10);
	PORTG = 0xff;
    1d82:	e4 e3       	ldi	r30, 0x34	; 52
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	80 83       	st	Z, r24
	system_reset_system_time();
    1d8a:	d2 de       	rcall	.-604    	; 0x1b30 <system_reset_system_time>
	system_set_match_started();
    1d8c:	e0 de       	rcall	.-576    	; 0x1b4e <system_set_match_started>
    1d8e:	6c 96       	adiw	r28, 0x1c	; 28
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <__vector_23>:
    1da0:	1f 92       	push	r1
    1da2:	0f 92       	push	r0
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	0f 92       	push	r0
    1da8:	00 90 5b 00 	lds	r0, 0x005B
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	af 93       	push	r26
    1db6:	bf 93       	push	r27
    1db8:	ef 93       	push	r30
    1dba:	ff 93       	push	r31
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	80 91 58 01 	lds	r24, 0x0158
    1dc8:	88 23       	and	r24, r24
    1dca:	d9 f0       	breq	.+54     	; 0x1e02 <__vector_23+0x62>
    1dcc:	80 91 58 01 	lds	r24, 0x0158
    1dd0:	81 50       	subi	r24, 0x01	; 1
    1dd2:	80 93 58 01 	sts	0x0158, r24
    1dd6:	a6 ec       	ldi	r26, 0xC6	; 198
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	80 91 59 01 	lds	r24, 0x0159
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	fc 01       	movw	r30, r24
    1de4:	e0 5a       	subi	r30, 0xA0	; 160
    1de6:	fe 4f       	sbci	r31, 0xFE	; 254
    1de8:	80 81       	ld	r24, Z
    1dea:	8c 93       	st	X, r24
    1dec:	80 91 59 01 	lds	r24, 0x0159
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	80 93 59 01 	sts	0x0159, r24
    1df6:	80 91 59 01 	lds	r24, 0x0159
    1dfa:	80 34       	cpi	r24, 0x40	; 64
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <__vector_23+0x62>
    1dfe:	10 92 59 01 	sts	0x0159, r1
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	0f 90       	pop	r0
    1e14:	00 92 5b 00 	sts	0x005B, r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <__vector_21>:
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	00 90 5b 00 	lds	r0, 0x005B
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	2f 93       	push	r18
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	e0 ec       	ldi	r30, 0xC0	; 192
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	8c 71       	andi	r24, 0x1C	; 28
    1e56:	90 70       	andi	r25, 0x00	; 0
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	d9 f4       	brne	.+54     	; 0x1e92 <__vector_21+0x70>
    1e5c:	80 91 5a 01 	lds	r24, 0x015A
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	e6 ec       	ldi	r30, 0xC6	; 198
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	20 81       	ld	r18, Z
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e0 56       	subi	r30, 0x60	; 96
    1e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e70:	20 83       	st	Z, r18
    1e72:	80 91 5a 01 	lds	r24, 0x015A
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	80 93 5a 01 	sts	0x015A, r24
    1e7c:	80 91 5a 01 	lds	r24, 0x015A
    1e80:	80 34       	cpi	r24, 0x40	; 64
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <__vector_21+0x66>
    1e84:	10 92 5a 01 	sts	0x015A, r1
    1e88:	80 91 5b 01 	lds	r24, 0x015B
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	80 93 5b 01 	sts	0x015B, r24
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	ff 91       	pop	r31
    1e9a:	ef 91       	pop	r30
    1e9c:	9f 91       	pop	r25
    1e9e:	8f 91       	pop	r24
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	00 92 5b 00 	sts	0x005B, r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <__vector_34>:
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	00 90 5b 00 	lds	r0, 0x005B
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	80 91 5c 01 	lds	r24, 0x015C
    1eda:	88 23       	and	r24, r24
    1edc:	d9 f0       	breq	.+54     	; 0x1f14 <__vector_34+0x62>
    1ede:	80 91 5c 01 	lds	r24, 0x015C
    1ee2:	81 50       	subi	r24, 0x01	; 1
    1ee4:	80 93 5c 01 	sts	0x015C, r24
    1ee8:	ae ec       	ldi	r26, 0xCE	; 206
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	80 91 5d 01 	lds	r24, 0x015D
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e0 52       	subi	r30, 0x20	; 32
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	80 81       	ld	r24, Z
    1efc:	8c 93       	st	X, r24
    1efe:	80 91 5d 01 	lds	r24, 0x015D
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	80 93 5d 01 	sts	0x015D, r24
    1f08:	80 91 5d 01 	lds	r24, 0x015D
    1f0c:	80 34       	cpi	r24, 0x40	; 64
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <__vector_34+0x62>
    1f10:	10 92 5d 01 	sts	0x015D, r1
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	0f 90       	pop	r0
    1f26:	00 92 5b 00 	sts	0x005B, r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__vector_32>:
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	0f 92       	push	r0
    1f3c:	00 90 5b 00 	lds	r0, 0x005B
    1f40:	0f 92       	push	r0
    1f42:	11 24       	eor	r1, r1
    1f44:	2f 93       	push	r18
    1f46:	8f 93       	push	r24
    1f48:	9f 93       	push	r25
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	e8 ec       	ldi	r30, 0xC8	; 200
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	8c 71       	andi	r24, 0x1C	; 28
    1f68:	90 70       	andi	r25, 0x00	; 0
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	d9 f4       	brne	.+54     	; 0x1fa4 <__vector_32+0x70>
    1f6e:	80 91 5e 01 	lds	r24, 0x015E
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	ee ec       	ldi	r30, 0xCE	; 206
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	20 81       	ld	r18, Z
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	e0 5e       	subi	r30, 0xE0	; 224
    1f80:	fd 4f       	sbci	r31, 0xFD	; 253
    1f82:	20 83       	st	Z, r18
    1f84:	80 91 5e 01 	lds	r24, 0x015E
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 93 5e 01 	sts	0x015E, r24
    1f8e:	80 91 5e 01 	lds	r24, 0x015E
    1f92:	80 34       	cpi	r24, 0x40	; 64
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <__vector_32+0x66>
    1f96:	10 92 5e 01 	sts	0x015E, r1
    1f9a:	80 91 5f 01 	lds	r24, 0x015F
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	80 93 5f 01 	sts	0x015F, r24
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	ff 91       	pop	r31
    1fac:	ef 91       	pop	r30
    1fae:	9f 91       	pop	r25
    1fb0:	8f 91       	pop	r24
    1fb2:	2f 91       	pop	r18
    1fb4:	0f 90       	pop	r0
    1fb6:	00 92 5b 00 	sts	0x005B, r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	0f 90       	pop	r0
    1fc0:	1f 90       	pop	r1
    1fc2:	18 95       	reti

00001fc4 <__subsf3>:
    1fc4:	50 58       	subi	r21, 0x80	; 128

00001fc6 <__addsf3>:
    1fc6:	bb 27       	eor	r27, r27
    1fc8:	aa 27       	eor	r26, r26
    1fca:	0e d0       	rcall	.+28     	; 0x1fe8 <__addsf3x>
    1fcc:	75 c1       	rjmp	.+746    	; 0x22b8 <__fp_round>
    1fce:	66 d1       	rcall	.+716    	; 0x229c <__fp_pscA>
    1fd0:	30 f0       	brcs	.+12     	; 0x1fde <__addsf3+0x18>
    1fd2:	6b d1       	rcall	.+726    	; 0x22aa <__fp_pscB>
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <__addsf3+0x18>
    1fd6:	31 f4       	brne	.+12     	; 0x1fe4 <__addsf3+0x1e>
    1fd8:	9f 3f       	cpi	r25, 0xFF	; 255
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <__addsf3+0x1a>
    1fdc:	1e f4       	brtc	.+6      	; 0x1fe4 <__addsf3+0x1e>
    1fde:	5b c1       	rjmp	.+694    	; 0x2296 <__fp_nan>
    1fe0:	0e f4       	brtc	.+2      	; 0x1fe4 <__addsf3+0x1e>
    1fe2:	e0 95       	com	r30
    1fe4:	e7 fb       	bst	r30, 7
    1fe6:	51 c1       	rjmp	.+674    	; 0x228a <__fp_inf>

00001fe8 <__addsf3x>:
    1fe8:	e9 2f       	mov	r30, r25
    1fea:	77 d1       	rcall	.+750    	; 0x22da <__fp_split3>
    1fec:	80 f3       	brcs	.-32     	; 0x1fce <__addsf3+0x8>
    1fee:	ba 17       	cp	r27, r26
    1ff0:	62 07       	cpc	r22, r18
    1ff2:	73 07       	cpc	r23, r19
    1ff4:	84 07       	cpc	r24, r20
    1ff6:	95 07       	cpc	r25, r21
    1ff8:	18 f0       	brcs	.+6      	; 0x2000 <__addsf3x+0x18>
    1ffa:	71 f4       	brne	.+28     	; 0x2018 <__addsf3x+0x30>
    1ffc:	9e f5       	brtc	.+102    	; 0x2064 <__addsf3x+0x7c>
    1ffe:	8f c1       	rjmp	.+798    	; 0x231e <__fp_zero>
    2000:	0e f4       	brtc	.+2      	; 0x2004 <__addsf3x+0x1c>
    2002:	e0 95       	com	r30
    2004:	0b 2e       	mov	r0, r27
    2006:	ba 2f       	mov	r27, r26
    2008:	a0 2d       	mov	r26, r0
    200a:	0b 01       	movw	r0, r22
    200c:	b9 01       	movw	r22, r18
    200e:	90 01       	movw	r18, r0
    2010:	0c 01       	movw	r0, r24
    2012:	ca 01       	movw	r24, r20
    2014:	a0 01       	movw	r20, r0
    2016:	11 24       	eor	r1, r1
    2018:	ff 27       	eor	r31, r31
    201a:	59 1b       	sub	r21, r25
    201c:	99 f0       	breq	.+38     	; 0x2044 <__addsf3x+0x5c>
    201e:	59 3f       	cpi	r21, 0xF9	; 249
    2020:	50 f4       	brcc	.+20     	; 0x2036 <__addsf3x+0x4e>
    2022:	50 3e       	cpi	r21, 0xE0	; 224
    2024:	68 f1       	brcs	.+90     	; 0x2080 <__addsf3x+0x98>
    2026:	1a 16       	cp	r1, r26
    2028:	f0 40       	sbci	r31, 0x00	; 0
    202a:	a2 2f       	mov	r26, r18
    202c:	23 2f       	mov	r18, r19
    202e:	34 2f       	mov	r19, r20
    2030:	44 27       	eor	r20, r20
    2032:	58 5f       	subi	r21, 0xF8	; 248
    2034:	f3 cf       	rjmp	.-26     	; 0x201c <__addsf3x+0x34>
    2036:	46 95       	lsr	r20
    2038:	37 95       	ror	r19
    203a:	27 95       	ror	r18
    203c:	a7 95       	ror	r26
    203e:	f0 40       	sbci	r31, 0x00	; 0
    2040:	53 95       	inc	r21
    2042:	c9 f7       	brne	.-14     	; 0x2036 <__addsf3x+0x4e>
    2044:	7e f4       	brtc	.+30     	; 0x2064 <__addsf3x+0x7c>
    2046:	1f 16       	cp	r1, r31
    2048:	ba 0b       	sbc	r27, r26
    204a:	62 0b       	sbc	r22, r18
    204c:	73 0b       	sbc	r23, r19
    204e:	84 0b       	sbc	r24, r20
    2050:	ba f0       	brmi	.+46     	; 0x2080 <__addsf3x+0x98>
    2052:	91 50       	subi	r25, 0x01	; 1
    2054:	a1 f0       	breq	.+40     	; 0x207e <__addsf3x+0x96>
    2056:	ff 0f       	add	r31, r31
    2058:	bb 1f       	adc	r27, r27
    205a:	66 1f       	adc	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	88 1f       	adc	r24, r24
    2060:	c2 f7       	brpl	.-16     	; 0x2052 <__addsf3x+0x6a>
    2062:	0e c0       	rjmp	.+28     	; 0x2080 <__addsf3x+0x98>
    2064:	ba 0f       	add	r27, r26
    2066:	62 1f       	adc	r22, r18
    2068:	73 1f       	adc	r23, r19
    206a:	84 1f       	adc	r24, r20
    206c:	48 f4       	brcc	.+18     	; 0x2080 <__addsf3x+0x98>
    206e:	87 95       	ror	r24
    2070:	77 95       	ror	r23
    2072:	67 95       	ror	r22
    2074:	b7 95       	ror	r27
    2076:	f7 95       	ror	r31
    2078:	9e 3f       	cpi	r25, 0xFE	; 254
    207a:	08 f0       	brcs	.+2      	; 0x207e <__addsf3x+0x96>
    207c:	b3 cf       	rjmp	.-154    	; 0x1fe4 <__addsf3+0x1e>
    207e:	93 95       	inc	r25
    2080:	88 0f       	add	r24, r24
    2082:	08 f0       	brcs	.+2      	; 0x2086 <__addsf3x+0x9e>
    2084:	99 27       	eor	r25, r25
    2086:	ee 0f       	add	r30, r30
    2088:	97 95       	ror	r25
    208a:	87 95       	ror	r24
    208c:	08 95       	ret

0000208e <__cmpsf2>:
    208e:	d9 d0       	rcall	.+434    	; 0x2242 <__fp_cmp>
    2090:	08 f4       	brcc	.+2      	; 0x2094 <__cmpsf2+0x6>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	08 95       	ret

00002096 <__divsf3>:
    2096:	0c d0       	rcall	.+24     	; 0x20b0 <__divsf3x>
    2098:	0f c1       	rjmp	.+542    	; 0x22b8 <__fp_round>
    209a:	07 d1       	rcall	.+526    	; 0x22aa <__fp_pscB>
    209c:	40 f0       	brcs	.+16     	; 0x20ae <__divsf3+0x18>
    209e:	fe d0       	rcall	.+508    	; 0x229c <__fp_pscA>
    20a0:	30 f0       	brcs	.+12     	; 0x20ae <__divsf3+0x18>
    20a2:	21 f4       	brne	.+8      	; 0x20ac <__divsf3+0x16>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	19 f0       	breq	.+6      	; 0x20ae <__divsf3+0x18>
    20a8:	f0 c0       	rjmp	.+480    	; 0x228a <__fp_inf>
    20aa:	51 11       	cpse	r21, r1
    20ac:	39 c1       	rjmp	.+626    	; 0x2320 <__fp_szero>
    20ae:	f3 c0       	rjmp	.+486    	; 0x2296 <__fp_nan>

000020b0 <__divsf3x>:
    20b0:	14 d1       	rcall	.+552    	; 0x22da <__fp_split3>
    20b2:	98 f3       	brcs	.-26     	; 0x209a <__divsf3+0x4>

000020b4 <__divsf3_pse>:
    20b4:	99 23       	and	r25, r25
    20b6:	c9 f3       	breq	.-14     	; 0x20aa <__divsf3+0x14>
    20b8:	55 23       	and	r21, r21
    20ba:	b1 f3       	breq	.-20     	; 0x20a8 <__divsf3+0x12>
    20bc:	95 1b       	sub	r25, r21
    20be:	55 0b       	sbc	r21, r21
    20c0:	bb 27       	eor	r27, r27
    20c2:	aa 27       	eor	r26, r26
    20c4:	62 17       	cp	r22, r18
    20c6:	73 07       	cpc	r23, r19
    20c8:	84 07       	cpc	r24, r20
    20ca:	38 f0       	brcs	.+14     	; 0x20da <__divsf3_pse+0x26>
    20cc:	9f 5f       	subi	r25, 0xFF	; 255
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	44 1f       	adc	r20, r20
    20d6:	aa 1f       	adc	r26, r26
    20d8:	a9 f3       	breq	.-22     	; 0x20c4 <__divsf3_pse+0x10>
    20da:	33 d0       	rcall	.+102    	; 0x2142 <__divsf3_pse+0x8e>
    20dc:	0e 2e       	mov	r0, r30
    20de:	3a f0       	brmi	.+14     	; 0x20ee <__divsf3_pse+0x3a>
    20e0:	e0 e8       	ldi	r30, 0x80	; 128
    20e2:	30 d0       	rcall	.+96     	; 0x2144 <__divsf3_pse+0x90>
    20e4:	91 50       	subi	r25, 0x01	; 1
    20e6:	50 40       	sbci	r21, 0x00	; 0
    20e8:	e6 95       	lsr	r30
    20ea:	00 1c       	adc	r0, r0
    20ec:	ca f7       	brpl	.-14     	; 0x20e0 <__divsf3_pse+0x2c>
    20ee:	29 d0       	rcall	.+82     	; 0x2142 <__divsf3_pse+0x8e>
    20f0:	fe 2f       	mov	r31, r30
    20f2:	27 d0       	rcall	.+78     	; 0x2142 <__divsf3_pse+0x8e>
    20f4:	66 0f       	add	r22, r22
    20f6:	77 1f       	adc	r23, r23
    20f8:	88 1f       	adc	r24, r24
    20fa:	bb 1f       	adc	r27, r27
    20fc:	26 17       	cp	r18, r22
    20fe:	37 07       	cpc	r19, r23
    2100:	48 07       	cpc	r20, r24
    2102:	ab 07       	cpc	r26, r27
    2104:	b0 e8       	ldi	r27, 0x80	; 128
    2106:	09 f0       	breq	.+2      	; 0x210a <__divsf3_pse+0x56>
    2108:	bb 0b       	sbc	r27, r27
    210a:	80 2d       	mov	r24, r0
    210c:	bf 01       	movw	r22, r30
    210e:	ff 27       	eor	r31, r31
    2110:	93 58       	subi	r25, 0x83	; 131
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	2a f0       	brmi	.+10     	; 0x2120 <__divsf3_pse+0x6c>
    2116:	9e 3f       	cpi	r25, 0xFE	; 254
    2118:	51 05       	cpc	r21, r1
    211a:	68 f0       	brcs	.+26     	; 0x2136 <__divsf3_pse+0x82>
    211c:	b6 c0       	rjmp	.+364    	; 0x228a <__fp_inf>
    211e:	00 c1       	rjmp	.+512    	; 0x2320 <__fp_szero>
    2120:	5f 3f       	cpi	r21, 0xFF	; 255
    2122:	ec f3       	brlt	.-6      	; 0x211e <__divsf3_pse+0x6a>
    2124:	98 3e       	cpi	r25, 0xE8	; 232
    2126:	dc f3       	brlt	.-10     	; 0x211e <__divsf3_pse+0x6a>
    2128:	86 95       	lsr	r24
    212a:	77 95       	ror	r23
    212c:	67 95       	ror	r22
    212e:	b7 95       	ror	r27
    2130:	f7 95       	ror	r31
    2132:	9f 5f       	subi	r25, 0xFF	; 255
    2134:	c9 f7       	brne	.-14     	; 0x2128 <__divsf3_pse+0x74>
    2136:	88 0f       	add	r24, r24
    2138:	91 1d       	adc	r25, r1
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	97 f9       	bld	r25, 7
    2140:	08 95       	ret
    2142:	e1 e0       	ldi	r30, 0x01	; 1
    2144:	66 0f       	add	r22, r22
    2146:	77 1f       	adc	r23, r23
    2148:	88 1f       	adc	r24, r24
    214a:	bb 1f       	adc	r27, r27
    214c:	62 17       	cp	r22, r18
    214e:	73 07       	cpc	r23, r19
    2150:	84 07       	cpc	r24, r20
    2152:	ba 07       	cpc	r27, r26
    2154:	20 f0       	brcs	.+8      	; 0x215e <__divsf3_pse+0xaa>
    2156:	62 1b       	sub	r22, r18
    2158:	73 0b       	sbc	r23, r19
    215a:	84 0b       	sbc	r24, r20
    215c:	ba 0b       	sbc	r27, r26
    215e:	ee 1f       	adc	r30, r30
    2160:	88 f7       	brcc	.-30     	; 0x2144 <__divsf3_pse+0x90>
    2162:	e0 95       	com	r30
    2164:	08 95       	ret

00002166 <__fixsfsi>:
    2166:	04 d0       	rcall	.+8      	; 0x2170 <__fixunssfsi>
    2168:	68 94       	set
    216a:	b1 11       	cpse	r27, r1
    216c:	d9 c0       	rjmp	.+434    	; 0x2320 <__fp_szero>
    216e:	08 95       	ret

00002170 <__fixunssfsi>:
    2170:	bc d0       	rcall	.+376    	; 0x22ea <__fp_splitA>
    2172:	88 f0       	brcs	.+34     	; 0x2196 <__fixunssfsi+0x26>
    2174:	9f 57       	subi	r25, 0x7F	; 127
    2176:	90 f0       	brcs	.+36     	; 0x219c <__fixunssfsi+0x2c>
    2178:	b9 2f       	mov	r27, r25
    217a:	99 27       	eor	r25, r25
    217c:	b7 51       	subi	r27, 0x17	; 23
    217e:	a0 f0       	brcs	.+40     	; 0x21a8 <__fixunssfsi+0x38>
    2180:	d1 f0       	breq	.+52     	; 0x21b6 <__fixunssfsi+0x46>
    2182:	66 0f       	add	r22, r22
    2184:	77 1f       	adc	r23, r23
    2186:	88 1f       	adc	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	1a f0       	brmi	.+6      	; 0x2192 <__fixunssfsi+0x22>
    218c:	ba 95       	dec	r27
    218e:	c9 f7       	brne	.-14     	; 0x2182 <__fixunssfsi+0x12>
    2190:	12 c0       	rjmp	.+36     	; 0x21b6 <__fixunssfsi+0x46>
    2192:	b1 30       	cpi	r27, 0x01	; 1
    2194:	81 f0       	breq	.+32     	; 0x21b6 <__fixunssfsi+0x46>
    2196:	c3 d0       	rcall	.+390    	; 0x231e <__fp_zero>
    2198:	b1 e0       	ldi	r27, 0x01	; 1
    219a:	08 95       	ret
    219c:	c0 c0       	rjmp	.+384    	; 0x231e <__fp_zero>
    219e:	67 2f       	mov	r22, r23
    21a0:	78 2f       	mov	r23, r24
    21a2:	88 27       	eor	r24, r24
    21a4:	b8 5f       	subi	r27, 0xF8	; 248
    21a6:	39 f0       	breq	.+14     	; 0x21b6 <__fixunssfsi+0x46>
    21a8:	b9 3f       	cpi	r27, 0xF9	; 249
    21aa:	cc f3       	brlt	.-14     	; 0x219e <__fixunssfsi+0x2e>
    21ac:	86 95       	lsr	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b3 95       	inc	r27
    21b4:	d9 f7       	brne	.-10     	; 0x21ac <__fixunssfsi+0x3c>
    21b6:	3e f4       	brtc	.+14     	; 0x21c6 <__fixunssfsi+0x56>
    21b8:	90 95       	com	r25
    21ba:	80 95       	com	r24
    21bc:	70 95       	com	r23
    21be:	61 95       	neg	r22
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__floatunsisf>:
    21c8:	e8 94       	clt
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <__floatsisf+0x12>

000021cc <__floatsisf>:
    21cc:	97 fb       	bst	r25, 7
    21ce:	3e f4       	brtc	.+14     	; 0x21de <__floatsisf+0x12>
    21d0:	90 95       	com	r25
    21d2:	80 95       	com	r24
    21d4:	70 95       	com	r23
    21d6:	61 95       	neg	r22
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8f 4f       	sbci	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	99 23       	and	r25, r25
    21e0:	a9 f0       	breq	.+42     	; 0x220c <__floatsisf+0x40>
    21e2:	f9 2f       	mov	r31, r25
    21e4:	96 e9       	ldi	r25, 0x96	; 150
    21e6:	bb 27       	eor	r27, r27
    21e8:	93 95       	inc	r25
    21ea:	f6 95       	lsr	r31
    21ec:	87 95       	ror	r24
    21ee:	77 95       	ror	r23
    21f0:	67 95       	ror	r22
    21f2:	b7 95       	ror	r27
    21f4:	f1 11       	cpse	r31, r1
    21f6:	f8 cf       	rjmp	.-16     	; 0x21e8 <__floatsisf+0x1c>
    21f8:	fa f4       	brpl	.+62     	; 0x2238 <__floatsisf+0x6c>
    21fa:	bb 0f       	add	r27, r27
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__floatsisf+0x36>
    21fe:	60 ff       	sbrs	r22, 0
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <__floatsisf+0x6c>
    2202:	6f 5f       	subi	r22, 0xFF	; 255
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	16 c0       	rjmp	.+44     	; 0x2238 <__floatsisf+0x6c>
    220c:	88 23       	and	r24, r24
    220e:	11 f0       	breq	.+4      	; 0x2214 <__floatsisf+0x48>
    2210:	96 e9       	ldi	r25, 0x96	; 150
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <__floatsisf+0x6a>
    2214:	77 23       	and	r23, r23
    2216:	21 f0       	breq	.+8      	; 0x2220 <__floatsisf+0x54>
    2218:	9e e8       	ldi	r25, 0x8E	; 142
    221a:	87 2f       	mov	r24, r23
    221c:	76 2f       	mov	r23, r22
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__floatsisf+0x5e>
    2220:	66 23       	and	r22, r22
    2222:	71 f0       	breq	.+28     	; 0x2240 <__floatsisf+0x74>
    2224:	96 e8       	ldi	r25, 0x86	; 134
    2226:	86 2f       	mov	r24, r22
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	2a f0       	brmi	.+10     	; 0x2238 <__floatsisf+0x6c>
    222e:	9a 95       	dec	r25
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	da f7       	brpl	.-10     	; 0x222e <__floatsisf+0x62>
    2238:	88 0f       	add	r24, r24
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	97 f9       	bld	r25, 7
    2240:	08 95       	ret

00002242 <__fp_cmp>:
    2242:	99 0f       	add	r25, r25
    2244:	00 08       	sbc	r0, r0
    2246:	55 0f       	add	r21, r21
    2248:	aa 0b       	sbc	r26, r26
    224a:	e0 e8       	ldi	r30, 0x80	; 128
    224c:	fe ef       	ldi	r31, 0xFE	; 254
    224e:	16 16       	cp	r1, r22
    2250:	17 06       	cpc	r1, r23
    2252:	e8 07       	cpc	r30, r24
    2254:	f9 07       	cpc	r31, r25
    2256:	c0 f0       	brcs	.+48     	; 0x2288 <__fp_cmp+0x46>
    2258:	12 16       	cp	r1, r18
    225a:	13 06       	cpc	r1, r19
    225c:	e4 07       	cpc	r30, r20
    225e:	f5 07       	cpc	r31, r21
    2260:	98 f0       	brcs	.+38     	; 0x2288 <__fp_cmp+0x46>
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	84 0b       	sbc	r24, r20
    2268:	95 0b       	sbc	r25, r21
    226a:	39 f4       	brne	.+14     	; 0x227a <__fp_cmp+0x38>
    226c:	0a 26       	eor	r0, r26
    226e:	61 f0       	breq	.+24     	; 0x2288 <__fp_cmp+0x46>
    2270:	23 2b       	or	r18, r19
    2272:	24 2b       	or	r18, r20
    2274:	25 2b       	or	r18, r21
    2276:	21 f4       	brne	.+8      	; 0x2280 <__fp_cmp+0x3e>
    2278:	08 95       	ret
    227a:	0a 26       	eor	r0, r26
    227c:	09 f4       	brne	.+2      	; 0x2280 <__fp_cmp+0x3e>
    227e:	a1 40       	sbci	r26, 0x01	; 1
    2280:	a6 95       	lsr	r26
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	81 1d       	adc	r24, r1
    2286:	81 1d       	adc	r24, r1
    2288:	08 95       	ret

0000228a <__fp_inf>:
    228a:	97 f9       	bld	r25, 7
    228c:	9f 67       	ori	r25, 0x7F	; 127
    228e:	80 e8       	ldi	r24, 0x80	; 128
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	08 95       	ret

00002296 <__fp_nan>:
    2296:	9f ef       	ldi	r25, 0xFF	; 255
    2298:	80 ec       	ldi	r24, 0xC0	; 192
    229a:	08 95       	ret

0000229c <__fp_pscA>:
    229c:	00 24       	eor	r0, r0
    229e:	0a 94       	dec	r0
    22a0:	16 16       	cp	r1, r22
    22a2:	17 06       	cpc	r1, r23
    22a4:	18 06       	cpc	r1, r24
    22a6:	09 06       	cpc	r0, r25
    22a8:	08 95       	ret

000022aa <__fp_pscB>:
    22aa:	00 24       	eor	r0, r0
    22ac:	0a 94       	dec	r0
    22ae:	12 16       	cp	r1, r18
    22b0:	13 06       	cpc	r1, r19
    22b2:	14 06       	cpc	r1, r20
    22b4:	05 06       	cpc	r0, r21
    22b6:	08 95       	ret

000022b8 <__fp_round>:
    22b8:	09 2e       	mov	r0, r25
    22ba:	03 94       	inc	r0
    22bc:	00 0c       	add	r0, r0
    22be:	11 f4       	brne	.+4      	; 0x22c4 <__fp_round+0xc>
    22c0:	88 23       	and	r24, r24
    22c2:	52 f0       	brmi	.+20     	; 0x22d8 <__fp_round+0x20>
    22c4:	bb 0f       	add	r27, r27
    22c6:	40 f4       	brcc	.+16     	; 0x22d8 <__fp_round+0x20>
    22c8:	bf 2b       	or	r27, r31
    22ca:	11 f4       	brne	.+4      	; 0x22d0 <__fp_round+0x18>
    22cc:	60 ff       	sbrs	r22, 0
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <__fp_round+0x20>
    22d0:	6f 5f       	subi	r22, 0xFF	; 255
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	8f 4f       	sbci	r24, 0xFF	; 255
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	08 95       	ret

000022da <__fp_split3>:
    22da:	57 fd       	sbrc	r21, 7
    22dc:	90 58       	subi	r25, 0x80	; 128
    22de:	44 0f       	add	r20, r20
    22e0:	55 1f       	adc	r21, r21
    22e2:	59 f0       	breq	.+22     	; 0x22fa <__fp_splitA+0x10>
    22e4:	5f 3f       	cpi	r21, 0xFF	; 255
    22e6:	71 f0       	breq	.+28     	; 0x2304 <__fp_splitA+0x1a>
    22e8:	47 95       	ror	r20

000022ea <__fp_splitA>:
    22ea:	88 0f       	add	r24, r24
    22ec:	97 fb       	bst	r25, 7
    22ee:	99 1f       	adc	r25, r25
    22f0:	61 f0       	breq	.+24     	; 0x230a <__fp_splitA+0x20>
    22f2:	9f 3f       	cpi	r25, 0xFF	; 255
    22f4:	79 f0       	breq	.+30     	; 0x2314 <__fp_splitA+0x2a>
    22f6:	87 95       	ror	r24
    22f8:	08 95       	ret
    22fa:	12 16       	cp	r1, r18
    22fc:	13 06       	cpc	r1, r19
    22fe:	14 06       	cpc	r1, r20
    2300:	55 1f       	adc	r21, r21
    2302:	f2 cf       	rjmp	.-28     	; 0x22e8 <__fp_split3+0xe>
    2304:	46 95       	lsr	r20
    2306:	f1 df       	rcall	.-30     	; 0x22ea <__fp_splitA>
    2308:	08 c0       	rjmp	.+16     	; 0x231a <__fp_splitA+0x30>
    230a:	16 16       	cp	r1, r22
    230c:	17 06       	cpc	r1, r23
    230e:	18 06       	cpc	r1, r24
    2310:	99 1f       	adc	r25, r25
    2312:	f1 cf       	rjmp	.-30     	; 0x22f6 <__fp_splitA+0xc>
    2314:	86 95       	lsr	r24
    2316:	71 05       	cpc	r23, r1
    2318:	61 05       	cpc	r22, r1
    231a:	08 94       	sec
    231c:	08 95       	ret

0000231e <__fp_zero>:
    231e:	e8 94       	clt

00002320 <__fp_szero>:
    2320:	bb 27       	eor	r27, r27
    2322:	66 27       	eor	r22, r22
    2324:	77 27       	eor	r23, r23
    2326:	cb 01       	movw	r24, r22
    2328:	97 f9       	bld	r25, 7
    232a:	08 95       	ret

0000232c <__gesf2>:
    232c:	8a df       	rcall	.-236    	; 0x2242 <__fp_cmp>
    232e:	08 f4       	brcc	.+2      	; 0x2332 <__gesf2+0x6>
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	08 95       	ret

00002334 <__mulsf3>:
    2334:	0b d0       	rcall	.+22     	; 0x234c <__mulsf3x>
    2336:	c0 cf       	rjmp	.-128    	; 0x22b8 <__fp_round>
    2338:	b1 df       	rcall	.-158    	; 0x229c <__fp_pscA>
    233a:	28 f0       	brcs	.+10     	; 0x2346 <__mulsf3+0x12>
    233c:	b6 df       	rcall	.-148    	; 0x22aa <__fp_pscB>
    233e:	18 f0       	brcs	.+6      	; 0x2346 <__mulsf3+0x12>
    2340:	95 23       	and	r25, r21
    2342:	09 f0       	breq	.+2      	; 0x2346 <__mulsf3+0x12>
    2344:	a2 cf       	rjmp	.-188    	; 0x228a <__fp_inf>
    2346:	a7 cf       	rjmp	.-178    	; 0x2296 <__fp_nan>
    2348:	11 24       	eor	r1, r1
    234a:	ea cf       	rjmp	.-44     	; 0x2320 <__fp_szero>

0000234c <__mulsf3x>:
    234c:	c6 df       	rcall	.-116    	; 0x22da <__fp_split3>
    234e:	a0 f3       	brcs	.-24     	; 0x2338 <__mulsf3+0x4>

00002350 <__mulsf3_pse>:
    2350:	95 9f       	mul	r25, r21
    2352:	d1 f3       	breq	.-12     	; 0x2348 <__mulsf3+0x14>
    2354:	95 0f       	add	r25, r21
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	55 1f       	adc	r21, r21
    235a:	62 9f       	mul	r22, r18
    235c:	f0 01       	movw	r30, r0
    235e:	72 9f       	mul	r23, r18
    2360:	bb 27       	eor	r27, r27
    2362:	f0 0d       	add	r31, r0
    2364:	b1 1d       	adc	r27, r1
    2366:	63 9f       	mul	r22, r19
    2368:	aa 27       	eor	r26, r26
    236a:	f0 0d       	add	r31, r0
    236c:	b1 1d       	adc	r27, r1
    236e:	aa 1f       	adc	r26, r26
    2370:	64 9f       	mul	r22, r20
    2372:	66 27       	eor	r22, r22
    2374:	b0 0d       	add	r27, r0
    2376:	a1 1d       	adc	r26, r1
    2378:	66 1f       	adc	r22, r22
    237a:	82 9f       	mul	r24, r18
    237c:	22 27       	eor	r18, r18
    237e:	b0 0d       	add	r27, r0
    2380:	a1 1d       	adc	r26, r1
    2382:	62 1f       	adc	r22, r18
    2384:	73 9f       	mul	r23, r19
    2386:	b0 0d       	add	r27, r0
    2388:	a1 1d       	adc	r26, r1
    238a:	62 1f       	adc	r22, r18
    238c:	83 9f       	mul	r24, r19
    238e:	a0 0d       	add	r26, r0
    2390:	61 1d       	adc	r22, r1
    2392:	22 1f       	adc	r18, r18
    2394:	74 9f       	mul	r23, r20
    2396:	33 27       	eor	r19, r19
    2398:	a0 0d       	add	r26, r0
    239a:	61 1d       	adc	r22, r1
    239c:	23 1f       	adc	r18, r19
    239e:	84 9f       	mul	r24, r20
    23a0:	60 0d       	add	r22, r0
    23a2:	21 1d       	adc	r18, r1
    23a4:	82 2f       	mov	r24, r18
    23a6:	76 2f       	mov	r23, r22
    23a8:	6a 2f       	mov	r22, r26
    23aa:	11 24       	eor	r1, r1
    23ac:	9f 57       	subi	r25, 0x7F	; 127
    23ae:	50 40       	sbci	r21, 0x00	; 0
    23b0:	8a f0       	brmi	.+34     	; 0x23d4 <__mulsf3_pse+0x84>
    23b2:	e1 f0       	breq	.+56     	; 0x23ec <__mulsf3_pse+0x9c>
    23b4:	88 23       	and	r24, r24
    23b6:	4a f0       	brmi	.+18     	; 0x23ca <__mulsf3_pse+0x7a>
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	bb 1f       	adc	r27, r27
    23be:	66 1f       	adc	r22, r22
    23c0:	77 1f       	adc	r23, r23
    23c2:	88 1f       	adc	r24, r24
    23c4:	91 50       	subi	r25, 0x01	; 1
    23c6:	50 40       	sbci	r21, 0x00	; 0
    23c8:	a9 f7       	brne	.-22     	; 0x23b4 <__mulsf3_pse+0x64>
    23ca:	9e 3f       	cpi	r25, 0xFE	; 254
    23cc:	51 05       	cpc	r21, r1
    23ce:	70 f0       	brcs	.+28     	; 0x23ec <__mulsf3_pse+0x9c>
    23d0:	5c cf       	rjmp	.-328    	; 0x228a <__fp_inf>
    23d2:	a6 cf       	rjmp	.-180    	; 0x2320 <__fp_szero>
    23d4:	5f 3f       	cpi	r21, 0xFF	; 255
    23d6:	ec f3       	brlt	.-6      	; 0x23d2 <__mulsf3_pse+0x82>
    23d8:	98 3e       	cpi	r25, 0xE8	; 232
    23da:	dc f3       	brlt	.-10     	; 0x23d2 <__mulsf3_pse+0x82>
    23dc:	86 95       	lsr	r24
    23de:	77 95       	ror	r23
    23e0:	67 95       	ror	r22
    23e2:	b7 95       	ror	r27
    23e4:	f7 95       	ror	r31
    23e6:	e7 95       	ror	r30
    23e8:	9f 5f       	subi	r25, 0xFF	; 255
    23ea:	c1 f7       	brne	.-16     	; 0x23dc <__mulsf3_pse+0x8c>
    23ec:	fe 2b       	or	r31, r30
    23ee:	88 0f       	add	r24, r24
    23f0:	91 1d       	adc	r25, r1
    23f2:	96 95       	lsr	r25
    23f4:	87 95       	ror	r24
    23f6:	97 f9       	bld	r25, 7
    23f8:	08 95       	ret

000023fa <calloc>:
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	68 9f       	mul	r22, r24
    2404:	80 01       	movw	r16, r0
    2406:	69 9f       	mul	r22, r25
    2408:	10 0d       	add	r17, r0
    240a:	78 9f       	mul	r23, r24
    240c:	10 0d       	add	r17, r0
    240e:	11 24       	eor	r1, r1
    2410:	c8 01       	movw	r24, r16
    2412:	0d d0       	rcall	.+26     	; 0x242e <malloc>
    2414:	ec 01       	movw	r28, r24
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	21 f0       	breq	.+8      	; 0x2422 <calloc+0x28>
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	a8 01       	movw	r20, r16
    2420:	0b d1       	rcall	.+534    	; 0x2638 <memset>
    2422:	ce 01       	movw	r24, r28
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <malloc>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	bc 01       	movw	r22, r24
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	91 05       	cpc	r25, r1
    2438:	10 f4       	brcc	.+4      	; 0x243e <malloc+0x10>
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	a0 91 62 02 	lds	r26, 0x0262
    2442:	b0 91 63 02 	lds	r27, 0x0263
    2446:	ed 01       	movw	r28, r26
    2448:	e0 e0       	ldi	r30, 0x00	; 0
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	21 c0       	rjmp	.+66     	; 0x2494 <malloc+0x66>
    2452:	88 81       	ld	r24, Y
    2454:	99 81       	ldd	r25, Y+1	; 0x01
    2456:	86 17       	cp	r24, r22
    2458:	97 07       	cpc	r25, r23
    245a:	69 f4       	brne	.+26     	; 0x2476 <malloc+0x48>
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	30 97       	sbiw	r30, 0x00	; 0
    2462:	19 f0       	breq	.+6      	; 0x246a <malloc+0x3c>
    2464:	93 83       	std	Z+3, r25	; 0x03
    2466:	82 83       	std	Z+2, r24	; 0x02
    2468:	04 c0       	rjmp	.+8      	; 0x2472 <malloc+0x44>
    246a:	90 93 63 02 	sts	0x0263, r25
    246e:	80 93 62 02 	sts	0x0262, r24
    2472:	fe 01       	movw	r30, r28
    2474:	34 c0       	rjmp	.+104    	; 0x24de <malloc+0xb0>
    2476:	68 17       	cp	r22, r24
    2478:	79 07       	cpc	r23, r25
    247a:	38 f4       	brcc	.+14     	; 0x248a <malloc+0x5c>
    247c:	41 15       	cp	r20, r1
    247e:	51 05       	cpc	r21, r1
    2480:	19 f0       	breq	.+6      	; 0x2488 <malloc+0x5a>
    2482:	84 17       	cp	r24, r20
    2484:	95 07       	cpc	r25, r21
    2486:	08 f4       	brcc	.+2      	; 0x248a <malloc+0x5c>
    2488:	ac 01       	movw	r20, r24
    248a:	fe 01       	movw	r30, r28
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	9c 01       	movw	r18, r24
    2492:	e9 01       	movw	r28, r18
    2494:	20 97       	sbiw	r28, 0x00	; 0
    2496:	e9 f6       	brne	.-70     	; 0x2452 <malloc+0x24>
    2498:	41 15       	cp	r20, r1
    249a:	51 05       	cpc	r21, r1
    249c:	a9 f1       	breq	.+106    	; 0x2508 <malloc+0xda>
    249e:	ca 01       	movw	r24, r20
    24a0:	86 1b       	sub	r24, r22
    24a2:	97 0b       	sbc	r25, r23
    24a4:	04 97       	sbiw	r24, 0x04	; 4
    24a6:	08 f4       	brcc	.+2      	; 0x24aa <malloc+0x7c>
    24a8:	ba 01       	movw	r22, r20
    24aa:	e0 e0       	ldi	r30, 0x00	; 0
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	2a c0       	rjmp	.+84     	; 0x2504 <malloc+0xd6>
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	11 97       	sbiw	r26, 0x01	; 1
    24b6:	84 17       	cp	r24, r20
    24b8:	95 07       	cpc	r25, r21
    24ba:	f9 f4       	brne	.+62     	; 0x24fa <malloc+0xcc>
    24bc:	64 17       	cp	r22, r20
    24be:	75 07       	cpc	r23, r21
    24c0:	81 f4       	brne	.+32     	; 0x24e2 <malloc+0xb4>
    24c2:	12 96       	adiw	r26, 0x02	; 2
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	13 97       	sbiw	r26, 0x03	; 3
    24ca:	30 97       	sbiw	r30, 0x00	; 0
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <malloc+0xa6>
    24ce:	93 83       	std	Z+3, r25	; 0x03
    24d0:	82 83       	std	Z+2, r24	; 0x02
    24d2:	04 c0       	rjmp	.+8      	; 0x24dc <malloc+0xae>
    24d4:	90 93 63 02 	sts	0x0263, r25
    24d8:	80 93 62 02 	sts	0x0262, r24
    24dc:	fd 01       	movw	r30, r26
    24de:	32 96       	adiw	r30, 0x02	; 2
    24e0:	4f c0       	rjmp	.+158    	; 0x2580 <malloc+0x152>
    24e2:	ca 01       	movw	r24, r20
    24e4:	86 1b       	sub	r24, r22
    24e6:	97 0b       	sbc	r25, r23
    24e8:	fd 01       	movw	r30, r26
    24ea:	e8 0f       	add	r30, r24
    24ec:	f9 1f       	adc	r31, r25
    24ee:	61 93       	st	Z+, r22
    24f0:	71 93       	st	Z+, r23
    24f2:	02 97       	sbiw	r24, 0x02	; 2
    24f4:	8d 93       	st	X+, r24
    24f6:	9c 93       	st	X, r25
    24f8:	43 c0       	rjmp	.+134    	; 0x2580 <malloc+0x152>
    24fa:	fd 01       	movw	r30, r26
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	9c 01       	movw	r18, r24
    2502:	d9 01       	movw	r26, r18
    2504:	10 97       	sbiw	r26, 0x00	; 0
    2506:	a1 f6       	brne	.-88     	; 0x24b0 <malloc+0x82>
    2508:	80 91 60 02 	lds	r24, 0x0260
    250c:	90 91 61 02 	lds	r25, 0x0261
    2510:	89 2b       	or	r24, r25
    2512:	41 f4       	brne	.+16     	; 0x2524 <malloc+0xf6>
    2514:	80 91 02 01 	lds	r24, 0x0102
    2518:	90 91 03 01 	lds	r25, 0x0103
    251c:	90 93 61 02 	sts	0x0261, r25
    2520:	80 93 60 02 	sts	0x0260, r24
    2524:	40 91 04 01 	lds	r20, 0x0104
    2528:	50 91 05 01 	lds	r21, 0x0105
    252c:	41 15       	cp	r20, r1
    252e:	51 05       	cpc	r21, r1
    2530:	41 f4       	brne	.+16     	; 0x2542 <malloc+0x114>
    2532:	4d b7       	in	r20, 0x3d	; 61
    2534:	5e b7       	in	r21, 0x3e	; 62
    2536:	80 91 00 01 	lds	r24, 0x0100
    253a:	90 91 01 01 	lds	r25, 0x0101
    253e:	48 1b       	sub	r20, r24
    2540:	59 0b       	sbc	r21, r25
    2542:	20 91 60 02 	lds	r18, 0x0260
    2546:	30 91 61 02 	lds	r19, 0x0261
    254a:	24 17       	cp	r18, r20
    254c:	35 07       	cpc	r19, r21
    254e:	b0 f4       	brcc	.+44     	; 0x257c <malloc+0x14e>
    2550:	ca 01       	movw	r24, r20
    2552:	82 1b       	sub	r24, r18
    2554:	93 0b       	sbc	r25, r19
    2556:	86 17       	cp	r24, r22
    2558:	97 07       	cpc	r25, r23
    255a:	80 f0       	brcs	.+32     	; 0x257c <malloc+0x14e>
    255c:	ab 01       	movw	r20, r22
    255e:	4e 5f       	subi	r20, 0xFE	; 254
    2560:	5f 4f       	sbci	r21, 0xFF	; 255
    2562:	84 17       	cp	r24, r20
    2564:	95 07       	cpc	r25, r21
    2566:	50 f0       	brcs	.+20     	; 0x257c <malloc+0x14e>
    2568:	42 0f       	add	r20, r18
    256a:	53 1f       	adc	r21, r19
    256c:	50 93 61 02 	sts	0x0261, r21
    2570:	40 93 60 02 	sts	0x0260, r20
    2574:	f9 01       	movw	r30, r18
    2576:	61 93       	st	Z+, r22
    2578:	71 93       	st	Z+, r23
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <malloc+0x152>
    257c:	e0 e0       	ldi	r30, 0x00	; 0
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	cf 01       	movw	r24, r30
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	08 95       	ret

00002588 <free>:
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	09 f4       	brne	.+2      	; 0x2592 <free+0xa>
    2590:	50 c0       	rjmp	.+160    	; 0x2632 <free+0xaa>
    2592:	ec 01       	movw	r28, r24
    2594:	22 97       	sbiw	r28, 0x02	; 2
    2596:	1b 82       	std	Y+3, r1	; 0x03
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	a0 91 62 02 	lds	r26, 0x0262
    259e:	b0 91 63 02 	lds	r27, 0x0263
    25a2:	10 97       	sbiw	r26, 0x00	; 0
    25a4:	09 f1       	breq	.+66     	; 0x25e8 <free+0x60>
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	ac 17       	cp	r26, r28
    25ac:	bd 07       	cpc	r27, r29
    25ae:	08 f1       	brcs	.+66     	; 0x25f2 <free+0x6a>
    25b0:	bb 83       	std	Y+3, r27	; 0x03
    25b2:	aa 83       	std	Y+2, r26	; 0x02
    25b4:	fe 01       	movw	r30, r28
    25b6:	21 91       	ld	r18, Z+
    25b8:	31 91       	ld	r19, Z+
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	ae 17       	cp	r26, r30
    25c0:	bf 07       	cpc	r27, r31
    25c2:	79 f4       	brne	.+30     	; 0x25e2 <free+0x5a>
    25c4:	8d 91       	ld	r24, X+
    25c6:	9c 91       	ld	r25, X
    25c8:	11 97       	sbiw	r26, 0x01	; 1
    25ca:	28 0f       	add	r18, r24
    25cc:	39 1f       	adc	r19, r25
    25ce:	2e 5f       	subi	r18, 0xFE	; 254
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	39 83       	std	Y+1, r19	; 0x01
    25d4:	28 83       	st	Y, r18
    25d6:	12 96       	adiw	r26, 0x02	; 2
    25d8:	8d 91       	ld	r24, X+
    25da:	9c 91       	ld	r25, X
    25dc:	13 97       	sbiw	r26, 0x03	; 3
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	41 15       	cp	r20, r1
    25e4:	51 05       	cpc	r21, r1
    25e6:	71 f4       	brne	.+28     	; 0x2604 <free+0x7c>
    25e8:	d0 93 63 02 	sts	0x0263, r29
    25ec:	c0 93 62 02 	sts	0x0262, r28
    25f0:	20 c0       	rjmp	.+64     	; 0x2632 <free+0xaa>
    25f2:	12 96       	adiw	r26, 0x02	; 2
    25f4:	8d 91       	ld	r24, X+
    25f6:	9c 91       	ld	r25, X
    25f8:	13 97       	sbiw	r26, 0x03	; 3
    25fa:	ad 01       	movw	r20, r26
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	11 f0       	breq	.+4      	; 0x2604 <free+0x7c>
    2600:	dc 01       	movw	r26, r24
    2602:	d3 cf       	rjmp	.-90     	; 0x25aa <free+0x22>
    2604:	fa 01       	movw	r30, r20
    2606:	d3 83       	std	Z+3, r29	; 0x03
    2608:	c2 83       	std	Z+2, r28	; 0x02
    260a:	21 91       	ld	r18, Z+
    260c:	31 91       	ld	r19, Z+
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	ce 17       	cp	r28, r30
    2614:	df 07       	cpc	r29, r31
    2616:	69 f4       	brne	.+26     	; 0x2632 <free+0xaa>
    2618:	88 81       	ld	r24, Y
    261a:	99 81       	ldd	r25, Y+1	; 0x01
    261c:	28 0f       	add	r18, r24
    261e:	39 1f       	adc	r19, r25
    2620:	2e 5f       	subi	r18, 0xFE	; 254
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	fa 01       	movw	r30, r20
    2626:	31 83       	std	Z+1, r19	; 0x01
    2628:	20 83       	st	Z, r18
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	9b 81       	ldd	r25, Y+3	; 0x03
    262e:	93 83       	std	Z+3, r25	; 0x03
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <memset>:
    2638:	dc 01       	movw	r26, r24
    263a:	01 c0       	rjmp	.+2      	; 0x263e <memset+0x6>
    263c:	6d 93       	st	X+, r22
    263e:	41 50       	subi	r20, 0x01	; 1
    2640:	50 40       	sbci	r21, 0x00	; 0
    2642:	e0 f7       	brcc	.-8      	; 0x263c <memset+0x4>
    2644:	08 95       	ret

00002646 <_exit>:
    2646:	f8 94       	cli

00002648 <__stop_program>:
    2648:	ff cf       	rjmp	.-2      	; 0x2648 <__stop_program>
