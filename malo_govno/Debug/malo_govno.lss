
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00003002  00003096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000151  0080011c  0080011c  000030b2  2**0
                  ALLOC
  3 .debug_aranges 000002e8  00000000  00000000  000030b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000703  00000000  00000000  0000339a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f1c  00000000  00000000  00003a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a11  00000000  00000000  000059b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021a9  00000000  00000000  000063ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  00008574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000974  00000000  00000000  00008a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  00009398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	if(sys_time >= 80000)
		actuators_umbrella();
	sys_time++;
}
uint8_t system_jumper_check(void)
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c5       	rjmp	.+2648   	; 0xaa2 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e0       	ldi	r30, 0x02	; 2
      a8:	f0 e3       	ldi	r31, 0x30	; 48
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ad 36       	cpi	r26, 0x6D	; 109
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	2f d1       	rcall	.+606    	; 0x32a <main>
      cc:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <beginning_move>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

void beginning_move(int side)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	64 97       	sbiw	r28, 0x14	; 20
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	9a 8b       	std	Y+18, r25	; 0x12
      e8:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	
	odometry_move_straight(160,LOW_SPEED,NULL);
      ea:	80 ea       	ldi	r24, 0xA0	; 160
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	6e e1       	ldi	r22, 0x1E	; 30
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <odometry_move_straight>
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	a8 ec       	ldi	r26, 0xC8	; 200
      fe:	b2 e4       	ldi	r27, 0x42	; 66
     100:	8b 87       	std	Y+11, r24	; 0x0b
     102:	9c 87       	std	Y+12, r25	; 0x0c
     104:	ad 87       	std	Y+13, r26	; 0x0d
     106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     108:	6b 85       	ldd	r22, Y+11	; 0x0b
     10a:	7c 85       	ldd	r23, Y+12	; 0x0c
     10c:	8d 85       	ldd	r24, Y+13	; 0x0d
     10e:	9e 85       	ldd	r25, Y+14	; 0x0e
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e4       	ldi	r19, 0x40	; 64
     114:	4c e1       	ldi	r20, 0x1C	; 28
     116:	55 e4       	ldi	r21, 0x45	; 69
     118:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	8f 83       	std	Y+7, r24	; 0x07
     122:	98 87       	std	Y+8, r25	; 0x08
     124:	a9 87       	std	Y+9, r26	; 0x09
     126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     128:	6f 81       	ldd	r22, Y+7	; 0x07
     12a:	78 85       	ldd	r23, Y+8	; 0x08
     12c:	89 85       	ldd	r24, Y+9	; 0x09
     12e:	9a 85       	ldd	r25, Y+10	; 0x0a
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	40 e8       	ldi	r20, 0x80	; 128
     136:	5f e3       	ldi	r21, 0x3F	; 63
     138:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     13c:	88 23       	and	r24, r24
     13e:	2c f4       	brge	.+10     	; 0x14a <beginning_move+0x78>
		__ticks = 1;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9e 83       	std	Y+6, r25	; 0x06
     146:	8d 83       	std	Y+5, r24	; 0x05
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <beginning_move+0xf6>
	else if (__tmp > 65535)
     14a:	6f 81       	ldd	r22, Y+7	; 0x07
     14c:	78 85       	ldd	r23, Y+8	; 0x08
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	9a 85       	ldd	r25, Y+10	; 0x0a
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	3f ef       	ldi	r19, 0xFF	; 255
     156:	4f e7       	ldi	r20, 0x7F	; 127
     158:	57 e4       	ldi	r21, 0x47	; 71
     15a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
     15e:	18 16       	cp	r1, r24
     160:	4c f5       	brge	.+82     	; 0x1b4 <beginning_move+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     162:	6b 85       	ldd	r22, Y+11	; 0x0b
     164:	7c 85       	ldd	r23, Y+12	; 0x0c
     166:	8d 85       	ldd	r24, Y+13	; 0x0d
     168:	9e 85       	ldd	r25, Y+14	; 0x0e
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e2       	ldi	r20, 0x20	; 32
     170:	51 e4       	ldi	r21, 0x41	; 65
     172:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	bc 01       	movw	r22, r24
     17c:	cd 01       	movw	r24, r26
     17e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	9e 83       	std	Y+6, r25	; 0x06
     188:	8d 83       	std	Y+5, r24	; 0x05
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <beginning_move+0xd8>
     18c:	8a ef       	ldi	r24, 0xFA	; 250
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9c 83       	std	Y+4, r25	; 0x04
     192:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     194:	8b 81       	ldd	r24, Y+3	; 0x03
     196:	9c 81       	ldd	r25, Y+4	; 0x04
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <beginning_move+0xc6>
     19c:	9c 83       	std	Y+4, r25	; 0x04
     19e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	9e 83       	std	Y+6, r25	; 0x06
     1a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1aa:	8d 81       	ldd	r24, Y+5	; 0x05
     1ac:	9e 81       	ldd	r25, Y+6	; 0x06
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	69 f7       	brne	.-38     	; 0x18c <beginning_move+0xba>
     1b2:	14 c0       	rjmp	.+40     	; 0x1dc <beginning_move+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b4:	6f 81       	ldd	r22, Y+7	; 0x07
     1b6:	78 85       	ldd	r23, Y+8	; 0x08
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	9e 83       	std	Y+6, r25	; 0x06
     1c6:	8d 83       	std	Y+5, r24	; 0x05
     1c8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ca:	9e 81       	ldd	r25, Y+6	; 0x06
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <beginning_move+0x102>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	odometry_move_straight(-300,LOW_SPEED,NULL);
     1dc:	84 ed       	ldi	r24, 0xD4	; 212
     1de:	9e ef       	ldi	r25, 0xFE	; 254
     1e0:	6e e1       	ldi	r22, 0x1E	; 30
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <odometry_move_straight>
	if(side == PURPLE_SIDE)
     1ea:	89 89       	ldd	r24, Y+17	; 0x11
     1ec:	9a 89       	ldd	r25, Y+18	; 0x12
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	41 f4       	brne	.+16     	; 0x202 <beginning_move+0x130>
		odometry_rotate_for(-90,LOW_SPEED,NULL);
     1f2:	86 ea       	ldi	r24, 0xA6	; 166
     1f4:	9f ef       	ldi	r25, 0xFF	; 255
     1f6:	6e e1       	ldi	r22, 0x1E	; 30
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <odometry_rotate_for>
     200:	07 c0       	rjmp	.+14     	; 0x210 <beginning_move+0x13e>
	else
		odometry_rotate_for(90,LOW_SPEED,NULL);
     202:	8a e5       	ldi	r24, 0x5A	; 90
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	6e e1       	ldi	r22, 0x1E	; 30
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <odometry_rotate_for>
	//actuators set the left and right one
	odometry_move_straight(1015,NORMAL_SPEED,NULL);
     210:	87 ef       	ldi	r24, 0xF7	; 247
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	61 e4       	ldi	r22, 0x41	; 65
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <odometry_move_straight>
	odometry_move_straight(-100,NORMAL_SPEED,NULL);
     21e:	8c e9       	ldi	r24, 0x9C	; 156
     220:	9f ef       	ldi	r25, 0xFF	; 255
     222:	61 e4       	ldi	r22, 0x41	; 65
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <odometry_move_straight>
	odometry_rotate_for(55,NORMAL_SPEED,NULL);
     22c:	87 e3       	ldi	r24, 0x37	; 55
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	61 e4       	ldi	r22, 0x41	; 65
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <odometry_rotate_for>
	i = camera();
     23a:	0e 94 8d 10 	call	0x211a	; 0x211a <camera>
     23e:	98 8b       	std	Y+16, r25	; 0x10
     240:	8f 87       	std	Y+15, r24	; 0x0f
	
	switch(i)
     242:	8f 85       	ldd	r24, Y+15	; 0x0f
     244:	98 89       	ldd	r25, Y+16	; 0x10
     246:	9c 8b       	std	Y+20, r25	; 0x14
     248:	8b 8b       	std	Y+19, r24	; 0x13
     24a:	8b 89       	ldd	r24, Y+19	; 0x13
     24c:	9c 89       	ldd	r25, Y+20	; 0x14
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	91 05       	cpc	r25, r1
     252:	99 f1       	breq	.+102    	; 0x2ba <beginning_move+0x1e8>
     254:	8b 89       	ldd	r24, Y+19	; 0x13
     256:	9c 89       	ldd	r25, Y+20	; 0x14
     258:	83 30       	cpi	r24, 0x03	; 3
     25a:	91 05       	cpc	r25, r1
     25c:	54 f4       	brge	.+20     	; 0x272 <beginning_move+0x1a0>
     25e:	8b 89       	ldd	r24, Y+19	; 0x13
     260:	9c 89       	ldd	r25, Y+20	; 0x14
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	b1 f0       	breq	.+44     	; 0x292 <beginning_move+0x1c0>
     266:	8b 89       	ldd	r24, Y+19	; 0x13
     268:	9c 89       	ldd	r25, Y+20	; 0x14
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	91 05       	cpc	r25, r1
     26e:	d1 f0       	breq	.+52     	; 0x2a4 <beginning_move+0x1d2>
     270:	53 c0       	rjmp	.+166    	; 0x318 <beginning_move+0x246>
     272:	8b 89       	ldd	r24, Y+19	; 0x13
     274:	9c 89       	ldd	r25, Y+20	; 0x14
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	91 05       	cpc	r25, r1
     27a:	a9 f1       	breq	.+106    	; 0x2e6 <beginning_move+0x214>
     27c:	8b 89       	ldd	r24, Y+19	; 0x13
     27e:	9c 89       	ldd	r25, Y+20	; 0x14
     280:	84 30       	cpi	r24, 0x04	; 4
     282:	91 05       	cpc	r25, r1
     284:	2c f1       	brlt	.+74     	; 0x2d0 <beginning_move+0x1fe>
     286:	8b 89       	ldd	r24, Y+19	; 0x13
     288:	9c 89       	ldd	r25, Y+20	; 0x14
     28a:	85 30       	cpi	r24, 0x05	; 5
     28c:	91 05       	cpc	r25, r1
     28e:	b1 f1       	breq	.+108    	; 0x2fc <beginning_move+0x22a>
     290:	43 c0       	rjmp	.+134    	; 0x318 <beginning_move+0x246>
	{
		case 0:
			active_state = 0;
     292:	10 92 67 02 	sts	0x0267, r1
     296:	10 92 66 02 	sts	0x0266, r1
			gpio_write_pin(0,1);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
     2a2:	3a c0       	rjmp	.+116    	; 0x318 <beginning_move+0x246>
			break;	
		case 1:
			active_state = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	90 93 67 02 	sts	0x0267, r25
     2ac:	80 93 66 02 	sts	0x0266, r24
			gpio_write_pin(1,1);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
     2b8:	2f c0       	rjmp	.+94     	; 0x318 <beginning_move+0x246>
			break;
		case 2:
			active_state = 2;
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 67 02 	sts	0x0267, r25
     2c2:	80 93 66 02 	sts	0x0266, r24
			gpio_write_pin(2,1);
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
     2ce:	24 c0       	rjmp	.+72     	; 0x318 <beginning_move+0x246>
			break;
		case 3:
			active_state = 3;
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 67 02 	sts	0x0267, r25
     2d8:	80 93 66 02 	sts	0x0266, r24
			gpio_write_pin(3,1);
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <beginning_move+0x246>
			break;		
		case 4:
			active_state = 4;
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 67 02 	sts	0x0267, r25
     2ee:	80 93 66 02 	sts	0x0266, r24
			gpio_write_pin(4,1);
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <beginning_move+0x246>
			break;
		case 5:	
			active_state = 5;
     2fc:	85 e0       	ldi	r24, 0x05	; 5
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	90 93 67 02 	sts	0x0267, r25
     304:	80 93 66 02 	sts	0x0266, r24
			gpio_write_pin(0,1);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
			gpio_write_pin(4,1);
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	0e 94 8c 09 	call	0x1318	; 0x1318 <gpio_write_pin>
			break;
	}
}
     318:	64 96       	adiw	r28, 0x14	; 20
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	cf 91       	pop	r28
     326:	df 91       	pop	r29
     328:	08 95       	ret

0000032a <main>:

int main()
{
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
	static bool done_camera = false;

	system_init();
     332:	0e 94 71 12 	call	0x24e2	; 0x24e2 <system_init>

	while(1)
	{
		//put if for the side checker
		if(!done_camera)
     336:	80 91 1c 01 	lds	r24, 0x011C
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	89 27       	eor	r24, r25
     33e:	88 23       	and	r24, r24
     340:	19 f0       	breq	.+6      	; 0x348 <main+0x1e>
			beginning_move(GREEN_SIDE);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	c5 de       	rcall	.-630    	; 0xd2 <beginning_move>
			done_camera = true;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 1c 01 	sts	0x011C, r24
		PORTG = 0xff;
     34e:	e4 e3       	ldi	r30, 0x34	; 52
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	80 83       	st	Z, r24
		greenside();
     356:	0e 94 04 0b 	call	0x1608	; 0x1608 <greenside>
     35a:	ed cf       	rjmp	.-38     	; 0x336 <main+0xc>

0000035c <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	df 93       	push	r29
     362:	cf 93       	push	r28
     364:	00 d0       	rcall	.+0      	; 0x366 <servo_init+0xa>
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     36e:	ad e2       	ldi	r26, 0x2D	; 45
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ed e2       	ldi	r30, 0x2D	; 45
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 63       	ori	r24, 0x38	; 56
     37a:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     37c:	e4 e9       	ldi	r30, 0x94	; 148
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	10 82       	st	Z, r1
	OCR3A = 0;
     384:	e8 e9       	ldi	r30, 0x98	; 152
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	10 82       	st	Z, r1
	OCR3B = 0;
     38c:	ea e9       	ldi	r30, 0x9A	; 154
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	11 82       	std	Z+1, r1	; 0x01
     392:	10 82       	st	Z, r1
	OCR3C = 0;
     394:	ec e9       	ldi	r30, 0x9C	; 156
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     39c:	e0 e9       	ldi	r30, 0x90	; 144
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	8e eb       	ldi	r24, 0xBE	; 190
     3a2:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     3a4:	e1 e9       	ldi	r30, 0x91	; 145
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	8a e1       	ldi	r24, 0x1A	; 26
     3aa:	80 83       	st	Z, r24
	
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     3ac:	06 e9       	ldi	r16, 0x96	; 150
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	9a 81       	ldd	r25, Y+2	; 0x02
     3b4:	cc 01       	movw	r24, r24
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	bc 01       	movw	r22, r24
     3bc:	cd 01       	movw	r24, r26
     3be:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__floatunsisf>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	51 e4       	ldi	r21, 0x41	; 65
     3d2:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	9c 01       	movw	r18, r24
     3dc:	ad 01       	movw	r20, r26
     3de:	60 e8       	ldi	r22, 0x80	; 128
     3e0:	76 e9       	ldi	r23, 0x96	; 150
     3e2:	88 e1       	ldi	r24, 0x18	; 24
     3e4:	9b e4       	ldi	r25, 0x4B	; 75
     3e6:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	bc 01       	movw	r22, r24
     3f0:	cd 01       	movw	r24, r26
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	5f e3       	ldi	r21, 0x3F	; 63
     3fa:	0e 94 bf 14 	call	0x297e	; 0x297e <__addsf3>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	bc 01       	movw	r22, r24
     404:	cd 01       	movw	r24, r26
     406:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	f8 01       	movw	r30, r16
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
}//END OF servo_init
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <servo_set_duty_cycle_umbrella>:


static void servo_set_duty_cycle_umbrella(int16_t value)
{
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	00 d0       	rcall	.+0      	; 0x430 <servo_set_duty_cycle_umbrella+0xe>
     430:	00 d0       	rcall	.+0      	; 0x432 <servo_set_duty_cycle_umbrella+0x10>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     43a:	e6 e9       	ldi	r30, 0x96	; 150
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	91 81       	ldd	r25, Z+1	; 0x01
     442:	cc 01       	movw	r24, r24
     444:	a0 e0       	ldi	r26, 0x00	; 0
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	bc 01       	movw	r22, r24
     44a:	cd 01       	movw	r24, r26
     44c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__floatunsisf>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	4f e7       	ldi	r20, 0x7F	; 127
     45e:	53 e4       	ldi	r21, 0x43	; 67
     460:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	7c 01       	movw	r14, r24
     46a:	8d 01       	movw	r16, r26
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	aa 27       	eor	r26, r26
     472:	97 fd       	sbrc	r25, 7
     474:	a0 95       	com	r26
     476:	ba 2f       	mov	r27, r26
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c8 01       	movw	r24, r16
     486:	b7 01       	movw	r22, r14
     488:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	bc 01       	movw	r22, r24
     492:	cd 01       	movw	r24, r26
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	0e 94 bf 14 	call	0x297e	; 0x297e <__addsf3>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	9a 83       	std	Y+2, r25	; 0x02
     4b2:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     4b4:	e9 e9       	ldi	r30, 0x99	; 153
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	89 2f       	mov	r24, r25
     4be:	99 27       	eor	r25, r25
     4c0:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     4c2:	e8 e9       	ldi	r30, 0x98	; 152
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	80 83       	st	Z, r24
}
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	cf 91       	pop	r28
     4d4:	df 91       	pop	r29
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	08 95       	ret

000004e0 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <servo_set_duty_cycle_door+0xe>
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <servo_set_duty_cycle_door+0x10>
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     4f8:	e6 e9       	ldi	r30, 0x96	; 150
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	cc 01       	movw	r24, r24
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__floatunsisf>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	4f e7       	ldi	r20, 0x7F	; 127
     51c:	53 e4       	ldi	r21, 0x43	; 67
     51e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	7c 01       	movw	r14, r24
     528:	8d 01       	movw	r16, r26
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	aa 27       	eor	r26, r26
     530:	97 fd       	sbrc	r25, 7
     532:	a0 95       	com	r26
     534:	ba 2f       	mov	r27, r26
     536:	bc 01       	movw	r22, r24
     538:	cd 01       	movw	r24, r26
     53a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     53e:	9b 01       	movw	r18, r22
     540:	ac 01       	movw	r20, r24
     542:	c8 01       	movw	r24, r16
     544:	b7 01       	movw	r22, r14
     546:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	5f e3       	ldi	r21, 0x3F	; 63
     55a:	0e 94 bf 14 	call	0x297e	; 0x297e <__addsf3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	9a 83       	std	Y+2, r25	; 0x02
     570:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     572:	eb e9       	ldi	r30, 0x9B	; 155
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	89 2f       	mov	r24, r25
     57c:	99 27       	eor	r25, r25
     57e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     580:	ea e9       	ldi	r30, 0x9A	; 154
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	80 83       	st	Z, r24
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	08 95       	ret

0000059e <servo_set_umbrella_position>:

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	0f 92       	push	r0
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	99 27       	eor	r25, r25
     5ae:	87 fd       	sbrc	r24, 7
     5b0:	90 95       	com	r25
     5b2:	a9 2f       	mov	r26, r25
     5b4:	b9 2f       	mov	r27, r25
     5b6:	bc 01       	movw	r22, r24
     5b8:	cd 01       	movw	r24, r26
     5ba:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	44 eb       	ldi	r20, 0xB4	; 180
     5cc:	52 e4       	ldi	r21, 0x42	; 66
     5ce:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	26 e6       	ldi	r18, 0x66	; 102
     5dc:	36 e6       	ldi	r19, 0x66	; 102
     5de:	46 e3       	ldi	r20, 0x36	; 54
     5e0:	51 ec       	ldi	r21, 0xC1	; 193
     5e2:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	bc 01       	movw	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4c e6       	ldi	r20, 0x6C	; 108
     5f4:	53 e4       	ldi	r21, 0x43	; 67
     5f6:	0e 94 bf 14 	call	0x297e	; 0x297e <__addsf3>
     5fa:	dc 01       	movw	r26, r24
     5fc:	cb 01       	movw	r24, r22
     5fe:	9c 01       	movw	r18, r24
     600:	ad 01       	movw	r20, r26
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	8f e7       	ldi	r24, 0x7F	; 127
     608:	93 e4       	ldi	r25, 0x43	; 67
     60a:	0e 94 be 14 	call	0x297c	; 0x297c <__subsf3>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	bc 01       	movw	r22, r24
     614:	cd 01       	movw	r24, r26
     616:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	01 df       	rcall	.-510    	; 0x422 <servo_set_duty_cycle_umbrella>

}
     620:	0f 90       	pop	r0
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	0f 92       	push	r0
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	99 27       	eor	r25, r25
     638:	87 fd       	sbrc	r24, 7
     63a:	90 95       	com	r25
     63c:	a9 2f       	mov	r26, r25
     63e:	b9 2f       	mov	r27, r25
     640:	bc 01       	movw	r22, r24
     642:	cd 01       	movw	r24, r26
     644:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	44 eb       	ldi	r20, 0xB4	; 180
     656:	52 e4       	ldi	r21, 0x42	; 66
     658:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	26 e6       	ldi	r18, 0x66	; 102
     666:	36 e6       	ldi	r19, 0x66	; 102
     668:	46 e3       	ldi	r20, 0x36	; 54
     66a:	51 ec       	ldi	r21, 0xC1	; 193
     66c:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	4c e6       	ldi	r20, 0x6C	; 108
     67e:	53 e4       	ldi	r21, 0x43	; 67
     680:	0e 94 bf 14 	call	0x297e	; 0x297e <__addsf3>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	9c 01       	movw	r18, r24
     68a:	ad 01       	movw	r20, r26
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	8f e7       	ldi	r24, 0x7F	; 127
     692:	93 e4       	ldi	r25, 0x43	; 67
     694:	0e 94 be 14 	call	0x297c	; 0x297c <__subsf3>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	1b df       	rcall	.-458    	; 0x4e0 <servo_set_duty_cycle_door>
}
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <actuators_umbrella>:
void servo_set_grabbers(int8_t angle)
{
	
}
void actuators_umbrella(void)
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	6c 97       	sbiw	r28, 0x1c	; 28
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     6c6:	8a ea       	ldi	r24, 0xAA	; 170
     6c8:	6a df       	rcall	.-300    	; 0x59e <servo_set_umbrella_position>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	aa e7       	ldi	r26, 0x7A	; 122
     6d0:	b4 e4       	ldi	r27, 0x44	; 68
     6d2:	89 8f       	std	Y+25, r24	; 0x19
     6d4:	9a 8f       	std	Y+26, r25	; 0x1a
     6d6:	ab 8f       	std	Y+27, r26	; 0x1b
     6d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6da:	69 8d       	ldd	r22, Y+25	; 0x19
     6dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e4       	ldi	r19, 0x40	; 64
     6e6:	4c e1       	ldi	r20, 0x1C	; 28
     6e8:	55 e4       	ldi	r21, 0x45	; 69
     6ea:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	8d 8b       	std	Y+21, r24	; 0x15
     6f4:	9e 8b       	std	Y+22, r25	; 0x16
     6f6:	af 8b       	std	Y+23, r26	; 0x17
     6f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     6fa:	6d 89       	ldd	r22, Y+21	; 0x15
     6fc:	7e 89       	ldd	r23, Y+22	; 0x16
     6fe:	8f 89       	ldd	r24, Y+23	; 0x17
     700:	98 8d       	ldd	r25, Y+24	; 0x18
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e8       	ldi	r20, 0x80	; 128
     708:	5f e3       	ldi	r21, 0x3F	; 63
     70a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     70e:	88 23       	and	r24, r24
     710:	2c f4       	brge	.+10     	; 0x71c <actuators_umbrella+0x6a>
		__ticks = 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9c 8b       	std	Y+20, r25	; 0x14
     718:	8b 8b       	std	Y+19, r24	; 0x13
     71a:	3f c0       	rjmp	.+126    	; 0x79a <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     71c:	6d 89       	ldd	r22, Y+21	; 0x15
     71e:	7e 89       	ldd	r23, Y+22	; 0x16
     720:	8f 89       	ldd	r24, Y+23	; 0x17
     722:	98 8d       	ldd	r25, Y+24	; 0x18
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	3f ef       	ldi	r19, 0xFF	; 255
     728:	4f e7       	ldi	r20, 0x7F	; 127
     72a:	57 e4       	ldi	r21, 0x47	; 71
     72c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
     730:	18 16       	cp	r1, r24
     732:	4c f5       	brge	.+82     	; 0x786 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     734:	69 8d       	ldd	r22, Y+25	; 0x19
     736:	7a 8d       	ldd	r23, Y+26	; 0x1a
     738:	8b 8d       	ldd	r24, Y+27	; 0x1b
     73a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e2       	ldi	r20, 0x20	; 32
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	bc 01       	movw	r22, r24
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	9c 8b       	std	Y+20, r25	; 0x14
     75a:	8b 8b       	std	Y+19, r24	; 0x13
     75c:	0f c0       	rjmp	.+30     	; 0x77c <actuators_umbrella+0xca>
     75e:	8a ef       	ldi	r24, 0xFA	; 250
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	9a 8b       	std	Y+18, r25	; 0x12
     764:	89 8b       	std	Y+17, r24	; 0x11
     766:	89 89       	ldd	r24, Y+17	; 0x11
     768:	9a 89       	ldd	r25, Y+18	; 0x12
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <actuators_umbrella+0xb8>
     76e:	9a 8b       	std	Y+18, r25	; 0x12
     770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     772:	8b 89       	ldd	r24, Y+19	; 0x13
     774:	9c 89       	ldd	r25, Y+20	; 0x14
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	9c 8b       	std	Y+20, r25	; 0x14
     77a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77c:	8b 89       	ldd	r24, Y+19	; 0x13
     77e:	9c 89       	ldd	r25, Y+20	; 0x14
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	69 f7       	brne	.-38     	; 0x75e <actuators_umbrella+0xac>
     784:	14 c0       	rjmp	.+40     	; 0x7ae <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     786:	6d 89       	ldd	r22, Y+21	; 0x15
     788:	7e 89       	ldd	r23, Y+22	; 0x16
     78a:	8f 89       	ldd	r24, Y+23	; 0x17
     78c:	98 8d       	ldd	r25, Y+24	; 0x18
     78e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	9c 8b       	std	Y+20, r25	; 0x14
     798:	8b 8b       	std	Y+19, r24	; 0x13
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	98 8b       	std	Y+16, r25	; 0x10
     7a0:	8f 87       	std	Y+15, r24	; 0x0f
     7a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7a4:	98 89       	ldd	r25, Y+16	; 0x10
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <actuators_umbrella+0xf4>
     7aa:	98 8b       	std	Y+16, r25	; 0x10
     7ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	3b df       	rcall	.-394    	; 0x628 <servo_set_door_position>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	aa e7       	ldi	r26, 0x7A	; 122
     7b8:	b4 e4       	ldi	r27, 0x44	; 68
     7ba:	8b 87       	std	Y+11, r24	; 0x0b
     7bc:	9c 87       	std	Y+12, r25	; 0x0c
     7be:	ad 87       	std	Y+13, r26	; 0x0d
     7c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7c2:	6b 85       	ldd	r22, Y+11	; 0x0b
     7c4:	7c 85       	ldd	r23, Y+12	; 0x0c
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e4       	ldi	r19, 0x40	; 64
     7ce:	4c e1       	ldi	r20, 0x1C	; 28
     7d0:	55 e4       	ldi	r21, 0x45	; 69
     7d2:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	8f 83       	std	Y+7, r24	; 0x07
     7dc:	98 87       	std	Y+8, r25	; 0x08
     7de:	a9 87       	std	Y+9, r26	; 0x09
     7e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7e2:	6f 81       	ldd	r22, Y+7	; 0x07
     7e4:	78 85       	ldd	r23, Y+8	; 0x08
     7e6:	89 85       	ldd	r24, Y+9	; 0x09
     7e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e8       	ldi	r20, 0x80	; 128
     7f0:	5f e3       	ldi	r21, 0x3F	; 63
     7f2:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     7f6:	88 23       	and	r24, r24
     7f8:	2c f4       	brge	.+10     	; 0x804 <actuators_umbrella+0x152>
		__ticks = 1;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9e 83       	std	Y+6, r25	; 0x06
     800:	8d 83       	std	Y+5, r24	; 0x05
     802:	3f c0       	rjmp	.+126    	; 0x882 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     804:	6f 81       	ldd	r22, Y+7	; 0x07
     806:	78 85       	ldd	r23, Y+8	; 0x08
     808:	89 85       	ldd	r24, Y+9	; 0x09
     80a:	9a 85       	ldd	r25, Y+10	; 0x0a
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	3f ef       	ldi	r19, 0xFF	; 255
     810:	4f e7       	ldi	r20, 0x7F	; 127
     812:	57 e4       	ldi	r21, 0x47	; 71
     814:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
     818:	18 16       	cp	r1, r24
     81a:	4c f5       	brge	.+82     	; 0x86e <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     81c:	6b 85       	ldd	r22, Y+11	; 0x0b
     81e:	7c 85       	ldd	r23, Y+12	; 0x0c
     820:	8d 85       	ldd	r24, Y+13	; 0x0d
     822:	9e 85       	ldd	r25, Y+14	; 0x0e
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e2       	ldi	r20, 0x20	; 32
     82a:	51 e4       	ldi	r21, 0x41	; 65
     82c:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	bc 01       	movw	r22, r24
     836:	cd 01       	movw	r24, r26
     838:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	9e 83       	std	Y+6, r25	; 0x06
     842:	8d 83       	std	Y+5, r24	; 0x05
     844:	0f c0       	rjmp	.+30     	; 0x864 <actuators_umbrella+0x1b2>
     846:	8a ef       	ldi	r24, 0xFA	; 250
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 83       	std	Y+4, r25	; 0x04
     84c:	8b 83       	std	Y+3, r24	; 0x03
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	9c 81       	ldd	r25, Y+4	; 0x04
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <actuators_umbrella+0x1a0>
     856:	9c 83       	std	Y+4, r25	; 0x04
     858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	9e 81       	ldd	r25, Y+6	; 0x06
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	9e 83       	std	Y+6, r25	; 0x06
     862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     864:	8d 81       	ldd	r24, Y+5	; 0x05
     866:	9e 81       	ldd	r25, Y+6	; 0x06
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	69 f7       	brne	.-38     	; 0x846 <actuators_umbrella+0x194>
     86c:	14 c0       	rjmp	.+40     	; 0x896 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86e:	6f 81       	ldd	r22, Y+7	; 0x07
     870:	78 85       	ldd	r23, Y+8	; 0x08
     872:	89 85       	ldd	r24, Y+9	; 0x09
     874:	9a 85       	ldd	r25, Y+10	; 0x0a
     876:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9e 83       	std	Y+6, r25	; 0x06
     880:	8d 83       	std	Y+5, r24	; 0x05
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	9e 81       	ldd	r25, Y+6	; 0x06
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <actuators_umbrella+0x1dc>
     892:	9a 83       	std	Y+2, r25	; 0x02
     894:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     896:	6c 96       	adiw	r28, 0x1c	; 28
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	08 95       	ret

000008a8 <actuators_setup>:
void actuators_setup(void)
{
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	6c 97       	sbiw	r28, 0x1c	; 28
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
	//dodaj posle testova
	/*
	servo_set_left_grabber_position();
	servo_set_right_grabber_position();
	*/
	servo_set_door_position(90);
     8bc:	8a e5       	ldi	r24, 0x5A	; 90
     8be:	b4 de       	rcall	.-664    	; 0x628 <servo_set_door_position>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	aa e7       	ldi	r26, 0x7A	; 122
     8c6:	b4 e4       	ldi	r27, 0x44	; 68
     8c8:	89 8f       	std	Y+25, r24	; 0x19
     8ca:	9a 8f       	std	Y+26, r25	; 0x1a
     8cc:	ab 8f       	std	Y+27, r26	; 0x1b
     8ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8d0:	69 8d       	ldd	r22, Y+25	; 0x19
     8d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e4       	ldi	r19, 0x40	; 64
     8dc:	4c e1       	ldi	r20, 0x1C	; 28
     8de:	55 e4       	ldi	r21, 0x45	; 69
     8e0:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	8d 8b       	std	Y+21, r24	; 0x15
     8ea:	9e 8b       	std	Y+22, r25	; 0x16
     8ec:	af 8b       	std	Y+23, r26	; 0x17
     8ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8f0:	6d 89       	ldd	r22, Y+21	; 0x15
     8f2:	7e 89       	ldd	r23, Y+22	; 0x16
     8f4:	8f 89       	ldd	r24, Y+23	; 0x17
     8f6:	98 8d       	ldd	r25, Y+24	; 0x18
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e8       	ldi	r20, 0x80	; 128
     8fe:	5f e3       	ldi	r21, 0x3F	; 63
     900:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     904:	88 23       	and	r24, r24
     906:	2c f4       	brge	.+10     	; 0x912 <actuators_setup+0x6a>
		__ticks = 1;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9c 8b       	std	Y+20, r25	; 0x14
     90e:	8b 8b       	std	Y+19, r24	; 0x13
     910:	3f c0       	rjmp	.+126    	; 0x990 <actuators_setup+0xe8>
	else if (__tmp > 65535)
     912:	6d 89       	ldd	r22, Y+21	; 0x15
     914:	7e 89       	ldd	r23, Y+22	; 0x16
     916:	8f 89       	ldd	r24, Y+23	; 0x17
     918:	98 8d       	ldd	r25, Y+24	; 0x18
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	3f ef       	ldi	r19, 0xFF	; 255
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	57 e4       	ldi	r21, 0x47	; 71
     922:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
     926:	18 16       	cp	r1, r24
     928:	4c f5       	brge	.+82     	; 0x97c <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     92a:	69 8d       	ldd	r22, Y+25	; 0x19
     92c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     92e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     930:	9c 8d       	ldd	r25, Y+28	; 0x1c
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e2       	ldi	r20, 0x20	; 32
     938:	51 e4       	ldi	r21, 0x41	; 65
     93a:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	bc 01       	movw	r22, r24
     944:	cd 01       	movw	r24, r26
     946:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     94a:	dc 01       	movw	r26, r24
     94c:	cb 01       	movw	r24, r22
     94e:	9c 8b       	std	Y+20, r25	; 0x14
     950:	8b 8b       	std	Y+19, r24	; 0x13
     952:	0f c0       	rjmp	.+30     	; 0x972 <actuators_setup+0xca>
     954:	8a ef       	ldi	r24, 0xFA	; 250
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	9a 8b       	std	Y+18, r25	; 0x12
     95a:	89 8b       	std	Y+17, r24	; 0x11
     95c:	89 89       	ldd	r24, Y+17	; 0x11
     95e:	9a 89       	ldd	r25, Y+18	; 0x12
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <actuators_setup+0xb8>
     964:	9a 8b       	std	Y+18, r25	; 0x12
     966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     968:	8b 89       	ldd	r24, Y+19	; 0x13
     96a:	9c 89       	ldd	r25, Y+20	; 0x14
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	9c 8b       	std	Y+20, r25	; 0x14
     970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     972:	8b 89       	ldd	r24, Y+19	; 0x13
     974:	9c 89       	ldd	r25, Y+20	; 0x14
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	69 f7       	brne	.-38     	; 0x954 <actuators_setup+0xac>
     97a:	14 c0       	rjmp	.+40     	; 0x9a4 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97c:	6d 89       	ldd	r22, Y+21	; 0x15
     97e:	7e 89       	ldd	r23, Y+22	; 0x16
     980:	8f 89       	ldd	r24, Y+23	; 0x17
     982:	98 8d       	ldd	r25, Y+24	; 0x18
     984:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	9c 8b       	std	Y+20, r25	; 0x14
     98e:	8b 8b       	std	Y+19, r24	; 0x13
     990:	8b 89       	ldd	r24, Y+19	; 0x13
     992:	9c 89       	ldd	r25, Y+20	; 0x14
     994:	98 8b       	std	Y+16, r25	; 0x10
     996:	8f 87       	std	Y+15, r24	; 0x0f
     998:	8f 85       	ldd	r24, Y+15	; 0x0f
     99a:	98 89       	ldd	r25, Y+16	; 0x10
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <actuators_setup+0xf4>
     9a0:	98 8b       	std	Y+16, r25	; 0x10
     9a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     9a4:	85 e5       	ldi	r24, 0x55	; 85
     9a6:	fb dd       	rcall	.-1034   	; 0x59e <servo_set_umbrella_position>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	aa e7       	ldi	r26, 0x7A	; 122
     9ae:	b4 e4       	ldi	r27, 0x44	; 68
     9b0:	8b 87       	std	Y+11, r24	; 0x0b
     9b2:	9c 87       	std	Y+12, r25	; 0x0c
     9b4:	ad 87       	std	Y+13, r26	; 0x0d
     9b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9b8:	6b 85       	ldd	r22, Y+11	; 0x0b
     9ba:	7c 85       	ldd	r23, Y+12	; 0x0c
     9bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9be:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e4       	ldi	r19, 0x40	; 64
     9c4:	4c e1       	ldi	r20, 0x1C	; 28
     9c6:	55 e4       	ldi	r21, 0x45	; 69
     9c8:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	8f 83       	std	Y+7, r24	; 0x07
     9d2:	98 87       	std	Y+8, r25	; 0x08
     9d4:	a9 87       	std	Y+9, r26	; 0x09
     9d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9d8:	6f 81       	ldd	r22, Y+7	; 0x07
     9da:	78 85       	ldd	r23, Y+8	; 0x08
     9dc:	89 85       	ldd	r24, Y+9	; 0x09
     9de:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e8       	ldi	r20, 0x80	; 128
     9e6:	5f e3       	ldi	r21, 0x3F	; 63
     9e8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     9ec:	88 23       	and	r24, r24
     9ee:	2c f4       	brge	.+10     	; 0x9fa <actuators_setup+0x152>
		__ticks = 1;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	9e 83       	std	Y+6, r25	; 0x06
     9f6:	8d 83       	std	Y+5, r24	; 0x05
     9f8:	3f c0       	rjmp	.+126    	; 0xa78 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     9fa:	6f 81       	ldd	r22, Y+7	; 0x07
     9fc:	78 85       	ldd	r23, Y+8	; 0x08
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	9a 85       	ldd	r25, Y+10	; 0x0a
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	4f e7       	ldi	r20, 0x7F	; 127
     a08:	57 e4       	ldi	r21, 0x47	; 71
     a0a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
     a0e:	18 16       	cp	r1, r24
     a10:	4c f5       	brge	.+82     	; 0xa64 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a12:	6b 85       	ldd	r22, Y+11	; 0x0b
     a14:	7c 85       	ldd	r23, Y+12	; 0x0c
     a16:	8d 85       	ldd	r24, Y+13	; 0x0d
     a18:	9e 85       	ldd	r25, Y+14	; 0x0e
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e2       	ldi	r20, 0x20	; 32
     a20:	51 e4       	ldi	r21, 0x41	; 65
     a22:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	9e 83       	std	Y+6, r25	; 0x06
     a38:	8d 83       	std	Y+5, r24	; 0x05
     a3a:	0f c0       	rjmp	.+30     	; 0xa5a <actuators_setup+0x1b2>
     a3c:	8a ef       	ldi	r24, 0xFA	; 250
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <actuators_setup+0x1a0>
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a50:	8d 81       	ldd	r24, Y+5	; 0x05
     a52:	9e 81       	ldd	r25, Y+6	; 0x06
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	69 f7       	brne	.-38     	; 0xa3c <actuators_setup+0x194>
     a62:	14 c0       	rjmp	.+40     	; 0xa8c <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a64:	6f 81       	ldd	r22, Y+7	; 0x07
     a66:	78 85       	ldd	r23, Y+8	; 0x08
     a68:	89 85       	ldd	r24, Y+9	; 0x09
     a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	9e 83       	std	Y+6, r25	; 0x06
     a76:	8d 83       	std	Y+5, r24	; 0x05
     a78:	8d 81       	ldd	r24, Y+5	; 0x05
     a7a:	9e 81       	ldd	r25, Y+6	; 0x06
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <actuators_setup+0x1dc>
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	servo_set_door_position(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	cc dd       	rcall	.-1128   	; 0x628 <servo_set_door_position>
}
     a90:	6c 96       	adiw	r28, 0x1c	; 28
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	08 95       	ret

00000aa2 <__vector_18>:
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	00 90 5b 00 	lds	r0, 0x005B
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
     abe:	af 93       	push	r26
     ac0:	bf 93       	push	r27
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	00 d0       	rcall	.+0      	; 0xacc <__vector_18+0x2a>
     acc:	00 d0       	rcall	.+0      	; 0xace <__vector_18+0x2c>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	ed ee       	ldi	r30, 0xED	; 237
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	8c 83       	std	Y+4, r24	; 0x04
     ada:	1b 82       	std	Y+3, r1	; 0x03
     adc:	9c c0       	rjmp	.+312    	; 0xc16 <__vector_18+0x174>
     ade:	ed ee       	ldi	r30, 0xED	; 237
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	82 95       	swap	r24
     ae6:	80 7f       	andi	r24, 0xF0	; 240
     ae8:	80 83       	st	Z, r24
     aea:	ee ee       	ldi	r30, 0xEE	; 238
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	82 95       	swap	r24
     af2:	86 95       	lsr	r24
     af4:	87 70       	andi	r24, 0x07	; 7
     af6:	88 2f       	mov	r24, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	90 70       	andi	r25, 0x00	; 0
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <__vector_18+0x62>
     b02:	6e c0       	rjmp	.+220    	; 0xbe0 <__vector_18+0x13e>
     b04:	ef ee       	ldi	r30, 0xEF	; 239
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 e8       	ldi	r24, 0x80	; 128
     b0a:	80 83       	st	Z, r24
     b0c:	ae ee       	ldi	r26, 0xEE	; 238
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	ee ee       	ldi	r30, 0xEE	; 238
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 7d       	andi	r24, 0xDF	; 223
     b18:	8c 93       	st	X, r24
     b1a:	e2 ef       	ldi	r30, 0xF2	; 242
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	82 95       	swap	r24
     b22:	86 95       	lsr	r24
     b24:	87 70       	andi	r24, 0x07	; 7
     b26:	28 2f       	mov	r18, r24
     b28:	e3 ef       	ldi	r30, 0xF3	; 243
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	82 2b       	or	r24, r18
     b40:	8a 83       	std	Y+2, r24	; 0x02
     b42:	19 82       	std	Y+1, r1	; 0x01
     b44:	2a c0       	rjmp	.+84     	; 0xb9a <__vector_18+0xf8>
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	82 1b       	sub	r24, r18
     b52:	93 0b       	sbc	r25, r19
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	90 95       	com	r25
     b5a:	81 95       	neg	r24
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	fc 01       	movw	r30, r24
     b60:	e3 5e       	subi	r30, 0xE3	; 227
     b62:	fe 4f       	sbci	r31, 0xFE	; 254
     b64:	40 81       	ld	r20, Z
     b66:	51 81       	ldd	r21, Z+1	; 0x01
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	fc 01       	movw	r30, r24
     b72:	ef 5c       	subi	r30, 0xCF	; 207
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	80 81       	ld	r24, Z
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	da 01       	movw	r26, r20
     b88:	a8 0f       	add	r26, r24
     b8a:	b9 1f       	adc	r27, r25
     b8c:	ea ef       	ldi	r30, 0xFA	; 250
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8c 93       	st	X, r24
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	98 f2       	brcs	.-90     	; 0xb46 <__vector_18+0xa4>
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	fc 01       	movw	r30, r24
     baa:	ef 5c       	subi	r30, 0xCF	; 207
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	80 81       	ld	r24, Z
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	80 83       	st	Z, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	85 30       	cpi	r24, 0x05	; 5
     bb8:	41 f4       	brne	.+16     	; 0xbca <__vector_18+0x128>
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	fc 01       	movw	r30, r24
     bc4:	ef 5c       	subi	r30, 0xCF	; 207
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	10 82       	st	Z, r1
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	eb 5b       	subi	r30, 0xBB	; 187
     bd6:	fe 4f       	sbci	r31, 0xFE	; 254
     bd8:	80 81       	ld	r24, Z
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 83       	st	Z, r24
     bde:	1f c0       	rjmp	.+62     	; 0xc1e <__vector_18+0x17c>
     be0:	ee ee       	ldi	r30, 0xEE	; 238
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	82 95       	swap	r24
     be8:	86 95       	lsr	r24
     bea:	86 95       	lsr	r24
     bec:	83 70       	andi	r24, 0x03	; 3
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	88 23       	and	r24, r24
     bf8:	59 f0       	breq	.+22     	; 0xc10 <__vector_18+0x16e>
     bfa:	ef ee       	ldi	r30, 0xEF	; 239
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	10 82       	st	Z, r1
     c00:	ae ee       	ldi	r26, 0xEE	; 238
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ee ee       	ldi	r30, 0xEE	; 238
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7b       	andi	r24, 0xBF	; 191
     c0c:	8c 93       	st	X, r24
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <__vector_18+0x17c>
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	8f 30       	cpi	r24, 0x0F	; 15
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <__vector_18+0x17c>
     c1c:	60 cf       	rjmp	.-320    	; 0xade <__vector_18+0x3c>
     c1e:	ed ee       	ldi	r30, 0xED	; 237
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	80 83       	st	Z, r24
     c26:	aa ed       	ldi	r26, 0xDA	; 218
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ea ed       	ldi	r30, 0xDA	; 218
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8c 93       	st	X, r24
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	00 92 5b 00 	sts	0x005B, r0
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <CAN_InitModule>:
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <CAN_InitModule+0x6>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	e8 ed       	ldi	r30, 0xD8	; 216
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
     c74:	1a 82       	std	Y+2, r1	; 0x02
     c76:	32 c0       	rjmp	.+100    	; 0xcdc <CAN_InitModule+0x7a>
     c78:	ed ee       	ldi	r30, 0xED	; 237
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	82 95       	swap	r24
     c80:	80 7f       	andi	r24, 0xF0	; 240
     c82:	80 83       	st	Z, r24
     c84:	ee ee       	ldi	r30, 0xEE	; 238
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	10 82       	st	Z, r1
     c8a:	ef ee       	ldi	r30, 0xEF	; 239
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	10 82       	st	Z, r1
     c90:	e3 ef       	ldi	r30, 0xF3	; 243
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	10 82       	st	Z, r1
     c96:	e2 ef       	ldi	r30, 0xF2	; 242
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
     c9c:	e1 ef       	ldi	r30, 0xF1	; 241
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	10 82       	st	Z, r1
     ca2:	e0 ef       	ldi	r30, 0xF0	; 240
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
     ca8:	e7 ef       	ldi	r30, 0xF7	; 247
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
     cae:	e6 ef       	ldi	r30, 0xF6	; 246
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
     cb4:	e5 ef       	ldi	r30, 0xF5	; 245
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
     cba:	e4 ef       	ldi	r30, 0xF4	; 244
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <CAN_InitModule+0x6e>
     cc4:	ea ef       	ldi	r30, 0xFA	; 250
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	88 30       	cpi	r24, 0x08	; 8
     cd4:	b8 f3       	brcs	.-18     	; 0xcc4 <CAN_InitModule+0x62>
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	8a 83       	std	Y+2, r24	; 0x02
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	8f 30       	cpi	r24, 0x0F	; 15
     ce0:	58 f2       	brcs	.-106    	; 0xc78 <CAN_InitModule+0x16>
     ce2:	e8 ed       	ldi	r30, 0xD8	; 216
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 83       	st	Z, r24
     cea:	e2 ee       	ldi	r30, 0xE2	; 226
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 83       	st	Z, r24
     cf2:	e3 ee       	ldi	r30, 0xE3	; 227
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	80 83       	st	Z, r24
     cfa:	e4 ee       	ldi	r30, 0xE4	; 228
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	8e e5       	ldi	r24, 0x5E	; 94
     d00:	80 83       	st	Z, r24
     d02:	e5 ee       	ldi	r30, 0xE5	; 229
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	10 82       	st	Z, r1
     d08:	eb ed       	ldi	r30, 0xDB	; 219
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 eb       	ldi	r24, 0xB0	; 176
     d0e:	80 83       	st	Z, r24
     d10:	ef ed       	ldi	r30, 0xDF	; 223
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	8f e7       	ldi	r24, 0x7F	; 127
     d16:	80 83       	st	Z, r24
     d18:	ee ed       	ldi	r30, 0xDE	; 222
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	80 83       	st	Z, r24
     d20:	78 94       	sei
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <CAN_InitRxMob>:
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <CAN_InitRxMob+0x6>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <CAN_InitRxMob+0x8>
     d34:	0f 92       	push	r0
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
     d3e:	ed ee       	ldi	r30, 0xED	; 237
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	e9 ed       	ldi	r30, 0xD9	; 217
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	82 95       	swap	r24
     d4e:	8f 70       	andi	r24, 0x0F	; 15
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	81 70       	andi	r24, 0x01	; 1
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	88 23       	and	r24, r24
     d5a:	a9 f7       	brne	.-22     	; 0xd46 <CAN_InitRxMob+0x1a>
     d5c:	e9 ed       	ldi	r30, 0xD9	; 217
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	86 95       	lsr	r24
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	81 70       	andi	r24, 0x01	; 1
     d6e:	90 70       	andi	r25, 0x00	; 0
     d70:	88 23       	and	r24, r24
     d72:	49 f7       	brne	.-46     	; 0xd46 <CAN_InitRxMob+0x1a>
     d74:	1a 82       	std	Y+2, r1	; 0x02
     d76:	3f c0       	rjmp	.+126    	; 0xdf6 <CAN_InitRxMob+0xca>
     d78:	ed ee       	ldi	r30, 0xED	; 237
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	82 95       	swap	r24
     d80:	80 7f       	andi	r24, 0xF0	; 240
     d82:	80 83       	st	Z, r24
     d84:	ef ee       	ldi	r30, 0xEF	; 239
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	82 95       	swap	r24
     d8c:	86 95       	lsr	r24
     d8e:	86 95       	lsr	r24
     d90:	83 70       	andi	r24, 0x03	; 3
     d92:	88 23       	and	r24, r24
     d94:	69 f5       	brne	.+90     	; 0xdf0 <CAN_InitRxMob+0xc4>
     d96:	ef ee       	ldi	r30, 0xEF	; 239
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	80 83       	st	Z, r24
     d9e:	e3 ef       	ldi	r30, 0xF3	; 243
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	90 70       	andi	r25, 0x00	; 0
     da8:	96 95       	lsr	r25
     daa:	87 95       	ror	r24
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	80 83       	st	Z, r24
     db6:	e2 ef       	ldi	r30, 0xF2	; 242
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	82 95       	swap	r24
     dbe:	88 0f       	add	r24, r24
     dc0:	80 7e       	andi	r24, 0xE0	; 224
     dc2:	80 83       	st	Z, r24
     dc4:	e6 ef       	ldi	r30, 0xF6	; 246
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 ee       	ldi	r24, 0xE0	; 224
     dca:	80 83       	st	Z, r24
     dcc:	e7 ef       	ldi	r30, 0xF7	; 247
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	80 83       	st	Z, r24
     dd4:	af ee       	ldi	r26, 0xEF	; 239
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ef ee       	ldi	r30, 0xEF	; 239
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	8c 93       	st	X, r24
     de2:	ed ee       	ldi	r30, 0xED	; 237
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 83       	st	Z, r24
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <CAN_InitRxMob+0xdc>
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	8f 30       	cpi	r24, 0x0F	; 15
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <CAN_InitRxMob+0xd2>
     dfc:	bd cf       	rjmp	.-134    	; 0xd78 <CAN_InitRxMob+0x4c>
     dfe:	ed ee       	ldi	r30, 0xED	; 237
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	80 83       	st	Z, r24
     e06:	1d 82       	std	Y+5, r1	; 0x05
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <CAN_Init>:
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <CAN_Init+0xa>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	8a 83       	std	Y+2, r24	; 0x02
     e2a:	1b df       	rcall	.-458    	; 0xc62 <CAN_InitModule>
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	36 c0       	rjmp	.+108    	; 0xe9c <CAN_Init+0x82>
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	79 df       	rcall	.-270    	; 0xd2c <CAN_InitRxMob>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	8c 01       	movw	r16, r24
     e46:	03 5e       	subi	r16, 0xE3	; 227
     e48:	1e 4f       	sbci	r17, 0xFE	; 254
     e4a:	85 e0       	ldi	r24, 0x05	; 5
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <calloc>
     e56:	f8 01       	movw	r30, r16
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	48 2f       	mov	r20, r24
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	eb 5b       	subi	r30, 0xBB	; 187
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	10 82       	st	Z, r1
     e76:	fc 01       	movw	r30, r24
     e78:	eb 5b       	subi	r30, 0xBB	; 187
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	80 81       	ld	r24, Z
     e7e:	f9 01       	movw	r30, r18
     e80:	e5 5c       	subi	r30, 0xC5	; 197
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	80 83       	st	Z, r24
     e86:	f9 01       	movw	r30, r18
     e88:	e5 5c       	subi	r30, 0xC5	; 197
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	fa 01       	movw	r30, r20
     e90:	ef 5c       	subi	r30, 0xCF	; 207
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 83       	st	Z, r24
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	99 81       	ldd	r25, Y+1	; 0x01
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	98 17       	cp	r25, r24
     ea2:	30 f2       	brcs	.-116    	; 0xe30 <CAN_Init+0x16>
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <CAN_Read>:
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <CAN_Read+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <CAN_Read+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	9b 83       	std	Y+3, r25	; 0x03
     ec0:	8a 83       	std	Y+2, r24	; 0x02
     ec2:	6c 83       	std	Y+4, r22	; 0x04
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	fc 01       	movw	r30, r24
     ece:	eb 5b       	subi	r30, 0xBB	; 187
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	b1 f3       	breq	.-20     	; 0xec4 <CAN_Read+0x12>
     ed8:	19 82       	std	Y+1, r1	; 0x01
     eda:	30 c0       	rjmp	.+96     	; 0xf3c <CAN_Read+0x8a>
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	dc 01       	movw	r26, r24
     ee8:	a2 0f       	add	r26, r18
     eea:	b3 1f       	adc	r27, r19
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	82 1b       	sub	r24, r18
     ef8:	93 0b       	sbc	r25, r19
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	90 95       	com	r25
     f00:	81 95       	neg	r24
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	e3 5e       	subi	r30, 0xE3	; 227
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	40 81       	ld	r20, Z
     f0c:	51 81       	ldd	r21, Z+1	; 0x01
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	fc 01       	movw	r30, r24
     f18:	e5 5c       	subi	r30, 0xC5	; 197
     f1a:	fe 4f       	sbci	r31, 0xFE	; 254
     f1c:	80 81       	ld	r24, Z
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	fa 01       	movw	r30, r20
     f2e:	e8 0f       	add	r30, r24
     f30:	f9 1f       	adc	r31, r25
     f32:	80 81       	ld	r24, Z
     f34:	8c 93       	st	X, r24
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	68 f2       	brcs	.-102    	; 0xedc <CAN_Read+0x2a>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	fc 01       	movw	r30, r24
     f4c:	e5 5c       	subi	r30, 0xC5	; 197
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	80 81       	ld	r24, Z
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 83       	st	Z, r24
     f56:	80 81       	ld	r24, Z
     f58:	85 30       	cpi	r24, 0x05	; 5
     f5a:	41 f4       	brne	.+16     	; 0xf6c <CAN_Read+0xba>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	fc 01       	movw	r30, r24
     f66:	e5 5c       	subi	r30, 0xC5	; 197
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	10 82       	st	Z, r1
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9c 01       	movw	r18, r24
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	30 40       	sbci	r19, 0x00	; 0
     f78:	f9 01       	movw	r30, r18
     f7a:	eb 5b       	subi	r30, 0xBB	; 187
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	80 81       	ld	r24, Z
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	f9 01       	movw	r30, r18
     f84:	eb 5b       	subi	r30, 0xBB	; 187
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 83       	st	Z, r24
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <CAN_Write>:
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	27 97       	sbiw	r28, 0x07	; 7
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	9d 83       	std	Y+5, r25	; 0x05
     fb0:	8c 83       	std	Y+4, r24	; 0x04
     fb2:	6e 83       	std	Y+6, r22	; 0x06
     fb4:	e9 ed       	ldi	r30, 0xD9	; 217
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	82 95       	swap	r24
     fbc:	8f 70       	andi	r24, 0x0F	; 15
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	88 23       	and	r24, r24
     fc8:	a9 f7       	brne	.-22     	; 0xfb4 <CAN_Write+0x1a>
     fca:	e9 ed       	ldi	r30, 0xD9	; 217
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	86 95       	lsr	r24
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	88 23       	and	r24, r24
     fe0:	49 f7       	brne	.-46     	; 0xfb4 <CAN_Write+0x1a>
     fe2:	ed ee       	ldi	r30, 0xED	; 237
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	12 c0       	rjmp	.+36     	; 0x1012 <CAN_Write+0x78>
     fee:	ed ee       	ldi	r30, 0xED	; 237
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	82 95       	swap	r24
     ff6:	80 7f       	andi	r24, 0xF0	; 240
     ff8:	80 83       	st	Z, r24
     ffa:	ef ee       	ldi	r30, 0xEF	; 239
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 95       	swap	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	83 70       	andi	r24, 0x03	; 3
    1008:	88 23       	and	r24, r24
    100a:	31 f0       	breq	.+12     	; 0x1018 <CAN_Write+0x7e>
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	8f 30       	cpi	r24, 0x0F	; 15
    1016:	58 f3       	brcs	.-42     	; 0xfee <CAN_Write+0x54>
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	8f 30       	cpi	r24, 0x0F	; 15
    101c:	19 f4       	brne	.+6      	; 0x1024 <CAN_Write+0x8a>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	8f 83       	std	Y+7, r24	; 0x07
    1022:	32 c0       	rjmp	.+100    	; 0x1088 <CAN_Write+0xee>
    1024:	e2 ef       	ldi	r30, 0xF2	; 242
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	82 95       	swap	r24
    102c:	88 0f       	add	r24, r24
    102e:	80 7e       	andi	r24, 0xE0	; 224
    1030:	80 83       	st	Z, r24
    1032:	e3 ef       	ldi	r30, 0xF3	; 243
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	86 95       	lsr	r24
    103a:	86 95       	lsr	r24
    103c:	86 95       	lsr	r24
    103e:	80 83       	st	Z, r24
    1040:	ef ee       	ldi	r30, 0xEF	; 239
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	88 e0       	ldi	r24, 0x08	; 8
    1046:	80 83       	st	Z, r24
    1048:	1b 82       	std	Y+3, r1	; 0x03
    104a:	0f c0       	rjmp	.+30     	; 0x106a <CAN_Write+0xd0>
    104c:	aa ef       	ldi	r26, 0xFA	; 250
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	8c 93       	st	X, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	70 f3       	brcs	.-36     	; 0x104c <CAN_Write+0xb2>
    1070:	af ee       	ldi	r26, 0xEF	; 239
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ef ee       	ldi	r30, 0xEF	; 239
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24
    107e:	ed ee       	ldi	r30, 0xED	; 237
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	1f 82       	std	Y+7, r1	; 0x07
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	27 96       	adiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	2c 97       	sbiw	r28, 0x0c	; 12
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	89 87       	std	Y+9, r24	; 0x09
    10b2:	6a 87       	std	Y+10, r22	; 0x0a
    10b4:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10b6:	80 91 08 01 	lds	r24, 0x0108
    10ba:	90 91 09 01 	lds	r25, 0x0109
    10be:	9c 83       	std	Y+4, r25	; 0x04
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	06 97       	sbiw	r24, 0x06	; 6
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	8f 83       	std	Y+7, r24	; 0x07
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    10ce:	ef 81       	ldd	r30, Y+7	; 0x07
    10d0:	f8 85       	ldd	r31, Y+8	; 0x08
    10d2:	90 81       	ld	r25, Z
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	98 17       	cp	r25, r24
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <gpio_register_pin+0x44>
            return 1;
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	2c 87       	std	Y+12, r18	; 0x0c
    10de:	c9 c0       	rjmp	.+402    	; 0x1272 <__stack+0x173>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10e0:	ef 81       	ldd	r30, Y+7	; 0x07
    10e2:	f8 85       	ldd	r31, Y+8	; 0x08
    10e4:	80 85       	ldd	r24, Z+8	; 0x08
    10e6:	91 85       	ldd	r25, Z+9	; 0x09
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	06 97       	sbiw	r24, 0x06	; 6
    10f2:	98 87       	std	Y+8, r25	; 0x08
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	06 96       	adiw	r24, 0x06	; 6
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	86 30       	cpi	r24, 0x06	; 6
    1100:	92 07       	cpc	r25, r18
    1102:	29 f7       	brne	.-54     	; 0x10ce <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	86 95       	lsr	r24
    1108:	86 95       	lsr	r24
    110a:	86 95       	lsr	r24
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	87 70       	andi	r24, 0x07	; 7
    1114:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1116:	8a 85       	ldd	r24, Y+10	; 0x0a
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f0       	breq	.+2      	; 0x111e <__stack+0x1f>
    111c:	48 c0       	rjmp	.+144    	; 0x11ae <__stack+0xaf>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	4e 96       	adiw	r24, 0x1e	; 30
    1130:	dc 01       	movw	r26, r24
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	c9 01       	movw	r24, r18
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	4e 96       	adiw	r24, 0x1e	; 30
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <__stack+0x5b>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	2a 95       	dec	r18
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <__stack+0x57>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	c9 01       	movw	r24, r18
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	4f 96       	adiw	r24, 0x1f	; 31
    1174:	dc 01       	movw	r26, r24
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	c9 01       	movw	r24, r18
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	4f 96       	adiw	r24, 0x1f	; 31
    1188:	fc 01       	movw	r30, r24
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <__stack+0xa1>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <__stack+0x9d>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
        return 0;
    11aa:	1c 86       	std	Y+12, r1	; 0x0c
    11ac:	62 c0       	rjmp	.+196    	; 0x1272 <__stack+0x173>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    11ae:	8e 81       	ldd	r24, Y+6	; 0x06
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	c9 01       	movw	r24, r18
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	4e 96       	adiw	r24, 0x1e	; 30
    11c0:	dc 01       	movw	r26, r24
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	c9 01       	movw	r24, r18
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	4e 96       	adiw	r24, 0x1e	; 30
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__stack+0xeb>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	2a 95       	dec	r18
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <__stack+0xe7>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    11f4:	8e 81       	ldd	r24, Y+6	; 0x06
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	c9 01       	movw	r24, r18
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	82 0f       	add	r24, r18
    1202:	93 1f       	adc	r25, r19
    1204:	4f 96       	adiw	r24, 0x1f	; 31
    1206:	dc 01       	movw	r26, r24
    1208:	8e 81       	ldd	r24, Y+6	; 0x06
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	c9 01       	movw	r24, r18
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	82 0f       	add	r24, r18
    1216:	93 1f       	adc	r25, r19
    1218:	4f 96       	adiw	r24, 0x1f	; 31
    121a:	fc 01       	movw	r30, r24
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <__stack+0x131>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <__stack+0x12d>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1238:	8a e0       	ldi	r24, 0x0A	; 10
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <malloc>
    1240:	98 87       	std	Y+8, r25	; 0x08
    1242:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1244:	8f 81       	ldd	r24, Y+7	; 0x07
    1246:	98 85       	ldd	r25, Y+8	; 0x08
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	19 f4       	brne	.+6      	; 0x1252 <__stack+0x153>
        return 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	8c 87       	std	Y+12, r24	; 0x0c
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <__stack+0x173>

    input->pin       = pin;
    1252:	ef 81       	ldd	r30, Y+7	; 0x07
    1254:	f8 85       	ldd	r31, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    125a:	ef 81       	ldd	r30, Y+7	; 0x07
    125c:	f8 85       	ldd	r31, Y+8	; 0x08
    125e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1260:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    1262:	8f 81       	ldd	r24, Y+7	; 0x07
    1264:	98 85       	ldd	r25, Y+8	; 0x08
    1266:	06 96       	adiw	r24, 0x06	; 6
    1268:	26 e0       	ldi	r18, 0x06	; 6
    126a:	31 e0       	ldi	r19, 0x01	; 1
    126c:	b9 01       	movw	r22, r18
    126e:	0b d0       	rcall	.+22     	; 0x1286 <list_add>

    return 0;
    1270:	1c 86       	std	Y+12, r1	; 0x0c
    1272:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1274:	2c 96       	adiw	r28, 0x0c	; 12
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <list_add+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <list_add+0x8>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	7c 83       	std	Y+4, r23	; 0x04
    1298:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	42 81       	ldd	r20, Z+2	; 0x02
    12a0:	53 81       	ldd	r21, Z+3	; 0x03
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	b9 01       	movw	r22, r18
    12ac:	07 d0       	rcall	.+14     	; 0x12bc <__list_add>
}
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <__list_add+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <__list_add+0x8>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <__list_add+0xa>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	7c 83       	std	Y+4, r23	; 0x04
    12d0:	6b 83       	std	Y+3, r22	; 0x03
    12d2:	5e 83       	std	Y+6, r21	; 0x06
    12d4:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    12d6:	ed 81       	ldd	r30, Y+5	; 0x05
    12d8:	fe 81       	ldd	r31, Y+6	; 0x06
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    new->next = next;
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	93 83       	std	Z+3, r25	; 0x03
    12ec:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
    prev->next = new;
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	93 83       	std	Z+3, r25	; 0x03
    1304:	82 83       	std	Z+2, r24	; 0x02
}
    1306:	26 96       	adiw	r28, 0x06	; 6
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <gpio_write_pin+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <gpio_write_pin+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	86 95       	lsr	r24
    132c:	86 95       	lsr	r24
    132e:	86 95       	lsr	r24
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	8a 83       	std	Y+2, r24	; 0x02
	pin = pin % 8;
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	87 70       	andi	r24, 0x07	; 7
    1338:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	c9 01       	movw	r24, r18
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	82 0f       	add	r24, r18
    1348:	93 1f       	adc	r25, r19
    134a:	4f 96       	adiw	r24, 0x1f	; 31
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	a2 81       	ldd	r26, Z+2	; 0x02
    1354:	b3 81       	ldd	r27, Z+3	; 0x03
    1356:	89 83       	std	Y+1, r24	; 0x01
	if(value != 0)
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	88 23       	and	r24, r24
    135c:	19 f1       	breq	.+70     	; 0x13a4 <gpio_write_pin+0x8c>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	c9 01       	movw	r24, r18
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	4f 96       	adiw	r24, 0x1f	; 31
    1370:	fc 01       	movw	r30, r24
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	48 2f       	mov	r20, r24
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <gpio_write_pin+0x72>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <gpio_write_pin+0x6e>
    138e:	84 2b       	or	r24, r20
    1390:	95 2b       	or	r25, r21
    1392:	aa 27       	eor	r26, r26
    1394:	97 fd       	sbrc	r25, 7
    1396:	a0 95       	com	r26
    1398:	ba 2f       	mov	r27, r26
    139a:	80 83       	st	Z, r24
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	a2 83       	std	Z+2, r26	; 0x02
    13a0:	b3 83       	std	Z+3, r27	; 0x03
    13a2:	24 c0       	rjmp	.+72     	; 0x13ec <gpio_write_pin+0xd4>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	c9 01       	movw	r24, r18
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	4f 96       	adiw	r24, 0x1f	; 31
    13b6:	fc 01       	movw	r30, r24
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	48 2f       	mov	r20, r24
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <gpio_write_pin+0xb8>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <gpio_write_pin+0xb4>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	84 23       	and	r24, r20
    13da:	95 23       	and	r25, r21
    13dc:	aa 27       	eor	r26, r26
    13de:	97 fd       	sbrc	r25, 7
    13e0:	a0 95       	com	r26
    13e2:	ba 2f       	mov	r27, r26
    13e4:	80 83       	st	Z, r24
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	a2 83       	std	Z+2, r26	; 0x02
    13ea:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <__gpio_read_pin+0x6>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	86 95       	lsr	r24
    140e:	86 95       	lsr	r24
    1410:	86 95       	lsr	r24
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	87 70       	andi	r24, 0x07	; 7
    141a:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	c9 01       	movw	r24, r18
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	82 0f       	add	r24, r18
    142a:	93 1f       	adc	r25, r19
    142c:	4d 96       	adiw	r24, 0x1d	; 29
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <__gpio_read_pin+0x4c>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <__gpio_read_pin+0x48>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2b 97       	sbiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1472:	80 91 08 01 	lds	r24, 0x0108
    1476:	90 91 09 01 	lds	r25, 0x0109
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	06 97       	sbiw	r24, 0x06	; 6
    1484:	98 87       	std	Y+8, r25	; 0x08
    1486:	8f 83       	std	Y+7, r24	; 0x07
    1488:	55 c0       	rjmp	.+170    	; 0x1534 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    148a:	ef 81       	ldd	r30, Y+7	; 0x07
    148c:	f8 85       	ldd	r31, Y+8	; 0x08
    148e:	90 81       	ld	r25, Z
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	98 17       	cp	r25, r24
    1494:	09 f0       	breq	.+2      	; 0x1498 <gpio_read_pin+0x3c>
    1496:	43 c0       	rjmp	.+134    	; 0x151e <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    1498:	1c 82       	std	Y+4, r1	; 0x04
    149a:	21 c0       	rjmp	.+66     	; 0x14de <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8f 81       	ldd	r24, Y+7	; 0x07
    14a4:	98 85       	ldd	r25, Y+8	; 0x08
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	fc 01       	movw	r30, r24
    14ac:	32 96       	adiw	r30, 0x02	; 2
    14ae:	40 81       	ld	r20, Z
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9c 01       	movw	r18, r24
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	fc 01       	movw	r30, r24
    14c6:	32 96       	adiw	r30, 0x02	; 2
    14c8:	80 81       	ld	r24, Z
    14ca:	48 17       	cp	r20, r24
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <gpio_read_pin+0x7c>
                    return input->previous_state;
    14ce:	ef 81       	ldd	r30, Y+7	; 0x07
    14d0:	f8 85       	ldd	r31, Y+8	; 0x08
    14d2:	25 81       	ldd	r18, Z+5	; 0x05
    14d4:	2b 87       	std	Y+11, r18	; 0x0b
    14d6:	38 c0       	rjmp	.+112    	; 0x1548 <gpio_read_pin+0xec>
                i++;
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	e0 f2       	brcs	.-72     	; 0x149c <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    14e4:	ef 81       	ldd	r30, Y+7	; 0x07
    14e6:	f8 85       	ldd	r31, Y+8	; 0x08
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 27       	eor	r24, r25
    14ee:	88 23       	and	r24, r24
    14f0:	29 f0       	breq	.+10     	; 0x14fc <gpio_read_pin+0xa0>
    14f2:	ef 81       	ldd	r30, Y+7	; 0x07
    14f4:	f8 85       	ldd	r31, Y+8	; 0x08
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	8a 87       	std	Y+10, r24	; 0x0a
    14fa:	08 c0       	rjmp	.+16     	; 0x150c <gpio_read_pin+0xb0>
    14fc:	ef 81       	ldd	r30, Y+7	; 0x07
    14fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	1a 86       	std	Y+10, r1	; 0x0a
    1504:	88 23       	and	r24, r24
    1506:	11 f4       	brne	.+4      	; 0x150c <gpio_read_pin+0xb0>
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	2a 87       	std	Y+10, r18	; 0x0a
    150c:	8a 85       	ldd	r24, Y+10	; 0x0a
    150e:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1510:	ef 81       	ldd	r30, Y+7	; 0x07
    1512:	f8 85       	ldd	r31, Y+8	; 0x08
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	2b 87       	std	Y+11, r18	; 0x0b
    151c:	15 c0       	rjmp	.+42     	; 0x1548 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    151e:	ef 81       	ldd	r30, Y+7	; 0x07
    1520:	f8 85       	ldd	r31, Y+8	; 0x08
    1522:	80 85       	ldd	r24, Z+8	; 0x08
    1524:	91 85       	ldd	r25, Z+9	; 0x09
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	06 97       	sbiw	r24, 0x06	; 6
    1530:	98 87       	std	Y+8, r25	; 0x08
    1532:	8f 83       	std	Y+7, r24	; 0x07
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	06 96       	adiw	r24, 0x06	; 6
    153a:	21 e0       	ldi	r18, 0x01	; 1
    153c:	86 30       	cpi	r24, 0x06	; 6
    153e:	92 07       	cpc	r25, r18
    1540:	09 f0       	breq	.+2      	; 0x1544 <gpio_read_pin+0xe8>
    1542:	a3 cf       	rjmp	.-186    	; 0x148a <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	8b 87       	std	Y+11, r24	; 0x0b
    1548:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    154a:	2b 96       	adiw	r28, 0x0b	; 11
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <gpio_debouncer+0xa>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <gpio_debouncer+0xc>
    1568:	00 d0       	rcall	.+0      	; 0x156a <gpio_debouncer+0xe>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    156e:	80 91 08 01 	lds	r24, 0x0108
    1572:	90 91 09 01 	lds	r25, 0x0109
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	06 97       	sbiw	r24, 0x06	; 6
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1586:	00 91 4f 01 	lds	r16, 0x014F
    158a:	10 91 50 01 	lds	r17, 0x0150
    158e:	ed 81       	ldd	r30, Y+5	; 0x05
    1590:	fe 81       	ldd	r31, Y+6	; 0x06
    1592:	80 81       	ld	r24, Z
    1594:	33 df       	rcall	.-410    	; 0x13fc <__gpio_read_pin>
    1596:	28 2f       	mov	r18, r24
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	80 0f       	add	r24, r16
    159e:	91 1f       	adc	r25, r17
    15a0:	fc 01       	movw	r30, r24
    15a2:	32 96       	adiw	r30, 0x02	; 2
    15a4:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15a6:	ed 81       	ldd	r30, Y+5	; 0x05
    15a8:	fe 81       	ldd	r31, Y+6	; 0x06
    15aa:	80 85       	ldd	r24, Z+8	; 0x08
    15ac:	91 85       	ldd	r25, Z+9	; 0x09
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	06 97       	sbiw	r24, 0x06	; 6
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	06 96       	adiw	r24, 0x06	; 6
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	86 30       	cpi	r24, 0x06	; 6
    15c6:	92 07       	cpc	r25, r18
    15c8:	f1 f6       	brne	.-68     	; 0x1586 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    15ca:	80 91 4f 01 	lds	r24, 0x014F
    15ce:	90 91 50 01 	lds	r25, 0x0150
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	90 93 50 01 	sts	0x0150, r25
    15d8:	80 93 4f 01 	sts	0x014F, r24
    15dc:	80 91 4f 01 	lds	r24, 0x014F
    15e0:	90 91 50 01 	lds	r25, 0x0150
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <gpio_debouncer+0x96>
        count = 0;
    15ea:	10 92 50 01 	sts	0x0150, r1
    15ee:	10 92 4f 01 	sts	0x014F, r1
	
}
    15f2:	26 96       	adiw	r28, 0x06	; 6
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <greenside>:
{
	{{85,500}, 110, FORWARD, NULL}
};

void greenside(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	2b 97       	sbiw	r28, 0x0b	; 11
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    161c:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
    161e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 85;
    1624:	85 e5       	ldi	r24, 0x55	; 85
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 670;
    162c:	8e e9       	ldi	r24, 0x9E	; 158
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	98 87       	std	Y+8, r25	; 0x08
    1632:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
    1634:	86 ea       	ldi	r24, 0xA6	; 166
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	9a 87       	std	Y+10, r25	; 0x0a
    163a:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
    163c:	ce 01       	movw	r24, r28
    163e:	05 96       	adiw	r24, 0x05	; 5
    1640:	53 d3       	rcall	.+1702   	; 0x1ce8 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	d1 f7       	brne	.-12     	; 0x1642 <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	8c 83       	std	Y+4, r24	; 0x04
    1652:	5c c0       	rjmp	.+184    	; 0x170c <greenside+0x104>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	48 2f       	mov	r20, r24
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	ca 01       	movw	r24, r20
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	9c 01       	movw	r18, r24
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	82 0f       	add	r24, r18
    166c:	93 1f       	adc	r25, r19
    166e:	84 0f       	add	r24, r20
    1670:	95 1f       	adc	r25, r21
    1672:	8f 5e       	subi	r24, 0xEF	; 239
    1674:	9e 4f       	sbci	r25, 0xFE	; 254
    1676:	bc 01       	movw	r22, r24
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	48 2f       	mov	r20, r24
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	ca 01       	movw	r24, r20
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	9c 01       	movw	r18, r24
    1686:	22 0f       	add	r18, r18
    1688:	33 1f       	adc	r19, r19
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	82 0f       	add	r24, r18
    1690:	93 1f       	adc	r25, r19
    1692:	84 0f       	add	r24, r20
    1694:	95 1f       	adc	r25, r21
    1696:	fc 01       	movw	r30, r24
    1698:	e8 5e       	subi	r30, 0xE8	; 232
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	a0 81       	ld	r26, Z
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	48 2f       	mov	r20, r24
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	ca 01       	movw	r24, r20
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	9c 01       	movw	r18, r24
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	84 0f       	add	r24, r20
    16ba:	95 1f       	adc	r25, r21
    16bc:	fc 01       	movw	r30, r24
    16be:	e7 5e       	subi	r30, 0xE7	; 231
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	b0 81       	ld	r27, Z
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	48 2f       	mov	r20, r24
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	ca 01       	movw	r24, r20
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	9c 01       	movw	r18, r24
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	22 0f       	add	r18, r18
    16d8:	33 1f       	adc	r19, r19
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	84 0f       	add	r24, r20
    16e0:	95 1f       	adc	r25, r21
    16e2:	fc 01       	movw	r30, r24
    16e4:	e6 5e       	subi	r30, 0xE6	; 230
    16e6:	fe 4f       	sbci	r31, 0xFE	; 254
    16e8:	20 81       	ld	r18, Z
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	cb 01       	movw	r24, r22
    16ee:	6a 2f       	mov	r22, r26
    16f0:	4b 2f       	mov	r20, r27
    16f2:	46 d2       	rcall	.+1164   	; 0x1b80 <odometry_move_to_position>
    16f4:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <greenside+0xf6>
    16fc:	a2 cf       	rjmp	.-188    	; 0x1642 <greenside+0x3a>
					{
						break;
					}
					if(current_position == 0)
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	88 23       	and	r24, r24
    1702:	09 f4       	brne	.+2      	; 0x1706 <greenside+0xfe>
    1704:	ff cf       	rjmp	.-2      	; 0x1704 <greenside+0xfc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	8c 83       	std	Y+4, r24	; 0x04
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	88 23       	and	r24, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <greenside+0x10c>
    1712:	a0 cf       	rjmp	.-192    	; 0x1654 <greenside+0x4c>
    1714:	96 cf       	rjmp	.-212    	; 0x1642 <greenside+0x3a>

00001716 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	67 97       	sbiw	r28, 0x17	; 23
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    172c:	90 91 51 01 	lds	r25, 0x0151
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	89 17       	cp	r24, r25
    1734:	09 f4       	brne	.+2      	; 0x1738 <odometry_set_speed+0x22>
    1736:	81 c0       	rjmp	.+258    	; 0x183a <odometry_set_speed+0x124>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1738:	86 e5       	ldi	r24, 0x56	; 86
    173a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	88 8b       	std	Y+16, r24	; 0x10
    1740:	72 c0       	rjmp	.+228    	; 0x1826 <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a8 e4       	ldi	r26, 0x48	; 72
    1748:	b2 e4       	ldi	r27, 0x42	; 66
    174a:	8b 87       	std	Y+11, r24	; 0x0b
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	ad 87       	std	Y+13, r26	; 0x0d
    1750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	6b 85       	ldd	r22, Y+11	; 0x0b
    1754:	7c 85       	ldd	r23, Y+12	; 0x0c
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e4       	ldi	r19, 0x40	; 64
    175e:	4c e1       	ldi	r20, 0x1C	; 28
    1760:	55 e4       	ldi	r21, 0x45	; 69
    1762:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	98 87       	std	Y+8, r25	; 0x08
    176e:	a9 87       	std	Y+9, r26	; 0x09
    1770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1772:	6f 81       	ldd	r22, Y+7	; 0x07
    1774:	78 85       	ldd	r23, Y+8	; 0x08
    1776:	89 85       	ldd	r24, Y+9	; 0x09
    1778:	9a 85       	ldd	r25, Y+10	; 0x0a
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
    1786:	88 23       	and	r24, r24
    1788:	2c f4       	brge	.+10     	; 0x1794 <odometry_set_speed+0x7e>
		__ticks = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	3f c0       	rjmp	.+126    	; 0x1812 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f5       	brge	.+82     	; 0x17fe <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <odometry_set_speed+0xde>
    17d6:	8a ef       	ldi	r24, 0xFA	; 250
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <odometry_set_speed+0xcc>
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	69 f7       	brne	.-38     	; 0x17d6 <odometry_set_speed+0xc0>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <odometry_set_speed+0x108>
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	ce 01       	movw	r24, r28
    1828:	0f 96       	adiw	r24, 0x0f	; 15
    182a:	63 ec       	ldi	r22, 0xC3	; 195
    182c:	b6 db       	rcall	.-2196   	; 0xf9a <CAN_Write>
    182e:	88 23       	and	r24, r24
    1830:	09 f0       	breq	.+2      	; 0x1834 <odometry_set_speed+0x11e>
    1832:	87 cf       	rjmp	.-242    	; 0x1742 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1834:	8f 89       	ldd	r24, Y+23	; 0x17
    1836:	80 93 51 01 	sts	0x0151, r24
}
    183a:	67 96       	adiw	r28, 0x17	; 23
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <odometry_query_position>:

static void odometry_query_position(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	66 97       	sbiw	r28, 0x16	; 22
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1860:	80 e5       	ldi	r24, 0x50	; 80
    1862:	8f 87       	std	Y+15, r24	; 0x0f
    1864:	72 c0       	rjmp	.+228    	; 0x194a <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a8 e4       	ldi	r26, 0x48	; 72
    186c:	b2 e4       	ldi	r27, 0x42	; 66
    186e:	8b 87       	std	Y+11, r24	; 0x0b
    1870:	9c 87       	std	Y+12, r25	; 0x0c
    1872:	ad 87       	std	Y+13, r26	; 0x0d
    1874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	6b 85       	ldd	r22, Y+11	; 0x0b
    1878:	7c 85       	ldd	r23, Y+12	; 0x0c
    187a:	8d 85       	ldd	r24, Y+13	; 0x0d
    187c:	9e 85       	ldd	r25, Y+14	; 0x0e
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e4       	ldi	r19, 0x40	; 64
    1882:	4c e1       	ldi	r20, 0x1C	; 28
    1884:	55 e4       	ldi	r21, 0x45	; 69
    1886:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8f 83       	std	Y+7, r24	; 0x07
    1890:	98 87       	std	Y+8, r25	; 0x08
    1892:	a9 87       	std	Y+9, r26	; 0x09
    1894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <odometry_query_position+0x6c>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9e 83       	std	Y+6, r25	; 0x06
    18b4:	8d 83       	std	Y+5, r24	; 0x05
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    18b8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ba:	78 85       	ldd	r23, Y+8	; 0x08
    18bc:	89 85       	ldd	r24, Y+9	; 0x09
    18be:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <odometry_query_position+0xcc>
    18fa:	8a ef       	ldi	r24, 0xFA	; 250
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	8b 83       	std	Y+3, r24	; 0x03
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <odometry_query_position+0xba>
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	9e 81       	ldd	r25, Y+6	; 0x06
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <odometry_query_position+0xae>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <odometry_query_position+0xf6>
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	ce 01       	movw	r24, r28
    194c:	0f 96       	adiw	r24, 0x0f	; 15
    194e:	63 ec       	ldi	r22, 0xC3	; 195
    1950:	24 db       	rcall	.-2488   	; 0xf9a <CAN_Write>
    1952:	88 23       	and	r24, r24
    1954:	09 f0       	breq	.+2      	; 0x1958 <odometry_query_position+0x10c>
    1956:	87 cf       	rjmp	.-242    	; 0x1866 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1958:	ce 01       	movw	r24, r28
    195a:	0f 96       	adiw	r24, 0x0f	; 15
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	a9 da       	rcall	.-2734   	; 0xeb2 <CAN_Read>

	position.state = buffer[0];
    1960:	8f 85       	ldd	r24, Y+15	; 0x0f
    1962:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1966:	88 89       	ldd	r24, Y+16	; 0x10
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	38 2f       	mov	r19, r24
    196e:	22 27       	eor	r18, r18
    1970:	89 89       	ldd	r24, Y+17	; 0x11
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	82 2b       	or	r24, r18
    1978:	93 2b       	or	r25, r19
    197a:	90 93 0b 01 	sts	0x010B, r25
    197e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1982:	8a 89       	ldd	r24, Y+18	; 0x12
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	38 2f       	mov	r19, r24
    198a:	22 27       	eor	r18, r18
    198c:	8b 89       	ldd	r24, Y+19	; 0x13
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	82 2b       	or	r24, r18
    1994:	93 2b       	or	r25, r19
    1996:	90 93 0d 01 	sts	0x010D, r25
    199a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    199e:	8c 89       	ldd	r24, Y+20	; 0x14
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	38 2f       	mov	r19, r24
    19a6:	22 27       	eor	r18, r18
    19a8:	8d 89       	ldd	r24, Y+21	; 0x15
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	82 2b       	or	r24, r18
    19b0:	93 2b       	or	r25, r19
    19b2:	90 93 0f 01 	sts	0x010F, r25
    19b6:	80 93 0e 01 	sts	0x010E, r24
}
    19ba:	66 96       	adiw	r28, 0x16	; 22
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	27 97       	sbiw	r28, 0x07	; 7
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    19e4:	6d d5       	rcall	.+2778   	; 0x24c0 <system_get_system_time>
    19e6:	aa 27       	eor	r26, r26
    19e8:	97 fd       	sbrc	r25, 7
    19ea:	a0 95       	com	r26
    19ec:	ba 2f       	mov	r27, r26
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	ab 83       	std	Y+3, r26	; 0x03
    19f4:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    19f6:	2a df       	rcall	.-428    	; 0x184c <odometry_query_position>
		if(callback != NULL)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	71 f0       	breq	.+28     	; 0x1a1c <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	ab 81       	ldd	r26, Y+3	; 0x03
    1a06:	bc 81       	ldd	r27, Y+4	; 0x04
    1a08:	ed 81       	ldd	r30, Y+5	; 0x05
    1a0a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	09 95       	icall
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	19 f4       	brne	.+6      	; 0x1a1c <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	8f 83       	std	Y+7, r24	; 0x07
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1a1c:	80 91 10 01 	lds	r24, 0x0110
    1a20:	8d 34       	cpi	r24, 0x4D	; 77
    1a22:	49 f3       	breq	.-46     	; 0x19f6 <odometry_wait_until_done+0x2a>
    1a24:	80 91 10 01 	lds	r24, 0x0110
    1a28:	82 35       	cpi	r24, 0x52	; 82
    1a2a:	29 f3       	breq	.-54     	; 0x19f6 <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    1a2c:	1f 82       	std	Y+7, r1	; 0x07
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1a30:	27 96       	adiw	r28, 0x07	; 7
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	6b 97       	sbiw	r28, 0x1b	; 27
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	98 8f       	std	Y+24, r25	; 0x18
    1a58:	8f 8b       	std	Y+23, r24	; 0x17
    1a5a:	69 8f       	std	Y+25, r22	; 0x19
    1a5c:	5b 8f       	std	Y+27, r21	; 0x1b
    1a5e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1a60:	89 8d       	ldd	r24, Y+25	; 0x19
    1a62:	59 de       	rcall	.-846    	; 0x1716 <odometry_set_speed>
	buffer[0] = 'D';
    1a64:	84 e4       	ldi	r24, 0x44	; 68
    1a66:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	89 2f       	mov	r24, r25
    1a6e:	99 0f       	add	r25, r25
    1a70:	99 0b       	sbc	r25, r25
    1a72:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	89 8b       	std	Y+17, r24	; 0x11
    1a78:	70 c0       	rjmp	.+224    	; 0x1b5a <odometry_move_straight+0x118>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a8 e4       	ldi	r26, 0x48	; 72
    1a80:	b2 e4       	ldi	r27, 0x42	; 66
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	9c 87       	std	Y+12, r25	; 0x0c
    1a86:	ad 87       	std	Y+13, r26	; 0x0d
    1a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e4       	ldi	r19, 0x40	; 64
    1a96:	4c e1       	ldi	r20, 0x1C	; 28
    1a98:	55 e4       	ldi	r21, 0x45	; 69
    1a9a:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
    1aa4:	98 87       	std	Y+8, r25	; 0x08
    1aa6:	a9 87       	std	Y+9, r26	; 0x09
    1aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	c5 d7       	rcall	.+3978   	; 0x2a46 <__cmpsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <odometry_move_straight+0x88>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3e c0       	rjmp	.+124    	; 0x1b46 <odometry_move_straight+0x104>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <odometry_move_straight+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <odometry_move_straight+0xe8>
    1b0c:	8a ef       	ldi	r24, 0xFA	; 250
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <odometry_move_straight+0xd6>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <odometry_move_straight+0xca>
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <odometry_move_straight+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	f5 d7       	rcall	.+4074   	; 0x2b28 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <odometry_move_straight+0x110>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	0f 96       	adiw	r24, 0x0f	; 15
    1b5e:	63 ec       	ldi	r22, 0xC3	; 195
    1b60:	1c da       	rcall	.-3016   	; 0xf9a <CAN_Write>
    1b62:	88 23       	and	r24, r24
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <odometry_move_straight+0x126>
    1b66:	89 cf       	rjmp	.-238    	; 0x1a7a <odometry_move_straight+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b68:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b6c:	2f df       	rcall	.-418    	; 0x19cc <odometry_wait_until_done>
}
    1b6e:	6b 96       	adiw	r28, 0x1b	; 27
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	6c 97       	sbiw	r28, 0x1c	; 28
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	98 8f       	std	Y+24, r25	; 0x18
    1b96:	8f 8b       	std	Y+23, r24	; 0x17
    1b98:	69 8f       	std	Y+25, r22	; 0x19
    1b9a:	4a 8f       	std	Y+26, r20	; 0x1a
    1b9c:	3c 8f       	std	Y+28, r19	; 0x1c
    1b9e:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1ba0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ba2:	b9 dd       	rcall	.-1166   	; 0x1716 <odometry_set_speed>

	buffer[0] = 'G';
    1ba4:	87 e4       	ldi	r24, 0x47	; 71
    1ba6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1ba8:	ef 89       	ldd	r30, Y+23	; 0x17
    1baa:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	89 2f       	mov	r24, r25
    1bb2:	99 0f       	add	r25, r25
    1bb4:	99 0b       	sbc	r25, r25
    1bb6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1bb8:	ef 89       	ldd	r30, Y+23	; 0x17
    1bba:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1bc2:	ef 89       	ldd	r30, Y+23	; 0x17
    1bc4:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	89 2f       	mov	r24, r25
    1bcc:	99 0f       	add	r25, r25
    1bce:	99 0b       	sbc	r25, r25
    1bd0:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1bd2:	ef 89       	ldd	r30, Y+23	; 0x17
    1bd4:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    1bdc:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1bde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1be0:	8d 8b       	std	Y+21, r24	; 0x15
    1be2:	6f c0       	rjmp	.+222    	; 0x1cc2 <odometry_move_to_position+0x142>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a8 e4       	ldi	r26, 0x48	; 72
    1bea:	b2 e4       	ldi	r27, 0x42	; 66
    1bec:	8b 87       	std	Y+11, r24	; 0x0b
    1bee:	9c 87       	std	Y+12, r25	; 0x0c
    1bf0:	ad 87       	std	Y+13, r26	; 0x0d
    1bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e4       	ldi	r19, 0x40	; 64
    1c00:	4c e1       	ldi	r20, 0x1C	; 28
    1c02:	55 e4       	ldi	r21, 0x45	; 69
    1c04:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
    1c0e:	98 87       	std	Y+8, r25	; 0x08
    1c10:	a9 87       	std	Y+9, r26	; 0x09
    1c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	10 d7       	rcall	.+3616   	; 0x2a46 <__cmpsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <odometry_move_to_position+0xb4>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	3d c0       	rjmp	.+122    	; 0x1cae <odometry_move_to_position+0x12e>
	else if (__tmp > 65535)
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	44 f5       	brge	.+80     	; 0x1c9c <odometry_move_to_position+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	5f d7       	rcall	.+3774   	; 0x2b28 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <odometry_move_to_position+0x112>
    1c74:	8a ef       	ldi	r24, 0xFA	; 250
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <odometry_move_to_position+0x100>
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <odometry_move_to_position+0xf4>
    1c9a:	13 c0       	rjmp	.+38     	; 0x1cc2 <odometry_move_to_position+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	41 d7       	rcall	.+3714   	; 0x2b28 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <odometry_move_to_position+0x13a>
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	0f 96       	adiw	r24, 0x0f	; 15
    1cc6:	63 ec       	ldi	r22, 0xC3	; 195
    1cc8:	68 d9       	rcall	.-3376   	; 0xf9a <CAN_Write>
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <odometry_move_to_position+0x150>
    1cce:	8a cf       	rjmp	.-236    	; 0x1be4 <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd4:	7b de       	rcall	.-778    	; 0x19cc <odometry_wait_until_done>
}
    1cd6:	6c 96       	adiw	r28, 0x1c	; 28
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	68 97       	sbiw	r28, 0x18	; 24
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	98 8f       	std	Y+24, r25	; 0x18
    1cfe:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1d00:	89 e4       	ldi	r24, 0x49	; 73
    1d02:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1d04:	ef 89       	ldd	r30, Y+23	; 0x17
    1d06:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	89 2f       	mov	r24, r25
    1d0e:	99 0f       	add	r25, r25
    1d10:	99 0b       	sbc	r25, r25
    1d12:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1d14:	ef 89       	ldd	r30, Y+23	; 0x17
    1d16:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1d1e:	ef 89       	ldd	r30, Y+23	; 0x17
    1d20:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	89 2f       	mov	r24, r25
    1d28:	99 0f       	add	r25, r25
    1d2a:	99 0b       	sbc	r25, r25
    1d2c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1d2e:	ef 89       	ldd	r30, Y+23	; 0x17
    1d30:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1d38:	ef 89       	ldd	r30, Y+23	; 0x17
    1d3a:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d3c:	84 81       	ldd	r24, Z+4	; 0x04
    1d3e:	95 81       	ldd	r25, Z+5	; 0x05
    1d40:	89 2f       	mov	r24, r25
    1d42:	99 0f       	add	r25, r25
    1d44:	99 0b       	sbc	r25, r25
    1d46:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1d48:	ef 89       	ldd	r30, Y+23	; 0x17
    1d4a:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d4c:	84 81       	ldd	r24, Z+4	; 0x04
    1d4e:	95 81       	ldd	r25, Z+5	; 0x05
    1d50:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1d52:	ef 89       	ldd	r30, Y+23	; 0x17
    1d54:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	90 93 0b 01 	sts	0x010B, r25
    1d5e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1d62:	ef 89       	ldd	r30, Y+23	; 0x17
    1d64:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	90 93 0d 01 	sts	0x010D, r25
    1d6e:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1d72:	ef 89       	ldd	r30, Y+23	; 0x17
    1d74:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d76:	84 81       	ldd	r24, Z+4	; 0x04
    1d78:	95 81       	ldd	r25, Z+5	; 0x05
    1d7a:	90 93 0f 01 	sts	0x010F, r25
    1d7e:	80 93 0e 01 	sts	0x010E, r24
    1d82:	6c c0       	rjmp	.+216    	; 0x1e5c <odometry_set_position+0x174>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a8 e4       	ldi	r26, 0x48	; 72
    1d8a:	b2 e4       	ldi	r27, 0x42	; 66
    1d8c:	8b 87       	std	Y+11, r24	; 0x0b
    1d8e:	9c 87       	std	Y+12, r25	; 0x0c
    1d90:	ad 87       	std	Y+13, r26	; 0x0d
    1d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e4       	ldi	r19, 0x40	; 64
    1da0:	4c e1       	ldi	r20, 0x1C	; 28
    1da2:	55 e4       	ldi	r21, 0x45	; 69
    1da4:	a3 d7       	rcall	.+3910   	; 0x2cec <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	41 d6       	rcall	.+3202   	; 0x2a46 <__cmpsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <odometry_set_position+0xea>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	3b c0       	rjmp	.+118    	; 0x1e48 <odometry_set_position+0x160>
	else if (__tmp > 65535)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	80 d7       	rcall	.+3840   	; 0x2ce4 <__gesf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	3c f5       	brge	.+78     	; 0x1e36 <odometry_set_position+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	79 d7       	rcall	.+3826   	; 0x2cec <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	92 d6       	rcall	.+3364   	; 0x2b28 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <odometry_set_position+0x144>
    1e0e:	8a ef       	ldi	r24, 0xFA	; 250
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <odometry_set_position+0x132>
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <odometry_set_position+0x126>
    1e34:	13 c0       	rjmp	.+38     	; 0x1e5c <odometry_set_position+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6f 81       	ldd	r22, Y+7	; 0x07
    1e38:	78 85       	ldd	r23, Y+8	; 0x08
    1e3a:	89 85       	ldd	r24, Y+9	; 0x09
    1e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3e:	74 d6       	rcall	.+3304   	; 0x2b28 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <odometry_set_position+0x16c>
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	0f 96       	adiw	r24, 0x0f	; 15
    1e60:	63 ec       	ldi	r22, 0xC3	; 195
    1e62:	9b d8       	rcall	.-3786   	; 0xf9a <CAN_Write>
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <odometry_set_position+0x182>
    1e68:	8d cf       	rjmp	.-230    	; 0x1d84 <odometry_set_position+0x9c>
		_delay_ms(50);
}
    1e6a:	68 96       	adiw	r28, 0x18	; 24
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	6b 97       	sbiw	r28, 0x1b	; 27
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	98 8f       	std	Y+24, r25	; 0x18
    1e92:	8f 8b       	std	Y+23, r24	; 0x17
    1e94:	69 8f       	std	Y+25, r22	; 0x19
    1e96:	5b 8f       	std	Y+27, r21	; 0x1b
    1e98:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1e9c:	3c dc       	rcall	.-1928   	; 0x1716 <odometry_set_speed>

	buffer[0] = 'T';
    1e9e:	84 e5       	ldi	r24, 0x54	; 84
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	89 2f       	mov	r24, r25
    1ea8:	99 27       	eor	r25, r25
    1eaa:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	89 8b       	std	Y+17, r24	; 0x11
    1eb0:	6c c0       	rjmp	.+216    	; 0x1f8a <odometry_rotate_for+0x10e>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a8 e4       	ldi	r26, 0x48	; 72
    1eb8:	b2 e4       	ldi	r27, 0x42	; 66
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	ad 87       	std	Y+13, r26	; 0x0d
    1ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e4       	ldi	r19, 0x40	; 64
    1ece:	4c e1       	ldi	r20, 0x1C	; 28
    1ed0:	55 e4       	ldi	r21, 0x45	; 69
    1ed2:	0c d7       	rcall	.+3608   	; 0x2cec <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8f 83       	std	Y+7, r24	; 0x07
    1eda:	98 87       	std	Y+8, r25	; 0x08
    1edc:	a9 87       	std	Y+9, r26	; 0x09
    1ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	aa d5       	rcall	.+2900   	; 0x2a46 <__cmpsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <odometry_rotate_for+0x84>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	3b c0       	rjmp	.+118    	; 0x1f76 <odometry_rotate_for+0xfa>
	else if (__tmp > 65535)
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	e9 d6       	rcall	.+3538   	; 0x2ce4 <__gesf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	3c f5       	brge	.+78     	; 0x1f64 <odometry_rotate_for+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	e2 d6       	rcall	.+3524   	; 0x2cec <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	fb d5       	rcall	.+3062   	; 0x2b28 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <odometry_rotate_for+0xde>
    1f3c:	8a ef       	ldi	r24, 0xFA	; 250
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <odometry_rotate_for+0xcc>
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <odometry_rotate_for+0xc0>
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <odometry_rotate_for+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	dd d5       	rcall	.+3002   	; 0x2b28 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <odometry_rotate_for+0x106>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	0f 96       	adiw	r24, 0x0f	; 15
    1f8e:	63 ec       	ldi	r22, 0xC3	; 195
    1f90:	04 d8       	rcall	.-4088   	; 0xf9a <CAN_Write>
    1f92:	88 23       	and	r24, r24
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <odometry_rotate_for+0x11c>
    1f96:	8d cf       	rjmp	.-230    	; 0x1eb2 <odometry_rotate_for+0x36>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f9c:	17 dd       	rcall	.-1490   	; 0x19cc <odometry_wait_until_done>

}
    1f9e:	6b 96       	adiw	r28, 0x1b	; 27
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <timer_register_callback+0x6>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	90 93 53 01 	sts	0x0153, r25
    1fc6:	80 93 52 01 	sts	0x0152, r24
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <combination_check>:
static int combination_check()
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <combination_check+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <combination_check+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	if(combination[0] == 1 && combination[1] == 0 && combination[2] == 0)//first combination
    1fe0:	80 91 59 01 	lds	r24, 0x0159
    1fe4:	90 91 5a 01 	lds	r25, 0x015A
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	89 f4       	brne	.+34     	; 0x2010 <combination_check+0x3c>
    1fee:	80 91 5b 01 	lds	r24, 0x015B
    1ff2:	90 91 5c 01 	lds	r25, 0x015C
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	59 f4       	brne	.+22     	; 0x2010 <combination_check+0x3c>
    1ffa:	80 91 5d 01 	lds	r24, 0x015D
    1ffe:	90 91 5e 01 	lds	r25, 0x015E
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	29 f4       	brne	.+10     	; 0x2010 <combination_check+0x3c>
		return 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	78 c0       	rjmp	.+240    	; 0x2100 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 0)//second combination
    2010:	80 91 59 01 	lds	r24, 0x0159
    2014:	90 91 5a 01 	lds	r25, 0x015A
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	91 f4       	brne	.+36     	; 0x2040 <combination_check+0x6c>
    201c:	80 91 5b 01 	lds	r24, 0x015B
    2020:	90 91 5c 01 	lds	r25, 0x015C
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	59 f4       	brne	.+22     	; 0x2040 <combination_check+0x6c>
    202a:	80 91 5d 01 	lds	r24, 0x015D
    202e:	90 91 5e 01 	lds	r25, 0x015E
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	29 f4       	brne	.+10     	; 0x2040 <combination_check+0x6c>
		return 2;
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	60 c0       	rjmp	.+192    	; 0x2100 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 1)//third combination
    2040:	80 91 59 01 	lds	r24, 0x0159
    2044:	90 91 5a 01 	lds	r25, 0x015A
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	91 f4       	brne	.+36     	; 0x2070 <combination_check+0x9c>
    204c:	80 91 5b 01 	lds	r24, 0x015B
    2050:	90 91 5c 01 	lds	r25, 0x015C
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	61 f4       	brne	.+24     	; 0x2070 <combination_check+0x9c>
    2058:	80 91 5d 01 	lds	r24, 0x015D
    205c:	90 91 5e 01 	lds	r25, 0x015E
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	91 05       	cpc	r25, r1
    2064:	29 f4       	brne	.+10     	; 0x2070 <combination_check+0x9c>
		return 3;
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	48 c0       	rjmp	.+144    	; 0x2100 <combination_check+0x12c>
	else if(combination[0] == 1 && combination[1] == 1 && combination[2] == 0)//fourth combination
    2070:	80 91 59 01 	lds	r24, 0x0159
    2074:	90 91 5a 01 	lds	r25, 0x015A
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	91 f4       	brne	.+36     	; 0x20a2 <combination_check+0xce>
    207e:	80 91 5b 01 	lds	r24, 0x015B
    2082:	90 91 5c 01 	lds	r25, 0x015C
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	59 f4       	brne	.+22     	; 0x20a2 <combination_check+0xce>
    208c:	80 91 5d 01 	lds	r24, 0x015D
    2090:	90 91 5e 01 	lds	r25, 0x015E
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	29 f4       	brne	.+10     	; 0x20a2 <combination_check+0xce>
		return 4;
    2098:	84 e0       	ldi	r24, 0x04	; 4
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	2f c0       	rjmp	.+94     	; 0x2100 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 1)//five combination
    20a2:	80 91 59 01 	lds	r24, 0x0159
    20a6:	90 91 5a 01 	lds	r25, 0x015A
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	99 f4       	brne	.+38     	; 0x20d4 <combination_check+0x100>
    20ae:	80 91 5b 01 	lds	r24, 0x015B
    20b2:	90 91 5c 01 	lds	r25, 0x015C
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	91 05       	cpc	r25, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <combination_check+0x100>
    20bc:	80 91 5d 01 	lds	r24, 0x015D
    20c0:	90 91 5e 01 	lds	r25, 0x015E
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	91 05       	cpc	r25, r1
    20c8:	29 f4       	brne	.+10     	; 0x20d4 <combination_check+0x100>
		return 5;
    20ca:	85 e0       	ldi	r24, 0x05	; 5
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 0)//error combination
    20d4:	80 91 59 01 	lds	r24, 0x0159
    20d8:	90 91 5a 01 	lds	r25, 0x015A
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	79 f4       	brne	.+30     	; 0x20fe <combination_check+0x12a>
    20e0:	80 91 5b 01 	lds	r24, 0x015B
    20e4:	90 91 5c 01 	lds	r25, 0x015C
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	49 f4       	brne	.+18     	; 0x20fe <combination_check+0x12a>
    20ec:	80 91 5d 01 	lds	r24, 0x015D
    20f0:	90 91 5e 01 	lds	r25, 0x015E
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	19 f4       	brne	.+6      	; 0x20fe <combination_check+0x12a>
		return 0;
    20f8:	1a 82       	std	Y+2, r1	; 0x02
    20fa:	19 82       	std	Y+1, r1	; 0x01
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <combination_check+0x12c>
    20fe:	04 c0       	rjmp	.+8      	; 0x2108 <combination_check+0x134>
}
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <camera>:
int camera(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	a0 97       	sbiw	r28, 0x20	; 32
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a8 ec       	ldi	r26, 0xC8	; 200
    2134:	b2 e4       	ldi	r27, 0x42	; 66
    2136:	89 8f       	std	Y+25, r24	; 0x19
    2138:	9a 8f       	std	Y+26, r25	; 0x1a
    213a:	ab 8f       	std	Y+27, r26	; 0x1b
    213c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e4       	ldi	r19, 0x40	; 64
    214a:	4c e1       	ldi	r20, 0x1C	; 28
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	ce d5       	rcall	.+2972   	; 0x2cec <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8d 8b       	std	Y+21, r24	; 0x15
    2156:	9e 8b       	std	Y+22, r25	; 0x16
    2158:	af 8b       	std	Y+23, r26	; 0x17
    215a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215c:	6d 89       	ldd	r22, Y+21	; 0x15
    215e:	7e 89       	ldd	r23, Y+22	; 0x16
    2160:	8f 89       	ldd	r24, Y+23	; 0x17
    2162:	98 8d       	ldd	r25, Y+24	; 0x18
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	6c d4       	rcall	.+2264   	; 0x2a46 <__cmpsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <camera+0x62>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 8b       	std	Y+20, r25	; 0x14
    2178:	8b 8b       	std	Y+19, r24	; 0x13
    217a:	3b c0       	rjmp	.+118    	; 0x21f2 <camera+0xd8>
	else if (__tmp > 65535)
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	ab d5       	rcall	.+2902   	; 0x2ce4 <__gesf2>
    218e:	18 16       	cp	r1, r24
    2190:	3c f5       	brge	.+78     	; 0x21e0 <camera+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	69 8d       	ldd	r22, Y+25	; 0x19
    2194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	a4 d5       	rcall	.+2888   	; 0x2cec <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	bd d4       	rcall	.+2426   	; 0x2b28 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <camera+0xbc>
    21b8:	8a ef       	ldi	r24, 0xFA	; 250
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	9a 89       	ldd	r25, Y+18	; 0x12
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <camera+0xaa>
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <camera+0x9e>
    21de:	13 c0       	rjmp	.+38     	; 0x2206 <camera+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	6d 89       	ldd	r22, Y+21	; 0x15
    21e2:	7e 89       	ldd	r23, Y+22	; 0x16
    21e4:	8f 89       	ldd	r24, Y+23	; 0x17
    21e6:	98 8d       	ldd	r25, Y+24	; 0x18
    21e8:	9f d4       	rcall	.+2366   	; 0x2b28 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	98 8b       	std	Y+16, r25	; 0x10
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	98 89       	ldd	r25, Y+16	; 0x10
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <camera+0xe4>
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    2206:	1e 8e       	std	Y+30, r1	; 0x1e
    2208:	1d 8e       	std	Y+29, r1	; 0x1d
    220a:	8c c0       	rjmp	.+280    	; 0x2324 <camera+0x20a>
	{
		combination[0] = gpio_read_pin(9);
    220c:	89 e0       	ldi	r24, 0x09	; 9
    220e:	26 d9       	rcall	.-3508   	; 0x145c <gpio_read_pin>
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	90 93 5a 01 	sts	0x015A, r25
    2218:	80 93 59 01 	sts	0x0159, r24
		combination[1] = gpio_read_pin(10);
    221c:	8a e0       	ldi	r24, 0x0A	; 10
    221e:	1e d9       	rcall	.-3524   	; 0x145c <gpio_read_pin>
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	90 93 5c 01 	sts	0x015C, r25
    2228:	80 93 5b 01 	sts	0x015B, r24
		combination[2] = gpio_read_pin(11);
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	16 d9       	rcall	.-3540   	; 0x145c <gpio_read_pin>
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	90 93 5e 01 	sts	0x015E, r25
    2238:	80 93 5d 01 	sts	0x015D, r24
		
		comb = combination_check();
    223c:	cb de       	rcall	.-618    	; 0x1fd4 <combination_check>
    223e:	98 a3       	std	Y+32, r25	; 0x20
    2240:	8f 8f       	std	Y+31, r24	; 0x1f
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a8 ec       	ldi	r26, 0xC8	; 200
    2248:	b2 e4       	ldi	r27, 0x42	; 66
    224a:	8b 87       	std	Y+11, r24	; 0x0b
    224c:	9c 87       	std	Y+12, r25	; 0x0c
    224e:	ad 87       	std	Y+13, r26	; 0x0d
    2250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e4       	ldi	r19, 0x40	; 64
    225e:	4c e1       	ldi	r20, 0x1C	; 28
    2260:	55 e4       	ldi	r21, 0x45	; 69
    2262:	44 d5       	rcall	.+2696   	; 0x2cec <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	8f 83       	std	Y+7, r24	; 0x07
    226a:	98 87       	std	Y+8, r25	; 0x08
    226c:	a9 87       	std	Y+9, r26	; 0x09
    226e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	e2 d3       	rcall	.+1988   	; 0x2a46 <__cmpsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <camera+0x176>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	3b c0       	rjmp	.+118    	; 0x2306 <camera+0x1ec>
	else if (__tmp > 65535)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	21 d5       	rcall	.+2626   	; 0x2ce4 <__gesf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	3c f5       	brge	.+78     	; 0x22f4 <camera+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	1a d5       	rcall	.+2612   	; 0x2cec <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	33 d4       	rcall	.+2150   	; 0x2b28 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <camera+0x1d0>
    22cc:	8a ef       	ldi	r24, 0xFA	; 250
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <camera+0x1be>
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <camera+0x1b2>
    22f2:	13 c0       	rjmp	.+38     	; 0x231a <camera+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	15 d4       	rcall	.+2090   	; 0x2b28 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <camera+0x1f8>
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
}
int camera(void)
{
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    231a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	9e 8f       	std	Y+30, r25	; 0x1e
    2322:	8d 8f       	std	Y+29, r24	; 0x1d
    2324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2326:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2328:	85 30       	cpi	r24, 0x05	; 5
    232a:	91 05       	cpc	r25, r1
    232c:	0c f4       	brge	.+2      	; 0x2330 <camera+0x216>
    232e:	6e cf       	rjmp	.-292    	; 0x220c <camera+0xf2>
		combination[2] = gpio_read_pin(11);
		
		comb = combination_check();
		_delay_ms(100);	
	}
	return comb;
    2330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2332:	98 a1       	ldd	r25, Y+32	; 0x20
}
    2334:	a0 96       	adiw	r28, 0x20	; 32
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <timer_init>:


void timer_init(unsigned int freq)
{
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <timer_init+0xa>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2358:	e0 e8       	ldi	r30, 0x80	; 128
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    235e:	e1 e8       	ldi	r30, 0x81	; 129
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	89 e0       	ldi	r24, 0x09	; 9
    2364:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2366:	08 e8       	ldi	r16, 0x88	; 136
    2368:	10 e0       	ldi	r17, 0x00	; 0
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	cc 01       	movw	r24, r24
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	03 d4       	rcall	.+2054   	; 0x2b80 <__floatunsisf>
    237a:	9b 01       	movw	r18, r22
    237c:	ac 01       	movw	r20, r24
    237e:	60 e8       	ldi	r22, 0x80	; 128
    2380:	76 e9       	ldi	r23, 0x96	; 150
    2382:	88 e1       	ldi	r24, 0x18	; 24
    2384:	9b e4       	ldi	r25, 0x4B	; 75
    2386:	63 d3       	rcall	.+1734   	; 0x2a4e <__divsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	f2 d2       	rcall	.+1508   	; 0x297e <__addsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	c2 d3       	rcall	.+1924   	; 0x2b28 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	f8 01       	movw	r30, r16
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    23ae:	ef e6       	ldi	r30, 0x6F	; 111
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	80 83       	st	Z, r24

	SREG |= 0x80;
    23b6:	af e5       	ldi	r26, 0x5F	; 95
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	ef e5       	ldi	r30, 0x5F	; 95
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	80 68       	ori	r24, 0x80	; 128
    23c2:	8c 93       	st	X, r24
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    23d2:	1f 92       	push	r1
    23d4:	0f 92       	push	r0
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	0f 92       	push	r0
    23da:	00 90 5b 00 	lds	r0, 0x005B
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	2f 93       	push	r18
    23e4:	3f 93       	push	r19
    23e6:	4f 93       	push	r20
    23e8:	5f 93       	push	r21
    23ea:	6f 93       	push	r22
    23ec:	7f 93       	push	r23
    23ee:	8f 93       	push	r24
    23f0:	9f 93       	push	r25
    23f2:	af 93       	push	r26
    23f4:	bf 93       	push	r27
    23f6:	ef 93       	push	r30
    23f8:	ff 93       	push	r31
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2402:	80 91 52 01 	lds	r24, 0x0152
    2406:	90 91 53 01 	lds	r25, 0x0153
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	29 f0       	breq	.+10     	; 0x2418 <__vector_12+0x46>
        timer_callback();
    240e:	e0 91 52 01 	lds	r30, 0x0152
    2412:	f0 91 53 01 	lds	r31, 0x0153
    2416:	09 95       	icall
	if(sys_time >= 80000)
    2418:	80 91 54 01 	lds	r24, 0x0154
    241c:	90 91 55 01 	lds	r25, 0x0155
    2420:	a0 91 56 01 	lds	r26, 0x0156
    2424:	b0 91 57 01 	lds	r27, 0x0157
    2428:	80 38       	cpi	r24, 0x80	; 128
    242a:	28 e3       	ldi	r18, 0x38	; 56
    242c:	92 07       	cpc	r25, r18
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	a2 07       	cpc	r26, r18
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	b2 07       	cpc	r27, r18
    2436:	10 f0       	brcs	.+4      	; 0x243c <__vector_12+0x6a>
		actuators_umbrella();
    2438:	0e 94 59 03 	call	0x6b2	; 0x6b2 <actuators_umbrella>
	sys_time++;
    243c:	80 91 54 01 	lds	r24, 0x0154
    2440:	90 91 55 01 	lds	r25, 0x0155
    2444:	a0 91 56 01 	lds	r26, 0x0156
    2448:	b0 91 57 01 	lds	r27, 0x0157
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	a1 1d       	adc	r26, r1
    2450:	b1 1d       	adc	r27, r1
    2452:	80 93 54 01 	sts	0x0154, r24
    2456:	90 93 55 01 	sts	0x0155, r25
    245a:	a0 93 56 01 	sts	0x0156, r26
    245e:	b0 93 57 01 	sts	0x0157, r27
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	ff 91       	pop	r31
    2468:	ef 91       	pop	r30
    246a:	bf 91       	pop	r27
    246c:	af 91       	pop	r26
    246e:	9f 91       	pop	r25
    2470:	8f 91       	pop	r24
    2472:	7f 91       	pop	r23
    2474:	6f 91       	pop	r22
    2476:	5f 91       	pop	r21
    2478:	4f 91       	pop	r20
    247a:	3f 91       	pop	r19
    247c:	2f 91       	pop	r18
    247e:	0f 90       	pop	r0
    2480:	00 92 5b 00 	sts	0x005B, r0
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2496:	10 92 54 01 	sts	0x0154, r1
    249a:	10 92 55 01 	sts	0x0155, r1
    249e:	10 92 56 01 	sts	0x0156, r1
    24a2:	10 92 57 01 	sts	0x0157, r1
}
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <system_set_match_started>:
void system_set_match_started(void)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	80 93 58 01 	sts	0x0158, r24
}
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    24c8:	80 91 54 01 	lds	r24, 0x0154
    24cc:	90 91 55 01 	lds	r25, 0x0155
    24d0:	a0 91 56 01 	lds	r26, 0x0156
    24d4:	b0 91 57 01 	lds	r27, 0x0157
}
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <system_init>:
uint8_t return_active_state(void)
{
	return active_state;
}
void system_init(void)
{	
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	6c 97       	sbiw	r28, 0x1c	; 28
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    24f6:	8e ea       	ldi	r24, 0xAE	; 174
    24f8:	9a e0       	ldi	r25, 0x0A	; 10
    24fa:	5a dd       	rcall	.-1356   	; 0x1fb0 <timer_register_callback>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a8 ec       	ldi	r26, 0xC8	; 200
    2502:	b2 e4       	ldi	r27, 0x42	; 66
    2504:	89 8f       	std	Y+25, r24	; 0x19
    2506:	9a 8f       	std	Y+26, r25	; 0x1a
    2508:	ab 8f       	std	Y+27, r26	; 0x1b
    250a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	69 8d       	ldd	r22, Y+25	; 0x19
    250e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e4       	ldi	r19, 0x40	; 64
    2518:	4c e1       	ldi	r20, 0x1C	; 28
    251a:	55 e4       	ldi	r21, 0x45	; 69
    251c:	e7 d3       	rcall	.+1998   	; 0x2cec <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8d 8b       	std	Y+21, r24	; 0x15
    2524:	9e 8b       	std	Y+22, r25	; 0x16
    2526:	af 8b       	std	Y+23, r26	; 0x17
    2528:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	85 d2       	rcall	.+1290   	; 0x2a46 <__cmpsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <system_init+0x68>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	3b c0       	rjmp	.+118    	; 0x25c0 <system_init+0xde>
	else if (__tmp > 65535)
    254a:	6d 89       	ldd	r22, Y+21	; 0x15
    254c:	7e 89       	ldd	r23, Y+22	; 0x16
    254e:	8f 89       	ldd	r24, Y+23	; 0x17
    2550:	98 8d       	ldd	r25, Y+24	; 0x18
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	c4 d3       	rcall	.+1928   	; 0x2ce4 <__gesf2>
    255c:	18 16       	cp	r1, r24
    255e:	3c f5       	brge	.+78     	; 0x25ae <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	69 8d       	ldd	r22, Y+25	; 0x19
    2562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	bd d3       	rcall	.+1914   	; 0x2cec <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	d6 d2       	rcall	.+1452   	; 0x2b28 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9c 8b       	std	Y+20, r25	; 0x14
    2582:	8b 8b       	std	Y+19, r24	; 0x13
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <system_init+0xc2>
    2586:	8a ef       	ldi	r24, 0xFA	; 250
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	89 8b       	std	Y+17, r24	; 0x11
    258e:	89 89       	ldd	r24, Y+17	; 0x11
    2590:	9a 89       	ldd	r25, Y+18	; 0x12
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <system_init+0xb0>
    2596:	9a 8b       	std	Y+18, r25	; 0x12
    2598:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9c 8b       	std	Y+20, r25	; 0x14
    25a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8b 89       	ldd	r24, Y+19	; 0x13
    25a6:	9c 89       	ldd	r25, Y+20	; 0x14
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <system_init+0xa4>
    25ac:	13 c0       	rjmp	.+38     	; 0x25d4 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6d 89       	ldd	r22, Y+21	; 0x15
    25b0:	7e 89       	ldd	r23, Y+22	; 0x16
    25b2:	8f 89       	ldd	r24, Y+23	; 0x17
    25b4:	98 8d       	ldd	r25, Y+24	; 0x18
    25b6:	b8 d2       	rcall	.+1392   	; 0x2b28 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9c 8b       	std	Y+20, r25	; 0x14
    25be:	8b 8b       	std	Y+19, r24	; 0x13
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	98 8b       	std	Y+16, r25	; 0x10
    25c6:	8f 87       	std	Y+15, r24	; 0x0f
    25c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ca:	98 89       	ldd	r25, Y+16	; 0x10
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <system_init+0xea>
    25d0:	98 8b       	std	Y+16, r25	; 0x10
    25d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);							//jumper
    25d4:	88 e0       	ldi	r24, 0x08	; 8
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(9,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    25de:	89 e0       	ldi	r24, 0x09	; 9
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(10,GPIO_DIRECTION_INPUT,true);						//camera 1 position
    25e8:	8a e0       	ldi	r24, 0x0A	; 10
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(11,GPIO_DIRECTION_INPUT,true);						//camera 2 position
    25f2:	8b e0       	ldi	r24, 0x0B	; 11
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>

	//testing for leds
	gpio_register_pin(0,GPIO_DIRECTION_OUTPUT,false);
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(1,GPIO_DIRECTION_OUTPUT,false);
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(2,GPIO_DIRECTION_OUTPUT,false);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(3,GPIO_DIRECTION_OUTPUT,false);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	gpio_register_pin(4,GPIO_DIRECTION_OUTPUT,false);
    2624:	84 e0       	ldi	r24, 0x04	; 4
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 4e 08 	call	0x109c	; 0x109c <gpio_register_pin>
	
	DDRG = 0xff;
    262e:	e3 e3       	ldi	r30, 0x33	; 51
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	80 83       	st	Z, r24
	PORTG = 0xff;
    2636:	e4 e3       	ldi	r30, 0x34	; 52
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	80 83       	st	Z, r24
	servo_init(50);
    263e:	82 e3       	ldi	r24, 0x32	; 50
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 ae 01 	call	0x35c	; 0x35c <servo_init>
	timer_init(1000);
    2646:	88 ee       	ldi	r24, 0xE8	; 232
    2648:	93 e0       	ldi	r25, 0x03	; 3
    264a:	7d de       	rcall	.-774    	; 0x2346 <timer_init>
	CAN_Init(1);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <CAN_Init>

	actuators_setup();
    2652:	0e 94 54 04 	call	0x8a8	; 0x8a8 <actuators_setup>
    2656:	6c c0       	rjmp	.+216    	; 0x2730 <system_init+0x24e>
	
	while(gpio_read_pin(8))
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e2       	ldi	r26, 0x20	; 32
    265e:	b1 e4       	ldi	r27, 0x41	; 65
    2660:	8b 87       	std	Y+11, r24	; 0x0b
    2662:	9c 87       	std	Y+12, r25	; 0x0c
    2664:	ad 87       	std	Y+13, r26	; 0x0d
    2666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6b 85       	ldd	r22, Y+11	; 0x0b
    266a:	7c 85       	ldd	r23, Y+12	; 0x0c
    266c:	8d 85       	ldd	r24, Y+13	; 0x0d
    266e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e4       	ldi	r19, 0x40	; 64
    2674:	4c e1       	ldi	r20, 0x1C	; 28
    2676:	55 e4       	ldi	r21, 0x45	; 69
    2678:	39 d3       	rcall	.+1650   	; 0x2cec <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	8f 83       	std	Y+7, r24	; 0x07
    2680:	98 87       	std	Y+8, r25	; 0x08
    2682:	a9 87       	std	Y+9, r26	; 0x09
    2684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	d7 d1       	rcall	.+942    	; 0x2a46 <__cmpsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <system_init+0x1c4>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	3b c0       	rjmp	.+118    	; 0x271c <system_init+0x23a>
	else if (__tmp > 65535)
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	16 d3       	rcall	.+1580   	; 0x2ce4 <__gesf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	3c f5       	brge	.+78     	; 0x270a <system_init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0f d3       	rcall	.+1566   	; 0x2cec <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	28 d2       	rcall	.+1104   	; 0x2b28 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <system_init+0x21e>
    26e2:	8a ef       	ldi	r24, 0xFA	; 250
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <system_init+0x20c>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <system_init+0x200>
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <system_init+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0a d2       	rcall	.+1044   	; 0x2b28 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <system_init+0x246>
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	88 e0       	ldi	r24, 0x08	; 8
    2732:	0e 94 2e 0a 	call	0x145c	; 0x145c <gpio_read_pin>
    2736:	88 23       	and	r24, r24
    2738:	09 f0       	breq	.+2      	; 0x273c <system_init+0x25a>
    273a:	8e cf       	rjmp	.-228    	; 0x2658 <system_init+0x176>
		_delay_ms(10);
	PORTG = 0x00;
    273c:	e4 e3       	ldi	r30, 0x34	; 52
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	10 82       	st	Z, r1
	system_reset_system_time();
    2742:	a5 de       	rcall	.-694    	; 0x248e <system_reset_system_time>
	system_set_match_started();
    2744:	b3 de       	rcall	.-666    	; 0x24ac <system_set_match_started>
    2746:	6c 96       	adiw	r28, 0x1c	; 28
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <__vector_23>:
    2758:	1f 92       	push	r1
    275a:	0f 92       	push	r0
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	0f 92       	push	r0
    2760:	00 90 5b 00 	lds	r0, 0x005B
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	8f 93       	push	r24
    276a:	9f 93       	push	r25
    276c:	af 93       	push	r26
    276e:	bf 93       	push	r27
    2770:	ef 93       	push	r30
    2772:	ff 93       	push	r31
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	80 91 5d 01 	lds	r24, 0x015D
    2780:	88 23       	and	r24, r24
    2782:	d9 f0       	breq	.+54     	; 0x27ba <__vector_23+0x62>
    2784:	80 91 5d 01 	lds	r24, 0x015D
    2788:	81 50       	subi	r24, 0x01	; 1
    278a:	80 93 5d 01 	sts	0x015D, r24
    278e:	a6 ec       	ldi	r26, 0xC6	; 198
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	80 91 5e 01 	lds	r24, 0x015E
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	fc 01       	movw	r30, r24
    279c:	eb 59       	subi	r30, 0x9B	; 155
    279e:	fe 4f       	sbci	r31, 0xFE	; 254
    27a0:	80 81       	ld	r24, Z
    27a2:	8c 93       	st	X, r24
    27a4:	80 91 5e 01 	lds	r24, 0x015E
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	80 93 5e 01 	sts	0x015E, r24
    27ae:	80 91 5e 01 	lds	r24, 0x015E
    27b2:	80 34       	cpi	r24, 0x40	; 64
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__vector_23+0x62>
    27b6:	10 92 5e 01 	sts	0x015E, r1
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	ff 91       	pop	r31
    27c0:	ef 91       	pop	r30
    27c2:	bf 91       	pop	r27
    27c4:	af 91       	pop	r26
    27c6:	9f 91       	pop	r25
    27c8:	8f 91       	pop	r24
    27ca:	0f 90       	pop	r0
    27cc:	00 92 5b 00 	sts	0x005B, r0
    27d0:	0f 90       	pop	r0
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	0f 90       	pop	r0
    27d6:	1f 90       	pop	r1
    27d8:	18 95       	reti

000027da <__vector_21>:
    27da:	1f 92       	push	r1
    27dc:	0f 92       	push	r0
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	0f 92       	push	r0
    27e2:	00 90 5b 00 	lds	r0, 0x005B
    27e6:	0f 92       	push	r0
    27e8:	11 24       	eor	r1, r1
    27ea:	2f 93       	push	r18
    27ec:	8f 93       	push	r24
    27ee:	9f 93       	push	r25
    27f0:	ef 93       	push	r30
    27f2:	ff 93       	push	r31
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	0f 92       	push	r0
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	8c 71       	andi	r24, 0x1C	; 28
    280e:	90 70       	andi	r25, 0x00	; 0
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	d9 f4       	brne	.+54     	; 0x284a <__vector_21+0x70>
    2814:	80 91 5f 01 	lds	r24, 0x015F
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	e6 ec       	ldi	r30, 0xC6	; 198
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	20 81       	ld	r18, Z
    2822:	fc 01       	movw	r30, r24
    2824:	eb 55       	subi	r30, 0x5B	; 91
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	20 83       	st	Z, r18
    282a:	80 91 5f 01 	lds	r24, 0x015F
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	80 93 5f 01 	sts	0x015F, r24
    2834:	80 91 5f 01 	lds	r24, 0x015F
    2838:	80 34       	cpi	r24, 0x40	; 64
    283a:	11 f4       	brne	.+4      	; 0x2840 <__vector_21+0x66>
    283c:	10 92 5f 01 	sts	0x015F, r1
    2840:	80 91 60 01 	lds	r24, 0x0160
    2844:	8f 5f       	subi	r24, 0xFF	; 255
    2846:	80 93 60 01 	sts	0x0160, r24
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	ff 91       	pop	r31
    2852:	ef 91       	pop	r30
    2854:	9f 91       	pop	r25
    2856:	8f 91       	pop	r24
    2858:	2f 91       	pop	r18
    285a:	0f 90       	pop	r0
    285c:	00 92 5b 00 	sts	0x005B, r0
    2860:	0f 90       	pop	r0
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	0f 90       	pop	r0
    2866:	1f 90       	pop	r1
    2868:	18 95       	reti

0000286a <__vector_34>:
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	00 90 5b 00 	lds	r0, 0x005B
    2876:	0f 92       	push	r0
    2878:	11 24       	eor	r1, r1
    287a:	8f 93       	push	r24
    287c:	9f 93       	push	r25
    287e:	af 93       	push	r26
    2880:	bf 93       	push	r27
    2882:	ef 93       	push	r30
    2884:	ff 93       	push	r31
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	80 91 61 01 	lds	r24, 0x0161
    2892:	88 23       	and	r24, r24
    2894:	d9 f0       	breq	.+54     	; 0x28cc <__vector_34+0x62>
    2896:	80 91 61 01 	lds	r24, 0x0161
    289a:	81 50       	subi	r24, 0x01	; 1
    289c:	80 93 61 01 	sts	0x0161, r24
    28a0:	ae ec       	ldi	r26, 0xCE	; 206
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	80 91 62 01 	lds	r24, 0x0162
    28a8:	88 2f       	mov	r24, r24
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	fc 01       	movw	r30, r24
    28ae:	eb 51       	subi	r30, 0x1B	; 27
    28b0:	fe 4f       	sbci	r31, 0xFE	; 254
    28b2:	80 81       	ld	r24, Z
    28b4:	8c 93       	st	X, r24
    28b6:	80 91 62 01 	lds	r24, 0x0162
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	80 93 62 01 	sts	0x0162, r24
    28c0:	80 91 62 01 	lds	r24, 0x0162
    28c4:	80 34       	cpi	r24, 0x40	; 64
    28c6:	11 f4       	brne	.+4      	; 0x28cc <__vector_34+0x62>
    28c8:	10 92 62 01 	sts	0x0162, r1
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	0f 90       	pop	r0
    28de:	00 92 5b 00 	sts	0x005B, r0
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <__vector_32>:
    28ec:	1f 92       	push	r1
    28ee:	0f 92       	push	r0
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	0f 92       	push	r0
    28f4:	00 90 5b 00 	lds	r0, 0x005B
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	ef 93       	push	r30
    2904:	ff 93       	push	r31
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	e8 ec       	ldi	r30, 0xC8	; 200
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	8c 71       	andi	r24, 0x1C	; 28
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	d9 f4       	brne	.+54     	; 0x295c <__vector_32+0x70>
    2926:	80 91 63 01 	lds	r24, 0x0163
    292a:	88 2f       	mov	r24, r24
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	ee ec       	ldi	r30, 0xCE	; 206
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	20 81       	ld	r18, Z
    2934:	fc 01       	movw	r30, r24
    2936:	eb 5d       	subi	r30, 0xDB	; 219
    2938:	fd 4f       	sbci	r31, 0xFD	; 253
    293a:	20 83       	st	Z, r18
    293c:	80 91 63 01 	lds	r24, 0x0163
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	80 93 63 01 	sts	0x0163, r24
    2946:	80 91 63 01 	lds	r24, 0x0163
    294a:	80 34       	cpi	r24, 0x40	; 64
    294c:	11 f4       	brne	.+4      	; 0x2952 <__vector_32+0x66>
    294e:	10 92 63 01 	sts	0x0163, r1
    2952:	80 91 64 01 	lds	r24, 0x0164
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	80 93 64 01 	sts	0x0164, r24
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	ff 91       	pop	r31
    2964:	ef 91       	pop	r30
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	00 92 5b 00 	sts	0x005B, r0
    2972:	0f 90       	pop	r0
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	0f 90       	pop	r0
    2978:	1f 90       	pop	r1
    297a:	18 95       	reti

0000297c <__subsf3>:
    297c:	50 58       	subi	r21, 0x80	; 128

0000297e <__addsf3>:
    297e:	bb 27       	eor	r27, r27
    2980:	aa 27       	eor	r26, r26
    2982:	0e d0       	rcall	.+28     	; 0x29a0 <__addsf3x>
    2984:	75 c1       	rjmp	.+746    	; 0x2c70 <__fp_round>
    2986:	66 d1       	rcall	.+716    	; 0x2c54 <__fp_pscA>
    2988:	30 f0       	brcs	.+12     	; 0x2996 <__addsf3+0x18>
    298a:	6b d1       	rcall	.+726    	; 0x2c62 <__fp_pscB>
    298c:	20 f0       	brcs	.+8      	; 0x2996 <__addsf3+0x18>
    298e:	31 f4       	brne	.+12     	; 0x299c <__addsf3+0x1e>
    2990:	9f 3f       	cpi	r25, 0xFF	; 255
    2992:	11 f4       	brne	.+4      	; 0x2998 <__addsf3+0x1a>
    2994:	1e f4       	brtc	.+6      	; 0x299c <__addsf3+0x1e>
    2996:	5b c1       	rjmp	.+694    	; 0x2c4e <__fp_nan>
    2998:	0e f4       	brtc	.+2      	; 0x299c <__addsf3+0x1e>
    299a:	e0 95       	com	r30
    299c:	e7 fb       	bst	r30, 7
    299e:	51 c1       	rjmp	.+674    	; 0x2c42 <__fp_inf>

000029a0 <__addsf3x>:
    29a0:	e9 2f       	mov	r30, r25
    29a2:	77 d1       	rcall	.+750    	; 0x2c92 <__fp_split3>
    29a4:	80 f3       	brcs	.-32     	; 0x2986 <__addsf3+0x8>
    29a6:	ba 17       	cp	r27, r26
    29a8:	62 07       	cpc	r22, r18
    29aa:	73 07       	cpc	r23, r19
    29ac:	84 07       	cpc	r24, r20
    29ae:	95 07       	cpc	r25, r21
    29b0:	18 f0       	brcs	.+6      	; 0x29b8 <__addsf3x+0x18>
    29b2:	71 f4       	brne	.+28     	; 0x29d0 <__addsf3x+0x30>
    29b4:	9e f5       	brtc	.+102    	; 0x2a1c <__addsf3x+0x7c>
    29b6:	8f c1       	rjmp	.+798    	; 0x2cd6 <__fp_zero>
    29b8:	0e f4       	brtc	.+2      	; 0x29bc <__addsf3x+0x1c>
    29ba:	e0 95       	com	r30
    29bc:	0b 2e       	mov	r0, r27
    29be:	ba 2f       	mov	r27, r26
    29c0:	a0 2d       	mov	r26, r0
    29c2:	0b 01       	movw	r0, r22
    29c4:	b9 01       	movw	r22, r18
    29c6:	90 01       	movw	r18, r0
    29c8:	0c 01       	movw	r0, r24
    29ca:	ca 01       	movw	r24, r20
    29cc:	a0 01       	movw	r20, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	ff 27       	eor	r31, r31
    29d2:	59 1b       	sub	r21, r25
    29d4:	99 f0       	breq	.+38     	; 0x29fc <__addsf3x+0x5c>
    29d6:	59 3f       	cpi	r21, 0xF9	; 249
    29d8:	50 f4       	brcc	.+20     	; 0x29ee <__addsf3x+0x4e>
    29da:	50 3e       	cpi	r21, 0xE0	; 224
    29dc:	68 f1       	brcs	.+90     	; 0x2a38 <__addsf3x+0x98>
    29de:	1a 16       	cp	r1, r26
    29e0:	f0 40       	sbci	r31, 0x00	; 0
    29e2:	a2 2f       	mov	r26, r18
    29e4:	23 2f       	mov	r18, r19
    29e6:	34 2f       	mov	r19, r20
    29e8:	44 27       	eor	r20, r20
    29ea:	58 5f       	subi	r21, 0xF8	; 248
    29ec:	f3 cf       	rjmp	.-26     	; 0x29d4 <__addsf3x+0x34>
    29ee:	46 95       	lsr	r20
    29f0:	37 95       	ror	r19
    29f2:	27 95       	ror	r18
    29f4:	a7 95       	ror	r26
    29f6:	f0 40       	sbci	r31, 0x00	; 0
    29f8:	53 95       	inc	r21
    29fa:	c9 f7       	brne	.-14     	; 0x29ee <__addsf3x+0x4e>
    29fc:	7e f4       	brtc	.+30     	; 0x2a1c <__addsf3x+0x7c>
    29fe:	1f 16       	cp	r1, r31
    2a00:	ba 0b       	sbc	r27, r26
    2a02:	62 0b       	sbc	r22, r18
    2a04:	73 0b       	sbc	r23, r19
    2a06:	84 0b       	sbc	r24, r20
    2a08:	ba f0       	brmi	.+46     	; 0x2a38 <__addsf3x+0x98>
    2a0a:	91 50       	subi	r25, 0x01	; 1
    2a0c:	a1 f0       	breq	.+40     	; 0x2a36 <__addsf3x+0x96>
    2a0e:	ff 0f       	add	r31, r31
    2a10:	bb 1f       	adc	r27, r27
    2a12:	66 1f       	adc	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	88 1f       	adc	r24, r24
    2a18:	c2 f7       	brpl	.-16     	; 0x2a0a <__addsf3x+0x6a>
    2a1a:	0e c0       	rjmp	.+28     	; 0x2a38 <__addsf3x+0x98>
    2a1c:	ba 0f       	add	r27, r26
    2a1e:	62 1f       	adc	r22, r18
    2a20:	73 1f       	adc	r23, r19
    2a22:	84 1f       	adc	r24, r20
    2a24:	48 f4       	brcc	.+18     	; 0x2a38 <__addsf3x+0x98>
    2a26:	87 95       	ror	r24
    2a28:	77 95       	ror	r23
    2a2a:	67 95       	ror	r22
    2a2c:	b7 95       	ror	r27
    2a2e:	f7 95       	ror	r31
    2a30:	9e 3f       	cpi	r25, 0xFE	; 254
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <__addsf3x+0x96>
    2a34:	b3 cf       	rjmp	.-154    	; 0x299c <__addsf3+0x1e>
    2a36:	93 95       	inc	r25
    2a38:	88 0f       	add	r24, r24
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <__addsf3x+0x9e>
    2a3c:	99 27       	eor	r25, r25
    2a3e:	ee 0f       	add	r30, r30
    2a40:	97 95       	ror	r25
    2a42:	87 95       	ror	r24
    2a44:	08 95       	ret

00002a46 <__cmpsf2>:
    2a46:	d9 d0       	rcall	.+434    	; 0x2bfa <__fp_cmp>
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <__cmpsf2+0x6>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	08 95       	ret

00002a4e <__divsf3>:
    2a4e:	0c d0       	rcall	.+24     	; 0x2a68 <__divsf3x>
    2a50:	0f c1       	rjmp	.+542    	; 0x2c70 <__fp_round>
    2a52:	07 d1       	rcall	.+526    	; 0x2c62 <__fp_pscB>
    2a54:	40 f0       	brcs	.+16     	; 0x2a66 <__divsf3+0x18>
    2a56:	fe d0       	rcall	.+508    	; 0x2c54 <__fp_pscA>
    2a58:	30 f0       	brcs	.+12     	; 0x2a66 <__divsf3+0x18>
    2a5a:	21 f4       	brne	.+8      	; 0x2a64 <__divsf3+0x16>
    2a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5e:	19 f0       	breq	.+6      	; 0x2a66 <__divsf3+0x18>
    2a60:	f0 c0       	rjmp	.+480    	; 0x2c42 <__fp_inf>
    2a62:	51 11       	cpse	r21, r1
    2a64:	39 c1       	rjmp	.+626    	; 0x2cd8 <__fp_szero>
    2a66:	f3 c0       	rjmp	.+486    	; 0x2c4e <__fp_nan>

00002a68 <__divsf3x>:
    2a68:	14 d1       	rcall	.+552    	; 0x2c92 <__fp_split3>
    2a6a:	98 f3       	brcs	.-26     	; 0x2a52 <__divsf3+0x4>

00002a6c <__divsf3_pse>:
    2a6c:	99 23       	and	r25, r25
    2a6e:	c9 f3       	breq	.-14     	; 0x2a62 <__divsf3+0x14>
    2a70:	55 23       	and	r21, r21
    2a72:	b1 f3       	breq	.-20     	; 0x2a60 <__divsf3+0x12>
    2a74:	95 1b       	sub	r25, r21
    2a76:	55 0b       	sbc	r21, r21
    2a78:	bb 27       	eor	r27, r27
    2a7a:	aa 27       	eor	r26, r26
    2a7c:	62 17       	cp	r22, r18
    2a7e:	73 07       	cpc	r23, r19
    2a80:	84 07       	cpc	r24, r20
    2a82:	38 f0       	brcs	.+14     	; 0x2a92 <__divsf3_pse+0x26>
    2a84:	9f 5f       	subi	r25, 0xFF	; 255
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	44 1f       	adc	r20, r20
    2a8e:	aa 1f       	adc	r26, r26
    2a90:	a9 f3       	breq	.-22     	; 0x2a7c <__divsf3_pse+0x10>
    2a92:	33 d0       	rcall	.+102    	; 0x2afa <__divsf3_pse+0x8e>
    2a94:	0e 2e       	mov	r0, r30
    2a96:	3a f0       	brmi	.+14     	; 0x2aa6 <__divsf3_pse+0x3a>
    2a98:	e0 e8       	ldi	r30, 0x80	; 128
    2a9a:	30 d0       	rcall	.+96     	; 0x2afc <__divsf3_pse+0x90>
    2a9c:	91 50       	subi	r25, 0x01	; 1
    2a9e:	50 40       	sbci	r21, 0x00	; 0
    2aa0:	e6 95       	lsr	r30
    2aa2:	00 1c       	adc	r0, r0
    2aa4:	ca f7       	brpl	.-14     	; 0x2a98 <__divsf3_pse+0x2c>
    2aa6:	29 d0       	rcall	.+82     	; 0x2afa <__divsf3_pse+0x8e>
    2aa8:	fe 2f       	mov	r31, r30
    2aaa:	27 d0       	rcall	.+78     	; 0x2afa <__divsf3_pse+0x8e>
    2aac:	66 0f       	add	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	26 17       	cp	r18, r22
    2ab6:	37 07       	cpc	r19, r23
    2ab8:	48 07       	cpc	r20, r24
    2aba:	ab 07       	cpc	r26, r27
    2abc:	b0 e8       	ldi	r27, 0x80	; 128
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <__divsf3_pse+0x56>
    2ac0:	bb 0b       	sbc	r27, r27
    2ac2:	80 2d       	mov	r24, r0
    2ac4:	bf 01       	movw	r22, r30
    2ac6:	ff 27       	eor	r31, r31
    2ac8:	93 58       	subi	r25, 0x83	; 131
    2aca:	5f 4f       	sbci	r21, 0xFF	; 255
    2acc:	2a f0       	brmi	.+10     	; 0x2ad8 <__divsf3_pse+0x6c>
    2ace:	9e 3f       	cpi	r25, 0xFE	; 254
    2ad0:	51 05       	cpc	r21, r1
    2ad2:	68 f0       	brcs	.+26     	; 0x2aee <__divsf3_pse+0x82>
    2ad4:	b6 c0       	rjmp	.+364    	; 0x2c42 <__fp_inf>
    2ad6:	00 c1       	rjmp	.+512    	; 0x2cd8 <__fp_szero>
    2ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    2ada:	ec f3       	brlt	.-6      	; 0x2ad6 <__divsf3_pse+0x6a>
    2adc:	98 3e       	cpi	r25, 0xE8	; 232
    2ade:	dc f3       	brlt	.-10     	; 0x2ad6 <__divsf3_pse+0x6a>
    2ae0:	86 95       	lsr	r24
    2ae2:	77 95       	ror	r23
    2ae4:	67 95       	ror	r22
    2ae6:	b7 95       	ror	r27
    2ae8:	f7 95       	ror	r31
    2aea:	9f 5f       	subi	r25, 0xFF	; 255
    2aec:	c9 f7       	brne	.-14     	; 0x2ae0 <__divsf3_pse+0x74>
    2aee:	88 0f       	add	r24, r24
    2af0:	91 1d       	adc	r25, r1
    2af2:	96 95       	lsr	r25
    2af4:	87 95       	ror	r24
    2af6:	97 f9       	bld	r25, 7
    2af8:	08 95       	ret
    2afa:	e1 e0       	ldi	r30, 0x01	; 1
    2afc:	66 0f       	add	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	88 1f       	adc	r24, r24
    2b02:	bb 1f       	adc	r27, r27
    2b04:	62 17       	cp	r22, r18
    2b06:	73 07       	cpc	r23, r19
    2b08:	84 07       	cpc	r24, r20
    2b0a:	ba 07       	cpc	r27, r26
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <__divsf3_pse+0xaa>
    2b0e:	62 1b       	sub	r22, r18
    2b10:	73 0b       	sbc	r23, r19
    2b12:	84 0b       	sbc	r24, r20
    2b14:	ba 0b       	sbc	r27, r26
    2b16:	ee 1f       	adc	r30, r30
    2b18:	88 f7       	brcc	.-30     	; 0x2afc <__divsf3_pse+0x90>
    2b1a:	e0 95       	com	r30
    2b1c:	08 95       	ret

00002b1e <__fixsfsi>:
    2b1e:	04 d0       	rcall	.+8      	; 0x2b28 <__fixunssfsi>
    2b20:	68 94       	set
    2b22:	b1 11       	cpse	r27, r1
    2b24:	d9 c0       	rjmp	.+434    	; 0x2cd8 <__fp_szero>
    2b26:	08 95       	ret

00002b28 <__fixunssfsi>:
    2b28:	bc d0       	rcall	.+376    	; 0x2ca2 <__fp_splitA>
    2b2a:	88 f0       	brcs	.+34     	; 0x2b4e <__fixunssfsi+0x26>
    2b2c:	9f 57       	subi	r25, 0x7F	; 127
    2b2e:	90 f0       	brcs	.+36     	; 0x2b54 <__fixunssfsi+0x2c>
    2b30:	b9 2f       	mov	r27, r25
    2b32:	99 27       	eor	r25, r25
    2b34:	b7 51       	subi	r27, 0x17	; 23
    2b36:	a0 f0       	brcs	.+40     	; 0x2b60 <__fixunssfsi+0x38>
    2b38:	d1 f0       	breq	.+52     	; 0x2b6e <__fixunssfsi+0x46>
    2b3a:	66 0f       	add	r22, r22
    2b3c:	77 1f       	adc	r23, r23
    2b3e:	88 1f       	adc	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	1a f0       	brmi	.+6      	; 0x2b4a <__fixunssfsi+0x22>
    2b44:	ba 95       	dec	r27
    2b46:	c9 f7       	brne	.-14     	; 0x2b3a <__fixunssfsi+0x12>
    2b48:	12 c0       	rjmp	.+36     	; 0x2b6e <__fixunssfsi+0x46>
    2b4a:	b1 30       	cpi	r27, 0x01	; 1
    2b4c:	81 f0       	breq	.+32     	; 0x2b6e <__fixunssfsi+0x46>
    2b4e:	c3 d0       	rcall	.+390    	; 0x2cd6 <__fp_zero>
    2b50:	b1 e0       	ldi	r27, 0x01	; 1
    2b52:	08 95       	ret
    2b54:	c0 c0       	rjmp	.+384    	; 0x2cd6 <__fp_zero>
    2b56:	67 2f       	mov	r22, r23
    2b58:	78 2f       	mov	r23, r24
    2b5a:	88 27       	eor	r24, r24
    2b5c:	b8 5f       	subi	r27, 0xF8	; 248
    2b5e:	39 f0       	breq	.+14     	; 0x2b6e <__fixunssfsi+0x46>
    2b60:	b9 3f       	cpi	r27, 0xF9	; 249
    2b62:	cc f3       	brlt	.-14     	; 0x2b56 <__fixunssfsi+0x2e>
    2b64:	86 95       	lsr	r24
    2b66:	77 95       	ror	r23
    2b68:	67 95       	ror	r22
    2b6a:	b3 95       	inc	r27
    2b6c:	d9 f7       	brne	.-10     	; 0x2b64 <__fixunssfsi+0x3c>
    2b6e:	3e f4       	brtc	.+14     	; 0x2b7e <__fixunssfsi+0x56>
    2b70:	90 95       	com	r25
    2b72:	80 95       	com	r24
    2b74:	70 95       	com	r23
    2b76:	61 95       	neg	r22
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	08 95       	ret

00002b80 <__floatunsisf>:
    2b80:	e8 94       	clt
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <__floatsisf+0x12>

00002b84 <__floatsisf>:
    2b84:	97 fb       	bst	r25, 7
    2b86:	3e f4       	brtc	.+14     	; 0x2b96 <__floatsisf+0x12>
    2b88:	90 95       	com	r25
    2b8a:	80 95       	com	r24
    2b8c:	70 95       	com	r23
    2b8e:	61 95       	neg	r22
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	99 23       	and	r25, r25
    2b98:	a9 f0       	breq	.+42     	; 0x2bc4 <__floatsisf+0x40>
    2b9a:	f9 2f       	mov	r31, r25
    2b9c:	96 e9       	ldi	r25, 0x96	; 150
    2b9e:	bb 27       	eor	r27, r27
    2ba0:	93 95       	inc	r25
    2ba2:	f6 95       	lsr	r31
    2ba4:	87 95       	ror	r24
    2ba6:	77 95       	ror	r23
    2ba8:	67 95       	ror	r22
    2baa:	b7 95       	ror	r27
    2bac:	f1 11       	cpse	r31, r1
    2bae:	f8 cf       	rjmp	.-16     	; 0x2ba0 <__floatsisf+0x1c>
    2bb0:	fa f4       	brpl	.+62     	; 0x2bf0 <__floatsisf+0x6c>
    2bb2:	bb 0f       	add	r27, r27
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__floatsisf+0x36>
    2bb6:	60 ff       	sbrs	r22, 0
    2bb8:	1b c0       	rjmp	.+54     	; 0x2bf0 <__floatsisf+0x6c>
    2bba:	6f 5f       	subi	r22, 0xFF	; 255
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	16 c0       	rjmp	.+44     	; 0x2bf0 <__floatsisf+0x6c>
    2bc4:	88 23       	and	r24, r24
    2bc6:	11 f0       	breq	.+4      	; 0x2bcc <__floatsisf+0x48>
    2bc8:	96 e9       	ldi	r25, 0x96	; 150
    2bca:	11 c0       	rjmp	.+34     	; 0x2bee <__floatsisf+0x6a>
    2bcc:	77 23       	and	r23, r23
    2bce:	21 f0       	breq	.+8      	; 0x2bd8 <__floatsisf+0x54>
    2bd0:	9e e8       	ldi	r25, 0x8E	; 142
    2bd2:	87 2f       	mov	r24, r23
    2bd4:	76 2f       	mov	r23, r22
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <__floatsisf+0x5e>
    2bd8:	66 23       	and	r22, r22
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <__floatsisf+0x74>
    2bdc:	96 e8       	ldi	r25, 0x86	; 134
    2bde:	86 2f       	mov	r24, r22
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	2a f0       	brmi	.+10     	; 0x2bf0 <__floatsisf+0x6c>
    2be6:	9a 95       	dec	r25
    2be8:	66 0f       	add	r22, r22
    2bea:	77 1f       	adc	r23, r23
    2bec:	88 1f       	adc	r24, r24
    2bee:	da f7       	brpl	.-10     	; 0x2be6 <__floatsisf+0x62>
    2bf0:	88 0f       	add	r24, r24
    2bf2:	96 95       	lsr	r25
    2bf4:	87 95       	ror	r24
    2bf6:	97 f9       	bld	r25, 7
    2bf8:	08 95       	ret

00002bfa <__fp_cmp>:
    2bfa:	99 0f       	add	r25, r25
    2bfc:	00 08       	sbc	r0, r0
    2bfe:	55 0f       	add	r21, r21
    2c00:	aa 0b       	sbc	r26, r26
    2c02:	e0 e8       	ldi	r30, 0x80	; 128
    2c04:	fe ef       	ldi	r31, 0xFE	; 254
    2c06:	16 16       	cp	r1, r22
    2c08:	17 06       	cpc	r1, r23
    2c0a:	e8 07       	cpc	r30, r24
    2c0c:	f9 07       	cpc	r31, r25
    2c0e:	c0 f0       	brcs	.+48     	; 0x2c40 <__fp_cmp+0x46>
    2c10:	12 16       	cp	r1, r18
    2c12:	13 06       	cpc	r1, r19
    2c14:	e4 07       	cpc	r30, r20
    2c16:	f5 07       	cpc	r31, r21
    2c18:	98 f0       	brcs	.+38     	; 0x2c40 <__fp_cmp+0x46>
    2c1a:	62 1b       	sub	r22, r18
    2c1c:	73 0b       	sbc	r23, r19
    2c1e:	84 0b       	sbc	r24, r20
    2c20:	95 0b       	sbc	r25, r21
    2c22:	39 f4       	brne	.+14     	; 0x2c32 <__fp_cmp+0x38>
    2c24:	0a 26       	eor	r0, r26
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <__fp_cmp+0x46>
    2c28:	23 2b       	or	r18, r19
    2c2a:	24 2b       	or	r18, r20
    2c2c:	25 2b       	or	r18, r21
    2c2e:	21 f4       	brne	.+8      	; 0x2c38 <__fp_cmp+0x3e>
    2c30:	08 95       	ret
    2c32:	0a 26       	eor	r0, r26
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__fp_cmp+0x3e>
    2c36:	a1 40       	sbci	r26, 0x01	; 1
    2c38:	a6 95       	lsr	r26
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	81 1d       	adc	r24, r1
    2c3e:	81 1d       	adc	r24, r1
    2c40:	08 95       	ret

00002c42 <__fp_inf>:
    2c42:	97 f9       	bld	r25, 7
    2c44:	9f 67       	ori	r25, 0x7F	; 127
    2c46:	80 e8       	ldi	r24, 0x80	; 128
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	08 95       	ret

00002c4e <__fp_nan>:
    2c4e:	9f ef       	ldi	r25, 0xFF	; 255
    2c50:	80 ec       	ldi	r24, 0xC0	; 192
    2c52:	08 95       	ret

00002c54 <__fp_pscA>:
    2c54:	00 24       	eor	r0, r0
    2c56:	0a 94       	dec	r0
    2c58:	16 16       	cp	r1, r22
    2c5a:	17 06       	cpc	r1, r23
    2c5c:	18 06       	cpc	r1, r24
    2c5e:	09 06       	cpc	r0, r25
    2c60:	08 95       	ret

00002c62 <__fp_pscB>:
    2c62:	00 24       	eor	r0, r0
    2c64:	0a 94       	dec	r0
    2c66:	12 16       	cp	r1, r18
    2c68:	13 06       	cpc	r1, r19
    2c6a:	14 06       	cpc	r1, r20
    2c6c:	05 06       	cpc	r0, r21
    2c6e:	08 95       	ret

00002c70 <__fp_round>:
    2c70:	09 2e       	mov	r0, r25
    2c72:	03 94       	inc	r0
    2c74:	00 0c       	add	r0, r0
    2c76:	11 f4       	brne	.+4      	; 0x2c7c <__fp_round+0xc>
    2c78:	88 23       	and	r24, r24
    2c7a:	52 f0       	brmi	.+20     	; 0x2c90 <__fp_round+0x20>
    2c7c:	bb 0f       	add	r27, r27
    2c7e:	40 f4       	brcc	.+16     	; 0x2c90 <__fp_round+0x20>
    2c80:	bf 2b       	or	r27, r31
    2c82:	11 f4       	brne	.+4      	; 0x2c88 <__fp_round+0x18>
    2c84:	60 ff       	sbrs	r22, 0
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <__fp_round+0x20>
    2c88:	6f 5f       	subi	r22, 0xFF	; 255
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c90:	08 95       	ret

00002c92 <__fp_split3>:
    2c92:	57 fd       	sbrc	r21, 7
    2c94:	90 58       	subi	r25, 0x80	; 128
    2c96:	44 0f       	add	r20, r20
    2c98:	55 1f       	adc	r21, r21
    2c9a:	59 f0       	breq	.+22     	; 0x2cb2 <__fp_splitA+0x10>
    2c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c9e:	71 f0       	breq	.+28     	; 0x2cbc <__fp_splitA+0x1a>
    2ca0:	47 95       	ror	r20

00002ca2 <__fp_splitA>:
    2ca2:	88 0f       	add	r24, r24
    2ca4:	97 fb       	bst	r25, 7
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	61 f0       	breq	.+24     	; 0x2cc2 <__fp_splitA+0x20>
    2caa:	9f 3f       	cpi	r25, 0xFF	; 255
    2cac:	79 f0       	breq	.+30     	; 0x2ccc <__fp_splitA+0x2a>
    2cae:	87 95       	ror	r24
    2cb0:	08 95       	ret
    2cb2:	12 16       	cp	r1, r18
    2cb4:	13 06       	cpc	r1, r19
    2cb6:	14 06       	cpc	r1, r20
    2cb8:	55 1f       	adc	r21, r21
    2cba:	f2 cf       	rjmp	.-28     	; 0x2ca0 <__fp_split3+0xe>
    2cbc:	46 95       	lsr	r20
    2cbe:	f1 df       	rcall	.-30     	; 0x2ca2 <__fp_splitA>
    2cc0:	08 c0       	rjmp	.+16     	; 0x2cd2 <__fp_splitA+0x30>
    2cc2:	16 16       	cp	r1, r22
    2cc4:	17 06       	cpc	r1, r23
    2cc6:	18 06       	cpc	r1, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	f1 cf       	rjmp	.-30     	; 0x2cae <__fp_splitA+0xc>
    2ccc:	86 95       	lsr	r24
    2cce:	71 05       	cpc	r23, r1
    2cd0:	61 05       	cpc	r22, r1
    2cd2:	08 94       	sec
    2cd4:	08 95       	ret

00002cd6 <__fp_zero>:
    2cd6:	e8 94       	clt

00002cd8 <__fp_szero>:
    2cd8:	bb 27       	eor	r27, r27
    2cda:	66 27       	eor	r22, r22
    2cdc:	77 27       	eor	r23, r23
    2cde:	cb 01       	movw	r24, r22
    2ce0:	97 f9       	bld	r25, 7
    2ce2:	08 95       	ret

00002ce4 <__gesf2>:
    2ce4:	8a df       	rcall	.-236    	; 0x2bfa <__fp_cmp>
    2ce6:	08 f4       	brcc	.+2      	; 0x2cea <__gesf2+0x6>
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	08 95       	ret

00002cec <__mulsf3>:
    2cec:	0b d0       	rcall	.+22     	; 0x2d04 <__mulsf3x>
    2cee:	c0 cf       	rjmp	.-128    	; 0x2c70 <__fp_round>
    2cf0:	b1 df       	rcall	.-158    	; 0x2c54 <__fp_pscA>
    2cf2:	28 f0       	brcs	.+10     	; 0x2cfe <__mulsf3+0x12>
    2cf4:	b6 df       	rcall	.-148    	; 0x2c62 <__fp_pscB>
    2cf6:	18 f0       	brcs	.+6      	; 0x2cfe <__mulsf3+0x12>
    2cf8:	95 23       	and	r25, r21
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <__mulsf3+0x12>
    2cfc:	a2 cf       	rjmp	.-188    	; 0x2c42 <__fp_inf>
    2cfe:	a7 cf       	rjmp	.-178    	; 0x2c4e <__fp_nan>
    2d00:	11 24       	eor	r1, r1
    2d02:	ea cf       	rjmp	.-44     	; 0x2cd8 <__fp_szero>

00002d04 <__mulsf3x>:
    2d04:	c6 df       	rcall	.-116    	; 0x2c92 <__fp_split3>
    2d06:	a0 f3       	brcs	.-24     	; 0x2cf0 <__mulsf3+0x4>

00002d08 <__mulsf3_pse>:
    2d08:	95 9f       	mul	r25, r21
    2d0a:	d1 f3       	breq	.-12     	; 0x2d00 <__mulsf3+0x14>
    2d0c:	95 0f       	add	r25, r21
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	55 1f       	adc	r21, r21
    2d12:	62 9f       	mul	r22, r18
    2d14:	f0 01       	movw	r30, r0
    2d16:	72 9f       	mul	r23, r18
    2d18:	bb 27       	eor	r27, r27
    2d1a:	f0 0d       	add	r31, r0
    2d1c:	b1 1d       	adc	r27, r1
    2d1e:	63 9f       	mul	r22, r19
    2d20:	aa 27       	eor	r26, r26
    2d22:	f0 0d       	add	r31, r0
    2d24:	b1 1d       	adc	r27, r1
    2d26:	aa 1f       	adc	r26, r26
    2d28:	64 9f       	mul	r22, r20
    2d2a:	66 27       	eor	r22, r22
    2d2c:	b0 0d       	add	r27, r0
    2d2e:	a1 1d       	adc	r26, r1
    2d30:	66 1f       	adc	r22, r22
    2d32:	82 9f       	mul	r24, r18
    2d34:	22 27       	eor	r18, r18
    2d36:	b0 0d       	add	r27, r0
    2d38:	a1 1d       	adc	r26, r1
    2d3a:	62 1f       	adc	r22, r18
    2d3c:	73 9f       	mul	r23, r19
    2d3e:	b0 0d       	add	r27, r0
    2d40:	a1 1d       	adc	r26, r1
    2d42:	62 1f       	adc	r22, r18
    2d44:	83 9f       	mul	r24, r19
    2d46:	a0 0d       	add	r26, r0
    2d48:	61 1d       	adc	r22, r1
    2d4a:	22 1f       	adc	r18, r18
    2d4c:	74 9f       	mul	r23, r20
    2d4e:	33 27       	eor	r19, r19
    2d50:	a0 0d       	add	r26, r0
    2d52:	61 1d       	adc	r22, r1
    2d54:	23 1f       	adc	r18, r19
    2d56:	84 9f       	mul	r24, r20
    2d58:	60 0d       	add	r22, r0
    2d5a:	21 1d       	adc	r18, r1
    2d5c:	82 2f       	mov	r24, r18
    2d5e:	76 2f       	mov	r23, r22
    2d60:	6a 2f       	mov	r22, r26
    2d62:	11 24       	eor	r1, r1
    2d64:	9f 57       	subi	r25, 0x7F	; 127
    2d66:	50 40       	sbci	r21, 0x00	; 0
    2d68:	8a f0       	brmi	.+34     	; 0x2d8c <__mulsf3_pse+0x84>
    2d6a:	e1 f0       	breq	.+56     	; 0x2da4 <__mulsf3_pse+0x9c>
    2d6c:	88 23       	and	r24, r24
    2d6e:	4a f0       	brmi	.+18     	; 0x2d82 <__mulsf3_pse+0x7a>
    2d70:	ee 0f       	add	r30, r30
    2d72:	ff 1f       	adc	r31, r31
    2d74:	bb 1f       	adc	r27, r27
    2d76:	66 1f       	adc	r22, r22
    2d78:	77 1f       	adc	r23, r23
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	91 50       	subi	r25, 0x01	; 1
    2d7e:	50 40       	sbci	r21, 0x00	; 0
    2d80:	a9 f7       	brne	.-22     	; 0x2d6c <__mulsf3_pse+0x64>
    2d82:	9e 3f       	cpi	r25, 0xFE	; 254
    2d84:	51 05       	cpc	r21, r1
    2d86:	70 f0       	brcs	.+28     	; 0x2da4 <__mulsf3_pse+0x9c>
    2d88:	5c cf       	rjmp	.-328    	; 0x2c42 <__fp_inf>
    2d8a:	a6 cf       	rjmp	.-180    	; 0x2cd8 <__fp_szero>
    2d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d8e:	ec f3       	brlt	.-6      	; 0x2d8a <__mulsf3_pse+0x82>
    2d90:	98 3e       	cpi	r25, 0xE8	; 232
    2d92:	dc f3       	brlt	.-10     	; 0x2d8a <__mulsf3_pse+0x82>
    2d94:	86 95       	lsr	r24
    2d96:	77 95       	ror	r23
    2d98:	67 95       	ror	r22
    2d9a:	b7 95       	ror	r27
    2d9c:	f7 95       	ror	r31
    2d9e:	e7 95       	ror	r30
    2da0:	9f 5f       	subi	r25, 0xFF	; 255
    2da2:	c1 f7       	brne	.-16     	; 0x2d94 <__mulsf3_pse+0x8c>
    2da4:	fe 2b       	or	r31, r30
    2da6:	88 0f       	add	r24, r24
    2da8:	91 1d       	adc	r25, r1
    2daa:	96 95       	lsr	r25
    2dac:	87 95       	ror	r24
    2dae:	97 f9       	bld	r25, 7
    2db0:	08 95       	ret

00002db2 <calloc>:
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	68 9f       	mul	r22, r24
    2dbc:	80 01       	movw	r16, r0
    2dbe:	69 9f       	mul	r22, r25
    2dc0:	10 0d       	add	r17, r0
    2dc2:	78 9f       	mul	r23, r24
    2dc4:	10 0d       	add	r17, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	c8 01       	movw	r24, r16
    2dca:	0d d0       	rcall	.+26     	; 0x2de6 <malloc>
    2dcc:	ec 01       	movw	r28, r24
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <calloc+0x28>
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	a8 01       	movw	r20, r16
    2dd8:	0b d1       	rcall	.+534    	; 0x2ff0 <memset>
    2dda:	ce 01       	movw	r24, r28
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	08 95       	ret

00002de6 <malloc>:
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	bc 01       	movw	r22, r24
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	91 05       	cpc	r25, r1
    2df0:	10 f4       	brcc	.+4      	; 0x2df6 <malloc+0x10>
    2df2:	62 e0       	ldi	r22, 0x02	; 2
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	a0 91 6b 02 	lds	r26, 0x026B
    2dfa:	b0 91 6c 02 	lds	r27, 0x026C
    2dfe:	ed 01       	movw	r28, r26
    2e00:	e0 e0       	ldi	r30, 0x00	; 0
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	21 c0       	rjmp	.+66     	; 0x2e4c <malloc+0x66>
    2e0a:	88 81       	ld	r24, Y
    2e0c:	99 81       	ldd	r25, Y+1	; 0x01
    2e0e:	86 17       	cp	r24, r22
    2e10:	97 07       	cpc	r25, r23
    2e12:	69 f4       	brne	.+26     	; 0x2e2e <malloc+0x48>
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	9b 81       	ldd	r25, Y+3	; 0x03
    2e18:	30 97       	sbiw	r30, 0x00	; 0
    2e1a:	19 f0       	breq	.+6      	; 0x2e22 <malloc+0x3c>
    2e1c:	93 83       	std	Z+3, r25	; 0x03
    2e1e:	82 83       	std	Z+2, r24	; 0x02
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <malloc+0x44>
    2e22:	90 93 6c 02 	sts	0x026C, r25
    2e26:	80 93 6b 02 	sts	0x026B, r24
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	34 c0       	rjmp	.+104    	; 0x2e96 <malloc+0xb0>
    2e2e:	68 17       	cp	r22, r24
    2e30:	79 07       	cpc	r23, r25
    2e32:	38 f4       	brcc	.+14     	; 0x2e42 <malloc+0x5c>
    2e34:	41 15       	cp	r20, r1
    2e36:	51 05       	cpc	r21, r1
    2e38:	19 f0       	breq	.+6      	; 0x2e40 <malloc+0x5a>
    2e3a:	84 17       	cp	r24, r20
    2e3c:	95 07       	cpc	r25, r21
    2e3e:	08 f4       	brcc	.+2      	; 0x2e42 <malloc+0x5c>
    2e40:	ac 01       	movw	r20, r24
    2e42:	fe 01       	movw	r30, r28
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	9b 81       	ldd	r25, Y+3	; 0x03
    2e48:	9c 01       	movw	r18, r24
    2e4a:	e9 01       	movw	r28, r18
    2e4c:	20 97       	sbiw	r28, 0x00	; 0
    2e4e:	e9 f6       	brne	.-70     	; 0x2e0a <malloc+0x24>
    2e50:	41 15       	cp	r20, r1
    2e52:	51 05       	cpc	r21, r1
    2e54:	a9 f1       	breq	.+106    	; 0x2ec0 <malloc+0xda>
    2e56:	ca 01       	movw	r24, r20
    2e58:	86 1b       	sub	r24, r22
    2e5a:	97 0b       	sbc	r25, r23
    2e5c:	04 97       	sbiw	r24, 0x04	; 4
    2e5e:	08 f4       	brcc	.+2      	; 0x2e62 <malloc+0x7c>
    2e60:	ba 01       	movw	r22, r20
    2e62:	e0 e0       	ldi	r30, 0x00	; 0
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	2a c0       	rjmp	.+84     	; 0x2ebc <malloc+0xd6>
    2e68:	8d 91       	ld	r24, X+
    2e6a:	9c 91       	ld	r25, X
    2e6c:	11 97       	sbiw	r26, 0x01	; 1
    2e6e:	84 17       	cp	r24, r20
    2e70:	95 07       	cpc	r25, r21
    2e72:	f9 f4       	brne	.+62     	; 0x2eb2 <malloc+0xcc>
    2e74:	64 17       	cp	r22, r20
    2e76:	75 07       	cpc	r23, r21
    2e78:	81 f4       	brne	.+32     	; 0x2e9a <malloc+0xb4>
    2e7a:	12 96       	adiw	r26, 0x02	; 2
    2e7c:	8d 91       	ld	r24, X+
    2e7e:	9c 91       	ld	r25, X
    2e80:	13 97       	sbiw	r26, 0x03	; 3
    2e82:	30 97       	sbiw	r30, 0x00	; 0
    2e84:	19 f0       	breq	.+6      	; 0x2e8c <malloc+0xa6>
    2e86:	93 83       	std	Z+3, r25	; 0x03
    2e88:	82 83       	std	Z+2, r24	; 0x02
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <malloc+0xae>
    2e8c:	90 93 6c 02 	sts	0x026C, r25
    2e90:	80 93 6b 02 	sts	0x026B, r24
    2e94:	fd 01       	movw	r30, r26
    2e96:	32 96       	adiw	r30, 0x02	; 2
    2e98:	4f c0       	rjmp	.+158    	; 0x2f38 <malloc+0x152>
    2e9a:	ca 01       	movw	r24, r20
    2e9c:	86 1b       	sub	r24, r22
    2e9e:	97 0b       	sbc	r25, r23
    2ea0:	fd 01       	movw	r30, r26
    2ea2:	e8 0f       	add	r30, r24
    2ea4:	f9 1f       	adc	r31, r25
    2ea6:	61 93       	st	Z+, r22
    2ea8:	71 93       	st	Z+, r23
    2eaa:	02 97       	sbiw	r24, 0x02	; 2
    2eac:	8d 93       	st	X+, r24
    2eae:	9c 93       	st	X, r25
    2eb0:	43 c0       	rjmp	.+134    	; 0x2f38 <malloc+0x152>
    2eb2:	fd 01       	movw	r30, r26
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	9c 01       	movw	r18, r24
    2eba:	d9 01       	movw	r26, r18
    2ebc:	10 97       	sbiw	r26, 0x00	; 0
    2ebe:	a1 f6       	brne	.-88     	; 0x2e68 <malloc+0x82>
    2ec0:	80 91 69 02 	lds	r24, 0x0269
    2ec4:	90 91 6a 02 	lds	r25, 0x026A
    2ec8:	89 2b       	or	r24, r25
    2eca:	41 f4       	brne	.+16     	; 0x2edc <malloc+0xf6>
    2ecc:	80 91 02 01 	lds	r24, 0x0102
    2ed0:	90 91 03 01 	lds	r25, 0x0103
    2ed4:	90 93 6a 02 	sts	0x026A, r25
    2ed8:	80 93 69 02 	sts	0x0269, r24
    2edc:	40 91 04 01 	lds	r20, 0x0104
    2ee0:	50 91 05 01 	lds	r21, 0x0105
    2ee4:	41 15       	cp	r20, r1
    2ee6:	51 05       	cpc	r21, r1
    2ee8:	41 f4       	brne	.+16     	; 0x2efa <malloc+0x114>
    2eea:	4d b7       	in	r20, 0x3d	; 61
    2eec:	5e b7       	in	r21, 0x3e	; 62
    2eee:	80 91 00 01 	lds	r24, 0x0100
    2ef2:	90 91 01 01 	lds	r25, 0x0101
    2ef6:	48 1b       	sub	r20, r24
    2ef8:	59 0b       	sbc	r21, r25
    2efa:	20 91 69 02 	lds	r18, 0x0269
    2efe:	30 91 6a 02 	lds	r19, 0x026A
    2f02:	24 17       	cp	r18, r20
    2f04:	35 07       	cpc	r19, r21
    2f06:	b0 f4       	brcc	.+44     	; 0x2f34 <malloc+0x14e>
    2f08:	ca 01       	movw	r24, r20
    2f0a:	82 1b       	sub	r24, r18
    2f0c:	93 0b       	sbc	r25, r19
    2f0e:	86 17       	cp	r24, r22
    2f10:	97 07       	cpc	r25, r23
    2f12:	80 f0       	brcs	.+32     	; 0x2f34 <malloc+0x14e>
    2f14:	ab 01       	movw	r20, r22
    2f16:	4e 5f       	subi	r20, 0xFE	; 254
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	84 17       	cp	r24, r20
    2f1c:	95 07       	cpc	r25, r21
    2f1e:	50 f0       	brcs	.+20     	; 0x2f34 <malloc+0x14e>
    2f20:	42 0f       	add	r20, r18
    2f22:	53 1f       	adc	r21, r19
    2f24:	50 93 6a 02 	sts	0x026A, r21
    2f28:	40 93 69 02 	sts	0x0269, r20
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	61 93       	st	Z+, r22
    2f30:	71 93       	st	Z+, r23
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <malloc+0x152>
    2f34:	e0 e0       	ldi	r30, 0x00	; 0
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	cf 01       	movw	r24, r30
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <free>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <free+0xa>
    2f48:	50 c0       	rjmp	.+160    	; 0x2fea <free+0xaa>
    2f4a:	ec 01       	movw	r28, r24
    2f4c:	22 97       	sbiw	r28, 0x02	; 2
    2f4e:	1b 82       	std	Y+3, r1	; 0x03
    2f50:	1a 82       	std	Y+2, r1	; 0x02
    2f52:	a0 91 6b 02 	lds	r26, 0x026B
    2f56:	b0 91 6c 02 	lds	r27, 0x026C
    2f5a:	10 97       	sbiw	r26, 0x00	; 0
    2f5c:	09 f1       	breq	.+66     	; 0x2fa0 <free+0x60>
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	ac 17       	cp	r26, r28
    2f64:	bd 07       	cpc	r27, r29
    2f66:	08 f1       	brcs	.+66     	; 0x2faa <free+0x6a>
    2f68:	bb 83       	std	Y+3, r27	; 0x03
    2f6a:	aa 83       	std	Y+2, r26	; 0x02
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	21 91       	ld	r18, Z+
    2f70:	31 91       	ld	r19, Z+
    2f72:	e2 0f       	add	r30, r18
    2f74:	f3 1f       	adc	r31, r19
    2f76:	ae 17       	cp	r26, r30
    2f78:	bf 07       	cpc	r27, r31
    2f7a:	79 f4       	brne	.+30     	; 0x2f9a <free+0x5a>
    2f7c:	8d 91       	ld	r24, X+
    2f7e:	9c 91       	ld	r25, X
    2f80:	11 97       	sbiw	r26, 0x01	; 1
    2f82:	28 0f       	add	r18, r24
    2f84:	39 1f       	adc	r19, r25
    2f86:	2e 5f       	subi	r18, 0xFE	; 254
    2f88:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8a:	39 83       	std	Y+1, r19	; 0x01
    2f8c:	28 83       	st	Y, r18
    2f8e:	12 96       	adiw	r26, 0x02	; 2
    2f90:	8d 91       	ld	r24, X+
    2f92:	9c 91       	ld	r25, X
    2f94:	13 97       	sbiw	r26, 0x03	; 3
    2f96:	9b 83       	std	Y+3, r25	; 0x03
    2f98:	8a 83       	std	Y+2, r24	; 0x02
    2f9a:	41 15       	cp	r20, r1
    2f9c:	51 05       	cpc	r21, r1
    2f9e:	71 f4       	brne	.+28     	; 0x2fbc <free+0x7c>
    2fa0:	d0 93 6c 02 	sts	0x026C, r29
    2fa4:	c0 93 6b 02 	sts	0x026B, r28
    2fa8:	20 c0       	rjmp	.+64     	; 0x2fea <free+0xaa>
    2faa:	12 96       	adiw	r26, 0x02	; 2
    2fac:	8d 91       	ld	r24, X+
    2fae:	9c 91       	ld	r25, X
    2fb0:	13 97       	sbiw	r26, 0x03	; 3
    2fb2:	ad 01       	movw	r20, r26
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	11 f0       	breq	.+4      	; 0x2fbc <free+0x7c>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	d3 cf       	rjmp	.-90     	; 0x2f62 <free+0x22>
    2fbc:	fa 01       	movw	r30, r20
    2fbe:	d3 83       	std	Z+3, r29	; 0x03
    2fc0:	c2 83       	std	Z+2, r28	; 0x02
    2fc2:	21 91       	ld	r18, Z+
    2fc4:	31 91       	ld	r19, Z+
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	ce 17       	cp	r28, r30
    2fcc:	df 07       	cpc	r29, r31
    2fce:	69 f4       	brne	.+26     	; 0x2fea <free+0xaa>
    2fd0:	88 81       	ld	r24, Y
    2fd2:	99 81       	ldd	r25, Y+1	; 0x01
    2fd4:	28 0f       	add	r18, r24
    2fd6:	39 1f       	adc	r19, r25
    2fd8:	2e 5f       	subi	r18, 0xFE	; 254
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	fa 01       	movw	r30, r20
    2fde:	31 83       	std	Z+1, r19	; 0x01
    2fe0:	20 83       	st	Z, r18
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe6:	93 83       	std	Z+3, r25	; 0x03
    2fe8:	82 83       	std	Z+2, r24	; 0x02
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <memset>:
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <memset+0x6>
    2ff4:	6d 93       	st	X+, r22
    2ff6:	41 50       	subi	r20, 0x01	; 1
    2ff8:	50 40       	sbci	r21, 0x00	; 0
    2ffa:	e0 f7       	brcc	.-8      	; 0x2ff4 <memset+0x4>
    2ffc:	08 95       	ret

00002ffe <_exit>:
    2ffe:	f8 94       	cli

00003000 <__stop_program>:
    3000:	ff cf       	rjmp	.-2      	; 0x3000 <__stop_program>
