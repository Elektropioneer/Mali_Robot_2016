
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000019f6  00001a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800106  00800106  00001a90  2**0
                  ALLOC
  3 .debug_aranges 000002a8  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000590  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c8f  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000988  00000000  00000000  00003f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e4f  00000000  00000000  000048df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  00006730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f2  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000260  00000000  00000000  00007352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       2:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c7       	rjmp	.+3628   	; 0xe5e <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bd c4       	rjmp	.+2426   	; 0x9c4 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ef       	ldi	r30, 0xF6	; 246
      a8:	f9 e1       	ldi	r31, 0x19	; 25
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 34       	cpi	r26, 0x4B	; 75
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "sides.h"
#include "actuators.h"


int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	6c 97       	sbiw	r28, 0x1c	; 28
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	31 d7       	rcall	.+3682   	; 0xf4a <system_init>
	//90
	
	while(1)
	{
		PORTG = 0xff;
      e8:	e4 e3       	ldi	r30, 0x34	; 52
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	8f ef       	ldi	r24, 0xFF	; 255
      ee:	80 83       	st	Z, r24
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	aa e7       	ldi	r26, 0x7A	; 122
      f6:	b4 e4       	ldi	r27, 0x44	; 68
      f8:	89 8f       	std	Y+25, r24	; 0x19
      fa:	9a 8f       	std	Y+26, r25	; 0x1a
      fc:	ab 8f       	std	Y+27, r26	; 0x1b
      fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     100:	69 8d       	ldd	r22, Y+25	; 0x19
     102:	7a 8d       	ldd	r23, Y+26	; 0x1a
     104:	8b 8d       	ldd	r24, Y+27	; 0x1b
     106:	9c 8d       	ldd	r25, Y+28	; 0x1c
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e4       	ldi	r19, 0x40	; 64
     10c:	4c e1       	ldi	r20, 0x1C	; 28
     10e:	55 e4       	ldi	r21, 0x45	; 69
     110:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     114:	dc 01       	movw	r26, r24
     116:	cb 01       	movw	r24, r22
     118:	8d 8b       	std	Y+21, r24	; 0x15
     11a:	9e 8b       	std	Y+22, r25	; 0x16
     11c:	af 8b       	std	Y+23, r26	; 0x17
     11e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     120:	6d 89       	ldd	r22, Y+21	; 0x15
     122:	7e 89       	ldd	r23, Y+22	; 0x16
     124:	8f 89       	ldd	r24, Y+23	; 0x17
     126:	98 8d       	ldd	r25, Y+24	; 0x18
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e8       	ldi	r20, 0x80	; 128
     12e:	5f e3       	ldi	r21, 0x3F	; 63
     130:	0e 94 1d 0a 	call	0x143a	; 0x143a <__cmpsf2>
     134:	88 23       	and	r24, r24
     136:	2c f4       	brge	.+10     	; 0x142 <main+0x70>
		__ticks = 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	9c 8b       	std	Y+20, r25	; 0x14
     13e:	8b 8b       	std	Y+19, r24	; 0x13
     140:	3f c0       	rjmp	.+126    	; 0x1c0 <main+0xee>
	else if (__tmp > 65535)
     142:	6d 89       	ldd	r22, Y+21	; 0x15
     144:	7e 89       	ldd	r23, Y+22	; 0x16
     146:	8f 89       	ldd	r24, Y+23	; 0x17
     148:	98 8d       	ldd	r25, Y+24	; 0x18
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	3f ef       	ldi	r19, 0xFF	; 255
     14e:	4f e7       	ldi	r20, 0x7F	; 127
     150:	57 e4       	ldi	r21, 0x47	; 71
     152:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__gesf2>
     156:	18 16       	cp	r1, r24
     158:	4c f5       	brge	.+82     	; 0x1ac <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15a:	69 8d       	ldd	r22, Y+25	; 0x19
     15c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     15e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     160:	9c 8d       	ldd	r25, Y+28	; 0x1c
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	40 e2       	ldi	r20, 0x20	; 32
     168:	51 e4       	ldi	r21, 0x41	; 65
     16a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     16e:	dc 01       	movw	r26, r24
     170:	cb 01       	movw	r24, r22
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	9c 8b       	std	Y+20, r25	; 0x14
     180:	8b 8b       	std	Y+19, r24	; 0x13
     182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0xd0>
     184:	8a ef       	ldi	r24, 0xFA	; 250
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	9a 8b       	std	Y+18, r25	; 0x12
     18a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18c:	89 89       	ldd	r24, Y+17	; 0x11
     18e:	9a 89       	ldd	r25, Y+18	; 0x12
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <main+0xbe>
     194:	9a 8b       	std	Y+18, r25	; 0x12
     196:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     198:	8b 89       	ldd	r24, Y+19	; 0x13
     19a:	9c 89       	ldd	r25, Y+20	; 0x14
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	9c 8b       	std	Y+20, r25	; 0x14
     1a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	8b 89       	ldd	r24, Y+19	; 0x13
     1a4:	9c 89       	ldd	r25, Y+20	; 0x14
     1a6:	00 97       	sbiw	r24, 0x00	; 0
     1a8:	69 f7       	brne	.-38     	; 0x184 <main+0xb2>
     1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ac:	6d 89       	ldd	r22, Y+21	; 0x15
     1ae:	7e 89       	ldd	r23, Y+22	; 0x16
     1b0:	8f 89       	ldd	r24, Y+23	; 0x17
     1b2:	98 8d       	ldd	r25, Y+24	; 0x18
     1b4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	9c 8b       	std	Y+20, r25	; 0x14
     1be:	8b 8b       	std	Y+19, r24	; 0x13
     1c0:	8b 89       	ldd	r24, Y+19	; 0x13
     1c2:	9c 89       	ldd	r25, Y+20	; 0x14
     1c4:	98 8b       	std	Y+16, r25	; 0x10
     1c6:	8f 87       	std	Y+15, r24	; 0x0f
     1c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     1ca:	98 89       	ldd	r25, Y+16	; 0x10
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0xfa>
     1d0:	98 8b       	std	Y+16, r25	; 0x10
     1d2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		PORTG = 0x00;
     1d4:	e4 e3       	ldi	r30, 0x34	; 52
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	10 82       	st	Z, r1
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	aa e7       	ldi	r26, 0x7A	; 122
     1e0:	b4 e4       	ldi	r27, 0x44	; 68
     1e2:	8b 87       	std	Y+11, r24	; 0x0b
     1e4:	9c 87       	std	Y+12, r25	; 0x0c
     1e6:	ad 87       	std	Y+13, r26	; 0x0d
     1e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1ea:	6b 85       	ldd	r22, Y+11	; 0x0b
     1ec:	7c 85       	ldd	r23, Y+12	; 0x0c
     1ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e4       	ldi	r19, 0x40	; 64
     1f6:	4c e1       	ldi	r20, 0x1C	; 28
     1f8:	55 e4       	ldi	r21, 0x45	; 69
     1fa:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	8f 83       	std	Y+7, r24	; 0x07
     204:	98 87       	std	Y+8, r25	; 0x08
     206:	a9 87       	std	Y+9, r26	; 0x09
     208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     20a:	6f 81       	ldd	r22, Y+7	; 0x07
     20c:	78 85       	ldd	r23, Y+8	; 0x08
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e8       	ldi	r20, 0x80	; 128
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__cmpsf2>
     21e:	88 23       	and	r24, r24
     220:	2c f4       	brge	.+10     	; 0x22c <main+0x15a>
		__ticks = 1;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9e 83       	std	Y+6, r25	; 0x06
     228:	8d 83       	std	Y+5, r24	; 0x05
     22a:	3f c0       	rjmp	.+126    	; 0x2aa <main+0x1d8>
	else if (__tmp > 65535)
     22c:	6f 81       	ldd	r22, Y+7	; 0x07
     22e:	78 85       	ldd	r23, Y+8	; 0x08
     230:	89 85       	ldd	r24, Y+9	; 0x09
     232:	9a 85       	ldd	r25, Y+10	; 0x0a
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	3f ef       	ldi	r19, 0xFF	; 255
     238:	4f e7       	ldi	r20, 0x7F	; 127
     23a:	57 e4       	ldi	r21, 0x47	; 71
     23c:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__gesf2>
     240:	18 16       	cp	r1, r24
     242:	4c f5       	brge	.+82     	; 0x296 <main+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     244:	6b 85       	ldd	r22, Y+11	; 0x0b
     246:	7c 85       	ldd	r23, Y+12	; 0x0c
     248:	8d 85       	ldd	r24, Y+13	; 0x0d
     24a:	9e 85       	ldd	r25, Y+14	; 0x0e
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e2       	ldi	r20, 0x20	; 32
     252:	51 e4       	ldi	r21, 0x41	; 65
     254:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	bc 01       	movw	r22, r24
     25e:	cd 01       	movw	r24, r26
     260:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	9e 83       	std	Y+6, r25	; 0x06
     26a:	8d 83       	std	Y+5, r24	; 0x05
     26c:	0f c0       	rjmp	.+30     	; 0x28c <main+0x1ba>
     26e:	8a ef       	ldi	r24, 0xFA	; 250
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9c 83       	std	Y+4, r25	; 0x04
     274:	8b 83       	std	Y+3, r24	; 0x03
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x1a8>
     27e:	9c 83       	std	Y+4, r25	; 0x04
     280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     282:	8d 81       	ldd	r24, Y+5	; 0x05
     284:	9e 81       	ldd	r25, Y+6	; 0x06
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	9e 83       	std	Y+6, r25	; 0x06
     28a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	69 f7       	brne	.-38     	; 0x26e <main+0x19c>
     294:	29 cf       	rjmp	.-430    	; 0xe8 <main+0x16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     296:	6f 81       	ldd	r22, Y+7	; 0x07
     298:	78 85       	ldd	r23, Y+8	; 0x08
     29a:	89 85       	ldd	r24, Y+9	; 0x09
     29c:	9a 85       	ldd	r25, Y+10	; 0x0a
     29e:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9e 83       	std	Y+6, r25	; 0x06
     2a8:	8d 83       	std	Y+5, r24	; 0x05
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	9e 81       	ldd	r25, Y+6	; 0x06
     2ae:	9a 83       	std	Y+2, r25	; 0x02
     2b0:	89 83       	std	Y+1, r24	; 0x01
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x1e4>
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	14 cf       	rjmp	.-472    	; 0xe8 <main+0x16>

000002c0 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	df 93       	push	r29
     2c6:	cf 93       	push	r28
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <servo_init+0xa>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     2d2:	ad e2       	ldi	r26, 0x2D	; 45
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	ed e2       	ldi	r30, 0x2D	; 45
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	88 63       	ori	r24, 0x38	; 56
     2de:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     2e0:	e4 e9       	ldi	r30, 0x94	; 148
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	11 82       	std	Z+1, r1	; 0x01
     2e6:	10 82       	st	Z, r1
	OCR3A = 0;
     2e8:	e8 e9       	ldi	r30, 0x98	; 152
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	11 82       	std	Z+1, r1	; 0x01
     2ee:	10 82       	st	Z, r1
	OCR3B = 0;
     2f0:	ea e9       	ldi	r30, 0x9A	; 154
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	11 82       	std	Z+1, r1	; 0x01
     2f6:	10 82       	st	Z, r1
	OCR3C = 0;
     2f8:	ec e9       	ldi	r30, 0x9C	; 156
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	11 82       	std	Z+1, r1	; 0x01
     2fe:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     300:	e0 e9       	ldi	r30, 0x90	; 144
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	8e eb       	ldi	r24, 0xBE	; 190
     306:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     308:	e1 e9       	ldi	r30, 0x91	; 145
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8a e1       	ldi	r24, 0x1A	; 26
     30e:	80 83       	st	Z, r24
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     310:	06 e9       	ldi	r16, 0x96	; 150
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	cc 01       	movw	r24, r24
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	bc 01       	movw	r22, r24
     320:	cd 01       	movw	r24, r26
     322:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__floatunsisf>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	51 e4       	ldi	r21, 0x41	; 65
     336:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	9c 01       	movw	r18, r24
     340:	ad 01       	movw	r20, r26
     342:	60 e8       	ldi	r22, 0x80	; 128
     344:	76 e9       	ldi	r23, 0x96	; 150
     346:	88 e1       	ldi	r24, 0x18	; 24
     348:	9b e4       	ldi	r25, 0x4B	; 75
     34a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__divsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	bc 01       	movw	r22, r24
     354:	cd 01       	movw	r24, r26
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 b9 09 	call	0x1372	; 0x1372 <__addsf3>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	f8 01       	movw	r30, r16
     374:	91 83       	std	Z+1, r25	; 0x01
     376:	80 83       	st	Z, r24
}//END OF servo_init
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <servo_set_duty_cycle_kisobran>:


static void servo_set_duty_cycle_kisobran(int16_t value)
{
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	00 d0       	rcall	.+0      	; 0x394 <servo_set_duty_cycle_kisobran+0xe>
     394:	00 d0       	rcall	.+0      	; 0x396 <servo_set_duty_cycle_kisobran+0x10>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	9c 83       	std	Y+4, r25	; 0x04
     39c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     39e:	e6 e9       	ldi	r30, 0x96	; 150
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	91 81       	ldd	r25, Z+1	; 0x01
     3a6:	cc 01       	movw	r24, r24
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__floatunsisf>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	bc 01       	movw	r22, r24
     3ba:	cd 01       	movw	r24, r26
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	4f e7       	ldi	r20, 0x7F	; 127
     3c2:	53 e4       	ldi	r21, 0x43	; 67
     3c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__divsf3>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	8d 01       	movw	r16, r26
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	9c 81       	ldd	r25, Y+4	; 0x04
     3d4:	aa 27       	eor	r26, r26
     3d6:	97 fd       	sbrc	r25, 7
     3d8:	a0 95       	com	r26
     3da:	ba 2f       	mov	r27, r26
     3dc:	bc 01       	movw	r22, r24
     3de:	cd 01       	movw	r24, r26
     3e0:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatsisf>
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	b7 01       	movw	r22, r14
     3ec:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	5f e3       	ldi	r21, 0x3F	; 63
     400:	b8 d7       	rcall	.+3952   	; 0x1372 <__addsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fixunssfsi>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     416:	e9 e9       	ldi	r30, 0x99	; 153
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	89 2f       	mov	r24, r25
     420:	99 27       	eor	r25, r25
     422:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     424:	e8 e9       	ldi	r30, 0x98	; 152
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	80 83       	st	Z, r24
	
}//END OF servo_position
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <servo_set_kisobran_position>:

void servo_set_kisobran_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	0f 92       	push	r0
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_kisobran( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	99 27       	eor	r25, r25
     452:	87 fd       	sbrc	r24, 7
     454:	90 95       	com	r25
     456:	a9 2f       	mov	r26, r25
     458:	b9 2f       	mov	r27, r25
     45a:	bc 01       	movw	r22, r24
     45c:	cd 01       	movw	r24, r26
     45e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatsisf>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	bc 01       	movw	r22, r24
     468:	cd 01       	movw	r24, r26
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	44 eb       	ldi	r20, 0xB4	; 180
     470:	52 e4       	ldi	r21, 0x42	; 66
     472:	e7 d7       	rcall	.+4046   	; 0x1442 <__divsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	26 e6       	ldi	r18, 0x66	; 102
     47e:	36 e6       	ldi	r19, 0x66	; 102
     480:	46 e3       	ldi	r20, 0x36	; 54
     482:	51 ec       	ldi	r21, 0xC1	; 193
     484:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	4c e6       	ldi	r20, 0x6C	; 108
     496:	53 e4       	ldi	r21, 0x43	; 67
     498:	6c d7       	rcall	.+3800   	; 0x1372 <__addsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	9c 01       	movw	r18, r24
     4a0:	ad 01       	movw	r20, r26
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	8f e7       	ldi	r24, 0x7F	; 127
     4a8:	93 e4       	ldi	r25, 0x43	; 67
     4aa:	62 d7       	rcall	.+3780   	; 0x1370 <__subsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fixsfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	64 df       	rcall	.-312    	; 0x386 <servo_set_duty_cycle_kisobran>

}
     4be:	0f 90       	pop	r0
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <servo_set_duty_cycle_vrata>:

static void servo_set_duty_cycle_vrata(int16_t value)
{
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <servo_set_duty_cycle_vrata+0xe>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <servo_set_duty_cycle_vrata+0x10>
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	9c 83       	std	Y+4, r25	; 0x04
     4dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     4de:	e6 e9       	ldi	r30, 0x96	; 150
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	cc 01       	movw	r24, r24
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	bc 01       	movw	r22, r24
     4ee:	cd 01       	movw	r24, r26
     4f0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__floatunsisf>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	4f e7       	ldi	r20, 0x7F	; 127
     502:	53 e4       	ldi	r21, 0x43	; 67
     504:	9e d7       	rcall	.+3900   	; 0x1442 <__divsf3>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	7c 01       	movw	r14, r24
     50c:	8d 01       	movw	r16, r26
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	aa 27       	eor	r26, r26
     514:	97 fd       	sbrc	r25, 7
     516:	a0 95       	com	r26
     518:	ba 2f       	mov	r27, r26
     51a:	bc 01       	movw	r22, r24
     51c:	cd 01       	movw	r24, r26
     51e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatsisf>
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24
     526:	c8 01       	movw	r24, r16
     528:	b7 01       	movw	r22, r14
     52a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	5f e3       	ldi	r21, 0x3F	; 63
     53e:	19 d7       	rcall	.+3634   	; 0x1372 <__addsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	e9 d7       	rcall	.+4050   	; 0x151c <__fixunssfsi>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     552:	eb e9       	ldi	r30, 0x9B	; 155
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	89 2f       	mov	r24, r25
     55c:	99 27       	eor	r25, r25
     55e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     560:	ea e9       	ldi	r30, 0x9A	; 154
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	80 83       	st	Z, r24
	
}//END OF servo_position
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <servo_set_vrata_position>:
void servo_set_vrata_position(int8_t angle)
{
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	0f 92       	push	r0
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_vrata( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	99 27       	eor	r25, r25
     58e:	87 fd       	sbrc	r24, 7
     590:	90 95       	com	r25
     592:	a9 2f       	mov	r26, r25
     594:	b9 2f       	mov	r27, r25
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	ee d7       	rcall	.+4060   	; 0x1578 <__floatsisf>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	44 eb       	ldi	r20, 0xB4	; 180
     5aa:	52 e4       	ldi	r21, 0x42	; 66
     5ac:	4a d7       	rcall	.+3732   	; 0x1442 <__divsf3>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	bc 01       	movw	r22, r24
     5b4:	cd 01       	movw	r24, r26
     5b6:	26 e6       	ldi	r18, 0x66	; 102
     5b8:	36 e6       	ldi	r19, 0x66	; 102
     5ba:	46 e3       	ldi	r20, 0x36	; 54
     5bc:	51 ec       	ldi	r21, 0xC1	; 193
     5be:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	4c e6       	ldi	r20, 0x6C	; 108
     5d0:	53 e4       	ldi	r21, 0x43	; 67
     5d2:	cf d6       	rcall	.+3486   	; 0x1372 <__addsf3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	9c 01       	movw	r18, r24
     5da:	ad 01       	movw	r20, r26
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	8f e7       	ldi	r24, 0x7F	; 127
     5e2:	93 e4       	ldi	r25, 0x43	; 67
     5e4:	c5 d6       	rcall	.+3466   	; 0x1370 <__subsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	bc 01       	movw	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	91 d7       	rcall	.+3874   	; 0x1512 <__fixsfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	68 df       	rcall	.-304    	; 0x4c6 <servo_set_duty_cycle_vrata>
}
     5f6:	0f 90       	pop	r0
     5f8:	cf 91       	pop	r28
     5fa:	df 91       	pop	r29
     5fc:	08 95       	ret

000005fe <actuators_setup_kisobran>:
void actuators_setup_kisobran(void)
{
     5fe:	df 93       	push	r29
     600:	cf 93       	push	r28
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	6c 97       	sbiw	r28, 0x1c	; 28
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
	servo_set_kisobran_position(-86);
     612:	8a ea       	ldi	r24, 0xAA	; 170
     614:	16 df       	rcall	.-468    	; 0x442 <servo_set_kisobran_position>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	aa e7       	ldi	r26, 0x7A	; 122
     61c:	b4 e4       	ldi	r27, 0x44	; 68
     61e:	89 8f       	std	Y+25, r24	; 0x19
     620:	9a 8f       	std	Y+26, r25	; 0x1a
     622:	ab 8f       	std	Y+27, r26	; 0x1b
     624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     626:	69 8d       	ldd	r22, Y+25	; 0x19
     628:	7a 8d       	ldd	r23, Y+26	; 0x1a
     62a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     62c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e4       	ldi	r19, 0x40	; 64
     632:	4c e1       	ldi	r20, 0x1C	; 28
     634:	55 e4       	ldi	r21, 0x45	; 69
     636:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	8d 8b       	std	Y+21, r24	; 0x15
     640:	9e 8b       	std	Y+22, r25	; 0x16
     642:	af 8b       	std	Y+23, r26	; 0x17
     644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     646:	6d 89       	ldd	r22, Y+21	; 0x15
     648:	7e 89       	ldd	r23, Y+22	; 0x16
     64a:	8f 89       	ldd	r24, Y+23	; 0x17
     64c:	98 8d       	ldd	r25, Y+24	; 0x18
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e8       	ldi	r20, 0x80	; 128
     654:	5f e3       	ldi	r21, 0x3F	; 63
     656:	f1 d6       	rcall	.+3554   	; 0x143a <__cmpsf2>
     658:	88 23       	and	r24, r24
     65a:	2c f4       	brge	.+10     	; 0x666 <actuators_setup_kisobran+0x68>
		__ticks = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9c 8b       	std	Y+20, r25	; 0x14
     662:	8b 8b       	std	Y+19, r24	; 0x13
     664:	3d c0       	rjmp	.+122    	; 0x6e0 <actuators_setup_kisobran+0xe2>
	else if (__tmp > 65535)
     666:	6d 89       	ldd	r22, Y+21	; 0x15
     668:	7e 89       	ldd	r23, Y+22	; 0x16
     66a:	8f 89       	ldd	r24, Y+23	; 0x17
     66c:	98 8d       	ldd	r25, Y+24	; 0x18
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	3f ef       	ldi	r19, 0xFF	; 255
     672:	4f e7       	ldi	r20, 0x7F	; 127
     674:	57 e4       	ldi	r21, 0x47	; 71
     676:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__gesf2>
     67a:	18 16       	cp	r1, r24
     67c:	44 f5       	brge	.+80     	; 0x6ce <actuators_setup_kisobran+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     67e:	69 8d       	ldd	r22, Y+25	; 0x19
     680:	7a 8d       	ldd	r23, Y+26	; 0x1a
     682:	8b 8d       	ldd	r24, Y+27	; 0x1b
     684:	9c 8d       	ldd	r25, Y+28	; 0x1c
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e2       	ldi	r20, 0x20	; 32
     68c:	51 e4       	ldi	r21, 0x41	; 65
     68e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	40 d7       	rcall	.+3712   	; 0x151c <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9c 8b       	std	Y+20, r25	; 0x14
     6a2:	8b 8b       	std	Y+19, r24	; 0x13
     6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <actuators_setup_kisobran+0xc6>
     6a6:	8a ef       	ldi	r24, 0xFA	; 250
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9a 8b       	std	Y+18, r25	; 0x12
     6ac:	89 8b       	std	Y+17, r24	; 0x11
     6ae:	89 89       	ldd	r24, Y+17	; 0x11
     6b0:	9a 89       	ldd	r25, Y+18	; 0x12
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <actuators_setup_kisobran+0xb4>
     6b6:	9a 8b       	std	Y+18, r25	; 0x12
     6b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ba:	8b 89       	ldd	r24, Y+19	; 0x13
     6bc:	9c 89       	ldd	r25, Y+20	; 0x14
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	9c 8b       	std	Y+20, r25	; 0x14
     6c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c4:	8b 89       	ldd	r24, Y+19	; 0x13
     6c6:	9c 89       	ldd	r25, Y+20	; 0x14
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	69 f7       	brne	.-38     	; 0x6a6 <actuators_setup_kisobran+0xa8>
     6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <actuators_setup_kisobran+0xf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ce:	6d 89       	ldd	r22, Y+21	; 0x15
     6d0:	7e 89       	ldd	r23, Y+22	; 0x16
     6d2:	8f 89       	ldd	r24, Y+23	; 0x17
     6d4:	98 8d       	ldd	r25, Y+24	; 0x18
     6d6:	22 d7       	rcall	.+3652   	; 0x151c <__fixunssfsi>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	9c 8b       	std	Y+20, r25	; 0x14
     6de:	8b 8b       	std	Y+19, r24	; 0x13
     6e0:	8b 89       	ldd	r24, Y+19	; 0x13
     6e2:	9c 89       	ldd	r25, Y+20	; 0x14
     6e4:	98 8b       	std	Y+16, r25	; 0x10
     6e6:	8f 87       	std	Y+15, r24	; 0x0f
     6e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ea:	98 89       	ldd	r25, Y+16	; 0x10
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <actuators_setup_kisobran+0xee>
     6f0:	98 8b       	std	Y+16, r25	; 0x10
     6f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_vrata_position(0);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	43 df       	rcall	.-378    	; 0x57e <servo_set_vrata_position>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	aa e7       	ldi	r26, 0x7A	; 122
     6fe:	b4 e4       	ldi	r27, 0x44	; 68
     700:	8b 87       	std	Y+11, r24	; 0x0b
     702:	9c 87       	std	Y+12, r25	; 0x0c
     704:	ad 87       	std	Y+13, r26	; 0x0d
     706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     708:	6b 85       	ldd	r22, Y+11	; 0x0b
     70a:	7c 85       	ldd	r23, Y+12	; 0x0c
     70c:	8d 85       	ldd	r24, Y+13	; 0x0d
     70e:	9e 85       	ldd	r25, Y+14	; 0x0e
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e4       	ldi	r19, 0x40	; 64
     714:	4c e1       	ldi	r20, 0x1C	; 28
     716:	55 e4       	ldi	r21, 0x45	; 69
     718:	e3 d7       	rcall	.+4038   	; 0x16e0 <__mulsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	8f 83       	std	Y+7, r24	; 0x07
     720:	98 87       	std	Y+8, r25	; 0x08
     722:	a9 87       	std	Y+9, r26	; 0x09
     724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     726:	6f 81       	ldd	r22, Y+7	; 0x07
     728:	78 85       	ldd	r23, Y+8	; 0x08
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	9a 85       	ldd	r25, Y+10	; 0x0a
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	81 d6       	rcall	.+3330   	; 0x143a <__cmpsf2>
     738:	88 23       	and	r24, r24
     73a:	2c f4       	brge	.+10     	; 0x746 <actuators_setup_kisobran+0x148>
		__ticks = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9e 83       	std	Y+6, r25	; 0x06
     742:	8d 83       	std	Y+5, r24	; 0x05
     744:	3b c0       	rjmp	.+118    	; 0x7bc <actuators_setup_kisobran+0x1be>
	else if (__tmp > 65535)
     746:	6f 81       	ldd	r22, Y+7	; 0x07
     748:	78 85       	ldd	r23, Y+8	; 0x08
     74a:	89 85       	ldd	r24, Y+9	; 0x09
     74c:	9a 85       	ldd	r25, Y+10	; 0x0a
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	3f ef       	ldi	r19, 0xFF	; 255
     752:	4f e7       	ldi	r20, 0x7F	; 127
     754:	57 e4       	ldi	r21, 0x47	; 71
     756:	c0 d7       	rcall	.+3968   	; 0x16d8 <__gesf2>
     758:	18 16       	cp	r1, r24
     75a:	3c f5       	brge	.+78     	; 0x7aa <actuators_setup_kisobran+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75c:	6b 85       	ldd	r22, Y+11	; 0x0b
     75e:	7c 85       	ldd	r23, Y+12	; 0x0c
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
     762:	9e 85       	ldd	r25, Y+14	; 0x0e
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e2       	ldi	r20, 0x20	; 32
     76a:	51 e4       	ldi	r21, 0x41	; 65
     76c:	b9 d7       	rcall	.+3954   	; 0x16e0 <__mulsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	d2 d6       	rcall	.+3492   	; 0x151c <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	0f c0       	rjmp	.+30     	; 0x7a0 <actuators_setup_kisobran+0x1a2>
     782:	8a ef       	ldi	r24, 0xFA	; 250
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	9c 83       	std	Y+4, r25	; 0x04
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <actuators_setup_kisobran+0x190>
     792:	9c 83       	std	Y+4, r25	; 0x04
     794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	9e 81       	ldd	r25, Y+6	; 0x06
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	9e 83       	std	Y+6, r25	; 0x06
     79e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	69 f7       	brne	.-38     	; 0x782 <actuators_setup_kisobran+0x184>
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <actuators_setup_kisobran+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7aa:	6f 81       	ldd	r22, Y+7	; 0x07
     7ac:	78 85       	ldd	r23, Y+8	; 0x08
     7ae:	89 85       	ldd	r24, Y+9	; 0x09
     7b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b2:	b4 d6       	rcall	.+3432   	; 0x151c <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	9e 83       	std	Y+6, r25	; 0x06
     7ba:	8d 83       	std	Y+5, r24	; 0x05
     7bc:	8d 81       	ldd	r24, Y+5	; 0x05
     7be:	9e 81       	ldd	r25, Y+6	; 0x06
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <actuators_setup_kisobran+0x1ca>
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     7d0:	6c 96       	adiw	r28, 0x1c	; 28
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	cf 91       	pop	r28
     7de:	df 91       	pop	r29
     7e0:	08 95       	ret

000007e2 <actuators_kisobran>:
void actuators_kisobran(void)
{
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	6c 97       	sbiw	r28, 0x1c	; 28
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
	servo_set_vrata_position(90);
     7f6:	8a e5       	ldi	r24, 0x5A	; 90
     7f8:	c2 de       	rcall	.-636    	; 0x57e <servo_set_vrata_position>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	aa e7       	ldi	r26, 0x7A	; 122
     800:	b4 e4       	ldi	r27, 0x44	; 68
     802:	89 8f       	std	Y+25, r24	; 0x19
     804:	9a 8f       	std	Y+26, r25	; 0x1a
     806:	ab 8f       	std	Y+27, r26	; 0x1b
     808:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     80a:	69 8d       	ldd	r22, Y+25	; 0x19
     80c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     80e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     810:	9c 8d       	ldd	r25, Y+28	; 0x1c
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e4       	ldi	r19, 0x40	; 64
     816:	4c e1       	ldi	r20, 0x1C	; 28
     818:	55 e4       	ldi	r21, 0x45	; 69
     81a:	62 d7       	rcall	.+3780   	; 0x16e0 <__mulsf3>
     81c:	dc 01       	movw	r26, r24
     81e:	cb 01       	movw	r24, r22
     820:	8d 8b       	std	Y+21, r24	; 0x15
     822:	9e 8b       	std	Y+22, r25	; 0x16
     824:	af 8b       	std	Y+23, r26	; 0x17
     826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     828:	6d 89       	ldd	r22, Y+21	; 0x15
     82a:	7e 89       	ldd	r23, Y+22	; 0x16
     82c:	8f 89       	ldd	r24, Y+23	; 0x17
     82e:	98 8d       	ldd	r25, Y+24	; 0x18
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e8       	ldi	r20, 0x80	; 128
     836:	5f e3       	ldi	r21, 0x3F	; 63
     838:	00 d6       	rcall	.+3072   	; 0x143a <__cmpsf2>
     83a:	88 23       	and	r24, r24
     83c:	2c f4       	brge	.+10     	; 0x848 <actuators_kisobran+0x66>
		__ticks = 1;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	9c 8b       	std	Y+20, r25	; 0x14
     844:	8b 8b       	std	Y+19, r24	; 0x13
     846:	3b c0       	rjmp	.+118    	; 0x8be <actuators_kisobran+0xdc>
	else if (__tmp > 65535)
     848:	6d 89       	ldd	r22, Y+21	; 0x15
     84a:	7e 89       	ldd	r23, Y+22	; 0x16
     84c:	8f 89       	ldd	r24, Y+23	; 0x17
     84e:	98 8d       	ldd	r25, Y+24	; 0x18
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	4f e7       	ldi	r20, 0x7F	; 127
     856:	57 e4       	ldi	r21, 0x47	; 71
     858:	3f d7       	rcall	.+3710   	; 0x16d8 <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	3c f5       	brge	.+78     	; 0x8ac <actuators_kisobran+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85e:	69 8d       	ldd	r22, Y+25	; 0x19
     860:	7a 8d       	ldd	r23, Y+26	; 0x1a
     862:	8b 8d       	ldd	r24, Y+27	; 0x1b
     864:	9c 8d       	ldd	r25, Y+28	; 0x1c
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e2       	ldi	r20, 0x20	; 32
     86c:	51 e4       	ldi	r21, 0x41	; 65
     86e:	38 d7       	rcall	.+3696   	; 0x16e0 <__mulsf3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	51 d6       	rcall	.+3234   	; 0x151c <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9c 8b       	std	Y+20, r25	; 0x14
     880:	8b 8b       	std	Y+19, r24	; 0x13
     882:	0f c0       	rjmp	.+30     	; 0x8a2 <actuators_kisobran+0xc0>
     884:	8a ef       	ldi	r24, 0xFA	; 250
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9a 8b       	std	Y+18, r25	; 0x12
     88a:	89 8b       	std	Y+17, r24	; 0x11
     88c:	89 89       	ldd	r24, Y+17	; 0x11
     88e:	9a 89       	ldd	r25, Y+18	; 0x12
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <actuators_kisobran+0xae>
     894:	9a 8b       	std	Y+18, r25	; 0x12
     896:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     898:	8b 89       	ldd	r24, Y+19	; 0x13
     89a:	9c 89       	ldd	r25, Y+20	; 0x14
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	9c 8b       	std	Y+20, r25	; 0x14
     8a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a2:	8b 89       	ldd	r24, Y+19	; 0x13
     8a4:	9c 89       	ldd	r25, Y+20	; 0x14
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	69 f7       	brne	.-38     	; 0x884 <actuators_kisobran+0xa2>
     8aa:	13 c0       	rjmp	.+38     	; 0x8d2 <actuators_kisobran+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ac:	6d 89       	ldd	r22, Y+21	; 0x15
     8ae:	7e 89       	ldd	r23, Y+22	; 0x16
     8b0:	8f 89       	ldd	r24, Y+23	; 0x17
     8b2:	98 8d       	ldd	r25, Y+24	; 0x18
     8b4:	33 d6       	rcall	.+3174   	; 0x151c <__fixunssfsi>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	9c 8b       	std	Y+20, r25	; 0x14
     8bc:	8b 8b       	std	Y+19, r24	; 0x13
     8be:	8b 89       	ldd	r24, Y+19	; 0x13
     8c0:	9c 89       	ldd	r25, Y+20	; 0x14
     8c2:	98 8b       	std	Y+16, r25	; 0x10
     8c4:	8f 87       	std	Y+15, r24	; 0x0f
     8c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c8:	98 89       	ldd	r25, Y+16	; 0x10
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <actuators_kisobran+0xe8>
     8ce:	98 8b       	std	Y+16, r25	; 0x10
     8d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_kisobran_position(85);
     8d2:	85 e5       	ldi	r24, 0x55	; 85
     8d4:	b6 dd       	rcall	.-1172   	; 0x442 <servo_set_kisobran_position>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	aa e7       	ldi	r26, 0x7A	; 122
     8dc:	b4 e4       	ldi	r27, 0x44	; 68
     8de:	8b 87       	std	Y+11, r24	; 0x0b
     8e0:	9c 87       	std	Y+12, r25	; 0x0c
     8e2:	ad 87       	std	Y+13, r26	; 0x0d
     8e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8e6:	6b 85       	ldd	r22, Y+11	; 0x0b
     8e8:	7c 85       	ldd	r23, Y+12	; 0x0c
     8ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e4       	ldi	r19, 0x40	; 64
     8f2:	4c e1       	ldi	r20, 0x1C	; 28
     8f4:	55 e4       	ldi	r21, 0x45	; 69
     8f6:	f4 d6       	rcall	.+3560   	; 0x16e0 <__mulsf3>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	8f 83       	std	Y+7, r24	; 0x07
     8fe:	98 87       	std	Y+8, r25	; 0x08
     900:	a9 87       	std	Y+9, r26	; 0x09
     902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     904:	6f 81       	ldd	r22, Y+7	; 0x07
     906:	78 85       	ldd	r23, Y+8	; 0x08
     908:	89 85       	ldd	r24, Y+9	; 0x09
     90a:	9a 85       	ldd	r25, Y+10	; 0x0a
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e8       	ldi	r20, 0x80	; 128
     912:	5f e3       	ldi	r21, 0x3F	; 63
     914:	92 d5       	rcall	.+2852   	; 0x143a <__cmpsf2>
     916:	88 23       	and	r24, r24
     918:	2c f4       	brge	.+10     	; 0x924 <actuators_kisobran+0x142>
		__ticks = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9e 83       	std	Y+6, r25	; 0x06
     920:	8d 83       	std	Y+5, r24	; 0x05
     922:	3b c0       	rjmp	.+118    	; 0x99a <actuators_kisobran+0x1b8>
	else if (__tmp > 65535)
     924:	6f 81       	ldd	r22, Y+7	; 0x07
     926:	78 85       	ldd	r23, Y+8	; 0x08
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	9a 85       	ldd	r25, Y+10	; 0x0a
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	4f e7       	ldi	r20, 0x7F	; 127
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	d1 d6       	rcall	.+3490   	; 0x16d8 <__gesf2>
     936:	18 16       	cp	r1, r24
     938:	3c f5       	brge	.+78     	; 0x988 <actuators_kisobran+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93a:	6b 85       	ldd	r22, Y+11	; 0x0b
     93c:	7c 85       	ldd	r23, Y+12	; 0x0c
     93e:	8d 85       	ldd	r24, Y+13	; 0x0d
     940:	9e 85       	ldd	r25, Y+14	; 0x0e
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	ca d6       	rcall	.+3476   	; 0x16e0 <__mulsf3>
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	bc 01       	movw	r22, r24
     952:	cd 01       	movw	r24, r26
     954:	e3 d5       	rcall	.+3014   	; 0x151c <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	9e 83       	std	Y+6, r25	; 0x06
     95c:	8d 83       	std	Y+5, r24	; 0x05
     95e:	0f c0       	rjmp	.+30     	; 0x97e <actuators_kisobran+0x19c>
     960:	8a ef       	ldi	r24, 0xFA	; 250
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	9c 83       	std	Y+4, r25	; 0x04
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <actuators_kisobran+0x18a>
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     974:	8d 81       	ldd	r24, Y+5	; 0x05
     976:	9e 81       	ldd	r25, Y+6	; 0x06
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	9e 83       	std	Y+6, r25	; 0x06
     97c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     97e:	8d 81       	ldd	r24, Y+5	; 0x05
     980:	9e 81       	ldd	r25, Y+6	; 0x06
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	69 f7       	brne	.-38     	; 0x960 <actuators_kisobran+0x17e>
     986:	13 c0       	rjmp	.+38     	; 0x9ae <actuators_kisobran+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     988:	6f 81       	ldd	r22, Y+7	; 0x07
     98a:	78 85       	ldd	r23, Y+8	; 0x08
     98c:	89 85       	ldd	r24, Y+9	; 0x09
     98e:	9a 85       	ldd	r25, Y+10	; 0x0a
     990:	c5 d5       	rcall	.+2954   	; 0x151c <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9e 83       	std	Y+6, r25	; 0x06
     998:	8d 83       	std	Y+5, r24	; 0x05
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	9e 81       	ldd	r25, Y+6	; 0x06
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <actuators_kisobran+0x1c4>
     9aa:	9a 83       	std	Y+2, r25	; 0x02
     9ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	servo_set_vrata_position(0);
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	e6 dd       	rcall	.-1076   	; 0x57e <servo_set_vrata_position>
}
     9b2:	6c 96       	adiw	r28, 0x1c	; 28
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	00 90 5b 00 	lds	r0, 0x005B
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <__vector_18+0x2a>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <__vector_18+0x2c>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     9f4:	ed ee       	ldi	r30, 0xED	; 237
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     9fc:	1b 82       	std	Y+3, r1	; 0x03
     9fe:	9c c0       	rjmp	.+312    	; 0xb38 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     a00:	ed ee       	ldi	r30, 0xED	; 237
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	82 95       	swap	r24
     a08:	80 7f       	andi	r24, 0xF0	; 240
     a0a:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     a0c:	ee ee       	ldi	r30, 0xEE	; 238
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	82 95       	swap	r24
     a14:	86 95       	lsr	r24
     a16:	87 70       	andi	r24, 0x07	; 7
     a18:	88 2f       	mov	r24, r24
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	81 70       	andi	r24, 0x01	; 1
     a1e:	90 70       	andi	r25, 0x00	; 0
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <__vector_18+0x62>
     a24:	6e c0       	rjmp	.+220    	; 0xb02 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     a26:	ef ee       	ldi	r30, 0xEF	; 239
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 e8       	ldi	r24, 0x80	; 128
     a2c:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     a2e:	ae ee       	ldi	r26, 0xEE	; 238
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	ee ee       	ldi	r30, 0xEE	; 238
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8f 7d       	andi	r24, 0xDF	; 223
     a3a:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     a3c:	e2 ef       	ldi	r30, 0xF2	; 242
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	82 95       	swap	r24
     a44:	86 95       	lsr	r24
     a46:	87 70       	andi	r24, 0x07	; 7
     a48:	28 2f       	mov	r18, r24
     a4a:	e3 ef       	ldi	r30, 0xF3	; 243
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	82 2b       	or	r24, r18
     a62:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     a64:	19 82       	std	Y+1, r1	; 0x01
     a66:	2a c0       	rjmp	.+84     	; 0xabc <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	28 2f       	mov	r18, r24
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	82 1b       	sub	r24, r18
     a74:	93 0b       	sbc	r25, r19
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	90 95       	com	r25
     a7c:	81 95       	neg	r24
     a7e:	9f 4f       	sbci	r25, 0xFF	; 255
     a80:	fc 01       	movw	r30, r24
     a82:	ea 5f       	subi	r30, 0xFA	; 250
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	40 81       	ld	r20, Z
     a88:	51 81       	ldd	r21, Z+1	; 0x01
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	fc 01       	movw	r30, r24
     a94:	e6 5e       	subi	r30, 0xE6	; 230
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	80 81       	ld	r24, Z
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	82 0f       	add	r24, r18
     aa6:	93 1f       	adc	r25, r19
     aa8:	da 01       	movw	r26, r20
     aaa:	a8 0f       	add	r26, r24
     aac:	b9 1f       	adc	r27, r25
     aae:	ea ef       	ldi	r30, 0xFA	; 250
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	88 30       	cpi	r24, 0x08	; 8
     ac0:	98 f2       	brcs	.-90     	; 0xa68 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	fc 01       	movw	r30, r24
     acc:	e6 5e       	subi	r30, 0xE6	; 230
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	80 83       	st	Z, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	85 30       	cpi	r24, 0x05	; 5
     ada:	41 f4       	brne	.+16     	; 0xaec <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	fc 01       	movw	r30, r24
     ae6:	e6 5e       	subi	r30, 0xE6	; 230
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	88 2f       	mov	r24, r24
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	e2 5d       	subi	r30, 0xD2	; 210
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	80 81       	ld	r24, Z
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	80 83       	st	Z, r24
     b00:	1f c0       	rjmp	.+62     	; 0xb40 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     b02:	ee ee       	ldi	r30, 0xEE	; 238
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	82 95       	swap	r24
     b0a:	86 95       	lsr	r24
     b0c:	86 95       	lsr	r24
     b0e:	83 70       	andi	r24, 0x03	; 3
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	81 70       	andi	r24, 0x01	; 1
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	88 23       	and	r24, r24
     b1a:	59 f0       	breq	.+22     	; 0xb32 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     b1c:	ef ee       	ldi	r30, 0xEF	; 239
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     b22:	ae ee       	ldi	r26, 0xEE	; 238
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	ee ee       	ldi	r30, 0xEE	; 238
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	8f 7b       	andi	r24, 0xBF	; 191
     b2e:	8c 93       	st	X, r24
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	8b 83       	std	Y+3, r24	; 0x03
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	8f 30       	cpi	r24, 0x0F	; 15
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <__vector_18+0x17c>
     b3e:	60 cf       	rjmp	.-320    	; 0xa00 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     b40:	ed ee       	ldi	r30, 0xED	; 237
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	8c 81       	ldd	r24, Y+4	; 0x04
     b46:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     b48:	aa ed       	ldi	r26, 0xDA	; 218
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	ea ed       	ldi	r30, 0xDA	; 218
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8c 93       	st	X, r24
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	00 92 5b 00 	sts	0x005B, r0
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	00 d0       	rcall	.+0      	; 0xb8a <CAN_InitModule+0x6>
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     b8e:	e8 ed       	ldi	r30, 0xD8	; 216
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     b96:	1a 82       	std	Y+2, r1	; 0x02
     b98:	32 c0       	rjmp	.+100    	; 0xbfe <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     b9a:	ed ee       	ldi	r30, 0xED	; 237
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	82 95       	swap	r24
     ba2:	80 7f       	andi	r24, 0xF0	; 240
     ba4:	80 83       	st	Z, r24

		CANSTMOB = 0;
     ba6:	ee ee       	ldi	r30, 0xEE	; 238
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	10 82       	st	Z, r1
		CANCDMOB = 0;
     bac:	ef ee       	ldi	r30, 0xEF	; 239
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1

		CANIDT1 = 0;
     bb2:	e3 ef       	ldi	r30, 0xF3	; 243
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	10 82       	st	Z, r1
		CANIDT2 = 0;
     bb8:	e2 ef       	ldi	r30, 0xF2	; 242
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	10 82       	st	Z, r1
		CANIDT3 = 0;
     bbe:	e1 ef       	ldi	r30, 0xF1	; 241
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	10 82       	st	Z, r1
		CANIDT4 = 0;
     bc4:	e0 ef       	ldi	r30, 0xF0	; 240
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	10 82       	st	Z, r1
		CANIDM1 = 0;
     bca:	e7 ef       	ldi	r30, 0xF7	; 247
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	10 82       	st	Z, r1
		CANIDM2 = 0;
     bd0:	e6 ef       	ldi	r30, 0xF6	; 246
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	10 82       	st	Z, r1
		CANIDM3 = 0;
     bd6:	e5 ef       	ldi	r30, 0xF5	; 245
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1
		CANIDM4 = 0;
     bdc:	e4 ef       	ldi	r30, 0xF4	; 244
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <CAN_InitModule+0x6e>
			CANMSG = 0;
     be6:	ea ef       	ldi	r30, 0xFA	; 250
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	88 30       	cpi	r24, 0x08	; 8
     bf6:	b8 f3       	brcs	.-18     	; 0xbe6 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	8a 83       	std	Y+2, r24	; 0x02
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	8f 30       	cpi	r24, 0x0F	; 15
     c02:	58 f2       	brcs	.-106    	; 0xb9a <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     c04:	e8 ed       	ldi	r30, 0xD8	; 216
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     c0c:	e2 ee       	ldi	r30, 0xE2	; 226
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     c14:	e3 ee       	ldi	r30, 0xE3	; 227
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	88 e0       	ldi	r24, 0x08	; 8
     c1a:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     c1c:	e4 ee       	ldi	r30, 0xE4	; 228
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8e e5       	ldi	r24, 0x5E	; 94
     c22:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     c24:	e5 ee       	ldi	r30, 0xE5	; 229
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     c2a:	eb ed       	ldi	r30, 0xDB	; 219
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 eb       	ldi	r24, 0xB0	; 176
     c30:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     c32:	ef ed       	ldi	r30, 0xDF	; 223
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	8f e7       	ldi	r24, 0x7F	; 127
     c38:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     c3a:	ee ed       	ldi	r30, 0xDE	; 222
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	80 83       	st	Z, r24
	sei();
     c42:	78 94       	sei
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <CAN_InitRxMob+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <CAN_InitRxMob+0x8>
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c60:	ed ee       	ldi	r30, 0xED	; 237
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c68:	e9 ed       	ldi	r30, 0xD9	; 217
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	82 95       	swap	r24
     c70:	8f 70       	andi	r24, 0x0F	; 15
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	90 70       	andi	r25, 0x00	; 0
     c7a:	88 23       	and	r24, r24
     c7c:	a9 f7       	brne	.-22     	; 0xc68 <CAN_InitRxMob+0x1a>
     c7e:	e9 ed       	ldi	r30, 0xD9	; 217
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	81 70       	andi	r24, 0x01	; 1
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	88 23       	and	r24, r24
     c94:	49 f7       	brne	.-46     	; 0xc68 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c96:	1a 82       	std	Y+2, r1	; 0x02
     c98:	3f c0       	rjmp	.+126    	; 0xd18 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     c9a:	ed ee       	ldi	r30, 0xED	; 237
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	82 95       	swap	r24
     ca2:	80 7f       	andi	r24, 0xF0	; 240
     ca4:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     ca6:	ef ee       	ldi	r30, 0xEF	; 239
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	82 95       	swap	r24
     cae:	86 95       	lsr	r24
     cb0:	86 95       	lsr	r24
     cb2:	83 70       	andi	r24, 0x03	; 3
     cb4:	88 23       	and	r24, r24
     cb6:	69 f5       	brne	.+90     	; 0xd12 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     cb8:	ef ee       	ldi	r30, 0xEF	; 239
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	8f e0       	ldi	r24, 0x0F	; 15
     cbe:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     cc0:	e3 ef       	ldi	r30, 0xF3	; 243
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	96 95       	lsr	r25
     ccc:	87 95       	ror	r24
     cce:	96 95       	lsr	r25
     cd0:	87 95       	ror	r24
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     cd8:	e2 ef       	ldi	r30, 0xF2	; 242
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	82 95       	swap	r24
     ce0:	88 0f       	add	r24, r24
     ce2:	80 7e       	andi	r24, 0xE0	; 224
     ce4:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     ce6:	e6 ef       	ldi	r30, 0xF6	; 246
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 ee       	ldi	r24, 0xE0	; 224
     cec:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     cee:	e7 ef       	ldi	r30, 0xF7	; 247
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     cf6:	af ee       	ldi	r26, 0xEF	; 239
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ef ee       	ldi	r30, 0xEF	; 239
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     d04:	ed ee       	ldi	r30, 0xED	; 237
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	80 83       	st	Z, r24

		return 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8d 83       	std	Y+5, r24	; 0x05
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	8a 83       	std	Y+2, r24	; 0x02
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	8f 30       	cpi	r24, 0x0F	; 15
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <CAN_InitRxMob+0xd2>
     d1e:	bd cf       	rjmp	.-134    	; 0xc9a <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     d20:	ed ee       	ldi	r30, 0xED	; 237
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	80 83       	st	Z, r24

	return 0;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <CAN_Init+0xa>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     d4c:	1b df       	rcall	.-458    	; 0xb84 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	35 c0       	rjmp	.+106    	; 0xdbc <CAN_Init+0x80>
	{
		CAN_InitRxMob(i + 1);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	79 df       	rcall	.-270    	; 0xc4e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	8c 01       	movw	r16, r24
     d68:	0a 5f       	subi	r16, 0xFA	; 250
     d6a:	1e 4f       	sbci	r17, 0xFE	; 254
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	18 d5       	rcall	.+2608   	; 0x17a6 <calloc>
     d76:	f8 01       	movw	r30, r16
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	48 2f       	mov	r20, r24
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 5d       	subi	r30, 0xD2	; 210
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	10 82       	st	Z, r1
     d96:	fc 01       	movw	r30, r24
     d98:	e2 5d       	subi	r30, 0xD2	; 210
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	80 81       	ld	r24, Z
     d9e:	f9 01       	movw	r30, r18
     da0:	ec 5d       	subi	r30, 0xDC	; 220
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	80 83       	st	Z, r24
     da6:	f9 01       	movw	r30, r18
     da8:	ec 5d       	subi	r30, 0xDC	; 220
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	80 81       	ld	r24, Z
     dae:	fa 01       	movw	r30, r20
     db0:	e6 5e       	subi	r30, 0xE6	; 230
     db2:	fe 4f       	sbci	r31, 0xFE	; 254
     db4:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	99 81       	ldd	r25, Y+1	; 0x01
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	98 17       	cp	r25, r24
     dc2:	38 f2       	brcs	.-114    	; 0xd52 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <timer_init>:


void timer_init(unsigned int freq)
{
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <timer_init+0xa>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     de4:	e0 e8       	ldi	r30, 0x80	; 128
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     dea:	e1 e8       	ldi	r30, 0x81	; 129
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	89 e0       	ldi	r24, 0x09	; 9
     df0:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     df2:	08 e8       	ldi	r16, 0x88	; 136
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	cc 01       	movw	r24, r24
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	b7 d3       	rcall	.+1902   	; 0x1574 <__floatunsisf>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	60 e8       	ldi	r22, 0x80	; 128
     e0c:	76 e9       	ldi	r23, 0x96	; 150
     e0e:	88 e1       	ldi	r24, 0x18	; 24
     e10:	9b e4       	ldi	r25, 0x4B	; 75
     e12:	17 d3       	rcall	.+1582   	; 0x1442 <__divsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	a6 d2       	rcall	.+1356   	; 0x1372 <__addsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	76 d3       	rcall	.+1772   	; 0x151c <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	f8 01       	movw	r30, r16
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     e3a:	ef e6       	ldi	r30, 0x6F	; 111
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	80 83       	st	Z, r24

	SREG |= 0x80;
     e42:	af e5       	ldi	r26, 0x5F	; 95
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef e5       	ldi	r30, 0x5F	; 95
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	00 90 5b 00 	lds	r0, 0x005B
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     e8e:	80 91 38 01 	lds	r24, 0x0138
     e92:	90 91 39 01 	lds	r25, 0x0139
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	29 f0       	breq	.+10     	; 0xea4 <__vector_12+0x46>
        timer_callback();
     e9a:	e0 91 38 01 	lds	r30, 0x0138
     e9e:	f0 91 39 01 	lds	r31, 0x0139
     ea2:	09 95       	icall
	if(sys_time >= 80000)
     ea4:	80 91 3a 01 	lds	r24, 0x013A
     ea8:	90 91 3b 01 	lds	r25, 0x013B
     eac:	a0 91 3c 01 	lds	r26, 0x013C
     eb0:	b0 91 3d 01 	lds	r27, 0x013D
     eb4:	80 38       	cpi	r24, 0x80	; 128
     eb6:	28 e3       	ldi	r18, 0x38	; 56
     eb8:	92 07       	cpc	r25, r18
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	a2 07       	cpc	r26, r18
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	b2 07       	cpc	r27, r18
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__vector_12+0x68>
		actuators_kisobran();
     ec4:	8e dc       	rcall	.-1764   	; 0x7e2 <actuators_kisobran>
	sys_time++;
     ec6:	80 91 3a 01 	lds	r24, 0x013A
     eca:	90 91 3b 01 	lds	r25, 0x013B
     ece:	a0 91 3c 01 	lds	r26, 0x013C
     ed2:	b0 91 3d 01 	lds	r27, 0x013D
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	a1 1d       	adc	r26, r1
     eda:	b1 1d       	adc	r27, r1
     edc:	80 93 3a 01 	sts	0x013A, r24
     ee0:	90 93 3b 01 	sts	0x013B, r25
     ee4:	a0 93 3c 01 	sts	0x013C, r26
     ee8:	b0 93 3d 01 	sts	0x013D, r27
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	00 92 5b 00 	sts	0x005B, r0
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
     f20:	10 92 3a 01 	sts	0x013A, r1
     f24:	10 92 3b 01 	sts	0x013B, r1
     f28:	10 92 3c 01 	sts	0x013C, r1
     f2c:	10 92 3d 01 	sts	0x013D, r1
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <system_set_match_started>:
void system_set_match_started(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 3e 01 	sts	0x013E, r24
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <system_init>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
void system_init(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	6c 97       	sbiw	r28, 0x1c	; 28
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	aa e7       	ldi	r26, 0x7A	; 122
     f64:	b4 e4       	ldi	r27, 0x44	; 68
     f66:	89 8f       	std	Y+25, r24	; 0x19
     f68:	9a 8f       	std	Y+26, r25	; 0x1a
     f6a:	ab 8f       	std	Y+27, r26	; 0x1b
     f6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6e:	69 8d       	ldd	r22, Y+25	; 0x19
     f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e4       	ldi	r19, 0x40	; 64
     f7a:	4c e1       	ldi	r20, 0x1C	; 28
     f7c:	55 e4       	ldi	r21, 0x45	; 69
     f7e:	b0 d3       	rcall	.+1888   	; 0x16e0 <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8d 8b       	std	Y+21, r24	; 0x15
     f86:	9e 8b       	std	Y+22, r25	; 0x16
     f88:	af 8b       	std	Y+23, r26	; 0x17
     f8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f8c:	6d 89       	ldd	r22, Y+21	; 0x15
     f8e:	7e 89       	ldd	r23, Y+22	; 0x16
     f90:	8f 89       	ldd	r24, Y+23	; 0x17
     f92:	98 8d       	ldd	r25, Y+24	; 0x18
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	4e d2       	rcall	.+1180   	; 0x143a <__cmpsf2>
     f9e:	88 23       	and	r24, r24
     fa0:	2c f4       	brge	.+10     	; 0xfac <system_init+0x62>
		__ticks = 1;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
     faa:	3b c0       	rjmp	.+118    	; 0x1022 <system_init+0xd8>
	else if (__tmp > 65535)
     fac:	6d 89       	ldd	r22, Y+21	; 0x15
     fae:	7e 89       	ldd	r23, Y+22	; 0x16
     fb0:	8f 89       	ldd	r24, Y+23	; 0x17
     fb2:	98 8d       	ldd	r25, Y+24	; 0x18
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	57 e4       	ldi	r21, 0x47	; 71
     fbc:	8d d3       	rcall	.+1818   	; 0x16d8 <__gesf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	3c f5       	brge	.+78     	; 0x1010 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	69 8d       	ldd	r22, Y+25	; 0x19
     fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	86 d3       	rcall	.+1804   	; 0x16e0 <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	9f d2       	rcall	.+1342   	; 0x151c <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <system_init+0xbc>
     fe8:	8a ef       	ldi	r24, 0xFA	; 250
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9a 8b       	std	Y+18, r25	; 0x12
     fee:	89 8b       	std	Y+17, r24	; 0x11
     ff0:	89 89       	ldd	r24, Y+17	; 0x11
     ff2:	9a 89       	ldd	r25, Y+18	; 0x12
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <system_init+0xaa>
     ff8:	9a 8b       	std	Y+18, r25	; 0x12
     ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	8b 89       	ldd	r24, Y+19	; 0x13
     ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9c 8b       	std	Y+20, r25	; 0x14
    1004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	9c 89       	ldd	r25, Y+20	; 0x14
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f7       	brne	.-38     	; 0xfe8 <system_init+0x9e>
    100e:	13 c0       	rjmp	.+38     	; 0x1036 <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	6d 89       	ldd	r22, Y+21	; 0x15
    1012:	7e 89       	ldd	r23, Y+22	; 0x16
    1014:	8f 89       	ldd	r24, Y+23	; 0x17
    1016:	98 8d       	ldd	r25, Y+24	; 0x18
    1018:	81 d2       	rcall	.+1282   	; 0x151c <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9c 8b       	std	Y+20, r25	; 0x14
    1020:	8b 8b       	std	Y+19, r24	; 0x13
    1022:	8b 89       	ldd	r24, Y+19	; 0x13
    1024:	9c 89       	ldd	r25, Y+20	; 0x14
    1026:	98 8b       	std	Y+16, r25	; 0x10
    1028:	8f 87       	std	Y+15, r24	; 0x0f
    102a:	8f 85       	ldd	r24, Y+15	; 0x0f
    102c:	98 89       	ldd	r25, Y+16	; 0x10
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <system_init+0xe4>
    1032:	98 8b       	std	Y+16, r25	; 0x10
    1034:	8f 87       	std	Y+15, r24	; 0x0f
	//gpio_register_pin(39,GPIO_DIRECTION_INPUT,false);
	
	_delay_ms(1000);
	DDRG = 0xff;
    1036:	e3 e3       	ldi	r30, 0x33	; 51
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	80 83       	st	Z, r24
	PORTG = 0xFF;
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	80 83       	st	Z, r24
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	aa e7       	ldi	r26, 0x7A	; 122
    104c:	b4 e4       	ldi	r27, 0x44	; 68
    104e:	8b 87       	std	Y+11, r24	; 0x0b
    1050:	9c 87       	std	Y+12, r25	; 0x0c
    1052:	ad 87       	std	Y+13, r26	; 0x0d
    1054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1056:	6b 85       	ldd	r22, Y+11	; 0x0b
    1058:	7c 85       	ldd	r23, Y+12	; 0x0c
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e4       	ldi	r19, 0x40	; 64
    1062:	4c e1       	ldi	r20, 0x1C	; 28
    1064:	55 e4       	ldi	r21, 0x45	; 69
    1066:	3c d3       	rcall	.+1656   	; 0x16e0 <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	8f 83       	std	Y+7, r24	; 0x07
    106e:	98 87       	std	Y+8, r25	; 0x08
    1070:	a9 87       	std	Y+9, r26	; 0x09
    1072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	da d1       	rcall	.+948    	; 0x143a <__cmpsf2>
    1086:	88 23       	and	r24, r24
    1088:	2c f4       	brge	.+10     	; 0x1094 <system_init+0x14a>
		__ticks = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	3b c0       	rjmp	.+118    	; 0x110a <__stack+0xb>
	else if (__tmp > 65535)
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	3f ef       	ldi	r19, 0xFF	; 255
    10a0:	4f e7       	ldi	r20, 0x7F	; 127
    10a2:	57 e4       	ldi	r21, 0x47	; 71
    10a4:	19 d3       	rcall	.+1586   	; 0x16d8 <__gesf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	3c f5       	brge	.+78     	; 0x10f8 <system_init+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	12 d3       	rcall	.+1572   	; 0x16e0 <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	2b d2       	rcall	.+1110   	; 0x151c <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <system_init+0x1a4>
    10d0:	8a ef       	ldi	r24, 0xFA	; 250
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <system_init+0x192>
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <system_init+0x186>
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <__stack+0x1f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	0d d2       	rcall	.+1050   	; 0x151c <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <__stack+0x17>
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	PORTG = 0x00;
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	10 82       	st	Z, r1
	servo_init(50);
    1124:	82 e3       	ldi	r24, 0x32	; 50
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	cb d8       	rcall	.-3690   	; 0x2c0 <servo_init>
	timer_init(1000);
    112a:	88 ee       	ldi	r24, 0xE8	; 232
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	51 de       	rcall	.-862    	; 0xdd2 <timer_init>
	CAN_Init(1);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	04 de       	rcall	.-1016   	; 0xd3c <CAN_Init>

	actuators_setup_kisobran();
    1134:	64 da       	rcall	.-2872   	; 0x5fe <actuators_setup_kisobran>
	
	//while(system_jumper_check() == 1);
	system_reset_system_time();
    1136:	f0 de       	rcall	.-544    	; 0xf18 <system_reset_system_time>
	system_set_match_started();
    1138:	fe de       	rcall	.-516    	; 0xf36 <system_set_match_started>
    113a:	6c 96       	adiw	r28, 0x1c	; 28
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	00 90 5b 00 	lds	r0, 0x005B
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    1170:	80 91 3f 01 	lds	r24, 0x013F
    1174:	88 23       	and	r24, r24
    1176:	d9 f0       	breq	.+54     	; 0x11ae <__vector_23+0x62>
	{
		tx0_counter--;
    1178:	80 91 3f 01 	lds	r24, 0x013F
    117c:	81 50       	subi	r24, 0x01	; 1
    117e:	80 93 3f 01 	sts	0x013F, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1182:	a6 ec       	ldi	r26, 0xC6	; 198
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	80 91 40 01 	lds	r24, 0x0140
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	fc 01       	movw	r30, r24
    1190:	e9 5b       	subi	r30, 0xB9	; 185
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	80 81       	ld	r24, Z
    1196:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    1198:	80 91 40 01 	lds	r24, 0x0140
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	80 93 40 01 	sts	0x0140, r24
    11a2:	80 91 40 01 	lds	r24, 0x0140
    11a6:	80 34       	cpi	r24, 0x40	; 64
    11a8:	11 f4       	brne	.+4      	; 0x11ae <__vector_23+0x62>
			tx0_rd_index = 0;
    11aa:	10 92 40 01 	sts	0x0140, r1
	}
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	0f 90       	pop	r0
    11c0:	00 92 5b 00 	sts	0x005B, r0
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	00 90 5b 00 	lds	r0, 0x005B
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	8f 93       	push	r24
    11e2:	9f 93       	push	r25
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    11f2:	e0 ec       	ldi	r30, 0xC0	; 192
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	8c 71       	andi	r24, 0x1C	; 28
    1202:	90 70       	andi	r25, 0x00	; 0
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	d9 f4       	brne	.+54     	; 0x123e <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    1208:	80 91 41 01 	lds	r24, 0x0141
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	e6 ec       	ldi	r30, 0xC6	; 198
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	20 81       	ld	r18, Z
    1216:	fc 01       	movw	r30, r24
    1218:	e9 57       	subi	r30, 0x79	; 121
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    121e:	80 91 41 01 	lds	r24, 0x0141
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	80 93 41 01 	sts	0x0141, r24
    1228:	80 91 41 01 	lds	r24, 0x0141
    122c:	80 34       	cpi	r24, 0x40	; 64
    122e:	11 f4       	brne	.+4      	; 0x1234 <__vector_21+0x66>
			rx0_wr_index = 0;
    1230:	10 92 41 01 	sts	0x0141, r1

		rx0_counter++;
    1234:	80 91 42 01 	lds	r24, 0x0142
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 42 01 	sts	0x0142, r24
	}
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	ff 91       	pop	r31
    1246:	ef 91       	pop	r30
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	00 92 5b 00 	sts	0x005B, r0
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	00 90 5b 00 	lds	r0, 0x005B
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1282:	80 91 43 01 	lds	r24, 0x0143
    1286:	88 23       	and	r24, r24
    1288:	d9 f0       	breq	.+54     	; 0x12c0 <__vector_34+0x62>
	{
		tx1_counter--;
    128a:	80 91 43 01 	lds	r24, 0x0143
    128e:	81 50       	subi	r24, 0x01	; 1
    1290:	80 93 43 01 	sts	0x0143, r24
		UDR1=tx1_buffer[tx1_rd_index];
    1294:	ae ec       	ldi	r26, 0xCE	; 206
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	80 91 44 01 	lds	r24, 0x0144
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	fc 01       	movw	r30, r24
    12a2:	e9 53       	subi	r30, 0x39	; 57
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	80 81       	ld	r24, Z
    12a8:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    12aa:	80 91 44 01 	lds	r24, 0x0144
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 44 01 	sts	0x0144, r24
    12b4:	80 91 44 01 	lds	r24, 0x0144
    12b8:	80 34       	cpi	r24, 0x40	; 64
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__vector_34+0x62>
			tx1_rd_index = 0;
    12bc:	10 92 44 01 	sts	0x0144, r1
	}
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	0f 90       	pop	r0
    12d2:	00 92 5b 00 	sts	0x005B, r0
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_32>:

ISR(USART1_RX_vect)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	00 90 5b 00 	lds	r0, 0x005B
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	2f 93       	push	r18
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1304:	e8 ec       	ldi	r30, 0xC8	; 200
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	8c 71       	andi	r24, 0x1C	; 28
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	d9 f4       	brne	.+54     	; 0x1350 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    131a:	80 91 45 01 	lds	r24, 0x0145
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	ee ec       	ldi	r30, 0xCE	; 206
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	20 81       	ld	r18, Z
    1328:	fc 01       	movw	r30, r24
    132a:	e9 5f       	subi	r30, 0xF9	; 249
    132c:	fd 4f       	sbci	r31, 0xFD	; 253
    132e:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1330:	80 91 45 01 	lds	r24, 0x0145
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 45 01 	sts	0x0145, r24
    133a:	80 91 45 01 	lds	r24, 0x0145
    133e:	80 34       	cpi	r24, 0x40	; 64
    1340:	11 f4       	brne	.+4      	; 0x1346 <__vector_32+0x66>
		rx1_wr_index = 0;
    1342:	10 92 45 01 	sts	0x0145, r1

		rx1_counter++;
    1346:	80 91 46 01 	lds	r24, 0x0146
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 46 01 	sts	0x0146, r24
	}
}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	00 92 5b 00 	sts	0x005B, r0
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <__subsf3>:
    1370:	50 58       	subi	r21, 0x80	; 128

00001372 <__addsf3>:
    1372:	bb 27       	eor	r27, r27
    1374:	aa 27       	eor	r26, r26
    1376:	0e d0       	rcall	.+28     	; 0x1394 <__addsf3x>
    1378:	75 c1       	rjmp	.+746    	; 0x1664 <__fp_round>
    137a:	66 d1       	rcall	.+716    	; 0x1648 <__fp_pscA>
    137c:	30 f0       	brcs	.+12     	; 0x138a <__addsf3+0x18>
    137e:	6b d1       	rcall	.+726    	; 0x1656 <__fp_pscB>
    1380:	20 f0       	brcs	.+8      	; 0x138a <__addsf3+0x18>
    1382:	31 f4       	brne	.+12     	; 0x1390 <__addsf3+0x1e>
    1384:	9f 3f       	cpi	r25, 0xFF	; 255
    1386:	11 f4       	brne	.+4      	; 0x138c <__addsf3+0x1a>
    1388:	1e f4       	brtc	.+6      	; 0x1390 <__addsf3+0x1e>
    138a:	5b c1       	rjmp	.+694    	; 0x1642 <__fp_nan>
    138c:	0e f4       	brtc	.+2      	; 0x1390 <__addsf3+0x1e>
    138e:	e0 95       	com	r30
    1390:	e7 fb       	bst	r30, 7
    1392:	51 c1       	rjmp	.+674    	; 0x1636 <__fp_inf>

00001394 <__addsf3x>:
    1394:	e9 2f       	mov	r30, r25
    1396:	77 d1       	rcall	.+750    	; 0x1686 <__fp_split3>
    1398:	80 f3       	brcs	.-32     	; 0x137a <__addsf3+0x8>
    139a:	ba 17       	cp	r27, r26
    139c:	62 07       	cpc	r22, r18
    139e:	73 07       	cpc	r23, r19
    13a0:	84 07       	cpc	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <__addsf3x+0x18>
    13a6:	71 f4       	brne	.+28     	; 0x13c4 <__addsf3x+0x30>
    13a8:	9e f5       	brtc	.+102    	; 0x1410 <__addsf3x+0x7c>
    13aa:	8f c1       	rjmp	.+798    	; 0x16ca <__fp_zero>
    13ac:	0e f4       	brtc	.+2      	; 0x13b0 <__addsf3x+0x1c>
    13ae:	e0 95       	com	r30
    13b0:	0b 2e       	mov	r0, r27
    13b2:	ba 2f       	mov	r27, r26
    13b4:	a0 2d       	mov	r26, r0
    13b6:	0b 01       	movw	r0, r22
    13b8:	b9 01       	movw	r22, r18
    13ba:	90 01       	movw	r18, r0
    13bc:	0c 01       	movw	r0, r24
    13be:	ca 01       	movw	r24, r20
    13c0:	a0 01       	movw	r20, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	ff 27       	eor	r31, r31
    13c6:	59 1b       	sub	r21, r25
    13c8:	99 f0       	breq	.+38     	; 0x13f0 <__addsf3x+0x5c>
    13ca:	59 3f       	cpi	r21, 0xF9	; 249
    13cc:	50 f4       	brcc	.+20     	; 0x13e2 <__addsf3x+0x4e>
    13ce:	50 3e       	cpi	r21, 0xE0	; 224
    13d0:	68 f1       	brcs	.+90     	; 0x142c <__addsf3x+0x98>
    13d2:	1a 16       	cp	r1, r26
    13d4:	f0 40       	sbci	r31, 0x00	; 0
    13d6:	a2 2f       	mov	r26, r18
    13d8:	23 2f       	mov	r18, r19
    13da:	34 2f       	mov	r19, r20
    13dc:	44 27       	eor	r20, r20
    13de:	58 5f       	subi	r21, 0xF8	; 248
    13e0:	f3 cf       	rjmp	.-26     	; 0x13c8 <__addsf3x+0x34>
    13e2:	46 95       	lsr	r20
    13e4:	37 95       	ror	r19
    13e6:	27 95       	ror	r18
    13e8:	a7 95       	ror	r26
    13ea:	f0 40       	sbci	r31, 0x00	; 0
    13ec:	53 95       	inc	r21
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__addsf3x+0x4e>
    13f0:	7e f4       	brtc	.+30     	; 0x1410 <__addsf3x+0x7c>
    13f2:	1f 16       	cp	r1, r31
    13f4:	ba 0b       	sbc	r27, r26
    13f6:	62 0b       	sbc	r22, r18
    13f8:	73 0b       	sbc	r23, r19
    13fa:	84 0b       	sbc	r24, r20
    13fc:	ba f0       	brmi	.+46     	; 0x142c <__addsf3x+0x98>
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	a1 f0       	breq	.+40     	; 0x142a <__addsf3x+0x96>
    1402:	ff 0f       	add	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	c2 f7       	brpl	.-16     	; 0x13fe <__addsf3x+0x6a>
    140e:	0e c0       	rjmp	.+28     	; 0x142c <__addsf3x+0x98>
    1410:	ba 0f       	add	r27, r26
    1412:	62 1f       	adc	r22, r18
    1414:	73 1f       	adc	r23, r19
    1416:	84 1f       	adc	r24, r20
    1418:	48 f4       	brcc	.+18     	; 0x142c <__addsf3x+0x98>
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f7 95       	ror	r31
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	08 f0       	brcs	.+2      	; 0x142a <__addsf3x+0x96>
    1428:	b3 cf       	rjmp	.-154    	; 0x1390 <__addsf3+0x1e>
    142a:	93 95       	inc	r25
    142c:	88 0f       	add	r24, r24
    142e:	08 f0       	brcs	.+2      	; 0x1432 <__addsf3x+0x9e>
    1430:	99 27       	eor	r25, r25
    1432:	ee 0f       	add	r30, r30
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	08 95       	ret

0000143a <__cmpsf2>:
    143a:	d9 d0       	rcall	.+434    	; 0x15ee <__fp_cmp>
    143c:	08 f4       	brcc	.+2      	; 0x1440 <__cmpsf2+0x6>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret

00001442 <__divsf3>:
    1442:	0c d0       	rcall	.+24     	; 0x145c <__divsf3x>
    1444:	0f c1       	rjmp	.+542    	; 0x1664 <__fp_round>
    1446:	07 d1       	rcall	.+526    	; 0x1656 <__fp_pscB>
    1448:	40 f0       	brcs	.+16     	; 0x145a <__divsf3+0x18>
    144a:	fe d0       	rcall	.+508    	; 0x1648 <__fp_pscA>
    144c:	30 f0       	brcs	.+12     	; 0x145a <__divsf3+0x18>
    144e:	21 f4       	brne	.+8      	; 0x1458 <__divsf3+0x16>
    1450:	5f 3f       	cpi	r21, 0xFF	; 255
    1452:	19 f0       	breq	.+6      	; 0x145a <__divsf3+0x18>
    1454:	f0 c0       	rjmp	.+480    	; 0x1636 <__fp_inf>
    1456:	51 11       	cpse	r21, r1
    1458:	39 c1       	rjmp	.+626    	; 0x16cc <__fp_szero>
    145a:	f3 c0       	rjmp	.+486    	; 0x1642 <__fp_nan>

0000145c <__divsf3x>:
    145c:	14 d1       	rcall	.+552    	; 0x1686 <__fp_split3>
    145e:	98 f3       	brcs	.-26     	; 0x1446 <__divsf3+0x4>

00001460 <__divsf3_pse>:
    1460:	99 23       	and	r25, r25
    1462:	c9 f3       	breq	.-14     	; 0x1456 <__divsf3+0x14>
    1464:	55 23       	and	r21, r21
    1466:	b1 f3       	breq	.-20     	; 0x1454 <__divsf3+0x12>
    1468:	95 1b       	sub	r25, r21
    146a:	55 0b       	sbc	r21, r21
    146c:	bb 27       	eor	r27, r27
    146e:	aa 27       	eor	r26, r26
    1470:	62 17       	cp	r22, r18
    1472:	73 07       	cpc	r23, r19
    1474:	84 07       	cpc	r24, r20
    1476:	38 f0       	brcs	.+14     	; 0x1486 <__divsf3_pse+0x26>
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	44 1f       	adc	r20, r20
    1482:	aa 1f       	adc	r26, r26
    1484:	a9 f3       	breq	.-22     	; 0x1470 <__divsf3_pse+0x10>
    1486:	33 d0       	rcall	.+102    	; 0x14ee <__divsf3_pse+0x8e>
    1488:	0e 2e       	mov	r0, r30
    148a:	3a f0       	brmi	.+14     	; 0x149a <__divsf3_pse+0x3a>
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	30 d0       	rcall	.+96     	; 0x14f0 <__divsf3_pse+0x90>
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	e6 95       	lsr	r30
    1496:	00 1c       	adc	r0, r0
    1498:	ca f7       	brpl	.-14     	; 0x148c <__divsf3_pse+0x2c>
    149a:	29 d0       	rcall	.+82     	; 0x14ee <__divsf3_pse+0x8e>
    149c:	fe 2f       	mov	r31, r30
    149e:	27 d0       	rcall	.+78     	; 0x14ee <__divsf3_pse+0x8e>
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	bb 1f       	adc	r27, r27
    14a8:	26 17       	cp	r18, r22
    14aa:	37 07       	cpc	r19, r23
    14ac:	48 07       	cpc	r20, r24
    14ae:	ab 07       	cpc	r26, r27
    14b0:	b0 e8       	ldi	r27, 0x80	; 128
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <__divsf3_pse+0x56>
    14b4:	bb 0b       	sbc	r27, r27
    14b6:	80 2d       	mov	r24, r0
    14b8:	bf 01       	movw	r22, r30
    14ba:	ff 27       	eor	r31, r31
    14bc:	93 58       	subi	r25, 0x83	; 131
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	2a f0       	brmi	.+10     	; 0x14cc <__divsf3_pse+0x6c>
    14c2:	9e 3f       	cpi	r25, 0xFE	; 254
    14c4:	51 05       	cpc	r21, r1
    14c6:	68 f0       	brcs	.+26     	; 0x14e2 <__divsf3_pse+0x82>
    14c8:	b6 c0       	rjmp	.+364    	; 0x1636 <__fp_inf>
    14ca:	00 c1       	rjmp	.+512    	; 0x16cc <__fp_szero>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	ec f3       	brlt	.-6      	; 0x14ca <__divsf3_pse+0x6a>
    14d0:	98 3e       	cpi	r25, 0xE8	; 232
    14d2:	dc f3       	brlt	.-10     	; 0x14ca <__divsf3_pse+0x6a>
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f7 95       	ror	r31
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__divsf3_pse+0x74>
    14e2:	88 0f       	add	r24, r24
    14e4:	91 1d       	adc	r25, r1
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret
    14ee:	e1 e0       	ldi	r30, 0x01	; 1
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	bb 1f       	adc	r27, r27
    14f8:	62 17       	cp	r22, r18
    14fa:	73 07       	cpc	r23, r19
    14fc:	84 07       	cpc	r24, r20
    14fe:	ba 07       	cpc	r27, r26
    1500:	20 f0       	brcs	.+8      	; 0x150a <__divsf3_pse+0xaa>
    1502:	62 1b       	sub	r22, r18
    1504:	73 0b       	sbc	r23, r19
    1506:	84 0b       	sbc	r24, r20
    1508:	ba 0b       	sbc	r27, r26
    150a:	ee 1f       	adc	r30, r30
    150c:	88 f7       	brcc	.-30     	; 0x14f0 <__divsf3_pse+0x90>
    150e:	e0 95       	com	r30
    1510:	08 95       	ret

00001512 <__fixsfsi>:
    1512:	04 d0       	rcall	.+8      	; 0x151c <__fixunssfsi>
    1514:	68 94       	set
    1516:	b1 11       	cpse	r27, r1
    1518:	d9 c0       	rjmp	.+434    	; 0x16cc <__fp_szero>
    151a:	08 95       	ret

0000151c <__fixunssfsi>:
    151c:	bc d0       	rcall	.+376    	; 0x1696 <__fp_splitA>
    151e:	88 f0       	brcs	.+34     	; 0x1542 <__fixunssfsi+0x26>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	90 f0       	brcs	.+36     	; 0x1548 <__fixunssfsi+0x2c>
    1524:	b9 2f       	mov	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b7 51       	subi	r27, 0x17	; 23
    152a:	a0 f0       	brcs	.+40     	; 0x1554 <__fixunssfsi+0x38>
    152c:	d1 f0       	breq	.+52     	; 0x1562 <__fixunssfsi+0x46>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a f0       	brmi	.+6      	; 0x153e <__fixunssfsi+0x22>
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__fixunssfsi+0x12>
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <__fixunssfsi+0x46>
    153e:	b1 30       	cpi	r27, 0x01	; 1
    1540:	81 f0       	breq	.+32     	; 0x1562 <__fixunssfsi+0x46>
    1542:	c3 d0       	rcall	.+390    	; 0x16ca <__fp_zero>
    1544:	b1 e0       	ldi	r27, 0x01	; 1
    1546:	08 95       	ret
    1548:	c0 c0       	rjmp	.+384    	; 0x16ca <__fp_zero>
    154a:	67 2f       	mov	r22, r23
    154c:	78 2f       	mov	r23, r24
    154e:	88 27       	eor	r24, r24
    1550:	b8 5f       	subi	r27, 0xF8	; 248
    1552:	39 f0       	breq	.+14     	; 0x1562 <__fixunssfsi+0x46>
    1554:	b9 3f       	cpi	r27, 0xF9	; 249
    1556:	cc f3       	brlt	.-14     	; 0x154a <__fixunssfsi+0x2e>
    1558:	86 95       	lsr	r24
    155a:	77 95       	ror	r23
    155c:	67 95       	ror	r22
    155e:	b3 95       	inc	r27
    1560:	d9 f7       	brne	.-10     	; 0x1558 <__fixunssfsi+0x3c>
    1562:	3e f4       	brtc	.+14     	; 0x1572 <__fixunssfsi+0x56>
    1564:	90 95       	com	r25
    1566:	80 95       	com	r24
    1568:	70 95       	com	r23
    156a:	61 95       	neg	r22
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	08 95       	ret

00001574 <__floatunsisf>:
    1574:	e8 94       	clt
    1576:	09 c0       	rjmp	.+18     	; 0x158a <__floatsisf+0x12>

00001578 <__floatsisf>:
    1578:	97 fb       	bst	r25, 7
    157a:	3e f4       	brtc	.+14     	; 0x158a <__floatsisf+0x12>
    157c:	90 95       	com	r25
    157e:	80 95       	com	r24
    1580:	70 95       	com	r23
    1582:	61 95       	neg	r22
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	99 23       	and	r25, r25
    158c:	a9 f0       	breq	.+42     	; 0x15b8 <__floatsisf+0x40>
    158e:	f9 2f       	mov	r31, r25
    1590:	96 e9       	ldi	r25, 0x96	; 150
    1592:	bb 27       	eor	r27, r27
    1594:	93 95       	inc	r25
    1596:	f6 95       	lsr	r31
    1598:	87 95       	ror	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b7 95       	ror	r27
    15a0:	f1 11       	cpse	r31, r1
    15a2:	f8 cf       	rjmp	.-16     	; 0x1594 <__floatsisf+0x1c>
    15a4:	fa f4       	brpl	.+62     	; 0x15e4 <__floatsisf+0x6c>
    15a6:	bb 0f       	add	r27, r27
    15a8:	11 f4       	brne	.+4      	; 0x15ae <__floatsisf+0x36>
    15aa:	60 ff       	sbrs	r22, 0
    15ac:	1b c0       	rjmp	.+54     	; 0x15e4 <__floatsisf+0x6c>
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	8f 4f       	sbci	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	16 c0       	rjmp	.+44     	; 0x15e4 <__floatsisf+0x6c>
    15b8:	88 23       	and	r24, r24
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <__floatsisf+0x48>
    15bc:	96 e9       	ldi	r25, 0x96	; 150
    15be:	11 c0       	rjmp	.+34     	; 0x15e2 <__floatsisf+0x6a>
    15c0:	77 23       	and	r23, r23
    15c2:	21 f0       	breq	.+8      	; 0x15cc <__floatsisf+0x54>
    15c4:	9e e8       	ldi	r25, 0x8E	; 142
    15c6:	87 2f       	mov	r24, r23
    15c8:	76 2f       	mov	r23, r22
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <__floatsisf+0x5e>
    15cc:	66 23       	and	r22, r22
    15ce:	71 f0       	breq	.+28     	; 0x15ec <__floatsisf+0x74>
    15d0:	96 e8       	ldi	r25, 0x86	; 134
    15d2:	86 2f       	mov	r24, r22
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	2a f0       	brmi	.+10     	; 0x15e4 <__floatsisf+0x6c>
    15da:	9a 95       	dec	r25
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	da f7       	brpl	.-10     	; 0x15da <__floatsisf+0x62>
    15e4:	88 0f       	add	r24, r24
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	97 f9       	bld	r25, 7
    15ec:	08 95       	ret

000015ee <__fp_cmp>:
    15ee:	99 0f       	add	r25, r25
    15f0:	00 08       	sbc	r0, r0
    15f2:	55 0f       	add	r21, r21
    15f4:	aa 0b       	sbc	r26, r26
    15f6:	e0 e8       	ldi	r30, 0x80	; 128
    15f8:	fe ef       	ldi	r31, 0xFE	; 254
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	e8 07       	cpc	r30, r24
    1600:	f9 07       	cpc	r31, r25
    1602:	c0 f0       	brcs	.+48     	; 0x1634 <__fp_cmp+0x46>
    1604:	12 16       	cp	r1, r18
    1606:	13 06       	cpc	r1, r19
    1608:	e4 07       	cpc	r30, r20
    160a:	f5 07       	cpc	r31, r21
    160c:	98 f0       	brcs	.+38     	; 0x1634 <__fp_cmp+0x46>
    160e:	62 1b       	sub	r22, r18
    1610:	73 0b       	sbc	r23, r19
    1612:	84 0b       	sbc	r24, r20
    1614:	95 0b       	sbc	r25, r21
    1616:	39 f4       	brne	.+14     	; 0x1626 <__fp_cmp+0x38>
    1618:	0a 26       	eor	r0, r26
    161a:	61 f0       	breq	.+24     	; 0x1634 <__fp_cmp+0x46>
    161c:	23 2b       	or	r18, r19
    161e:	24 2b       	or	r18, r20
    1620:	25 2b       	or	r18, r21
    1622:	21 f4       	brne	.+8      	; 0x162c <__fp_cmp+0x3e>
    1624:	08 95       	ret
    1626:	0a 26       	eor	r0, r26
    1628:	09 f4       	brne	.+2      	; 0x162c <__fp_cmp+0x3e>
    162a:	a1 40       	sbci	r26, 0x01	; 1
    162c:	a6 95       	lsr	r26
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	81 1d       	adc	r24, r1
    1632:	81 1d       	adc	r24, r1
    1634:	08 95       	ret

00001636 <__fp_inf>:
    1636:	97 f9       	bld	r25, 7
    1638:	9f 67       	ori	r25, 0x7F	; 127
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	08 95       	ret

00001642 <__fp_nan>:
    1642:	9f ef       	ldi	r25, 0xFF	; 255
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	08 95       	ret

00001648 <__fp_pscA>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	16 16       	cp	r1, r22
    164e:	17 06       	cpc	r1, r23
    1650:	18 06       	cpc	r1, r24
    1652:	09 06       	cpc	r0, r25
    1654:	08 95       	ret

00001656 <__fp_pscB>:
    1656:	00 24       	eor	r0, r0
    1658:	0a 94       	dec	r0
    165a:	12 16       	cp	r1, r18
    165c:	13 06       	cpc	r1, r19
    165e:	14 06       	cpc	r1, r20
    1660:	05 06       	cpc	r0, r21
    1662:	08 95       	ret

00001664 <__fp_round>:
    1664:	09 2e       	mov	r0, r25
    1666:	03 94       	inc	r0
    1668:	00 0c       	add	r0, r0
    166a:	11 f4       	brne	.+4      	; 0x1670 <__fp_round+0xc>
    166c:	88 23       	and	r24, r24
    166e:	52 f0       	brmi	.+20     	; 0x1684 <__fp_round+0x20>
    1670:	bb 0f       	add	r27, r27
    1672:	40 f4       	brcc	.+16     	; 0x1684 <__fp_round+0x20>
    1674:	bf 2b       	or	r27, r31
    1676:	11 f4       	brne	.+4      	; 0x167c <__fp_round+0x18>
    1678:	60 ff       	sbrs	r22, 0
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <__fp_round+0x20>
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__fp_split3>:
    1686:	57 fd       	sbrc	r21, 7
    1688:	90 58       	subi	r25, 0x80	; 128
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	59 f0       	breq	.+22     	; 0x16a6 <__fp_splitA+0x10>
    1690:	5f 3f       	cpi	r21, 0xFF	; 255
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__fp_splitA+0x1a>
    1694:	47 95       	ror	r20

00001696 <__fp_splitA>:
    1696:	88 0f       	add	r24, r24
    1698:	97 fb       	bst	r25, 7
    169a:	99 1f       	adc	r25, r25
    169c:	61 f0       	breq	.+24     	; 0x16b6 <__fp_splitA+0x20>
    169e:	9f 3f       	cpi	r25, 0xFF	; 255
    16a0:	79 f0       	breq	.+30     	; 0x16c0 <__fp_splitA+0x2a>
    16a2:	87 95       	ror	r24
    16a4:	08 95       	ret
    16a6:	12 16       	cp	r1, r18
    16a8:	13 06       	cpc	r1, r19
    16aa:	14 06       	cpc	r1, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <__fp_split3+0xe>
    16b0:	46 95       	lsr	r20
    16b2:	f1 df       	rcall	.-30     	; 0x1696 <__fp_splitA>
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <__fp_splitA+0x30>
    16b6:	16 16       	cp	r1, r22
    16b8:	17 06       	cpc	r1, r23
    16ba:	18 06       	cpc	r1, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	f1 cf       	rjmp	.-30     	; 0x16a2 <__fp_splitA+0xc>
    16c0:	86 95       	lsr	r24
    16c2:	71 05       	cpc	r23, r1
    16c4:	61 05       	cpc	r22, r1
    16c6:	08 94       	sec
    16c8:	08 95       	ret

000016ca <__fp_zero>:
    16ca:	e8 94       	clt

000016cc <__fp_szero>:
    16cc:	bb 27       	eor	r27, r27
    16ce:	66 27       	eor	r22, r22
    16d0:	77 27       	eor	r23, r23
    16d2:	cb 01       	movw	r24, r22
    16d4:	97 f9       	bld	r25, 7
    16d6:	08 95       	ret

000016d8 <__gesf2>:
    16d8:	8a df       	rcall	.-236    	; 0x15ee <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__gesf2+0x6>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__mulsf3>:
    16e0:	0b d0       	rcall	.+22     	; 0x16f8 <__mulsf3x>
    16e2:	c0 cf       	rjmp	.-128    	; 0x1664 <__fp_round>
    16e4:	b1 df       	rcall	.-158    	; 0x1648 <__fp_pscA>
    16e6:	28 f0       	brcs	.+10     	; 0x16f2 <__mulsf3+0x12>
    16e8:	b6 df       	rcall	.-148    	; 0x1656 <__fp_pscB>
    16ea:	18 f0       	brcs	.+6      	; 0x16f2 <__mulsf3+0x12>
    16ec:	95 23       	and	r25, r21
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__mulsf3+0x12>
    16f0:	a2 cf       	rjmp	.-188    	; 0x1636 <__fp_inf>
    16f2:	a7 cf       	rjmp	.-178    	; 0x1642 <__fp_nan>
    16f4:	11 24       	eor	r1, r1
    16f6:	ea cf       	rjmp	.-44     	; 0x16cc <__fp_szero>

000016f8 <__mulsf3x>:
    16f8:	c6 df       	rcall	.-116    	; 0x1686 <__fp_split3>
    16fa:	a0 f3       	brcs	.-24     	; 0x16e4 <__mulsf3+0x4>

000016fc <__mulsf3_pse>:
    16fc:	95 9f       	mul	r25, r21
    16fe:	d1 f3       	breq	.-12     	; 0x16f4 <__mulsf3+0x14>
    1700:	95 0f       	add	r25, r21
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	55 1f       	adc	r21, r21
    1706:	62 9f       	mul	r22, r18
    1708:	f0 01       	movw	r30, r0
    170a:	72 9f       	mul	r23, r18
    170c:	bb 27       	eor	r27, r27
    170e:	f0 0d       	add	r31, r0
    1710:	b1 1d       	adc	r27, r1
    1712:	63 9f       	mul	r22, r19
    1714:	aa 27       	eor	r26, r26
    1716:	f0 0d       	add	r31, r0
    1718:	b1 1d       	adc	r27, r1
    171a:	aa 1f       	adc	r26, r26
    171c:	64 9f       	mul	r22, r20
    171e:	66 27       	eor	r22, r22
    1720:	b0 0d       	add	r27, r0
    1722:	a1 1d       	adc	r26, r1
    1724:	66 1f       	adc	r22, r22
    1726:	82 9f       	mul	r24, r18
    1728:	22 27       	eor	r18, r18
    172a:	b0 0d       	add	r27, r0
    172c:	a1 1d       	adc	r26, r1
    172e:	62 1f       	adc	r22, r18
    1730:	73 9f       	mul	r23, r19
    1732:	b0 0d       	add	r27, r0
    1734:	a1 1d       	adc	r26, r1
    1736:	62 1f       	adc	r22, r18
    1738:	83 9f       	mul	r24, r19
    173a:	a0 0d       	add	r26, r0
    173c:	61 1d       	adc	r22, r1
    173e:	22 1f       	adc	r18, r18
    1740:	74 9f       	mul	r23, r20
    1742:	33 27       	eor	r19, r19
    1744:	a0 0d       	add	r26, r0
    1746:	61 1d       	adc	r22, r1
    1748:	23 1f       	adc	r18, r19
    174a:	84 9f       	mul	r24, r20
    174c:	60 0d       	add	r22, r0
    174e:	21 1d       	adc	r18, r1
    1750:	82 2f       	mov	r24, r18
    1752:	76 2f       	mov	r23, r22
    1754:	6a 2f       	mov	r22, r26
    1756:	11 24       	eor	r1, r1
    1758:	9f 57       	subi	r25, 0x7F	; 127
    175a:	50 40       	sbci	r21, 0x00	; 0
    175c:	8a f0       	brmi	.+34     	; 0x1780 <__mulsf3_pse+0x84>
    175e:	e1 f0       	breq	.+56     	; 0x1798 <__mulsf3_pse+0x9c>
    1760:	88 23       	and	r24, r24
    1762:	4a f0       	brmi	.+18     	; 0x1776 <__mulsf3_pse+0x7a>
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	bb 1f       	adc	r27, r27
    176a:	66 1f       	adc	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	88 1f       	adc	r24, r24
    1770:	91 50       	subi	r25, 0x01	; 1
    1772:	50 40       	sbci	r21, 0x00	; 0
    1774:	a9 f7       	brne	.-22     	; 0x1760 <__mulsf3_pse+0x64>
    1776:	9e 3f       	cpi	r25, 0xFE	; 254
    1778:	51 05       	cpc	r21, r1
    177a:	70 f0       	brcs	.+28     	; 0x1798 <__mulsf3_pse+0x9c>
    177c:	5c cf       	rjmp	.-328    	; 0x1636 <__fp_inf>
    177e:	a6 cf       	rjmp	.-180    	; 0x16cc <__fp_szero>
    1780:	5f 3f       	cpi	r21, 0xFF	; 255
    1782:	ec f3       	brlt	.-6      	; 0x177e <__mulsf3_pse+0x82>
    1784:	98 3e       	cpi	r25, 0xE8	; 232
    1786:	dc f3       	brlt	.-10     	; 0x177e <__mulsf3_pse+0x82>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b7 95       	ror	r27
    1790:	f7 95       	ror	r31
    1792:	e7 95       	ror	r30
    1794:	9f 5f       	subi	r25, 0xFF	; 255
    1796:	c1 f7       	brne	.-16     	; 0x1788 <__mulsf3_pse+0x8c>
    1798:	fe 2b       	or	r31, r30
    179a:	88 0f       	add	r24, r24
    179c:	91 1d       	adc	r25, r1
    179e:	96 95       	lsr	r25
    17a0:	87 95       	ror	r24
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <calloc>:
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	68 9f       	mul	r22, r24
    17b0:	80 01       	movw	r16, r0
    17b2:	69 9f       	mul	r22, r25
    17b4:	10 0d       	add	r17, r0
    17b6:	78 9f       	mul	r23, r24
    17b8:	10 0d       	add	r17, r0
    17ba:	11 24       	eor	r1, r1
    17bc:	c8 01       	movw	r24, r16
    17be:	0d d0       	rcall	.+26     	; 0x17da <malloc>
    17c0:	ec 01       	movw	r28, r24
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	21 f0       	breq	.+8      	; 0x17ce <calloc+0x28>
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	a8 01       	movw	r20, r16
    17cc:	0b d1       	rcall	.+534    	; 0x19e4 <memset>
    17ce:	ce 01       	movw	r24, r28
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	08 95       	ret

000017da <malloc>:
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	bc 01       	movw	r22, r24
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	10 f4       	brcc	.+4      	; 0x17ea <malloc+0x10>
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	a0 91 49 02 	lds	r26, 0x0249
    17ee:	b0 91 4a 02 	lds	r27, 0x024A
    17f2:	ed 01       	movw	r28, r26
    17f4:	e0 e0       	ldi	r30, 0x00	; 0
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	21 c0       	rjmp	.+66     	; 0x1840 <malloc+0x66>
    17fe:	88 81       	ld	r24, Y
    1800:	99 81       	ldd	r25, Y+1	; 0x01
    1802:	86 17       	cp	r24, r22
    1804:	97 07       	cpc	r25, r23
    1806:	69 f4       	brne	.+26     	; 0x1822 <malloc+0x48>
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	30 97       	sbiw	r30, 0x00	; 0
    180e:	19 f0       	breq	.+6      	; 0x1816 <malloc+0x3c>
    1810:	93 83       	std	Z+3, r25	; 0x03
    1812:	82 83       	std	Z+2, r24	; 0x02
    1814:	04 c0       	rjmp	.+8      	; 0x181e <malloc+0x44>
    1816:	90 93 4a 02 	sts	0x024A, r25
    181a:	80 93 49 02 	sts	0x0249, r24
    181e:	fe 01       	movw	r30, r28
    1820:	34 c0       	rjmp	.+104    	; 0x188a <malloc+0xb0>
    1822:	68 17       	cp	r22, r24
    1824:	79 07       	cpc	r23, r25
    1826:	38 f4       	brcc	.+14     	; 0x1836 <malloc+0x5c>
    1828:	41 15       	cp	r20, r1
    182a:	51 05       	cpc	r21, r1
    182c:	19 f0       	breq	.+6      	; 0x1834 <malloc+0x5a>
    182e:	84 17       	cp	r24, r20
    1830:	95 07       	cpc	r25, r21
    1832:	08 f4       	brcc	.+2      	; 0x1836 <malloc+0x5c>
    1834:	ac 01       	movw	r20, r24
    1836:	fe 01       	movw	r30, r28
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	9c 01       	movw	r18, r24
    183e:	e9 01       	movw	r28, r18
    1840:	20 97       	sbiw	r28, 0x00	; 0
    1842:	e9 f6       	brne	.-70     	; 0x17fe <malloc+0x24>
    1844:	41 15       	cp	r20, r1
    1846:	51 05       	cpc	r21, r1
    1848:	a9 f1       	breq	.+106    	; 0x18b4 <malloc+0xda>
    184a:	ca 01       	movw	r24, r20
    184c:	86 1b       	sub	r24, r22
    184e:	97 0b       	sbc	r25, r23
    1850:	04 97       	sbiw	r24, 0x04	; 4
    1852:	08 f4       	brcc	.+2      	; 0x1856 <malloc+0x7c>
    1854:	ba 01       	movw	r22, r20
    1856:	e0 e0       	ldi	r30, 0x00	; 0
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	2a c0       	rjmp	.+84     	; 0x18b0 <malloc+0xd6>
    185c:	8d 91       	ld	r24, X+
    185e:	9c 91       	ld	r25, X
    1860:	11 97       	sbiw	r26, 0x01	; 1
    1862:	84 17       	cp	r24, r20
    1864:	95 07       	cpc	r25, r21
    1866:	f9 f4       	brne	.+62     	; 0x18a6 <malloc+0xcc>
    1868:	64 17       	cp	r22, r20
    186a:	75 07       	cpc	r23, r21
    186c:	81 f4       	brne	.+32     	; 0x188e <malloc+0xb4>
    186e:	12 96       	adiw	r26, 0x02	; 2
    1870:	8d 91       	ld	r24, X+
    1872:	9c 91       	ld	r25, X
    1874:	13 97       	sbiw	r26, 0x03	; 3
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	19 f0       	breq	.+6      	; 0x1880 <malloc+0xa6>
    187a:	93 83       	std	Z+3, r25	; 0x03
    187c:	82 83       	std	Z+2, r24	; 0x02
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <malloc+0xae>
    1880:	90 93 4a 02 	sts	0x024A, r25
    1884:	80 93 49 02 	sts	0x0249, r24
    1888:	fd 01       	movw	r30, r26
    188a:	32 96       	adiw	r30, 0x02	; 2
    188c:	4f c0       	rjmp	.+158    	; 0x192c <malloc+0x152>
    188e:	ca 01       	movw	r24, r20
    1890:	86 1b       	sub	r24, r22
    1892:	97 0b       	sbc	r25, r23
    1894:	fd 01       	movw	r30, r26
    1896:	e8 0f       	add	r30, r24
    1898:	f9 1f       	adc	r31, r25
    189a:	61 93       	st	Z+, r22
    189c:	71 93       	st	Z+, r23
    189e:	02 97       	sbiw	r24, 0x02	; 2
    18a0:	8d 93       	st	X+, r24
    18a2:	9c 93       	st	X, r25
    18a4:	43 c0       	rjmp	.+134    	; 0x192c <malloc+0x152>
    18a6:	fd 01       	movw	r30, r26
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	9c 01       	movw	r18, r24
    18ae:	d9 01       	movw	r26, r18
    18b0:	10 97       	sbiw	r26, 0x00	; 0
    18b2:	a1 f6       	brne	.-88     	; 0x185c <malloc+0x82>
    18b4:	80 91 47 02 	lds	r24, 0x0247
    18b8:	90 91 48 02 	lds	r25, 0x0248
    18bc:	89 2b       	or	r24, r25
    18be:	41 f4       	brne	.+16     	; 0x18d0 <malloc+0xf6>
    18c0:	80 91 02 01 	lds	r24, 0x0102
    18c4:	90 91 03 01 	lds	r25, 0x0103
    18c8:	90 93 48 02 	sts	0x0248, r25
    18cc:	80 93 47 02 	sts	0x0247, r24
    18d0:	40 91 04 01 	lds	r20, 0x0104
    18d4:	50 91 05 01 	lds	r21, 0x0105
    18d8:	41 15       	cp	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	41 f4       	brne	.+16     	; 0x18ee <malloc+0x114>
    18de:	4d b7       	in	r20, 0x3d	; 61
    18e0:	5e b7       	in	r21, 0x3e	; 62
    18e2:	80 91 00 01 	lds	r24, 0x0100
    18e6:	90 91 01 01 	lds	r25, 0x0101
    18ea:	48 1b       	sub	r20, r24
    18ec:	59 0b       	sbc	r21, r25
    18ee:	20 91 47 02 	lds	r18, 0x0247
    18f2:	30 91 48 02 	lds	r19, 0x0248
    18f6:	24 17       	cp	r18, r20
    18f8:	35 07       	cpc	r19, r21
    18fa:	b0 f4       	brcc	.+44     	; 0x1928 <malloc+0x14e>
    18fc:	ca 01       	movw	r24, r20
    18fe:	82 1b       	sub	r24, r18
    1900:	93 0b       	sbc	r25, r19
    1902:	86 17       	cp	r24, r22
    1904:	97 07       	cpc	r25, r23
    1906:	80 f0       	brcs	.+32     	; 0x1928 <malloc+0x14e>
    1908:	ab 01       	movw	r20, r22
    190a:	4e 5f       	subi	r20, 0xFE	; 254
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	84 17       	cp	r24, r20
    1910:	95 07       	cpc	r25, r21
    1912:	50 f0       	brcs	.+20     	; 0x1928 <malloc+0x14e>
    1914:	42 0f       	add	r20, r18
    1916:	53 1f       	adc	r21, r19
    1918:	50 93 48 02 	sts	0x0248, r21
    191c:	40 93 47 02 	sts	0x0247, r20
    1920:	f9 01       	movw	r30, r18
    1922:	61 93       	st	Z+, r22
    1924:	71 93       	st	Z+, r23
    1926:	02 c0       	rjmp	.+4      	; 0x192c <malloc+0x152>
    1928:	e0 e0       	ldi	r30, 0x00	; 0
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	cf 01       	movw	r24, r30
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <free>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	09 f4       	brne	.+2      	; 0x193e <free+0xa>
    193c:	50 c0       	rjmp	.+160    	; 0x19de <free+0xaa>
    193e:	ec 01       	movw	r28, r24
    1940:	22 97       	sbiw	r28, 0x02	; 2
    1942:	1b 82       	std	Y+3, r1	; 0x03
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	a0 91 49 02 	lds	r26, 0x0249
    194a:	b0 91 4a 02 	lds	r27, 0x024A
    194e:	10 97       	sbiw	r26, 0x00	; 0
    1950:	09 f1       	breq	.+66     	; 0x1994 <free+0x60>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	ac 17       	cp	r26, r28
    1958:	bd 07       	cpc	r27, r29
    195a:	08 f1       	brcs	.+66     	; 0x199e <free+0x6a>
    195c:	bb 83       	std	Y+3, r27	; 0x03
    195e:	aa 83       	std	Y+2, r26	; 0x02
    1960:	fe 01       	movw	r30, r28
    1962:	21 91       	ld	r18, Z+
    1964:	31 91       	ld	r19, Z+
    1966:	e2 0f       	add	r30, r18
    1968:	f3 1f       	adc	r31, r19
    196a:	ae 17       	cp	r26, r30
    196c:	bf 07       	cpc	r27, r31
    196e:	79 f4       	brne	.+30     	; 0x198e <free+0x5a>
    1970:	8d 91       	ld	r24, X+
    1972:	9c 91       	ld	r25, X
    1974:	11 97       	sbiw	r26, 0x01	; 1
    1976:	28 0f       	add	r18, r24
    1978:	39 1f       	adc	r19, r25
    197a:	2e 5f       	subi	r18, 0xFE	; 254
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	39 83       	std	Y+1, r19	; 0x01
    1980:	28 83       	st	Y, r18
    1982:	12 96       	adiw	r26, 0x02	; 2
    1984:	8d 91       	ld	r24, X+
    1986:	9c 91       	ld	r25, X
    1988:	13 97       	sbiw	r26, 0x03	; 3
    198a:	9b 83       	std	Y+3, r25	; 0x03
    198c:	8a 83       	std	Y+2, r24	; 0x02
    198e:	41 15       	cp	r20, r1
    1990:	51 05       	cpc	r21, r1
    1992:	71 f4       	brne	.+28     	; 0x19b0 <free+0x7c>
    1994:	d0 93 4a 02 	sts	0x024A, r29
    1998:	c0 93 49 02 	sts	0x0249, r28
    199c:	20 c0       	rjmp	.+64     	; 0x19de <free+0xaa>
    199e:	12 96       	adiw	r26, 0x02	; 2
    19a0:	8d 91       	ld	r24, X+
    19a2:	9c 91       	ld	r25, X
    19a4:	13 97       	sbiw	r26, 0x03	; 3
    19a6:	ad 01       	movw	r20, r26
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <free+0x7c>
    19ac:	dc 01       	movw	r26, r24
    19ae:	d3 cf       	rjmp	.-90     	; 0x1956 <free+0x22>
    19b0:	fa 01       	movw	r30, r20
    19b2:	d3 83       	std	Z+3, r29	; 0x03
    19b4:	c2 83       	std	Z+2, r28	; 0x02
    19b6:	21 91       	ld	r18, Z+
    19b8:	31 91       	ld	r19, Z+
    19ba:	e2 0f       	add	r30, r18
    19bc:	f3 1f       	adc	r31, r19
    19be:	ce 17       	cp	r28, r30
    19c0:	df 07       	cpc	r29, r31
    19c2:	69 f4       	brne	.+26     	; 0x19de <free+0xaa>
    19c4:	88 81       	ld	r24, Y
    19c6:	99 81       	ldd	r25, Y+1	; 0x01
    19c8:	28 0f       	add	r18, r24
    19ca:	39 1f       	adc	r19, r25
    19cc:	2e 5f       	subi	r18, 0xFE	; 254
    19ce:	3f 4f       	sbci	r19, 0xFF	; 255
    19d0:	fa 01       	movw	r30, r20
    19d2:	31 83       	std	Z+1, r19	; 0x01
    19d4:	20 83       	st	Z, r18
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	93 83       	std	Z+3, r25	; 0x03
    19dc:	82 83       	std	Z+2, r24	; 0x02
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <memset>:
    19e4:	dc 01       	movw	r26, r24
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <memset+0x6>
    19e8:	6d 93       	st	X+, r22
    19ea:	41 50       	subi	r20, 0x01	; 1
    19ec:	50 40       	sbci	r21, 0x00	; 0
    19ee:	e0 f7       	brcc	.-8      	; 0x19e8 <memset+0x4>
    19f0:	08 95       	ret

000019f2 <_exit>:
    19f2:	f8 94       	cli

000019f4 <__stop_program>:
    19f4:	ff cf       	rjmp	.-2      	; 0x19f4 <__stop_program>
