
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002d36  00002dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014d  0080011c  0080011c  00002de6  2**0
                  ALLOC
  3 .debug_aranges 000002d8  00000000  00000000  00002de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005ed  00000000  00000000  000030be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dc9  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a11  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002043  00000000  00000000  00005e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00007ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e9  00000000  00000000  00008358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  00008c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
	if(sys_time >= 80000)
		actuators_umbrella();
	sys_time++;
}
uint8_t system_jumper_check(void)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c1 c4       	rjmp	.+2434   	; 0x9cc <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 46 12 	jmp	0x248c	; 0x248c <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e3       	ldi	r30, 0x36	; 54
      a8:	fd e2       	ldi	r31, 0x2D	; 45
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a9 36       	cpi	r26, 0x69	; 105
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	c4 d0       	rcall	.+392    	; 0x254 <main>
      cc:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <beginning_move>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

void beginning_move(int side)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	9a 8b       	std	Y+18, r25	; 0x12
      e8:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	
	odometry_move_straight(160,LOW_SPEED,NULL);
      ea:	80 ea       	ldi	r24, 0xA0	; 160
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	6e e1       	ldi	r22, 0x1E	; 30
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	0e 94 44 0c 	call	0x1888	; 0x1888 <odometry_move_straight>
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	a8 ec       	ldi	r26, 0xC8	; 200
      fe:	b2 e4       	ldi	r27, 0x42	; 66
     100:	8b 87       	std	Y+11, r24	; 0x0b
     102:	9c 87       	std	Y+12, r25	; 0x0c
     104:	ad 87       	std	Y+13, r26	; 0x0d
     106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     108:	6b 85       	ldd	r22, Y+11	; 0x0b
     10a:	7c 85       	ldd	r23, Y+12	; 0x0c
     10c:	8d 85       	ldd	r24, Y+13	; 0x0d
     10e:	9e 85       	ldd	r25, Y+14	; 0x0e
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e4       	ldi	r19, 0x40	; 64
     114:	4c e1       	ldi	r20, 0x1C	; 28
     116:	55 e4       	ldi	r21, 0x45	; 69
     118:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	8f 83       	std	Y+7, r24	; 0x07
     122:	98 87       	std	Y+8, r25	; 0x08
     124:	a9 87       	std	Y+9, r26	; 0x09
     126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     128:	6f 81       	ldd	r22, Y+7	; 0x07
     12a:	78 85       	ldd	r23, Y+8	; 0x08
     12c:	89 85       	ldd	r24, Y+9	; 0x09
     12e:	9a 85       	ldd	r25, Y+10	; 0x0a
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	40 e8       	ldi	r20, 0x80	; 128
     136:	5f e3       	ldi	r21, 0x3F	; 63
     138:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
     13c:	88 23       	and	r24, r24
     13e:	2c f4       	brge	.+10     	; 0x14a <beginning_move+0x78>
		__ticks = 1;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9e 83       	std	Y+6, r25	; 0x06
     146:	8d 83       	std	Y+5, r24	; 0x05
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <beginning_move+0xf6>
	else if (__tmp > 65535)
     14a:	6f 81       	ldd	r22, Y+7	; 0x07
     14c:	78 85       	ldd	r23, Y+8	; 0x08
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	9a 85       	ldd	r25, Y+10	; 0x0a
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	3f ef       	ldi	r19, 0xFF	; 255
     156:	4f e7       	ldi	r20, 0x7F	; 127
     158:	57 e4       	ldi	r21, 0x47	; 71
     15a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
     15e:	18 16       	cp	r1, r24
     160:	4c f5       	brge	.+82     	; 0x1b4 <beginning_move+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     162:	6b 85       	ldd	r22, Y+11	; 0x0b
     164:	7c 85       	ldd	r23, Y+12	; 0x0c
     166:	8d 85       	ldd	r24, Y+13	; 0x0d
     168:	9e 85       	ldd	r25, Y+14	; 0x0e
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e2       	ldi	r20, 0x20	; 32
     170:	51 e4       	ldi	r21, 0x41	; 65
     172:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	bc 01       	movw	r22, r24
     17c:	cd 01       	movw	r24, r26
     17e:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	9e 83       	std	Y+6, r25	; 0x06
     188:	8d 83       	std	Y+5, r24	; 0x05
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <beginning_move+0xd8>
     18c:	8a ef       	ldi	r24, 0xFA	; 250
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9c 83       	std	Y+4, r25	; 0x04
     192:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     194:	8b 81       	ldd	r24, Y+3	; 0x03
     196:	9c 81       	ldd	r25, Y+4	; 0x04
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <beginning_move+0xc6>
     19c:	9c 83       	std	Y+4, r25	; 0x04
     19e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	9e 83       	std	Y+6, r25	; 0x06
     1a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1aa:	8d 81       	ldd	r24, Y+5	; 0x05
     1ac:	9e 81       	ldd	r25, Y+6	; 0x06
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	69 f7       	brne	.-38     	; 0x18c <beginning_move+0xba>
     1b2:	14 c0       	rjmp	.+40     	; 0x1dc <beginning_move+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b4:	6f 81       	ldd	r22, Y+7	; 0x07
     1b6:	78 85       	ldd	r23, Y+8	; 0x08
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	9e 83       	std	Y+6, r25	; 0x06
     1c6:	8d 83       	std	Y+5, r24	; 0x05
     1c8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ca:	9e 81       	ldd	r25, Y+6	; 0x06
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <beginning_move+0x102>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	odometry_move_straight(-300,LOW_SPEED,NULL);
     1dc:	84 ed       	ldi	r24, 0xD4	; 212
     1de:	9e ef       	ldi	r25, 0xFE	; 254
     1e0:	6e e1       	ldi	r22, 0x1E	; 30
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0e 94 44 0c 	call	0x1888	; 0x1888 <odometry_move_straight>
	if(side == PURPLE_SIDE)
     1ea:	89 89       	ldd	r24, Y+17	; 0x11
     1ec:	9a 89       	ldd	r25, Y+18	; 0x12
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	41 f4       	brne	.+16     	; 0x202 <beginning_move+0x130>
		odometry_rotate_for(-90,LOW_SPEED,NULL);
     1f2:	86 ea       	ldi	r24, 0xA6	; 166
     1f4:	9f ef       	ldi	r25, 0xFF	; 255
     1f6:	6e e1       	ldi	r22, 0x1E	; 30
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <odometry_rotate_for>
     200:	07 c0       	rjmp	.+14     	; 0x210 <beginning_move+0x13e>
	else
		odometry_rotate_for(-90,LOW_SPEED,NULL);
     202:	86 ea       	ldi	r24, 0xA6	; 166
     204:	9f ef       	ldi	r25, 0xFF	; 255
     206:	6e e1       	ldi	r22, 0x1E	; 30
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <odometry_rotate_for>
		
	odometry_move_straight(1015,NORMAL_SPEED,NULL);
     210:	87 ef       	ldi	r24, 0xF7	; 247
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	61 e4       	ldi	r22, 0x41	; 65
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	0e 94 44 0c 	call	0x1888	; 0x1888 <odometry_move_straight>
	odometry_move_straight(-100,NORMAL_SPEED,NULL);
     21e:	8c e9       	ldi	r24, 0x9C	; 156
     220:	9f ef       	ldi	r25, 0xFF	; 255
     222:	61 e4       	ldi	r22, 0x41	; 65
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	0e 94 44 0c 	call	0x1888	; 0x1888 <odometry_move_straight>
	odometry_rotate_for(55,NORMAL_SPEED,NULL);
     22c:	87 e3       	ldi	r24, 0x37	; 55
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	61 e4       	ldi	r22, 0x41	; 65
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <odometry_rotate_for>
	i = camera();
     23a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <camera>
     23e:	98 8b       	std	Y+16, r25	; 0x10
     240:	8f 87       	std	Y+15, r24	; 0x0f
		case 4:
			break;
		case 5:	
			break;
	}
}
     242:	62 96       	adiw	r28, 0x12	; 18
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	cf 91       	pop	r28
     250:	df 91       	pop	r29
     252:	08 95       	ret

00000254 <main>:

int main()
{
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	static bool done_camera = false;

	system_init();
     25c:	0e 94 24 11 	call	0x2248	; 0x2248 <system_init>
	
	while(1)
	{
		//put if for the side checker
		if(!done_camera)
     260:	80 91 1c 01 	lds	r24, 0x011C
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	89 27       	eor	r24, r25
     268:	88 23       	and	r24, r24
     26a:	19 f0       	breq	.+6      	; 0x272 <main+0x1e>
			beginning_move(GREEN_SIDE);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	30 df       	rcall	.-416    	; 0xd2 <beginning_move>
			done_camera = true;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 1c 01 	sts	0x011C, r24
		PORTG = 0xff;
     278:	e4 e3       	ldi	r30, 0x34	; 52
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	80 83       	st	Z, r24
		greenside();
     280:	0e 94 27 0a 	call	0x144e	; 0x144e <greenside>
     284:	ed cf       	rjmp	.-38     	; 0x260 <main+0xc>

00000286 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	00 d0       	rcall	.+0      	; 0x290 <servo_init+0xa>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	9a 83       	std	Y+2, r25	; 0x02
     296:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     298:	ad e2       	ldi	r26, 0x2D	; 45
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	ed e2       	ldi	r30, 0x2D	; 45
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	88 63       	ori	r24, 0x38	; 56
     2a4:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     2a6:	e4 e9       	ldi	r30, 0x94	; 148
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	10 82       	st	Z, r1
	OCR3A = 0;
     2ae:	e8 e9       	ldi	r30, 0x98	; 152
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	10 82       	st	Z, r1
	OCR3B = 0;
     2b6:	ea e9       	ldi	r30, 0x9A	; 154
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
	OCR3C = 0;
     2be:	ec e9       	ldi	r30, 0x9C	; 156
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     2c6:	e0 e9       	ldi	r30, 0x90	; 144
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8e eb       	ldi	r24, 0xBE	; 190
     2cc:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     2ce:	e1 e9       	ldi	r30, 0x91	; 145
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	8a e1       	ldi	r24, 0x1A	; 26
     2d4:	80 83       	st	Z, r24
	
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     2d6:	06 e9       	ldi	r16, 0x96	; 150
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	cc 01       	movw	r24, r24
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatunsisf>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	51 e4       	ldi	r21, 0x41	; 65
     2fc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	9c 01       	movw	r18, r24
     306:	ad 01       	movw	r20, r26
     308:	60 e8       	ldi	r22, 0x80	; 128
     30a:	76 e9       	ldi	r23, 0x96	; 150
     30c:	88 e1       	ldi	r24, 0x18	; 24
     30e:	9b e4       	ldi	r25, 0x4B	; 75
     310:	0e 94 c1 13 	call	0x2782	; 0x2782 <__divsf3>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	bc 01       	movw	r22, r24
     31a:	cd 01       	movw	r24, r26
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	5f e3       	ldi	r21, 0x3F	; 63
     324:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__addsf3>
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	f8 01       	movw	r30, r16
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
}//END OF servo_init
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <servo_set_duty_cycle_umbrella>:


static void servo_set_duty_cycle_umbrella(int16_t value)
{
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	df 93       	push	r29
     356:	cf 93       	push	r28
     358:	00 d0       	rcall	.+0      	; 0x35a <servo_set_duty_cycle_umbrella+0xe>
     35a:	00 d0       	rcall	.+0      	; 0x35c <servo_set_duty_cycle_umbrella+0x10>
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	9c 83       	std	Y+4, r25	; 0x04
     362:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     364:	e6 e9       	ldi	r30, 0x96	; 150
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	cc 01       	movw	r24, r24
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatunsisf>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	4f e7       	ldi	r20, 0x7F	; 127
     388:	53 e4       	ldi	r21, 0x43	; 67
     38a:	0e 94 c1 13 	call	0x2782	; 0x2782 <__divsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	7c 01       	movw	r14, r24
     394:	8d 01       	movw	r16, r26
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	aa 27       	eor	r26, r26
     39c:	97 fd       	sbrc	r25, 7
     39e:	a0 95       	com	r26
     3a0:	ba 2f       	mov	r27, r26
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__floatsisf>
     3aa:	9b 01       	movw	r18, r22
     3ac:	ac 01       	movw	r20, r24
     3ae:	c8 01       	movw	r24, r16
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	bc 01       	movw	r22, r24
     3bc:	cd 01       	movw	r24, r26
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__addsf3>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     3de:	e9 e9       	ldi	r30, 0x99	; 153
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	89 2f       	mov	r24, r25
     3e8:	99 27       	eor	r25, r25
     3ea:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     3ec:	e8 e9       	ldi	r30, 0x98	; 152
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	80 83       	st	Z, r24
}
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	cf 91       	pop	r28
     3fe:	df 91       	pop	r29
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	08 95       	ret

0000040a <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	00 d0       	rcall	.+0      	; 0x418 <servo_set_duty_cycle_door+0xe>
     418:	00 d0       	rcall	.+0      	; 0x41a <servo_set_duty_cycle_door+0x10>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	9c 83       	std	Y+4, r25	; 0x04
     420:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     422:	e6 e9       	ldi	r30, 0x96	; 150
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	cc 01       	movw	r24, r24
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	bc 01       	movw	r22, r24
     432:	cd 01       	movw	r24, r26
     434:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatunsisf>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	4f e7       	ldi	r20, 0x7F	; 127
     446:	53 e4       	ldi	r21, 0x43	; 67
     448:	0e 94 c1 13 	call	0x2782	; 0x2782 <__divsf3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	7c 01       	movw	r14, r24
     452:	8d 01       	movw	r16, r26
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	aa 27       	eor	r26, r26
     45a:	97 fd       	sbrc	r25, 7
     45c:	a0 95       	com	r26
     45e:	ba 2f       	mov	r27, r26
     460:	bc 01       	movw	r22, r24
     462:	cd 01       	movw	r24, r26
     464:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__floatsisf>
     468:	9b 01       	movw	r18, r22
     46a:	ac 01       	movw	r20, r24
     46c:	c8 01       	movw	r24, r16
     46e:	b7 01       	movw	r22, r14
     470:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__addsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     49c:	eb e9       	ldi	r30, 0x9B	; 155
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	89 2f       	mov	r24, r25
     4a6:	99 27       	eor	r25, r25
     4a8:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     4aa:	ea e9       	ldi	r30, 0x9A	; 154
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	80 83       	st	Z, r24
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	08 95       	ret

000004c8 <servo_set_umbrella_position>:
}



void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     4c8:	df 93       	push	r29
     4ca:	cf 93       	push	r28
     4cc:	0f 92       	push	r0
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	99 27       	eor	r25, r25
     4d8:	87 fd       	sbrc	r24, 7
     4da:	90 95       	com	r25
     4dc:	a9 2f       	mov	r26, r25
     4de:	b9 2f       	mov	r27, r25
     4e0:	bc 01       	movw	r22, r24
     4e2:	cd 01       	movw	r24, r26
     4e4:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__floatsisf>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	bc 01       	movw	r22, r24
     4ee:	cd 01       	movw	r24, r26
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	44 eb       	ldi	r20, 0xB4	; 180
     4f6:	52 e4       	ldi	r21, 0x42	; 66
     4f8:	0e 94 c1 13 	call	0x2782	; 0x2782 <__divsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	bc 01       	movw	r22, r24
     502:	cd 01       	movw	r24, r26
     504:	26 e6       	ldi	r18, 0x66	; 102
     506:	36 e6       	ldi	r19, 0x66	; 102
     508:	46 e3       	ldi	r20, 0x36	; 54
     50a:	51 ec       	ldi	r21, 0xC1	; 193
     50c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	bc 01       	movw	r22, r24
     516:	cd 01       	movw	r24, r26
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4c e6       	ldi	r20, 0x6C	; 108
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__addsf3>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	9c 01       	movw	r18, r24
     52a:	ad 01       	movw	r20, r26
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	8f e7       	ldi	r24, 0x7F	; 127
     532:	93 e4       	ldi	r25, 0x43	; 67
     534:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__subsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	0e 94 29 14 	call	0x2852	; 0x2852 <__fixsfsi>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	01 df       	rcall	.-510    	; 0x34c <servo_set_duty_cycle_umbrella>

}
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	0f 92       	push	r0
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	99 27       	eor	r25, r25
     562:	87 fd       	sbrc	r24, 7
     564:	90 95       	com	r25
     566:	a9 2f       	mov	r26, r25
     568:	b9 2f       	mov	r27, r25
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__floatsisf>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	bc 01       	movw	r22, r24
     578:	cd 01       	movw	r24, r26
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	44 eb       	ldi	r20, 0xB4	; 180
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	0e 94 c1 13 	call	0x2782	; 0x2782 <__divsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	bc 01       	movw	r22, r24
     58c:	cd 01       	movw	r24, r26
     58e:	26 e6       	ldi	r18, 0x66	; 102
     590:	36 e6       	ldi	r19, 0x66	; 102
     592:	46 e3       	ldi	r20, 0x36	; 54
     594:	51 ec       	ldi	r21, 0xC1	; 193
     596:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4c e6       	ldi	r20, 0x6C	; 108
     5a8:	53 e4       	ldi	r21, 0x43	; 67
     5aa:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__addsf3>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	9c 01       	movw	r18, r24
     5b4:	ad 01       	movw	r20, r26
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	8f e7       	ldi	r24, 0x7F	; 127
     5bc:	93 e4       	ldi	r25, 0x43	; 67
     5be:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__subsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	0e 94 29 14 	call	0x2852	; 0x2852 <__fixsfsi>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	1b df       	rcall	.-458    	; 0x40a <servo_set_duty_cycle_door>
}
     5d4:	0f 90       	pop	r0
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <actuators_umbrella>:
void servo_set_right_grabber_position(int8_t angle)
{
	
}
void actuators_umbrella(void)
{
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	6c 97       	sbiw	r28, 0x1c	; 28
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     5f0:	8a ea       	ldi	r24, 0xAA	; 170
     5f2:	6a df       	rcall	.-300    	; 0x4c8 <servo_set_umbrella_position>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	aa e7       	ldi	r26, 0x7A	; 122
     5fa:	b4 e4       	ldi	r27, 0x44	; 68
     5fc:	89 8f       	std	Y+25, r24	; 0x19
     5fe:	9a 8f       	std	Y+26, r25	; 0x1a
     600:	ab 8f       	std	Y+27, r26	; 0x1b
     602:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     604:	69 8d       	ldd	r22, Y+25	; 0x19
     606:	7a 8d       	ldd	r23, Y+26	; 0x1a
     608:	8b 8d       	ldd	r24, Y+27	; 0x1b
     60a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e4       	ldi	r19, 0x40	; 64
     610:	4c e1       	ldi	r20, 0x1C	; 28
     612:	55 e4       	ldi	r21, 0x45	; 69
     614:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	8d 8b       	std	Y+21, r24	; 0x15
     61e:	9e 8b       	std	Y+22, r25	; 0x16
     620:	af 8b       	std	Y+23, r26	; 0x17
     622:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     624:	6d 89       	ldd	r22, Y+21	; 0x15
     626:	7e 89       	ldd	r23, Y+22	; 0x16
     628:	8f 89       	ldd	r24, Y+23	; 0x17
     62a:	98 8d       	ldd	r25, Y+24	; 0x18
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e8       	ldi	r20, 0x80	; 128
     632:	5f e3       	ldi	r21, 0x3F	; 63
     634:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
     638:	88 23       	and	r24, r24
     63a:	2c f4       	brge	.+10     	; 0x646 <actuators_umbrella+0x6a>
		__ticks = 1;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	9c 8b       	std	Y+20, r25	; 0x14
     642:	8b 8b       	std	Y+19, r24	; 0x13
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     646:	6d 89       	ldd	r22, Y+21	; 0x15
     648:	7e 89       	ldd	r23, Y+22	; 0x16
     64a:	8f 89       	ldd	r24, Y+23	; 0x17
     64c:	98 8d       	ldd	r25, Y+24	; 0x18
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	3f ef       	ldi	r19, 0xFF	; 255
     652:	4f e7       	ldi	r20, 0x7F	; 127
     654:	57 e4       	ldi	r21, 0x47	; 71
     656:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
     65a:	18 16       	cp	r1, r24
     65c:	4c f5       	brge	.+82     	; 0x6b0 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65e:	69 8d       	ldd	r22, Y+25	; 0x19
     660:	7a 8d       	ldd	r23, Y+26	; 0x1a
     662:	8b 8d       	ldd	r24, Y+27	; 0x1b
     664:	9c 8d       	ldd	r25, Y+28	; 0x1c
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e2       	ldi	r20, 0x20	; 32
     66c:	51 e4       	ldi	r21, 0x41	; 65
     66e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	9c 8b       	std	Y+20, r25	; 0x14
     684:	8b 8b       	std	Y+19, r24	; 0x13
     686:	0f c0       	rjmp	.+30     	; 0x6a6 <actuators_umbrella+0xca>
     688:	8a ef       	ldi	r24, 0xFA	; 250
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	9a 8b       	std	Y+18, r25	; 0x12
     68e:	89 8b       	std	Y+17, r24	; 0x11
     690:	89 89       	ldd	r24, Y+17	; 0x11
     692:	9a 89       	ldd	r25, Y+18	; 0x12
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <actuators_umbrella+0xb8>
     698:	9a 8b       	std	Y+18, r25	; 0x12
     69a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     69c:	8b 89       	ldd	r24, Y+19	; 0x13
     69e:	9c 89       	ldd	r25, Y+20	; 0x14
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	9c 8b       	std	Y+20, r25	; 0x14
     6a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a6:	8b 89       	ldd	r24, Y+19	; 0x13
     6a8:	9c 89       	ldd	r25, Y+20	; 0x14
     6aa:	00 97       	sbiw	r24, 0x00	; 0
     6ac:	69 f7       	brne	.-38     	; 0x688 <actuators_umbrella+0xac>
     6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6b0:	6d 89       	ldd	r22, Y+21	; 0x15
     6b2:	7e 89       	ldd	r23, Y+22	; 0x16
     6b4:	8f 89       	ldd	r24, Y+23	; 0x17
     6b6:	98 8d       	ldd	r25, Y+24	; 0x18
     6b8:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	9c 8b       	std	Y+20, r25	; 0x14
     6c2:	8b 8b       	std	Y+19, r24	; 0x13
     6c4:	8b 89       	ldd	r24, Y+19	; 0x13
     6c6:	9c 89       	ldd	r25, Y+20	; 0x14
     6c8:	98 8b       	std	Y+16, r25	; 0x10
     6ca:	8f 87       	std	Y+15, r24	; 0x0f
     6cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ce:	98 89       	ldd	r25, Y+16	; 0x10
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <actuators_umbrella+0xf4>
     6d4:	98 8b       	std	Y+16, r25	; 0x10
     6d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	3b df       	rcall	.-394    	; 0x552 <servo_set_door_position>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	aa e7       	ldi	r26, 0x7A	; 122
     6e2:	b4 e4       	ldi	r27, 0x44	; 68
     6e4:	8b 87       	std	Y+11, r24	; 0x0b
     6e6:	9c 87       	std	Y+12, r25	; 0x0c
     6e8:	ad 87       	std	Y+13, r26	; 0x0d
     6ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     6ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     6f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e4       	ldi	r19, 0x40	; 64
     6f8:	4c e1       	ldi	r20, 0x1C	; 28
     6fa:	55 e4       	ldi	r21, 0x45	; 69
     6fc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	8f 83       	std	Y+7, r24	; 0x07
     706:	98 87       	std	Y+8, r25	; 0x08
     708:	a9 87       	std	Y+9, r26	; 0x09
     70a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     70c:	6f 81       	ldd	r22, Y+7	; 0x07
     70e:	78 85       	ldd	r23, Y+8	; 0x08
     710:	89 85       	ldd	r24, Y+9	; 0x09
     712:	9a 85       	ldd	r25, Y+10	; 0x0a
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e8       	ldi	r20, 0x80	; 128
     71a:	5f e3       	ldi	r21, 0x3F	; 63
     71c:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
     720:	88 23       	and	r24, r24
     722:	2c f4       	brge	.+10     	; 0x72e <actuators_umbrella+0x152>
		__ticks = 1;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	9e 83       	std	Y+6, r25	; 0x06
     72a:	8d 83       	std	Y+5, r24	; 0x05
     72c:	3f c0       	rjmp	.+126    	; 0x7ac <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     72e:	6f 81       	ldd	r22, Y+7	; 0x07
     730:	78 85       	ldd	r23, Y+8	; 0x08
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	9a 85       	ldd	r25, Y+10	; 0x0a
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	4f e7       	ldi	r20, 0x7F	; 127
     73c:	57 e4       	ldi	r21, 0x47	; 71
     73e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
     742:	18 16       	cp	r1, r24
     744:	4c f5       	brge	.+82     	; 0x798 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     746:	6b 85       	ldd	r22, Y+11	; 0x0b
     748:	7c 85       	ldd	r23, Y+12	; 0x0c
     74a:	8d 85       	ldd	r24, Y+13	; 0x0d
     74c:	9e 85       	ldd	r25, Y+14	; 0x0e
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e2       	ldi	r20, 0x20	; 32
     754:	51 e4       	ldi	r21, 0x41	; 65
     756:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	bc 01       	movw	r22, r24
     760:	cd 01       	movw	r24, r26
     762:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	9e 83       	std	Y+6, r25	; 0x06
     76c:	8d 83       	std	Y+5, r24	; 0x05
     76e:	0f c0       	rjmp	.+30     	; 0x78e <actuators_umbrella+0x1b2>
     770:	8a ef       	ldi	r24, 0xFA	; 250
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <actuators_umbrella+0x1a0>
     780:	9c 83       	std	Y+4, r25	; 0x04
     782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	9e 81       	ldd	r25, Y+6	; 0x06
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	9e 83       	std	Y+6, r25	; 0x06
     78c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     78e:	8d 81       	ldd	r24, Y+5	; 0x05
     790:	9e 81       	ldd	r25, Y+6	; 0x06
     792:	00 97       	sbiw	r24, 0x00	; 0
     794:	69 f7       	brne	.-38     	; 0x770 <actuators_umbrella+0x194>
     796:	14 c0       	rjmp	.+40     	; 0x7c0 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     798:	6f 81       	ldd	r22, Y+7	; 0x07
     79a:	78 85       	ldd	r23, Y+8	; 0x08
     79c:	89 85       	ldd	r24, Y+9	; 0x09
     79e:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a0:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	9e 83       	std	Y+6, r25	; 0x06
     7aa:	8d 83       	std	Y+5, r24	; 0x05
     7ac:	8d 81       	ldd	r24, Y+5	; 0x05
     7ae:	9e 81       	ldd	r25, Y+6	; 0x06
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <actuators_umbrella+0x1dc>
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     7c0:	6c 96       	adiw	r28, 0x1c	; 28
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	08 95       	ret

000007d2 <actuators_setup>:
void actuators_setup(void)
{
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	6c 97       	sbiw	r28, 0x1c	; 28
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
	//dodaj posle testova
	/*
	servo_set_left_grabber_position();
	servo_set_right_grabber_position();
	*/
	servo_set_door_position(90);
     7e6:	8a e5       	ldi	r24, 0x5A	; 90
     7e8:	b4 de       	rcall	.-664    	; 0x552 <servo_set_door_position>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	aa e7       	ldi	r26, 0x7A	; 122
     7f0:	b4 e4       	ldi	r27, 0x44	; 68
     7f2:	89 8f       	std	Y+25, r24	; 0x19
     7f4:	9a 8f       	std	Y+26, r25	; 0x1a
     7f6:	ab 8f       	std	Y+27, r26	; 0x1b
     7f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7fa:	69 8d       	ldd	r22, Y+25	; 0x19
     7fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     800:	9c 8d       	ldd	r25, Y+28	; 0x1c
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e4       	ldi	r19, 0x40	; 64
     806:	4c e1       	ldi	r20, 0x1C	; 28
     808:	55 e4       	ldi	r21, 0x45	; 69
     80a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	8d 8b       	std	Y+21, r24	; 0x15
     814:	9e 8b       	std	Y+22, r25	; 0x16
     816:	af 8b       	std	Y+23, r26	; 0x17
     818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     81a:	6d 89       	ldd	r22, Y+21	; 0x15
     81c:	7e 89       	ldd	r23, Y+22	; 0x16
     81e:	8f 89       	ldd	r24, Y+23	; 0x17
     820:	98 8d       	ldd	r25, Y+24	; 0x18
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
     82e:	88 23       	and	r24, r24
     830:	2c f4       	brge	.+10     	; 0x83c <actuators_setup+0x6a>
		__ticks = 1;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9c 8b       	std	Y+20, r25	; 0x14
     838:	8b 8b       	std	Y+19, r24	; 0x13
     83a:	3f c0       	rjmp	.+126    	; 0x8ba <actuators_setup+0xe8>
	else if (__tmp > 65535)
     83c:	6d 89       	ldd	r22, Y+21	; 0x15
     83e:	7e 89       	ldd	r23, Y+22	; 0x16
     840:	8f 89       	ldd	r24, Y+23	; 0x17
     842:	98 8d       	ldd	r25, Y+24	; 0x18
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	4f e7       	ldi	r20, 0x7F	; 127
     84a:	57 e4       	ldi	r21, 0x47	; 71
     84c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	4c f5       	brge	.+82     	; 0x8a6 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     854:	69 8d       	ldd	r22, Y+25	; 0x19
     856:	7a 8d       	ldd	r23, Y+26	; 0x1a
     858:	8b 8d       	ldd	r24, Y+27	; 0x1b
     85a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e2       	ldi	r20, 0x20	; 32
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	bc 01       	movw	r22, r24
     86e:	cd 01       	movw	r24, r26
     870:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	9c 8b       	std	Y+20, r25	; 0x14
     87a:	8b 8b       	std	Y+19, r24	; 0x13
     87c:	0f c0       	rjmp	.+30     	; 0x89c <actuators_setup+0xca>
     87e:	8a ef       	ldi	r24, 0xFA	; 250
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	9a 8b       	std	Y+18, r25	; 0x12
     884:	89 8b       	std	Y+17, r24	; 0x11
     886:	89 89       	ldd	r24, Y+17	; 0x11
     888:	9a 89       	ldd	r25, Y+18	; 0x12
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <actuators_setup+0xb8>
     88e:	9a 8b       	std	Y+18, r25	; 0x12
     890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     892:	8b 89       	ldd	r24, Y+19	; 0x13
     894:	9c 89       	ldd	r25, Y+20	; 0x14
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	9c 8b       	std	Y+20, r25	; 0x14
     89a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89c:	8b 89       	ldd	r24, Y+19	; 0x13
     89e:	9c 89       	ldd	r25, Y+20	; 0x14
     8a0:	00 97       	sbiw	r24, 0x00	; 0
     8a2:	69 f7       	brne	.-38     	; 0x87e <actuators_setup+0xac>
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a6:	6d 89       	ldd	r22, Y+21	; 0x15
     8a8:	7e 89       	ldd	r23, Y+22	; 0x16
     8aa:	8f 89       	ldd	r24, Y+23	; 0x17
     8ac:	98 8d       	ldd	r25, Y+24	; 0x18
     8ae:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	9c 8b       	std	Y+20, r25	; 0x14
     8b8:	8b 8b       	std	Y+19, r24	; 0x13
     8ba:	8b 89       	ldd	r24, Y+19	; 0x13
     8bc:	9c 89       	ldd	r25, Y+20	; 0x14
     8be:	98 8b       	std	Y+16, r25	; 0x10
     8c0:	8f 87       	std	Y+15, r24	; 0x0f
     8c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c4:	98 89       	ldd	r25, Y+16	; 0x10
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <actuators_setup+0xf4>
     8ca:	98 8b       	std	Y+16, r25	; 0x10
     8cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     8ce:	85 e5       	ldi	r24, 0x55	; 85
     8d0:	fb dd       	rcall	.-1034   	; 0x4c8 <servo_set_umbrella_position>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	aa e7       	ldi	r26, 0x7A	; 122
     8d8:	b4 e4       	ldi	r27, 0x44	; 68
     8da:	8b 87       	std	Y+11, r24	; 0x0b
     8dc:	9c 87       	std	Y+12, r25	; 0x0c
     8de:	ad 87       	std	Y+13, r26	; 0x0d
     8e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8e2:	6b 85       	ldd	r22, Y+11	; 0x0b
     8e4:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e4       	ldi	r19, 0x40	; 64
     8ee:	4c e1       	ldi	r20, 0x1C	; 28
     8f0:	55 e4       	ldi	r21, 0x45	; 69
     8f2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	8f 83       	std	Y+7, r24	; 0x07
     8fc:	98 87       	std	Y+8, r25	; 0x08
     8fe:	a9 87       	std	Y+9, r26	; 0x09
     900:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     902:	6f 81       	ldd	r22, Y+7	; 0x07
     904:	78 85       	ldd	r23, Y+8	; 0x08
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	9a 85       	ldd	r25, Y+10	; 0x0a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e8       	ldi	r20, 0x80	; 128
     910:	5f e3       	ldi	r21, 0x3F	; 63
     912:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
     916:	88 23       	and	r24, r24
     918:	2c f4       	brge	.+10     	; 0x924 <actuators_setup+0x152>
		__ticks = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9e 83       	std	Y+6, r25	; 0x06
     920:	8d 83       	std	Y+5, r24	; 0x05
     922:	3f c0       	rjmp	.+126    	; 0x9a2 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     924:	6f 81       	ldd	r22, Y+7	; 0x07
     926:	78 85       	ldd	r23, Y+8	; 0x08
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	9a 85       	ldd	r25, Y+10	; 0x0a
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	4f e7       	ldi	r20, 0x7F	; 127
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
     938:	18 16       	cp	r1, r24
     93a:	4c f5       	brge	.+82     	; 0x98e <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93c:	6b 85       	ldd	r22, Y+11	; 0x0b
     93e:	7c 85       	ldd	r23, Y+12	; 0x0c
     940:	8d 85       	ldd	r24, Y+13	; 0x0d
     942:	9e 85       	ldd	r25, Y+14	; 0x0e
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	51 e4       	ldi	r21, 0x41	; 65
     94c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	bc 01       	movw	r22, r24
     956:	cd 01       	movw	r24, r26
     958:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	8d 83       	std	Y+5, r24	; 0x05
     964:	0f c0       	rjmp	.+30     	; 0x984 <actuators_setup+0x1b2>
     966:	8a ef       	ldi	r24, 0xFA	; 250
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	9c 83       	std	Y+4, r25	; 0x04
     96c:	8b 83       	std	Y+3, r24	; 0x03
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <actuators_setup+0x1a0>
     976:	9c 83       	std	Y+4, r25	; 0x04
     978:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97a:	8d 81       	ldd	r24, Y+5	; 0x05
     97c:	9e 81       	ldd	r25, Y+6	; 0x06
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	9e 83       	std	Y+6, r25	; 0x06
     982:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     984:	8d 81       	ldd	r24, Y+5	; 0x05
     986:	9e 81       	ldd	r25, Y+6	; 0x06
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	69 f7       	brne	.-38     	; 0x966 <actuators_setup+0x194>
     98c:	14 c0       	rjmp	.+40     	; 0x9b6 <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     98e:	6f 81       	ldd	r22, Y+7	; 0x07
     990:	78 85       	ldd	r23, Y+8	; 0x08
     992:	89 85       	ldd	r24, Y+9	; 0x09
     994:	9a 85       	ldd	r25, Y+10	; 0x0a
     996:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
     99a:	dc 01       	movw	r26, r24
     99c:	cb 01       	movw	r24, r22
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	8d 83       	std	Y+5, r24	; 0x05
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <actuators_setup+0x1dc>
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	servo_set_door_position(0);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	cc dd       	rcall	.-1128   	; 0x552 <servo_set_door_position>
}
     9ba:	6c 96       	adiw	r28, 0x1c	; 28
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	08 95       	ret

000009cc <__vector_18>:
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	00 90 5b 00 	lds	r0, 0x005B
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <__vector_18+0x2a>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <__vector_18+0x2c>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	ed ee       	ldi	r30, 0xED	; 237
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8c 83       	std	Y+4, r24	; 0x04
     a04:	1b 82       	std	Y+3, r1	; 0x03
     a06:	9c c0       	rjmp	.+312    	; 0xb40 <__vector_18+0x174>
     a08:	ed ee       	ldi	r30, 0xED	; 237
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	82 95       	swap	r24
     a10:	80 7f       	andi	r24, 0xF0	; 240
     a12:	80 83       	st	Z, r24
     a14:	ee ee       	ldi	r30, 0xEE	; 238
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	82 95       	swap	r24
     a1c:	86 95       	lsr	r24
     a1e:	87 70       	andi	r24, 0x07	; 7
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	81 70       	andi	r24, 0x01	; 1
     a26:	90 70       	andi	r25, 0x00	; 0
     a28:	88 23       	and	r24, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <__vector_18+0x62>
     a2c:	6e c0       	rjmp	.+220    	; 0xb0a <__vector_18+0x13e>
     a2e:	ef ee       	ldi	r30, 0xEF	; 239
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 e8       	ldi	r24, 0x80	; 128
     a34:	80 83       	st	Z, r24
     a36:	ae ee       	ldi	r26, 0xEE	; 238
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	ee ee       	ldi	r30, 0xEE	; 238
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	8f 7d       	andi	r24, 0xDF	; 223
     a42:	8c 93       	st	X, r24
     a44:	e2 ef       	ldi	r30, 0xF2	; 242
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	82 95       	swap	r24
     a4c:	86 95       	lsr	r24
     a4e:	87 70       	andi	r24, 0x07	; 7
     a50:	28 2f       	mov	r18, r24
     a52:	e3 ef       	ldi	r30, 0xF3	; 243
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	82 2b       	or	r24, r18
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	19 82       	std	Y+1, r1	; 0x01
     a6e:	2a c0       	rjmp	.+84     	; 0xac4 <__vector_18+0xf8>
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	82 1b       	sub	r24, r18
     a7c:	93 0b       	sbc	r25, r19
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	90 95       	com	r25
     a84:	81 95       	neg	r24
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	fc 01       	movw	r30, r24
     a8a:	e3 5e       	subi	r30, 0xE3	; 227
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	40 81       	ld	r20, Z
     a90:	51 81       	ldd	r21, Z+1	; 0x01
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	fc 01       	movw	r30, r24
     a9c:	ef 5c       	subi	r30, 0xCF	; 207
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	80 81       	ld	r24, Z
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	82 0f       	add	r24, r18
     aae:	93 1f       	adc	r25, r19
     ab0:	da 01       	movw	r26, r20
     ab2:	a8 0f       	add	r26, r24
     ab4:	b9 1f       	adc	r27, r25
     ab6:	ea ef       	ldi	r30, 0xFA	; 250
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8c 93       	st	X, r24
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	88 30       	cpi	r24, 0x08	; 8
     ac8:	98 f2       	brcs	.-90     	; 0xa70 <__vector_18+0xa4>
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	fc 01       	movw	r30, r24
     ad4:	ef 5c       	subi	r30, 0xCF	; 207
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	80 81       	ld	r24, Z
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	80 83       	st	Z, r24
     ade:	80 81       	ld	r24, Z
     ae0:	85 30       	cpi	r24, 0x05	; 5
     ae2:	41 f4       	brne	.+16     	; 0xaf4 <__vector_18+0x128>
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	fc 01       	movw	r30, r24
     aee:	ef 5c       	subi	r30, 0xCF	; 207
     af0:	fe 4f       	sbci	r31, 0xFE	; 254
     af2:	10 82       	st	Z, r1
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	88 2f       	mov	r24, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	fc 01       	movw	r30, r24
     afe:	eb 5b       	subi	r30, 0xBB	; 187
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	8f 5f       	subi	r24, 0xFF	; 255
     b06:	80 83       	st	Z, r24
     b08:	1f c0       	rjmp	.+62     	; 0xb48 <__vector_18+0x17c>
     b0a:	ee ee       	ldi	r30, 0xEE	; 238
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	82 95       	swap	r24
     b12:	86 95       	lsr	r24
     b14:	86 95       	lsr	r24
     b16:	83 70       	andi	r24, 0x03	; 3
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	81 70       	andi	r24, 0x01	; 1
     b1e:	90 70       	andi	r25, 0x00	; 0
     b20:	88 23       	and	r24, r24
     b22:	59 f0       	breq	.+22     	; 0xb3a <__vector_18+0x16e>
     b24:	ef ee       	ldi	r30, 0xEF	; 239
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	10 82       	st	Z, r1
     b2a:	ae ee       	ldi	r26, 0xEE	; 238
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	ee ee       	ldi	r30, 0xEE	; 238
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8f 7b       	andi	r24, 0xBF	; 191
     b36:	8c 93       	st	X, r24
     b38:	07 c0       	rjmp	.+14     	; 0xb48 <__vector_18+0x17c>
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	8f 30       	cpi	r24, 0x0F	; 15
     b44:	08 f4       	brcc	.+2      	; 0xb48 <__vector_18+0x17c>
     b46:	60 cf       	rjmp	.-320    	; 0xa08 <__vector_18+0x3c>
     b48:	ed ee       	ldi	r30, 0xED	; 237
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	8c 81       	ldd	r24, Y+4	; 0x04
     b4e:	80 83       	st	Z, r24
     b50:	aa ed       	ldi	r26, 0xDA	; 218
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ea ed       	ldi	r30, 0xDA	; 218
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8c 93       	st	X, r24
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	00 92 5b 00 	sts	0x005B, r0
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <CAN_InitModule>:
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <CAN_InitModule+0x6>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	e8 ed       	ldi	r30, 0xD8	; 216
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 83       	st	Z, r24
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	32 c0       	rjmp	.+100    	; 0xc06 <CAN_InitModule+0x7a>
     ba2:	ed ee       	ldi	r30, 0xED	; 237
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	82 95       	swap	r24
     baa:	80 7f       	andi	r24, 0xF0	; 240
     bac:	80 83       	st	Z, r24
     bae:	ee ee       	ldi	r30, 0xEE	; 238
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	10 82       	st	Z, r1
     bb4:	ef ee       	ldi	r30, 0xEF	; 239
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
     bba:	e3 ef       	ldi	r30, 0xF3	; 243
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	10 82       	st	Z, r1
     bc0:	e2 ef       	ldi	r30, 0xF2	; 242
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	10 82       	st	Z, r1
     bc6:	e1 ef       	ldi	r30, 0xF1	; 241
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	10 82       	st	Z, r1
     bcc:	e0 ef       	ldi	r30, 0xF0	; 240
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
     bd2:	e7 ef       	ldi	r30, 0xF7	; 247
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	10 82       	st	Z, r1
     bd8:	e6 ef       	ldi	r30, 0xF6	; 246
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	10 82       	st	Z, r1
     bde:	e5 ef       	ldi	r30, 0xF5	; 245
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	10 82       	st	Z, r1
     be4:	e4 ef       	ldi	r30, 0xF4	; 244
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	10 82       	st	Z, r1
     bea:	19 82       	std	Y+1, r1	; 0x01
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <CAN_InitModule+0x6e>
     bee:	ea ef       	ldi	r30, 0xFA	; 250
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	10 82       	st	Z, r1
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	b8 f3       	brcs	.-18     	; 0xbee <CAN_InitModule+0x62>
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	8a 83       	std	Y+2, r24	; 0x02
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	8f 30       	cpi	r24, 0x0F	; 15
     c0a:	58 f2       	brcs	.-106    	; 0xba2 <CAN_InitModule+0x16>
     c0c:	e8 ed       	ldi	r30, 0xD8	; 216
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 83       	st	Z, r24
     c14:	e2 ee       	ldi	r30, 0xE2	; 226
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 83       	st	Z, r24
     c1c:	e3 ee       	ldi	r30, 0xE3	; 227
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	80 83       	st	Z, r24
     c24:	e4 ee       	ldi	r30, 0xE4	; 228
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8e e5       	ldi	r24, 0x5E	; 94
     c2a:	80 83       	st	Z, r24
     c2c:	e5 ee       	ldi	r30, 0xE5	; 229
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	10 82       	st	Z, r1
     c32:	eb ed       	ldi	r30, 0xDB	; 219
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 eb       	ldi	r24, 0xB0	; 176
     c38:	80 83       	st	Z, r24
     c3a:	ef ed       	ldi	r30, 0xDF	; 223
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	8f e7       	ldi	r24, 0x7F	; 127
     c40:	80 83       	st	Z, r24
     c42:	ee ed       	ldi	r30, 0xDE	; 222
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	80 83       	st	Z, r24
     c4a:	78 94       	sei
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <CAN_InitRxMob>:
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <CAN_InitRxMob+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <CAN_InitRxMob+0x8>
     c5e:	0f 92       	push	r0
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	ed ee       	ldi	r30, 0xED	; 237
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	e9 ed       	ldi	r30, 0xD9	; 217
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	82 95       	swap	r24
     c78:	8f 70       	andi	r24, 0x0F	; 15
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	81 70       	andi	r24, 0x01	; 1
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	88 23       	and	r24, r24
     c84:	a9 f7       	brne	.-22     	; 0xc70 <CAN_InitRxMob+0x1a>
     c86:	e9 ed       	ldi	r30, 0xD9	; 217
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	86 95       	lsr	r24
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	81 70       	andi	r24, 0x01	; 1
     c98:	90 70       	andi	r25, 0x00	; 0
     c9a:	88 23       	and	r24, r24
     c9c:	49 f7       	brne	.-46     	; 0xc70 <CAN_InitRxMob+0x1a>
     c9e:	1a 82       	std	Y+2, r1	; 0x02
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <CAN_InitRxMob+0xca>
     ca2:	ed ee       	ldi	r30, 0xED	; 237
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	82 95       	swap	r24
     caa:	80 7f       	andi	r24, 0xF0	; 240
     cac:	80 83       	st	Z, r24
     cae:	ef ee       	ldi	r30, 0xEF	; 239
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	82 95       	swap	r24
     cb6:	86 95       	lsr	r24
     cb8:	86 95       	lsr	r24
     cba:	83 70       	andi	r24, 0x03	; 3
     cbc:	88 23       	and	r24, r24
     cbe:	69 f5       	brne	.+90     	; 0xd1a <CAN_InitRxMob+0xc4>
     cc0:	ef ee       	ldi	r30, 0xEF	; 239
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8f e0       	ldi	r24, 0x0F	; 15
     cc6:	80 83       	st	Z, r24
     cc8:	e3 ef       	ldi	r30, 0xF3	; 243
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	80 83       	st	Z, r24
     ce0:	e2 ef       	ldi	r30, 0xF2	; 242
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	82 95       	swap	r24
     ce8:	88 0f       	add	r24, r24
     cea:	80 7e       	andi	r24, 0xE0	; 224
     cec:	80 83       	st	Z, r24
     cee:	e6 ef       	ldi	r30, 0xF6	; 246
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 ee       	ldi	r24, 0xE0	; 224
     cf4:	80 83       	st	Z, r24
     cf6:	e7 ef       	ldi	r30, 0xF7	; 247
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	80 83       	st	Z, r24
     cfe:	af ee       	ldi	r26, 0xEF	; 239
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ef ee       	ldi	r30, 0xEF	; 239
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	8c 93       	st	X, r24
     d0c:	ed ee       	ldi	r30, 0xED	; 237
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	80 83       	st	Z, r24
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	8d 83       	std	Y+5, r24	; 0x05
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <CAN_InitRxMob+0xdc>
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	8f 30       	cpi	r24, 0x0F	; 15
     d24:	08 f4       	brcc	.+2      	; 0xd28 <CAN_InitRxMob+0xd2>
     d26:	bd cf       	rjmp	.-134    	; 0xca2 <CAN_InitRxMob+0x4c>
     d28:	ed ee       	ldi	r30, 0xED	; 237
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	1d 82       	std	Y+5, r1	; 0x05
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <CAN_Init>:
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <CAN_Init+0xa>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	1b df       	rcall	.-458    	; 0xb8c <CAN_InitModule>
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	36 c0       	rjmp	.+108    	; 0xdc6 <CAN_Init+0x82>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	79 df       	rcall	.-270    	; 0xc56 <CAN_InitRxMob>
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	8c 01       	movw	r16, r24
     d70:	03 5e       	subi	r16, 0xE3	; 227
     d72:	1e 4f       	sbci	r17, 0xFE	; 254
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <calloc>
     d80:	f8 01       	movw	r30, r16
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	48 2f       	mov	r20, r24
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	fc 01       	movw	r30, r24
     d9a:	eb 5b       	subi	r30, 0xBB	; 187
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	10 82       	st	Z, r1
     da0:	fc 01       	movw	r30, r24
     da2:	eb 5b       	subi	r30, 0xBB	; 187
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	80 81       	ld	r24, Z
     da8:	f9 01       	movw	r30, r18
     daa:	e5 5c       	subi	r30, 0xC5	; 197
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	80 83       	st	Z, r24
     db0:	f9 01       	movw	r30, r18
     db2:	e5 5c       	subi	r30, 0xC5	; 197
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	fa 01       	movw	r30, r20
     dba:	ef 5c       	subi	r30, 0xCF	; 207
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	80 83       	st	Z, r24
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	99 81       	ldd	r25, Y+1	; 0x01
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	98 17       	cp	r25, r24
     dcc:	30 f2       	brcs	.-116    	; 0xd5a <CAN_Init+0x16>
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <CAN_Read>:
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <CAN_Read+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <CAN_Read+0x8>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9b 83       	std	Y+3, r25	; 0x03
     dea:	8a 83       	std	Y+2, r24	; 0x02
     dec:	6c 83       	std	Y+4, r22	; 0x04
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	fc 01       	movw	r30, r24
     df8:	eb 5b       	subi	r30, 0xBB	; 187
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	b1 f3       	breq	.-20     	; 0xdee <CAN_Read+0x12>
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	30 c0       	rjmp	.+96     	; 0xe66 <CAN_Read+0x8a>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	9b 81       	ldd	r25, Y+3	; 0x03
     e10:	dc 01       	movw	r26, r24
     e12:	a2 0f       	add	r26, r18
     e14:	b3 1f       	adc	r27, r19
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	82 1b       	sub	r24, r18
     e22:	93 0b       	sbc	r25, r19
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	90 95       	com	r25
     e2a:	81 95       	neg	r24
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	e3 5e       	subi	r30, 0xE3	; 227
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	40 81       	ld	r20, Z
     e36:	51 81       	ldd	r21, Z+1	; 0x01
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	fc 01       	movw	r30, r24
     e42:	e5 5c       	subi	r30, 0xC5	; 197
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	82 0f       	add	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	fa 01       	movw	r30, r20
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	80 81       	ld	r24, Z
     e5e:	8c 93       	st	X, r24
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	88 30       	cpi	r24, 0x08	; 8
     e6a:	68 f2       	brcs	.-102    	; 0xe06 <CAN_Read+0x2a>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	fc 01       	movw	r30, r24
     e76:	e5 5c       	subi	r30, 0xC5	; 197
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	80 83       	st	Z, r24
     e80:	80 81       	ld	r24, Z
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	41 f4       	brne	.+16     	; 0xe96 <CAN_Read+0xba>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	fc 01       	movw	r30, r24
     e90:	e5 5c       	subi	r30, 0xC5	; 197
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	10 82       	st	Z, r1
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 01       	movw	r18, r24
     e9e:	21 50       	subi	r18, 0x01	; 1
     ea0:	30 40       	sbci	r19, 0x00	; 0
     ea2:	f9 01       	movw	r30, r18
     ea4:	eb 5b       	subi	r30, 0xBB	; 187
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	80 81       	ld	r24, Z
     eaa:	81 50       	subi	r24, 0x01	; 1
     eac:	f9 01       	movw	r30, r18
     eae:	eb 5b       	subi	r30, 0xBB	; 187
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	80 83       	st	Z, r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <CAN_Write>:
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	27 97       	sbiw	r28, 0x07	; 7
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	9d 83       	std	Y+5, r25	; 0x05
     eda:	8c 83       	std	Y+4, r24	; 0x04
     edc:	6e 83       	std	Y+6, r22	; 0x06
     ede:	e9 ed       	ldi	r30, 0xD9	; 217
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	8f 70       	andi	r24, 0x0F	; 15
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	90 70       	andi	r25, 0x00	; 0
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f7       	brne	.-22     	; 0xede <CAN_Write+0x1a>
     ef4:	e9 ed       	ldi	r30, 0xD9	; 217
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	86 95       	lsr	r24
     efc:	86 95       	lsr	r24
     efe:	86 95       	lsr	r24
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	90 70       	andi	r25, 0x00	; 0
     f08:	88 23       	and	r24, r24
     f0a:	49 f7       	brne	.-46     	; 0xede <CAN_Write+0x1a>
     f0c:	ed ee       	ldi	r30, 0xED	; 237
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	1a 82       	std	Y+2, r1	; 0x02
     f16:	12 c0       	rjmp	.+36     	; 0xf3c <CAN_Write+0x78>
     f18:	ed ee       	ldi	r30, 0xED	; 237
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	82 95       	swap	r24
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	80 83       	st	Z, r24
     f24:	ef ee       	ldi	r30, 0xEF	; 239
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	82 95       	swap	r24
     f2c:	86 95       	lsr	r24
     f2e:	86 95       	lsr	r24
     f30:	83 70       	andi	r24, 0x03	; 3
     f32:	88 23       	and	r24, r24
     f34:	31 f0       	breq	.+12     	; 0xf42 <CAN_Write+0x7e>
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	8f 30       	cpi	r24, 0x0F	; 15
     f40:	58 f3       	brcs	.-42     	; 0xf18 <CAN_Write+0x54>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	8f 30       	cpi	r24, 0x0F	; 15
     f46:	19 f4       	brne	.+6      	; 0xf4e <CAN_Write+0x8a>
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	8f 83       	std	Y+7, r24	; 0x07
     f4c:	32 c0       	rjmp	.+100    	; 0xfb2 <CAN_Write+0xee>
     f4e:	e2 ef       	ldi	r30, 0xF2	; 242
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	82 95       	swap	r24
     f56:	88 0f       	add	r24, r24
     f58:	80 7e       	andi	r24, 0xE0	; 224
     f5a:	80 83       	st	Z, r24
     f5c:	e3 ef       	ldi	r30, 0xF3	; 243
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	86 95       	lsr	r24
     f64:	86 95       	lsr	r24
     f66:	86 95       	lsr	r24
     f68:	80 83       	st	Z, r24
     f6a:	ef ee       	ldi	r30, 0xEF	; 239
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	80 83       	st	Z, r24
     f72:	1b 82       	std	Y+3, r1	; 0x03
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CAN_Write+0xd0>
     f76:	aa ef       	ldi	r26, 0xFA	; 250
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	80 81       	ld	r24, Z
     f8c:	8c 93       	st	X, r24
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	70 f3       	brcs	.-36     	; 0xf76 <CAN_Write+0xb2>
     f9a:	af ee       	ldi	r26, 0xEF	; 239
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ef ee       	ldi	r30, 0xEF	; 239
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 64       	ori	r24, 0x40	; 64
     fa6:	8c 93       	st	X, r24
     fa8:	ed ee       	ldi	r30, 0xED	; 237
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	80 83       	st	Z, r24
     fb0:	1f 82       	std	Y+7, r1	; 0x07
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
     fb4:	27 96       	adiw	r28, 0x07	; 7
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	2c 97       	sbiw	r28, 0x0c	; 12
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	89 87       	std	Y+9, r24	; 0x09
     fdc:	6a 87       	std	Y+10, r22	; 0x0a
     fde:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fe0:	80 91 08 01 	lds	r24, 0x0108
     fe4:	90 91 09 01 	lds	r25, 0x0109
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	06 97       	sbiw	r24, 0x06	; 6
     ff2:	98 87       	std	Y+8, r25	; 0x08
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     ff8:	ef 81       	ldd	r30, Y+7	; 0x07
     ffa:	f8 85       	ldd	r31, Y+8	; 0x08
     ffc:	90 81       	ld	r25, Z
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	98 17       	cp	r25, r24
    1002:	19 f4       	brne	.+6      	; 0x100a <gpio_register_pin+0x44>
            return 1;
    1004:	21 e0       	ldi	r18, 0x01	; 1
    1006:	2c 87       	std	Y+12, r18	; 0x0c
    1008:	c9 c0       	rjmp	.+402    	; 0x119c <__stack+0x9d>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    100a:	ef 81       	ldd	r30, Y+7	; 0x07
    100c:	f8 85       	ldd	r31, Y+8	; 0x08
    100e:	80 85       	ldd	r24, Z+8	; 0x08
    1010:	91 85       	ldd	r25, Z+9	; 0x09
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	06 97       	sbiw	r24, 0x06	; 6
    101c:	98 87       	std	Y+8, r25	; 0x08
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	06 96       	adiw	r24, 0x06	; 6
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	86 30       	cpi	r24, 0x06	; 6
    102a:	92 07       	cpc	r25, r18
    102c:	29 f7       	brne	.-54     	; 0xff8 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	86 95       	lsr	r24
    1032:	86 95       	lsr	r24
    1034:	86 95       	lsr	r24
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	87 70       	andi	r24, 0x07	; 7
    103e:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1040:	8a 85       	ldd	r24, Y+10	; 0x0a
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	09 f0       	breq	.+2      	; 0x1048 <gpio_register_pin+0x82>
    1046:	48 c0       	rjmp	.+144    	; 0x10d8 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	c9 01       	movw	r24, r18
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	4e 96       	adiw	r24, 0x1e	; 30
    105a:	dc 01       	movw	r26, r24
    105c:	8e 81       	ldd	r24, Y+6	; 0x06
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	c9 01       	movw	r24, r18
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	4e 96       	adiw	r24, 0x1e	; 30
    106e:	fc 01       	movw	r30, r24
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <gpio_register_pin+0xbe>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	2a 95       	dec	r18
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <gpio_register_pin+0xba>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	c9 01       	movw	r24, r18
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	4f 96       	adiw	r24, 0x1f	; 31
    109e:	dc 01       	movw	r26, r24
    10a0:	8e 81       	ldd	r24, Y+6	; 0x06
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	c9 01       	movw	r24, r18
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	4f 96       	adiw	r24, 0x1f	; 31
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <gpio_register_pin+0x104>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <gpio_register_pin+0x100>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
        return 0;
    10d4:	1c 86       	std	Y+12, r1	; 0x0c
    10d6:	62 c0       	rjmp	.+196    	; 0x119c <__stack+0x9d>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	4e 96       	adiw	r24, 0x1e	; 30
    10ea:	dc 01       	movw	r26, r24
    10ec:	8e 81       	ldd	r24, Y+6	; 0x06
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	c9 01       	movw	r24, r18
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	4e 96       	adiw	r24, 0x1e	; 30
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <__stack+0x15>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	2a 95       	dec	r18
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <__stack+0x11>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	4f 96       	adiw	r24, 0x1f	; 31
    1130:	dc 01       	movw	r26, r24
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	c9 01       	movw	r24, r18
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	4f 96       	adiw	r24, 0x1f	; 31
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <__stack+0x5b>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	2a 95       	dec	r18
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <__stack+0x57>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1162:	8a e0       	ldi	r24, 0x0A	; 10
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <malloc>
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    116e:	8f 81       	ldd	r24, Y+7	; 0x07
    1170:	98 85       	ldd	r25, Y+8	; 0x08
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	19 f4       	brne	.+6      	; 0x117c <__stack+0x7d>
        return 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	8c 87       	std	Y+12, r24	; 0x0c
    117a:	10 c0       	rjmp	.+32     	; 0x119c <__stack+0x9d>

    input->pin       = pin;
    117c:	ef 81       	ldd	r30, Y+7	; 0x07
    117e:	f8 85       	ldd	r31, Y+8	; 0x08
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1184:	ef 81       	ldd	r30, Y+7	; 0x07
    1186:	f8 85       	ldd	r31, Y+8	; 0x08
    1188:	8b 85       	ldd	r24, Y+11	; 0x0b
    118a:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	06 96       	adiw	r24, 0x06	; 6
    1192:	26 e0       	ldi	r18, 0x06	; 6
    1194:	31 e0       	ldi	r19, 0x01	; 1
    1196:	b9 01       	movw	r22, r18
    1198:	0b d0       	rcall	.+22     	; 0x11b0 <list_add>

    return 0;
    119a:	1c 86       	std	Y+12, r1	; 0x0c
    119c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    119e:	2c 96       	adiw	r28, 0x0c	; 12
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <list_add+0x6>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <list_add+0x8>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	7c 83       	std	Y+4, r23	; 0x04
    11c2:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    11c4:	eb 81       	ldd	r30, Y+3	; 0x03
    11c6:	fc 81       	ldd	r31, Y+4	; 0x04
    11c8:	42 81       	ldd	r20, Z+2	; 0x02
    11ca:	53 81       	ldd	r21, Z+3	; 0x03
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	b9 01       	movw	r22, r18
    11d6:	07 d0       	rcall	.+14     	; 0x11e6 <__list_add>
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <__list_add+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <__list_add+0x8>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <__list_add+0xa>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	7c 83       	std	Y+4, r23	; 0x04
    11fa:	6b 83       	std	Y+3, r22	; 0x03
    11fc:	5e 83       	std	Y+6, r21	; 0x06
    11fe:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1200:	ed 81       	ldd	r30, Y+5	; 0x05
    1202:	fe 81       	ldd	r31, Y+6	; 0x06
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    new->next = next;
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	93 83       	std	Z+3, r25	; 0x03
    1216:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1218:	e9 81       	ldd	r30, Y+1	; 0x01
    121a:	fa 81       	ldd	r31, Y+2	; 0x02
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    prev->next = new;
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	93 83       	std	Z+3, r25	; 0x03
    122e:	82 83       	std	Z+2, r24	; 0x02
}
    1230:	26 96       	adiw	r28, 0x06	; 6
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <__gpio_read_pin+0x6>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	86 95       	lsr	r24
    1254:	86 95       	lsr	r24
    1256:	86 95       	lsr	r24
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	87 70       	andi	r24, 0x07	; 7
    1260:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	c9 01       	movw	r24, r18
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	4d 96       	adiw	r24, 0x1d	; 29
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a9 01       	movw	r20, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <__gpio_read_pin+0x4c>
    128a:	55 95       	asr	r21
    128c:	47 95       	ror	r20
    128e:	8a 95       	dec	r24
    1290:	e2 f7       	brpl	.-8      	; 0x128a <__gpio_read_pin+0x48>
    1292:	ca 01       	movw	r24, r20
    1294:	81 70       	andi	r24, 0x01	; 1
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	2b 97       	sbiw	r28, 0x0b	; 11
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12b8:	80 91 08 01 	lds	r24, 0x0108
    12bc:	90 91 09 01 	lds	r25, 0x0109
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	06 97       	sbiw	r24, 0x06	; 6
    12ca:	98 87       	std	Y+8, r25	; 0x08
    12cc:	8f 83       	std	Y+7, r24	; 0x07
    12ce:	55 c0       	rjmp	.+170    	; 0x137a <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12d0:	ef 81       	ldd	r30, Y+7	; 0x07
    12d2:	f8 85       	ldd	r31, Y+8	; 0x08
    12d4:	90 81       	ld	r25, Z
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	98 17       	cp	r25, r24
    12da:	09 f0       	breq	.+2      	; 0x12de <gpio_read_pin+0x3c>
    12dc:	43 c0       	rjmp	.+134    	; 0x1364 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    12de:	1c 82       	std	Y+4, r1	; 0x04
    12e0:	21 c0       	rjmp	.+66     	; 0x1324 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ea:	98 85       	ldd	r25, Y+8	; 0x08
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	fc 01       	movw	r30, r24
    12f2:	32 96       	adiw	r30, 0x02	; 2
    12f4:	40 81       	ld	r20, Z
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9c 01       	movw	r18, r24
    12fe:	2f 5f       	subi	r18, 0xFF	; 255
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	fc 01       	movw	r30, r24
    130c:	32 96       	adiw	r30, 0x02	; 2
    130e:	80 81       	ld	r24, Z
    1310:	48 17       	cp	r20, r24
    1312:	29 f0       	breq	.+10     	; 0x131e <gpio_read_pin+0x7c>
                    return input->previous_state;
    1314:	ef 81       	ldd	r30, Y+7	; 0x07
    1316:	f8 85       	ldd	r31, Y+8	; 0x08
    1318:	25 81       	ldd	r18, Z+5	; 0x05
    131a:	2b 87       	std	Y+11, r18	; 0x0b
    131c:	38 c0       	rjmp	.+112    	; 0x138e <gpio_read_pin+0xec>
                i++;
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	e0 f2       	brcs	.-72     	; 0x12e2 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    132a:	ef 81       	ldd	r30, Y+7	; 0x07
    132c:	f8 85       	ldd	r31, Y+8	; 0x08
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 27       	eor	r24, r25
    1334:	88 23       	and	r24, r24
    1336:	29 f0       	breq	.+10     	; 0x1342 <gpio_read_pin+0xa0>
    1338:	ef 81       	ldd	r30, Y+7	; 0x07
    133a:	f8 85       	ldd	r31, Y+8	; 0x08
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	8a 87       	std	Y+10, r24	; 0x0a
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <gpio_read_pin+0xb0>
    1342:	ef 81       	ldd	r30, Y+7	; 0x07
    1344:	f8 85       	ldd	r31, Y+8	; 0x08
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	1a 86       	std	Y+10, r1	; 0x0a
    134a:	88 23       	and	r24, r24
    134c:	11 f4       	brne	.+4      	; 0x1352 <gpio_read_pin+0xb0>
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	2a 87       	std	Y+10, r18	; 0x0a
    1352:	8a 85       	ldd	r24, Y+10	; 0x0a
    1354:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1356:	ef 81       	ldd	r30, Y+7	; 0x07
    1358:	f8 85       	ldd	r31, Y+8	; 0x08
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	85 83       	std	Z+5, r24	; 0x05

            return state;
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	2b 87       	std	Y+11, r18	; 0x0b
    1362:	15 c0       	rjmp	.+42     	; 0x138e <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1364:	ef 81       	ldd	r30, Y+7	; 0x07
    1366:	f8 85       	ldd	r31, Y+8	; 0x08
    1368:	80 85       	ldd	r24, Z+8	; 0x08
    136a:	91 85       	ldd	r25, Z+9	; 0x09
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	06 97       	sbiw	r24, 0x06	; 6
    1376:	98 87       	std	Y+8, r25	; 0x08
    1378:	8f 83       	std	Y+7, r24	; 0x07
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	06 96       	adiw	r24, 0x06	; 6
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	86 30       	cpi	r24, 0x06	; 6
    1384:	92 07       	cpc	r25, r18
    1386:	09 f0       	breq	.+2      	; 0x138a <gpio_read_pin+0xe8>
    1388:	a3 cf       	rjmp	.-186    	; 0x12d0 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8b 87       	std	Y+11, r24	; 0x0b
    138e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1390:	2b 96       	adiw	r28, 0x0b	; 11
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <gpio_debouncer+0xa>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <gpio_debouncer+0xc>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <gpio_debouncer+0xe>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13b4:	80 91 08 01 	lds	r24, 0x0108
    13b8:	90 91 09 01 	lds	r25, 0x0109
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	06 97       	sbiw	r24, 0x06	; 6
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
    13ca:	1b c0       	rjmp	.+54     	; 0x1402 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13cc:	00 91 4f 01 	lds	r16, 0x014F
    13d0:	10 91 50 01 	lds	r17, 0x0150
    13d4:	ed 81       	ldd	r30, Y+5	; 0x05
    13d6:	fe 81       	ldd	r31, Y+6	; 0x06
    13d8:	80 81       	ld	r24, Z
    13da:	33 df       	rcall	.-410    	; 0x1242 <__gpio_read_pin>
    13dc:	28 2f       	mov	r18, r24
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	80 0f       	add	r24, r16
    13e4:	91 1f       	adc	r25, r17
    13e6:	fc 01       	movw	r30, r24
    13e8:	32 96       	adiw	r30, 0x02	; 2
    13ea:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13ec:	ed 81       	ldd	r30, Y+5	; 0x05
    13ee:	fe 81       	ldd	r31, Y+6	; 0x06
    13f0:	80 85       	ldd	r24, Z+8	; 0x08
    13f2:	91 85       	ldd	r25, Z+9	; 0x09
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	06 97       	sbiw	r24, 0x06	; 6
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	06 96       	adiw	r24, 0x06	; 6
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	86 30       	cpi	r24, 0x06	; 6
    140c:	92 07       	cpc	r25, r18
    140e:	f1 f6       	brne	.-68     	; 0x13cc <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1410:	80 91 4f 01 	lds	r24, 0x014F
    1414:	90 91 50 01 	lds	r25, 0x0150
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	90 93 50 01 	sts	0x0150, r25
    141e:	80 93 4f 01 	sts	0x014F, r24
    1422:	80 91 4f 01 	lds	r24, 0x014F
    1426:	90 91 50 01 	lds	r25, 0x0150
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	21 f4       	brne	.+8      	; 0x1438 <gpio_debouncer+0x96>
        count = 0;
    1430:	10 92 50 01 	sts	0x0150, r1
    1434:	10 92 4f 01 	sts	0x014F, r1
	
}
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <greenside>:
{
	{{85,500}, 110, FORWARD, NULL}
};

void greenside(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	2b 97       	sbiw	r28, 0x0b	; 11
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    1462:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
    1464:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 85;
    146a:	85 e5       	ldi	r24, 0x55	; 85
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 670;
    1472:	8e e9       	ldi	r24, 0x9E	; 158
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	98 87       	std	Y+8, r25	; 0x08
    1478:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
    147a:	86 ea       	ldi	r24, 0xA6	; 166
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	9a 87       	std	Y+10, r25	; 0x0a
    1480:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
    1482:	ce 01       	movw	r24, r28
    1484:	05 96       	adiw	r24, 0x05	; 5
    1486:	4f d3       	rcall	.+1694   	; 0x1b26 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	d1 f7       	brne	.-12     	; 0x1488 <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	8c 83       	std	Y+4, r24	; 0x04
    1498:	5c c0       	rjmp	.+184    	; 0x1552 <greenside+0x104>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	48 2f       	mov	r20, r24
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	ca 01       	movw	r24, r20
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	9c 01       	movw	r18, r24
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	82 0f       	add	r24, r18
    14b2:	93 1f       	adc	r25, r19
    14b4:	84 0f       	add	r24, r20
    14b6:	95 1f       	adc	r25, r21
    14b8:	8f 5e       	subi	r24, 0xEF	; 239
    14ba:	9e 4f       	sbci	r25, 0xFE	; 254
    14bc:	bc 01       	movw	r22, r24
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	48 2f       	mov	r20, r24
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	ca 01       	movw	r24, r20
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	9c 01       	movw	r18, r24
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	84 0f       	add	r24, r20
    14da:	95 1f       	adc	r25, r21
    14dc:	fc 01       	movw	r30, r24
    14de:	e8 5e       	subi	r30, 0xE8	; 232
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	a0 81       	ld	r26, Z
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	48 2f       	mov	r20, r24
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	ca 01       	movw	r24, r20
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	9c 01       	movw	r18, r24
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	82 0f       	add	r24, r18
    14fc:	93 1f       	adc	r25, r19
    14fe:	84 0f       	add	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	fc 01       	movw	r30, r24
    1504:	e7 5e       	subi	r30, 0xE7	; 231
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	b0 81       	ld	r27, Z
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	48 2f       	mov	r20, r24
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	ca 01       	movw	r24, r20
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	9c 01       	movw	r18, r24
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	84 0f       	add	r24, r20
    1526:	95 1f       	adc	r25, r21
    1528:	fc 01       	movw	r30, r24
    152a:	e6 5e       	subi	r30, 0xE6	; 230
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	20 81       	ld	r18, Z
    1530:	31 81       	ldd	r19, Z+1	; 0x01
    1532:	cb 01       	movw	r24, r22
    1534:	6a 2f       	mov	r22, r26
    1536:	4b 2f       	mov	r20, r27
    1538:	45 d2       	rcall	.+1162   	; 0x19c4 <odometry_move_to_position>
    153a:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	09 f4       	brne	.+2      	; 0x1544 <greenside+0xf6>
    1542:	a2 cf       	rjmp	.-188    	; 0x1488 <greenside+0x3a>
					{
						break;
					}
					if(current_position == 0)
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <greenside+0xfe>
    154a:	ff cf       	rjmp	.-2      	; 0x154a <greenside+0xfc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	8c 83       	std	Y+4, r24	; 0x04
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	88 23       	and	r24, r24
    1556:	09 f4       	brne	.+2      	; 0x155a <greenside+0x10c>
    1558:	a0 cf       	rjmp	.-192    	; 0x149a <greenside+0x4c>
    155a:	96 cf       	rjmp	.-212    	; 0x1488 <greenside+0x3a>

0000155c <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	67 97       	sbiw	r28, 0x17	; 23
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1572:	90 91 51 01 	lds	r25, 0x0151
    1576:	8f 89       	ldd	r24, Y+23	; 0x17
    1578:	89 17       	cp	r24, r25
    157a:	09 f4       	brne	.+2      	; 0x157e <odometry_set_speed+0x22>
    157c:	81 c0       	rjmp	.+258    	; 0x1680 <odometry_set_speed+0x124>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    157e:	86 e5       	ldi	r24, 0x56	; 86
    1580:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	88 8b       	std	Y+16, r24	; 0x10
    1586:	72 c0       	rjmp	.+228    	; 0x166c <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a8 e4       	ldi	r26, 0x48	; 72
    158e:	b2 e4       	ldi	r27, 0x42	; 66
    1590:	8b 87       	std	Y+11, r24	; 0x0b
    1592:	9c 87       	std	Y+12, r25	; 0x0c
    1594:	ad 87       	std	Y+13, r26	; 0x0d
    1596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e4       	ldi	r19, 0x40	; 64
    15a4:	4c e1       	ldi	r20, 0x1C	; 28
    15a6:	55 e4       	ldi	r21, 0x45	; 69
    15a8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8f 83       	std	Y+7, r24	; 0x07
    15b2:	98 87       	std	Y+8, r25	; 0x08
    15b4:	a9 87       	std	Y+9, r26	; 0x09
    15b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <odometry_set_speed+0x7e>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	0f c0       	rjmp	.+30     	; 0x163a <odometry_set_speed+0xde>
    161c:	8a ef       	ldi	r24, 0xFA	; 250
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <odometry_set_speed+0xcc>
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <odometry_set_speed+0xc0>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <odometry_set_speed+0x108>
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	ce 01       	movw	r24, r28
    166e:	0f 96       	adiw	r24, 0x0f	; 15
    1670:	63 ec       	ldi	r22, 0xC3	; 195
    1672:	28 dc       	rcall	.-1968   	; 0xec4 <CAN_Write>
    1674:	88 23       	and	r24, r24
    1676:	09 f0       	breq	.+2      	; 0x167a <odometry_set_speed+0x11e>
    1678:	87 cf       	rjmp	.-242    	; 0x1588 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    167a:	8f 89       	ldd	r24, Y+23	; 0x17
    167c:	80 93 51 01 	sts	0x0151, r24
}
    1680:	67 96       	adiw	r28, 0x17	; 23
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <odometry_query_position>:

static void odometry_query_position(void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    16a6:	80 e5       	ldi	r24, 0x50	; 80
    16a8:	8f 87       	std	Y+15, r24	; 0x0f
    16aa:	72 c0       	rjmp	.+228    	; 0x1790 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a8 e4       	ldi	r26, 0x48	; 72
    16b2:	b2 e4       	ldi	r27, 0x42	; 66
    16b4:	8b 87       	std	Y+11, r24	; 0x0b
    16b6:	9c 87       	std	Y+12, r25	; 0x0c
    16b8:	ad 87       	std	Y+13, r26	; 0x0d
    16ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e4       	ldi	r19, 0x40	; 64
    16c8:	4c e1       	ldi	r20, 0x1C	; 28
    16ca:	55 e4       	ldi	r21, 0x45	; 69
    16cc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a9 87       	std	Y+9, r26	; 0x09
    16da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 bd 13 	call	0x277a	; 0x277a <__cmpsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <odometry_query_position+0x6c>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <odometry_query_position+0xea>
	else if (__tmp > 65535)
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	0f c0       	rjmp	.+30     	; 0x175e <odometry_query_position+0xcc>
    1740:	8a ef       	ldi	r24, 0xFA	; 250
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <odometry_query_position+0xba>
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <odometry_query_position+0xae>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	0e 94 2e 14 	call	0x285c	; 0x285c <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <odometry_query_position+0xf6>
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	ce 01       	movw	r24, r28
    1792:	0f 96       	adiw	r24, 0x0f	; 15
    1794:	63 ec       	ldi	r22, 0xC3	; 195
    1796:	96 db       	rcall	.-2260   	; 0xec4 <CAN_Write>
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <odometry_query_position+0x10c>
    179c:	87 cf       	rjmp	.-242    	; 0x16ac <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    179e:	ce 01       	movw	r24, r28
    17a0:	0f 96       	adiw	r24, 0x0f	; 15
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	1b db       	rcall	.-2506   	; 0xddc <CAN_Read>

	position.state = buffer[0];
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	38 2f       	mov	r19, r24
    17b4:	22 27       	eor	r18, r18
    17b6:	89 89       	ldd	r24, Y+17	; 0x11
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	82 2b       	or	r24, r18
    17be:	93 2b       	or	r25, r19
    17c0:	90 93 0b 01 	sts	0x010B, r25
    17c4:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    17c8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ca:	88 2f       	mov	r24, r24
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	38 2f       	mov	r19, r24
    17d0:	22 27       	eor	r18, r18
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	82 2b       	or	r24, r18
    17da:	93 2b       	or	r25, r19
    17dc:	90 93 0d 01 	sts	0x010D, r25
    17e0:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    17e4:	8c 89       	ldd	r24, Y+20	; 0x14
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	38 2f       	mov	r19, r24
    17ec:	22 27       	eor	r18, r18
    17ee:	8d 89       	ldd	r24, Y+21	; 0x15
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	82 2b       	or	r24, r18
    17f6:	93 2b       	or	r25, r19
    17f8:	90 93 0f 01 	sts	0x010F, r25
    17fc:	80 93 0e 01 	sts	0x010E, r24
}
    1800:	66 96       	adiw	r28, 0x16	; 22
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	27 97       	sbiw	r28, 0x07	; 7
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    182a:	fd d4       	rcall	.+2554   	; 0x2226 <system_get_system_time>
    182c:	aa 27       	eor	r26, r26
    182e:	97 fd       	sbrc	r25, 7
    1830:	a0 95       	com	r26
    1832:	ba 2f       	mov	r27, r26
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	ab 83       	std	Y+3, r26	; 0x03
    183a:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    183c:	2a df       	rcall	.-428    	; 0x1692 <odometry_query_position>
		if(callback != NULL)
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	71 f0       	breq	.+28     	; 0x1862 <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	ab 81       	ldd	r26, Y+3	; 0x03
    184c:	bc 81       	ldd	r27, Y+4	; 0x04
    184e:	ed 81       	ldd	r30, Y+5	; 0x05
    1850:	fe 81       	ldd	r31, Y+6	; 0x06
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	09 95       	icall
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	19 f4       	brne	.+6      	; 0x1862 <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	8f 83       	std	Y+7, r24	; 0x07
    1860:	09 c0       	rjmp	.+18     	; 0x1874 <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1862:	80 91 10 01 	lds	r24, 0x0110
    1866:	8d 34       	cpi	r24, 0x4D	; 77
    1868:	49 f3       	breq	.-46     	; 0x183c <odometry_wait_until_done+0x2a>
    186a:	80 91 10 01 	lds	r24, 0x0110
    186e:	82 35       	cpi	r24, 0x52	; 82
    1870:	29 f3       	breq	.-54     	; 0x183c <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    1872:	1f 82       	std	Y+7, r1	; 0x07
    1874:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1876:	27 96       	adiw	r28, 0x07	; 7
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	6b 97       	sbiw	r28, 0x1b	; 27
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	98 8f       	std	Y+24, r25	; 0x18
    189e:	8f 8b       	std	Y+23, r24	; 0x17
    18a0:	69 8f       	std	Y+25, r22	; 0x19
    18a2:	5b 8f       	std	Y+27, r21	; 0x1b
    18a4:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    18a6:	89 8d       	ldd	r24, Y+25	; 0x19
    18a8:	59 de       	rcall	.-846    	; 0x155c <odometry_set_speed>
	buffer[0] = 'D';
    18aa:	84 e4       	ldi	r24, 0x44	; 68
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	89 2f       	mov	r24, r25
    18b4:	99 0f       	add	r25, r25
    18b6:	99 0b       	sbc	r25, r25
    18b8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	89 8b       	std	Y+17, r24	; 0x11
    18be:	6f c0       	rjmp	.+222    	; 0x199e <odometry_move_straight+0x116>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a8 e4       	ldi	r26, 0x48	; 72
    18c6:	b2 e4       	ldi	r27, 0x42	; 66
    18c8:	8b 87       	std	Y+11, r24	; 0x0b
    18ca:	9c 87       	std	Y+12, r25	; 0x0c
    18cc:	ad 87       	std	Y+13, r26	; 0x0d
    18ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e4       	ldi	r19, 0x40	; 64
    18dc:	4c e1       	ldi	r20, 0x1C	; 28
    18de:	55 e4       	ldi	r21, 0x45	; 69
    18e0:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8f 83       	std	Y+7, r24	; 0x07
    18ea:	98 87       	std	Y+8, r25	; 0x08
    18ec:	a9 87       	std	Y+9, r26	; 0x09
    18ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	3c d7       	rcall	.+3704   	; 0x277a <__cmpsf2>
    1902:	88 23       	and	r24, r24
    1904:	2c f4       	brge	.+10     	; 0x1910 <odometry_move_straight+0x88>
		__ticks = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
    190e:	3d c0       	rjmp	.+122    	; 0x198a <odometry_move_straight+0x102>
	else if (__tmp > 65535)
    1910:	6f 81       	ldd	r22, Y+7	; 0x07
    1912:	78 85       	ldd	r23, Y+8	; 0x08
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	9a 85       	ldd	r25, Y+10	; 0x0a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__gesf2>
    1924:	18 16       	cp	r1, r24
    1926:	44 f5       	brge	.+80     	; 0x1978 <odometry_move_straight+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	6b 85       	ldd	r22, Y+11	; 0x0b
    192a:	7c 85       	ldd	r23, Y+12	; 0x0c
    192c:	8d 85       	ldd	r24, Y+13	; 0x0d
    192e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e2       	ldi	r20, 0x20	; 32
    1936:	51 e4       	ldi	r21, 0x41	; 65
    1938:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	8b d7       	rcall	.+3862   	; 0x285c <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	0f c0       	rjmp	.+30     	; 0x196e <odometry_move_straight+0xe6>
    1950:	8a ef       	ldi	r24, 0xFA	; 250
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	8b 83       	std	Y+3, r24	; 0x03
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <odometry_move_straight+0xd4>
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <odometry_move_straight+0xc8>
    1976:	13 c0       	rjmp	.+38     	; 0x199e <odometry_move_straight+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	6d d7       	rcall	.+3802   	; 0x285c <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <odometry_move_straight+0x10e>
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	ce 01       	movw	r24, r28
    19a0:	0f 96       	adiw	r24, 0x0f	; 15
    19a2:	63 ec       	ldi	r22, 0xC3	; 195
    19a4:	8f da       	rcall	.-2786   	; 0xec4 <CAN_Write>
    19a6:	88 23       	and	r24, r24
    19a8:	09 f0       	breq	.+2      	; 0x19ac <odometry_move_straight+0x124>
    19aa:	8a cf       	rjmp	.-236    	; 0x18c0 <odometry_move_straight+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    19ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19b0:	30 df       	rcall	.-416    	; 0x1812 <odometry_wait_until_done>
}
    19b2:	6b 96       	adiw	r28, 0x1b	; 27
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	6c 97       	sbiw	r28, 0x1c	; 28
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	98 8f       	std	Y+24, r25	; 0x18
    19da:	8f 8b       	std	Y+23, r24	; 0x17
    19dc:	69 8f       	std	Y+25, r22	; 0x19
    19de:	4a 8f       	std	Y+26, r20	; 0x1a
    19e0:	3c 8f       	std	Y+28, r19	; 0x1c
    19e2:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    19e4:	89 8d       	ldd	r24, Y+25	; 0x19
    19e6:	ba dd       	rcall	.-1164   	; 0x155c <odometry_set_speed>

	buffer[0] = 'G';
    19e8:	87 e4       	ldi	r24, 0x47	; 71
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    19ec:	ef 89       	ldd	r30, Y+23	; 0x17
    19ee:	f8 8d       	ldd	r31, Y+24	; 0x18
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	89 2f       	mov	r24, r25
    19f6:	99 0f       	add	r25, r25
    19f8:	99 0b       	sbc	r25, r25
    19fa:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    19fc:	ef 89       	ldd	r30, Y+23	; 0x17
    19fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1a06:	ef 89       	ldd	r30, Y+23	; 0x17
    1a08:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	89 2f       	mov	r24, r25
    1a10:	99 0f       	add	r25, r25
    1a12:	99 0b       	sbc	r25, r25
    1a14:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1a16:	ef 89       	ldd	r30, Y+23	; 0x17
    1a18:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    1a20:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a24:	8d 8b       	std	Y+21, r24	; 0x15
    1a26:	6c c0       	rjmp	.+216    	; 0x1b00 <odometry_move_to_position+0x13c>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a8 e4       	ldi	r26, 0x48	; 72
    1a2e:	b2 e4       	ldi	r27, 0x42	; 66
    1a30:	8b 87       	std	Y+11, r24	; 0x0b
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	ad 87       	std	Y+13, r26	; 0x0d
    1a36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e4       	ldi	r19, 0x40	; 64
    1a44:	4c e1       	ldi	r20, 0x1C	; 28
    1a46:	55 e4       	ldi	r21, 0x45	; 69
    1a48:	eb d7       	rcall	.+4054   	; 0x2a20 <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8f 83       	std	Y+7, r24	; 0x07
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	a9 87       	std	Y+9, r26	; 0x09
    1a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	89 d6       	rcall	.+3346   	; 0x277a <__cmpsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <odometry_move_to_position+0xb2>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	3b c0       	rjmp	.+118    	; 0x1aec <odometry_move_to_position+0x128>
	else if (__tmp > 65535)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	c8 d7       	rcall	.+3984   	; 0x2a18 <__gesf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	3c f5       	brge	.+78     	; 0x1ada <odometry_move_to_position+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	c1 d7       	rcall	.+3970   	; 0x2a20 <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	da d6       	rcall	.+3508   	; 0x285c <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <odometry_move_to_position+0x10c>
    1ab2:	8a ef       	ldi	r24, 0xFA	; 250
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9c 83       	std	Y+4, r25	; 0x04
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <odometry_move_to_position+0xfa>
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <odometry_move_to_position+0xee>
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <odometry_move_to_position+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	bc d6       	rcall	.+3448   	; 0x285c <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <odometry_move_to_position+0x134>
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	ce 01       	movw	r24, r28
    1b02:	0f 96       	adiw	r24, 0x0f	; 15
    1b04:	63 ec       	ldi	r22, 0xC3	; 195
    1b06:	de d9       	rcall	.-3140   	; 0xec4 <CAN_Write>
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <odometry_move_to_position+0x14a>
    1b0c:	8d cf       	rjmp	.-230    	; 0x1a28 <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b12:	7f de       	rcall	.-770    	; 0x1812 <odometry_wait_until_done>
}
    1b14:	6c 96       	adiw	r28, 0x1c	; 28
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	68 97       	sbiw	r28, 0x18	; 24
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	98 8f       	std	Y+24, r25	; 0x18
    1b3c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1b3e:	89 e4       	ldi	r24, 0x49	; 73
    1b40:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1b42:	ef 89       	ldd	r30, Y+23	; 0x17
    1b44:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	89 2f       	mov	r24, r25
    1b4c:	99 0f       	add	r25, r25
    1b4e:	99 0b       	sbc	r25, r25
    1b50:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1b52:	ef 89       	ldd	r30, Y+23	; 0x17
    1b54:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1b5c:	ef 89       	ldd	r30, Y+23	; 0x17
    1b5e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	89 2f       	mov	r24, r25
    1b66:	99 0f       	add	r25, r25
    1b68:	99 0b       	sbc	r25, r25
    1b6a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1b6c:	ef 89       	ldd	r30, Y+23	; 0x17
    1b6e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1b76:	ef 89       	ldd	r30, Y+23	; 0x17
    1b78:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b7a:	84 81       	ldd	r24, Z+4	; 0x04
    1b7c:	95 81       	ldd	r25, Z+5	; 0x05
    1b7e:	89 2f       	mov	r24, r25
    1b80:	99 0f       	add	r25, r25
    1b82:	99 0b       	sbc	r25, r25
    1b84:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1b86:	ef 89       	ldd	r30, Y+23	; 0x17
    1b88:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	95 81       	ldd	r25, Z+5	; 0x05
    1b8e:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1b90:	ef 89       	ldd	r30, Y+23	; 0x17
    1b92:	f8 8d       	ldd	r31, Y+24	; 0x18
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	90 93 0b 01 	sts	0x010B, r25
    1b9c:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1ba0:	ef 89       	ldd	r30, Y+23	; 0x17
    1ba2:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	90 93 0d 01 	sts	0x010D, r25
    1bac:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1bb0:	ef 89       	ldd	r30, Y+23	; 0x17
    1bb2:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	95 81       	ldd	r25, Z+5	; 0x05
    1bb8:	90 93 0f 01 	sts	0x010F, r25
    1bbc:	80 93 0e 01 	sts	0x010E, r24
    1bc0:	6c c0       	rjmp	.+216    	; 0x1c9a <odometry_set_position+0x174>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a8 e4       	ldi	r26, 0x48	; 72
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	8b 87       	std	Y+11, r24	; 0x0b
    1bcc:	9c 87       	std	Y+12, r25	; 0x0c
    1bce:	ad 87       	std	Y+13, r26	; 0x0d
    1bd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e4       	ldi	r19, 0x40	; 64
    1bde:	4c e1       	ldi	r20, 0x1C	; 28
    1be0:	55 e4       	ldi	r21, 0x45	; 69
    1be2:	1e d7       	rcall	.+3644   	; 0x2a20 <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 83       	std	Y+7, r24	; 0x07
    1bea:	98 87       	std	Y+8, r25	; 0x08
    1bec:	a9 87       	std	Y+9, r26	; 0x09
    1bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	bc d5       	rcall	.+2936   	; 0x277a <__cmpsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <odometry_set_position+0xea>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	3b c0       	rjmp	.+118    	; 0x1c86 <odometry_set_position+0x160>
	else if (__tmp > 65535)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	fb d6       	rcall	.+3574   	; 0x2a18 <__gesf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	3c f5       	brge	.+78     	; 0x1c74 <odometry_set_position+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	f4 d6       	rcall	.+3560   	; 0x2a20 <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0d d6       	rcall	.+3098   	; 0x285c <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <odometry_set_position+0x144>
    1c4c:	8a ef       	ldi	r24, 0xFA	; 250
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <odometry_set_position+0x132>
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <odometry_set_position+0x126>
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <odometry_set_position+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	ef d5       	rcall	.+3038   	; 0x285c <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <odometry_set_position+0x16c>
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	0f 96       	adiw	r24, 0x0f	; 15
    1c9e:	63 ec       	ldi	r22, 0xC3	; 195
    1ca0:	11 d9       	rcall	.-3550   	; 0xec4 <CAN_Write>
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <odometry_set_position+0x182>
    1ca6:	8d cf       	rjmp	.-230    	; 0x1bc2 <odometry_set_position+0x9c>
		_delay_ms(50);
}
    1ca8:	68 96       	adiw	r28, 0x18	; 24
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	6b 97       	sbiw	r28, 0x1b	; 27
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	98 8f       	std	Y+24, r25	; 0x18
    1cd0:	8f 8b       	std	Y+23, r24	; 0x17
    1cd2:	69 8f       	std	Y+25, r22	; 0x19
    1cd4:	5b 8f       	std	Y+27, r21	; 0x1b
    1cd6:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1cd8:	89 8d       	ldd	r24, Y+25	; 0x19
    1cda:	40 dc       	rcall	.-1920   	; 0x155c <odometry_set_speed>

	buffer[0] = 'T';
    1cdc:	84 e5       	ldi	r24, 0x54	; 84
    1cde:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce4:	89 2f       	mov	r24, r25
    1ce6:	99 27       	eor	r25, r25
    1ce8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	6c c0       	rjmp	.+216    	; 0x1dc8 <odometry_rotate_for+0x10e>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a8 e4       	ldi	r26, 0x48	; 72
    1cf6:	b2 e4       	ldi	r27, 0x42	; 66
    1cf8:	8b 87       	std	Y+11, r24	; 0x0b
    1cfa:	9c 87       	std	Y+12, r25	; 0x0c
    1cfc:	ad 87       	std	Y+13, r26	; 0x0d
    1cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e4       	ldi	r19, 0x40	; 64
    1d0c:	4c e1       	ldi	r20, 0x1C	; 28
    1d0e:	55 e4       	ldi	r21, 0x45	; 69
    1d10:	87 d6       	rcall	.+3342   	; 0x2a20 <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	25 d5       	rcall	.+2634   	; 0x277a <__cmpsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <odometry_rotate_for+0x84>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	3b c0       	rjmp	.+118    	; 0x1db4 <odometry_rotate_for+0xfa>
	else if (__tmp > 65535)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	64 d6       	rcall	.+3272   	; 0x2a18 <__gesf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	3c f5       	brge	.+78     	; 0x1da2 <odometry_rotate_for+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	5d d6       	rcall	.+3258   	; 0x2a20 <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	76 d5       	rcall	.+2796   	; 0x285c <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <odometry_rotate_for+0xde>
    1d7a:	8a ef       	ldi	r24, 0xFA	; 250
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <odometry_rotate_for+0xcc>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <odometry_rotate_for+0xc0>
    1da0:	13 c0       	rjmp	.+38     	; 0x1dc8 <odometry_rotate_for+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	58 d5       	rcall	.+2736   	; 0x285c <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <odometry_rotate_for+0x106>
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	ce 01       	movw	r24, r28
    1dca:	0f 96       	adiw	r24, 0x0f	; 15
    1dcc:	63 ec       	ldi	r22, 0xC3	; 195
    1dce:	7a d8       	rcall	.-3852   	; 0xec4 <CAN_Write>
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <odometry_rotate_for+0x11c>
    1dd4:	8d cf       	rjmp	.-230    	; 0x1cf0 <odometry_rotate_for+0x36>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1dd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dda:	1b dd       	rcall	.-1482   	; 0x1812 <odometry_wait_until_done>

}
    1ddc:	6b 96       	adiw	r28, 0x1b	; 27
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <timer_register_callback+0x6>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	90 93 53 01 	sts	0x0153, r25
    1e04:	80 93 52 01 	sts	0x0152, r24
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <combination_check>:
static int combination_check()
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <combination_check+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <combination_check+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	if(combination[0] == 1 && combination[1] == 0 && combination[2] == 0)//first combination
    1e1e:	80 91 59 01 	lds	r24, 0x0159
    1e22:	90 91 5a 01 	lds	r25, 0x015A
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	91 05       	cpc	r25, r1
    1e2a:	89 f4       	brne	.+34     	; 0x1e4e <combination_check+0x3c>
    1e2c:	80 91 5b 01 	lds	r24, 0x015B
    1e30:	90 91 5c 01 	lds	r25, 0x015C
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	59 f4       	brne	.+22     	; 0x1e4e <combination_check+0x3c>
    1e38:	80 91 5d 01 	lds	r24, 0x015D
    1e3c:	90 91 5e 01 	lds	r25, 0x015E
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	29 f4       	brne	.+10     	; 0x1e4e <combination_check+0x3c>
		return 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	78 c0       	rjmp	.+240    	; 0x1f3e <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 0)//second combination
    1e4e:	80 91 59 01 	lds	r24, 0x0159
    1e52:	90 91 5a 01 	lds	r25, 0x015A
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	91 f4       	brne	.+36     	; 0x1e7e <combination_check+0x6c>
    1e5a:	80 91 5b 01 	lds	r24, 0x015B
    1e5e:	90 91 5c 01 	lds	r25, 0x015C
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	59 f4       	brne	.+22     	; 0x1e7e <combination_check+0x6c>
    1e68:	80 91 5d 01 	lds	r24, 0x015D
    1e6c:	90 91 5e 01 	lds	r25, 0x015E
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <combination_check+0x6c>
		return 2;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	60 c0       	rjmp	.+192    	; 0x1f3e <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 1)//third combination
    1e7e:	80 91 59 01 	lds	r24, 0x0159
    1e82:	90 91 5a 01 	lds	r25, 0x015A
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	91 f4       	brne	.+36     	; 0x1eae <combination_check+0x9c>
    1e8a:	80 91 5b 01 	lds	r24, 0x015B
    1e8e:	90 91 5c 01 	lds	r25, 0x015C
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	61 f4       	brne	.+24     	; 0x1eae <combination_check+0x9c>
    1e96:	80 91 5d 01 	lds	r24, 0x015D
    1e9a:	90 91 5e 01 	lds	r25, 0x015E
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <combination_check+0x9c>
		return 3;
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	48 c0       	rjmp	.+144    	; 0x1f3e <combination_check+0x12c>
	else if(combination[0] == 1 && combination[1] == 1 && combination[2] == 0)//fourth combination
    1eae:	80 91 59 01 	lds	r24, 0x0159
    1eb2:	90 91 5a 01 	lds	r25, 0x015A
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	91 f4       	brne	.+36     	; 0x1ee0 <combination_check+0xce>
    1ebc:	80 91 5b 01 	lds	r24, 0x015B
    1ec0:	90 91 5c 01 	lds	r25, 0x015C
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	59 f4       	brne	.+22     	; 0x1ee0 <combination_check+0xce>
    1eca:	80 91 5d 01 	lds	r24, 0x015D
    1ece:	90 91 5e 01 	lds	r25, 0x015E
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	29 f4       	brne	.+10     	; 0x1ee0 <combination_check+0xce>
		return 4;
    1ed6:	84 e0       	ldi	r24, 0x04	; 4
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	2f c0       	rjmp	.+94     	; 0x1f3e <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 1)//five combination
    1ee0:	80 91 59 01 	lds	r24, 0x0159
    1ee4:	90 91 5a 01 	lds	r25, 0x015A
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	99 f4       	brne	.+38     	; 0x1f12 <combination_check+0x100>
    1eec:	80 91 5b 01 	lds	r24, 0x015B
    1ef0:	90 91 5c 01 	lds	r25, 0x015C
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	61 f4       	brne	.+24     	; 0x1f12 <combination_check+0x100>
    1efa:	80 91 5d 01 	lds	r24, 0x015D
    1efe:	90 91 5e 01 	lds	r25, 0x015E
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <combination_check+0x100>
		return 5;
    1f08:	85 e0       	ldi	r24, 0x05	; 5
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	16 c0       	rjmp	.+44     	; 0x1f3e <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 0)//error combination
    1f12:	80 91 59 01 	lds	r24, 0x0159
    1f16:	90 91 5a 01 	lds	r25, 0x015A
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	79 f4       	brne	.+30     	; 0x1f3c <combination_check+0x12a>
    1f1e:	80 91 5b 01 	lds	r24, 0x015B
    1f22:	90 91 5c 01 	lds	r25, 0x015C
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	49 f4       	brne	.+18     	; 0x1f3c <combination_check+0x12a>
    1f2a:	80 91 5d 01 	lds	r24, 0x015D
    1f2e:	90 91 5e 01 	lds	r25, 0x015E
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <combination_check+0x12a>
		return 0;
    1f36:	1a 82       	std	Y+2, r1	; 0x02
    1f38:	19 82       	std	Y+1, r1	; 0x01
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <combination_check+0x12c>
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <combination_check+0x134>
}
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <camera>:
int camera(void)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	62 97       	sbiw	r28, 0x12	; 18
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
	int comb,i;
	for(i=0;i<5;i++)
    1f6c:	18 8a       	std	Y+16, r1	; 0x10
    1f6e:	1f 86       	std	Y+15, r1	; 0x0f
    1f70:	8c c0       	rjmp	.+280    	; 0x208a <camera+0x132>
	{
		combination[0] = gpio_read_pin(9);
    1f72:	89 e0       	ldi	r24, 0x09	; 9
    1f74:	96 d9       	rcall	.-3284   	; 0x12a2 <gpio_read_pin>
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	90 93 5a 01 	sts	0x015A, r25
    1f7e:	80 93 59 01 	sts	0x0159, r24
		combination[1] = gpio_read_pin(10);
    1f82:	8a e0       	ldi	r24, 0x0A	; 10
    1f84:	8e d9       	rcall	.-3300   	; 0x12a2 <gpio_read_pin>
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	90 93 5c 01 	sts	0x015C, r25
    1f8e:	80 93 5b 01 	sts	0x015B, r24
		combination[2] = gpio_read_pin(11);
    1f92:	8b e0       	ldi	r24, 0x0B	; 11
    1f94:	86 d9       	rcall	.-3316   	; 0x12a2 <gpio_read_pin>
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	90 93 5e 01 	sts	0x015E, r25
    1f9e:	80 93 5d 01 	sts	0x015D, r24
		
		comb = combination_check();
    1fa2:	37 df       	rcall	.-402    	; 0x1e12 <combination_check>
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a8 ec       	ldi	r26, 0xC8	; 200
    1fae:	b2 e4       	ldi	r27, 0x42	; 66
    1fb0:	8b 87       	std	Y+11, r24	; 0x0b
    1fb2:	9c 87       	std	Y+12, r25	; 0x0c
    1fb4:	ad 87       	std	Y+13, r26	; 0x0d
    1fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e4       	ldi	r19, 0x40	; 64
    1fc4:	4c e1       	ldi	r20, 0x1C	; 28
    1fc6:	55 e4       	ldi	r21, 0x45	; 69
    1fc8:	2b d5       	rcall	.+2646   	; 0x2a20 <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8f 83       	std	Y+7, r24	; 0x07
    1fd0:	98 87       	std	Y+8, r25	; 0x08
    1fd2:	a9 87       	std	Y+9, r26	; 0x09
    1fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	c9 d3       	rcall	.+1938   	; 0x277a <__cmpsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <camera+0x9e>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	3b c0       	rjmp	.+118    	; 0x206c <camera+0x114>
	else if (__tmp > 65535)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	08 d5       	rcall	.+2576   	; 0x2a18 <__gesf2>
    2008:	18 16       	cp	r1, r24
    200a:	3c f5       	brge	.+78     	; 0x205a <camera+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	01 d5       	rcall	.+2562   	; 0x2a20 <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	1a d4       	rcall	.+2100   	; 0x285c <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <camera+0xf8>
    2032:	8a ef       	ldi	r24, 0xFA	; 250
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <camera+0xe6>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <camera+0xda>
    2058:	13 c0       	rjmp	.+38     	; 0x2080 <camera+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	fc d3       	rcall	.+2040   	; 0x285c <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <camera+0x120>
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
		return 0;
}
int camera(void)
{
	int comb,i;
	for(i=0;i<5;i++)
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	98 89       	ldd	r25, Y+16	; 0x10
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	85 30       	cpi	r24, 0x05	; 5
    2090:	91 05       	cpc	r25, r1
    2092:	0c f4       	brge	.+2      	; 0x2096 <camera+0x13e>
    2094:	6e cf       	rjmp	.-292    	; 0x1f72 <camera+0x1a>
		combination[2] = gpio_read_pin(11);
		
		comb = combination_check();
		_delay_ms(100);	
	}
	return comb;
    2096:	89 89       	ldd	r24, Y+17	; 0x11
    2098:	9a 89       	ldd	r25, Y+18	; 0x12
}
    209a:	62 96       	adiw	r28, 0x12	; 18
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <timer_init>:


void timer_init(unsigned int freq)
{
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <timer_init+0xa>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    20be:	e0 e8       	ldi	r30, 0x80	; 128
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    20c4:	e1 e8       	ldi	r30, 0x81	; 129
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	89 e0       	ldi	r24, 0x09	; 9
    20ca:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    20cc:	08 e8       	ldi	r16, 0x88	; 136
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	cc 01       	movw	r24, r24
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	ea d3       	rcall	.+2004   	; 0x28b4 <__floatunsisf>
    20e0:	9b 01       	movw	r18, r22
    20e2:	ac 01       	movw	r20, r24
    20e4:	60 e8       	ldi	r22, 0x80	; 128
    20e6:	76 e9       	ldi	r23, 0x96	; 150
    20e8:	88 e1       	ldi	r24, 0x18	; 24
    20ea:	9b e4       	ldi	r25, 0x4B	; 75
    20ec:	4a d3       	rcall	.+1684   	; 0x2782 <__divsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	d9 d2       	rcall	.+1458   	; 0x26b2 <__addsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	a9 d3       	rcall	.+1874   	; 0x285c <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2114:	ef e6       	ldi	r30, 0x6F	; 111
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	80 83       	st	Z, r24

	SREG |= 0x80;
    211c:	af e5       	ldi	r26, 0x5F	; 95
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ef e5       	ldi	r30, 0x5F	; 95
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8c 93       	st	X, r24
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2138:	1f 92       	push	r1
    213a:	0f 92       	push	r0
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	0f 92       	push	r0
    2140:	00 90 5b 00 	lds	r0, 0x005B
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2168:	80 91 52 01 	lds	r24, 0x0152
    216c:	90 91 53 01 	lds	r25, 0x0153
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	29 f0       	breq	.+10     	; 0x217e <__vector_12+0x46>
        timer_callback();
    2174:	e0 91 52 01 	lds	r30, 0x0152
    2178:	f0 91 53 01 	lds	r31, 0x0153
    217c:	09 95       	icall
	if(sys_time >= 80000)
    217e:	80 91 54 01 	lds	r24, 0x0154
    2182:	90 91 55 01 	lds	r25, 0x0155
    2186:	a0 91 56 01 	lds	r26, 0x0156
    218a:	b0 91 57 01 	lds	r27, 0x0157
    218e:	80 38       	cpi	r24, 0x80	; 128
    2190:	28 e3       	ldi	r18, 0x38	; 56
    2192:	92 07       	cpc	r25, r18
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	a2 07       	cpc	r26, r18
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	b2 07       	cpc	r27, r18
    219c:	10 f0       	brcs	.+4      	; 0x21a2 <__vector_12+0x6a>
		actuators_umbrella();
    219e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <actuators_umbrella>
	sys_time++;
    21a2:	80 91 54 01 	lds	r24, 0x0154
    21a6:	90 91 55 01 	lds	r25, 0x0155
    21aa:	a0 91 56 01 	lds	r26, 0x0156
    21ae:	b0 91 57 01 	lds	r27, 0x0157
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	a1 1d       	adc	r26, r1
    21b6:	b1 1d       	adc	r27, r1
    21b8:	80 93 54 01 	sts	0x0154, r24
    21bc:	90 93 55 01 	sts	0x0155, r25
    21c0:	a0 93 56 01 	sts	0x0156, r26
    21c4:	b0 93 57 01 	sts	0x0157, r27
}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	ff 91       	pop	r31
    21ce:	ef 91       	pop	r30
    21d0:	bf 91       	pop	r27
    21d2:	af 91       	pop	r26
    21d4:	9f 91       	pop	r25
    21d6:	8f 91       	pop	r24
    21d8:	7f 91       	pop	r23
    21da:	6f 91       	pop	r22
    21dc:	5f 91       	pop	r21
    21de:	4f 91       	pop	r20
    21e0:	3f 91       	pop	r19
    21e2:	2f 91       	pop	r18
    21e4:	0f 90       	pop	r0
    21e6:	00 92 5b 00 	sts	0x005B, r0
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    21fc:	10 92 54 01 	sts	0x0154, r1
    2200:	10 92 55 01 	sts	0x0155, r1
    2204:	10 92 56 01 	sts	0x0156, r1
    2208:	10 92 57 01 	sts	0x0157, r1
}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <system_set_match_started>:
void system_set_match_started(void)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 58 01 	sts	0x0158, r24
}
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    222e:	80 91 54 01 	lds	r24, 0x0154
    2232:	90 91 55 01 	lds	r25, 0x0155
    2236:	a0 91 56 01 	lds	r26, 0x0156
    223a:	b0 91 57 01 	lds	r27, 0x0157
}
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <system_init>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
void system_init(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	6c 97       	sbiw	r28, 0x1c	; 28
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	timer_register_callback(gpio_debouncer);
    225c:	81 ed       	ldi	r24, 0xD1	; 209
    225e:	99 e0       	ldi	r25, 0x09	; 9
    2260:	c6 dd       	rcall	.-1140   	; 0x1dee <timer_register_callback>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a8 ec       	ldi	r26, 0xC8	; 200
    2268:	b2 e4       	ldi	r27, 0x42	; 66
    226a:	89 8f       	std	Y+25, r24	; 0x19
    226c:	9a 8f       	std	Y+26, r25	; 0x1a
    226e:	ab 8f       	std	Y+27, r26	; 0x1b
    2270:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	69 8d       	ldd	r22, Y+25	; 0x19
    2274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e4       	ldi	r19, 0x40	; 64
    227e:	4c e1       	ldi	r20, 0x1C	; 28
    2280:	55 e4       	ldi	r21, 0x45	; 69
    2282:	ce d3       	rcall	.+1948   	; 0x2a20 <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 8b       	std	Y+21, r24	; 0x15
    228a:	9e 8b       	std	Y+22, r25	; 0x16
    228c:	af 8b       	std	Y+23, r26	; 0x17
    228e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	6c d2       	rcall	.+1240   	; 0x277a <__cmpsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <system_init+0x68>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	3b c0       	rjmp	.+118    	; 0x2326 <system_init+0xde>
	else if (__tmp > 65535)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	ab d3       	rcall	.+1878   	; 0x2a18 <__gesf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	3c f5       	brge	.+78     	; 0x2314 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	69 8d       	ldd	r22, Y+25	; 0x19
    22c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	a4 d3       	rcall	.+1864   	; 0x2a20 <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	bd d2       	rcall	.+1402   	; 0x285c <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <system_init+0xc2>
    22ec:	8a ef       	ldi	r24, 0xFA	; 250
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9a 8b       	std	Y+18, r25	; 0x12
    22f2:	89 8b       	std	Y+17, r24	; 0x11
    22f4:	89 89       	ldd	r24, Y+17	; 0x11
    22f6:	9a 89       	ldd	r25, Y+18	; 0x12
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <system_init+0xb0>
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <system_init+0xa4>
    2312:	13 c0       	rjmp	.+38     	; 0x233a <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	9f d2       	rcall	.+1342   	; 0x285c <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	98 8b       	std	Y+16, r25	; 0x10
    232c:	8f 87       	std	Y+15, r24	; 0x0f
    232e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2330:	98 89       	ldd	r25, Y+16	; 0x10
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <system_init+0xea>
    2336:	98 8b       	std	Y+16, r25	; 0x10
    2338:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);							//jumper
    233a:	88 e0       	ldi	r24, 0x08	; 8
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <gpio_register_pin>
	gpio_register_pin(9,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    2344:	89 e0       	ldi	r24, 0x09	; 9
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <gpio_register_pin>
	gpio_register_pin(10,GPIO_DIRECTION_INPUT,true);						//camera 1 position
    234e:	8a e0       	ldi	r24, 0x0A	; 10
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <gpio_register_pin>
	gpio_register_pin(11,GPIO_DIRECTION_INPUT,true);						//camera 2 position
    2358:	8b e0       	ldi	r24, 0x0B	; 11
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <gpio_register_pin>
	
	DDRG = 0xff;
    2362:	e3 e3       	ldi	r30, 0x33	; 51
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	80 83       	st	Z, r24
	PORTG = 0xff;
    236a:	e4 e3       	ldi	r30, 0x34	; 52
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	80 83       	st	Z, r24
	servo_init(50);
    2372:	82 e3       	ldi	r24, 0x32	; 50
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	0e 94 43 01 	call	0x286	; 0x286 <servo_init>
	timer_init(1000);
    237a:	88 ee       	ldi	r24, 0xE8	; 232
    237c:	93 e0       	ldi	r25, 0x03	; 3
    237e:	96 de       	rcall	.-724    	; 0x20ac <timer_init>
	CAN_Init(1);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 a2 06 	call	0xd44	; 0xd44 <CAN_Init>

	actuators_setup();
    2386:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <actuators_setup>
    238a:	6c c0       	rjmp	.+216    	; 0x2464 <system_init+0x21c>
	
	while(gpio_read_pin(8))
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e2       	ldi	r26, 0x20	; 32
    2392:	b1 e4       	ldi	r27, 0x41	; 65
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	ad 87       	std	Y+13, r26	; 0x0d
    239a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e4       	ldi	r19, 0x40	; 64
    23a8:	4c e1       	ldi	r20, 0x1C	; 28
    23aa:	55 e4       	ldi	r21, 0x45	; 69
    23ac:	39 d3       	rcall	.+1650   	; 0x2a20 <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
    23b6:	a9 87       	std	Y+9, r26	; 0x09
    23b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	d7 d1       	rcall	.+942    	; 0x277a <__cmpsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <system_init+0x192>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	3b c0       	rjmp	.+118    	; 0x2450 <system_init+0x208>
	else if (__tmp > 65535)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	16 d3       	rcall	.+1580   	; 0x2a18 <__gesf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	3c f5       	brge	.+78     	; 0x243e <system_init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0f d3       	rcall	.+1566   	; 0x2a20 <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	28 d2       	rcall	.+1104   	; 0x285c <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <system_init+0x1ec>
    2416:	8a ef       	ldi	r24, 0xFA	; 250
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <system_init+0x1da>
    2426:	9c 83       	std	Y+4, r25	; 0x04
    2428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <system_init+0x1ce>
    243c:	13 c0       	rjmp	.+38     	; 0x2464 <system_init+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	0a d2       	rcall	.+1044   	; 0x285c <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <system_init+0x214>
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	88 e0       	ldi	r24, 0x08	; 8
    2466:	0e 94 51 09 	call	0x12a2	; 0x12a2 <gpio_read_pin>
    246a:	88 23       	and	r24, r24
    246c:	09 f0       	breq	.+2      	; 0x2470 <system_init+0x228>
    246e:	8e cf       	rjmp	.-228    	; 0x238c <system_init+0x144>
		_delay_ms(10);
	PORTG = 0x00;
    2470:	e4 e3       	ldi	r30, 0x34	; 52
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	10 82       	st	Z, r1
	system_reset_system_time();
    2476:	be de       	rcall	.-644    	; 0x21f4 <system_reset_system_time>
	system_set_match_started();
    2478:	cc de       	rcall	.-616    	; 0x2212 <system_set_match_started>
    247a:	6c 96       	adiw	r28, 0x1c	; 28
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <__vector_23>:
    248c:	1f 92       	push	r1
    248e:	0f 92       	push	r0
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	0f 92       	push	r0
    2494:	00 90 5b 00 	lds	r0, 0x005B
    2498:	0f 92       	push	r0
    249a:	11 24       	eor	r1, r1
    249c:	8f 93       	push	r24
    249e:	9f 93       	push	r25
    24a0:	af 93       	push	r26
    24a2:	bf 93       	push	r27
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	80 91 5d 01 	lds	r24, 0x015D
    24b4:	88 23       	and	r24, r24
    24b6:	d9 f0       	breq	.+54     	; 0x24ee <__vector_23+0x62>
    24b8:	80 91 5d 01 	lds	r24, 0x015D
    24bc:	81 50       	subi	r24, 0x01	; 1
    24be:	80 93 5d 01 	sts	0x015D, r24
    24c2:	a6 ec       	ldi	r26, 0xC6	; 198
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	80 91 5e 01 	lds	r24, 0x015E
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	fc 01       	movw	r30, r24
    24d0:	eb 59       	subi	r30, 0x9B	; 155
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	80 81       	ld	r24, Z
    24d6:	8c 93       	st	X, r24
    24d8:	80 91 5e 01 	lds	r24, 0x015E
    24dc:	8f 5f       	subi	r24, 0xFF	; 255
    24de:	80 93 5e 01 	sts	0x015E, r24
    24e2:	80 91 5e 01 	lds	r24, 0x015E
    24e6:	80 34       	cpi	r24, 0x40	; 64
    24e8:	11 f4       	brne	.+4      	; 0x24ee <__vector_23+0x62>
    24ea:	10 92 5e 01 	sts	0x015E, r1
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	ff 91       	pop	r31
    24f4:	ef 91       	pop	r30
    24f6:	bf 91       	pop	r27
    24f8:	af 91       	pop	r26
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	0f 90       	pop	r0
    2500:	00 92 5b 00 	sts	0x005B, r0
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	1f 90       	pop	r1
    250c:	18 95       	reti

0000250e <__vector_21>:
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	00 90 5b 00 	lds	r0, 0x005B
    251a:	0f 92       	push	r0
    251c:	11 24       	eor	r1, r1
    251e:	2f 93       	push	r18
    2520:	8f 93       	push	r24
    2522:	9f 93       	push	r25
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	e0 ec       	ldi	r30, 0xC0	; 192
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	8c 71       	andi	r24, 0x1C	; 28
    2542:	90 70       	andi	r25, 0x00	; 0
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	d9 f4       	brne	.+54     	; 0x257e <__vector_21+0x70>
    2548:	80 91 5f 01 	lds	r24, 0x015F
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	e6 ec       	ldi	r30, 0xC6	; 198
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	20 81       	ld	r18, Z
    2556:	fc 01       	movw	r30, r24
    2558:	eb 55       	subi	r30, 0x5B	; 91
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	20 83       	st	Z, r18
    255e:	80 91 5f 01 	lds	r24, 0x015F
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	80 93 5f 01 	sts	0x015F, r24
    2568:	80 91 5f 01 	lds	r24, 0x015F
    256c:	80 34       	cpi	r24, 0x40	; 64
    256e:	11 f4       	brne	.+4      	; 0x2574 <__vector_21+0x66>
    2570:	10 92 5f 01 	sts	0x015F, r1
    2574:	80 91 60 01 	lds	r24, 0x0160
    2578:	8f 5f       	subi	r24, 0xFF	; 255
    257a:	80 93 60 01 	sts	0x0160, r24
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	ff 91       	pop	r31
    2586:	ef 91       	pop	r30
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	2f 91       	pop	r18
    258e:	0f 90       	pop	r0
    2590:	00 92 5b 00 	sts	0x005B, r0
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <__vector_34>:
    259e:	1f 92       	push	r1
    25a0:	0f 92       	push	r0
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	0f 92       	push	r0
    25a6:	00 90 5b 00 	lds	r0, 0x005B
    25aa:	0f 92       	push	r0
    25ac:	11 24       	eor	r1, r1
    25ae:	8f 93       	push	r24
    25b0:	9f 93       	push	r25
    25b2:	af 93       	push	r26
    25b4:	bf 93       	push	r27
    25b6:	ef 93       	push	r30
    25b8:	ff 93       	push	r31
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	80 91 61 01 	lds	r24, 0x0161
    25c6:	88 23       	and	r24, r24
    25c8:	d9 f0       	breq	.+54     	; 0x2600 <__vector_34+0x62>
    25ca:	80 91 61 01 	lds	r24, 0x0161
    25ce:	81 50       	subi	r24, 0x01	; 1
    25d0:	80 93 61 01 	sts	0x0161, r24
    25d4:	ae ec       	ldi	r26, 0xCE	; 206
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	80 91 62 01 	lds	r24, 0x0162
    25dc:	88 2f       	mov	r24, r24
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	fc 01       	movw	r30, r24
    25e2:	eb 51       	subi	r30, 0x1B	; 27
    25e4:	fe 4f       	sbci	r31, 0xFE	; 254
    25e6:	80 81       	ld	r24, Z
    25e8:	8c 93       	st	X, r24
    25ea:	80 91 62 01 	lds	r24, 0x0162
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	80 93 62 01 	sts	0x0162, r24
    25f4:	80 91 62 01 	lds	r24, 0x0162
    25f8:	80 34       	cpi	r24, 0x40	; 64
    25fa:	11 f4       	brne	.+4      	; 0x2600 <__vector_34+0x62>
    25fc:	10 92 62 01 	sts	0x0162, r1
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	ff 91       	pop	r31
    2606:	ef 91       	pop	r30
    2608:	bf 91       	pop	r27
    260a:	af 91       	pop	r26
    260c:	9f 91       	pop	r25
    260e:	8f 91       	pop	r24
    2610:	0f 90       	pop	r0
    2612:	00 92 5b 00 	sts	0x005B, r0
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <__vector_32>:
    2620:	1f 92       	push	r1
    2622:	0f 92       	push	r0
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	0f 92       	push	r0
    2628:	00 90 5b 00 	lds	r0, 0x005B
    262c:	0f 92       	push	r0
    262e:	11 24       	eor	r1, r1
    2630:	2f 93       	push	r18
    2632:	8f 93       	push	r24
    2634:	9f 93       	push	r25
    2636:	ef 93       	push	r30
    2638:	ff 93       	push	r31
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	e8 ec       	ldi	r30, 0xC8	; 200
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	8c 71       	andi	r24, 0x1C	; 28
    2654:	90 70       	andi	r25, 0x00	; 0
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	d9 f4       	brne	.+54     	; 0x2690 <__vector_32+0x70>
    265a:	80 91 63 01 	lds	r24, 0x0163
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	ee ec       	ldi	r30, 0xCE	; 206
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	20 81       	ld	r18, Z
    2668:	fc 01       	movw	r30, r24
    266a:	eb 5d       	subi	r30, 0xDB	; 219
    266c:	fd 4f       	sbci	r31, 0xFD	; 253
    266e:	20 83       	st	Z, r18
    2670:	80 91 63 01 	lds	r24, 0x0163
    2674:	8f 5f       	subi	r24, 0xFF	; 255
    2676:	80 93 63 01 	sts	0x0163, r24
    267a:	80 91 63 01 	lds	r24, 0x0163
    267e:	80 34       	cpi	r24, 0x40	; 64
    2680:	11 f4       	brne	.+4      	; 0x2686 <__vector_32+0x66>
    2682:	10 92 63 01 	sts	0x0163, r1
    2686:	80 91 64 01 	lds	r24, 0x0164
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	80 93 64 01 	sts	0x0164, r24
    2690:	0f 90       	pop	r0
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	9f 91       	pop	r25
    269c:	8f 91       	pop	r24
    269e:	2f 91       	pop	r18
    26a0:	0f 90       	pop	r0
    26a2:	00 92 5b 00 	sts	0x005B, r0
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

000026b0 <__subsf3>:
    26b0:	50 58       	subi	r21, 0x80	; 128

000026b2 <__addsf3>:
    26b2:	bb 27       	eor	r27, r27
    26b4:	aa 27       	eor	r26, r26
    26b6:	0e d0       	rcall	.+28     	; 0x26d4 <__addsf3x>
    26b8:	75 c1       	rjmp	.+746    	; 0x29a4 <__fp_round>
    26ba:	66 d1       	rcall	.+716    	; 0x2988 <__fp_pscA>
    26bc:	30 f0       	brcs	.+12     	; 0x26ca <__addsf3+0x18>
    26be:	6b d1       	rcall	.+726    	; 0x2996 <__fp_pscB>
    26c0:	20 f0       	brcs	.+8      	; 0x26ca <__addsf3+0x18>
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <__addsf3+0x1e>
    26c4:	9f 3f       	cpi	r25, 0xFF	; 255
    26c6:	11 f4       	brne	.+4      	; 0x26cc <__addsf3+0x1a>
    26c8:	1e f4       	brtc	.+6      	; 0x26d0 <__addsf3+0x1e>
    26ca:	5b c1       	rjmp	.+694    	; 0x2982 <__fp_nan>
    26cc:	0e f4       	brtc	.+2      	; 0x26d0 <__addsf3+0x1e>
    26ce:	e0 95       	com	r30
    26d0:	e7 fb       	bst	r30, 7
    26d2:	51 c1       	rjmp	.+674    	; 0x2976 <__fp_inf>

000026d4 <__addsf3x>:
    26d4:	e9 2f       	mov	r30, r25
    26d6:	77 d1       	rcall	.+750    	; 0x29c6 <__fp_split3>
    26d8:	80 f3       	brcs	.-32     	; 0x26ba <__addsf3+0x8>
    26da:	ba 17       	cp	r27, r26
    26dc:	62 07       	cpc	r22, r18
    26de:	73 07       	cpc	r23, r19
    26e0:	84 07       	cpc	r24, r20
    26e2:	95 07       	cpc	r25, r21
    26e4:	18 f0       	brcs	.+6      	; 0x26ec <__addsf3x+0x18>
    26e6:	71 f4       	brne	.+28     	; 0x2704 <__addsf3x+0x30>
    26e8:	9e f5       	brtc	.+102    	; 0x2750 <__addsf3x+0x7c>
    26ea:	8f c1       	rjmp	.+798    	; 0x2a0a <__fp_zero>
    26ec:	0e f4       	brtc	.+2      	; 0x26f0 <__addsf3x+0x1c>
    26ee:	e0 95       	com	r30
    26f0:	0b 2e       	mov	r0, r27
    26f2:	ba 2f       	mov	r27, r26
    26f4:	a0 2d       	mov	r26, r0
    26f6:	0b 01       	movw	r0, r22
    26f8:	b9 01       	movw	r22, r18
    26fa:	90 01       	movw	r18, r0
    26fc:	0c 01       	movw	r0, r24
    26fe:	ca 01       	movw	r24, r20
    2700:	a0 01       	movw	r20, r0
    2702:	11 24       	eor	r1, r1
    2704:	ff 27       	eor	r31, r31
    2706:	59 1b       	sub	r21, r25
    2708:	99 f0       	breq	.+38     	; 0x2730 <__addsf3x+0x5c>
    270a:	59 3f       	cpi	r21, 0xF9	; 249
    270c:	50 f4       	brcc	.+20     	; 0x2722 <__addsf3x+0x4e>
    270e:	50 3e       	cpi	r21, 0xE0	; 224
    2710:	68 f1       	brcs	.+90     	; 0x276c <__addsf3x+0x98>
    2712:	1a 16       	cp	r1, r26
    2714:	f0 40       	sbci	r31, 0x00	; 0
    2716:	a2 2f       	mov	r26, r18
    2718:	23 2f       	mov	r18, r19
    271a:	34 2f       	mov	r19, r20
    271c:	44 27       	eor	r20, r20
    271e:	58 5f       	subi	r21, 0xF8	; 248
    2720:	f3 cf       	rjmp	.-26     	; 0x2708 <__addsf3x+0x34>
    2722:	46 95       	lsr	r20
    2724:	37 95       	ror	r19
    2726:	27 95       	ror	r18
    2728:	a7 95       	ror	r26
    272a:	f0 40       	sbci	r31, 0x00	; 0
    272c:	53 95       	inc	r21
    272e:	c9 f7       	brne	.-14     	; 0x2722 <__addsf3x+0x4e>
    2730:	7e f4       	brtc	.+30     	; 0x2750 <__addsf3x+0x7c>
    2732:	1f 16       	cp	r1, r31
    2734:	ba 0b       	sbc	r27, r26
    2736:	62 0b       	sbc	r22, r18
    2738:	73 0b       	sbc	r23, r19
    273a:	84 0b       	sbc	r24, r20
    273c:	ba f0       	brmi	.+46     	; 0x276c <__addsf3x+0x98>
    273e:	91 50       	subi	r25, 0x01	; 1
    2740:	a1 f0       	breq	.+40     	; 0x276a <__addsf3x+0x96>
    2742:	ff 0f       	add	r31, r31
    2744:	bb 1f       	adc	r27, r27
    2746:	66 1f       	adc	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	c2 f7       	brpl	.-16     	; 0x273e <__addsf3x+0x6a>
    274e:	0e c0       	rjmp	.+28     	; 0x276c <__addsf3x+0x98>
    2750:	ba 0f       	add	r27, r26
    2752:	62 1f       	adc	r22, r18
    2754:	73 1f       	adc	r23, r19
    2756:	84 1f       	adc	r24, r20
    2758:	48 f4       	brcc	.+18     	; 0x276c <__addsf3x+0x98>
    275a:	87 95       	ror	r24
    275c:	77 95       	ror	r23
    275e:	67 95       	ror	r22
    2760:	b7 95       	ror	r27
    2762:	f7 95       	ror	r31
    2764:	9e 3f       	cpi	r25, 0xFE	; 254
    2766:	08 f0       	brcs	.+2      	; 0x276a <__addsf3x+0x96>
    2768:	b3 cf       	rjmp	.-154    	; 0x26d0 <__addsf3+0x1e>
    276a:	93 95       	inc	r25
    276c:	88 0f       	add	r24, r24
    276e:	08 f0       	brcs	.+2      	; 0x2772 <__addsf3x+0x9e>
    2770:	99 27       	eor	r25, r25
    2772:	ee 0f       	add	r30, r30
    2774:	97 95       	ror	r25
    2776:	87 95       	ror	r24
    2778:	08 95       	ret

0000277a <__cmpsf2>:
    277a:	d9 d0       	rcall	.+434    	; 0x292e <__fp_cmp>
    277c:	08 f4       	brcc	.+2      	; 0x2780 <__cmpsf2+0x6>
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	08 95       	ret

00002782 <__divsf3>:
    2782:	0c d0       	rcall	.+24     	; 0x279c <__divsf3x>
    2784:	0f c1       	rjmp	.+542    	; 0x29a4 <__fp_round>
    2786:	07 d1       	rcall	.+526    	; 0x2996 <__fp_pscB>
    2788:	40 f0       	brcs	.+16     	; 0x279a <__divsf3+0x18>
    278a:	fe d0       	rcall	.+508    	; 0x2988 <__fp_pscA>
    278c:	30 f0       	brcs	.+12     	; 0x279a <__divsf3+0x18>
    278e:	21 f4       	brne	.+8      	; 0x2798 <__divsf3+0x16>
    2790:	5f 3f       	cpi	r21, 0xFF	; 255
    2792:	19 f0       	breq	.+6      	; 0x279a <__divsf3+0x18>
    2794:	f0 c0       	rjmp	.+480    	; 0x2976 <__fp_inf>
    2796:	51 11       	cpse	r21, r1
    2798:	39 c1       	rjmp	.+626    	; 0x2a0c <__fp_szero>
    279a:	f3 c0       	rjmp	.+486    	; 0x2982 <__fp_nan>

0000279c <__divsf3x>:
    279c:	14 d1       	rcall	.+552    	; 0x29c6 <__fp_split3>
    279e:	98 f3       	brcs	.-26     	; 0x2786 <__divsf3+0x4>

000027a0 <__divsf3_pse>:
    27a0:	99 23       	and	r25, r25
    27a2:	c9 f3       	breq	.-14     	; 0x2796 <__divsf3+0x14>
    27a4:	55 23       	and	r21, r21
    27a6:	b1 f3       	breq	.-20     	; 0x2794 <__divsf3+0x12>
    27a8:	95 1b       	sub	r25, r21
    27aa:	55 0b       	sbc	r21, r21
    27ac:	bb 27       	eor	r27, r27
    27ae:	aa 27       	eor	r26, r26
    27b0:	62 17       	cp	r22, r18
    27b2:	73 07       	cpc	r23, r19
    27b4:	84 07       	cpc	r24, r20
    27b6:	38 f0       	brcs	.+14     	; 0x27c6 <__divsf3_pse+0x26>
    27b8:	9f 5f       	subi	r25, 0xFF	; 255
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	44 1f       	adc	r20, r20
    27c2:	aa 1f       	adc	r26, r26
    27c4:	a9 f3       	breq	.-22     	; 0x27b0 <__divsf3_pse+0x10>
    27c6:	33 d0       	rcall	.+102    	; 0x282e <__divsf3_pse+0x8e>
    27c8:	0e 2e       	mov	r0, r30
    27ca:	3a f0       	brmi	.+14     	; 0x27da <__divsf3_pse+0x3a>
    27cc:	e0 e8       	ldi	r30, 0x80	; 128
    27ce:	30 d0       	rcall	.+96     	; 0x2830 <__divsf3_pse+0x90>
    27d0:	91 50       	subi	r25, 0x01	; 1
    27d2:	50 40       	sbci	r21, 0x00	; 0
    27d4:	e6 95       	lsr	r30
    27d6:	00 1c       	adc	r0, r0
    27d8:	ca f7       	brpl	.-14     	; 0x27cc <__divsf3_pse+0x2c>
    27da:	29 d0       	rcall	.+82     	; 0x282e <__divsf3_pse+0x8e>
    27dc:	fe 2f       	mov	r31, r30
    27de:	27 d0       	rcall	.+78     	; 0x282e <__divsf3_pse+0x8e>
    27e0:	66 0f       	add	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	bb 1f       	adc	r27, r27
    27e8:	26 17       	cp	r18, r22
    27ea:	37 07       	cpc	r19, r23
    27ec:	48 07       	cpc	r20, r24
    27ee:	ab 07       	cpc	r26, r27
    27f0:	b0 e8       	ldi	r27, 0x80	; 128
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <__divsf3_pse+0x56>
    27f4:	bb 0b       	sbc	r27, r27
    27f6:	80 2d       	mov	r24, r0
    27f8:	bf 01       	movw	r22, r30
    27fa:	ff 27       	eor	r31, r31
    27fc:	93 58       	subi	r25, 0x83	; 131
    27fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2800:	2a f0       	brmi	.+10     	; 0x280c <__divsf3_pse+0x6c>
    2802:	9e 3f       	cpi	r25, 0xFE	; 254
    2804:	51 05       	cpc	r21, r1
    2806:	68 f0       	brcs	.+26     	; 0x2822 <__divsf3_pse+0x82>
    2808:	b6 c0       	rjmp	.+364    	; 0x2976 <__fp_inf>
    280a:	00 c1       	rjmp	.+512    	; 0x2a0c <__fp_szero>
    280c:	5f 3f       	cpi	r21, 0xFF	; 255
    280e:	ec f3       	brlt	.-6      	; 0x280a <__divsf3_pse+0x6a>
    2810:	98 3e       	cpi	r25, 0xE8	; 232
    2812:	dc f3       	brlt	.-10     	; 0x280a <__divsf3_pse+0x6a>
    2814:	86 95       	lsr	r24
    2816:	77 95       	ror	r23
    2818:	67 95       	ror	r22
    281a:	b7 95       	ror	r27
    281c:	f7 95       	ror	r31
    281e:	9f 5f       	subi	r25, 0xFF	; 255
    2820:	c9 f7       	brne	.-14     	; 0x2814 <__divsf3_pse+0x74>
    2822:	88 0f       	add	r24, r24
    2824:	91 1d       	adc	r25, r1
    2826:	96 95       	lsr	r25
    2828:	87 95       	ror	r24
    282a:	97 f9       	bld	r25, 7
    282c:	08 95       	ret
    282e:	e1 e0       	ldi	r30, 0x01	; 1
    2830:	66 0f       	add	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	88 1f       	adc	r24, r24
    2836:	bb 1f       	adc	r27, r27
    2838:	62 17       	cp	r22, r18
    283a:	73 07       	cpc	r23, r19
    283c:	84 07       	cpc	r24, r20
    283e:	ba 07       	cpc	r27, r26
    2840:	20 f0       	brcs	.+8      	; 0x284a <__divsf3_pse+0xaa>
    2842:	62 1b       	sub	r22, r18
    2844:	73 0b       	sbc	r23, r19
    2846:	84 0b       	sbc	r24, r20
    2848:	ba 0b       	sbc	r27, r26
    284a:	ee 1f       	adc	r30, r30
    284c:	88 f7       	brcc	.-30     	; 0x2830 <__divsf3_pse+0x90>
    284e:	e0 95       	com	r30
    2850:	08 95       	ret

00002852 <__fixsfsi>:
    2852:	04 d0       	rcall	.+8      	; 0x285c <__fixunssfsi>
    2854:	68 94       	set
    2856:	b1 11       	cpse	r27, r1
    2858:	d9 c0       	rjmp	.+434    	; 0x2a0c <__fp_szero>
    285a:	08 95       	ret

0000285c <__fixunssfsi>:
    285c:	bc d0       	rcall	.+376    	; 0x29d6 <__fp_splitA>
    285e:	88 f0       	brcs	.+34     	; 0x2882 <__fixunssfsi+0x26>
    2860:	9f 57       	subi	r25, 0x7F	; 127
    2862:	90 f0       	brcs	.+36     	; 0x2888 <__fixunssfsi+0x2c>
    2864:	b9 2f       	mov	r27, r25
    2866:	99 27       	eor	r25, r25
    2868:	b7 51       	subi	r27, 0x17	; 23
    286a:	a0 f0       	brcs	.+40     	; 0x2894 <__fixunssfsi+0x38>
    286c:	d1 f0       	breq	.+52     	; 0x28a2 <__fixunssfsi+0x46>
    286e:	66 0f       	add	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	1a f0       	brmi	.+6      	; 0x287e <__fixunssfsi+0x22>
    2878:	ba 95       	dec	r27
    287a:	c9 f7       	brne	.-14     	; 0x286e <__fixunssfsi+0x12>
    287c:	12 c0       	rjmp	.+36     	; 0x28a2 <__fixunssfsi+0x46>
    287e:	b1 30       	cpi	r27, 0x01	; 1
    2880:	81 f0       	breq	.+32     	; 0x28a2 <__fixunssfsi+0x46>
    2882:	c3 d0       	rcall	.+390    	; 0x2a0a <__fp_zero>
    2884:	b1 e0       	ldi	r27, 0x01	; 1
    2886:	08 95       	ret
    2888:	c0 c0       	rjmp	.+384    	; 0x2a0a <__fp_zero>
    288a:	67 2f       	mov	r22, r23
    288c:	78 2f       	mov	r23, r24
    288e:	88 27       	eor	r24, r24
    2890:	b8 5f       	subi	r27, 0xF8	; 248
    2892:	39 f0       	breq	.+14     	; 0x28a2 <__fixunssfsi+0x46>
    2894:	b9 3f       	cpi	r27, 0xF9	; 249
    2896:	cc f3       	brlt	.-14     	; 0x288a <__fixunssfsi+0x2e>
    2898:	86 95       	lsr	r24
    289a:	77 95       	ror	r23
    289c:	67 95       	ror	r22
    289e:	b3 95       	inc	r27
    28a0:	d9 f7       	brne	.-10     	; 0x2898 <__fixunssfsi+0x3c>
    28a2:	3e f4       	brtc	.+14     	; 0x28b2 <__fixunssfsi+0x56>
    28a4:	90 95       	com	r25
    28a6:	80 95       	com	r24
    28a8:	70 95       	com	r23
    28aa:	61 95       	neg	r22
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	8f 4f       	sbci	r24, 0xFF	; 255
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	08 95       	ret

000028b4 <__floatunsisf>:
    28b4:	e8 94       	clt
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <__floatsisf+0x12>

000028b8 <__floatsisf>:
    28b8:	97 fb       	bst	r25, 7
    28ba:	3e f4       	brtc	.+14     	; 0x28ca <__floatsisf+0x12>
    28bc:	90 95       	com	r25
    28be:	80 95       	com	r24
    28c0:	70 95       	com	r23
    28c2:	61 95       	neg	r22
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	8f 4f       	sbci	r24, 0xFF	; 255
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	99 23       	and	r25, r25
    28cc:	a9 f0       	breq	.+42     	; 0x28f8 <__floatsisf+0x40>
    28ce:	f9 2f       	mov	r31, r25
    28d0:	96 e9       	ldi	r25, 0x96	; 150
    28d2:	bb 27       	eor	r27, r27
    28d4:	93 95       	inc	r25
    28d6:	f6 95       	lsr	r31
    28d8:	87 95       	ror	r24
    28da:	77 95       	ror	r23
    28dc:	67 95       	ror	r22
    28de:	b7 95       	ror	r27
    28e0:	f1 11       	cpse	r31, r1
    28e2:	f8 cf       	rjmp	.-16     	; 0x28d4 <__floatsisf+0x1c>
    28e4:	fa f4       	brpl	.+62     	; 0x2924 <__floatsisf+0x6c>
    28e6:	bb 0f       	add	r27, r27
    28e8:	11 f4       	brne	.+4      	; 0x28ee <__floatsisf+0x36>
    28ea:	60 ff       	sbrs	r22, 0
    28ec:	1b c0       	rjmp	.+54     	; 0x2924 <__floatsisf+0x6c>
    28ee:	6f 5f       	subi	r22, 0xFF	; 255
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	8f 4f       	sbci	r24, 0xFF	; 255
    28f4:	9f 4f       	sbci	r25, 0xFF	; 255
    28f6:	16 c0       	rjmp	.+44     	; 0x2924 <__floatsisf+0x6c>
    28f8:	88 23       	and	r24, r24
    28fa:	11 f0       	breq	.+4      	; 0x2900 <__floatsisf+0x48>
    28fc:	96 e9       	ldi	r25, 0x96	; 150
    28fe:	11 c0       	rjmp	.+34     	; 0x2922 <__floatsisf+0x6a>
    2900:	77 23       	and	r23, r23
    2902:	21 f0       	breq	.+8      	; 0x290c <__floatsisf+0x54>
    2904:	9e e8       	ldi	r25, 0x8E	; 142
    2906:	87 2f       	mov	r24, r23
    2908:	76 2f       	mov	r23, r22
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <__floatsisf+0x5e>
    290c:	66 23       	and	r22, r22
    290e:	71 f0       	breq	.+28     	; 0x292c <__floatsisf+0x74>
    2910:	96 e8       	ldi	r25, 0x86	; 134
    2912:	86 2f       	mov	r24, r22
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	2a f0       	brmi	.+10     	; 0x2924 <__floatsisf+0x6c>
    291a:	9a 95       	dec	r25
    291c:	66 0f       	add	r22, r22
    291e:	77 1f       	adc	r23, r23
    2920:	88 1f       	adc	r24, r24
    2922:	da f7       	brpl	.-10     	; 0x291a <__floatsisf+0x62>
    2924:	88 0f       	add	r24, r24
    2926:	96 95       	lsr	r25
    2928:	87 95       	ror	r24
    292a:	97 f9       	bld	r25, 7
    292c:	08 95       	ret

0000292e <__fp_cmp>:
    292e:	99 0f       	add	r25, r25
    2930:	00 08       	sbc	r0, r0
    2932:	55 0f       	add	r21, r21
    2934:	aa 0b       	sbc	r26, r26
    2936:	e0 e8       	ldi	r30, 0x80	; 128
    2938:	fe ef       	ldi	r31, 0xFE	; 254
    293a:	16 16       	cp	r1, r22
    293c:	17 06       	cpc	r1, r23
    293e:	e8 07       	cpc	r30, r24
    2940:	f9 07       	cpc	r31, r25
    2942:	c0 f0       	brcs	.+48     	; 0x2974 <__fp_cmp+0x46>
    2944:	12 16       	cp	r1, r18
    2946:	13 06       	cpc	r1, r19
    2948:	e4 07       	cpc	r30, r20
    294a:	f5 07       	cpc	r31, r21
    294c:	98 f0       	brcs	.+38     	; 0x2974 <__fp_cmp+0x46>
    294e:	62 1b       	sub	r22, r18
    2950:	73 0b       	sbc	r23, r19
    2952:	84 0b       	sbc	r24, r20
    2954:	95 0b       	sbc	r25, r21
    2956:	39 f4       	brne	.+14     	; 0x2966 <__fp_cmp+0x38>
    2958:	0a 26       	eor	r0, r26
    295a:	61 f0       	breq	.+24     	; 0x2974 <__fp_cmp+0x46>
    295c:	23 2b       	or	r18, r19
    295e:	24 2b       	or	r18, r20
    2960:	25 2b       	or	r18, r21
    2962:	21 f4       	brne	.+8      	; 0x296c <__fp_cmp+0x3e>
    2964:	08 95       	ret
    2966:	0a 26       	eor	r0, r26
    2968:	09 f4       	brne	.+2      	; 0x296c <__fp_cmp+0x3e>
    296a:	a1 40       	sbci	r26, 0x01	; 1
    296c:	a6 95       	lsr	r26
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	81 1d       	adc	r24, r1
    2972:	81 1d       	adc	r24, r1
    2974:	08 95       	ret

00002976 <__fp_inf>:
    2976:	97 f9       	bld	r25, 7
    2978:	9f 67       	ori	r25, 0x7F	; 127
    297a:	80 e8       	ldi	r24, 0x80	; 128
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	08 95       	ret

00002982 <__fp_nan>:
    2982:	9f ef       	ldi	r25, 0xFF	; 255
    2984:	80 ec       	ldi	r24, 0xC0	; 192
    2986:	08 95       	ret

00002988 <__fp_pscA>:
    2988:	00 24       	eor	r0, r0
    298a:	0a 94       	dec	r0
    298c:	16 16       	cp	r1, r22
    298e:	17 06       	cpc	r1, r23
    2990:	18 06       	cpc	r1, r24
    2992:	09 06       	cpc	r0, r25
    2994:	08 95       	ret

00002996 <__fp_pscB>:
    2996:	00 24       	eor	r0, r0
    2998:	0a 94       	dec	r0
    299a:	12 16       	cp	r1, r18
    299c:	13 06       	cpc	r1, r19
    299e:	14 06       	cpc	r1, r20
    29a0:	05 06       	cpc	r0, r21
    29a2:	08 95       	ret

000029a4 <__fp_round>:
    29a4:	09 2e       	mov	r0, r25
    29a6:	03 94       	inc	r0
    29a8:	00 0c       	add	r0, r0
    29aa:	11 f4       	brne	.+4      	; 0x29b0 <__fp_round+0xc>
    29ac:	88 23       	and	r24, r24
    29ae:	52 f0       	brmi	.+20     	; 0x29c4 <__fp_round+0x20>
    29b0:	bb 0f       	add	r27, r27
    29b2:	40 f4       	brcc	.+16     	; 0x29c4 <__fp_round+0x20>
    29b4:	bf 2b       	or	r27, r31
    29b6:	11 f4       	brne	.+4      	; 0x29bc <__fp_round+0x18>
    29b8:	60 ff       	sbrs	r22, 0
    29ba:	04 c0       	rjmp	.+8      	; 0x29c4 <__fp_round+0x20>
    29bc:	6f 5f       	subi	r22, 0xFF	; 255
    29be:	7f 4f       	sbci	r23, 0xFF	; 255
    29c0:	8f 4f       	sbci	r24, 0xFF	; 255
    29c2:	9f 4f       	sbci	r25, 0xFF	; 255
    29c4:	08 95       	ret

000029c6 <__fp_split3>:
    29c6:	57 fd       	sbrc	r21, 7
    29c8:	90 58       	subi	r25, 0x80	; 128
    29ca:	44 0f       	add	r20, r20
    29cc:	55 1f       	adc	r21, r21
    29ce:	59 f0       	breq	.+22     	; 0x29e6 <__fp_splitA+0x10>
    29d0:	5f 3f       	cpi	r21, 0xFF	; 255
    29d2:	71 f0       	breq	.+28     	; 0x29f0 <__fp_splitA+0x1a>
    29d4:	47 95       	ror	r20

000029d6 <__fp_splitA>:
    29d6:	88 0f       	add	r24, r24
    29d8:	97 fb       	bst	r25, 7
    29da:	99 1f       	adc	r25, r25
    29dc:	61 f0       	breq	.+24     	; 0x29f6 <__fp_splitA+0x20>
    29de:	9f 3f       	cpi	r25, 0xFF	; 255
    29e0:	79 f0       	breq	.+30     	; 0x2a00 <__fp_splitA+0x2a>
    29e2:	87 95       	ror	r24
    29e4:	08 95       	ret
    29e6:	12 16       	cp	r1, r18
    29e8:	13 06       	cpc	r1, r19
    29ea:	14 06       	cpc	r1, r20
    29ec:	55 1f       	adc	r21, r21
    29ee:	f2 cf       	rjmp	.-28     	; 0x29d4 <__fp_split3+0xe>
    29f0:	46 95       	lsr	r20
    29f2:	f1 df       	rcall	.-30     	; 0x29d6 <__fp_splitA>
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <__fp_splitA+0x30>
    29f6:	16 16       	cp	r1, r22
    29f8:	17 06       	cpc	r1, r23
    29fa:	18 06       	cpc	r1, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	f1 cf       	rjmp	.-30     	; 0x29e2 <__fp_splitA+0xc>
    2a00:	86 95       	lsr	r24
    2a02:	71 05       	cpc	r23, r1
    2a04:	61 05       	cpc	r22, r1
    2a06:	08 94       	sec
    2a08:	08 95       	ret

00002a0a <__fp_zero>:
    2a0a:	e8 94       	clt

00002a0c <__fp_szero>:
    2a0c:	bb 27       	eor	r27, r27
    2a0e:	66 27       	eor	r22, r22
    2a10:	77 27       	eor	r23, r23
    2a12:	cb 01       	movw	r24, r22
    2a14:	97 f9       	bld	r25, 7
    2a16:	08 95       	ret

00002a18 <__gesf2>:
    2a18:	8a df       	rcall	.-236    	; 0x292e <__fp_cmp>
    2a1a:	08 f4       	brcc	.+2      	; 0x2a1e <__gesf2+0x6>
    2a1c:	8f ef       	ldi	r24, 0xFF	; 255
    2a1e:	08 95       	ret

00002a20 <__mulsf3>:
    2a20:	0b d0       	rcall	.+22     	; 0x2a38 <__mulsf3x>
    2a22:	c0 cf       	rjmp	.-128    	; 0x29a4 <__fp_round>
    2a24:	b1 df       	rcall	.-158    	; 0x2988 <__fp_pscA>
    2a26:	28 f0       	brcs	.+10     	; 0x2a32 <__mulsf3+0x12>
    2a28:	b6 df       	rcall	.-148    	; 0x2996 <__fp_pscB>
    2a2a:	18 f0       	brcs	.+6      	; 0x2a32 <__mulsf3+0x12>
    2a2c:	95 23       	and	r25, r21
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <__mulsf3+0x12>
    2a30:	a2 cf       	rjmp	.-188    	; 0x2976 <__fp_inf>
    2a32:	a7 cf       	rjmp	.-178    	; 0x2982 <__fp_nan>
    2a34:	11 24       	eor	r1, r1
    2a36:	ea cf       	rjmp	.-44     	; 0x2a0c <__fp_szero>

00002a38 <__mulsf3x>:
    2a38:	c6 df       	rcall	.-116    	; 0x29c6 <__fp_split3>
    2a3a:	a0 f3       	brcs	.-24     	; 0x2a24 <__mulsf3+0x4>

00002a3c <__mulsf3_pse>:
    2a3c:	95 9f       	mul	r25, r21
    2a3e:	d1 f3       	breq	.-12     	; 0x2a34 <__mulsf3+0x14>
    2a40:	95 0f       	add	r25, r21
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	55 1f       	adc	r21, r21
    2a46:	62 9f       	mul	r22, r18
    2a48:	f0 01       	movw	r30, r0
    2a4a:	72 9f       	mul	r23, r18
    2a4c:	bb 27       	eor	r27, r27
    2a4e:	f0 0d       	add	r31, r0
    2a50:	b1 1d       	adc	r27, r1
    2a52:	63 9f       	mul	r22, r19
    2a54:	aa 27       	eor	r26, r26
    2a56:	f0 0d       	add	r31, r0
    2a58:	b1 1d       	adc	r27, r1
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	64 9f       	mul	r22, r20
    2a5e:	66 27       	eor	r22, r22
    2a60:	b0 0d       	add	r27, r0
    2a62:	a1 1d       	adc	r26, r1
    2a64:	66 1f       	adc	r22, r22
    2a66:	82 9f       	mul	r24, r18
    2a68:	22 27       	eor	r18, r18
    2a6a:	b0 0d       	add	r27, r0
    2a6c:	a1 1d       	adc	r26, r1
    2a6e:	62 1f       	adc	r22, r18
    2a70:	73 9f       	mul	r23, r19
    2a72:	b0 0d       	add	r27, r0
    2a74:	a1 1d       	adc	r26, r1
    2a76:	62 1f       	adc	r22, r18
    2a78:	83 9f       	mul	r24, r19
    2a7a:	a0 0d       	add	r26, r0
    2a7c:	61 1d       	adc	r22, r1
    2a7e:	22 1f       	adc	r18, r18
    2a80:	74 9f       	mul	r23, r20
    2a82:	33 27       	eor	r19, r19
    2a84:	a0 0d       	add	r26, r0
    2a86:	61 1d       	adc	r22, r1
    2a88:	23 1f       	adc	r18, r19
    2a8a:	84 9f       	mul	r24, r20
    2a8c:	60 0d       	add	r22, r0
    2a8e:	21 1d       	adc	r18, r1
    2a90:	82 2f       	mov	r24, r18
    2a92:	76 2f       	mov	r23, r22
    2a94:	6a 2f       	mov	r22, r26
    2a96:	11 24       	eor	r1, r1
    2a98:	9f 57       	subi	r25, 0x7F	; 127
    2a9a:	50 40       	sbci	r21, 0x00	; 0
    2a9c:	8a f0       	brmi	.+34     	; 0x2ac0 <__mulsf3_pse+0x84>
    2a9e:	e1 f0       	breq	.+56     	; 0x2ad8 <__mulsf3_pse+0x9c>
    2aa0:	88 23       	and	r24, r24
    2aa2:	4a f0       	brmi	.+18     	; 0x2ab6 <__mulsf3_pse+0x7a>
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	bb 1f       	adc	r27, r27
    2aaa:	66 1f       	adc	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 1f       	adc	r24, r24
    2ab0:	91 50       	subi	r25, 0x01	; 1
    2ab2:	50 40       	sbci	r21, 0x00	; 0
    2ab4:	a9 f7       	brne	.-22     	; 0x2aa0 <__mulsf3_pse+0x64>
    2ab6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ab8:	51 05       	cpc	r21, r1
    2aba:	70 f0       	brcs	.+28     	; 0x2ad8 <__mulsf3_pse+0x9c>
    2abc:	5c cf       	rjmp	.-328    	; 0x2976 <__fp_inf>
    2abe:	a6 cf       	rjmp	.-180    	; 0x2a0c <__fp_szero>
    2ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac2:	ec f3       	brlt	.-6      	; 0x2abe <__mulsf3_pse+0x82>
    2ac4:	98 3e       	cpi	r25, 0xE8	; 232
    2ac6:	dc f3       	brlt	.-10     	; 0x2abe <__mulsf3_pse+0x82>
    2ac8:	86 95       	lsr	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	b7 95       	ror	r27
    2ad0:	f7 95       	ror	r31
    2ad2:	e7 95       	ror	r30
    2ad4:	9f 5f       	subi	r25, 0xFF	; 255
    2ad6:	c1 f7       	brne	.-16     	; 0x2ac8 <__mulsf3_pse+0x8c>
    2ad8:	fe 2b       	or	r31, r30
    2ada:	88 0f       	add	r24, r24
    2adc:	91 1d       	adc	r25, r1
    2ade:	96 95       	lsr	r25
    2ae0:	87 95       	ror	r24
    2ae2:	97 f9       	bld	r25, 7
    2ae4:	08 95       	ret

00002ae6 <calloc>:
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	68 9f       	mul	r22, r24
    2af0:	80 01       	movw	r16, r0
    2af2:	69 9f       	mul	r22, r25
    2af4:	10 0d       	add	r17, r0
    2af6:	78 9f       	mul	r23, r24
    2af8:	10 0d       	add	r17, r0
    2afa:	11 24       	eor	r1, r1
    2afc:	c8 01       	movw	r24, r16
    2afe:	0d d0       	rcall	.+26     	; 0x2b1a <malloc>
    2b00:	ec 01       	movw	r28, r24
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	21 f0       	breq	.+8      	; 0x2b0e <calloc+0x28>
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	a8 01       	movw	r20, r16
    2b0c:	0b d1       	rcall	.+534    	; 0x2d24 <memset>
    2b0e:	ce 01       	movw	r24, r28
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	08 95       	ret

00002b1a <malloc>:
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	bc 01       	movw	r22, r24
    2b20:	82 30       	cpi	r24, 0x02	; 2
    2b22:	91 05       	cpc	r25, r1
    2b24:	10 f4       	brcc	.+4      	; 0x2b2a <malloc+0x10>
    2b26:	62 e0       	ldi	r22, 0x02	; 2
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	a0 91 67 02 	lds	r26, 0x0267
    2b2e:	b0 91 68 02 	lds	r27, 0x0268
    2b32:	ed 01       	movw	r28, r26
    2b34:	e0 e0       	ldi	r30, 0x00	; 0
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	21 c0       	rjmp	.+66     	; 0x2b80 <malloc+0x66>
    2b3e:	88 81       	ld	r24, Y
    2b40:	99 81       	ldd	r25, Y+1	; 0x01
    2b42:	86 17       	cp	r24, r22
    2b44:	97 07       	cpc	r25, r23
    2b46:	69 f4       	brne	.+26     	; 0x2b62 <malloc+0x48>
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	30 97       	sbiw	r30, 0x00	; 0
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <malloc+0x3c>
    2b50:	93 83       	std	Z+3, r25	; 0x03
    2b52:	82 83       	std	Z+2, r24	; 0x02
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <malloc+0x44>
    2b56:	90 93 68 02 	sts	0x0268, r25
    2b5a:	80 93 67 02 	sts	0x0267, r24
    2b5e:	fe 01       	movw	r30, r28
    2b60:	34 c0       	rjmp	.+104    	; 0x2bca <malloc+0xb0>
    2b62:	68 17       	cp	r22, r24
    2b64:	79 07       	cpc	r23, r25
    2b66:	38 f4       	brcc	.+14     	; 0x2b76 <malloc+0x5c>
    2b68:	41 15       	cp	r20, r1
    2b6a:	51 05       	cpc	r21, r1
    2b6c:	19 f0       	breq	.+6      	; 0x2b74 <malloc+0x5a>
    2b6e:	84 17       	cp	r24, r20
    2b70:	95 07       	cpc	r25, r21
    2b72:	08 f4       	brcc	.+2      	; 0x2b76 <malloc+0x5c>
    2b74:	ac 01       	movw	r20, r24
    2b76:	fe 01       	movw	r30, r28
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	e9 01       	movw	r28, r18
    2b80:	20 97       	sbiw	r28, 0x00	; 0
    2b82:	e9 f6       	brne	.-70     	; 0x2b3e <malloc+0x24>
    2b84:	41 15       	cp	r20, r1
    2b86:	51 05       	cpc	r21, r1
    2b88:	a9 f1       	breq	.+106    	; 0x2bf4 <malloc+0xda>
    2b8a:	ca 01       	movw	r24, r20
    2b8c:	86 1b       	sub	r24, r22
    2b8e:	97 0b       	sbc	r25, r23
    2b90:	04 97       	sbiw	r24, 0x04	; 4
    2b92:	08 f4       	brcc	.+2      	; 0x2b96 <malloc+0x7c>
    2b94:	ba 01       	movw	r22, r20
    2b96:	e0 e0       	ldi	r30, 0x00	; 0
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	2a c0       	rjmp	.+84     	; 0x2bf0 <malloc+0xd6>
    2b9c:	8d 91       	ld	r24, X+
    2b9e:	9c 91       	ld	r25, X
    2ba0:	11 97       	sbiw	r26, 0x01	; 1
    2ba2:	84 17       	cp	r24, r20
    2ba4:	95 07       	cpc	r25, r21
    2ba6:	f9 f4       	brne	.+62     	; 0x2be6 <malloc+0xcc>
    2ba8:	64 17       	cp	r22, r20
    2baa:	75 07       	cpc	r23, r21
    2bac:	81 f4       	brne	.+32     	; 0x2bce <malloc+0xb4>
    2bae:	12 96       	adiw	r26, 0x02	; 2
    2bb0:	8d 91       	ld	r24, X+
    2bb2:	9c 91       	ld	r25, X
    2bb4:	13 97       	sbiw	r26, 0x03	; 3
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <malloc+0xa6>
    2bba:	93 83       	std	Z+3, r25	; 0x03
    2bbc:	82 83       	std	Z+2, r24	; 0x02
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <malloc+0xae>
    2bc0:	90 93 68 02 	sts	0x0268, r25
    2bc4:	80 93 67 02 	sts	0x0267, r24
    2bc8:	fd 01       	movw	r30, r26
    2bca:	32 96       	adiw	r30, 0x02	; 2
    2bcc:	4f c0       	rjmp	.+158    	; 0x2c6c <malloc+0x152>
    2bce:	ca 01       	movw	r24, r20
    2bd0:	86 1b       	sub	r24, r22
    2bd2:	97 0b       	sbc	r25, r23
    2bd4:	fd 01       	movw	r30, r26
    2bd6:	e8 0f       	add	r30, r24
    2bd8:	f9 1f       	adc	r31, r25
    2bda:	61 93       	st	Z+, r22
    2bdc:	71 93       	st	Z+, r23
    2bde:	02 97       	sbiw	r24, 0x02	; 2
    2be0:	8d 93       	st	X+, r24
    2be2:	9c 93       	st	X, r25
    2be4:	43 c0       	rjmp	.+134    	; 0x2c6c <malloc+0x152>
    2be6:	fd 01       	movw	r30, r26
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	9c 01       	movw	r18, r24
    2bee:	d9 01       	movw	r26, r18
    2bf0:	10 97       	sbiw	r26, 0x00	; 0
    2bf2:	a1 f6       	brne	.-88     	; 0x2b9c <malloc+0x82>
    2bf4:	80 91 65 02 	lds	r24, 0x0265
    2bf8:	90 91 66 02 	lds	r25, 0x0266
    2bfc:	89 2b       	or	r24, r25
    2bfe:	41 f4       	brne	.+16     	; 0x2c10 <malloc+0xf6>
    2c00:	80 91 02 01 	lds	r24, 0x0102
    2c04:	90 91 03 01 	lds	r25, 0x0103
    2c08:	90 93 66 02 	sts	0x0266, r25
    2c0c:	80 93 65 02 	sts	0x0265, r24
    2c10:	40 91 04 01 	lds	r20, 0x0104
    2c14:	50 91 05 01 	lds	r21, 0x0105
    2c18:	41 15       	cp	r20, r1
    2c1a:	51 05       	cpc	r21, r1
    2c1c:	41 f4       	brne	.+16     	; 0x2c2e <malloc+0x114>
    2c1e:	4d b7       	in	r20, 0x3d	; 61
    2c20:	5e b7       	in	r21, 0x3e	; 62
    2c22:	80 91 00 01 	lds	r24, 0x0100
    2c26:	90 91 01 01 	lds	r25, 0x0101
    2c2a:	48 1b       	sub	r20, r24
    2c2c:	59 0b       	sbc	r21, r25
    2c2e:	20 91 65 02 	lds	r18, 0x0265
    2c32:	30 91 66 02 	lds	r19, 0x0266
    2c36:	24 17       	cp	r18, r20
    2c38:	35 07       	cpc	r19, r21
    2c3a:	b0 f4       	brcc	.+44     	; 0x2c68 <malloc+0x14e>
    2c3c:	ca 01       	movw	r24, r20
    2c3e:	82 1b       	sub	r24, r18
    2c40:	93 0b       	sbc	r25, r19
    2c42:	86 17       	cp	r24, r22
    2c44:	97 07       	cpc	r25, r23
    2c46:	80 f0       	brcs	.+32     	; 0x2c68 <malloc+0x14e>
    2c48:	ab 01       	movw	r20, r22
    2c4a:	4e 5f       	subi	r20, 0xFE	; 254
    2c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4e:	84 17       	cp	r24, r20
    2c50:	95 07       	cpc	r25, r21
    2c52:	50 f0       	brcs	.+20     	; 0x2c68 <malloc+0x14e>
    2c54:	42 0f       	add	r20, r18
    2c56:	53 1f       	adc	r21, r19
    2c58:	50 93 66 02 	sts	0x0266, r21
    2c5c:	40 93 65 02 	sts	0x0265, r20
    2c60:	f9 01       	movw	r30, r18
    2c62:	61 93       	st	Z+, r22
    2c64:	71 93       	st	Z+, r23
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <malloc+0x152>
    2c68:	e0 e0       	ldi	r30, 0x00	; 0
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	cf 01       	movw	r24, r30
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <free>:
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <free+0xa>
    2c7c:	50 c0       	rjmp	.+160    	; 0x2d1e <free+0xaa>
    2c7e:	ec 01       	movw	r28, r24
    2c80:	22 97       	sbiw	r28, 0x02	; 2
    2c82:	1b 82       	std	Y+3, r1	; 0x03
    2c84:	1a 82       	std	Y+2, r1	; 0x02
    2c86:	a0 91 67 02 	lds	r26, 0x0267
    2c8a:	b0 91 68 02 	lds	r27, 0x0268
    2c8e:	10 97       	sbiw	r26, 0x00	; 0
    2c90:	09 f1       	breq	.+66     	; 0x2cd4 <free+0x60>
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	ac 17       	cp	r26, r28
    2c98:	bd 07       	cpc	r27, r29
    2c9a:	08 f1       	brcs	.+66     	; 0x2cde <free+0x6a>
    2c9c:	bb 83       	std	Y+3, r27	; 0x03
    2c9e:	aa 83       	std	Y+2, r26	; 0x02
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	21 91       	ld	r18, Z+
    2ca4:	31 91       	ld	r19, Z+
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	ae 17       	cp	r26, r30
    2cac:	bf 07       	cpc	r27, r31
    2cae:	79 f4       	brne	.+30     	; 0x2cce <free+0x5a>
    2cb0:	8d 91       	ld	r24, X+
    2cb2:	9c 91       	ld	r25, X
    2cb4:	11 97       	sbiw	r26, 0x01	; 1
    2cb6:	28 0f       	add	r18, r24
    2cb8:	39 1f       	adc	r19, r25
    2cba:	2e 5f       	subi	r18, 0xFE	; 254
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	39 83       	std	Y+1, r19	; 0x01
    2cc0:	28 83       	st	Y, r18
    2cc2:	12 96       	adiw	r26, 0x02	; 2
    2cc4:	8d 91       	ld	r24, X+
    2cc6:	9c 91       	ld	r25, X
    2cc8:	13 97       	sbiw	r26, 0x03	; 3
    2cca:	9b 83       	std	Y+3, r25	; 0x03
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
    2cce:	41 15       	cp	r20, r1
    2cd0:	51 05       	cpc	r21, r1
    2cd2:	71 f4       	brne	.+28     	; 0x2cf0 <free+0x7c>
    2cd4:	d0 93 68 02 	sts	0x0268, r29
    2cd8:	c0 93 67 02 	sts	0x0267, r28
    2cdc:	20 c0       	rjmp	.+64     	; 0x2d1e <free+0xaa>
    2cde:	12 96       	adiw	r26, 0x02	; 2
    2ce0:	8d 91       	ld	r24, X+
    2ce2:	9c 91       	ld	r25, X
    2ce4:	13 97       	sbiw	r26, 0x03	; 3
    2ce6:	ad 01       	movw	r20, r26
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	11 f0       	breq	.+4      	; 0x2cf0 <free+0x7c>
    2cec:	dc 01       	movw	r26, r24
    2cee:	d3 cf       	rjmp	.-90     	; 0x2c96 <free+0x22>
    2cf0:	fa 01       	movw	r30, r20
    2cf2:	d3 83       	std	Z+3, r29	; 0x03
    2cf4:	c2 83       	std	Z+2, r28	; 0x02
    2cf6:	21 91       	ld	r18, Z+
    2cf8:	31 91       	ld	r19, Z+
    2cfa:	e2 0f       	add	r30, r18
    2cfc:	f3 1f       	adc	r31, r19
    2cfe:	ce 17       	cp	r28, r30
    2d00:	df 07       	cpc	r29, r31
    2d02:	69 f4       	brne	.+26     	; 0x2d1e <free+0xaa>
    2d04:	88 81       	ld	r24, Y
    2d06:	99 81       	ldd	r25, Y+1	; 0x01
    2d08:	28 0f       	add	r18, r24
    2d0a:	39 1f       	adc	r19, r25
    2d0c:	2e 5f       	subi	r18, 0xFE	; 254
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	fa 01       	movw	r30, r20
    2d12:	31 83       	std	Z+1, r19	; 0x01
    2d14:	20 83       	st	Z, r18
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	93 83       	std	Z+3, r25	; 0x03
    2d1c:	82 83       	std	Z+2, r24	; 0x02
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <memset>:
    2d24:	dc 01       	movw	r26, r24
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <memset+0x6>
    2d28:	6d 93       	st	X+, r22
    2d2a:	41 50       	subi	r20, 0x01	; 1
    2d2c:	50 40       	sbci	r21, 0x00	; 0
    2d2e:	e0 f7       	brcc	.-8      	; 0x2d28 <memset+0x4>
    2d30:	08 95       	ret

00002d32 <_exit>:
    2d32:	f8 94       	cli

00002d34 <__stop_program>:
    2d34:	ff cf       	rjmp	.-2      	; 0x2d34 <__stop_program>
