
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000021bc  00002250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080010a  0080010a  0000225a  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000948  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002435  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2e  00000000  00000000  0000532f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028eb  00000000  00000000  00005e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  00008748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b7d  00000000  00000000  00008cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000310  00000000  00000000  00009855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(-29);
	servo_set_right_grabber_position(100);
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
static int combination_check()
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c6 c5       	rjmp	.+2956   	; 0xbd6 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec eb       	ldi	r30, 0xBC	; 188
      a8:	f1 e2       	ldi	r31, 0x21	; 33
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 35       	cpi	r26, 0x51	; 81
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 03 0b 	call	0x1606	; 0x1606 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
		{	
			purpleside();
		}
		
		*/
		i = checkRearSensors(BACK_ALL);
     1ce:	8d ef       	ldi	r24, 0xFD	; 253
     1d0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <checkRearSensors>
     1d4:	99 27       	eor	r25, r25
     1d6:	87 fd       	sbrc	r24, 7
     1d8:	90 95       	com	r25
     1da:	9a 8b       	std	Y+18, r25	; 0x12
     1dc:	89 8b       	std	Y+17, r24	; 0x11
		b = checkFrontSensors(FRONT_ALL);
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <checkFrontSensors>
     1e4:	99 27       	eor	r25, r25
     1e6:	87 fd       	sbrc	r24, 7
     1e8:	90 95       	com	r25
     1ea:	98 8b       	std	Y+16, r25	; 0x10
     1ec:	8f 87       	std	Y+15, r24	; 0x0f
		if(i == DETECTED || b == DETECTED)
     1ee:	89 89       	ldd	r24, Y+17	; 0x11
     1f0:	9a 89       	ldd	r25, Y+18	; 0x12
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	91 05       	cpc	r25, r1
     1f6:	29 f0       	breq	.+10     	; 0x202 <main+0x130>
     1f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     1fa:	98 89       	ldd	r25, Y+16	; 0x10
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	91 05       	cpc	r25, r1
     200:	29 f4       	brne	.+10     	; 0x20c <main+0x13a>
		{
			PORTG = 0xff;
     202:	e4 e3       	ldi	r30, 0x34	; 52
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	80 83       	st	Z, r24
     20a:	e1 cf       	rjmp	.-62     	; 0x1ce <main+0xfc>
		}
		else
		{
			PORTG = 0x00;
     20c:	e4 e3       	ldi	r30, 0x34	; 52
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	10 82       	st	Z, r1
     212:	dd cf       	rjmp	.-70     	; 0x1ce <main+0xfc>

00000214 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	df 93       	push	r29
     21a:	cf 93       	push	r28
     21c:	00 d0       	rcall	.+0      	; 0x21e <servo_init+0xa>
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     226:	ad e2       	ldi	r26, 0x2D	; 45
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	ed e2       	ldi	r30, 0x2D	; 45
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	88 63       	ori	r24, 0x38	; 56
     232:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     234:	a4 e2       	ldi	r26, 0x24	; 36
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e4 e2       	ldi	r30, 0x24	; 36
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	80 68       	ori	r24, 0x80	; 128
     240:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     242:	e4 e9       	ldi	r30, 0x94	; 148
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	11 82       	std	Z+1, r1	; 0x01
     248:	10 82       	st	Z, r1
	TCNT0 = 0;
     24a:	e6 e4       	ldi	r30, 0x46	; 70
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	10 82       	st	Z, r1

	OCR3A = 0;
     250:	e8 e9       	ldi	r30, 0x98	; 152
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	11 82       	std	Z+1, r1	; 0x01
     256:	10 82       	st	Z, r1
	OCR3B = 0;
     258:	ea e9       	ldi	r30, 0x9A	; 154
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	11 82       	std	Z+1, r1	; 0x01
     25e:	10 82       	st	Z, r1
	OCR3C = 0;
     260:	ec e9       	ldi	r30, 0x9C	; 156
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	11 82       	std	Z+1, r1	; 0x01
     266:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     268:	e0 e9       	ldi	r30, 0x90	; 144
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	8e eb       	ldi	r24, 0xBE	; 190
     26e:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     270:	e1 e9       	ldi	r30, 0x91	; 145
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	8a e1       	ldi	r24, 0x1A	; 26
     276:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     278:	e4 e4       	ldi	r30, 0x44	; 68
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	8b e6       	ldi	r24, 0x6B	; 107
     27e:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     280:	06 e9       	ldi	r16, 0x96	; 150
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	cc 01       	movw	r24, r24
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	bc 01       	movw	r22, r24
     290:	cd 01       	movw	r24, r26
     292:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__floatunsisf>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	bc 01       	movw	r22, r24
     29c:	cd 01       	movw	r24, r26
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	51 e4       	ldi	r21, 0x41	; 65
     2a6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	9c 01       	movw	r18, r24
     2b0:	ad 01       	movw	r20, r26
     2b2:	60 e8       	ldi	r22, 0x80	; 128
     2b4:	76 e9       	ldi	r23, 0x96	; 150
     2b6:	88 e1       	ldi	r24, 0x18	; 24
     2b8:	9b e4       	ldi	r25, 0x4B	; 75
     2ba:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	5f e3       	ldi	r21, 0x3F	; 63
     2ce:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	f8 01       	movw	r30, r16
     2e4:	91 83       	std	Z+1, r25	; 0x01
     2e6:	80 83       	st	Z, r24
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	00 d0       	rcall	.+0      	; 0x304 <servo_set_duty_cycle_umbrella+0xe>
     304:	00 d0       	rcall	.+0      	; 0x306 <servo_set_duty_cycle_umbrella+0x10>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	9c 83       	std	Y+4, r25	; 0x04
     30c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     30e:	e6 e9       	ldi	r30, 0x96	; 150
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	cc 01       	movw	r24, r24
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__floatunsisf>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	bc 01       	movw	r22, r24
     32a:	cd 01       	movw	r24, r26
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	4f e7       	ldi	r20, 0x7F	; 127
     332:	53 e4       	ldi	r21, 0x43	; 67
     334:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     338:	dc 01       	movw	r26, r24
     33a:	cb 01       	movw	r24, r22
     33c:	7c 01       	movw	r14, r24
     33e:	8d 01       	movw	r16, r26
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	aa 27       	eor	r26, r26
     346:	97 fd       	sbrc	r25, 7
     348:	a0 95       	com	r26
     34a:	ba 2f       	mov	r27, r26
     34c:	bc 01       	movw	r22, r24
     34e:	cd 01       	movw	r24, r26
     350:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     354:	9b 01       	movw	r18, r22
     356:	ac 01       	movw	r20, r24
     358:	c8 01       	movw	r24, r16
     35a:	b7 01       	movw	r22, r14
     35c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	5f e3       	ldi	r21, 0x3F	; 63
     370:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	bc 01       	movw	r22, r24
     37a:	cd 01       	movw	r24, r26
     37c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	9a 83       	std	Y+2, r25	; 0x02
     386:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     388:	e9 e9       	ldi	r30, 0x99	; 153
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	9a 81       	ldd	r25, Y+2	; 0x02
     390:	89 2f       	mov	r24, r25
     392:	99 27       	eor	r25, r25
     394:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     396:	e8 e9       	ldi	r30, 0x98	; 152
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	80 83       	st	Z, r24
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	cf 91       	pop	r28
     3a8:	df 91       	pop	r29
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <servo_set_duty_cycle_door+0xe>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <servo_set_duty_cycle_door+0x10>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	9c 83       	std	Y+4, r25	; 0x04
     3ca:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3cc:	e6 e9       	ldi	r30, 0x96	; 150
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	91 81       	ldd	r25, Z+1	; 0x01
     3d4:	cc 01       	movw	r24, r24
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__floatunsisf>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	4f e7       	ldi	r20, 0x7F	; 127
     3f0:	53 e4       	ldi	r21, 0x43	; 67
     3f2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	7c 01       	movw	r14, r24
     3fc:	8d 01       	movw	r16, r26
     3fe:	8b 81       	ldd	r24, Y+3	; 0x03
     400:	9c 81       	ldd	r25, Y+4	; 0x04
     402:	aa 27       	eor	r26, r26
     404:	97 fd       	sbrc	r25, 7
     406:	a0 95       	com	r26
     408:	ba 2f       	mov	r27, r26
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     412:	9b 01       	movw	r18, r22
     414:	ac 01       	movw	r20, r24
     416:	c8 01       	movw	r24, r16
     418:	b7 01       	movw	r22, r14
     41a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	bc 01       	movw	r22, r24
     424:	cd 01       	movw	r24, r26
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	5f e3       	ldi	r21, 0x3F	; 63
     42e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	bc 01       	movw	r22, r24
     438:	cd 01       	movw	r24, r26
     43a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	9a 83       	std	Y+2, r25	; 0x02
     444:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     446:	eb e9       	ldi	r30, 0x9B	; 155
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	89 2f       	mov	r24, r25
     450:	99 27       	eor	r25, r25
     452:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     454:	ea e9       	ldi	r30, 0x9A	; 154
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	80 83       	st	Z, r24
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	08 95       	ret

00000472 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	00 d0       	rcall	.+0      	; 0x480 <servo_set_duty_cycle_left_grabber+0xe>
     480:	00 d0       	rcall	.+0      	; 0x482 <servo_set_duty_cycle_left_grabber+0x10>
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	9c 83       	std	Y+4, r25	; 0x04
     488:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     48a:	e6 e9       	ldi	r30, 0x96	; 150
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	cc 01       	movw	r24, r24
     494:	a0 e0       	ldi	r26, 0x00	; 0
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__floatunsisf>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	4f e7       	ldi	r20, 0x7F	; 127
     4ae:	53 e4       	ldi	r21, 0x43	; 67
     4b0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	7c 01       	movw	r14, r24
     4ba:	8d 01       	movw	r16, r26
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	aa 27       	eor	r26, r26
     4c2:	97 fd       	sbrc	r25, 7
     4c4:	a0 95       	com	r26
     4c6:	ba 2f       	mov	r27, r26
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     4d0:	9b 01       	movw	r18, r22
     4d2:	ac 01       	movw	r20, r24
     4d4:	c8 01       	movw	r24, r16
     4d6:	b7 01       	movw	r22, r14
     4d8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	bc 01       	movw	r22, r24
     4e2:	cd 01       	movw	r24, r26
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	5f e3       	ldi	r21, 0x3F	; 63
     4ec:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	cd 01       	movw	r24, r26
     4f8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     504:	ed e9       	ldi	r30, 0x9D	; 157
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	89 2f       	mov	r24, r25
     50e:	99 27       	eor	r25, r25
     510:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     512:	ec e9       	ldi	r30, 0x9C	; 156
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	80 83       	st	Z, r24
}
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	cf 91       	pop	r28
     524:	df 91       	pop	r29
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	08 95       	ret

00000530 <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	0f 92       	push	r0
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	99 27       	eor	r25, r25
     540:	87 fd       	sbrc	r24, 7
     542:	90 95       	com	r25
     544:	a9 2f       	mov	r26, r25
     546:	b9 2f       	mov	r27, r25
     548:	bc 01       	movw	r22, r24
     54a:	cd 01       	movw	r24, r26
     54c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	bc 01       	movw	r22, r24
     556:	cd 01       	movw	r24, r26
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	44 eb       	ldi	r20, 0xB4	; 180
     55e:	52 e4       	ldi	r21, 0x42	; 66
     560:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	26 e6       	ldi	r18, 0x66	; 102
     56e:	36 e6       	ldi	r19, 0x66	; 102
     570:	46 e3       	ldi	r20, 0x36	; 54
     572:	51 ec       	ldi	r21, 0xC1	; 193
     574:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	4c e6       	ldi	r20, 0x6C	; 108
     586:	53 e4       	ldi	r21, 0x43	; 67
     588:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	9c 01       	movw	r18, r24
     592:	ad 01       	movw	r20, r26
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	8f e7       	ldi	r24, 0x7F	; 127
     59a:	93 e4       	ldi	r25, 0x43	; 67
     59c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fixsfsi>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	a2 de       	rcall	.-700    	; 0x2f6 <servo_set_duty_cycle_umbrella>
}
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	0f 92       	push	r0
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	99 27       	eor	r25, r25
     5ca:	87 fd       	sbrc	r24, 7
     5cc:	90 95       	com	r25
     5ce:	a9 2f       	mov	r26, r25
     5d0:	b9 2f       	mov	r27, r25
     5d2:	bc 01       	movw	r22, r24
     5d4:	cd 01       	movw	r24, r26
     5d6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	bc 01       	movw	r22, r24
     5e0:	cd 01       	movw	r24, r26
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	44 eb       	ldi	r20, 0xB4	; 180
     5e8:	52 e4       	ldi	r21, 0x42	; 66
     5ea:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	bc 01       	movw	r22, r24
     5f4:	cd 01       	movw	r24, r26
     5f6:	26 e6       	ldi	r18, 0x66	; 102
     5f8:	36 e6       	ldi	r19, 0x66	; 102
     5fa:	46 e3       	ldi	r20, 0x36	; 54
     5fc:	51 ec       	ldi	r21, 0xC1	; 193
     5fe:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4c e6       	ldi	r20, 0x6C	; 108
     610:	53 e4       	ldi	r21, 0x43	; 67
     612:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	9c 01       	movw	r18, r24
     61c:	ad 01       	movw	r20, r26
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	8f e7       	ldi	r24, 0x7F	; 127
     624:	93 e4       	ldi	r25, 0x43	; 67
     626:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	bc 01       	movw	r22, r24
     630:	cd 01       	movw	r24, r26
     632:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fixsfsi>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	bc de       	rcall	.-648    	; 0x3b4 <servo_set_duty_cycle_door>
}
     63c:	0f 90       	pop	r0
     63e:	cf 91       	pop	r28
     640:	df 91       	pop	r29
     642:	08 95       	ret

00000644 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	0f 92       	push	r0
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	99 27       	eor	r25, r25
     654:	87 fd       	sbrc	r24, 7
     656:	90 95       	com	r25
     658:	a9 2f       	mov	r26, r25
     65a:	b9 2f       	mov	r27, r25
     65c:	bc 01       	movw	r22, r24
     65e:	cd 01       	movw	r24, r26
     660:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__floatsisf>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	44 eb       	ldi	r20, 0xB4	; 180
     672:	52 e4       	ldi	r21, 0x42	; 66
     674:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__divsf3>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	bc 01       	movw	r22, r24
     67e:	cd 01       	movw	r24, r26
     680:	26 e6       	ldi	r18, 0x66	; 102
     682:	36 e6       	ldi	r19, 0x66	; 102
     684:	46 e3       	ldi	r20, 0x36	; 54
     686:	51 ec       	ldi	r21, 0xC1	; 193
     688:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	4c e6       	ldi	r20, 0x6C	; 108
     69a:	53 e4       	ldi	r21, 0x43	; 67
     69c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__addsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	9c 01       	movw	r18, r24
     6a6:	ad 01       	movw	r20, r26
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	8f e7       	ldi	r24, 0x7F	; 127
     6ae:	93 e4       	ldi	r25, 0x43	; 67
     6b0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__subsf3>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	bc 01       	movw	r22, r24
     6ba:	cd 01       	movw	r24, r26
     6bc:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fixsfsi>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	d6 de       	rcall	.-596    	; 0x472 <servo_set_duty_cycle_left_grabber>
}
     6c6:	0f 90       	pop	r0
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	08 95       	ret

000006ce <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6ce:	df 93       	push	r29
     6d0:	cf 93       	push	r28
     6d2:	0f 92       	push	r0
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6da:	e7 e4       	ldi	r30, 0x47	; 71
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	80 83       	st	Z, r24
}
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	08 95       	ret

000006ea <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-29);
     6f2:	83 ee       	ldi	r24, 0xE3	; 227
     6f4:	a7 df       	rcall	.-178    	; 0x644 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(100);
     6f6:	84 e6       	ldi	r24, 0x64	; 100
     6f8:	ea df       	rcall	.-44     	; 0x6ce <servo_set_right_grabber_position>
}
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	6c 97       	sbiw	r28, 0x1c	; 28
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     714:	8a ea       	ldi	r24, 0xAA	; 170
     716:	0c df       	rcall	.-488    	; 0x530 <servo_set_umbrella_position>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	aa e7       	ldi	r26, 0x7A	; 122
     71e:	b4 e4       	ldi	r27, 0x44	; 68
     720:	89 8f       	std	Y+25, r24	; 0x19
     722:	9a 8f       	std	Y+26, r25	; 0x1a
     724:	ab 8f       	std	Y+27, r26	; 0x1b
     726:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     728:	69 8d       	ldd	r22, Y+25	; 0x19
     72a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     72c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     72e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e4       	ldi	r19, 0x40	; 64
     734:	4c e1       	ldi	r20, 0x1C	; 28
     736:	55 e4       	ldi	r21, 0x45	; 69
     738:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	8d 8b       	std	Y+21, r24	; 0x15
     742:	9e 8b       	std	Y+22, r25	; 0x16
     744:	af 8b       	std	Y+23, r26	; 0x17
     746:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     748:	6d 89       	ldd	r22, Y+21	; 0x15
     74a:	7e 89       	ldd	r23, Y+22	; 0x16
     74c:	8f 89       	ldd	r24, Y+23	; 0x17
     74e:	98 8d       	ldd	r25, Y+24	; 0x18
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     75c:	88 23       	and	r24, r24
     75e:	2c f4       	brge	.+10     	; 0x76a <actuators_umbrella+0x6a>
		__ticks = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9c 8b       	std	Y+20, r25	; 0x14
     766:	8b 8b       	std	Y+19, r24	; 0x13
     768:	3f c0       	rjmp	.+126    	; 0x7e8 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     76a:	6d 89       	ldd	r22, Y+21	; 0x15
     76c:	7e 89       	ldd	r23, Y+22	; 0x16
     76e:	8f 89       	ldd	r24, Y+23	; 0x17
     770:	98 8d       	ldd	r25, Y+24	; 0x18
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	3f ef       	ldi	r19, 0xFF	; 255
     776:	4f e7       	ldi	r20, 0x7F	; 127
     778:	57 e4       	ldi	r21, 0x47	; 71
     77a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	4c f5       	brge	.+82     	; 0x7d4 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     782:	69 8d       	ldd	r22, Y+25	; 0x19
     784:	7a 8d       	ldd	r23, Y+26	; 0x1a
     786:	8b 8d       	ldd	r24, Y+27	; 0x1b
     788:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	9c 8b       	std	Y+20, r25	; 0x14
     7a8:	8b 8b       	std	Y+19, r24	; 0x13
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <actuators_umbrella+0xca>
     7ac:	8a ef       	ldi	r24, 0xFA	; 250
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9a 8b       	std	Y+18, r25	; 0x12
     7b2:	89 8b       	std	Y+17, r24	; 0x11
     7b4:	89 89       	ldd	r24, Y+17	; 0x11
     7b6:	9a 89       	ldd	r25, Y+18	; 0x12
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <actuators_umbrella+0xb8>
     7bc:	9a 8b       	std	Y+18, r25	; 0x12
     7be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	9c 8b       	std	Y+20, r25	; 0x14
     7c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ca:	8b 89       	ldd	r24, Y+19	; 0x13
     7cc:	9c 89       	ldd	r25, Y+20	; 0x14
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	69 f7       	brne	.-38     	; 0x7ac <actuators_umbrella+0xac>
     7d2:	14 c0       	rjmp	.+40     	; 0x7fc <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d4:	6d 89       	ldd	r22, Y+21	; 0x15
     7d6:	7e 89       	ldd	r23, Y+22	; 0x16
     7d8:	8f 89       	ldd	r24, Y+23	; 0x17
     7da:	98 8d       	ldd	r25, Y+24	; 0x18
     7dc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	9c 8b       	std	Y+20, r25	; 0x14
     7e6:	8b 8b       	std	Y+19, r24	; 0x13
     7e8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ea:	9c 89       	ldd	r25, Y+20	; 0x14
     7ec:	98 8b       	std	Y+16, r25	; 0x10
     7ee:	8f 87       	std	Y+15, r24	; 0x0f
     7f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f2:	98 89       	ldd	r25, Y+16	; 0x10
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <actuators_umbrella+0xf4>
     7f8:	98 8b       	std	Y+16, r25	; 0x10
     7fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	dd de       	rcall	.-582    	; 0x5ba <servo_set_door_position>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	aa e7       	ldi	r26, 0x7A	; 122
     806:	b4 e4       	ldi	r27, 0x44	; 68
     808:	8b 87       	std	Y+11, r24	; 0x0b
     80a:	9c 87       	std	Y+12, r25	; 0x0c
     80c:	ad 87       	std	Y+13, r26	; 0x0d
     80e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     810:	6b 85       	ldd	r22, Y+11	; 0x0b
     812:	7c 85       	ldd	r23, Y+12	; 0x0c
     814:	8d 85       	ldd	r24, Y+13	; 0x0d
     816:	9e 85       	ldd	r25, Y+14	; 0x0e
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e4       	ldi	r19, 0x40	; 64
     81c:	4c e1       	ldi	r20, 0x1C	; 28
     81e:	55 e4       	ldi	r21, 0x45	; 69
     820:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	8f 83       	std	Y+7, r24	; 0x07
     82a:	98 87       	std	Y+8, r25	; 0x08
     82c:	a9 87       	std	Y+9, r26	; 0x09
     82e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     830:	6f 81       	ldd	r22, Y+7	; 0x07
     832:	78 85       	ldd	r23, Y+8	; 0x08
     834:	89 85       	ldd	r24, Y+9	; 0x09
     836:	9a 85       	ldd	r25, Y+10	; 0x0a
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	2c f4       	brge	.+10     	; 0x852 <actuators_umbrella+0x152>
		__ticks = 1;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9e 83       	std	Y+6, r25	; 0x06
     84e:	8d 83       	std	Y+5, r24	; 0x05
     850:	3f c0       	rjmp	.+126    	; 0x8d0 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     852:	6f 81       	ldd	r22, Y+7	; 0x07
     854:	78 85       	ldd	r23, Y+8	; 0x08
     856:	89 85       	ldd	r24, Y+9	; 0x09
     858:	9a 85       	ldd	r25, Y+10	; 0x0a
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	3f ef       	ldi	r19, 0xFF	; 255
     85e:	4f e7       	ldi	r20, 0x7F	; 127
     860:	57 e4       	ldi	r21, 0x47	; 71
     862:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	4c f5       	brge	.+82     	; 0x8bc <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86a:	6b 85       	ldd	r22, Y+11	; 0x0b
     86c:	7c 85       	ldd	r23, Y+12	; 0x0c
     86e:	8d 85       	ldd	r24, Y+13	; 0x0d
     870:	9e 85       	ldd	r25, Y+14	; 0x0e
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e2       	ldi	r20, 0x20	; 32
     878:	51 e4       	ldi	r21, 0x41	; 65
     87a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	9e 83       	std	Y+6, r25	; 0x06
     890:	8d 83       	std	Y+5, r24	; 0x05
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <actuators_umbrella+0x1b2>
     894:	8a ef       	ldi	r24, 0xFA	; 250
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	8b 83       	std	Y+3, r24	; 0x03
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	9c 81       	ldd	r25, Y+4	; 0x04
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <actuators_umbrella+0x1a0>
     8a4:	9c 83       	std	Y+4, r25	; 0x04
     8a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	9e 83       	std	Y+6, r25	; 0x06
     8b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b2:	8d 81       	ldd	r24, Y+5	; 0x05
     8b4:	9e 81       	ldd	r25, Y+6	; 0x06
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	69 f7       	brne	.-38     	; 0x894 <actuators_umbrella+0x194>
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8bc:	6f 81       	ldd	r22, Y+7	; 0x07
     8be:	78 85       	ldd	r23, Y+8	; 0x08
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9e 83       	std	Y+6, r25	; 0x06
     8ce:	8d 83       	std	Y+5, r24	; 0x05
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	9e 81       	ldd	r25, Y+6	; 0x06
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <actuators_umbrella+0x1dc>
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8e4:	6c 96       	adiw	r28, 0x1c	; 28
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <actuators_setup>:
void actuators_setup(void)
{
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	aa 97       	sbiw	r28, 0x2a	; 42
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     90a:	8a e5       	ldi	r24, 0x5A	; 90
     90c:	56 de       	rcall	.-852    	; 0x5ba <servo_set_door_position>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	aa e7       	ldi	r26, 0x7A	; 122
     914:	b4 e4       	ldi	r27, 0x44	; 68
     916:	8f a3       	std	Y+39, r24	; 0x27
     918:	98 a7       	std	Y+40, r25	; 0x28
     91a:	a9 a7       	std	Y+41, r26	; 0x29
     91c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     91e:	6f a1       	ldd	r22, Y+39	; 0x27
     920:	78 a5       	ldd	r23, Y+40	; 0x28
     922:	89 a5       	ldd	r24, Y+41	; 0x29
     924:	9a a5       	ldd	r25, Y+42	; 0x2a
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e4       	ldi	r19, 0x40	; 64
     92a:	4c e1       	ldi	r20, 0x1C	; 28
     92c:	55 e4       	ldi	r21, 0x45	; 69
     92e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	8b a3       	std	Y+35, r24	; 0x23
     938:	9c a3       	std	Y+36, r25	; 0x24
     93a:	ad a3       	std	Y+37, r26	; 0x25
     93c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     93e:	6b a1       	ldd	r22, Y+35	; 0x23
     940:	7c a1       	ldd	r23, Y+36	; 0x24
     942:	8d a1       	ldd	r24, Y+37	; 0x25
     944:	9e a1       	ldd	r25, Y+38	; 0x26
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e8       	ldi	r20, 0x80	; 128
     94c:	5f e3       	ldi	r21, 0x3F	; 63
     94e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	2c f4       	brge	.+10     	; 0x960 <actuators_setup+0x6a>
		__ticks = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9a a3       	std	Y+34, r25	; 0x22
     95c:	89 a3       	std	Y+33, r24	; 0x21
     95e:	3f c0       	rjmp	.+126    	; 0x9de <actuators_setup+0xe8>
	else if (__tmp > 65535)
     960:	6b a1       	ldd	r22, Y+35	; 0x23
     962:	7c a1       	ldd	r23, Y+36	; 0x24
     964:	8d a1       	ldd	r24, Y+37	; 0x25
     966:	9e a1       	ldd	r25, Y+38	; 0x26
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	3f ef       	ldi	r19, 0xFF	; 255
     96c:	4f e7       	ldi	r20, 0x7F	; 127
     96e:	57 e4       	ldi	r21, 0x47	; 71
     970:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     974:	18 16       	cp	r1, r24
     976:	4c f5       	brge	.+82     	; 0x9ca <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     978:	6f a1       	ldd	r22, Y+39	; 0x27
     97a:	78 a5       	ldd	r23, Y+40	; 0x28
     97c:	89 a5       	ldd	r24, Y+41	; 0x29
     97e:	9a a5       	ldd	r25, Y+42	; 0x2a
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	bc 01       	movw	r22, r24
     992:	cd 01       	movw	r24, r26
     994:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	9a a3       	std	Y+34, r25	; 0x22
     99e:	89 a3       	std	Y+33, r24	; 0x21
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <actuators_setup+0xca>
     9a2:	8a ef       	ldi	r24, 0xFA	; 250
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	98 a3       	std	Y+32, r25	; 0x20
     9a8:	8f 8f       	std	Y+31, r24	; 0x1f
     9aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9ac:	98 a1       	ldd	r25, Y+32	; 0x20
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <actuators_setup+0xb8>
     9b2:	98 a3       	std	Y+32, r25	; 0x20
     9b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b6:	89 a1       	ldd	r24, Y+33	; 0x21
     9b8:	9a a1       	ldd	r25, Y+34	; 0x22
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9a a3       	std	Y+34, r25	; 0x22
     9be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c0:	89 a1       	ldd	r24, Y+33	; 0x21
     9c2:	9a a1       	ldd	r25, Y+34	; 0x22
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	69 f7       	brne	.-38     	; 0x9a2 <actuators_setup+0xac>
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ca:	6b a1       	ldd	r22, Y+35	; 0x23
     9cc:	7c a1       	ldd	r23, Y+36	; 0x24
     9ce:	8d a1       	ldd	r24, Y+37	; 0x25
     9d0:	9e a1       	ldd	r25, Y+38	; 0x26
     9d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	9a a3       	std	Y+34, r25	; 0x22
     9dc:	89 a3       	std	Y+33, r24	; 0x21
     9de:	89 a1       	ldd	r24, Y+33	; 0x21
     9e0:	9a a1       	ldd	r25, Y+34	; 0x22
     9e2:	9e 8f       	std	Y+30, r25	; 0x1e
     9e4:	8d 8f       	std	Y+29, r24	; 0x1d
     9e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <actuators_setup+0xf4>
     9ee:	9e 8f       	std	Y+30, r25	; 0x1e
     9f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     9f2:	85 e5       	ldi	r24, 0x55	; 85
     9f4:	9d dd       	rcall	.-1222   	; 0x530 <servo_set_umbrella_position>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	aa e7       	ldi	r26, 0x7A	; 122
     9fc:	b4 e4       	ldi	r27, 0x44	; 68
     9fe:	89 8f       	std	Y+25, r24	; 0x19
     a00:	9a 8f       	std	Y+26, r25	; 0x1a
     a02:	ab 8f       	std	Y+27, r26	; 0x1b
     a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a06:	69 8d       	ldd	r22, Y+25	; 0x19
     a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e4       	ldi	r19, 0x40	; 64
     a12:	4c e1       	ldi	r20, 0x1C	; 28
     a14:	55 e4       	ldi	r21, 0x45	; 69
     a16:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	8d 8b       	std	Y+21, r24	; 0x15
     a20:	9e 8b       	std	Y+22, r25	; 0x16
     a22:	af 8b       	std	Y+23, r26	; 0x17
     a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a26:	6d 89       	ldd	r22, Y+21	; 0x15
     a28:	7e 89       	ldd	r23, Y+22	; 0x16
     a2a:	8f 89       	ldd	r24, Y+23	; 0x17
     a2c:	98 8d       	ldd	r25, Y+24	; 0x18
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e8       	ldi	r20, 0x80	; 128
     a34:	5f e3       	ldi	r21, 0x3F	; 63
     a36:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	2c f4       	brge	.+10     	; 0xa48 <actuators_setup+0x152>
		__ticks = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9c 8b       	std	Y+20, r25	; 0x14
     a44:	8b 8b       	std	Y+19, r24	; 0x13
     a46:	3f c0       	rjmp	.+126    	; 0xac6 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a48:	6d 89       	ldd	r22, Y+21	; 0x15
     a4a:	7e 89       	ldd	r23, Y+22	; 0x16
     a4c:	8f 89       	ldd	r24, Y+23	; 0x17
     a4e:	98 8d       	ldd	r25, Y+24	; 0x18
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	4c f5       	brge	.+82     	; 0xab2 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a60:	69 8d       	ldd	r22, Y+25	; 0x19
     a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e2       	ldi	r20, 0x20	; 32
     a6e:	51 e4       	ldi	r21, 0x41	; 65
     a70:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	9c 8b       	std	Y+20, r25	; 0x14
     a86:	8b 8b       	std	Y+19, r24	; 0x13
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <actuators_setup+0x1b2>
     a8a:	8a ef       	ldi	r24, 0xFA	; 250
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	9a 8b       	std	Y+18, r25	; 0x12
     a90:	89 8b       	std	Y+17, r24	; 0x11
     a92:	89 89       	ldd	r24, Y+17	; 0x11
     a94:	9a 89       	ldd	r25, Y+18	; 0x12
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <actuators_setup+0x1a0>
     a9a:	9a 8b       	std	Y+18, r25	; 0x12
     a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a9e:	8b 89       	ldd	r24, Y+19	; 0x13
     aa0:	9c 89       	ldd	r25, Y+20	; 0x14
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 8b       	std	Y+20, r25	; 0x14
     aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa8:	8b 89       	ldd	r24, Y+19	; 0x13
     aaa:	9c 89       	ldd	r25, Y+20	; 0x14
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	69 f7       	brne	.-38     	; 0xa8a <actuators_setup+0x194>
     ab0:	14 c0       	rjmp	.+40     	; 0xada <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab2:	6d 89       	ldd	r22, Y+21	; 0x15
     ab4:	7e 89       	ldd	r23, Y+22	; 0x16
     ab6:	8f 89       	ldd	r24, Y+23	; 0x17
     ab8:	98 8d       	ldd	r25, Y+24	; 0x18
     aba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	9c 8b       	std	Y+20, r25	; 0x14
     ac4:	8b 8b       	std	Y+19, r24	; 0x13
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	9c 89       	ldd	r25, Y+20	; 0x14
     aca:	98 8b       	std	Y+16, r25	; 0x10
     acc:	8f 87       	std	Y+15, r24	; 0x0f
     ace:	8f 85       	ldd	r24, Y+15	; 0x0f
     ad0:	98 89       	ldd	r25, Y+16	; 0x10
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <actuators_setup+0x1dc>
     ad6:	98 8b       	std	Y+16, r25	; 0x10
     ad8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	6e dd       	rcall	.-1316   	; 0x5ba <servo_set_door_position>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	aa ef       	ldi	r26, 0xFA	; 250
     ae4:	b3 e4       	ldi	r27, 0x43	; 67
     ae6:	8b 87       	std	Y+11, r24	; 0x0b
     ae8:	9c 87       	std	Y+12, r25	; 0x0c
     aea:	ad 87       	std	Y+13, r26	; 0x0d
     aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aee:	6b 85       	ldd	r22, Y+11	; 0x0b
     af0:	7c 85       	ldd	r23, Y+12	; 0x0c
     af2:	8d 85       	ldd	r24, Y+13	; 0x0d
     af4:	9e 85       	ldd	r25, Y+14	; 0x0e
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e4       	ldi	r19, 0x40	; 64
     afa:	4c e1       	ldi	r20, 0x1C	; 28
     afc:	55 e4       	ldi	r21, 0x45	; 69
     afe:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	8f 83       	std	Y+7, r24	; 0x07
     b08:	98 87       	std	Y+8, r25	; 0x08
     b0a:	a9 87       	std	Y+9, r26	; 0x09
     b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b0e:	6f 81       	ldd	r22, Y+7	; 0x07
     b10:	78 85       	ldd	r23, Y+8	; 0x08
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <actuators_setup+0x23a>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9e 83       	std	Y+6, r25	; 0x06
     b2c:	8d 83       	std	Y+5, r24	; 0x05
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     b30:	6f 81       	ldd	r22, Y+7	; 0x07
     b32:	78 85       	ldd	r23, Y+8	; 0x08
     b34:	89 85       	ldd	r24, Y+9	; 0x09
     b36:	9a 85       	ldd	r25, Y+10	; 0x0a
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	4c f5       	brge	.+82     	; 0xb9a <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <actuators_setup+0x29a>
     b72:	8a ef       	ldi	r24, 0xFA	; 250
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <actuators_setup+0x288>
     b82:	9c 83       	std	Y+4, r25	; 0x04
     b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	9e 83       	std	Y+6, r25	; 0x06
     b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f7       	brne	.-38     	; 0xb72 <actuators_setup+0x27c>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fixunssfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	9e 81       	ldd	r25, Y+6	; 0x06
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <actuators_setup+0x2c4>
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     bc2:	93 dd       	rcall	.-1242   	; 0x6ea <servo_set_grabbers_up>
	
}
     bc4:	aa 96       	adiw	r28, 0x2a	; 42
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <__vector_18>:
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	00 90 5b 00 	lds	r0, 0x005B
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <__vector_18+0x2a>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <__vector_18+0x2c>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	ed ee       	ldi	r30, 0xED	; 237
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8c 83       	std	Y+4, r24	; 0x04
     c0e:	1b 82       	std	Y+3, r1	; 0x03
     c10:	9c c0       	rjmp	.+312    	; 0xd4a <__vector_18+0x174>
     c12:	ed ee       	ldi	r30, 0xED	; 237
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	82 95       	swap	r24
     c1a:	80 7f       	andi	r24, 0xF0	; 240
     c1c:	80 83       	st	Z, r24
     c1e:	ee ee       	ldi	r30, 0xEE	; 238
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	82 95       	swap	r24
     c26:	86 95       	lsr	r24
     c28:	87 70       	andi	r24, 0x07	; 7
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	88 23       	and	r24, r24
     c34:	09 f4       	brne	.+2      	; 0xc38 <__vector_18+0x62>
     c36:	6e c0       	rjmp	.+220    	; 0xd14 <__vector_18+0x13e>
     c38:	ef ee       	ldi	r30, 0xEF	; 239
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 e8       	ldi	r24, 0x80	; 128
     c3e:	80 83       	st	Z, r24
     c40:	ae ee       	ldi	r26, 0xEE	; 238
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ee ee       	ldi	r30, 0xEE	; 238
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	8c 93       	st	X, r24
     c4e:	e2 ef       	ldi	r30, 0xF2	; 242
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	82 95       	swap	r24
     c56:	86 95       	lsr	r24
     c58:	87 70       	andi	r24, 0x07	; 7
     c5a:	28 2f       	mov	r18, r24
     c5c:	e3 ef       	ldi	r30, 0xF3	; 243
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	82 2b       	or	r24, r18
     c74:	8a 83       	std	Y+2, r24	; 0x02
     c76:	19 82       	std	Y+1, r1	; 0x01
     c78:	2a c0       	rjmp	.+84     	; 0xcce <__vector_18+0xf8>
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	82 1b       	sub	r24, r18
     c86:	93 0b       	sbc	r25, r19
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	90 95       	com	r25
     c8e:	81 95       	neg	r24
     c90:	9f 4f       	sbci	r25, 0xFF	; 255
     c92:	fc 01       	movw	r30, r24
     c94:	e6 5f       	subi	r30, 0xF6	; 246
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	40 81       	ld	r20, Z
     c9a:	51 81       	ldd	r21, Z+1	; 0x01
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	fc 01       	movw	r30, r24
     ca6:	e2 5e       	subi	r30, 0xE2	; 226
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 81       	ld	r24, Z
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	da 01       	movw	r26, r20
     cbc:	a8 0f       	add	r26, r24
     cbe:	b9 1f       	adc	r27, r25
     cc0:	ea ef       	ldi	r30, 0xFA	; 250
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8c 93       	st	X, r24
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	98 f2       	brcs	.-90     	; 0xc7a <__vector_18+0xa4>
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	fc 01       	movw	r30, r24
     cde:	e2 5e       	subi	r30, 0xE2	; 226
     ce0:	fe 4f       	sbci	r31, 0xFE	; 254
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 83       	st	Z, r24
     ce8:	80 81       	ld	r24, Z
     cea:	85 30       	cpi	r24, 0x05	; 5
     cec:	41 f4       	brne	.+16     	; 0xcfe <__vector_18+0x128>
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	fc 01       	movw	r30, r24
     cf8:	e2 5e       	subi	r30, 0xE2	; 226
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	10 82       	st	Z, r1
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	fc 01       	movw	r30, r24
     d08:	ee 5c       	subi	r30, 0xCE	; 206
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 83       	st	Z, r24
     d12:	1f c0       	rjmp	.+62     	; 0xd52 <__vector_18+0x17c>
     d14:	ee ee       	ldi	r30, 0xEE	; 238
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	82 95       	swap	r24
     d1c:	86 95       	lsr	r24
     d1e:	86 95       	lsr	r24
     d20:	83 70       	andi	r24, 0x03	; 3
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	81 70       	andi	r24, 0x01	; 1
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	88 23       	and	r24, r24
     d2c:	59 f0       	breq	.+22     	; 0xd44 <__vector_18+0x16e>
     d2e:	ef ee       	ldi	r30, 0xEF	; 239
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1
     d34:	ae ee       	ldi	r26, 0xEE	; 238
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ee ee       	ldi	r30, 0xEE	; 238
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7b       	andi	r24, 0xBF	; 191
     d40:	8c 93       	st	X, r24
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <__vector_18+0x17c>
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	8f 30       	cpi	r24, 0x0F	; 15
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <__vector_18+0x17c>
     d50:	60 cf       	rjmp	.-320    	; 0xc12 <__vector_18+0x3c>
     d52:	ed ee       	ldi	r30, 0xED	; 237
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	80 83       	st	Z, r24
     d5a:	aa ed       	ldi	r26, 0xDA	; 218
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea ed       	ldi	r30, 0xDA	; 218
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8c 93       	st	X, r24
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	ff 91       	pop	r31
     d74:	ef 91       	pop	r30
     d76:	bf 91       	pop	r27
     d78:	af 91       	pop	r26
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	5f 91       	pop	r21
     d80:	4f 91       	pop	r20
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	00 92 5b 00 	sts	0x005B, r0
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <CAN_InitModule>:
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <CAN_InitModule+0x6>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	e8 ed       	ldi	r30, 0xD8	; 216
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 83       	st	Z, r24
     da8:	1a 82       	std	Y+2, r1	; 0x02
     daa:	32 c0       	rjmp	.+100    	; 0xe10 <CAN_InitModule+0x7a>
     dac:	ed ee       	ldi	r30, 0xED	; 237
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	80 83       	st	Z, r24
     db8:	ee ee       	ldi	r30, 0xEE	; 238
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	10 82       	st	Z, r1
     dbe:	ef ee       	ldi	r30, 0xEF	; 239
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	10 82       	st	Z, r1
     dc4:	e3 ef       	ldi	r30, 0xF3	; 243
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 82       	st	Z, r1
     dca:	e2 ef       	ldi	r30, 0xF2	; 242
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	10 82       	st	Z, r1
     dd0:	e1 ef       	ldi	r30, 0xF1	; 241
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1
     dd6:	e0 ef       	ldi	r30, 0xF0	; 240
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	10 82       	st	Z, r1
     ddc:	e7 ef       	ldi	r30, 0xF7	; 247
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	10 82       	st	Z, r1
     de2:	e6 ef       	ldi	r30, 0xF6	; 246
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	10 82       	st	Z, r1
     de8:	e5 ef       	ldi	r30, 0xF5	; 245
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	10 82       	st	Z, r1
     dee:	e4 ef       	ldi	r30, 0xF4	; 244
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	10 82       	st	Z, r1
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <CAN_InitModule+0x6e>
     df8:	ea ef       	ldi	r30, 0xFA	; 250
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	10 82       	st	Z, r1
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	b8 f3       	brcs	.-18     	; 0xdf8 <CAN_InitModule+0x62>
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	8f 30       	cpi	r24, 0x0F	; 15
     e14:	58 f2       	brcs	.-106    	; 0xdac <CAN_InitModule+0x16>
     e16:	e8 ed       	ldi	r30, 0xD8	; 216
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	80 83       	st	Z, r24
     e1e:	e2 ee       	ldi	r30, 0xE2	; 226
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	80 83       	st	Z, r24
     e26:	e3 ee       	ldi	r30, 0xE3	; 227
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	80 83       	st	Z, r24
     e2e:	e4 ee       	ldi	r30, 0xE4	; 228
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	8e e5       	ldi	r24, 0x5E	; 94
     e34:	80 83       	st	Z, r24
     e36:	e5 ee       	ldi	r30, 0xE5	; 229
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
     e3c:	eb ed       	ldi	r30, 0xDB	; 219
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 eb       	ldi	r24, 0xB0	; 176
     e42:	80 83       	st	Z, r24
     e44:	ef ed       	ldi	r30, 0xDF	; 223
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8f e7       	ldi	r24, 0x7F	; 127
     e4a:	80 83       	st	Z, r24
     e4c:	ee ed       	ldi	r30, 0xDE	; 222
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	80 83       	st	Z, r24
     e54:	78 94       	sei
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <CAN_InitRxMob>:
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <CAN_InitRxMob+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <CAN_InitRxMob+0x8>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
     e72:	ed ee       	ldi	r30, 0xED	; 237
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	e9 ed       	ldi	r30, 0xD9	; 217
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	82 95       	swap	r24
     e82:	8f 70       	andi	r24, 0x0F	; 15
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	88 23       	and	r24, r24
     e8e:	a9 f7       	brne	.-22     	; 0xe7a <CAN_InitRxMob+0x1a>
     e90:	e9 ed       	ldi	r30, 0xD9	; 217
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	86 95       	lsr	r24
     e98:	86 95       	lsr	r24
     e9a:	86 95       	lsr	r24
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	81 70       	andi	r24, 0x01	; 1
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	88 23       	and	r24, r24
     ea6:	49 f7       	brne	.-46     	; 0xe7a <CAN_InitRxMob+0x1a>
     ea8:	1a 82       	std	Y+2, r1	; 0x02
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <CAN_InitRxMob+0xca>
     eac:	ed ee       	ldi	r30, 0xED	; 237
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	82 95       	swap	r24
     eb4:	80 7f       	andi	r24, 0xF0	; 240
     eb6:	80 83       	st	Z, r24
     eb8:	ef ee       	ldi	r30, 0xEF	; 239
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 95       	swap	r24
     ec0:	86 95       	lsr	r24
     ec2:	86 95       	lsr	r24
     ec4:	83 70       	andi	r24, 0x03	; 3
     ec6:	88 23       	and	r24, r24
     ec8:	69 f5       	brne	.+90     	; 0xf24 <CAN_InitRxMob+0xc4>
     eca:	ef ee       	ldi	r30, 0xEF	; 239
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	8f e0       	ldi	r24, 0x0F	; 15
     ed0:	80 83       	st	Z, r24
     ed2:	e3 ef       	ldi	r30, 0xF3	; 243
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	90 70       	andi	r25, 0x00	; 0
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	80 83       	st	Z, r24
     eea:	e2 ef       	ldi	r30, 0xF2	; 242
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	82 95       	swap	r24
     ef2:	88 0f       	add	r24, r24
     ef4:	80 7e       	andi	r24, 0xE0	; 224
     ef6:	80 83       	st	Z, r24
     ef8:	e6 ef       	ldi	r30, 0xF6	; 246
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 ee       	ldi	r24, 0xE0	; 224
     efe:	80 83       	st	Z, r24
     f00:	e7 ef       	ldi	r30, 0xF7	; 247
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	80 83       	st	Z, r24
     f08:	af ee       	ldi	r26, 0xEF	; 239
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ef ee       	ldi	r30, 0xEF	; 239
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	8c 93       	st	X, r24
     f16:	ed ee       	ldi	r30, 0xED	; 237
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	80 83       	st	Z, r24
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	0c c0       	rjmp	.+24     	; 0xf3c <CAN_InitRxMob+0xdc>
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	8f 30       	cpi	r24, 0x0F	; 15
     f2e:	08 f4       	brcc	.+2      	; 0xf32 <CAN_InitRxMob+0xd2>
     f30:	bd cf       	rjmp	.-134    	; 0xeac <CAN_InitRxMob+0x4c>
     f32:	ed ee       	ldi	r30, 0xED	; 237
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	1d 82       	std	Y+5, r1	; 0x05
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <CAN_Init>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <CAN_Init+0xa>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	1b df       	rcall	.-458    	; 0xd96 <CAN_InitModule>
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	35 c0       	rjmp	.+106    	; 0xfce <CAN_Init+0x80>
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	79 df       	rcall	.-270    	; 0xe60 <CAN_InitRxMob>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	8c 01       	movw	r16, r24
     f7a:	06 5f       	subi	r16, 0xF6	; 246
     f7c:	1e 4f       	sbci	r17, 0xFE	; 254
     f7e:	85 e0       	ldi	r24, 0x05	; 5
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	f2 d7       	rcall	.+4068   	; 0x1f6c <calloc>
     f88:	f8 01       	movw	r30, r16
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	48 2f       	mov	r20, r24
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	fc 01       	movw	r30, r24
     fa2:	ee 5c       	subi	r30, 0xCE	; 206
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	10 82       	st	Z, r1
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 5c       	subi	r30, 0xCE	; 206
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	80 81       	ld	r24, Z
     fb0:	f9 01       	movw	r30, r18
     fb2:	e8 5d       	subi	r30, 0xD8	; 216
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	80 83       	st	Z, r24
     fb8:	f9 01       	movw	r30, r18
     fba:	e8 5d       	subi	r30, 0xD8	; 216
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	80 81       	ld	r24, Z
     fc0:	fa 01       	movw	r30, r20
     fc2:	e2 5e       	subi	r30, 0xE2	; 226
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	80 83       	st	Z, r24
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	98 17       	cp	r25, r24
     fd4:	38 f2       	brcs	.-114    	; 0xf64 <CAN_Init+0x16>
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	2c 97       	sbiw	r28, 0x0c	; 12
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	89 87       	std	Y+9, r24	; 0x09
     ffa:	6a 87       	std	Y+10, r22	; 0x0a
     ffc:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     ffe:	80 91 08 01 	lds	r24, 0x0108
    1002:	90 91 09 01 	lds	r25, 0x0109
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	06 97       	sbiw	r24, 0x06	; 6
    1010:	98 87       	std	Y+8, r25	; 0x08
    1012:	8f 83       	std	Y+7, r24	; 0x07
    1014:	14 c0       	rjmp	.+40     	; 0x103e <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    1016:	ef 81       	ldd	r30, Y+7	; 0x07
    1018:	f8 85       	ldd	r31, Y+8	; 0x08
    101a:	90 81       	ld	r25, Z
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	98 17       	cp	r25, r24
    1020:	19 f4       	brne	.+6      	; 0x1028 <gpio_register_pin+0x44>
            return 1;
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	2c 87       	std	Y+12, r18	; 0x0c
    1026:	c8 c0       	rjmp	.+400    	; 0x11b8 <__stack+0xb9>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1028:	ef 81       	ldd	r30, Y+7	; 0x07
    102a:	f8 85       	ldd	r31, Y+8	; 0x08
    102c:	80 85       	ldd	r24, Z+8	; 0x08
    102e:	91 85       	ldd	r25, Z+9	; 0x09
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	06 97       	sbiw	r24, 0x06	; 6
    103a:	98 87       	std	Y+8, r25	; 0x08
    103c:	8f 83       	std	Y+7, r24	; 0x07
    103e:	8f 81       	ldd	r24, Y+7	; 0x07
    1040:	98 85       	ldd	r25, Y+8	; 0x08
    1042:	06 96       	adiw	r24, 0x06	; 6
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	86 30       	cpi	r24, 0x06	; 6
    1048:	92 07       	cpc	r25, r18
    104a:	29 f7       	brne	.-54     	; 0x1016 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	86 95       	lsr	r24
    1050:	86 95       	lsr	r24
    1052:	86 95       	lsr	r24
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1058:	89 85       	ldd	r24, Y+9	; 0x09
    105a:	87 70       	andi	r24, 0x07	; 7
    105c:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    105e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	09 f0       	breq	.+2      	; 0x1066 <gpio_register_pin+0x82>
    1064:	48 c0       	rjmp	.+144    	; 0x10f6 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	c9 01       	movw	r24, r18
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	4e 96       	adiw	r24, 0x1e	; 30
    1078:	dc 01       	movw	r26, r24
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	c9 01       	movw	r24, r18
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	4e 96       	adiw	r24, 0x1e	; 30
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <gpio_register_pin+0xbe>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	2a 95       	dec	r18
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <gpio_register_pin+0xba>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	c9 01       	movw	r24, r18
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	4f 96       	adiw	r24, 0x1f	; 31
    10bc:	dc 01       	movw	r26, r24
    10be:	8e 81       	ldd	r24, Y+6	; 0x06
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	c9 01       	movw	r24, r18
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	4f 96       	adiw	r24, 0x1f	; 31
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <gpio_register_pin+0x104>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <gpio_register_pin+0x100>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
        return 0;
    10f2:	1c 86       	std	Y+12, r1	; 0x0c
    10f4:	61 c0       	rjmp	.+194    	; 0x11b8 <__stack+0xb9>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10f6:	8e 81       	ldd	r24, Y+6	; 0x06
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	c9 01       	movw	r24, r18
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	4e 96       	adiw	r24, 0x1e	; 30
    1108:	dc 01       	movw	r26, r24
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	c9 01       	movw	r24, r18
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	82 0f       	add	r24, r18
    1118:	93 1f       	adc	r25, r19
    111a:	4e 96       	adiw	r24, 0x1e	; 30
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__stack+0x33>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <__stack+0x2f>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	c9 01       	movw	r24, r18
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	4f 96       	adiw	r24, 0x1f	; 31
    114e:	dc 01       	movw	r26, r24
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	4f 96       	adiw	r24, 0x1f	; 31
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <__stack+0x79>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <__stack+0x75>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0d d7       	rcall	.+3610   	; 0x1fa0 <malloc>
    1186:	98 87       	std	Y+8, r25	; 0x08
    1188:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    118a:	8f 81       	ldd	r24, Y+7	; 0x07
    118c:	98 85       	ldd	r25, Y+8	; 0x08
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	19 f4       	brne	.+6      	; 0x1198 <__stack+0x99>
        return 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	8c 87       	std	Y+12, r24	; 0x0c
    1196:	10 c0       	rjmp	.+32     	; 0x11b8 <__stack+0xb9>

    input->pin       = pin;
    1198:	ef 81       	ldd	r30, Y+7	; 0x07
    119a:	f8 85       	ldd	r31, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    11a0:	ef 81       	ldd	r30, Y+7	; 0x07
    11a2:	f8 85       	ldd	r31, Y+8	; 0x08
    11a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a6:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    11a8:	8f 81       	ldd	r24, Y+7	; 0x07
    11aa:	98 85       	ldd	r25, Y+8	; 0x08
    11ac:	06 96       	adiw	r24, 0x06	; 6
    11ae:	26 e0       	ldi	r18, 0x06	; 6
    11b0:	31 e0       	ldi	r19, 0x01	; 1
    11b2:	b9 01       	movw	r22, r18
    11b4:	0b d0       	rcall	.+22     	; 0x11cc <list_add>

    return 0;
    11b6:	1c 86       	std	Y+12, r1	; 0x0c
    11b8:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    11ba:	2c 96       	adiw	r28, 0x0c	; 12
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <list_add+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <list_add+0x8>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	7c 83       	std	Y+4, r23	; 0x04
    11de:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    11e0:	eb 81       	ldd	r30, Y+3	; 0x03
    11e2:	fc 81       	ldd	r31, Y+4	; 0x04
    11e4:	42 81       	ldd	r20, Z+2	; 0x02
    11e6:	53 81       	ldd	r21, Z+3	; 0x03
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	2b 81       	ldd	r18, Y+3	; 0x03
    11ee:	3c 81       	ldd	r19, Y+4	; 0x04
    11f0:	b9 01       	movw	r22, r18
    11f2:	07 d0       	rcall	.+14     	; 0x1202 <__list_add>
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <__list_add+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <__list_add+0x8>
    120a:	00 d0       	rcall	.+0      	; 0x120c <__list_add+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	7c 83       	std	Y+4, r23	; 0x04
    1216:	6b 83       	std	Y+3, r22	; 0x03
    1218:	5e 83       	std	Y+6, r21	; 0x06
    121a:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    121c:	ed 81       	ldd	r30, Y+5	; 0x05
    121e:	fe 81       	ldd	r31, Y+6	; 0x06
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	80 83       	st	Z, r24
    new->next = next;
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	93 83       	std	Z+3, r25	; 0x03
    1232:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    prev->next = new;
    1240:	eb 81       	ldd	r30, Y+3	; 0x03
    1242:	fc 81       	ldd	r31, Y+4	; 0x04
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
}
    124c:	26 96       	adiw	r28, 0x06	; 6
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <__gpio_read_pin+0x6>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	86 95       	lsr	r24
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	87 70       	andi	r24, 0x07	; 7
    127c:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	c9 01       	movw	r24, r18
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	82 0f       	add	r24, r18
    128c:	93 1f       	adc	r25, r19
    128e:	4d 96       	adiw	r24, 0x1d	; 29
    1290:	fc 01       	movw	r30, r24
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a9 01       	movw	r20, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <__gpio_read_pin+0x4c>
    12a6:	55 95       	asr	r21
    12a8:	47 95       	ror	r20
    12aa:	8a 95       	dec	r24
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <__gpio_read_pin+0x48>
    12ae:	ca 01       	movw	r24, r20
    12b0:	81 70       	andi	r24, 0x01	; 1
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	2b 97       	sbiw	r28, 0x0b	; 11
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12d4:	80 91 08 01 	lds	r24, 0x0108
    12d8:	90 91 09 01 	lds	r25, 0x0109
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	06 97       	sbiw	r24, 0x06	; 6
    12e6:	98 87       	std	Y+8, r25	; 0x08
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	55 c0       	rjmp	.+170    	; 0x1396 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12ec:	ef 81       	ldd	r30, Y+7	; 0x07
    12ee:	f8 85       	ldd	r31, Y+8	; 0x08
    12f0:	90 81       	ld	r25, Z
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	98 17       	cp	r25, r24
    12f6:	09 f0       	breq	.+2      	; 0x12fa <gpio_read_pin+0x3c>
    12f8:	43 c0       	rjmp	.+134    	; 0x1380 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    12fa:	1c 82       	std	Y+4, r1	; 0x04
    12fc:	21 c0       	rjmp	.+66     	; 0x1340 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8f 81       	ldd	r24, Y+7	; 0x07
    1306:	98 85       	ldd	r25, Y+8	; 0x08
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	32 96       	adiw	r30, 0x02	; 2
    1310:	40 81       	ld	r20, Z
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 01       	movw	r18, r24
    131a:	2f 5f       	subi	r18, 0xFF	; 255
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	fc 01       	movw	r30, r24
    1328:	32 96       	adiw	r30, 0x02	; 2
    132a:	80 81       	ld	r24, Z
    132c:	48 17       	cp	r20, r24
    132e:	29 f0       	breq	.+10     	; 0x133a <gpio_read_pin+0x7c>
                    return input->previous_state;
    1330:	ef 81       	ldd	r30, Y+7	; 0x07
    1332:	f8 85       	ldd	r31, Y+8	; 0x08
    1334:	25 81       	ldd	r18, Z+5	; 0x05
    1336:	2b 87       	std	Y+11, r18	; 0x0b
    1338:	38 c0       	rjmp	.+112    	; 0x13aa <gpio_read_pin+0xec>
                i++;
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	e0 f2       	brcs	.-72     	; 0x12fe <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1346:	ef 81       	ldd	r30, Y+7	; 0x07
    1348:	f8 85       	ldd	r31, Y+8	; 0x08
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 27       	eor	r24, r25
    1350:	88 23       	and	r24, r24
    1352:	29 f0       	breq	.+10     	; 0x135e <gpio_read_pin+0xa0>
    1354:	ef 81       	ldd	r30, Y+7	; 0x07
    1356:	f8 85       	ldd	r31, Y+8	; 0x08
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	8a 87       	std	Y+10, r24	; 0x0a
    135c:	08 c0       	rjmp	.+16     	; 0x136e <gpio_read_pin+0xb0>
    135e:	ef 81       	ldd	r30, Y+7	; 0x07
    1360:	f8 85       	ldd	r31, Y+8	; 0x08
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	1a 86       	std	Y+10, r1	; 0x0a
    1366:	88 23       	and	r24, r24
    1368:	11 f4       	brne	.+4      	; 0x136e <gpio_read_pin+0xb0>
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	2a 87       	std	Y+10, r18	; 0x0a
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1372:	ef 81       	ldd	r30, Y+7	; 0x07
    1374:	f8 85       	ldd	r31, Y+8	; 0x08
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	85 83       	std	Z+5, r24	; 0x05

            return state;
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	2b 87       	std	Y+11, r18	; 0x0b
    137e:	15 c0       	rjmp	.+42     	; 0x13aa <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1380:	ef 81       	ldd	r30, Y+7	; 0x07
    1382:	f8 85       	ldd	r31, Y+8	; 0x08
    1384:	80 85       	ldd	r24, Z+8	; 0x08
    1386:	91 85       	ldd	r25, Z+9	; 0x09
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	06 97       	sbiw	r24, 0x06	; 6
    1392:	98 87       	std	Y+8, r25	; 0x08
    1394:	8f 83       	std	Y+7, r24	; 0x07
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	06 96       	adiw	r24, 0x06	; 6
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	92 07       	cpc	r25, r18
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <gpio_read_pin+0xe8>
    13a4:	a3 cf       	rjmp	.-186    	; 0x12ec <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	8b 87       	std	Y+11, r24	; 0x0b
    13aa:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    13ac:	2b 96       	adiw	r28, 0x0b	; 11
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <gpio_debouncer+0xa>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <gpio_debouncer+0xc>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <gpio_debouncer+0xe>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13d0:	80 91 08 01 	lds	r24, 0x0108
    13d4:	90 91 09 01 	lds	r25, 0x0109
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	06 97       	sbiw	r24, 0x06	; 6
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13e8:	00 91 3c 01 	lds	r16, 0x013C
    13ec:	10 91 3d 01 	lds	r17, 0x013D
    13f0:	ed 81       	ldd	r30, Y+5	; 0x05
    13f2:	fe 81       	ldd	r31, Y+6	; 0x06
    13f4:	80 81       	ld	r24, Z
    13f6:	33 df       	rcall	.-410    	; 0x125e <__gpio_read_pin>
    13f8:	28 2f       	mov	r18, r24
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	80 0f       	add	r24, r16
    1400:	91 1f       	adc	r25, r17
    1402:	fc 01       	movw	r30, r24
    1404:	32 96       	adiw	r30, 0x02	; 2
    1406:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1408:	ed 81       	ldd	r30, Y+5	; 0x05
    140a:	fe 81       	ldd	r31, Y+6	; 0x06
    140c:	80 85       	ldd	r24, Z+8	; 0x08
    140e:	91 85       	ldd	r25, Z+9	; 0x09
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	06 97       	sbiw	r24, 0x06	; 6
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	06 96       	adiw	r24, 0x06	; 6
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	86 30       	cpi	r24, 0x06	; 6
    1428:	92 07       	cpc	r25, r18
    142a:	f1 f6       	brne	.-68     	; 0x13e8 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    142c:	80 91 3c 01 	lds	r24, 0x013C
    1430:	90 91 3d 01 	lds	r25, 0x013D
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	90 93 3d 01 	sts	0x013D, r25
    143a:	80 93 3c 01 	sts	0x013C, r24
    143e:	80 91 3c 01 	lds	r24, 0x013C
    1442:	90 91 3d 01 	lds	r25, 0x013D
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	21 f4       	brne	.+8      	; 0x1454 <gpio_debouncer+0x96>
        count = 0;
    144c:	10 92 3d 01 	sts	0x013D, r1
    1450:	10 92 3c 01 	sts	0x013C, r1
	
}
    1454:	26 96       	adiw	r28, 0x06	; 6
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <timer_register_callback+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	90 93 3f 01 	sts	0x013F, r25
    1480:	80 93 3e 01 	sts	0x013E, r24
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <timer_init>:
	return comb;
}


void timer_init(unsigned int freq)
{
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <timer_init+0xa>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    14a0:	e0 e8       	ldi	r30, 0x80	; 128
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    14a6:	e1 e8       	ldi	r30, 0x81	; 129
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	89 e0       	ldi	r24, 0x09	; 9
    14ac:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    14ae:	08 e8       	ldi	r16, 0x88	; 136
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	cc 01       	movw	r24, r24
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	3c d4       	rcall	.+2168   	; 0x1d3a <__floatunsisf>
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	60 e8       	ldi	r22, 0x80	; 128
    14c8:	76 e9       	ldi	r23, 0x96	; 150
    14ca:	88 e1       	ldi	r24, 0x18	; 24
    14cc:	9b e4       	ldi	r25, 0x4B	; 75
    14ce:	9c d3       	rcall	.+1848   	; 0x1c08 <__divsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	2b d3       	rcall	.+1622   	; 0x1b38 <__addsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	fb d3       	rcall	.+2038   	; 0x1ce2 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	f8 01       	movw	r30, r16
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    14f6:	ef e6       	ldi	r30, 0x6F	; 111
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	80 83       	st	Z, r24

	SREG |= 0x80;
    14fe:	af e5       	ldi	r26, 0x5F	; 95
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e5       	ldi	r30, 0x5F	; 95
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	8c 93       	st	X, r24
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	00 90 5b 00 	lds	r0, 0x005B
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	ef 93       	push	r30
    1540:	ff 93       	push	r31
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    154a:	80 91 3e 01 	lds	r24, 0x013E
    154e:	90 91 3f 01 	lds	r25, 0x013F
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	29 f0       	breq	.+10     	; 0x1560 <__vector_12+0x46>
        timer_callback();
    1556:	e0 91 3e 01 	lds	r30, 0x013E
    155a:	f0 91 3f 01 	lds	r31, 0x013F
    155e:	09 95       	icall
	if(sys_time >= 80000)
    1560:	80 91 40 01 	lds	r24, 0x0140
    1564:	90 91 41 01 	lds	r25, 0x0141
    1568:	a0 91 42 01 	lds	r26, 0x0142
    156c:	b0 91 43 01 	lds	r27, 0x0143
    1570:	80 38       	cpi	r24, 0x80	; 128
    1572:	28 e3       	ldi	r18, 0x38	; 56
    1574:	92 07       	cpc	r25, r18
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	a2 07       	cpc	r26, r18
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	b2 07       	cpc	r27, r18
    157e:	08 f0       	brcs	.+2      	; 0x1582 <__vector_12+0x68>
		actuators_umbrella();
    1580:	bf d8       	rcall	.-3714   	; 0x700 <actuators_umbrella>
	sys_time++;
    1582:	80 91 40 01 	lds	r24, 0x0140
    1586:	90 91 41 01 	lds	r25, 0x0141
    158a:	a0 91 42 01 	lds	r26, 0x0142
    158e:	b0 91 43 01 	lds	r27, 0x0143
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	a1 1d       	adc	r26, r1
    1596:	b1 1d       	adc	r27, r1
    1598:	80 93 40 01 	sts	0x0140, r24
    159c:	90 93 41 01 	sts	0x0141, r25
    15a0:	a0 93 42 01 	sts	0x0142, r26
    15a4:	b0 93 43 01 	sts	0x0143, r27
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	00 92 5b 00 	sts	0x005B, r0
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <system_reset_system_time>:
void system_reset_system_time(void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    15dc:	10 92 40 01 	sts	0x0140, r1
    15e0:	10 92 41 01 	sts	0x0141, r1
    15e4:	10 92 42 01 	sts	0x0142, r1
    15e8:	10 92 43 01 	sts	0x0143, r1
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <system_set_match_started>:
void system_set_match_started(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 44 01 	sts	0x0144, r24
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <system_init>:
			break;
		//maybe put default for rotate for getting the camera right
	}
}
void system_init(void)
{	
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	6c 97       	sbiw	r28, 0x1c	; 28
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    161a:	8f ed       	ldi	r24, 0xDF	; 223
    161c:	99 e0       	ldi	r25, 0x09	; 9
    161e:	25 df       	rcall	.-438    	; 0x146a <timer_register_callback>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a8 ec       	ldi	r26, 0xC8	; 200
    1626:	b2 e4       	ldi	r27, 0x42	; 66
    1628:	89 8f       	std	Y+25, r24	; 0x19
    162a:	9a 8f       	std	Y+26, r25	; 0x1a
    162c:	ab 8f       	std	Y+27, r26	; 0x1b
    162e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	69 8d       	ldd	r22, Y+25	; 0x19
    1632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e4       	ldi	r19, 0x40	; 64
    163c:	4c e1       	ldi	r20, 0x1C	; 28
    163e:	55 e4       	ldi	r21, 0x45	; 69
    1640:	32 d4       	rcall	.+2148   	; 0x1ea6 <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8d 8b       	std	Y+21, r24	; 0x15
    1648:	9e 8b       	std	Y+22, r25	; 0x16
    164a:	af 8b       	std	Y+23, r26	; 0x17
    164c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164e:	6d 89       	ldd	r22, Y+21	; 0x15
    1650:	7e 89       	ldd	r23, Y+22	; 0x16
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	d0 d2       	rcall	.+1440   	; 0x1c00 <__cmpsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <system_init+0x68>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	3b c0       	rjmp	.+118    	; 0x16e4 <system_init+0xde>
	else if (__tmp > 65535)
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0f d4       	rcall	.+2078   	; 0x1e9e <__gesf2>
    1680:	18 16       	cp	r1, r24
    1682:	3c f5       	brge	.+78     	; 0x16d2 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	69 8d       	ldd	r22, Y+25	; 0x19
    1686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	08 d4       	rcall	.+2064   	; 0x1ea6 <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	21 d3       	rcall	.+1602   	; 0x1ce2 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <system_init+0xc2>
    16aa:	8a ef       	ldi	r24, 0xFA	; 250
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
    16b2:	89 89       	ldd	r24, Y+17	; 0x11
    16b4:	9a 89       	ldd	r25, Y+18	; 0x12
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <system_init+0xb0>
    16ba:	9a 8b       	std	Y+18, r25	; 0x12
    16bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ca:	9c 89       	ldd	r25, Y+20	; 0x14
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <system_init+0xa4>
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	03 d3       	rcall	.+1542   	; 0x1ce2 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	98 8b       	std	Y+16, r25	; 0x10
    16ea:	8f 87       	std	Y+15, r24	; 0x0f
    16ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ee:	98 89       	ldd	r25, Y+16	; 0x10
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <system_init+0xea>
    16f4:	98 8b       	std	Y+16, r25	; 0x10
    16f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,true);							//jumper
    16f8:	88 e0       	ldi	r24, 0x08	; 8
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	72 dc       	rcall	.-1820   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,true);						//prekidac za stranu
    1700:	8e e0       	ldi	r24, 0x0E	; 14
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	6e dc       	rcall	.-1828   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	6a dc       	rcall	.-1836   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,true);							//camera 1 position
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	66 dc       	rcall	.-1844   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,true);							//camera 2 position
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	62 dc       	rcall	.-1852   	; 0xfe4 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,true);						//sensor front left
    1720:	89 e0       	ldi	r24, 0x09	; 9
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	5e dc       	rcall	.-1860   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,true);						//sensor front right
    1728:	8a e0       	ldi	r24, 0x0A	; 10
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	5a dc       	rcall	.-1868   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,true);						//sensor back left
    1730:	8c e0       	ldi	r24, 0x0C	; 12
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	56 dc       	rcall	.-1876   	; 0xfe4 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,true);						//sensor back right
    1738:	8d e0       	ldi	r24, 0x0D	; 13
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	52 dc       	rcall	.-1884   	; 0xfe4 <gpio_register_pin>
	
	
	DDRG = 0xff;
    1740:	e3 e3       	ldi	r30, 0x33	; 51
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 83       	st	Z, r24
	//PORTG = 0xff;
	servo_init(50);
    1748:	82 e3       	ldi	r24, 0x32	; 50
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 0a 01 	call	0x214	; 0x214 <servo_init>
	timer_init(1000);
    1750:	88 ee       	ldi	r24, 0xE8	; 232
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	9c de       	rcall	.-712    	; 0x148e <timer_init>
	CAN_Init(1);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	fa db       	rcall	.-2060   	; 0xf4e <CAN_Init>

	actuators_setup();
    175a:	cd d8       	rcall	.-3686   	; 0x8f6 <actuators_setup>
    175c:	6c c0       	rjmp	.+216    	; 0x1836 <system_init+0x230>
	
	while(gpio_read_pin(JUMPER_PIN))
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e2       	ldi	r26, 0x20	; 32
    1764:	b1 e4       	ldi	r27, 0x41	; 65
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	9c 87       	std	Y+12, r25	; 0x0c
    176a:	ad 87       	std	Y+13, r26	; 0x0d
    176c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1770:	7c 85       	ldd	r23, Y+12	; 0x0c
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e4       	ldi	r19, 0x40	; 64
    177a:	4c e1       	ldi	r20, 0x1C	; 28
    177c:	55 e4       	ldi	r21, 0x45	; 69
    177e:	93 d3       	rcall	.+1830   	; 0x1ea6 <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8f 83       	std	Y+7, r24	; 0x07
    1786:	98 87       	std	Y+8, r25	; 0x08
    1788:	a9 87       	std	Y+9, r26	; 0x09
    178a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	31 d2       	rcall	.+1122   	; 0x1c00 <__cmpsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <system_init+0x1a6>
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	3b c0       	rjmp	.+118    	; 0x1822 <system_init+0x21c>
	else if (__tmp > 65535)
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	70 d3       	rcall	.+1760   	; 0x1e9e <__gesf2>
    17be:	18 16       	cp	r1, r24
    17c0:	3c f5       	brge	.+78     	; 0x1810 <system_init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	69 d3       	rcall	.+1746   	; 0x1ea6 <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	82 d2       	rcall	.+1284   	; 0x1ce2 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <system_init+0x200>
    17e8:	8a ef       	ldi	r24, 0xFA	; 250
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <system_init+0x1ee>
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	69 f7       	brne	.-38     	; 0x17e8 <system_init+0x1e2>
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <system_init+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	64 d2       	rcall	.+1224   	; 0x1ce2 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <system_init+0x228>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	88 e0       	ldi	r24, 0x08	; 8
    1838:	42 dd       	rcall	.-1404   	; 0x12be <gpio_read_pin>
    183a:	88 23       	and	r24, r24
    183c:	09 f0       	breq	.+2      	; 0x1840 <system_init+0x23a>
    183e:	8f cf       	rjmp	.-226    	; 0x175e <system_init+0x158>
		_delay_ms(10);
	//PORTG = 0x00;
	system_reset_system_time();
    1840:	c9 de       	rcall	.-622    	; 0x15d4 <system_reset_system_time>
	system_set_match_started();
    1842:	d7 de       	rcall	.-594    	; 0x15f2 <system_set_match_started>
}
    1844:	6c 96       	adiw	r28, 0x1c	; 28
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <checkFrontSensors>:
signed char checkFrontSensors(signed char sensor)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <checkFrontSensors+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == FRONT_LEFT_SIDE)
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	39 f4       	brne	.+14     	; 0x1876 <checkFrontSensors+0x20>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE)
    1868:	89 e0       	ldi	r24, 0x09	; 9
    186a:	29 dd       	rcall	.-1454   	; 0x12be <gpio_read_pin>
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	d9 f4       	brne	.+54     	; 0x18a6 <checkFrontSensors+0x50>
		{
			return DETECTED;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	19 c0       	rjmp	.+50     	; 0x18a8 <checkFrontSensors+0x52>
		}
	}
	else if(sensor == FRONT_RIGHT_SIDE)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	39 f4       	brne	.+14     	; 0x188a <checkFrontSensors+0x34>
	{
		if(gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	1f dd       	rcall	.-1474   	; 0x12be <gpio_read_pin>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	89 f4       	brne	.+34     	; 0x18a6 <checkFrontSensors+0x50>
		{
			return DETECTED;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <checkFrontSensors+0x52>
		}
	}
	else if(sensor == FRONT_ALL)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	59 f4       	brne	.+22     	; 0x18a6 <checkFrontSensors+0x50>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE || gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    1890:	89 e0       	ldi	r24, 0x09	; 9
    1892:	15 dd       	rcall	.-1494   	; 0x12be <gpio_read_pin>
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	21 f0       	breq	.+8      	; 0x18a0 <checkFrontSensors+0x4a>
    1898:	8a e0       	ldi	r24, 0x0A	; 10
    189a:	11 dd       	rcall	.-1502   	; 0x12be <gpio_read_pin>
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	19 f4       	brne	.+6      	; 0x18a6 <checkFrontSensors+0x50>
		{
			return DETECTED;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <checkFrontSensors+0x52>
		}
	}
	return NOT_DETECTED;
    18a6:	1a 82       	std	Y+2, r1	; 0x02
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <checkRearSensors>:
signed char checkRearSensors(signed char sensor)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <checkRearSensors+0x6>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == BACK_LEFT_SIDE)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	39 f4       	brne	.+14     	; 0x18d4 <checkRearSensors+0x20>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE)//mozda 0
    18c6:	8c e0       	ldi	r24, 0x0C	; 12
    18c8:	fa dc       	rcall	.-1548   	; 0x12be <gpio_read_pin>
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <checkRearSensors+0x50>
		{
			return DETECTED;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	19 c0       	rjmp	.+50     	; 0x1906 <checkRearSensors+0x52>
		}
	}
	else if(sensor == BACK_RIGHT_SIDE)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	8e 3f       	cpi	r24, 0xFE	; 254
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <checkRearSensors+0x34>
	{
		if(gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    18da:	8d e0       	ldi	r24, 0x0D	; 13
    18dc:	f0 dc       	rcall	.-1568   	; 0x12be <gpio_read_pin>
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	89 f4       	brne	.+34     	; 0x1904 <checkRearSensors+0x50>
		{
			return DETECTED;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <checkRearSensors+0x52>
		}
	}
	else if(sensor == BACK_ALL)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	8d 3f       	cpi	r24, 0xFD	; 253
    18ec:	59 f4       	brne	.+22     	; 0x1904 <checkRearSensors+0x50>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE || gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    18ee:	8c e0       	ldi	r24, 0x0C	; 12
    18f0:	e6 dc       	rcall	.-1588   	; 0x12be <gpio_read_pin>
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	21 f0       	breq	.+8      	; 0x18fe <checkRearSensors+0x4a>
    18f6:	8d e0       	ldi	r24, 0x0D	; 13
    18f8:	e2 dc       	rcall	.-1596   	; 0x12be <gpio_read_pin>
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	19 f4       	brne	.+6      	; 0x1904 <checkRearSensors+0x50>
		{
			return DETECTED;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <checkRearSensors+0x52>
		}
	}
	return NOT_DETECTED;
    1904:	1a 82       	std	Y+2, r1	; 0x02
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <__vector_23>:
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	00 90 5b 00 	lds	r0, 0x005B
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	80 91 45 01 	lds	r24, 0x0145
    193a:	88 23       	and	r24, r24
    193c:	d9 f0       	breq	.+54     	; 0x1974 <__vector_23+0x62>
    193e:	80 91 45 01 	lds	r24, 0x0145
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	80 93 45 01 	sts	0x0145, r24
    1948:	a6 ec       	ldi	r26, 0xC6	; 198
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	80 91 46 01 	lds	r24, 0x0146
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	e3 5b       	subi	r30, 0xB3	; 179
    1958:	fe 4f       	sbci	r31, 0xFE	; 254
    195a:	80 81       	ld	r24, Z
    195c:	8c 93       	st	X, r24
    195e:	80 91 46 01 	lds	r24, 0x0146
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	80 93 46 01 	sts	0x0146, r24
    1968:	80 91 46 01 	lds	r24, 0x0146
    196c:	80 34       	cpi	r24, 0x40	; 64
    196e:	11 f4       	brne	.+4      	; 0x1974 <__vector_23+0x62>
    1970:	10 92 46 01 	sts	0x0146, r1
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	ff 91       	pop	r31
    197a:	ef 91       	pop	r30
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	0f 90       	pop	r0
    1986:	00 92 5b 00 	sts	0x005B, r0
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 90       	pop	r0
    1990:	1f 90       	pop	r1
    1992:	18 95       	reti

00001994 <__vector_21>:
    1994:	1f 92       	push	r1
    1996:	0f 92       	push	r0
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	0f 92       	push	r0
    199c:	00 90 5b 00 	lds	r0, 0x005B
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	2f 93       	push	r18
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	e0 ec       	ldi	r30, 0xC0	; 192
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	8c 71       	andi	r24, 0x1C	; 28
    19c8:	90 70       	andi	r25, 0x00	; 0
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	d9 f4       	brne	.+54     	; 0x1a04 <__vector_21+0x70>
    19ce:	80 91 47 01 	lds	r24, 0x0147
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	e6 ec       	ldi	r30, 0xC6	; 198
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	20 81       	ld	r18, Z
    19dc:	fc 01       	movw	r30, r24
    19de:	e3 57       	subi	r30, 0x73	; 115
    19e0:	fe 4f       	sbci	r31, 0xFE	; 254
    19e2:	20 83       	st	Z, r18
    19e4:	80 91 47 01 	lds	r24, 0x0147
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	80 93 47 01 	sts	0x0147, r24
    19ee:	80 91 47 01 	lds	r24, 0x0147
    19f2:	80 34       	cpi	r24, 0x40	; 64
    19f4:	11 f4       	brne	.+4      	; 0x19fa <__vector_21+0x66>
    19f6:	10 92 47 01 	sts	0x0147, r1
    19fa:	80 91 48 01 	lds	r24, 0x0148
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 48 01 	sts	0x0148, r24
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	2f 91       	pop	r18
    1a14:	0f 90       	pop	r0
    1a16:	00 92 5b 00 	sts	0x005B, r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti

00001a24 <__vector_34>:
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	00 90 5b 00 	lds	r0, 0x005B
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	80 91 49 01 	lds	r24, 0x0149
    1a4c:	88 23       	and	r24, r24
    1a4e:	d9 f0       	breq	.+54     	; 0x1a86 <__vector_34+0x62>
    1a50:	80 91 49 01 	lds	r24, 0x0149
    1a54:	81 50       	subi	r24, 0x01	; 1
    1a56:	80 93 49 01 	sts	0x0149, r24
    1a5a:	ae ec       	ldi	r26, 0xCE	; 206
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	80 91 4a 01 	lds	r24, 0x014A
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	fc 01       	movw	r30, r24
    1a68:	e3 53       	subi	r30, 0x33	; 51
    1a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8c 93       	st	X, r24
    1a70:	80 91 4a 01 	lds	r24, 0x014A
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 93 4a 01 	sts	0x014A, r24
    1a7a:	80 91 4a 01 	lds	r24, 0x014A
    1a7e:	80 34       	cpi	r24, 0x40	; 64
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <__vector_34+0x62>
    1a82:	10 92 4a 01 	sts	0x014A, r1
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	0f 90       	pop	r0
    1a98:	00 92 5b 00 	sts	0x005B, r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_32>:
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	00 90 5b 00 	lds	r0, 0x005B
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	e8 ec       	ldi	r30, 0xC8	; 200
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	8c 71       	andi	r24, 0x1C	; 28
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	d9 f4       	brne	.+54     	; 0x1b16 <__vector_32+0x70>
    1ae0:	80 91 4b 01 	lds	r24, 0x014B
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	ee ec       	ldi	r30, 0xCE	; 206
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	20 81       	ld	r18, Z
    1aee:	fc 01       	movw	r30, r24
    1af0:	e3 5f       	subi	r30, 0xF3	; 243
    1af2:	fd 4f       	sbci	r31, 0xFD	; 253
    1af4:	20 83       	st	Z, r18
    1af6:	80 91 4b 01 	lds	r24, 0x014B
    1afa:	8f 5f       	subi	r24, 0xFF	; 255
    1afc:	80 93 4b 01 	sts	0x014B, r24
    1b00:	80 91 4b 01 	lds	r24, 0x014B
    1b04:	80 34       	cpi	r24, 0x40	; 64
    1b06:	11 f4       	brne	.+4      	; 0x1b0c <__vector_32+0x66>
    1b08:	10 92 4b 01 	sts	0x014B, r1
    1b0c:	80 91 4c 01 	lds	r24, 0x014C
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	80 93 4c 01 	sts	0x014C, r24
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	ff 91       	pop	r31
    1b1e:	ef 91       	pop	r30
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	00 92 5b 00 	sts	0x005B, r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__subsf3>:
    1b36:	50 58       	subi	r21, 0x80	; 128

00001b38 <__addsf3>:
    1b38:	bb 27       	eor	r27, r27
    1b3a:	aa 27       	eor	r26, r26
    1b3c:	0e d0       	rcall	.+28     	; 0x1b5a <__addsf3x>
    1b3e:	75 c1       	rjmp	.+746    	; 0x1e2a <__fp_round>
    1b40:	66 d1       	rcall	.+716    	; 0x1e0e <__fp_pscA>
    1b42:	30 f0       	brcs	.+12     	; 0x1b50 <__addsf3+0x18>
    1b44:	6b d1       	rcall	.+726    	; 0x1e1c <__fp_pscB>
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <__addsf3+0x18>
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <__addsf3+0x1e>
    1b4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <__addsf3+0x1a>
    1b4e:	1e f4       	brtc	.+6      	; 0x1b56 <__addsf3+0x1e>
    1b50:	5b c1       	rjmp	.+694    	; 0x1e08 <__fp_nan>
    1b52:	0e f4       	brtc	.+2      	; 0x1b56 <__addsf3+0x1e>
    1b54:	e0 95       	com	r30
    1b56:	e7 fb       	bst	r30, 7
    1b58:	51 c1       	rjmp	.+674    	; 0x1dfc <__fp_inf>

00001b5a <__addsf3x>:
    1b5a:	e9 2f       	mov	r30, r25
    1b5c:	77 d1       	rcall	.+750    	; 0x1e4c <__fp_split3>
    1b5e:	80 f3       	brcs	.-32     	; 0x1b40 <__addsf3+0x8>
    1b60:	ba 17       	cp	r27, r26
    1b62:	62 07       	cpc	r22, r18
    1b64:	73 07       	cpc	r23, r19
    1b66:	84 07       	cpc	r24, r20
    1b68:	95 07       	cpc	r25, r21
    1b6a:	18 f0       	brcs	.+6      	; 0x1b72 <__addsf3x+0x18>
    1b6c:	71 f4       	brne	.+28     	; 0x1b8a <__addsf3x+0x30>
    1b6e:	9e f5       	brtc	.+102    	; 0x1bd6 <__addsf3x+0x7c>
    1b70:	8f c1       	rjmp	.+798    	; 0x1e90 <__fp_zero>
    1b72:	0e f4       	brtc	.+2      	; 0x1b76 <__addsf3x+0x1c>
    1b74:	e0 95       	com	r30
    1b76:	0b 2e       	mov	r0, r27
    1b78:	ba 2f       	mov	r27, r26
    1b7a:	a0 2d       	mov	r26, r0
    1b7c:	0b 01       	movw	r0, r22
    1b7e:	b9 01       	movw	r22, r18
    1b80:	90 01       	movw	r18, r0
    1b82:	0c 01       	movw	r0, r24
    1b84:	ca 01       	movw	r24, r20
    1b86:	a0 01       	movw	r20, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	ff 27       	eor	r31, r31
    1b8c:	59 1b       	sub	r21, r25
    1b8e:	99 f0       	breq	.+38     	; 0x1bb6 <__addsf3x+0x5c>
    1b90:	59 3f       	cpi	r21, 0xF9	; 249
    1b92:	50 f4       	brcc	.+20     	; 0x1ba8 <__addsf3x+0x4e>
    1b94:	50 3e       	cpi	r21, 0xE0	; 224
    1b96:	68 f1       	brcs	.+90     	; 0x1bf2 <__addsf3x+0x98>
    1b98:	1a 16       	cp	r1, r26
    1b9a:	f0 40       	sbci	r31, 0x00	; 0
    1b9c:	a2 2f       	mov	r26, r18
    1b9e:	23 2f       	mov	r18, r19
    1ba0:	34 2f       	mov	r19, r20
    1ba2:	44 27       	eor	r20, r20
    1ba4:	58 5f       	subi	r21, 0xF8	; 248
    1ba6:	f3 cf       	rjmp	.-26     	; 0x1b8e <__addsf3x+0x34>
    1ba8:	46 95       	lsr	r20
    1baa:	37 95       	ror	r19
    1bac:	27 95       	ror	r18
    1bae:	a7 95       	ror	r26
    1bb0:	f0 40       	sbci	r31, 0x00	; 0
    1bb2:	53 95       	inc	r21
    1bb4:	c9 f7       	brne	.-14     	; 0x1ba8 <__addsf3x+0x4e>
    1bb6:	7e f4       	brtc	.+30     	; 0x1bd6 <__addsf3x+0x7c>
    1bb8:	1f 16       	cp	r1, r31
    1bba:	ba 0b       	sbc	r27, r26
    1bbc:	62 0b       	sbc	r22, r18
    1bbe:	73 0b       	sbc	r23, r19
    1bc0:	84 0b       	sbc	r24, r20
    1bc2:	ba f0       	brmi	.+46     	; 0x1bf2 <__addsf3x+0x98>
    1bc4:	91 50       	subi	r25, 0x01	; 1
    1bc6:	a1 f0       	breq	.+40     	; 0x1bf0 <__addsf3x+0x96>
    1bc8:	ff 0f       	add	r31, r31
    1bca:	bb 1f       	adc	r27, r27
    1bcc:	66 1f       	adc	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	c2 f7       	brpl	.-16     	; 0x1bc4 <__addsf3x+0x6a>
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <__addsf3x+0x98>
    1bd6:	ba 0f       	add	r27, r26
    1bd8:	62 1f       	adc	r22, r18
    1bda:	73 1f       	adc	r23, r19
    1bdc:	84 1f       	adc	r24, r20
    1bde:	48 f4       	brcc	.+18     	; 0x1bf2 <__addsf3x+0x98>
    1be0:	87 95       	ror	r24
    1be2:	77 95       	ror	r23
    1be4:	67 95       	ror	r22
    1be6:	b7 95       	ror	r27
    1be8:	f7 95       	ror	r31
    1bea:	9e 3f       	cpi	r25, 0xFE	; 254
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <__addsf3x+0x96>
    1bee:	b3 cf       	rjmp	.-154    	; 0x1b56 <__addsf3+0x1e>
    1bf0:	93 95       	inc	r25
    1bf2:	88 0f       	add	r24, r24
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <__addsf3x+0x9e>
    1bf6:	99 27       	eor	r25, r25
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	97 95       	ror	r25
    1bfc:	87 95       	ror	r24
    1bfe:	08 95       	ret

00001c00 <__cmpsf2>:
    1c00:	d9 d0       	rcall	.+434    	; 0x1db4 <__fp_cmp>
    1c02:	08 f4       	brcc	.+2      	; 0x1c06 <__cmpsf2+0x6>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	08 95       	ret

00001c08 <__divsf3>:
    1c08:	0c d0       	rcall	.+24     	; 0x1c22 <__divsf3x>
    1c0a:	0f c1       	rjmp	.+542    	; 0x1e2a <__fp_round>
    1c0c:	07 d1       	rcall	.+526    	; 0x1e1c <__fp_pscB>
    1c0e:	40 f0       	brcs	.+16     	; 0x1c20 <__divsf3+0x18>
    1c10:	fe d0       	rcall	.+508    	; 0x1e0e <__fp_pscA>
    1c12:	30 f0       	brcs	.+12     	; 0x1c20 <__divsf3+0x18>
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <__divsf3+0x16>
    1c16:	5f 3f       	cpi	r21, 0xFF	; 255
    1c18:	19 f0       	breq	.+6      	; 0x1c20 <__divsf3+0x18>
    1c1a:	f0 c0       	rjmp	.+480    	; 0x1dfc <__fp_inf>
    1c1c:	51 11       	cpse	r21, r1
    1c1e:	39 c1       	rjmp	.+626    	; 0x1e92 <__fp_szero>
    1c20:	f3 c0       	rjmp	.+486    	; 0x1e08 <__fp_nan>

00001c22 <__divsf3x>:
    1c22:	14 d1       	rcall	.+552    	; 0x1e4c <__fp_split3>
    1c24:	98 f3       	brcs	.-26     	; 0x1c0c <__divsf3+0x4>

00001c26 <__divsf3_pse>:
    1c26:	99 23       	and	r25, r25
    1c28:	c9 f3       	breq	.-14     	; 0x1c1c <__divsf3+0x14>
    1c2a:	55 23       	and	r21, r21
    1c2c:	b1 f3       	breq	.-20     	; 0x1c1a <__divsf3+0x12>
    1c2e:	95 1b       	sub	r25, r21
    1c30:	55 0b       	sbc	r21, r21
    1c32:	bb 27       	eor	r27, r27
    1c34:	aa 27       	eor	r26, r26
    1c36:	62 17       	cp	r22, r18
    1c38:	73 07       	cpc	r23, r19
    1c3a:	84 07       	cpc	r24, r20
    1c3c:	38 f0       	brcs	.+14     	; 0x1c4c <__divsf3_pse+0x26>
    1c3e:	9f 5f       	subi	r25, 0xFF	; 255
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	44 1f       	adc	r20, r20
    1c48:	aa 1f       	adc	r26, r26
    1c4a:	a9 f3       	breq	.-22     	; 0x1c36 <__divsf3_pse+0x10>
    1c4c:	33 d0       	rcall	.+102    	; 0x1cb4 <__divsf3_pse+0x8e>
    1c4e:	0e 2e       	mov	r0, r30
    1c50:	3a f0       	brmi	.+14     	; 0x1c60 <__divsf3_pse+0x3a>
    1c52:	e0 e8       	ldi	r30, 0x80	; 128
    1c54:	30 d0       	rcall	.+96     	; 0x1cb6 <__divsf3_pse+0x90>
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	50 40       	sbci	r21, 0x00	; 0
    1c5a:	e6 95       	lsr	r30
    1c5c:	00 1c       	adc	r0, r0
    1c5e:	ca f7       	brpl	.-14     	; 0x1c52 <__divsf3_pse+0x2c>
    1c60:	29 d0       	rcall	.+82     	; 0x1cb4 <__divsf3_pse+0x8e>
    1c62:	fe 2f       	mov	r31, r30
    1c64:	27 d0       	rcall	.+78     	; 0x1cb4 <__divsf3_pse+0x8e>
    1c66:	66 0f       	add	r22, r22
    1c68:	77 1f       	adc	r23, r23
    1c6a:	88 1f       	adc	r24, r24
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	26 17       	cp	r18, r22
    1c70:	37 07       	cpc	r19, r23
    1c72:	48 07       	cpc	r20, r24
    1c74:	ab 07       	cpc	r26, r27
    1c76:	b0 e8       	ldi	r27, 0x80	; 128
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <__divsf3_pse+0x56>
    1c7a:	bb 0b       	sbc	r27, r27
    1c7c:	80 2d       	mov	r24, r0
    1c7e:	bf 01       	movw	r22, r30
    1c80:	ff 27       	eor	r31, r31
    1c82:	93 58       	subi	r25, 0x83	; 131
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	2a f0       	brmi	.+10     	; 0x1c92 <__divsf3_pse+0x6c>
    1c88:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	68 f0       	brcs	.+26     	; 0x1ca8 <__divsf3_pse+0x82>
    1c8e:	b6 c0       	rjmp	.+364    	; 0x1dfc <__fp_inf>
    1c90:	00 c1       	rjmp	.+512    	; 0x1e92 <__fp_szero>
    1c92:	5f 3f       	cpi	r21, 0xFF	; 255
    1c94:	ec f3       	brlt	.-6      	; 0x1c90 <__divsf3_pse+0x6a>
    1c96:	98 3e       	cpi	r25, 0xE8	; 232
    1c98:	dc f3       	brlt	.-10     	; 0x1c90 <__divsf3_pse+0x6a>
    1c9a:	86 95       	lsr	r24
    1c9c:	77 95       	ror	r23
    1c9e:	67 95       	ror	r22
    1ca0:	b7 95       	ror	r27
    1ca2:	f7 95       	ror	r31
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	c9 f7       	brne	.-14     	; 0x1c9a <__divsf3_pse+0x74>
    1ca8:	88 0f       	add	r24, r24
    1caa:	91 1d       	adc	r25, r1
    1cac:	96 95       	lsr	r25
    1cae:	87 95       	ror	r24
    1cb0:	97 f9       	bld	r25, 7
    1cb2:	08 95       	ret
    1cb4:	e1 e0       	ldi	r30, 0x01	; 1
    1cb6:	66 0f       	add	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	62 17       	cp	r22, r18
    1cc0:	73 07       	cpc	r23, r19
    1cc2:	84 07       	cpc	r24, r20
    1cc4:	ba 07       	cpc	r27, r26
    1cc6:	20 f0       	brcs	.+8      	; 0x1cd0 <__divsf3_pse+0xaa>
    1cc8:	62 1b       	sub	r22, r18
    1cca:	73 0b       	sbc	r23, r19
    1ccc:	84 0b       	sbc	r24, r20
    1cce:	ba 0b       	sbc	r27, r26
    1cd0:	ee 1f       	adc	r30, r30
    1cd2:	88 f7       	brcc	.-30     	; 0x1cb6 <__divsf3_pse+0x90>
    1cd4:	e0 95       	com	r30
    1cd6:	08 95       	ret

00001cd8 <__fixsfsi>:
    1cd8:	04 d0       	rcall	.+8      	; 0x1ce2 <__fixunssfsi>
    1cda:	68 94       	set
    1cdc:	b1 11       	cpse	r27, r1
    1cde:	d9 c0       	rjmp	.+434    	; 0x1e92 <__fp_szero>
    1ce0:	08 95       	ret

00001ce2 <__fixunssfsi>:
    1ce2:	bc d0       	rcall	.+376    	; 0x1e5c <__fp_splitA>
    1ce4:	88 f0       	brcs	.+34     	; 0x1d08 <__fixunssfsi+0x26>
    1ce6:	9f 57       	subi	r25, 0x7F	; 127
    1ce8:	90 f0       	brcs	.+36     	; 0x1d0e <__fixunssfsi+0x2c>
    1cea:	b9 2f       	mov	r27, r25
    1cec:	99 27       	eor	r25, r25
    1cee:	b7 51       	subi	r27, 0x17	; 23
    1cf0:	a0 f0       	brcs	.+40     	; 0x1d1a <__fixunssfsi+0x38>
    1cf2:	d1 f0       	breq	.+52     	; 0x1d28 <__fixunssfsi+0x46>
    1cf4:	66 0f       	add	r22, r22
    1cf6:	77 1f       	adc	r23, r23
    1cf8:	88 1f       	adc	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	1a f0       	brmi	.+6      	; 0x1d04 <__fixunssfsi+0x22>
    1cfe:	ba 95       	dec	r27
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__fixunssfsi+0x12>
    1d02:	12 c0       	rjmp	.+36     	; 0x1d28 <__fixunssfsi+0x46>
    1d04:	b1 30       	cpi	r27, 0x01	; 1
    1d06:	81 f0       	breq	.+32     	; 0x1d28 <__fixunssfsi+0x46>
    1d08:	c3 d0       	rcall	.+390    	; 0x1e90 <__fp_zero>
    1d0a:	b1 e0       	ldi	r27, 0x01	; 1
    1d0c:	08 95       	ret
    1d0e:	c0 c0       	rjmp	.+384    	; 0x1e90 <__fp_zero>
    1d10:	67 2f       	mov	r22, r23
    1d12:	78 2f       	mov	r23, r24
    1d14:	88 27       	eor	r24, r24
    1d16:	b8 5f       	subi	r27, 0xF8	; 248
    1d18:	39 f0       	breq	.+14     	; 0x1d28 <__fixunssfsi+0x46>
    1d1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d1c:	cc f3       	brlt	.-14     	; 0x1d10 <__fixunssfsi+0x2e>
    1d1e:	86 95       	lsr	r24
    1d20:	77 95       	ror	r23
    1d22:	67 95       	ror	r22
    1d24:	b3 95       	inc	r27
    1d26:	d9 f7       	brne	.-10     	; 0x1d1e <__fixunssfsi+0x3c>
    1d28:	3e f4       	brtc	.+14     	; 0x1d38 <__fixunssfsi+0x56>
    1d2a:	90 95       	com	r25
    1d2c:	80 95       	com	r24
    1d2e:	70 95       	com	r23
    1d30:	61 95       	neg	r22
    1d32:	7f 4f       	sbci	r23, 0xFF	; 255
    1d34:	8f 4f       	sbci	r24, 0xFF	; 255
    1d36:	9f 4f       	sbci	r25, 0xFF	; 255
    1d38:	08 95       	ret

00001d3a <__floatunsisf>:
    1d3a:	e8 94       	clt
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <__floatsisf+0x12>

00001d3e <__floatsisf>:
    1d3e:	97 fb       	bst	r25, 7
    1d40:	3e f4       	brtc	.+14     	; 0x1d50 <__floatsisf+0x12>
    1d42:	90 95       	com	r25
    1d44:	80 95       	com	r24
    1d46:	70 95       	com	r23
    1d48:	61 95       	neg	r22
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	99 23       	and	r25, r25
    1d52:	a9 f0       	breq	.+42     	; 0x1d7e <__floatsisf+0x40>
    1d54:	f9 2f       	mov	r31, r25
    1d56:	96 e9       	ldi	r25, 0x96	; 150
    1d58:	bb 27       	eor	r27, r27
    1d5a:	93 95       	inc	r25
    1d5c:	f6 95       	lsr	r31
    1d5e:	87 95       	ror	r24
    1d60:	77 95       	ror	r23
    1d62:	67 95       	ror	r22
    1d64:	b7 95       	ror	r27
    1d66:	f1 11       	cpse	r31, r1
    1d68:	f8 cf       	rjmp	.-16     	; 0x1d5a <__floatsisf+0x1c>
    1d6a:	fa f4       	brpl	.+62     	; 0x1daa <__floatsisf+0x6c>
    1d6c:	bb 0f       	add	r27, r27
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <__floatsisf+0x36>
    1d70:	60 ff       	sbrs	r22, 0
    1d72:	1b c0       	rjmp	.+54     	; 0x1daa <__floatsisf+0x6c>
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <__floatsisf+0x6c>
    1d7e:	88 23       	and	r24, r24
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <__floatsisf+0x48>
    1d82:	96 e9       	ldi	r25, 0x96	; 150
    1d84:	11 c0       	rjmp	.+34     	; 0x1da8 <__floatsisf+0x6a>
    1d86:	77 23       	and	r23, r23
    1d88:	21 f0       	breq	.+8      	; 0x1d92 <__floatsisf+0x54>
    1d8a:	9e e8       	ldi	r25, 0x8E	; 142
    1d8c:	87 2f       	mov	r24, r23
    1d8e:	76 2f       	mov	r23, r22
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <__floatsisf+0x5e>
    1d92:	66 23       	and	r22, r22
    1d94:	71 f0       	breq	.+28     	; 0x1db2 <__floatsisf+0x74>
    1d96:	96 e8       	ldi	r25, 0x86	; 134
    1d98:	86 2f       	mov	r24, r22
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	2a f0       	brmi	.+10     	; 0x1daa <__floatsisf+0x6c>
    1da0:	9a 95       	dec	r25
    1da2:	66 0f       	add	r22, r22
    1da4:	77 1f       	adc	r23, r23
    1da6:	88 1f       	adc	r24, r24
    1da8:	da f7       	brpl	.-10     	; 0x1da0 <__floatsisf+0x62>
    1daa:	88 0f       	add	r24, r24
    1dac:	96 95       	lsr	r25
    1dae:	87 95       	ror	r24
    1db0:	97 f9       	bld	r25, 7
    1db2:	08 95       	ret

00001db4 <__fp_cmp>:
    1db4:	99 0f       	add	r25, r25
    1db6:	00 08       	sbc	r0, r0
    1db8:	55 0f       	add	r21, r21
    1dba:	aa 0b       	sbc	r26, r26
    1dbc:	e0 e8       	ldi	r30, 0x80	; 128
    1dbe:	fe ef       	ldi	r31, 0xFE	; 254
    1dc0:	16 16       	cp	r1, r22
    1dc2:	17 06       	cpc	r1, r23
    1dc4:	e8 07       	cpc	r30, r24
    1dc6:	f9 07       	cpc	r31, r25
    1dc8:	c0 f0       	brcs	.+48     	; 0x1dfa <__fp_cmp+0x46>
    1dca:	12 16       	cp	r1, r18
    1dcc:	13 06       	cpc	r1, r19
    1dce:	e4 07       	cpc	r30, r20
    1dd0:	f5 07       	cpc	r31, r21
    1dd2:	98 f0       	brcs	.+38     	; 0x1dfa <__fp_cmp+0x46>
    1dd4:	62 1b       	sub	r22, r18
    1dd6:	73 0b       	sbc	r23, r19
    1dd8:	84 0b       	sbc	r24, r20
    1dda:	95 0b       	sbc	r25, r21
    1ddc:	39 f4       	brne	.+14     	; 0x1dec <__fp_cmp+0x38>
    1dde:	0a 26       	eor	r0, r26
    1de0:	61 f0       	breq	.+24     	; 0x1dfa <__fp_cmp+0x46>
    1de2:	23 2b       	or	r18, r19
    1de4:	24 2b       	or	r18, r20
    1de6:	25 2b       	or	r18, r21
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <__fp_cmp+0x3e>
    1dea:	08 95       	ret
    1dec:	0a 26       	eor	r0, r26
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__fp_cmp+0x3e>
    1df0:	a1 40       	sbci	r26, 0x01	; 1
    1df2:	a6 95       	lsr	r26
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	81 1d       	adc	r24, r1
    1df8:	81 1d       	adc	r24, r1
    1dfa:	08 95       	ret

00001dfc <__fp_inf>:
    1dfc:	97 f9       	bld	r25, 7
    1dfe:	9f 67       	ori	r25, 0x7F	; 127
    1e00:	80 e8       	ldi	r24, 0x80	; 128
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	08 95       	ret

00001e08 <__fp_nan>:
    1e08:	9f ef       	ldi	r25, 0xFF	; 255
    1e0a:	80 ec       	ldi	r24, 0xC0	; 192
    1e0c:	08 95       	ret

00001e0e <__fp_pscA>:
    1e0e:	00 24       	eor	r0, r0
    1e10:	0a 94       	dec	r0
    1e12:	16 16       	cp	r1, r22
    1e14:	17 06       	cpc	r1, r23
    1e16:	18 06       	cpc	r1, r24
    1e18:	09 06       	cpc	r0, r25
    1e1a:	08 95       	ret

00001e1c <__fp_pscB>:
    1e1c:	00 24       	eor	r0, r0
    1e1e:	0a 94       	dec	r0
    1e20:	12 16       	cp	r1, r18
    1e22:	13 06       	cpc	r1, r19
    1e24:	14 06       	cpc	r1, r20
    1e26:	05 06       	cpc	r0, r21
    1e28:	08 95       	ret

00001e2a <__fp_round>:
    1e2a:	09 2e       	mov	r0, r25
    1e2c:	03 94       	inc	r0
    1e2e:	00 0c       	add	r0, r0
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <__fp_round+0xc>
    1e32:	88 23       	and	r24, r24
    1e34:	52 f0       	brmi	.+20     	; 0x1e4a <__fp_round+0x20>
    1e36:	bb 0f       	add	r27, r27
    1e38:	40 f4       	brcc	.+16     	; 0x1e4a <__fp_round+0x20>
    1e3a:	bf 2b       	or	r27, r31
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <__fp_round+0x18>
    1e3e:	60 ff       	sbrs	r22, 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <__fp_round+0x20>
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	8f 4f       	sbci	r24, 0xFF	; 255
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	08 95       	ret

00001e4c <__fp_split3>:
    1e4c:	57 fd       	sbrc	r21, 7
    1e4e:	90 58       	subi	r25, 0x80	; 128
    1e50:	44 0f       	add	r20, r20
    1e52:	55 1f       	adc	r21, r21
    1e54:	59 f0       	breq	.+22     	; 0x1e6c <__fp_splitA+0x10>
    1e56:	5f 3f       	cpi	r21, 0xFF	; 255
    1e58:	71 f0       	breq	.+28     	; 0x1e76 <__fp_splitA+0x1a>
    1e5a:	47 95       	ror	r20

00001e5c <__fp_splitA>:
    1e5c:	88 0f       	add	r24, r24
    1e5e:	97 fb       	bst	r25, 7
    1e60:	99 1f       	adc	r25, r25
    1e62:	61 f0       	breq	.+24     	; 0x1e7c <__fp_splitA+0x20>
    1e64:	9f 3f       	cpi	r25, 0xFF	; 255
    1e66:	79 f0       	breq	.+30     	; 0x1e86 <__fp_splitA+0x2a>
    1e68:	87 95       	ror	r24
    1e6a:	08 95       	ret
    1e6c:	12 16       	cp	r1, r18
    1e6e:	13 06       	cpc	r1, r19
    1e70:	14 06       	cpc	r1, r20
    1e72:	55 1f       	adc	r21, r21
    1e74:	f2 cf       	rjmp	.-28     	; 0x1e5a <__fp_split3+0xe>
    1e76:	46 95       	lsr	r20
    1e78:	f1 df       	rcall	.-30     	; 0x1e5c <__fp_splitA>
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <__fp_splitA+0x30>
    1e7c:	16 16       	cp	r1, r22
    1e7e:	17 06       	cpc	r1, r23
    1e80:	18 06       	cpc	r1, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	f1 cf       	rjmp	.-30     	; 0x1e68 <__fp_splitA+0xc>
    1e86:	86 95       	lsr	r24
    1e88:	71 05       	cpc	r23, r1
    1e8a:	61 05       	cpc	r22, r1
    1e8c:	08 94       	sec
    1e8e:	08 95       	ret

00001e90 <__fp_zero>:
    1e90:	e8 94       	clt

00001e92 <__fp_szero>:
    1e92:	bb 27       	eor	r27, r27
    1e94:	66 27       	eor	r22, r22
    1e96:	77 27       	eor	r23, r23
    1e98:	cb 01       	movw	r24, r22
    1e9a:	97 f9       	bld	r25, 7
    1e9c:	08 95       	ret

00001e9e <__gesf2>:
    1e9e:	8a df       	rcall	.-236    	; 0x1db4 <__fp_cmp>
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <__gesf2+0x6>
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	08 95       	ret

00001ea6 <__mulsf3>:
    1ea6:	0b d0       	rcall	.+22     	; 0x1ebe <__mulsf3x>
    1ea8:	c0 cf       	rjmp	.-128    	; 0x1e2a <__fp_round>
    1eaa:	b1 df       	rcall	.-158    	; 0x1e0e <__fp_pscA>
    1eac:	28 f0       	brcs	.+10     	; 0x1eb8 <__mulsf3+0x12>
    1eae:	b6 df       	rcall	.-148    	; 0x1e1c <__fp_pscB>
    1eb0:	18 f0       	brcs	.+6      	; 0x1eb8 <__mulsf3+0x12>
    1eb2:	95 23       	and	r25, r21
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <__mulsf3+0x12>
    1eb6:	a2 cf       	rjmp	.-188    	; 0x1dfc <__fp_inf>
    1eb8:	a7 cf       	rjmp	.-178    	; 0x1e08 <__fp_nan>
    1eba:	11 24       	eor	r1, r1
    1ebc:	ea cf       	rjmp	.-44     	; 0x1e92 <__fp_szero>

00001ebe <__mulsf3x>:
    1ebe:	c6 df       	rcall	.-116    	; 0x1e4c <__fp_split3>
    1ec0:	a0 f3       	brcs	.-24     	; 0x1eaa <__mulsf3+0x4>

00001ec2 <__mulsf3_pse>:
    1ec2:	95 9f       	mul	r25, r21
    1ec4:	d1 f3       	breq	.-12     	; 0x1eba <__mulsf3+0x14>
    1ec6:	95 0f       	add	r25, r21
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	55 1f       	adc	r21, r21
    1ecc:	62 9f       	mul	r22, r18
    1ece:	f0 01       	movw	r30, r0
    1ed0:	72 9f       	mul	r23, r18
    1ed2:	bb 27       	eor	r27, r27
    1ed4:	f0 0d       	add	r31, r0
    1ed6:	b1 1d       	adc	r27, r1
    1ed8:	63 9f       	mul	r22, r19
    1eda:	aa 27       	eor	r26, r26
    1edc:	f0 0d       	add	r31, r0
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	64 9f       	mul	r22, r20
    1ee4:	66 27       	eor	r22, r22
    1ee6:	b0 0d       	add	r27, r0
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	66 1f       	adc	r22, r22
    1eec:	82 9f       	mul	r24, r18
    1eee:	22 27       	eor	r18, r18
    1ef0:	b0 0d       	add	r27, r0
    1ef2:	a1 1d       	adc	r26, r1
    1ef4:	62 1f       	adc	r22, r18
    1ef6:	73 9f       	mul	r23, r19
    1ef8:	b0 0d       	add	r27, r0
    1efa:	a1 1d       	adc	r26, r1
    1efc:	62 1f       	adc	r22, r18
    1efe:	83 9f       	mul	r24, r19
    1f00:	a0 0d       	add	r26, r0
    1f02:	61 1d       	adc	r22, r1
    1f04:	22 1f       	adc	r18, r18
    1f06:	74 9f       	mul	r23, r20
    1f08:	33 27       	eor	r19, r19
    1f0a:	a0 0d       	add	r26, r0
    1f0c:	61 1d       	adc	r22, r1
    1f0e:	23 1f       	adc	r18, r19
    1f10:	84 9f       	mul	r24, r20
    1f12:	60 0d       	add	r22, r0
    1f14:	21 1d       	adc	r18, r1
    1f16:	82 2f       	mov	r24, r18
    1f18:	76 2f       	mov	r23, r22
    1f1a:	6a 2f       	mov	r22, r26
    1f1c:	11 24       	eor	r1, r1
    1f1e:	9f 57       	subi	r25, 0x7F	; 127
    1f20:	50 40       	sbci	r21, 0x00	; 0
    1f22:	8a f0       	brmi	.+34     	; 0x1f46 <__mulsf3_pse+0x84>
    1f24:	e1 f0       	breq	.+56     	; 0x1f5e <__mulsf3_pse+0x9c>
    1f26:	88 23       	and	r24, r24
    1f28:	4a f0       	brmi	.+18     	; 0x1f3c <__mulsf3_pse+0x7a>
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	bb 1f       	adc	r27, r27
    1f30:	66 1f       	adc	r22, r22
    1f32:	77 1f       	adc	r23, r23
    1f34:	88 1f       	adc	r24, r24
    1f36:	91 50       	subi	r25, 0x01	; 1
    1f38:	50 40       	sbci	r21, 0x00	; 0
    1f3a:	a9 f7       	brne	.-22     	; 0x1f26 <__mulsf3_pse+0x64>
    1f3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f3e:	51 05       	cpc	r21, r1
    1f40:	70 f0       	brcs	.+28     	; 0x1f5e <__mulsf3_pse+0x9c>
    1f42:	5c cf       	rjmp	.-328    	; 0x1dfc <__fp_inf>
    1f44:	a6 cf       	rjmp	.-180    	; 0x1e92 <__fp_szero>
    1f46:	5f 3f       	cpi	r21, 0xFF	; 255
    1f48:	ec f3       	brlt	.-6      	; 0x1f44 <__mulsf3_pse+0x82>
    1f4a:	98 3e       	cpi	r25, 0xE8	; 232
    1f4c:	dc f3       	brlt	.-10     	; 0x1f44 <__mulsf3_pse+0x82>
    1f4e:	86 95       	lsr	r24
    1f50:	77 95       	ror	r23
    1f52:	67 95       	ror	r22
    1f54:	b7 95       	ror	r27
    1f56:	f7 95       	ror	r31
    1f58:	e7 95       	ror	r30
    1f5a:	9f 5f       	subi	r25, 0xFF	; 255
    1f5c:	c1 f7       	brne	.-16     	; 0x1f4e <__mulsf3_pse+0x8c>
    1f5e:	fe 2b       	or	r31, r30
    1f60:	88 0f       	add	r24, r24
    1f62:	91 1d       	adc	r25, r1
    1f64:	96 95       	lsr	r25
    1f66:	87 95       	ror	r24
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret

00001f6c <calloc>:
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	68 9f       	mul	r22, r24
    1f76:	80 01       	movw	r16, r0
    1f78:	69 9f       	mul	r22, r25
    1f7a:	10 0d       	add	r17, r0
    1f7c:	78 9f       	mul	r23, r24
    1f7e:	10 0d       	add	r17, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	c8 01       	movw	r24, r16
    1f84:	0d d0       	rcall	.+26     	; 0x1fa0 <malloc>
    1f86:	ec 01       	movw	r28, r24
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	21 f0       	breq	.+8      	; 0x1f94 <calloc+0x28>
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	a8 01       	movw	r20, r16
    1f92:	0b d1       	rcall	.+534    	; 0x21aa <memset>
    1f94:	ce 01       	movw	r24, r28
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <malloc>:
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	91 05       	cpc	r25, r1
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <malloc+0x10>
    1fac:	62 e0       	ldi	r22, 0x02	; 2
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	a0 91 4f 02 	lds	r26, 0x024F
    1fb4:	b0 91 50 02 	lds	r27, 0x0250
    1fb8:	ed 01       	movw	r28, r26
    1fba:	e0 e0       	ldi	r30, 0x00	; 0
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	21 c0       	rjmp	.+66     	; 0x2006 <malloc+0x66>
    1fc4:	88 81       	ld	r24, Y
    1fc6:	99 81       	ldd	r25, Y+1	; 0x01
    1fc8:	86 17       	cp	r24, r22
    1fca:	97 07       	cpc	r25, r23
    1fcc:	69 f4       	brne	.+26     	; 0x1fe8 <malloc+0x48>
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	30 97       	sbiw	r30, 0x00	; 0
    1fd4:	19 f0       	breq	.+6      	; 0x1fdc <malloc+0x3c>
    1fd6:	93 83       	std	Z+3, r25	; 0x03
    1fd8:	82 83       	std	Z+2, r24	; 0x02
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <malloc+0x44>
    1fdc:	90 93 50 02 	sts	0x0250, r25
    1fe0:	80 93 4f 02 	sts	0x024F, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	34 c0       	rjmp	.+104    	; 0x2050 <malloc+0xb0>
    1fe8:	68 17       	cp	r22, r24
    1fea:	79 07       	cpc	r23, r25
    1fec:	38 f4       	brcc	.+14     	; 0x1ffc <malloc+0x5c>
    1fee:	41 15       	cp	r20, r1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <malloc+0x5a>
    1ff4:	84 17       	cp	r24, r20
    1ff6:	95 07       	cpc	r25, r21
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <malloc+0x5c>
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	9b 81       	ldd	r25, Y+3	; 0x03
    2002:	9c 01       	movw	r18, r24
    2004:	e9 01       	movw	r28, r18
    2006:	20 97       	sbiw	r28, 0x00	; 0
    2008:	e9 f6       	brne	.-70     	; 0x1fc4 <malloc+0x24>
    200a:	41 15       	cp	r20, r1
    200c:	51 05       	cpc	r21, r1
    200e:	a9 f1       	breq	.+106    	; 0x207a <malloc+0xda>
    2010:	ca 01       	movw	r24, r20
    2012:	86 1b       	sub	r24, r22
    2014:	97 0b       	sbc	r25, r23
    2016:	04 97       	sbiw	r24, 0x04	; 4
    2018:	08 f4       	brcc	.+2      	; 0x201c <malloc+0x7c>
    201a:	ba 01       	movw	r22, r20
    201c:	e0 e0       	ldi	r30, 0x00	; 0
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	2a c0       	rjmp	.+84     	; 0x2076 <malloc+0xd6>
    2022:	8d 91       	ld	r24, X+
    2024:	9c 91       	ld	r25, X
    2026:	11 97       	sbiw	r26, 0x01	; 1
    2028:	84 17       	cp	r24, r20
    202a:	95 07       	cpc	r25, r21
    202c:	f9 f4       	brne	.+62     	; 0x206c <malloc+0xcc>
    202e:	64 17       	cp	r22, r20
    2030:	75 07       	cpc	r23, r21
    2032:	81 f4       	brne	.+32     	; 0x2054 <malloc+0xb4>
    2034:	12 96       	adiw	r26, 0x02	; 2
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	13 97       	sbiw	r26, 0x03	; 3
    203c:	30 97       	sbiw	r30, 0x00	; 0
    203e:	19 f0       	breq	.+6      	; 0x2046 <malloc+0xa6>
    2040:	93 83       	std	Z+3, r25	; 0x03
    2042:	82 83       	std	Z+2, r24	; 0x02
    2044:	04 c0       	rjmp	.+8      	; 0x204e <malloc+0xae>
    2046:	90 93 50 02 	sts	0x0250, r25
    204a:	80 93 4f 02 	sts	0x024F, r24
    204e:	fd 01       	movw	r30, r26
    2050:	32 96       	adiw	r30, 0x02	; 2
    2052:	4f c0       	rjmp	.+158    	; 0x20f2 <malloc+0x152>
    2054:	ca 01       	movw	r24, r20
    2056:	86 1b       	sub	r24, r22
    2058:	97 0b       	sbc	r25, r23
    205a:	fd 01       	movw	r30, r26
    205c:	e8 0f       	add	r30, r24
    205e:	f9 1f       	adc	r31, r25
    2060:	61 93       	st	Z+, r22
    2062:	71 93       	st	Z+, r23
    2064:	02 97       	sbiw	r24, 0x02	; 2
    2066:	8d 93       	st	X+, r24
    2068:	9c 93       	st	X, r25
    206a:	43 c0       	rjmp	.+134    	; 0x20f2 <malloc+0x152>
    206c:	fd 01       	movw	r30, r26
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	9c 01       	movw	r18, r24
    2074:	d9 01       	movw	r26, r18
    2076:	10 97       	sbiw	r26, 0x00	; 0
    2078:	a1 f6       	brne	.-88     	; 0x2022 <malloc+0x82>
    207a:	80 91 4d 02 	lds	r24, 0x024D
    207e:	90 91 4e 02 	lds	r25, 0x024E
    2082:	89 2b       	or	r24, r25
    2084:	41 f4       	brne	.+16     	; 0x2096 <malloc+0xf6>
    2086:	80 91 02 01 	lds	r24, 0x0102
    208a:	90 91 03 01 	lds	r25, 0x0103
    208e:	90 93 4e 02 	sts	0x024E, r25
    2092:	80 93 4d 02 	sts	0x024D, r24
    2096:	40 91 04 01 	lds	r20, 0x0104
    209a:	50 91 05 01 	lds	r21, 0x0105
    209e:	41 15       	cp	r20, r1
    20a0:	51 05       	cpc	r21, r1
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <malloc+0x114>
    20a4:	4d b7       	in	r20, 0x3d	; 61
    20a6:	5e b7       	in	r21, 0x3e	; 62
    20a8:	80 91 00 01 	lds	r24, 0x0100
    20ac:	90 91 01 01 	lds	r25, 0x0101
    20b0:	48 1b       	sub	r20, r24
    20b2:	59 0b       	sbc	r21, r25
    20b4:	20 91 4d 02 	lds	r18, 0x024D
    20b8:	30 91 4e 02 	lds	r19, 0x024E
    20bc:	24 17       	cp	r18, r20
    20be:	35 07       	cpc	r19, r21
    20c0:	b0 f4       	brcc	.+44     	; 0x20ee <malloc+0x14e>
    20c2:	ca 01       	movw	r24, r20
    20c4:	82 1b       	sub	r24, r18
    20c6:	93 0b       	sbc	r25, r19
    20c8:	86 17       	cp	r24, r22
    20ca:	97 07       	cpc	r25, r23
    20cc:	80 f0       	brcs	.+32     	; 0x20ee <malloc+0x14e>
    20ce:	ab 01       	movw	r20, r22
    20d0:	4e 5f       	subi	r20, 0xFE	; 254
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	84 17       	cp	r24, r20
    20d6:	95 07       	cpc	r25, r21
    20d8:	50 f0       	brcs	.+20     	; 0x20ee <malloc+0x14e>
    20da:	42 0f       	add	r20, r18
    20dc:	53 1f       	adc	r21, r19
    20de:	50 93 4e 02 	sts	0x024E, r21
    20e2:	40 93 4d 02 	sts	0x024D, r20
    20e6:	f9 01       	movw	r30, r18
    20e8:	61 93       	st	Z+, r22
    20ea:	71 93       	st	Z+, r23
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <malloc+0x152>
    20ee:	e0 e0       	ldi	r30, 0x00	; 0
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	cf 01       	movw	r24, r30
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <free>:
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	09 f4       	brne	.+2      	; 0x2104 <free+0xa>
    2102:	50 c0       	rjmp	.+160    	; 0x21a4 <free+0xaa>
    2104:	ec 01       	movw	r28, r24
    2106:	22 97       	sbiw	r28, 0x02	; 2
    2108:	1b 82       	std	Y+3, r1	; 0x03
    210a:	1a 82       	std	Y+2, r1	; 0x02
    210c:	a0 91 4f 02 	lds	r26, 0x024F
    2110:	b0 91 50 02 	lds	r27, 0x0250
    2114:	10 97       	sbiw	r26, 0x00	; 0
    2116:	09 f1       	breq	.+66     	; 0x215a <free+0x60>
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	ac 17       	cp	r26, r28
    211e:	bd 07       	cpc	r27, r29
    2120:	08 f1       	brcs	.+66     	; 0x2164 <free+0x6a>
    2122:	bb 83       	std	Y+3, r27	; 0x03
    2124:	aa 83       	std	Y+2, r26	; 0x02
    2126:	fe 01       	movw	r30, r28
    2128:	21 91       	ld	r18, Z+
    212a:	31 91       	ld	r19, Z+
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	ae 17       	cp	r26, r30
    2132:	bf 07       	cpc	r27, r31
    2134:	79 f4       	brne	.+30     	; 0x2154 <free+0x5a>
    2136:	8d 91       	ld	r24, X+
    2138:	9c 91       	ld	r25, X
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	28 0f       	add	r18, r24
    213e:	39 1f       	adc	r19, r25
    2140:	2e 5f       	subi	r18, 0xFE	; 254
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	39 83       	std	Y+1, r19	; 0x01
    2146:	28 83       	st	Y, r18
    2148:	12 96       	adiw	r26, 0x02	; 2
    214a:	8d 91       	ld	r24, X+
    214c:	9c 91       	ld	r25, X
    214e:	13 97       	sbiw	r26, 0x03	; 3
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
    2154:	41 15       	cp	r20, r1
    2156:	51 05       	cpc	r21, r1
    2158:	71 f4       	brne	.+28     	; 0x2176 <free+0x7c>
    215a:	d0 93 50 02 	sts	0x0250, r29
    215e:	c0 93 4f 02 	sts	0x024F, r28
    2162:	20 c0       	rjmp	.+64     	; 0x21a4 <free+0xaa>
    2164:	12 96       	adiw	r26, 0x02	; 2
    2166:	8d 91       	ld	r24, X+
    2168:	9c 91       	ld	r25, X
    216a:	13 97       	sbiw	r26, 0x03	; 3
    216c:	ad 01       	movw	r20, r26
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	11 f0       	breq	.+4      	; 0x2176 <free+0x7c>
    2172:	dc 01       	movw	r26, r24
    2174:	d3 cf       	rjmp	.-90     	; 0x211c <free+0x22>
    2176:	fa 01       	movw	r30, r20
    2178:	d3 83       	std	Z+3, r29	; 0x03
    217a:	c2 83       	std	Z+2, r28	; 0x02
    217c:	21 91       	ld	r18, Z+
    217e:	31 91       	ld	r19, Z+
    2180:	e2 0f       	add	r30, r18
    2182:	f3 1f       	adc	r31, r19
    2184:	ce 17       	cp	r28, r30
    2186:	df 07       	cpc	r29, r31
    2188:	69 f4       	brne	.+26     	; 0x21a4 <free+0xaa>
    218a:	88 81       	ld	r24, Y
    218c:	99 81       	ldd	r25, Y+1	; 0x01
    218e:	28 0f       	add	r18, r24
    2190:	39 1f       	adc	r19, r25
    2192:	2e 5f       	subi	r18, 0xFE	; 254
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	fa 01       	movw	r30, r20
    2198:	31 83       	std	Z+1, r19	; 0x01
    219a:	20 83       	st	Z, r18
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	93 83       	std	Z+3, r25	; 0x03
    21a2:	82 83       	std	Z+2, r24	; 0x02
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <memset>:
    21aa:	dc 01       	movw	r26, r24
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <memset+0x6>
    21ae:	6d 93       	st	X+, r22
    21b0:	41 50       	subi	r20, 0x01	; 1
    21b2:	50 40       	sbci	r21, 0x00	; 0
    21b4:	e0 f7       	brcc	.-8      	; 0x21ae <memset+0x4>
    21b6:	08 95       	ret

000021b8 <_exit>:
    21b8:	f8 94       	cli

000021ba <__stop_program>:
    21ba:	ff cf       	rjmp	.-2      	; 0x21ba <__stop_program>
