
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00003adc  00003b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  008001d8  008001d8  00003c48  2**0
                  ALLOC
  3 .debug_aranges 000002f8  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c5  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002197  00000000  00000000  00004705  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a50  00000000  00000000  0000689c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002535  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  00009824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a46  00000000  00000000  00009cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002b0  00000000  00000000  0000a73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
uint32_t system_get_system_time(void)
{
	return sys_time;
}
uint8_t system_get_match_started(void)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c4       	rjmp	.+2410   	; 0x9b4 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec ed       	ldi	r30, 0xDC	; 220
      a8:	fa e3       	ldi	r31, 0x3A	; 58
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a8 3d       	cpi	r26, 0xD8	; 216
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a8 ed       	ldi	r26, 0xD8	; 216
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 32       	cpi	r26, 0x2A	; 42
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62

	system_init();
      da:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <system_init>
	//test read pin 15
	//test camera
	
	while(1)
	{
		if(gpio_read_pin(15) == 1)
      de:	8f e0       	ldi	r24, 0x0F	; 15
      e0:	0e 94 45 09 	call	0x128a	; 0x128a <gpio_read_pin>
      e4:	81 30       	cpi	r24, 0x01	; 1
      e6:	19 f4       	brne	.+6      	; 0xee <main+0x1c>
		{
			greenside();
      e8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <greenside>
      ec:	f8 cf       	rjmp	.-16     	; 0xde <main+0xc>
		}
		else
		{	
			purpleside();
      ee:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <purpleside>
      f2:	f5 cf       	rjmp	.-22     	; 0xde <main+0xc>

000000f4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	df 93       	push	r29
      fa:	cf 93       	push	r28
      fc:	00 d0       	rcall	.+0      	; 0xfe <servo_init+0xa>
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     106:	ad e2       	ldi	r26, 0x2D	; 45
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ed e2       	ldi	r30, 0x2D	; 45
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	88 63       	ori	r24, 0x38	; 56
     112:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     114:	e4 e9       	ldi	r30, 0x94	; 148
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	11 82       	std	Z+1, r1	; 0x01
     11a:	10 82       	st	Z, r1
	
	OCR3A = 0;
     11c:	e8 e9       	ldi	r30, 0x98	; 152
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	11 82       	std	Z+1, r1	; 0x01
     122:	10 82       	st	Z, r1
	OCR3B = 0;
     124:	ea e9       	ldi	r30, 0x9A	; 154
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
	OCR3C = 0;
     12c:	ec e9       	ldi	r30, 0x9C	; 156
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	11 82       	std	Z+1, r1	; 0x01
     132:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     134:	e0 e9       	ldi	r30, 0x90	; 144
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	8e eb       	ldi	r24, 0xBE	; 190
     13a:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     13c:	e1 e9       	ldi	r30, 0x91	; 145
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	8a e1       	ldi	r24, 0x1A	; 26
     142:	80 83       	st	Z, r24
	
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << COM1B1) | (1 << COM1C1) | (1 << COM1C0) | (1 << WGM11);
     144:	e0 e8       	ldi	r30, 0x80	; 128
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	8e ea       	ldi	r24, 0xAE	; 174
     14a:	80 83       	st	Z, r24
	TCCR1B = (1 << CS11) | (1 << WGM12) | (1 << WGM13);
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	8a e1       	ldi	r24, 0x1A	; 26
     152:	80 83       	st	Z, r24
	
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     154:	06 e9       	ldi	r16, 0x96	; 150
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	9a 81       	ldd	r25, Y+2	; 0x02
     15c:	cc 01       	movw	r24, r24
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	0e 94 2d 1b 	call	0x365a	; 0x365a <__floatunsisf>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	51 e4       	ldi	r21, 0x41	; 65
     17a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	9c 01       	movw	r18, r24
     184:	ad 01       	movw	r20, r26
     186:	60 e8       	ldi	r22, 0x80	; 128
     188:	76 e9       	ldi	r23, 0x96	; 150
     18a:	88 e1       	ldi	r24, 0x18	; 24
     18c:	9b e4       	ldi	r25, 0x4B	; 75
     18e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     192:	dc 01       	movw	r26, r24
     194:	cb 01       	movw	r24, r22
     196:	bc 01       	movw	r22, r24
     198:	cd 01       	movw	r24, r26
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	5f e3       	ldi	r21, 0x3F	; 63
     1a2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	bc 01       	movw	r22, r24
     1ac:	cd 01       	movw	r24, r26
     1ae:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	f8 01       	movw	r30, r16
     1b8:	91 83       	std	Z+1, r25	; 0x01
     1ba:	80 83       	st	Z, r24
	ICR1   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     1bc:	06 e8       	ldi	r16, 0x86	; 134
     1be:	10 e0       	ldi	r17, 0x00	; 0
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	cc 01       	movw	r24, r24
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	bc 01       	movw	r22, r24
     1cc:	cd 01       	movw	r24, r26
     1ce:	0e 94 2d 1b 	call	0x365a	; 0x365a <__floatunsisf>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	51 e4       	ldi	r21, 0x41	; 65
     1e2:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	9c 01       	movw	r18, r24
     1ec:	ad 01       	movw	r20, r26
     1ee:	60 e8       	ldi	r22, 0x80	; 128
     1f0:	76 e9       	ldi	r23, 0x96	; 150
     1f2:	88 e1       	ldi	r24, 0x18	; 24
     1f4:	9b e4       	ldi	r25, 0x4B	; 75
     1f6:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     1fa:	dc 01       	movw	r26, r24
     1fc:	cb 01       	movw	r24, r22
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	5f e3       	ldi	r21, 0x3F	; 63
     20a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	bc 01       	movw	r22, r24
     214:	cd 01       	movw	r24, r26
     216:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	f8 01       	movw	r30, r16
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
}//END OF servo_init
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	08 95       	ret

00000232 <servo_set_duty_cycle_umbrella>:


static void servo_set_duty_cycle_umbrella(int16_t value)
{
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	00 d0       	rcall	.+0      	; 0x240 <servo_set_duty_cycle_umbrella+0xe>
     240:	00 d0       	rcall	.+0      	; 0x242 <servo_set_duty_cycle_umbrella+0x10>
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
     246:	9c 83       	std	Y+4, r25	; 0x04
     248:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     24a:	e6 e9       	ldi	r30, 0x96	; 150
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	91 81       	ldd	r25, Z+1	; 0x01
     252:	cc 01       	movw	r24, r24
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	0e 94 2d 1b 	call	0x365a	; 0x365a <__floatunsisf>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	bc 01       	movw	r22, r24
     266:	cd 01       	movw	r24, r26
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	4f e7       	ldi	r20, 0x7F	; 127
     26e:	53 e4       	ldi	r21, 0x43	; 67
     270:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	7c 01       	movw	r14, r24
     27a:	8d 01       	movw	r16, r26
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	9c 81       	ldd	r25, Y+4	; 0x04
     280:	aa 27       	eor	r26, r26
     282:	97 fd       	sbrc	r25, 7
     284:	a0 95       	com	r26
     286:	ba 2f       	mov	r27, r26
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	0e 94 2f 1b 	call	0x365e	; 0x365e <__floatsisf>
     290:	9b 01       	movw	r18, r22
     292:	ac 01       	movw	r20, r24
     294:	c8 01       	movw	r24, r16
     296:	b7 01       	movw	r22, r14
     298:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	bc 01       	movw	r22, r24
     2a2:	cd 01       	movw	r24, r26
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	5f e3       	ldi	r21, 0x3F	; 63
     2ac:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     2c4:	e9 e9       	ldi	r30, 0x99	; 153
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	89 2f       	mov	r24, r25
     2ce:	99 27       	eor	r25, r25
     2d0:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     2d2:	e8 e9       	ldi	r30, 0x98	; 152
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	80 83       	st	Z, r24
}
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	cf 91       	pop	r28
     2e4:	df 91       	pop	r29
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	08 95       	ret

000002f0 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <servo_set_duty_cycle_door+0xe>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <servo_set_duty_cycle_door+0x10>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9c 83       	std	Y+4, r25	; 0x04
     306:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     308:	e6 e9       	ldi	r30, 0x96	; 150
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	cc 01       	movw	r24, r24
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 2d 1b 	call	0x365a	; 0x365a <__floatunsisf>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	4f e7       	ldi	r20, 0x7F	; 127
     32c:	53 e4       	ldi	r21, 0x43	; 67
     32e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	7c 01       	movw	r14, r24
     338:	8d 01       	movw	r16, r26
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	0e 94 2f 1b 	call	0x365e	; 0x365e <__floatsisf>
     34e:	9b 01       	movw	r18, r22
     350:	ac 01       	movw	r20, r24
     352:	c8 01       	movw	r24, r16
     354:	b7 01       	movw	r22, r14
     356:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	5f e3       	ldi	r21, 0x3F	; 63
     36a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	9a 83       	std	Y+2, r25	; 0x02
     380:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     382:	eb e9       	ldi	r30, 0x9B	; 155
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	89 2f       	mov	r24, r25
     38c:	99 27       	eor	r25, r25
     38e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     390:	ea e9       	ldi	r30, 0x9A	; 154
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	80 83       	st	Z, r24
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <servo_set_umbrella_position>:
}

//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	0f 92       	push	r0
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	99 27       	eor	r25, r25
     3be:	87 fd       	sbrc	r24, 7
     3c0:	90 95       	com	r25
     3c2:	a9 2f       	mov	r26, r25
     3c4:	b9 2f       	mov	r27, r25
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 2f 1b 	call	0x365e	; 0x365e <__floatsisf>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	44 eb       	ldi	r20, 0xB4	; 180
     3dc:	52 e4       	ldi	r21, 0x42	; 66
     3de:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	26 e6       	ldi	r18, 0x66	; 102
     3ec:	36 e6       	ldi	r19, 0x66	; 102
     3ee:	46 e3       	ldi	r20, 0x36	; 54
     3f0:	51 ec       	ldi	r21, 0xC1	; 193
     3f2:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	bc 01       	movw	r22, r24
     3fc:	cd 01       	movw	r24, r26
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	4c e6       	ldi	r20, 0x6C	; 108
     404:	53 e4       	ldi	r21, 0x43	; 67
     406:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	9c 01       	movw	r18, r24
     410:	ad 01       	movw	r20, r26
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	93 e4       	ldi	r25, 0x43	; 67
     41a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__subsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	bc 01       	movw	r22, r24
     424:	cd 01       	movw	r24, r26
     426:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fixsfsi>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	01 df       	rcall	.-510    	; 0x232 <servo_set_duty_cycle_umbrella>
}
     430:	0f 90       	pop	r0
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	0f 92       	push	r0
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	99 27       	eor	r25, r25
     448:	87 fd       	sbrc	r24, 7
     44a:	90 95       	com	r25
     44c:	a9 2f       	mov	r26, r25
     44e:	b9 2f       	mov	r27, r25
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 2f 1b 	call	0x365e	; 0x365e <__floatsisf>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	bc 01       	movw	r22, r24
     45e:	cd 01       	movw	r24, r26
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	44 eb       	ldi	r20, 0xB4	; 180
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 94 1a 	call	0x3528	; 0x3528 <__divsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	bc 01       	movw	r22, r24
     472:	cd 01       	movw	r24, r26
     474:	26 e6       	ldi	r18, 0x66	; 102
     476:	36 e6       	ldi	r19, 0x66	; 102
     478:	46 e3       	ldi	r20, 0x36	; 54
     47a:	51 ec       	ldi	r21, 0xC1	; 193
     47c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	4c e6       	ldi	r20, 0x6C	; 108
     48e:	53 e4       	ldi	r21, 0x43	; 67
     490:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__addsf3>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9c 01       	movw	r18, r24
     49a:	ad 01       	movw	r20, r26
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	8f e7       	ldi	r24, 0x7F	; 127
     4a2:	93 e4       	ldi	r25, 0x43	; 67
     4a4:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__subsf3>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	bc 01       	movw	r22, r24
     4ae:	cd 01       	movw	r24, r26
     4b0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fixsfsi>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	1b df       	rcall	.-458    	; 0x2f0 <servo_set_duty_cycle_door>
}
     4ba:	0f 90       	pop	r0
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <servo_set_grabbers>:
void servo_set_right_grabber_position(int8_t angle)
{
	servo_set_duty_cycle_right_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
}
void servo_set_grabbers(int state)
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <servo_set_grabbers+0x6>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	9a 83       	std	Y+2, r25	; 0x02
     4ce:	89 83       	std	Y+1, r24	; 0x01
		/*
		servo_set_left_grabber_position();//find
		servo_set_right_grabber_position();//find
		*/
	}
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <actuators_umbrella>:
void actuators_umbrella(void)
{
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	6c 97       	sbiw	r28, 0x1c	; 28
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     4ee:	8a ea       	ldi	r24, 0xAA	; 170
     4f0:	5e df       	rcall	.-324    	; 0x3ae <servo_set_umbrella_position>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	aa e7       	ldi	r26, 0x7A	; 122
     4f8:	b4 e4       	ldi	r27, 0x44	; 68
     4fa:	89 8f       	std	Y+25, r24	; 0x19
     4fc:	9a 8f       	std	Y+26, r25	; 0x1a
     4fe:	ab 8f       	std	Y+27, r26	; 0x1b
     500:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     502:	69 8d       	ldd	r22, Y+25	; 0x19
     504:	7a 8d       	ldd	r23, Y+26	; 0x1a
     506:	8b 8d       	ldd	r24, Y+27	; 0x1b
     508:	9c 8d       	ldd	r25, Y+28	; 0x1c
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e4       	ldi	r19, 0x40	; 64
     50e:	4c e1       	ldi	r20, 0x1C	; 28
     510:	55 e4       	ldi	r21, 0x45	; 69
     512:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	8d 8b       	std	Y+21, r24	; 0x15
     51c:	9e 8b       	std	Y+22, r25	; 0x16
     51e:	af 8b       	std	Y+23, r26	; 0x17
     520:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     522:	6d 89       	ldd	r22, Y+21	; 0x15
     524:	7e 89       	ldd	r23, Y+22	; 0x16
     526:	8f 89       	ldd	r24, Y+23	; 0x17
     528:	98 8d       	ldd	r25, Y+24	; 0x18
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
     536:	88 23       	and	r24, r24
     538:	2c f4       	brge	.+10     	; 0x544 <actuators_umbrella+0x6a>
		__ticks = 1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9c 8b       	std	Y+20, r25	; 0x14
     540:	8b 8b       	std	Y+19, r24	; 0x13
     542:	3f c0       	rjmp	.+126    	; 0x5c2 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     544:	6d 89       	ldd	r22, Y+21	; 0x15
     546:	7e 89       	ldd	r23, Y+22	; 0x16
     548:	8f 89       	ldd	r24, Y+23	; 0x17
     54a:	98 8d       	ldd	r25, Y+24	; 0x18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	57 e4       	ldi	r21, 0x47	; 71
     554:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
     558:	18 16       	cp	r1, r24
     55a:	4c f5       	brge	.+82     	; 0x5ae <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     55c:	69 8d       	ldd	r22, Y+25	; 0x19
     55e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     560:	8b 8d       	ldd	r24, Y+27	; 0x1b
     562:	9c 8d       	ldd	r25, Y+28	; 0x1c
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	9c 8b       	std	Y+20, r25	; 0x14
     582:	8b 8b       	std	Y+19, r24	; 0x13
     584:	0f c0       	rjmp	.+30     	; 0x5a4 <actuators_umbrella+0xca>
     586:	8a ef       	ldi	r24, 0xFA	; 250
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9a 8b       	std	Y+18, r25	; 0x12
     58c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     58e:	89 89       	ldd	r24, Y+17	; 0x11
     590:	9a 89       	ldd	r25, Y+18	; 0x12
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <actuators_umbrella+0xb8>
     596:	9a 8b       	std	Y+18, r25	; 0x12
     598:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59a:	8b 89       	ldd	r24, Y+19	; 0x13
     59c:	9c 89       	ldd	r25, Y+20	; 0x14
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	9c 8b       	std	Y+20, r25	; 0x14
     5a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a4:	8b 89       	ldd	r24, Y+19	; 0x13
     5a6:	9c 89       	ldd	r25, Y+20	; 0x14
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	69 f7       	brne	.-38     	; 0x586 <actuators_umbrella+0xac>
     5ac:	14 c0       	rjmp	.+40     	; 0x5d6 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ae:	6d 89       	ldd	r22, Y+21	; 0x15
     5b0:	7e 89       	ldd	r23, Y+22	; 0x16
     5b2:	8f 89       	ldd	r24, Y+23	; 0x17
     5b4:	98 8d       	ldd	r25, Y+24	; 0x18
     5b6:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	9c 8b       	std	Y+20, r25	; 0x14
     5c0:	8b 8b       	std	Y+19, r24	; 0x13
     5c2:	8b 89       	ldd	r24, Y+19	; 0x13
     5c4:	9c 89       	ldd	r25, Y+20	; 0x14
     5c6:	98 8b       	std	Y+16, r25	; 0x10
     5c8:	8f 87       	std	Y+15, r24	; 0x0f
     5ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     5cc:	98 89       	ldd	r25, Y+16	; 0x10
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <actuators_umbrella+0xf4>
     5d2:	98 8b       	std	Y+16, r25	; 0x10
     5d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	2f df       	rcall	.-418    	; 0x438 <servo_set_door_position>
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	aa e7       	ldi	r26, 0x7A	; 122
     5e0:	b4 e4       	ldi	r27, 0x44	; 68
     5e2:	8b 87       	std	Y+11, r24	; 0x0b
     5e4:	9c 87       	std	Y+12, r25	; 0x0c
     5e6:	ad 87       	std	Y+13, r26	; 0x0d
     5e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5ea:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ec:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e4       	ldi	r19, 0x40	; 64
     5f6:	4c e1       	ldi	r20, 0x1C	; 28
     5f8:	55 e4       	ldi	r21, 0x45	; 69
     5fa:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	8f 83       	std	Y+7, r24	; 0x07
     604:	98 87       	std	Y+8, r25	; 0x08
     606:	a9 87       	std	Y+9, r26	; 0x09
     608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     60a:	6f 81       	ldd	r22, Y+7	; 0x07
     60c:	78 85       	ldd	r23, Y+8	; 0x08
     60e:	89 85       	ldd	r24, Y+9	; 0x09
     610:	9a 85       	ldd	r25, Y+10	; 0x0a
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	5f e3       	ldi	r21, 0x3F	; 63
     61a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
     61e:	88 23       	and	r24, r24
     620:	2c f4       	brge	.+10     	; 0x62c <actuators_umbrella+0x152>
		__ticks = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	9e 83       	std	Y+6, r25	; 0x06
     628:	8d 83       	std	Y+5, r24	; 0x05
     62a:	3f c0       	rjmp	.+126    	; 0x6aa <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     62c:	6f 81       	ldd	r22, Y+7	; 0x07
     62e:	78 85       	ldd	r23, Y+8	; 0x08
     630:	89 85       	ldd	r24, Y+9	; 0x09
     632:	9a 85       	ldd	r25, Y+10	; 0x0a
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	3f ef       	ldi	r19, 0xFF	; 255
     638:	4f e7       	ldi	r20, 0x7F	; 127
     63a:	57 e4       	ldi	r21, 0x47	; 71
     63c:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
     640:	18 16       	cp	r1, r24
     642:	4c f5       	brge	.+82     	; 0x696 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     644:	6b 85       	ldd	r22, Y+11	; 0x0b
     646:	7c 85       	ldd	r23, Y+12	; 0x0c
     648:	8d 85       	ldd	r24, Y+13	; 0x0d
     64a:	9e 85       	ldd	r25, Y+14	; 0x0e
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e2       	ldi	r20, 0x20	; 32
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	bc 01       	movw	r22, r24
     65e:	cd 01       	movw	r24, r26
     660:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	8d 83       	std	Y+5, r24	; 0x05
     66c:	0f c0       	rjmp	.+30     	; 0x68c <actuators_umbrella+0x1b2>
     66e:	8a ef       	ldi	r24, 0xFA	; 250
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9c 83       	std	Y+4, r25	; 0x04
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <actuators_umbrella+0x1a0>
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     682:	8d 81       	ldd	r24, Y+5	; 0x05
     684:	9e 81       	ldd	r25, Y+6	; 0x06
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	9e 83       	std	Y+6, r25	; 0x06
     68a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68c:	8d 81       	ldd	r24, Y+5	; 0x05
     68e:	9e 81       	ldd	r25, Y+6	; 0x06
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	69 f7       	brne	.-38     	; 0x66e <actuators_umbrella+0x194>
     694:	14 c0       	rjmp	.+40     	; 0x6be <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     696:	6f 81       	ldd	r22, Y+7	; 0x07
     698:	78 85       	ldd	r23, Y+8	; 0x08
     69a:	89 85       	ldd	r24, Y+9	; 0x09
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	9e 83       	std	Y+6, r25	; 0x06
     6a8:	8d 83       	std	Y+5, r24	; 0x05
     6aa:	8d 81       	ldd	r24, Y+5	; 0x05
     6ac:	9e 81       	ldd	r25, Y+6	; 0x06
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <actuators_umbrella+0x1dc>
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     6be:	6c 96       	adiw	r28, 0x1c	; 28
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <actuators_setup>:
void actuators_setup(void)
{
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	aa 97       	sbiw	r28, 0x2a	; 42
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     6e4:	8a e5       	ldi	r24, 0x5A	; 90
     6e6:	a8 de       	rcall	.-688    	; 0x438 <servo_set_door_position>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	aa e7       	ldi	r26, 0x7A	; 122
     6ee:	b4 e4       	ldi	r27, 0x44	; 68
     6f0:	8f a3       	std	Y+39, r24	; 0x27
     6f2:	98 a7       	std	Y+40, r25	; 0x28
     6f4:	a9 a7       	std	Y+41, r26	; 0x29
     6f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6f8:	6f a1       	ldd	r22, Y+39	; 0x27
     6fa:	78 a5       	ldd	r23, Y+40	; 0x28
     6fc:	89 a5       	ldd	r24, Y+41	; 0x29
     6fe:	9a a5       	ldd	r25, Y+42	; 0x2a
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e4       	ldi	r19, 0x40	; 64
     704:	4c e1       	ldi	r20, 0x1C	; 28
     706:	55 e4       	ldi	r21, 0x45	; 69
     708:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	8b a3       	std	Y+35, r24	; 0x23
     712:	9c a3       	std	Y+36, r25	; 0x24
     714:	ad a3       	std	Y+37, r26	; 0x25
     716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     718:	6b a1       	ldd	r22, Y+35	; 0x23
     71a:	7c a1       	ldd	r23, Y+36	; 0x24
     71c:	8d a1       	ldd	r24, Y+37	; 0x25
     71e:	9e a1       	ldd	r25, Y+38	; 0x26
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e8       	ldi	r20, 0x80	; 128
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
     72c:	88 23       	and	r24, r24
     72e:	2c f4       	brge	.+10     	; 0x73a <actuators_setup+0x6a>
		__ticks = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9a a3       	std	Y+34, r25	; 0x22
     736:	89 a3       	std	Y+33, r24	; 0x21
     738:	3f c0       	rjmp	.+126    	; 0x7b8 <actuators_setup+0xe8>
	else if (__tmp > 65535)
     73a:	6b a1       	ldd	r22, Y+35	; 0x23
     73c:	7c a1       	ldd	r23, Y+36	; 0x24
     73e:	8d a1       	ldd	r24, Y+37	; 0x25
     740:	9e a1       	ldd	r25, Y+38	; 0x26
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	3f ef       	ldi	r19, 0xFF	; 255
     746:	4f e7       	ldi	r20, 0x7F	; 127
     748:	57 e4       	ldi	r21, 0x47	; 71
     74a:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
     74e:	18 16       	cp	r1, r24
     750:	4c f5       	brge	.+82     	; 0x7a4 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     752:	6f a1       	ldd	r22, Y+39	; 0x27
     754:	78 a5       	ldd	r23, Y+40	; 0x28
     756:	89 a5       	ldd	r24, Y+41	; 0x29
     758:	9a a5       	ldd	r25, Y+42	; 0x2a
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e2       	ldi	r20, 0x20	; 32
     760:	51 e4       	ldi	r21, 0x41	; 65
     762:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     772:	dc 01       	movw	r26, r24
     774:	cb 01       	movw	r24, r22
     776:	9a a3       	std	Y+34, r25	; 0x22
     778:	89 a3       	std	Y+33, r24	; 0x21
     77a:	0f c0       	rjmp	.+30     	; 0x79a <actuators_setup+0xca>
     77c:	8a ef       	ldi	r24, 0xFA	; 250
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	98 a3       	std	Y+32, r25	; 0x20
     782:	8f 8f       	std	Y+31, r24	; 0x1f
     784:	8f 8d       	ldd	r24, Y+31	; 0x1f
     786:	98 a1       	ldd	r25, Y+32	; 0x20
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <actuators_setup+0xb8>
     78c:	98 a3       	std	Y+32, r25	; 0x20
     78e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     790:	89 a1       	ldd	r24, Y+33	; 0x21
     792:	9a a1       	ldd	r25, Y+34	; 0x22
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	9a a3       	std	Y+34, r25	; 0x22
     798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     79a:	89 a1       	ldd	r24, Y+33	; 0x21
     79c:	9a a1       	ldd	r25, Y+34	; 0x22
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	69 f7       	brne	.-38     	; 0x77c <actuators_setup+0xac>
     7a2:	14 c0       	rjmp	.+40     	; 0x7cc <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a4:	6b a1       	ldd	r22, Y+35	; 0x23
     7a6:	7c a1       	ldd	r23, Y+36	; 0x24
     7a8:	8d a1       	ldd	r24, Y+37	; 0x25
     7aa:	9e a1       	ldd	r25, Y+38	; 0x26
     7ac:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	9a a3       	std	Y+34, r25	; 0x22
     7b6:	89 a3       	std	Y+33, r24	; 0x21
     7b8:	89 a1       	ldd	r24, Y+33	; 0x21
     7ba:	9a a1       	ldd	r25, Y+34	; 0x22
     7bc:	9e 8f       	std	Y+30, r25	; 0x1e
     7be:	8d 8f       	std	Y+29, r24	; 0x1d
     7c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <actuators_setup+0xf4>
     7c8:	9e 8f       	std	Y+30, r25	; 0x1e
     7ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     7cc:	85 e5       	ldi	r24, 0x55	; 85
     7ce:	ef dd       	rcall	.-1058   	; 0x3ae <servo_set_umbrella_position>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	aa e7       	ldi	r26, 0x7A	; 122
     7d6:	b4 e4       	ldi	r27, 0x44	; 68
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	9a 8f       	std	Y+26, r25	; 0x1a
     7dc:	ab 8f       	std	Y+27, r26	; 0x1b
     7de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7e0:	69 8d       	ldd	r22, Y+25	; 0x19
     7e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e4       	ldi	r19, 0x40	; 64
     7ec:	4c e1       	ldi	r20, 0x1C	; 28
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	8d 8b       	std	Y+21, r24	; 0x15
     7fa:	9e 8b       	std	Y+22, r25	; 0x16
     7fc:	af 8b       	std	Y+23, r26	; 0x17
     7fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     800:	6d 89       	ldd	r22, Y+21	; 0x15
     802:	7e 89       	ldd	r23, Y+22	; 0x16
     804:	8f 89       	ldd	r24, Y+23	; 0x17
     806:	98 8d       	ldd	r25, Y+24	; 0x18
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	2c f4       	brge	.+10     	; 0x822 <actuators_setup+0x152>
		__ticks = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9c 8b       	std	Y+20, r25	; 0x14
     81e:	8b 8b       	std	Y+19, r24	; 0x13
     820:	3f c0       	rjmp	.+126    	; 0x8a0 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     822:	6d 89       	ldd	r22, Y+21	; 0x15
     824:	7e 89       	ldd	r23, Y+22	; 0x16
     826:	8f 89       	ldd	r24, Y+23	; 0x17
     828:	98 8d       	ldd	r25, Y+24	; 0x18
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	3f ef       	ldi	r19, 0xFF	; 255
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	57 e4       	ldi	r21, 0x47	; 71
     832:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	4c f5       	brge	.+82     	; 0x88c <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83a:	69 8d       	ldd	r22, Y+25	; 0x19
     83c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     83e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     840:	9c 8d       	ldd	r25, Y+28	; 0x1c
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e2       	ldi	r20, 0x20	; 32
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	9c 8b       	std	Y+20, r25	; 0x14
     860:	8b 8b       	std	Y+19, r24	; 0x13
     862:	0f c0       	rjmp	.+30     	; 0x882 <actuators_setup+0x1b2>
     864:	8a ef       	ldi	r24, 0xFA	; 250
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9a 8b       	std	Y+18, r25	; 0x12
     86a:	89 8b       	std	Y+17, r24	; 0x11
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	9a 89       	ldd	r25, Y+18	; 0x12
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <actuators_setup+0x1a0>
     874:	9a 8b       	std	Y+18, r25	; 0x12
     876:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     878:	8b 89       	ldd	r24, Y+19	; 0x13
     87a:	9c 89       	ldd	r25, Y+20	; 0x14
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	9c 8b       	std	Y+20, r25	; 0x14
     880:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     882:	8b 89       	ldd	r24, Y+19	; 0x13
     884:	9c 89       	ldd	r25, Y+20	; 0x14
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	69 f7       	brne	.-38     	; 0x864 <actuators_setup+0x194>
     88a:	14 c0       	rjmp	.+40     	; 0x8b4 <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	6d 89       	ldd	r22, Y+21	; 0x15
     88e:	7e 89       	ldd	r23, Y+22	; 0x16
     890:	8f 89       	ldd	r24, Y+23	; 0x17
     892:	98 8d       	ldd	r25, Y+24	; 0x18
     894:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	9c 8b       	std	Y+20, r25	; 0x14
     89e:	8b 8b       	std	Y+19, r24	; 0x13
     8a0:	8b 89       	ldd	r24, Y+19	; 0x13
     8a2:	9c 89       	ldd	r25, Y+20	; 0x14
     8a4:	98 8b       	std	Y+16, r25	; 0x10
     8a6:	8f 87       	std	Y+15, r24	; 0x0f
     8a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     8aa:	98 89       	ldd	r25, Y+16	; 0x10
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <actuators_setup+0x1dc>
     8b0:	98 8b       	std	Y+16, r25	; 0x10
     8b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	c0 dd       	rcall	.-1152   	; 0x438 <servo_set_door_position>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	aa ef       	ldi	r26, 0xFA	; 250
     8be:	b3 e4       	ldi	r27, 0x43	; 67
     8c0:	8b 87       	std	Y+11, r24	; 0x0b
     8c2:	9c 87       	std	Y+12, r25	; 0x0c
     8c4:	ad 87       	std	Y+13, r26	; 0x0d
     8c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     8ca:	7c 85       	ldd	r23, Y+12	; 0x0c
     8cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e4       	ldi	r19, 0x40	; 64
     8d4:	4c e1       	ldi	r20, 0x1C	; 28
     8d6:	55 e4       	ldi	r21, 0x45	; 69
     8d8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	8f 83       	std	Y+7, r24	; 0x07
     8e2:	98 87       	std	Y+8, r25	; 0x08
     8e4:	a9 87       	std	Y+9, r26	; 0x09
     8e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8e8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ea:	78 85       	ldd	r23, Y+8	; 0x08
     8ec:	89 85       	ldd	r24, Y+9	; 0x09
     8ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e8       	ldi	r20, 0x80	; 128
     8f6:	5f e3       	ldi	r21, 0x3F	; 63
     8f8:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	2c f4       	brge	.+10     	; 0x90a <actuators_setup+0x23a>
		__ticks = 1;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
     908:	3f c0       	rjmp	.+126    	; 0x988 <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     90a:	6f 81       	ldd	r22, Y+7	; 0x07
     90c:	78 85       	ldd	r23, Y+8	; 0x08
     90e:	89 85       	ldd	r24, Y+9	; 0x09
     910:	9a 85       	ldd	r25, Y+10	; 0x0a
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	3f ef       	ldi	r19, 0xFF	; 255
     916:	4f e7       	ldi	r20, 0x7F	; 127
     918:	57 e4       	ldi	r21, 0x47	; 71
     91a:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
     91e:	18 16       	cp	r1, r24
     920:	4c f5       	brge	.+82     	; 0x974 <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     922:	6b 85       	ldd	r22, Y+11	; 0x0b
     924:	7c 85       	ldd	r23, Y+12	; 0x0c
     926:	8d 85       	ldd	r24, Y+13	; 0x0d
     928:	9e 85       	ldd	r25, Y+14	; 0x0e
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e2       	ldi	r20, 0x20	; 32
     930:	51 e4       	ldi	r21, 0x41	; 65
     932:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
     93a:	bc 01       	movw	r22, r24
     93c:	cd 01       	movw	r24, r26
     93e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	9e 83       	std	Y+6, r25	; 0x06
     948:	8d 83       	std	Y+5, r24	; 0x05
     94a:	0f c0       	rjmp	.+30     	; 0x96a <actuators_setup+0x29a>
     94c:	8a ef       	ldi	r24, 0xFA	; 250
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9c 83       	std	Y+4, r25	; 0x04
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <actuators_setup+0x288>
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     960:	8d 81       	ldd	r24, Y+5	; 0x05
     962:	9e 81       	ldd	r25, Y+6	; 0x06
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	9e 83       	std	Y+6, r25	; 0x06
     968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96a:	8d 81       	ldd	r24, Y+5	; 0x05
     96c:	9e 81       	ldd	r25, Y+6	; 0x06
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	69 f7       	brne	.-38     	; 0x94c <actuators_setup+0x27c>
     972:	14 c0       	rjmp	.+40     	; 0x99c <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     974:	6f 81       	ldd	r22, Y+7	; 0x07
     976:	78 85       	ldd	r23, Y+8	; 0x08
     978:	89 85       	ldd	r24, Y+9	; 0x09
     97a:	9a 85       	ldd	r25, Y+10	; 0x0a
     97c:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	9e 83       	std	Y+6, r25	; 0x06
     986:	8d 83       	std	Y+5, r24	; 0x05
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	9e 81       	ldd	r25, Y+6	; 0x06
     98c:	9a 83       	std	Y+2, r25	; 0x02
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <actuators_setup+0x2c4>
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers(UP);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	90 dd       	rcall	.-1248   	; 0x4c2 <servo_set_grabbers>
}
     9a2:	aa 96       	adiw	r28, 0x2a	; 42
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <__vector_18>:
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	00 90 5b 00 	lds	r0, 0x005B
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	00 d0       	rcall	.+0      	; 0x9de <__vector_18+0x2a>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <__vector_18+0x2c>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	ed ee       	ldi	r30, 0xED	; 237
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8c 83       	std	Y+4, r24	; 0x04
     9ec:	1b 82       	std	Y+3, r1	; 0x03
     9ee:	9c c0       	rjmp	.+312    	; 0xb28 <__vector_18+0x174>
     9f0:	ed ee       	ldi	r30, 0xED	; 237
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	82 95       	swap	r24
     9f8:	80 7f       	andi	r24, 0xF0	; 240
     9fa:	80 83       	st	Z, r24
     9fc:	ee ee       	ldi	r30, 0xEE	; 238
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	82 95       	swap	r24
     a04:	86 95       	lsr	r24
     a06:	87 70       	andi	r24, 0x07	; 7
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <__vector_18+0x62>
     a14:	6e c0       	rjmp	.+220    	; 0xaf2 <__vector_18+0x13e>
     a16:	ef ee       	ldi	r30, 0xEF	; 239
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	80 83       	st	Z, r24
     a1e:	ae ee       	ldi	r26, 0xEE	; 238
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	ee ee       	ldi	r30, 0xEE	; 238
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8f 7d       	andi	r24, 0xDF	; 223
     a2a:	8c 93       	st	X, r24
     a2c:	e2 ef       	ldi	r30, 0xF2	; 242
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	82 95       	swap	r24
     a34:	86 95       	lsr	r24
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	28 2f       	mov	r18, r24
     a3a:	e3 ef       	ldi	r30, 0xF3	; 243
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	82 2b       	or	r24, r18
     a52:	8a 83       	std	Y+2, r24	; 0x02
     a54:	19 82       	std	Y+1, r1	; 0x01
     a56:	2a c0       	rjmp	.+84     	; 0xaac <__vector_18+0xf8>
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	28 2f       	mov	r18, r24
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	82 1b       	sub	r24, r18
     a64:	93 0b       	sbc	r25, r19
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	90 95       	com	r25
     a6c:	81 95       	neg	r24
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	fc 01       	movw	r30, r24
     a72:	e8 52       	subi	r30, 0x28	; 40
     a74:	fe 4f       	sbci	r31, 0xFE	; 254
     a76:	40 81       	ld	r20, Z
     a78:	51 81       	ldd	r21, Z+1	; 0x01
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	fc 01       	movw	r30, r24
     a84:	e4 51       	subi	r30, 0x14	; 20
     a86:	fe 4f       	sbci	r31, 0xFE	; 254
     a88:	80 81       	ld	r24, Z
     a8a:	28 2f       	mov	r18, r24
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	da 01       	movw	r26, r20
     a9a:	a8 0f       	add	r26, r24
     a9c:	b9 1f       	adc	r27, r25
     a9e:	ea ef       	ldi	r30, 0xFA	; 250
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	8c 93       	st	X, r24
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	98 f2       	brcs	.-90     	; 0xa58 <__vector_18+0xa4>
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	fc 01       	movw	r30, r24
     abc:	e4 51       	subi	r30, 0x14	; 20
     abe:	fe 4f       	sbci	r31, 0xFE	; 254
     ac0:	80 81       	ld	r24, Z
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	80 83       	st	Z, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	85 30       	cpi	r24, 0x05	; 5
     aca:	41 f4       	brne	.+16     	; 0xadc <__vector_18+0x128>
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	fc 01       	movw	r30, r24
     ad6:	e4 51       	subi	r30, 0x14	; 20
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	10 82       	st	Z, r1
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	fc 01       	movw	r30, r24
     ae6:	e0 50       	subi	r30, 0x00	; 0
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	80 81       	ld	r24, Z
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 83       	st	Z, r24
     af0:	1f c0       	rjmp	.+62     	; 0xb30 <__vector_18+0x17c>
     af2:	ee ee       	ldi	r30, 0xEE	; 238
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	82 95       	swap	r24
     afa:	86 95       	lsr	r24
     afc:	86 95       	lsr	r24
     afe:	83 70       	andi	r24, 0x03	; 3
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	81 70       	andi	r24, 0x01	; 1
     b06:	90 70       	andi	r25, 0x00	; 0
     b08:	88 23       	and	r24, r24
     b0a:	59 f0       	breq	.+22     	; 0xb22 <__vector_18+0x16e>
     b0c:	ef ee       	ldi	r30, 0xEF	; 239
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	10 82       	st	Z, r1
     b12:	ae ee       	ldi	r26, 0xEE	; 238
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ee ee       	ldi	r30, 0xEE	; 238
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7b       	andi	r24, 0xBF	; 191
     b1e:	8c 93       	st	X, r24
     b20:	07 c0       	rjmp	.+14     	; 0xb30 <__vector_18+0x17c>
     b22:	8b 81       	ldd	r24, Y+3	; 0x03
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	8f 30       	cpi	r24, 0x0F	; 15
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <__vector_18+0x17c>
     b2e:	60 cf       	rjmp	.-320    	; 0x9f0 <__vector_18+0x3c>
     b30:	ed ee       	ldi	r30, 0xED	; 237
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	8c 81       	ldd	r24, Y+4	; 0x04
     b36:	80 83       	st	Z, r24
     b38:	aa ed       	ldi	r26, 0xDA	; 218
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	ea ed       	ldi	r30, 0xDA	; 218
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8c 93       	st	X, r24
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	0f 90       	pop	r0
     b66:	00 92 5b 00 	sts	0x005B, r0
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <CAN_InitModule>:
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <CAN_InitModule+0x6>
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	e8 ed       	ldi	r30, 0xD8	; 216
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 83       	st	Z, r24
     b86:	1a 82       	std	Y+2, r1	; 0x02
     b88:	32 c0       	rjmp	.+100    	; 0xbee <CAN_InitModule+0x7a>
     b8a:	ed ee       	ldi	r30, 0xED	; 237
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	82 95       	swap	r24
     b92:	80 7f       	andi	r24, 0xF0	; 240
     b94:	80 83       	st	Z, r24
     b96:	ee ee       	ldi	r30, 0xEE	; 238
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	10 82       	st	Z, r1
     b9c:	ef ee       	ldi	r30, 0xEF	; 239
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	10 82       	st	Z, r1
     ba2:	e3 ef       	ldi	r30, 0xF3	; 243
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
     ba8:	e2 ef       	ldi	r30, 0xF2	; 242
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	10 82       	st	Z, r1
     bae:	e1 ef       	ldi	r30, 0xF1	; 241
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	10 82       	st	Z, r1
     bb4:	e0 ef       	ldi	r30, 0xF0	; 240
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
     bba:	e7 ef       	ldi	r30, 0xF7	; 247
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	10 82       	st	Z, r1
     bc0:	e6 ef       	ldi	r30, 0xF6	; 246
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	10 82       	st	Z, r1
     bc6:	e5 ef       	ldi	r30, 0xF5	; 245
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	10 82       	st	Z, r1
     bcc:	e4 ef       	ldi	r30, 0xF4	; 244
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	10 82       	st	Z, r1
     bd2:	19 82       	std	Y+1, r1	; 0x01
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <CAN_InitModule+0x6e>
     bd6:	ea ef       	ldi	r30, 0xFA	; 250
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	88 30       	cpi	r24, 0x08	; 8
     be6:	b8 f3       	brcs	.-18     	; 0xbd6 <CAN_InitModule+0x62>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	8f 30       	cpi	r24, 0x0F	; 15
     bf2:	58 f2       	brcs	.-106    	; 0xb8a <CAN_InitModule+0x16>
     bf4:	e8 ed       	ldi	r30, 0xD8	; 216
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 83       	st	Z, r24
     bfc:	e2 ee       	ldi	r30, 0xE2	; 226
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 83       	st	Z, r24
     c04:	e3 ee       	ldi	r30, 0xE3	; 227
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	80 83       	st	Z, r24
     c0c:	e4 ee       	ldi	r30, 0xE4	; 228
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	8e e5       	ldi	r24, 0x5E	; 94
     c12:	80 83       	st	Z, r24
     c14:	e5 ee       	ldi	r30, 0xE5	; 229
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	10 82       	st	Z, r1
     c1a:	eb ed       	ldi	r30, 0xDB	; 219
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 eb       	ldi	r24, 0xB0	; 176
     c20:	80 83       	st	Z, r24
     c22:	ef ed       	ldi	r30, 0xDF	; 223
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	8f e7       	ldi	r24, 0x7F	; 127
     c28:	80 83       	st	Z, r24
     c2a:	ee ed       	ldi	r30, 0xDE	; 222
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	80 83       	st	Z, r24
     c32:	78 94       	sei
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <CAN_InitRxMob>:
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <CAN_InitRxMob+0x6>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <CAN_InitRxMob+0x8>
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	ed ee       	ldi	r30, 0xED	; 237
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	e9 ed       	ldi	r30, 0xD9	; 217
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	82 95       	swap	r24
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	81 70       	andi	r24, 0x01	; 1
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	88 23       	and	r24, r24
     c6c:	a9 f7       	brne	.-22     	; 0xc58 <CAN_InitRxMob+0x1a>
     c6e:	e9 ed       	ldi	r30, 0xD9	; 217
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	86 95       	lsr	r24
     c76:	86 95       	lsr	r24
     c78:	86 95       	lsr	r24
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	81 70       	andi	r24, 0x01	; 1
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	88 23       	and	r24, r24
     c84:	49 f7       	brne	.-46     	; 0xc58 <CAN_InitRxMob+0x1a>
     c86:	1a 82       	std	Y+2, r1	; 0x02
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <CAN_InitRxMob+0xca>
     c8a:	ed ee       	ldi	r30, 0xED	; 237
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	82 95       	swap	r24
     c92:	80 7f       	andi	r24, 0xF0	; 240
     c94:	80 83       	st	Z, r24
     c96:	ef ee       	ldi	r30, 0xEF	; 239
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	82 95       	swap	r24
     c9e:	86 95       	lsr	r24
     ca0:	86 95       	lsr	r24
     ca2:	83 70       	andi	r24, 0x03	; 3
     ca4:	88 23       	and	r24, r24
     ca6:	69 f5       	brne	.+90     	; 0xd02 <CAN_InitRxMob+0xc4>
     ca8:	ef ee       	ldi	r30, 0xEF	; 239
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8f e0       	ldi	r24, 0x0F	; 15
     cae:	80 83       	st	Z, r24
     cb0:	e3 ef       	ldi	r30, 0xF3	; 243
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	90 70       	andi	r25, 0x00	; 0
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	80 83       	st	Z, r24
     cc8:	e2 ef       	ldi	r30, 0xF2	; 242
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	82 95       	swap	r24
     cd0:	88 0f       	add	r24, r24
     cd2:	80 7e       	andi	r24, 0xE0	; 224
     cd4:	80 83       	st	Z, r24
     cd6:	e6 ef       	ldi	r30, 0xF6	; 246
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 ee       	ldi	r24, 0xE0	; 224
     cdc:	80 83       	st	Z, r24
     cde:	e7 ef       	ldi	r30, 0xF7	; 247
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	80 83       	st	Z, r24
     ce6:	af ee       	ldi	r26, 0xEF	; 239
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ef ee       	ldi	r30, 0xEF	; 239
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	8c 93       	st	X, r24
     cf4:	ed ee       	ldi	r30, 0xED	; 237
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	80 83       	st	Z, r24
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	0c c0       	rjmp	.+24     	; 0xd1a <CAN_InitRxMob+0xdc>
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	8a 83       	std	Y+2, r24	; 0x02
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	8f 30       	cpi	r24, 0x0F	; 15
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <CAN_InitRxMob+0xd2>
     d0e:	bd cf       	rjmp	.-134    	; 0xc8a <CAN_InitRxMob+0x4c>
     d10:	ed ee       	ldi	r30, 0xED	; 237
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <CAN_Init>:
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <CAN_Init+0xa>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
     d3c:	1b df       	rcall	.-458    	; 0xb74 <CAN_InitModule>
     d3e:	19 82       	std	Y+1, r1	; 0x01
     d40:	36 c0       	rjmp	.+108    	; 0xdae <CAN_Init+0x82>
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	79 df       	rcall	.-270    	; 0xc3e <CAN_InitRxMob>
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	8c 01       	movw	r16, r24
     d58:	08 52       	subi	r16, 0x28	; 40
     d5a:	1e 4f       	sbci	r17, 0xFE	; 254
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 46 1c 	call	0x388c	; 0x388c <calloc>
     d68:	f8 01       	movw	r30, r16
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	48 2f       	mov	r20, r24
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	fc 01       	movw	r30, r24
     d82:	e0 50       	subi	r30, 0x00	; 0
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	10 82       	st	Z, r1
     d88:	fc 01       	movw	r30, r24
     d8a:	e0 50       	subi	r30, 0x00	; 0
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	f9 01       	movw	r30, r18
     d92:	ea 50       	subi	r30, 0x0A	; 10
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	80 83       	st	Z, r24
     d98:	f9 01       	movw	r30, r18
     d9a:	ea 50       	subi	r30, 0x0A	; 10
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	80 81       	ld	r24, Z
     da0:	fa 01       	movw	r30, r20
     da2:	e4 51       	subi	r30, 0x14	; 20
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	80 83       	st	Z, r24
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	99 81       	ldd	r25, Y+1	; 0x01
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	98 17       	cp	r25, r24
     db4:	30 f2       	brcs	.-116    	; 0xd42 <CAN_Init+0x16>
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <CAN_Read>:
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <CAN_Read+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <CAN_Read+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	6c 83       	std	Y+4, r22	; 0x04
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	fc 01       	movw	r30, r24
     de0:	e0 50       	subi	r30, 0x00	; 0
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	b1 f3       	breq	.-20     	; 0xdd6 <CAN_Read+0x12>
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	30 c0       	rjmp	.+96     	; 0xe4e <CAN_Read+0x8a>
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	dc 01       	movw	r26, r24
     dfa:	a2 0f       	add	r26, r18
     dfc:	b3 1f       	adc	r27, r19
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	82 1b       	sub	r24, r18
     e0a:	93 0b       	sbc	r25, r19
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	90 95       	com	r25
     e12:	81 95       	neg	r24
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	fc 01       	movw	r30, r24
     e18:	e8 52       	subi	r30, 0x28	; 40
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	40 81       	ld	r20, Z
     e1e:	51 81       	ldd	r21, Z+1	; 0x01
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	fc 01       	movw	r30, r24
     e2a:	ea 50       	subi	r30, 0x0A	; 10
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	80 81       	ld	r24, Z
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	fa 01       	movw	r30, r20
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	80 81       	ld	r24, Z
     e46:	8c 93       	st	X, r24
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	68 f2       	brcs	.-102    	; 0xdee <CAN_Read+0x2a>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	fc 01       	movw	r30, r24
     e5e:	ea 50       	subi	r30, 0x0A	; 10
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	80 81       	ld	r24, Z
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	80 83       	st	Z, r24
     e68:	80 81       	ld	r24, Z
     e6a:	85 30       	cpi	r24, 0x05	; 5
     e6c:	41 f4       	brne	.+16     	; 0xe7e <CAN_Read+0xba>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	fc 01       	movw	r30, r24
     e78:	ea 50       	subi	r30, 0x0A	; 10
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	10 82       	st	Z, r1
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 01       	movw	r18, r24
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	30 40       	sbci	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	e0 50       	subi	r30, 0x00	; 0
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	80 81       	ld	r24, Z
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	f9 01       	movw	r30, r18
     e96:	e0 50       	subi	r30, 0x00	; 0
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	80 83       	st	Z, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <CAN_Write>:
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	27 97       	sbiw	r28, 0x07	; 7
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	9d 83       	std	Y+5, r25	; 0x05
     ec2:	8c 83       	std	Y+4, r24	; 0x04
     ec4:	6e 83       	std	Y+6, r22	; 0x06
     ec6:	e9 ed       	ldi	r30, 0xD9	; 217
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 95       	swap	r24
     ece:	8f 70       	andi	r24, 0x0F	; 15
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	81 70       	andi	r24, 0x01	; 1
     ed6:	90 70       	andi	r25, 0x00	; 0
     ed8:	88 23       	and	r24, r24
     eda:	a9 f7       	brne	.-22     	; 0xec6 <CAN_Write+0x1a>
     edc:	e9 ed       	ldi	r30, 0xD9	; 217
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	86 95       	lsr	r24
     ee4:	86 95       	lsr	r24
     ee6:	86 95       	lsr	r24
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	90 70       	andi	r25, 0x00	; 0
     ef0:	88 23       	and	r24, r24
     ef2:	49 f7       	brne	.-46     	; 0xec6 <CAN_Write+0x1a>
     ef4:	ed ee       	ldi	r30, 0xED	; 237
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	1a 82       	std	Y+2, r1	; 0x02
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <CAN_Write+0x78>
     f00:	ed ee       	ldi	r30, 0xED	; 237
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	82 95       	swap	r24
     f08:	80 7f       	andi	r24, 0xF0	; 240
     f0a:	80 83       	st	Z, r24
     f0c:	ef ee       	ldi	r30, 0xEF	; 239
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 95       	swap	r24
     f14:	86 95       	lsr	r24
     f16:	86 95       	lsr	r24
     f18:	83 70       	andi	r24, 0x03	; 3
     f1a:	88 23       	and	r24, r24
     f1c:	31 f0       	breq	.+12     	; 0xf2a <CAN_Write+0x7e>
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	8f 30       	cpi	r24, 0x0F	; 15
     f28:	58 f3       	brcs	.-42     	; 0xf00 <CAN_Write+0x54>
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	8f 30       	cpi	r24, 0x0F	; 15
     f2e:	19 f4       	brne	.+6      	; 0xf36 <CAN_Write+0x8a>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	32 c0       	rjmp	.+100    	; 0xf9a <CAN_Write+0xee>
     f36:	e2 ef       	ldi	r30, 0xF2	; 242
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	8e 81       	ldd	r24, Y+6	; 0x06
     f3c:	82 95       	swap	r24
     f3e:	88 0f       	add	r24, r24
     f40:	80 7e       	andi	r24, 0xE0	; 224
     f42:	80 83       	st	Z, r24
     f44:	e3 ef       	ldi	r30, 0xF3	; 243
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8e 81       	ldd	r24, Y+6	; 0x06
     f4a:	86 95       	lsr	r24
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	80 83       	st	Z, r24
     f52:	ef ee       	ldi	r30, 0xEF	; 239
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	80 83       	st	Z, r24
     f5a:	1b 82       	std	Y+3, r1	; 0x03
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <CAN_Write+0xd0>
     f5e:	aa ef       	ldi	r26, 0xFA	; 250
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	80 81       	ld	r24, Z
     f74:	8c 93       	st	X, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	88 30       	cpi	r24, 0x08	; 8
     f80:	70 f3       	brcs	.-36     	; 0xf5e <CAN_Write+0xb2>
     f82:	af ee       	ldi	r26, 0xEF	; 239
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ef ee       	ldi	r30, 0xEF	; 239
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	8c 93       	st	X, r24
     f90:	ed ee       	ldi	r30, 0xED	; 237
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	1f 82       	std	Y+7, r1	; 0x07
     f9a:	8f 81       	ldd	r24, Y+7	; 0x07
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2c 97       	sbiw	r28, 0x0c	; 12
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	89 87       	std	Y+9, r24	; 0x09
     fc4:	6a 87       	std	Y+10, r22	; 0x0a
     fc6:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fc8:	80 91 08 01 	lds	r24, 0x0108
     fcc:	90 91 09 01 	lds	r25, 0x0109
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	06 97       	sbiw	r24, 0x06	; 6
     fda:	98 87       	std	Y+8, r25	; 0x08
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     fe0:	ef 81       	ldd	r30, Y+7	; 0x07
     fe2:	f8 85       	ldd	r31, Y+8	; 0x08
     fe4:	90 81       	ld	r25, Z
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	98 17       	cp	r25, r24
     fea:	19 f4       	brne	.+6      	; 0xff2 <gpio_register_pin+0x44>
            return 1;
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	2c 87       	std	Y+12, r18	; 0x0c
     ff0:	c9 c0       	rjmp	.+402    	; 0x1184 <__stack+0x85>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     ff2:	ef 81       	ldd	r30, Y+7	; 0x07
     ff4:	f8 85       	ldd	r31, Y+8	; 0x08
     ff6:	80 85       	ldd	r24, Z+8	; 0x08
     ff8:	91 85       	ldd	r25, Z+9	; 0x09
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	06 97       	sbiw	r24, 0x06	; 6
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	8f 83       	std	Y+7, r24	; 0x07
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 85       	ldd	r25, Y+8	; 0x08
    100c:	06 96       	adiw	r24, 0x06	; 6
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	86 30       	cpi	r24, 0x06	; 6
    1012:	92 07       	cpc	r25, r18
    1014:	29 f7       	brne	.-54     	; 0xfe0 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	86 95       	lsr	r24
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	87 70       	andi	r24, 0x07	; 7
    1026:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1028:	8a 85       	ldd	r24, Y+10	; 0x0a
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	09 f0       	breq	.+2      	; 0x1030 <gpio_register_pin+0x82>
    102e:	48 c0       	rjmp	.+144    	; 0x10c0 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	4e 96       	adiw	r24, 0x1e	; 30
    1042:	dc 01       	movw	r26, r24
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	c9 01       	movw	r24, r18
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	4e 96       	adiw	r24, 0x1e	; 30
    1056:	fc 01       	movw	r30, r24
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <gpio_register_pin+0xbe>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	2a 95       	dec	r18
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <gpio_register_pin+0xba>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	c9 01       	movw	r24, r18
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	4f 96       	adiw	r24, 0x1f	; 31
    1086:	dc 01       	movw	r26, r24
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	4f 96       	adiw	r24, 0x1f	; 31
    109a:	fc 01       	movw	r30, r24
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <gpio_register_pin+0x104>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <gpio_register_pin+0x100>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
        return 0;
    10bc:	1c 86       	std	Y+12, r1	; 0x0c
    10be:	62 c0       	rjmp	.+196    	; 0x1184 <__stack+0x85>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	c9 01       	movw	r24, r18
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	4e 96       	adiw	r24, 0x1e	; 30
    10d2:	dc 01       	movw	r26, r24
    10d4:	8e 81       	ldd	r24, Y+6	; 0x06
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	4e 96       	adiw	r24, 0x1e	; 30
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <gpio_register_pin+0x14e>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	2a 95       	dec	r18
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <gpio_register_pin+0x14a>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	c9 01       	movw	r24, r18
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	4f 96       	adiw	r24, 0x1f	; 31
    1118:	dc 01       	movw	r26, r24
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	c9 01       	movw	r24, r18
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	4f 96       	adiw	r24, 0x1f	; 31
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <__stack+0x43>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	2a 95       	dec	r18
    1144:	e2 f7       	brpl	.-8      	; 0x113e <__stack+0x3f>
    1146:	84 2b       	or	r24, r20
    1148:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    114a:	8a e0       	ldi	r24, 0x0A	; 10
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <malloc>
    1152:	98 87       	std	Y+8, r25	; 0x08
    1154:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1156:	8f 81       	ldd	r24, Y+7	; 0x07
    1158:	98 85       	ldd	r25, Y+8	; 0x08
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	19 f4       	brne	.+6      	; 0x1164 <__stack+0x65>
        return 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	8c 87       	std	Y+12, r24	; 0x0c
    1162:	10 c0       	rjmp	.+32     	; 0x1184 <__stack+0x85>

    input->pin       = pin;
    1164:	ef 81       	ldd	r30, Y+7	; 0x07
    1166:	f8 85       	ldd	r31, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    116c:	ef 81       	ldd	r30, Y+7	; 0x07
    116e:	f8 85       	ldd	r31, Y+8	; 0x08
    1170:	8b 85       	ldd	r24, Y+11	; 0x0b
    1172:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    1174:	8f 81       	ldd	r24, Y+7	; 0x07
    1176:	98 85       	ldd	r25, Y+8	; 0x08
    1178:	06 96       	adiw	r24, 0x06	; 6
    117a:	26 e0       	ldi	r18, 0x06	; 6
    117c:	31 e0       	ldi	r19, 0x01	; 1
    117e:	b9 01       	movw	r22, r18
    1180:	0b d0       	rcall	.+22     	; 0x1198 <list_add>

    return 0;
    1182:	1c 86       	std	Y+12, r1	; 0x0c
    1184:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1186:	2c 96       	adiw	r28, 0x0c	; 12
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <list_add+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <list_add+0x8>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	7c 83       	std	Y+4, r23	; 0x04
    11aa:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	42 81       	ldd	r20, Z+2	; 0x02
    11b2:	53 81       	ldd	r21, Z+3	; 0x03
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	b9 01       	movw	r22, r18
    11be:	07 d0       	rcall	.+14     	; 0x11ce <__list_add>
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <__list_add+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <__list_add+0x8>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <__list_add+0xa>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	7c 83       	std	Y+4, r23	; 0x04
    11e2:	6b 83       	std	Y+3, r22	; 0x03
    11e4:	5e 83       	std	Y+6, r21	; 0x06
    11e6:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    11e8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ea:	fe 81       	ldd	r31, Y+6	; 0x06
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
    new->next = next;
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	93 83       	std	Z+3, r25	; 0x03
    11fe:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1200:	e9 81       	ldd	r30, Y+1	; 0x01
    1202:	fa 81       	ldd	r31, Y+2	; 0x02
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    prev->next = new;
    120c:	eb 81       	ldd	r30, Y+3	; 0x03
    120e:	fc 81       	ldd	r31, Y+4	; 0x04
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	93 83       	std	Z+3, r25	; 0x03
    1216:	82 83       	std	Z+2, r24	; 0x02
}
    1218:	26 96       	adiw	r28, 0x06	; 6
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <__gpio_read_pin+0x6>
    1230:	0f 92       	push	r0
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	86 95       	lsr	r24
    123c:	86 95       	lsr	r24
    123e:	86 95       	lsr	r24
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	87 70       	andi	r24, 0x07	; 7
    1248:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	c9 01       	movw	r24, r18
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	82 0f       	add	r24, r18
    1258:	93 1f       	adc	r25, r19
    125a:	4d 96       	adiw	r24, 0x1d	; 29
    125c:	fc 01       	movw	r30, r24
    125e:	80 81       	ld	r24, Z
    1260:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <__gpio_read_pin+0x4c>
    1272:	55 95       	asr	r21
    1274:	47 95       	ror	r20
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <__gpio_read_pin+0x48>
    127a:	ca 01       	movw	r24, r20
    127c:	81 70       	andi	r24, 0x01	; 1
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	2b 97       	sbiw	r28, 0x0b	; 11
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12a0:	80 91 08 01 	lds	r24, 0x0108
    12a4:	90 91 09 01 	lds	r25, 0x0109
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	06 97       	sbiw	r24, 0x06	; 6
    12b2:	98 87       	std	Y+8, r25	; 0x08
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	55 c0       	rjmp	.+170    	; 0x1362 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12b8:	ef 81       	ldd	r30, Y+7	; 0x07
    12ba:	f8 85       	ldd	r31, Y+8	; 0x08
    12bc:	90 81       	ld	r25, Z
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	98 17       	cp	r25, r24
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <gpio_read_pin+0x3c>
    12c4:	43 c0       	rjmp	.+134    	; 0x134c <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    12c6:	1c 82       	std	Y+4, r1	; 0x04
    12c8:	21 c0       	rjmp	.+66     	; 0x130c <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	fc 01       	movw	r30, r24
    12da:	32 96       	adiw	r30, 0x02	; 2
    12dc:	40 81       	ld	r20, Z
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9c 01       	movw	r18, r24
    12e6:	2f 5f       	subi	r18, 0xFF	; 255
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	8f 81       	ldd	r24, Y+7	; 0x07
    12ec:	98 85       	ldd	r25, Y+8	; 0x08
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	fc 01       	movw	r30, r24
    12f4:	32 96       	adiw	r30, 0x02	; 2
    12f6:	80 81       	ld	r24, Z
    12f8:	48 17       	cp	r20, r24
    12fa:	29 f0       	breq	.+10     	; 0x1306 <gpio_read_pin+0x7c>
                    return input->previous_state;
    12fc:	ef 81       	ldd	r30, Y+7	; 0x07
    12fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1300:	25 81       	ldd	r18, Z+5	; 0x05
    1302:	2b 87       	std	Y+11, r18	; 0x0b
    1304:	38 c0       	rjmp	.+112    	; 0x1376 <gpio_read_pin+0xec>
                i++;
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	e0 f2       	brcs	.-72     	; 0x12ca <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1312:	ef 81       	ldd	r30, Y+7	; 0x07
    1314:	f8 85       	ldd	r31, Y+8	; 0x08
    1316:	91 81       	ldd	r25, Z+1	; 0x01
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 27       	eor	r24, r25
    131c:	88 23       	and	r24, r24
    131e:	29 f0       	breq	.+10     	; 0x132a <gpio_read_pin+0xa0>
    1320:	ef 81       	ldd	r30, Y+7	; 0x07
    1322:	f8 85       	ldd	r31, Y+8	; 0x08
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	8a 87       	std	Y+10, r24	; 0x0a
    1328:	08 c0       	rjmp	.+16     	; 0x133a <gpio_read_pin+0xb0>
    132a:	ef 81       	ldd	r30, Y+7	; 0x07
    132c:	f8 85       	ldd	r31, Y+8	; 0x08
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	1a 86       	std	Y+10, r1	; 0x0a
    1332:	88 23       	and	r24, r24
    1334:	11 f4       	brne	.+4      	; 0x133a <gpio_read_pin+0xb0>
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	2a 87       	std	Y+10, r18	; 0x0a
    133a:	8a 85       	ldd	r24, Y+10	; 0x0a
    133c:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    133e:	ef 81       	ldd	r30, Y+7	; 0x07
    1340:	f8 85       	ldd	r31, Y+8	; 0x08
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	2b 87       	std	Y+11, r18	; 0x0b
    134a:	15 c0       	rjmp	.+42     	; 0x1376 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    134c:	ef 81       	ldd	r30, Y+7	; 0x07
    134e:	f8 85       	ldd	r31, Y+8	; 0x08
    1350:	80 85       	ldd	r24, Z+8	; 0x08
    1352:	91 85       	ldd	r25, Z+9	; 0x09
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	06 97       	sbiw	r24, 0x06	; 6
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	8f 83       	std	Y+7, r24	; 0x07
    1362:	8f 81       	ldd	r24, Y+7	; 0x07
    1364:	98 85       	ldd	r25, Y+8	; 0x08
    1366:	06 96       	adiw	r24, 0x06	; 6
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	86 30       	cpi	r24, 0x06	; 6
    136c:	92 07       	cpc	r25, r18
    136e:	09 f0       	breq	.+2      	; 0x1372 <gpio_read_pin+0xe8>
    1370:	a3 cf       	rjmp	.-186    	; 0x12b8 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	8b 87       	std	Y+11, r24	; 0x0b
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1378:	2b 96       	adiw	r28, 0x0b	; 11
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <gpio_debouncer+0xa>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <gpio_debouncer+0xc>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <gpio_debouncer+0xe>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    139c:	80 91 08 01 	lds	r24, 0x0108
    13a0:	90 91 09 01 	lds	r25, 0x0109
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	06 97       	sbiw	r24, 0x06	; 6
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13b4:	00 91 0a 02 	lds	r16, 0x020A
    13b8:	10 91 0b 02 	lds	r17, 0x020B
    13bc:	ed 81       	ldd	r30, Y+5	; 0x05
    13be:	fe 81       	ldd	r31, Y+6	; 0x06
    13c0:	80 81       	ld	r24, Z
    13c2:	33 df       	rcall	.-410    	; 0x122a <__gpio_read_pin>
    13c4:	28 2f       	mov	r18, r24
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	80 0f       	add	r24, r16
    13cc:	91 1f       	adc	r25, r17
    13ce:	fc 01       	movw	r30, r24
    13d0:	32 96       	adiw	r30, 0x02	; 2
    13d2:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13d4:	ed 81       	ldd	r30, Y+5	; 0x05
    13d6:	fe 81       	ldd	r31, Y+6	; 0x06
    13d8:	80 85       	ldd	r24, Z+8	; 0x08
    13da:	91 85       	ldd	r25, Z+9	; 0x09
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	06 97       	sbiw	r24, 0x06	; 6
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	06 96       	adiw	r24, 0x06	; 6
    13f0:	21 e0       	ldi	r18, 0x01	; 1
    13f2:	86 30       	cpi	r24, 0x06	; 6
    13f4:	92 07       	cpc	r25, r18
    13f6:	f1 f6       	brne	.-68     	; 0x13b4 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    13f8:	80 91 0a 02 	lds	r24, 0x020A
    13fc:	90 91 0b 02 	lds	r25, 0x020B
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	90 93 0b 02 	sts	0x020B, r25
    1406:	80 93 0a 02 	sts	0x020A, r24
    140a:	80 91 0a 02 	lds	r24, 0x020A
    140e:	90 91 0b 02 	lds	r25, 0x020B
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	21 f4       	brne	.+8      	; 0x1420 <gpio_debouncer+0x96>
        count = 0;
    1418:	10 92 0b 02 	sts	0x020B, r1
    141c:	10 92 0a 02 	sts	0x020A, r1
	
}
    1420:	26 96       	adiw	r28, 0x06	; 6
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	08 95       	ret

00001436 <greenside>:
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}
};

void greenside(void)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	a9 97       	sbiw	r28, 0x29	; 41
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    144a:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t next_position = 0; 
    144c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8_t odometry_status;
	uint8_t active_state;
	//uint8_t active_state = ROBOT_STATE_TACTIC_ONE;

	starting_position.x     = 85;
    144e:	85 e5       	ldi	r24, 0x55	; 85
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9a a3       	std	Y+34, r25	; 0x22
    1454:	89 a3       	std	Y+33, r24	; 0x21
	starting_position.y     = 670;
    1456:	8e e9       	ldi	r24, 0x9E	; 158
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	9c a3       	std	Y+36, r25	; 0x24
    145c:	8b a3       	std	Y+35, r24	; 0x23
	starting_position.angle = -90;
    145e:	86 ea       	ldi	r24, 0xA6	; 166
    1460:	9f ef       	ldi	r25, 0xFF	; 255
    1462:	9e a3       	std	Y+38, r25	; 0x26
    1464:	8d a3       	std	Y+37, r24	; 0x25
	 
	odometry_set_position(&starting_position);
    1466:	ce 01       	movw	r24, r28
    1468:	81 96       	adiw	r24, 0x21	; 33
    146a:	b3 d5       	rcall	.+2918   	; 0x1fd2 <odometry_set_position>
	 
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION_COUNT; current_position++)
    146c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    146e:	88 a3       	std	Y+32, r24	; 0x20
    1470:	48 c1       	rjmp	.+656    	; 0x1702 <greenside+0x2cc>
	{
		odometry_status = odometry_move_to_position(&(green_camera_move[current_position].point), green_camera_move[current_position].speed,
    1472:	88 a1       	ldd	r24, Y+32	; 0x20
    1474:	48 2f       	mov	r20, r24
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	ca 01       	movw	r24, r20
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	9c 01       	movw	r18, r24
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	22 0f       	add	r18, r18
    1486:	33 1f       	adc	r19, r19
    1488:	82 0f       	add	r24, r18
    148a:	93 1f       	adc	r25, r19
    148c:	84 0f       	add	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	8f 5e       	subi	r24, 0xEF	; 239
    1492:	9e 4f       	sbci	r25, 0xFE	; 254
    1494:	bc 01       	movw	r22, r24
    1496:	88 a1       	ldd	r24, Y+32	; 0x20
    1498:	48 2f       	mov	r20, r24
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	ca 01       	movw	r24, r20
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	9c 01       	movw	r18, r24
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	84 0f       	add	r24, r20
    14b2:	95 1f       	adc	r25, r21
    14b4:	fc 01       	movw	r30, r24
    14b6:	e8 5e       	subi	r30, 0xE8	; 232
    14b8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ba:	a0 81       	ld	r26, Z
    14bc:	88 a1       	ldd	r24, Y+32	; 0x20
    14be:	48 2f       	mov	r20, r24
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	ca 01       	movw	r24, r20
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	9c 01       	movw	r18, r24
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	82 0f       	add	r24, r18
    14d4:	93 1f       	adc	r25, r19
    14d6:	84 0f       	add	r24, r20
    14d8:	95 1f       	adc	r25, r21
    14da:	fc 01       	movw	r30, r24
    14dc:	e7 5e       	subi	r30, 0xE7	; 231
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	b0 81       	ld	r27, Z
    14e2:	88 a1       	ldd	r24, Y+32	; 0x20
    14e4:	48 2f       	mov	r20, r24
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	ca 01       	movw	r24, r20
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	9c 01       	movw	r18, r24
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	82 0f       	add	r24, r18
    14fa:	93 1f       	adc	r25, r19
    14fc:	84 0f       	add	r24, r20
    14fe:	95 1f       	adc	r25, r21
    1500:	fc 01       	movw	r30, r24
    1502:	e6 5e       	subi	r30, 0xE6	; 230
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	20 81       	ld	r18, Z
    1508:	31 81       	ldd	r19, Z+1	; 0x01
    150a:	cb 01       	movw	r24, r22
    150c:	6a 2f       	mov	r22, r26
    150e:	4b 2f       	mov	r20, r27
    1510:	a8 d4       	rcall	.+2384   	; 0x1e62 <odometry_move_to_position>
    1512:	8e 8f       	std	Y+30, r24	; 0x1e
		green_camera_move[current_position].direction,green_camera_move[current_position].callback);
		if(odometry_status == ODOMETRY_FAIL)
    1514:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f4       	brne	.+2      	; 0x151c <greenside+0xe6>
    151a:	f7 c0       	rjmp	.+494    	; 0x170a <greenside+0x2d4>
		{
			break;
		}
		if(current_position == 3)
    151c:	88 a1       	ldd	r24, Y+32	; 0x20
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	09 f0       	breq	.+2      	; 0x1524 <greenside+0xee>
    1522:	ec c0       	rjmp	.+472    	; 0x16fc <greenside+0x2c6>
		{
			odometry_rotate_for(85,NORMAL_SPEED,NULL);
    1524:	85 e5       	ldi	r24, 0x55	; 85
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	61 e4       	ldi	r22, 0x41	; 65
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	22 d6       	rcall	.+3140   	; 0x2174 <odometry_rotate_for>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a8 e4       	ldi	r26, 0x48	; 72
    1536:	b3 e4       	ldi	r27, 0x43	; 67
    1538:	89 8f       	std	Y+25, r24	; 0x19
    153a:	9a 8f       	std	Y+26, r25	; 0x1a
    153c:	ab 8f       	std	Y+27, r26	; 0x1b
    153e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1540:	69 8d       	ldd	r22, Y+25	; 0x19
    1542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e4       	ldi	r19, 0x40	; 64
    154c:	4c e1       	ldi	r20, 0x1C	; 28
    154e:	55 e4       	ldi	r21, 0x45	; 69
    1550:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8d 8b       	std	Y+21, r24	; 0x15
    155a:	9e 8b       	std	Y+22, r25	; 0x16
    155c:	af 8b       	std	Y+23, r26	; 0x17
    155e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <greenside+0x14c>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <greenside+0x1ca>
	else if (__tmp > 65535)
    1582:	6d 89       	ldd	r22, Y+21	; 0x15
    1584:	7e 89       	ldd	r23, Y+22	; 0x16
    1586:	8f 89       	ldd	r24, Y+23	; 0x17
    1588:	98 8d       	ldd	r25, Y+24	; 0x18
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    1596:	18 16       	cp	r1, r24
    1598:	4c f5       	brge	.+82     	; 0x15ec <greenside+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	69 8d       	ldd	r22, Y+25	; 0x19
    159c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9c 8b       	std	Y+20, r25	; 0x14
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <greenside+0x1ac>
    15c4:	8a ef       	ldi	r24, 0xFA	; 250
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9a 8b       	std	Y+18, r25	; 0x12
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	89 89       	ldd	r24, Y+17	; 0x11
    15ce:	9a 89       	ldd	r25, Y+18	; 0x12
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <greenside+0x19a>
    15d4:	9a 8b       	std	Y+18, r25	; 0x12
    15d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <greenside+0x18e>
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <greenside+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6d 89       	ldd	r22, Y+21	; 0x15
    15ee:	7e 89       	ldd	r23, Y+22	; 0x16
    15f0:	8f 89       	ldd	r24, Y+23	; 0x17
    15f2:	98 8d       	ldd	r25, Y+24	; 0x18
    15f4:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9c 8b       	std	Y+20, r25	; 0x14
    15fe:	8b 8b       	std	Y+19, r24	; 0x13
    1600:	8b 89       	ldd	r24, Y+19	; 0x13
    1602:	9c 89       	ldd	r25, Y+20	; 0x14
    1604:	98 8b       	std	Y+16, r25	; 0x10
    1606:	8f 87       	std	Y+15, r24	; 0x0f
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	98 89       	ldd	r25, Y+16	; 0x10
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <greenside+0x1d6>
    1610:	98 8b       	std	Y+16, r25	; 0x10
    1612:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			//do the camera work
			do_the_camera();
    1614:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <do_the_camera>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	aa ef       	ldi	r26, 0xFA	; 250
    161e:	b3 e4       	ldi	r27, 0x43	; 67
    1620:	8b 87       	std	Y+11, r24	; 0x0b
    1622:	9c 87       	std	Y+12, r25	; 0x0c
    1624:	ad 87       	std	Y+13, r26	; 0x0d
    1626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	6b 85       	ldd	r22, Y+11	; 0x0b
    162a:	7c 85       	ldd	r23, Y+12	; 0x0c
    162c:	8d 85       	ldd	r24, Y+13	; 0x0d
    162e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e4       	ldi	r19, 0x40	; 64
    1634:	4c e1       	ldi	r20, 0x1C	; 28
    1636:	55 e4       	ldi	r21, 0x45	; 69
    1638:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8f 83       	std	Y+7, r24	; 0x07
    1642:	98 87       	std	Y+8, r25	; 0x08
    1644:	a9 87       	std	Y+9, r26	; 0x09
    1646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    165c:	88 23       	and	r24, r24
    165e:	2c f4       	brge	.+10     	; 0x166a <greenside+0x234>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <greenside+0x2b2>
	else if (__tmp > 65535)
    166a:	6f 81       	ldd	r22, Y+7	; 0x07
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	89 85       	ldd	r24, Y+9	; 0x09
    1670:	9a 85       	ldd	r25, Y+10	; 0x0a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    167e:	18 16       	cp	r1, r24
    1680:	4c f5       	brge	.+82     	; 0x16d4 <greenside+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	6b 85       	ldd	r22, Y+11	; 0x0b
    1684:	7c 85       	ldd	r23, Y+12	; 0x0c
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <greenside+0x294>
    16ac:	8a ef       	ldi	r24, 0xFA	; 250
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <greenside+0x282>
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f7       	brne	.-38     	; 0x16ac <greenside+0x276>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <greenside+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <greenside+0x2be>
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
	starting_position.y     = 670;
	starting_position.angle = -90;
	 
	odometry_set_position(&starting_position);
	 
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION_COUNT; current_position++)
    16fc:	88 a1       	ldd	r24, Y+32	; 0x20
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	88 a3       	std	Y+32, r24	; 0x20
    1702:	88 a1       	ldd	r24, Y+32	; 0x20
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f4       	brcc	.+2      	; 0x170a <greenside+0x2d4>
    1708:	b4 ce       	rjmp	.-664    	; 0x1472 <greenside+0x3c>
		}
	}//end for
	 
	while(1)
	{
		switch(active_state)
    170a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	39 a7       	std	Y+41, r19	; 0x29
    1712:	28 a7       	std	Y+40, r18	; 0x28
    1714:	88 a5       	ldd	r24, Y+40	; 0x28
    1716:	99 a5       	ldd	r25, Y+41	; 0x29
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	91 05       	cpc	r25, r1
    171c:	09 f4       	brne	.+2      	; 0x1720 <greenside+0x2ea>
    171e:	e2 c0       	rjmp	.+452    	; 0x18e4 <greenside+0x4ae>
    1720:	28 a5       	ldd	r18, Y+40	; 0x28
    1722:	39 a5       	ldd	r19, Y+41	; 0x29
    1724:	25 30       	cpi	r18, 0x05	; 5
    1726:	31 05       	cpc	r19, r1
    1728:	64 f4       	brge	.+24     	; 0x1742 <greenside+0x30c>
    172a:	88 a5       	ldd	r24, Y+40	; 0x28
    172c:	99 a5       	ldd	r25, Y+41	; 0x29
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	91 05       	cpc	r25, r1
    1732:	a1 f0       	breq	.+40     	; 0x175c <greenside+0x326>
    1734:	28 a5       	ldd	r18, Y+40	; 0x28
    1736:	39 a5       	ldd	r19, Y+41	; 0x29
    1738:	23 30       	cpi	r18, 0x03	; 3
    173a:	31 05       	cpc	r19, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <greenside+0x30a>
    173e:	70 c0       	rjmp	.+224    	; 0x1820 <greenside+0x3ea>
    1740:	e4 cf       	rjmp	.-56     	; 0x170a <greenside+0x2d4>
    1742:	88 a5       	ldd	r24, Y+40	; 0x28
    1744:	99 a5       	ldd	r25, Y+41	; 0x29
    1746:	85 30       	cpi	r24, 0x05	; 5
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <greenside+0x318>
    174c:	2d c1       	rjmp	.+602    	; 0x19a8 <greenside+0x572>
    174e:	28 a5       	ldd	r18, Y+40	; 0x28
    1750:	39 a5       	ldd	r19, Y+41	; 0x29
    1752:	26 30       	cpi	r18, 0x06	; 6
    1754:	31 05       	cpc	r19, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <greenside+0x324>
    1758:	89 c1       	rjmp	.+786    	; 0x1a6c <greenside+0x636>
    175a:	d7 cf       	rjmp	.-82     	; 0x170a <greenside+0x2d4>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	88 a3       	std	Y+32, r24	; 0x20
    1760:	5b c0       	rjmp	.+182    	; 0x1818 <greenside+0x3e2>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    1762:	88 a1       	ldd	r24, Y+32	; 0x20
    1764:	48 2f       	mov	r20, r24
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	ca 01       	movw	r24, r20
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	9c 01       	movw	r18, r24
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	84 0f       	add	r24, r20
    177e:	95 1f       	adc	r25, r21
    1780:	83 5c       	subi	r24, 0xC3	; 195
    1782:	9e 4f       	sbci	r25, 0xFE	; 254
    1784:	bc 01       	movw	r22, r24
    1786:	88 a1       	ldd	r24, Y+32	; 0x20
    1788:	48 2f       	mov	r20, r24
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	ca 01       	movw	r24, r20
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	9c 01       	movw	r18, r24
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	84 0f       	add	r24, r20
    17a2:	95 1f       	adc	r25, r21
    17a4:	fc 01       	movw	r30, r24
    17a6:	ec 5b       	subi	r30, 0xBC	; 188
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	a0 81       	ld	r26, Z
    17ac:	88 a1       	ldd	r24, Y+32	; 0x20
    17ae:	48 2f       	mov	r20, r24
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	ca 01       	movw	r24, r20
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	9c 01       	movw	r18, r24
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	84 0f       	add	r24, r20
    17c8:	95 1f       	adc	r25, r21
    17ca:	fc 01       	movw	r30, r24
    17cc:	eb 5b       	subi	r30, 0xBB	; 187
    17ce:	fe 4f       	sbci	r31, 0xFE	; 254
    17d0:	b0 81       	ld	r27, Z
    17d2:	88 a1       	ldd	r24, Y+32	; 0x20
    17d4:	48 2f       	mov	r20, r24
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	ca 01       	movw	r24, r20
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	9c 01       	movw	r18, r24
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	22 0f       	add	r18, r18
    17e6:	33 1f       	adc	r19, r19
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	84 0f       	add	r24, r20
    17ee:	95 1f       	adc	r25, r21
    17f0:	fc 01       	movw	r30, r24
    17f2:	ea 5b       	subi	r30, 0xBA	; 186
    17f4:	fe 4f       	sbci	r31, 0xFE	; 254
    17f6:	20 81       	ld	r18, Z
    17f8:	31 81       	ldd	r19, Z+1	; 0x01
    17fa:	cb 01       	movw	r24, r22
    17fc:	6a 2f       	mov	r22, r26
    17fe:	4b 2f       	mov	r20, r27
    1800:	30 d3       	rcall	.+1632   	; 0x1e62 <odometry_move_to_position>
    1802:	8e 8f       	std	Y+30, r24	; 0x1e
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1804:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	59 f0       	breq	.+22     	; 0x1820 <greenside+0x3ea>
					{
						break;
					}
					if(current_position == 0)
    180a:	88 a1       	ldd	r24, Y+32	; 0x20
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <greenside+0x3dc>
    1810:	ff cf       	rjmp	.-2      	; 0x1810 <greenside+0x3da>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1812:	88 a1       	ldd	r24, Y+32	; 0x20
    1814:	8f 5f       	subi	r24, 0xFF	; 255
    1816:	88 a3       	std	Y+32, r24	; 0x20
    1818:	88 a1       	ldd	r24, Y+32	; 0x20
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <greenside+0x3ea>
    181e:	a1 cf       	rjmp	.-190    	; 0x1762 <greenside+0x32c>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    1820:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1822:	88 a3       	std	Y+32, r24	; 0x20
    1824:	5b c0       	rjmp	.+182    	; 0x18dc <greenside+0x4a6>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_two_positions[current_position].point), green_tactic_two_positions[current_position].speed,
    1826:	88 a1       	ldd	r24, Y+32	; 0x20
    1828:	48 2f       	mov	r20, r24
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	ca 01       	movw	r24, r20
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	9c 01       	movw	r18, r24
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	22 0f       	add	r18, r18
    183a:	33 1f       	adc	r19, r19
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	84 0f       	add	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	88 5b       	subi	r24, 0xB8	; 184
    1846:	9e 4f       	sbci	r25, 0xFE	; 254
    1848:	bc 01       	movw	r22, r24
    184a:	88 a1       	ldd	r24, Y+32	; 0x20
    184c:	48 2f       	mov	r20, r24
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	ca 01       	movw	r24, r20
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	9c 01       	movw	r18, r24
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	22 0f       	add	r18, r18
    185e:	33 1f       	adc	r19, r19
    1860:	82 0f       	add	r24, r18
    1862:	93 1f       	adc	r25, r19
    1864:	84 0f       	add	r24, r20
    1866:	95 1f       	adc	r25, r21
    1868:	fc 01       	movw	r30, r24
    186a:	e1 5b       	subi	r30, 0xB1	; 177
    186c:	fe 4f       	sbci	r31, 0xFE	; 254
    186e:	a0 81       	ld	r26, Z
    1870:	88 a1       	ldd	r24, Y+32	; 0x20
    1872:	48 2f       	mov	r20, r24
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	ca 01       	movw	r24, r20
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	9c 01       	movw	r18, r24
    187e:	22 0f       	add	r18, r18
    1880:	33 1f       	adc	r19, r19
    1882:	22 0f       	add	r18, r18
    1884:	33 1f       	adc	r19, r19
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	84 0f       	add	r24, r20
    188c:	95 1f       	adc	r25, r21
    188e:	fc 01       	movw	r30, r24
    1890:	e0 5b       	subi	r30, 0xB0	; 176
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	b0 81       	ld	r27, Z
    1896:	88 a1       	ldd	r24, Y+32	; 0x20
    1898:	48 2f       	mov	r20, r24
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	ca 01       	movw	r24, r20
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	9c 01       	movw	r18, r24
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	84 0f       	add	r24, r20
    18b2:	95 1f       	adc	r25, r21
    18b4:	fc 01       	movw	r30, r24
    18b6:	ef 5a       	subi	r30, 0xAF	; 175
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	20 81       	ld	r18, Z
    18bc:	31 81       	ldd	r19, Z+1	; 0x01
    18be:	cb 01       	movw	r24, r22
    18c0:	6a 2f       	mov	r22, r26
    18c2:	4b 2f       	mov	r20, r27
    18c4:	ce d2       	rcall	.+1436   	; 0x1e62 <odometry_move_to_position>
    18c6:	8e 8f       	std	Y+30, r24	; 0x1e
					green_tactic_two_positions[current_position].direction,green_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    18c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <greenside+0x4ae>
					{
						break;
					}
					if(current_position == 0)
    18ce:	88 a1       	ldd	r24, Y+32	; 0x20
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <greenside+0x4a0>
    18d4:	ff cf       	rjmp	.-2      	; 0x18d4 <greenside+0x49e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    18d6:	88 a1       	ldd	r24, Y+32	; 0x20
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	88 a3       	std	Y+32, r24	; 0x20
    18dc:	88 a1       	ldd	r24, Y+32	; 0x20
    18de:	88 23       	and	r24, r24
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <greenside+0x4ae>
    18e2:	a1 cf       	rjmp	.-190    	; 0x1826 <greenside+0x3f0>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    18e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e6:	88 a3       	std	Y+32, r24	; 0x20
    18e8:	5b c0       	rjmp	.+182    	; 0x19a0 <greenside+0x56a>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_three_positions[current_position].point), green_tactic_three_positions[current_position].speed,
    18ea:	88 a1       	ldd	r24, Y+32	; 0x20
    18ec:	48 2f       	mov	r20, r24
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	ca 01       	movw	r24, r20
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	9c 01       	movw	r18, r24
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	8d 5a       	subi	r24, 0xAD	; 173
    190a:	9e 4f       	sbci	r25, 0xFE	; 254
    190c:	bc 01       	movw	r22, r24
    190e:	88 a1       	ldd	r24, Y+32	; 0x20
    1910:	48 2f       	mov	r20, r24
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	ca 01       	movw	r24, r20
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	9c 01       	movw	r18, r24
    191c:	22 0f       	add	r18, r18
    191e:	33 1f       	adc	r19, r19
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	82 0f       	add	r24, r18
    1926:	93 1f       	adc	r25, r19
    1928:	84 0f       	add	r24, r20
    192a:	95 1f       	adc	r25, r21
    192c:	fc 01       	movw	r30, r24
    192e:	e6 5a       	subi	r30, 0xA6	; 166
    1930:	fe 4f       	sbci	r31, 0xFE	; 254
    1932:	a0 81       	ld	r26, Z
    1934:	88 a1       	ldd	r24, Y+32	; 0x20
    1936:	48 2f       	mov	r20, r24
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	ca 01       	movw	r24, r20
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	9c 01       	movw	r18, r24
    1942:	22 0f       	add	r18, r18
    1944:	33 1f       	adc	r19, r19
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	82 0f       	add	r24, r18
    194c:	93 1f       	adc	r25, r19
    194e:	84 0f       	add	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	fc 01       	movw	r30, r24
    1954:	e5 5a       	subi	r30, 0xA5	; 165
    1956:	fe 4f       	sbci	r31, 0xFE	; 254
    1958:	b0 81       	ld	r27, Z
    195a:	88 a1       	ldd	r24, Y+32	; 0x20
    195c:	48 2f       	mov	r20, r24
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	ca 01       	movw	r24, r20
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	9c 01       	movw	r18, r24
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
    1974:	84 0f       	add	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	fc 01       	movw	r30, r24
    197a:	e4 5a       	subi	r30, 0xA4	; 164
    197c:	fe 4f       	sbci	r31, 0xFE	; 254
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	cb 01       	movw	r24, r22
    1984:	6a 2f       	mov	r22, r26
    1986:	4b 2f       	mov	r20, r27
    1988:	6c d2       	rcall	.+1240   	; 0x1e62 <odometry_move_to_position>
    198a:	8e 8f       	std	Y+30, r24	; 0x1e
					green_tactic_three_positions[current_position].direction,green_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    198c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	59 f0       	breq	.+22     	; 0x19a8 <greenside+0x572>
					{
						break;
					}
					if(current_position == 0)
    1992:	88 a1       	ldd	r24, Y+32	; 0x20
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <greenside+0x564>
    1998:	ff cf       	rjmp	.-2      	; 0x1998 <greenside+0x562>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    199a:	88 a1       	ldd	r24, Y+32	; 0x20
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	88 a3       	std	Y+32, r24	; 0x20
    19a0:	88 a1       	ldd	r24, Y+32	; 0x20
    19a2:	88 23       	and	r24, r24
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <greenside+0x572>
    19a6:	a1 cf       	rjmp	.-190    	; 0x18ea <greenside+0x4b4>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    19a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19aa:	88 a3       	std	Y+32, r24	; 0x20
    19ac:	5b c0       	rjmp	.+182    	; 0x1a64 <greenside+0x62e>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_four_positions[current_position].point), green_tactic_four_positions[current_position].speed,
    19ae:	88 a1       	ldd	r24, Y+32	; 0x20
    19b0:	48 2f       	mov	r20, r24
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	ca 01       	movw	r24, r20
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	9c 01       	movw	r18, r24
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	84 0f       	add	r24, r20
    19ca:	95 1f       	adc	r25, r21
    19cc:	82 5a       	subi	r24, 0xA2	; 162
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	bc 01       	movw	r22, r24
    19d2:	88 a1       	ldd	r24, Y+32	; 0x20
    19d4:	48 2f       	mov	r20, r24
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	ca 01       	movw	r24, r20
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	9c 01       	movw	r18, r24
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	82 0f       	add	r24, r18
    19ea:	93 1f       	adc	r25, r19
    19ec:	84 0f       	add	r24, r20
    19ee:	95 1f       	adc	r25, r21
    19f0:	fc 01       	movw	r30, r24
    19f2:	eb 59       	subi	r30, 0x9B	; 155
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	a0 81       	ld	r26, Z
    19f8:	88 a1       	ldd	r24, Y+32	; 0x20
    19fa:	48 2f       	mov	r20, r24
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	ca 01       	movw	r24, r20
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	9c 01       	movw	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	84 0f       	add	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	fc 01       	movw	r30, r24
    1a18:	ea 59       	subi	r30, 0x9A	; 154
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	b0 81       	ld	r27, Z
    1a1e:	88 a1       	ldd	r24, Y+32	; 0x20
    1a20:	48 2f       	mov	r20, r24
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	ca 01       	movw	r24, r20
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	82 0f       	add	r24, r18
    1a36:	93 1f       	adc	r25, r19
    1a38:	84 0f       	add	r24, r20
    1a3a:	95 1f       	adc	r25, r21
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e9 59       	subi	r30, 0x99	; 153
    1a40:	fe 4f       	sbci	r31, 0xFE	; 254
    1a42:	20 81       	ld	r18, Z
    1a44:	31 81       	ldd	r19, Z+1	; 0x01
    1a46:	cb 01       	movw	r24, r22
    1a48:	6a 2f       	mov	r22, r26
    1a4a:	4b 2f       	mov	r20, r27
    1a4c:	0a d2       	rcall	.+1044   	; 0x1e62 <odometry_move_to_position>
    1a4e:	8e 8f       	std	Y+30, r24	; 0x1e
					green_tactic_four_positions[current_position].direction,green_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1a50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	59 f0       	breq	.+22     	; 0x1a6c <greenside+0x636>
					{
						break;
					}
					if(current_position == 0)
    1a56:	88 a1       	ldd	r24, Y+32	; 0x20
    1a58:	88 23       	and	r24, r24
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <greenside+0x628>
    1a5c:	ff cf       	rjmp	.-2      	; 0x1a5c <greenside+0x626>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    1a5e:	88 a1       	ldd	r24, Y+32	; 0x20
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	88 a3       	std	Y+32, r24	; 0x20
    1a64:	88 a1       	ldd	r24, Y+32	; 0x20
    1a66:	88 23       	and	r24, r24
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <greenside+0x636>
    1a6a:	a1 cf       	rjmp	.-190    	; 0x19ae <greenside+0x578>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    1a6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6e:	88 a3       	std	Y+32, r24	; 0x20
    1a70:	5c c0       	rjmp	.+184    	; 0x1b2a <greenside+0x6f4>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_five_positions[current_position].point), green_tactic_five_positions[current_position].speed,
    1a72:	88 a1       	ldd	r24, Y+32	; 0x20
    1a74:	48 2f       	mov	r20, r24
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	ca 01       	movw	r24, r20
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	9c 01       	movw	r18, r24
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	22 0f       	add	r18, r18
    1a86:	33 1f       	adc	r19, r19
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	84 0f       	add	r24, r20
    1a8e:	95 1f       	adc	r25, r21
    1a90:	87 59       	subi	r24, 0x97	; 151
    1a92:	9e 4f       	sbci	r25, 0xFE	; 254
    1a94:	bc 01       	movw	r22, r24
    1a96:	88 a1       	ldd	r24, Y+32	; 0x20
    1a98:	48 2f       	mov	r20, r24
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	ca 01       	movw	r24, r20
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	9c 01       	movw	r18, r24
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	82 0f       	add	r24, r18
    1aae:	93 1f       	adc	r25, r19
    1ab0:	84 0f       	add	r24, r20
    1ab2:	95 1f       	adc	r25, r21
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e0 59       	subi	r30, 0x90	; 144
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	a0 81       	ld	r26, Z
    1abc:	88 a1       	ldd	r24, Y+32	; 0x20
    1abe:	48 2f       	mov	r20, r24
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	9c 01       	movw	r18, r24
    1aca:	22 0f       	add	r18, r18
    1acc:	33 1f       	adc	r19, r19
    1ace:	22 0f       	add	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	84 0f       	add	r24, r20
    1ad8:	95 1f       	adc	r25, r21
    1ada:	fc 01       	movw	r30, r24
    1adc:	ef 58       	subi	r30, 0x8F	; 143
    1ade:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae0:	b0 81       	ld	r27, Z
    1ae2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	ca 01       	movw	r24, r20
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	9c 01       	movw	r18, r24
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	82 0f       	add	r24, r18
    1afa:	93 1f       	adc	r25, r19
    1afc:	84 0f       	add	r24, r20
    1afe:	95 1f       	adc	r25, r21
    1b00:	fc 01       	movw	r30, r24
    1b02:	ee 58       	subi	r30, 0x8E	; 142
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	20 81       	ld	r18, Z
    1b08:	31 81       	ldd	r19, Z+1	; 0x01
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	6a 2f       	mov	r22, r26
    1b0e:	4b 2f       	mov	r20, r27
    1b10:	a8 d1       	rcall	.+848    	; 0x1e62 <odometry_move_to_position>
    1b12:	8e 8f       	std	Y+30, r24	; 0x1e
					green_tactic_five_positions[current_position].direction,green_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1b14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <greenside+0x6e6>
    1b1a:	f7 cd       	rjmp	.-1042   	; 0x170a <greenside+0x2d4>
					{
						break;
					}
					if(current_position == 0)
    1b1c:	88 a1       	ldd	r24, Y+32	; 0x20
    1b1e:	88 23       	and	r24, r24
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <greenside+0x6ee>
    1b22:	ff cf       	rjmp	.-2      	; 0x1b22 <greenside+0x6ec>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    1b24:	88 a1       	ldd	r24, Y+32	; 0x20
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	88 a3       	std	Y+32, r24	; 0x20
    1b2a:	88 a1       	ldd	r24, Y+32	; 0x20
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <greenside+0x6fc>
    1b30:	a0 cf       	rjmp	.-192    	; 0x1a72 <greenside+0x63c>
    1b32:	eb cd       	rjmp	.-1066   	; 0x170a <greenside+0x2d4>

00001b34 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	67 97       	sbiw	r28, 0x17	; 23
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1b4a:	90 91 0c 02 	lds	r25, 0x020C
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	89 17       	cp	r24, r25
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <odometry_set_speed+0x22>
    1b54:	81 c0       	rjmp	.+258    	; 0x1c58 <odometry_set_speed+0x124>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1b56:	86 e5       	ldi	r24, 0x56	; 86
    1b58:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	88 8b       	std	Y+16, r24	; 0x10
    1b5e:	72 c0       	rjmp	.+228    	; 0x1c44 <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a8 e4       	ldi	r26, 0x48	; 72
    1b66:	b2 e4       	ldi	r27, 0x42	; 66
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e4       	ldi	r19, 0x40	; 64
    1b7c:	4c e1       	ldi	r20, 0x1C	; 28
    1b7e:	55 e4       	ldi	r21, 0x45	; 69
    1b80:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <odometry_set_speed+0x7e>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <odometry_set_speed+0xde>
    1bf4:	8a ef       	ldi	r24, 0xFA	; 250
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <odometry_set_speed+0xcc>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <odometry_set_speed+0xc0>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <odometry_set_speed+0x108>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	ce 01       	movw	r24, r28
    1c46:	0f 96       	adiw	r24, 0x0f	; 15
    1c48:	63 ec       	ldi	r22, 0xC3	; 195
    1c4a:	30 d9       	rcall	.-3488   	; 0xeac <CAN_Write>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <odometry_set_speed+0x11e>
    1c50:	87 cf       	rjmp	.-242    	; 0x1b60 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1c52:	8f 89       	ldd	r24, Y+23	; 0x17
    1c54:	80 93 0c 02 	sts	0x020C, r24
}
    1c58:	67 96       	adiw	r28, 0x17	; 23
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <odometry_query_position>:

static void odometry_query_position(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	66 97       	sbiw	r28, 0x16	; 22
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1c7e:	80 e5       	ldi	r24, 0x50	; 80
    1c80:	8f 87       	std	Y+15, r24	; 0x0f
    1c82:	72 c0       	rjmp	.+228    	; 0x1d68 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a8 e4       	ldi	r26, 0x48	; 72
    1c8a:	b2 e4       	ldi	r27, 0x42	; 66
    1c8c:	8b 87       	std	Y+11, r24	; 0x0b
    1c8e:	9c 87       	std	Y+12, r25	; 0x0c
    1c90:	ad 87       	std	Y+13, r26	; 0x0d
    1c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e4       	ldi	r19, 0x40	; 64
    1ca0:	4c e1       	ldi	r20, 0x1C	; 28
    1ca2:	55 e4       	ldi	r21, 0x45	; 69
    1ca4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	98 87       	std	Y+8, r25	; 0x08
    1cb0:	a9 87       	std	Y+9, r26	; 0x09
    1cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <odometry_query_position+0x6c>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <odometry_query_position+0xcc>
    1d18:	8a ef       	ldi	r24, 0xFA	; 250
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <odometry_query_position+0xba>
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <odometry_query_position+0xae>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <odometry_query_position+0xf6>
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	ce 01       	movw	r24, r28
    1d6a:	0f 96       	adiw	r24, 0x0f	; 15
    1d6c:	63 ec       	ldi	r22, 0xC3	; 195
    1d6e:	9e d8       	rcall	.-3780   	; 0xeac <CAN_Write>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <odometry_query_position+0x10c>
    1d74:	87 cf       	rjmp	.-242    	; 0x1c84 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1d76:	ce 01       	movw	r24, r28
    1d78:	0f 96       	adiw	r24, 0x0f	; 15
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	23 d8       	rcall	.-4026   	; 0xdc4 <CAN_Read>

	position.state = buffer[0];
    1d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d80:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1d84:	88 89       	ldd	r24, Y+16	; 0x10
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	38 2f       	mov	r19, r24
    1d8c:	22 27       	eor	r18, r18
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	82 2b       	or	r24, r18
    1d96:	93 2b       	or	r25, r19
    1d98:	90 93 0b 01 	sts	0x010B, r25
    1d9c:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1da0:	8a 89       	ldd	r24, Y+18	; 0x12
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	38 2f       	mov	r19, r24
    1da8:	22 27       	eor	r18, r18
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	82 2b       	or	r24, r18
    1db2:	93 2b       	or	r25, r19
    1db4:	90 93 0d 01 	sts	0x010D, r25
    1db8:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1dbc:	8c 89       	ldd	r24, Y+20	; 0x14
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	38 2f       	mov	r19, r24
    1dc4:	22 27       	eor	r18, r18
    1dc6:	8d 89       	ldd	r24, Y+21	; 0x15
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	82 2b       	or	r24, r18
    1dce:	93 2b       	or	r25, r19
    1dd0:	90 93 0f 01 	sts	0x010F, r25
    1dd4:	80 93 0e 01 	sts	0x010E, r24
}
    1dd8:	66 96       	adiw	r28, 0x16	; 22
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	27 97       	sbiw	r28, 0x07	; 7
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1e02:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <system_get_system_time>
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	ab 83       	std	Y+3, r26	; 0x03
    1e14:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1e16:	29 df       	rcall	.-430    	; 0x1c6a <odometry_query_position>
		if(callback != NULL)
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	71 f0       	breq	.+28     	; 0x1e3c <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	ab 81       	ldd	r26, Y+3	; 0x03
    1e26:	bc 81       	ldd	r27, Y+4	; 0x04
    1e28:	ed 81       	ldd	r30, Y+5	; 0x05
    1e2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	09 95       	icall
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	09 c0       	rjmp	.+18     	; 0x1e4e <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1e3c:	80 91 10 01 	lds	r24, 0x0110
    1e40:	8d 34       	cpi	r24, 0x4D	; 77
    1e42:	49 f3       	breq	.-46     	; 0x1e16 <odometry_wait_until_done+0x2c>
    1e44:	80 91 10 01 	lds	r24, 0x0110
    1e48:	82 35       	cpi	r24, 0x52	; 82
    1e4a:	29 f3       	breq	.-54     	; 0x1e16 <odometry_wait_until_done+0x2c>

	return ODOMETRY_SUCCESS;
    1e4c:	1f 82       	std	Y+7, r1	; 0x07
    1e4e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1e50:	27 96       	adiw	r28, 0x07	; 7
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <odometry_move_to_position>:

	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	6c 97       	sbiw	r28, 0x1c	; 28
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	98 8f       	std	Y+24, r25	; 0x18
    1e78:	8f 8b       	std	Y+23, r24	; 0x17
    1e7a:	69 8f       	std	Y+25, r22	; 0x19
    1e7c:	4a 8f       	std	Y+26, r20	; 0x1a
    1e7e:	3c 8f       	std	Y+28, r19	; 0x1c
    1e80:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1e82:	89 8d       	ldd	r24, Y+25	; 0x19
    1e84:	57 de       	rcall	.-850    	; 0x1b34 <odometry_set_speed>

	buffer[0] = 'G';
    1e86:	87 e4       	ldi	r24, 0x47	; 71
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1e8a:	ef 89       	ldd	r30, Y+23	; 0x17
    1e8c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	89 2f       	mov	r24, r25
    1e94:	99 0f       	add	r25, r25
    1e96:	99 0b       	sbc	r25, r25
    1e98:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1e9a:	ef 89       	ldd	r30, Y+23	; 0x17
    1e9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1ea4:	ef 89       	ldd	r30, Y+23	; 0x17
    1ea6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	89 2f       	mov	r24, r25
    1eae:	99 0f       	add	r25, r25
    1eb0:	99 0b       	sbc	r25, r25
    1eb2:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1eb4:	ef 89       	ldd	r30, Y+23	; 0x17
    1eb6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    1ebe:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1ec0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ec2:	8d 8b       	std	Y+21, r24	; 0x15
    1ec4:	72 c0       	rjmp	.+228    	; 0x1faa <odometry_move_to_position+0x148>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a8 e4       	ldi	r26, 0x48	; 72
    1ecc:	b2 e4       	ldi	r27, 0x42	; 66
    1ece:	8b 87       	std	Y+11, r24	; 0x0b
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	ad 87       	std	Y+13, r26	; 0x0d
    1ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e4       	ldi	r19, 0x40	; 64
    1ee2:	4c e1       	ldi	r20, 0x1C	; 28
    1ee4:	55 e4       	ldi	r21, 0x45	; 69
    1ee6:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8f 83       	std	Y+7, r24	; 0x07
    1ef0:	98 87       	std	Y+8, r25	; 0x08
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
    1ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <odometry_move_to_position+0xb6>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <odometry_move_to_position+0x134>
	else if (__tmp > 65535)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <odometry_move_to_position+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <odometry_move_to_position+0x116>
    1f5a:	8a ef       	ldi	r24, 0xFA	; 250
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <odometry_move_to_position+0x104>
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <odometry_move_to_position+0xf8>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <odometry_move_to_position+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <odometry_move_to_position+0x140>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	ce 01       	movw	r24, r28
    1fac:	0f 96       	adiw	r24, 0x0f	; 15
    1fae:	63 ec       	ldi	r22, 0xC3	; 195
    1fb0:	0e 94 56 07 	call	0xeac	; 0xeac <CAN_Write>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <odometry_move_to_position+0x158>
    1fb8:	86 cf       	rjmp	.-244    	; 0x1ec6 <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbe:	15 df       	rcall	.-470    	; 0x1dea <odometry_wait_until_done>
}
    1fc0:	6c 96       	adiw	r28, 0x1c	; 28
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	68 97       	sbiw	r28, 0x18	; 24
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	98 8f       	std	Y+24, r25	; 0x18
    1fe8:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1fea:	89 e4       	ldi	r24, 0x49	; 73
    1fec:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1fee:	ef 89       	ldd	r30, Y+23	; 0x17
    1ff0:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	89 2f       	mov	r24, r25
    1ff8:	99 0f       	add	r25, r25
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1ffe:	ef 89       	ldd	r30, Y+23	; 0x17
    2000:	f8 8d       	ldd	r31, Y+24	; 0x18
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    2008:	ef 89       	ldd	r30, Y+23	; 0x17
    200a:	f8 8d       	ldd	r31, Y+24	; 0x18
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	89 2f       	mov	r24, r25
    2012:	99 0f       	add	r25, r25
    2014:	99 0b       	sbc	r25, r25
    2016:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    2018:	ef 89       	ldd	r30, Y+23	; 0x17
    201a:	f8 8d       	ldd	r31, Y+24	; 0x18
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    2022:	ef 89       	ldd	r30, Y+23	; 0x17
    2024:	f8 8d       	ldd	r31, Y+24	; 0x18
    2026:	84 81       	ldd	r24, Z+4	; 0x04
    2028:	95 81       	ldd	r25, Z+5	; 0x05
    202a:	89 2f       	mov	r24, r25
    202c:	99 0f       	add	r25, r25
    202e:	99 0b       	sbc	r25, r25
    2030:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    2032:	ef 89       	ldd	r30, Y+23	; 0x17
    2034:	f8 8d       	ldd	r31, Y+24	; 0x18
    2036:	84 81       	ldd	r24, Z+4	; 0x04
    2038:	95 81       	ldd	r25, Z+5	; 0x05
    203a:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    203c:	ef 89       	ldd	r30, Y+23	; 0x17
    203e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	90 93 0b 01 	sts	0x010B, r25
    2048:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    204c:	ef 89       	ldd	r30, Y+23	; 0x17
    204e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	90 93 0d 01 	sts	0x010D, r25
    2058:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    205c:	ef 89       	ldd	r30, Y+23	; 0x17
    205e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2060:	84 81       	ldd	r24, Z+4	; 0x04
    2062:	95 81       	ldd	r25, Z+5	; 0x05
    2064:	90 93 0f 01 	sts	0x010F, r25
    2068:	80 93 0e 01 	sts	0x010E, r24
    206c:	72 c0       	rjmp	.+228    	; 0x2152 <odometry_set_position+0x180>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a8 e4       	ldi	r26, 0x48	; 72
    2074:	b2 e4       	ldi	r27, 0x42	; 66
    2076:	8b 87       	std	Y+11, r24	; 0x0b
    2078:	9c 87       	std	Y+12, r25	; 0x0c
    207a:	ad 87       	std	Y+13, r26	; 0x0d
    207c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2080:	7c 85       	ldd	r23, Y+12	; 0x0c
    2082:	8d 85       	ldd	r24, Y+13	; 0x0d
    2084:	9e 85       	ldd	r25, Y+14	; 0x0e
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e4       	ldi	r19, 0x40	; 64
    208a:	4c e1       	ldi	r20, 0x1C	; 28
    208c:	55 e4       	ldi	r21, 0x45	; 69
    208e:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	98 87       	std	Y+8, r25	; 0x08
    209a:	a9 87       	std	Y+9, r26	; 0x09
    209c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <odometry_set_position+0xee>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	3f c0       	rjmp	.+126    	; 0x213e <odometry_set_position+0x16c>
	else if (__tmp > 65535)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <odometry_set_position+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <odometry_set_position+0x14e>
    2102:	8a ef       	ldi	r24, 0xFA	; 250
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <odometry_set_position+0x13c>
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <odometry_set_position+0x130>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <odometry_set_position+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6f 81       	ldd	r22, Y+7	; 0x07
    212c:	78 85       	ldd	r23, Y+8	; 0x08
    212e:	89 85       	ldd	r24, Y+9	; 0x09
    2130:	9a 85       	ldd	r25, Y+10	; 0x0a
    2132:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <odometry_set_position+0x178>
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	ce 01       	movw	r24, r28
    2154:	0f 96       	adiw	r24, 0x0f	; 15
    2156:	63 ec       	ldi	r22, 0xC3	; 195
    2158:	0e 94 56 07 	call	0xeac	; 0xeac <CAN_Write>
    215c:	88 23       	and	r24, r24
    215e:	09 f0       	breq	.+2      	; 0x2162 <odometry_set_position+0x190>
    2160:	86 cf       	rjmp	.-244    	; 0x206e <odometry_set_position+0x9c>
		_delay_ms(50);
}
    2162:	68 96       	adiw	r28, 0x18	; 24
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	6b 97       	sbiw	r28, 0x1b	; 27
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	98 8f       	std	Y+24, r25	; 0x18
    218a:	8f 8b       	std	Y+23, r24	; 0x17
    218c:	69 8f       	std	Y+25, r22	; 0x19
    218e:	5b 8f       	std	Y+27, r21	; 0x1b
    2190:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2192:	89 8d       	ldd	r24, Y+25	; 0x19
    2194:	cf dc       	rcall	.-1634   	; 0x1b34 <odometry_set_speed>

	buffer[0] = 'T';
    2196:	84 e5       	ldi	r24, 0x54	; 84
    2198:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	89 2f       	mov	r24, r25
    21a0:	99 27       	eor	r25, r25
    21a2:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	89 8b       	std	Y+17, r24	; 0x11
    21a8:	72 c0       	rjmp	.+228    	; 0x228e <odometry_rotate_for+0x11a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a8 e4       	ldi	r26, 0x48	; 72
    21b0:	b2 e4       	ldi	r27, 0x42	; 66
    21b2:	8b 87       	std	Y+11, r24	; 0x0b
    21b4:	9c 87       	std	Y+12, r25	; 0x0c
    21b6:	ad 87       	std	Y+13, r26	; 0x0d
    21b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e4       	ldi	r19, 0x40	; 64
    21c6:	4c e1       	ldi	r20, 0x1C	; 28
    21c8:	55 e4       	ldi	r21, 0x45	; 69
    21ca:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8f 83       	std	Y+7, r24	; 0x07
    21d4:	98 87       	std	Y+8, r25	; 0x08
    21d6:	a9 87       	std	Y+9, r26	; 0x09
    21d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21da:	6f 81       	ldd	r22, Y+7	; 0x07
    21dc:	78 85       	ldd	r23, Y+8	; 0x08
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <odometry_rotate_for+0x88>
		__ticks = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	3f c0       	rjmp	.+126    	; 0x227a <odometry_rotate_for+0x106>
	else if (__tmp > 65535)
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    2210:	18 16       	cp	r1, r24
    2212:	4c f5       	brge	.+82     	; 0x2266 <odometry_rotate_for+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	6b 85       	ldd	r22, Y+11	; 0x0b
    2216:	7c 85       	ldd	r23, Y+12	; 0x0c
    2218:	8d 85       	ldd	r24, Y+13	; 0x0d
    221a:	9e 85       	ldd	r25, Y+14	; 0x0e
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	0f c0       	rjmp	.+30     	; 0x225c <odometry_rotate_for+0xe8>
    223e:	8a ef       	ldi	r24, 0xFA	; 250
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <odometry_rotate_for+0xd6>
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	69 f7       	brne	.-38     	; 0x223e <odometry_rotate_for+0xca>
    2264:	14 c0       	rjmp	.+40     	; 0x228e <odometry_rotate_for+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <odometry_rotate_for+0x112>
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	ce 01       	movw	r24, r28
    2290:	0f 96       	adiw	r24, 0x0f	; 15
    2292:	63 ec       	ldi	r22, 0xC3	; 195
    2294:	0e 94 56 07 	call	0xeac	; 0xeac <CAN_Write>
    2298:	88 23       	and	r24, r24
    229a:	09 f0       	breq	.+2      	; 0x229e <odometry_rotate_for+0x12a>
    229c:	86 cf       	rjmp	.-244    	; 0x21aa <odometry_rotate_for+0x36>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    229e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22a2:	a3 dd       	rcall	.-1210   	; 0x1dea <odometry_wait_until_done>

}
    22a4:	6b 96       	adiw	r28, 0x1b	; 27
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <purpleside>:
const struct goto_fields purple_tactic_five_positions[TACTIC_FIVE_POSITION_COUNT] =
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}	
};
void purpleside(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	a9 97       	sbiw	r28, 0x29	; 41
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    22ca:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t next_position	 = 0;
    22cc:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8_t odometry_status;
	uint8_t active_state;
	//uint8_t active_state = ROBOT_STATE_TACTIC_ONE;//for testing
	
	starting_position.x		= 85;
    22ce:	85 e5       	ldi	r24, 0x55	; 85
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a a3       	std	Y+34, r25	; 0x22
    22d4:	89 a3       	std	Y+33, r24	; 0x21
	starting_position.y		= 1020;
    22d6:	8c ef       	ldi	r24, 0xFC	; 252
    22d8:	93 e0       	ldi	r25, 0x03	; 3
    22da:	9c a3       	std	Y+36, r25	; 0x24
    22dc:	8b a3       	std	Y+35, r24	; 0x23
	starting_position.angle = 90;
    22de:	8a e5       	ldi	r24, 0x5A	; 90
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9e a3       	std	Y+38, r25	; 0x26
    22e4:	8d a3       	std	Y+37, r24	; 0x25
	
	odometry_set_position(&starting_position);
    22e6:	ce 01       	movw	r24, r28
    22e8:	81 96       	adiw	r24, 0x21	; 33
    22ea:	73 de       	rcall	.-794    	; 0x1fd2 <odometry_set_position>
	//																		//
	//							CAMERA MOVEMENT							    //
	//																		//
	//////////////////////////////////////////////////////////////////////////
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION_COUNT; current_position++)
    22ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ee:	88 a3       	std	Y+32, r24	; 0x20
    22f0:	47 c1       	rjmp	.+654    	; 0x2580 <purpleside+0x2ca>
	{
		odometry_status = odometry_move_to_position(&(purple_camera_move[current_position].point), purple_camera_move[current_position].speed,
    22f2:	88 a1       	ldd	r24, Y+32	; 0x20
    22f4:	48 2f       	mov	r20, r24
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	ca 01       	movw	r24, r20
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	9c 01       	movw	r18, r24
    2300:	22 0f       	add	r18, r18
    2302:	33 1f       	adc	r19, r19
    2304:	22 0f       	add	r18, r18
    2306:	33 1f       	adc	r19, r19
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	84 0f       	add	r24, r20
    230e:	95 1f       	adc	r25, r21
    2310:	8c 58       	subi	r24, 0x8C	; 140
    2312:	9e 4f       	sbci	r25, 0xFE	; 254
    2314:	bc 01       	movw	r22, r24
    2316:	88 a1       	ldd	r24, Y+32	; 0x20
    2318:	48 2f       	mov	r20, r24
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	ca 01       	movw	r24, r20
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	9c 01       	movw	r18, r24
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	84 0f       	add	r24, r20
    2332:	95 1f       	adc	r25, r21
    2334:	fc 01       	movw	r30, r24
    2336:	e5 58       	subi	r30, 0x85	; 133
    2338:	fe 4f       	sbci	r31, 0xFE	; 254
    233a:	a0 81       	ld	r26, Z
    233c:	88 a1       	ldd	r24, Y+32	; 0x20
    233e:	48 2f       	mov	r20, r24
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	ca 01       	movw	r24, r20
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	9c 01       	movw	r18, r24
    234a:	22 0f       	add	r18, r18
    234c:	33 1f       	adc	r19, r19
    234e:	22 0f       	add	r18, r18
    2350:	33 1f       	adc	r19, r19
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	84 0f       	add	r24, r20
    2358:	95 1f       	adc	r25, r21
    235a:	fc 01       	movw	r30, r24
    235c:	e4 58       	subi	r30, 0x84	; 132
    235e:	fe 4f       	sbci	r31, 0xFE	; 254
    2360:	b0 81       	ld	r27, Z
    2362:	88 a1       	ldd	r24, Y+32	; 0x20
    2364:	48 2f       	mov	r20, r24
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	ca 01       	movw	r24, r20
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	9c 01       	movw	r18, r24
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	84 0f       	add	r24, r20
    237e:	95 1f       	adc	r25, r21
    2380:	fc 01       	movw	r30, r24
    2382:	e3 58       	subi	r30, 0x83	; 131
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	20 81       	ld	r18, Z
    2388:	31 81       	ldd	r19, Z+1	; 0x01
    238a:	cb 01       	movw	r24, r22
    238c:	6a 2f       	mov	r22, r26
    238e:	4b 2f       	mov	r20, r27
    2390:	68 dd       	rcall	.-1328   	; 0x1e62 <odometry_move_to_position>
    2392:	8e 8f       	std	Y+30, r24	; 0x1e
		purple_camera_move[current_position].direction,purple_camera_move[current_position].callback);
		if(odometry_status == ODOMETRY_FAIL)
    2394:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	09 f4       	brne	.+2      	; 0x239c <purpleside+0xe6>
    239a:	f6 c0       	rjmp	.+492    	; 0x2588 <purpleside+0x2d2>
		{
			break;
		}
		if(current_position == 3)
    239c:	88 a1       	ldd	r24, Y+32	; 0x20
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <purpleside+0xee>
    23a2:	eb c0       	rjmp	.+470    	; 0x257a <purpleside+0x2c4>
		{
			odometry_rotate_for(-85,NORMAL_SPEED,NULL);
    23a4:	8b ea       	ldi	r24, 0xAB	; 171
    23a6:	9f ef       	ldi	r25, 0xFF	; 255
    23a8:	61 e4       	ldi	r22, 0x41	; 65
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	e2 de       	rcall	.-572    	; 0x2174 <odometry_rotate_for>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a8 e4       	ldi	r26, 0x48	; 72
    23b6:	b3 e4       	ldi	r27, 0x43	; 67
    23b8:	89 8f       	std	Y+25, r24	; 0x19
    23ba:	9a 8f       	std	Y+26, r25	; 0x1a
    23bc:	ab 8f       	std	Y+27, r26	; 0x1b
    23be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e4       	ldi	r19, 0x40	; 64
    23cc:	4c e1       	ldi	r20, 0x1C	; 28
    23ce:	55 e4       	ldi	r21, 0x45	; 69
    23d0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8d 8b       	std	Y+21, r24	; 0x15
    23da:	9e 8b       	std	Y+22, r25	; 0x16
    23dc:	af 8b       	std	Y+23, r26	; 0x17
    23de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <purpleside+0x14c>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <purpleside+0x1ca>
	else if (__tmp > 65535)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <purpleside+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	69 8d       	ldd	r22, Y+25	; 0x19
    241c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <purpleside+0x1ac>
    2444:	8a ef       	ldi	r24, 0xFA	; 250
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9a 8b       	std	Y+18, r25	; 0x12
    244a:	89 8b       	std	Y+17, r24	; 0x11
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	9a 89       	ldd	r25, Y+18	; 0x12
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <purpleside+0x19a>
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <purpleside+0x18e>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <purpleside+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	98 8b       	std	Y+16, r25	; 0x10
    2486:	8f 87       	std	Y+15, r24	; 0x0f
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	98 89       	ldd	r25, Y+16	; 0x10
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <purpleside+0x1d6>
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			//do the camera work
			do_the_camera();
    2494:	31 d5       	rcall	.+2658   	; 0x2ef8 <do_the_camera>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	aa ef       	ldi	r26, 0xFA	; 250
    249c:	b3 e4       	ldi	r27, 0x43	; 67
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	9c 87       	std	Y+12, r25	; 0x0c
    24a2:	ad 87       	std	Y+13, r26	; 0x0d
    24a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e4       	ldi	r19, 0x40	; 64
    24b2:	4c e1       	ldi	r20, 0x1C	; 28
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8f 83       	std	Y+7, r24	; 0x07
    24c0:	98 87       	std	Y+8, r25	; 0x08
    24c2:	a9 87       	std	Y+9, r26	; 0x09
    24c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 90 1a 	call	0x3520	; 0x3520 <__cmpsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <purpleside+0x232>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <purpleside+0x2b0>
	else if (__tmp > 65535)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 df 1b 	call	0x37be	; 0x37be <__gesf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <purpleside+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <purpleside+0x292>
    252a:	8a ef       	ldi	r24, 0xFA	; 250
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	8b 83       	std	Y+3, r24	; 0x03
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <purpleside+0x280>
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <purpleside+0x274>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <purpleside+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <purpleside+0x2bc>
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
	//																		//
	//							CAMERA MOVEMENT							    //
	//																		//
	//////////////////////////////////////////////////////////////////////////
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION_COUNT; current_position++)
    257a:	88 a1       	ldd	r24, Y+32	; 0x20
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	88 a3       	std	Y+32, r24	; 0x20
    2580:	88 a1       	ldd	r24, Y+32	; 0x20
    2582:	84 30       	cpi	r24, 0x04	; 4
    2584:	08 f4       	brcc	.+2      	; 0x2588 <purpleside+0x2d2>
    2586:	b5 ce       	rjmp	.-662    	; 0x22f2 <purpleside+0x3c>
	}//end for
	
	//////////////////////////////////////////////////////////////////////////
	
	//setting active state
	active_state = return_active_state();
    2588:	ac d4       	rcall	.+2392   	; 0x2ee2 <return_active_state>
    258a:	8d 8f       	std	Y+29, r24	; 0x1d
	
	
	while(1)
	{
		switch(active_state)
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	39 a7       	std	Y+41, r19	; 0x29
    2594:	28 a7       	std	Y+40, r18	; 0x28
    2596:	88 a5       	ldd	r24, Y+40	; 0x28
    2598:	99 a5       	ldd	r25, Y+41	; 0x29
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	91 05       	cpc	r25, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <purpleside+0x2ec>
    25a0:	e2 c0       	rjmp	.+452    	; 0x2766 <purpleside+0x4b0>
    25a2:	28 a5       	ldd	r18, Y+40	; 0x28
    25a4:	39 a5       	ldd	r19, Y+41	; 0x29
    25a6:	25 30       	cpi	r18, 0x05	; 5
    25a8:	31 05       	cpc	r19, r1
    25aa:	64 f4       	brge	.+24     	; 0x25c4 <purpleside+0x30e>
    25ac:	88 a5       	ldd	r24, Y+40	; 0x28
    25ae:	99 a5       	ldd	r25, Y+41	; 0x29
    25b0:	82 30       	cpi	r24, 0x02	; 2
    25b2:	91 05       	cpc	r25, r1
    25b4:	a1 f0       	breq	.+40     	; 0x25de <purpleside+0x328>
    25b6:	28 a5       	ldd	r18, Y+40	; 0x28
    25b8:	39 a5       	ldd	r19, Y+41	; 0x29
    25ba:	23 30       	cpi	r18, 0x03	; 3
    25bc:	31 05       	cpc	r19, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <purpleside+0x30c>
    25c0:	70 c0       	rjmp	.+224    	; 0x26a2 <purpleside+0x3ec>
    25c2:	e4 cf       	rjmp	.-56     	; 0x258c <purpleside+0x2d6>
    25c4:	88 a5       	ldd	r24, Y+40	; 0x28
    25c6:	99 a5       	ldd	r25, Y+41	; 0x29
    25c8:	85 30       	cpi	r24, 0x05	; 5
    25ca:	91 05       	cpc	r25, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <purpleside+0x31a>
    25ce:	2d c1       	rjmp	.+602    	; 0x282a <purpleside+0x574>
    25d0:	28 a5       	ldd	r18, Y+40	; 0x28
    25d2:	39 a5       	ldd	r19, Y+41	; 0x29
    25d4:	26 30       	cpi	r18, 0x06	; 6
    25d6:	31 05       	cpc	r19, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <purpleside+0x326>
    25da:	89 c1       	rjmp	.+786    	; 0x28ee <purpleside+0x638>
    25dc:	d7 cf       	rjmp	.-82     	; 0x258c <purpleside+0x2d6>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    25de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e0:	88 a3       	std	Y+32, r24	; 0x20
    25e2:	5b c0       	rjmp	.+182    	; 0x269a <purpleside+0x3e4>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    25e4:	88 a1       	ldd	r24, Y+32	; 0x20
    25e6:	48 2f       	mov	r20, r24
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	ca 01       	movw	r24, r20
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	9c 01       	movw	r18, r24
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	22 0f       	add	r18, r18
    25f8:	33 1f       	adc	r19, r19
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	84 0f       	add	r24, r20
    2600:	95 1f       	adc	r25, r21
    2602:	80 56       	subi	r24, 0x60	; 96
    2604:	9e 4f       	sbci	r25, 0xFE	; 254
    2606:	bc 01       	movw	r22, r24
    2608:	88 a1       	ldd	r24, Y+32	; 0x20
    260a:	48 2f       	mov	r20, r24
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	ca 01       	movw	r24, r20
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	9c 01       	movw	r18, r24
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	22 0f       	add	r18, r18
    261c:	33 1f       	adc	r19, r19
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	84 0f       	add	r24, r20
    2624:	95 1f       	adc	r25, r21
    2626:	fc 01       	movw	r30, r24
    2628:	e9 55       	subi	r30, 0x59	; 89
    262a:	fe 4f       	sbci	r31, 0xFE	; 254
    262c:	a0 81       	ld	r26, Z
    262e:	88 a1       	ldd	r24, Y+32	; 0x20
    2630:	48 2f       	mov	r20, r24
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	ca 01       	movw	r24, r20
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	9c 01       	movw	r18, r24
    263c:	22 0f       	add	r18, r18
    263e:	33 1f       	adc	r19, r19
    2640:	22 0f       	add	r18, r18
    2642:	33 1f       	adc	r19, r19
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	84 0f       	add	r24, r20
    264a:	95 1f       	adc	r25, r21
    264c:	fc 01       	movw	r30, r24
    264e:	e8 55       	subi	r30, 0x58	; 88
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	b0 81       	ld	r27, Z
    2654:	88 a1       	ldd	r24, Y+32	; 0x20
    2656:	48 2f       	mov	r20, r24
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	ca 01       	movw	r24, r20
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	9c 01       	movw	r18, r24
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	82 0f       	add	r24, r18
    266c:	93 1f       	adc	r25, r19
    266e:	84 0f       	add	r24, r20
    2670:	95 1f       	adc	r25, r21
    2672:	fc 01       	movw	r30, r24
    2674:	e7 55       	subi	r30, 0x57	; 87
    2676:	fe 4f       	sbci	r31, 0xFE	; 254
    2678:	20 81       	ld	r18, Z
    267a:	31 81       	ldd	r19, Z+1	; 0x01
    267c:	cb 01       	movw	r24, r22
    267e:	6a 2f       	mov	r22, r26
    2680:	4b 2f       	mov	r20, r27
    2682:	ef db       	rcall	.-2082   	; 0x1e62 <odometry_move_to_position>
    2684:	8e 8f       	std	Y+30, r24	; 0x1e
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    2686:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	59 f0       	breq	.+22     	; 0x26a2 <purpleside+0x3ec>
					{
						break;
					}
					if(current_position == 0)
    268c:	88 a1       	ldd	r24, Y+32	; 0x20
    268e:	88 23       	and	r24, r24
    2690:	09 f4       	brne	.+2      	; 0x2694 <purpleside+0x3de>
    2692:	ff cf       	rjmp	.-2      	; 0x2692 <purpleside+0x3dc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2694:	88 a1       	ldd	r24, Y+32	; 0x20
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	88 a3       	std	Y+32, r24	; 0x20
    269a:	88 a1       	ldd	r24, Y+32	; 0x20
    269c:	88 23       	and	r24, r24
    269e:	09 f4       	brne	.+2      	; 0x26a2 <purpleside+0x3ec>
    26a0:	a1 cf       	rjmp	.-190    	; 0x25e4 <purpleside+0x32e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    26a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a4:	88 a3       	std	Y+32, r24	; 0x20
    26a6:	5b c0       	rjmp	.+182    	; 0x275e <purpleside+0x4a8>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_two_positions[current_position].point), purple_tactic_two_positions[current_position].speed,
    26a8:	88 a1       	ldd	r24, Y+32	; 0x20
    26aa:	48 2f       	mov	r20, r24
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	ca 01       	movw	r24, r20
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	9c 01       	movw	r18, r24
    26b6:	22 0f       	add	r18, r18
    26b8:	33 1f       	adc	r19, r19
    26ba:	22 0f       	add	r18, r18
    26bc:	33 1f       	adc	r19, r19
    26be:	82 0f       	add	r24, r18
    26c0:	93 1f       	adc	r25, r19
    26c2:	84 0f       	add	r24, r20
    26c4:	95 1f       	adc	r25, r21
    26c6:	85 55       	subi	r24, 0x55	; 85
    26c8:	9e 4f       	sbci	r25, 0xFE	; 254
    26ca:	bc 01       	movw	r22, r24
    26cc:	88 a1       	ldd	r24, Y+32	; 0x20
    26ce:	48 2f       	mov	r20, r24
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	ca 01       	movw	r24, r20
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	9c 01       	movw	r18, r24
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	84 0f       	add	r24, r20
    26e8:	95 1f       	adc	r25, r21
    26ea:	fc 01       	movw	r30, r24
    26ec:	ee 54       	subi	r30, 0x4E	; 78
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	a0 81       	ld	r26, Z
    26f2:	88 a1       	ldd	r24, Y+32	; 0x20
    26f4:	48 2f       	mov	r20, r24
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	ca 01       	movw	r24, r20
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	9c 01       	movw	r18, r24
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	22 0f       	add	r18, r18
    2706:	33 1f       	adc	r19, r19
    2708:	82 0f       	add	r24, r18
    270a:	93 1f       	adc	r25, r19
    270c:	84 0f       	add	r24, r20
    270e:	95 1f       	adc	r25, r21
    2710:	fc 01       	movw	r30, r24
    2712:	ed 54       	subi	r30, 0x4D	; 77
    2714:	fe 4f       	sbci	r31, 0xFE	; 254
    2716:	b0 81       	ld	r27, Z
    2718:	88 a1       	ldd	r24, Y+32	; 0x20
    271a:	48 2f       	mov	r20, r24
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	ca 01       	movw	r24, r20
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	9c 01       	movw	r18, r24
    2726:	22 0f       	add	r18, r18
    2728:	33 1f       	adc	r19, r19
    272a:	22 0f       	add	r18, r18
    272c:	33 1f       	adc	r19, r19
    272e:	82 0f       	add	r24, r18
    2730:	93 1f       	adc	r25, r19
    2732:	84 0f       	add	r24, r20
    2734:	95 1f       	adc	r25, r21
    2736:	fc 01       	movw	r30, r24
    2738:	ec 54       	subi	r30, 0x4C	; 76
    273a:	fe 4f       	sbci	r31, 0xFE	; 254
    273c:	20 81       	ld	r18, Z
    273e:	31 81       	ldd	r19, Z+1	; 0x01
    2740:	cb 01       	movw	r24, r22
    2742:	6a 2f       	mov	r22, r26
    2744:	4b 2f       	mov	r20, r27
    2746:	8d db       	rcall	.-2278   	; 0x1e62 <odometry_move_to_position>
    2748:	8e 8f       	std	Y+30, r24	; 0x1e
					purple_tactic_two_positions[current_position].direction,purple_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    274a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	59 f0       	breq	.+22     	; 0x2766 <purpleside+0x4b0>
					{
						break;
					}
					if(current_position == 0)
    2750:	88 a1       	ldd	r24, Y+32	; 0x20
    2752:	88 23       	and	r24, r24
    2754:	09 f4       	brne	.+2      	; 0x2758 <purpleside+0x4a2>
    2756:	ff cf       	rjmp	.-2      	; 0x2756 <purpleside+0x4a0>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    2758:	88 a1       	ldd	r24, Y+32	; 0x20
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	88 a3       	std	Y+32, r24	; 0x20
    275e:	88 a1       	ldd	r24, Y+32	; 0x20
    2760:	88 23       	and	r24, r24
    2762:	09 f4       	brne	.+2      	; 0x2766 <purpleside+0x4b0>
    2764:	a1 cf       	rjmp	.-190    	; 0x26a8 <purpleside+0x3f2>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    2766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2768:	88 a3       	std	Y+32, r24	; 0x20
    276a:	5b c0       	rjmp	.+182    	; 0x2822 <purpleside+0x56c>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_three_positions[current_position].point), purple_tactic_three_positions[current_position].speed,
    276c:	88 a1       	ldd	r24, Y+32	; 0x20
    276e:	48 2f       	mov	r20, r24
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	ca 01       	movw	r24, r20
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	9c 01       	movw	r18, r24
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	84 0f       	add	r24, r20
    2788:	95 1f       	adc	r25, r21
    278a:	8a 54       	subi	r24, 0x4A	; 74
    278c:	9e 4f       	sbci	r25, 0xFE	; 254
    278e:	bc 01       	movw	r22, r24
    2790:	88 a1       	ldd	r24, Y+32	; 0x20
    2792:	48 2f       	mov	r20, r24
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	ca 01       	movw	r24, r20
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	84 0f       	add	r24, r20
    27ac:	95 1f       	adc	r25, r21
    27ae:	fc 01       	movw	r30, r24
    27b0:	e3 54       	subi	r30, 0x43	; 67
    27b2:	fe 4f       	sbci	r31, 0xFE	; 254
    27b4:	a0 81       	ld	r26, Z
    27b6:	88 a1       	ldd	r24, Y+32	; 0x20
    27b8:	48 2f       	mov	r20, r24
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	ca 01       	movw	r24, r20
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	9c 01       	movw	r18, r24
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	84 0f       	add	r24, r20
    27d2:	95 1f       	adc	r25, r21
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 54       	subi	r30, 0x42	; 66
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	b0 81       	ld	r27, Z
    27dc:	88 a1       	ldd	r24, Y+32	; 0x20
    27de:	48 2f       	mov	r20, r24
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	ca 01       	movw	r24, r20
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	9c 01       	movw	r18, r24
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	22 0f       	add	r18, r18
    27f0:	33 1f       	adc	r19, r19
    27f2:	82 0f       	add	r24, r18
    27f4:	93 1f       	adc	r25, r19
    27f6:	84 0f       	add	r24, r20
    27f8:	95 1f       	adc	r25, r21
    27fa:	fc 01       	movw	r30, r24
    27fc:	e1 54       	subi	r30, 0x41	; 65
    27fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2800:	20 81       	ld	r18, Z
    2802:	31 81       	ldd	r19, Z+1	; 0x01
    2804:	cb 01       	movw	r24, r22
    2806:	6a 2f       	mov	r22, r26
    2808:	4b 2f       	mov	r20, r27
    280a:	2b db       	rcall	.-2474   	; 0x1e62 <odometry_move_to_position>
    280c:	8e 8f       	std	Y+30, r24	; 0x1e
					purple_tactic_three_positions[current_position].direction,purple_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    280e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	59 f0       	breq	.+22     	; 0x282a <purpleside+0x574>
					{
						break;
					}
					if(current_position == 0)
    2814:	88 a1       	ldd	r24, Y+32	; 0x20
    2816:	88 23       	and	r24, r24
    2818:	09 f4       	brne	.+2      	; 0x281c <purpleside+0x566>
    281a:	ff cf       	rjmp	.-2      	; 0x281a <purpleside+0x564>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    281c:	88 a1       	ldd	r24, Y+32	; 0x20
    281e:	8f 5f       	subi	r24, 0xFF	; 255
    2820:	88 a3       	std	Y+32, r24	; 0x20
    2822:	88 a1       	ldd	r24, Y+32	; 0x20
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <purpleside+0x574>
    2828:	a1 cf       	rjmp	.-190    	; 0x276c <purpleside+0x4b6>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    282a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    282c:	88 a3       	std	Y+32, r24	; 0x20
    282e:	5b c0       	rjmp	.+182    	; 0x28e6 <purpleside+0x630>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_four_positions[current_position].point), purple_tactic_four_positions[current_position].speed,
    2830:	88 a1       	ldd	r24, Y+32	; 0x20
    2832:	48 2f       	mov	r20, r24
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	ca 01       	movw	r24, r20
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	9c 01       	movw	r18, r24
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	84 0f       	add	r24, r20
    284c:	95 1f       	adc	r25, r21
    284e:	8f 53       	subi	r24, 0x3F	; 63
    2850:	9e 4f       	sbci	r25, 0xFE	; 254
    2852:	bc 01       	movw	r22, r24
    2854:	88 a1       	ldd	r24, Y+32	; 0x20
    2856:	48 2f       	mov	r20, r24
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	ca 01       	movw	r24, r20
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	9c 01       	movw	r18, r24
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	22 0f       	add	r18, r18
    2868:	33 1f       	adc	r19, r19
    286a:	82 0f       	add	r24, r18
    286c:	93 1f       	adc	r25, r19
    286e:	84 0f       	add	r24, r20
    2870:	95 1f       	adc	r25, r21
    2872:	fc 01       	movw	r30, r24
    2874:	e8 53       	subi	r30, 0x38	; 56
    2876:	fe 4f       	sbci	r31, 0xFE	; 254
    2878:	a0 81       	ld	r26, Z
    287a:	88 a1       	ldd	r24, Y+32	; 0x20
    287c:	48 2f       	mov	r20, r24
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	ca 01       	movw	r24, r20
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	9c 01       	movw	r18, r24
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	22 0f       	add	r18, r18
    288e:	33 1f       	adc	r19, r19
    2890:	82 0f       	add	r24, r18
    2892:	93 1f       	adc	r25, r19
    2894:	84 0f       	add	r24, r20
    2896:	95 1f       	adc	r25, r21
    2898:	fc 01       	movw	r30, r24
    289a:	e7 53       	subi	r30, 0x37	; 55
    289c:	fe 4f       	sbci	r31, 0xFE	; 254
    289e:	b0 81       	ld	r27, Z
    28a0:	88 a1       	ldd	r24, Y+32	; 0x20
    28a2:	48 2f       	mov	r20, r24
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	ca 01       	movw	r24, r20
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	9c 01       	movw	r18, r24
    28ae:	22 0f       	add	r18, r18
    28b0:	33 1f       	adc	r19, r19
    28b2:	22 0f       	add	r18, r18
    28b4:	33 1f       	adc	r19, r19
    28b6:	82 0f       	add	r24, r18
    28b8:	93 1f       	adc	r25, r19
    28ba:	84 0f       	add	r24, r20
    28bc:	95 1f       	adc	r25, r21
    28be:	fc 01       	movw	r30, r24
    28c0:	e6 53       	subi	r30, 0x36	; 54
    28c2:	fe 4f       	sbci	r31, 0xFE	; 254
    28c4:	20 81       	ld	r18, Z
    28c6:	31 81       	ldd	r19, Z+1	; 0x01
    28c8:	cb 01       	movw	r24, r22
    28ca:	6a 2f       	mov	r22, r26
    28cc:	4b 2f       	mov	r20, r27
    28ce:	c9 da       	rcall	.-2670   	; 0x1e62 <odometry_move_to_position>
    28d0:	8e 8f       	std	Y+30, r24	; 0x1e
					purple_tactic_four_positions[current_position].direction,purple_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    28d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	59 f0       	breq	.+22     	; 0x28ee <purpleside+0x638>
					{
						break;
					}
					if(current_position == 0)
    28d8:	88 a1       	ldd	r24, Y+32	; 0x20
    28da:	88 23       	and	r24, r24
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <purpleside+0x62a>
    28de:	ff cf       	rjmp	.-2      	; 0x28de <purpleside+0x628>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    28e0:	88 a1       	ldd	r24, Y+32	; 0x20
    28e2:	8f 5f       	subi	r24, 0xFF	; 255
    28e4:	88 a3       	std	Y+32, r24	; 0x20
    28e6:	88 a1       	ldd	r24, Y+32	; 0x20
    28e8:	88 23       	and	r24, r24
    28ea:	09 f4       	brne	.+2      	; 0x28ee <purpleside+0x638>
    28ec:	a1 cf       	rjmp	.-190    	; 0x2830 <purpleside+0x57a>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    28ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f0:	88 a3       	std	Y+32, r24	; 0x20
    28f2:	5c c0       	rjmp	.+184    	; 0x29ac <purpleside+0x6f6>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_five_positions[current_position].point), purple_tactic_five_positions[current_position].speed,
    28f4:	88 a1       	ldd	r24, Y+32	; 0x20
    28f6:	48 2f       	mov	r20, r24
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	ca 01       	movw	r24, r20
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	9c 01       	movw	r18, r24
    2902:	22 0f       	add	r18, r18
    2904:	33 1f       	adc	r19, r19
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	82 0f       	add	r24, r18
    290c:	93 1f       	adc	r25, r19
    290e:	84 0f       	add	r24, r20
    2910:	95 1f       	adc	r25, r21
    2912:	84 53       	subi	r24, 0x34	; 52
    2914:	9e 4f       	sbci	r25, 0xFE	; 254
    2916:	bc 01       	movw	r22, r24
    2918:	88 a1       	ldd	r24, Y+32	; 0x20
    291a:	48 2f       	mov	r20, r24
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	ca 01       	movw	r24, r20
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	9c 01       	movw	r18, r24
    2926:	22 0f       	add	r18, r18
    2928:	33 1f       	adc	r19, r19
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	82 0f       	add	r24, r18
    2930:	93 1f       	adc	r25, r19
    2932:	84 0f       	add	r24, r20
    2934:	95 1f       	adc	r25, r21
    2936:	fc 01       	movw	r30, r24
    2938:	ed 52       	subi	r30, 0x2D	; 45
    293a:	fe 4f       	sbci	r31, 0xFE	; 254
    293c:	a0 81       	ld	r26, Z
    293e:	88 a1       	ldd	r24, Y+32	; 0x20
    2940:	48 2f       	mov	r20, r24
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	ca 01       	movw	r24, r20
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	9c 01       	movw	r18, r24
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	22 0f       	add	r18, r18
    2952:	33 1f       	adc	r19, r19
    2954:	82 0f       	add	r24, r18
    2956:	93 1f       	adc	r25, r19
    2958:	84 0f       	add	r24, r20
    295a:	95 1f       	adc	r25, r21
    295c:	fc 01       	movw	r30, r24
    295e:	ec 52       	subi	r30, 0x2C	; 44
    2960:	fe 4f       	sbci	r31, 0xFE	; 254
    2962:	b0 81       	ld	r27, Z
    2964:	88 a1       	ldd	r24, Y+32	; 0x20
    2966:	48 2f       	mov	r20, r24
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	ca 01       	movw	r24, r20
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	9c 01       	movw	r18, r24
    2972:	22 0f       	add	r18, r18
    2974:	33 1f       	adc	r19, r19
    2976:	22 0f       	add	r18, r18
    2978:	33 1f       	adc	r19, r19
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	84 0f       	add	r24, r20
    2980:	95 1f       	adc	r25, r21
    2982:	fc 01       	movw	r30, r24
    2984:	eb 52       	subi	r30, 0x2B	; 43
    2986:	fe 4f       	sbci	r31, 0xFE	; 254
    2988:	20 81       	ld	r18, Z
    298a:	31 81       	ldd	r19, Z+1	; 0x01
    298c:	cb 01       	movw	r24, r22
    298e:	6a 2f       	mov	r22, r26
    2990:	4b 2f       	mov	r20, r27
    2992:	67 da       	rcall	.-2866   	; 0x1e62 <odometry_move_to_position>
    2994:	8e 8f       	std	Y+30, r24	; 0x1e
					purple_tactic_five_positions[current_position].direction,purple_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2996:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	09 f4       	brne	.+2      	; 0x299e <purpleside+0x6e8>
    299c:	f7 cd       	rjmp	.-1042   	; 0x258c <purpleside+0x2d6>
					{
						break;
					}
					if(current_position == 0)
    299e:	88 a1       	ldd	r24, Y+32	; 0x20
    29a0:	88 23       	and	r24, r24
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <purpleside+0x6f0>
    29a4:	ff cf       	rjmp	.-2      	; 0x29a4 <purpleside+0x6ee>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    29a6:	88 a1       	ldd	r24, Y+32	; 0x20
    29a8:	8f 5f       	subi	r24, 0xFF	; 255
    29aa:	88 a3       	std	Y+32, r24	; 0x20
    29ac:	88 a1       	ldd	r24, Y+32	; 0x20
    29ae:	88 23       	and	r24, r24
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <purpleside+0x6fe>
    29b2:	a0 cf       	rjmp	.-192    	; 0x28f4 <purpleside+0x63e>
    29b4:	eb cd       	rjmp	.-1066   	; 0x258c <purpleside+0x2d6>

000029b6 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <timer_register_callback+0x6>
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	9a 81       	ldd	r25, Y+2	; 0x02
    29c8:	90 93 0e 02 	sts	0x020E, r25
    29cc:	80 93 0d 02 	sts	0x020D, r24
}
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <combination_check>:
static int combination_check()
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <combination_check+0x6>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
	if(combination[0] == 1 && combination[1] == 0 && combination[2] == 0)//first combination
    29e4:	80 91 16 02 	lds	r24, 0x0216
    29e8:	90 91 17 02 	lds	r25, 0x0217
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	91 05       	cpc	r25, r1
    29f0:	89 f4       	brne	.+34     	; 0x2a14 <combination_check+0x3a>
    29f2:	80 91 18 02 	lds	r24, 0x0218
    29f6:	90 91 19 02 	lds	r25, 0x0219
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	59 f4       	brne	.+22     	; 0x2a14 <combination_check+0x3a>
    29fe:	80 91 1a 02 	lds	r24, 0x021A
    2a02:	90 91 1b 02 	lds	r25, 0x021B
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	29 f4       	brne	.+10     	; 0x2a14 <combination_check+0x3a>
		return 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	79 c0       	rjmp	.+242    	; 0x2b06 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 0)//second combination
    2a14:	80 91 16 02 	lds	r24, 0x0216
    2a18:	90 91 17 02 	lds	r25, 0x0217
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	91 f4       	brne	.+36     	; 0x2a44 <combination_check+0x6a>
    2a20:	80 91 18 02 	lds	r24, 0x0218
    2a24:	90 91 19 02 	lds	r25, 0x0219
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	59 f4       	brne	.+22     	; 0x2a44 <combination_check+0x6a>
    2a2e:	80 91 1a 02 	lds	r24, 0x021A
    2a32:	90 91 1b 02 	lds	r25, 0x021B
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <combination_check+0x6a>
		return 2;
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9a 83       	std	Y+2, r25	; 0x02
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	61 c0       	rjmp	.+194    	; 0x2b06 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 1)//third combination
    2a44:	80 91 16 02 	lds	r24, 0x0216
    2a48:	90 91 17 02 	lds	r25, 0x0217
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	91 f4       	brne	.+36     	; 0x2a74 <combination_check+0x9a>
    2a50:	80 91 18 02 	lds	r24, 0x0218
    2a54:	90 91 19 02 	lds	r25, 0x0219
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	61 f4       	brne	.+24     	; 0x2a74 <combination_check+0x9a>
    2a5c:	80 91 1a 02 	lds	r24, 0x021A
    2a60:	90 91 1b 02 	lds	r25, 0x021B
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	91 05       	cpc	r25, r1
    2a68:	29 f4       	brne	.+10     	; 0x2a74 <combination_check+0x9a>
		return 3;
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	49 c0       	rjmp	.+146    	; 0x2b06 <combination_check+0x12c>
	else if(combination[0] == 1 && combination[1] == 1 && combination[2] == 0)//fourth combination
    2a74:	80 91 16 02 	lds	r24, 0x0216
    2a78:	90 91 17 02 	lds	r25, 0x0217
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	91 05       	cpc	r25, r1
    2a80:	91 f4       	brne	.+36     	; 0x2aa6 <combination_check+0xcc>
    2a82:	80 91 18 02 	lds	r24, 0x0218
    2a86:	90 91 19 02 	lds	r25, 0x0219
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	59 f4       	brne	.+22     	; 0x2aa6 <combination_check+0xcc>
    2a90:	80 91 1a 02 	lds	r24, 0x021A
    2a94:	90 91 1b 02 	lds	r25, 0x021B
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	29 f4       	brne	.+10     	; 0x2aa6 <combination_check+0xcc>
		return 4;
    2a9c:	84 e0       	ldi	r24, 0x04	; 4
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	30 c0       	rjmp	.+96     	; 0x2b06 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 1)//five combination
    2aa6:	80 91 16 02 	lds	r24, 0x0216
    2aaa:	90 91 17 02 	lds	r25, 0x0217
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	99 f4       	brne	.+38     	; 0x2ad8 <combination_check+0xfe>
    2ab2:	80 91 18 02 	lds	r24, 0x0218
    2ab6:	90 91 19 02 	lds	r25, 0x0219
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	91 05       	cpc	r25, r1
    2abe:	61 f4       	brne	.+24     	; 0x2ad8 <combination_check+0xfe>
    2ac0:	80 91 1a 02 	lds	r24, 0x021A
    2ac4:	90 91 1b 02 	lds	r25, 0x021B
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	91 05       	cpc	r25, r1
    2acc:	29 f4       	brne	.+10     	; 0x2ad8 <combination_check+0xfe>
		return 5;
    2ace:	85 e0       	ldi	r24, 0x05	; 5
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	17 c0       	rjmp	.+46     	; 0x2b06 <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 0)//error combination
    2ad8:	80 91 16 02 	lds	r24, 0x0216
    2adc:	90 91 17 02 	lds	r25, 0x0217
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	79 f4       	brne	.+30     	; 0x2b02 <combination_check+0x128>
    2ae4:	80 91 18 02 	lds	r24, 0x0218
    2ae8:	90 91 19 02 	lds	r25, 0x0219
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	49 f4       	brne	.+18     	; 0x2b02 <combination_check+0x128>
    2af0:	80 91 1a 02 	lds	r24, 0x021A
    2af4:	90 91 1b 02 	lds	r25, 0x021B
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	19 f4       	brne	.+6      	; 0x2b02 <combination_check+0x128>
		return 0;
    2afc:	1a 82       	std	Y+2, r1	; 0x02
    2afe:	19 82       	std	Y+1, r1	; 0x01
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <combination_check+0x12c>
		
	return 0;
    2b02:	1a 82       	std	Y+2, r1	; 0x02
    2b04:	19 82       	std	Y+1, r1	; 0x01
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <camera>:
int camera(void)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	a0 97       	sbiw	r28, 0x20	; 32
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a8 ec       	ldi	r26, 0xC8	; 200
    2b2e:	b2 e4       	ldi	r27, 0x42	; 66
    2b30:	89 8f       	std	Y+25, r24	; 0x19
    2b32:	9a 8f       	std	Y+26, r25	; 0x1a
    2b34:	ab 8f       	std	Y+27, r26	; 0x1b
    2b36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b38:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e4       	ldi	r19, 0x40	; 64
    2b44:	4c e1       	ldi	r20, 0x1C	; 28
    2b46:	55 e4       	ldi	r21, 0x45	; 69
    2b48:	3e d6       	rcall	.+3196   	; 0x37c6 <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 8b       	std	Y+21, r24	; 0x15
    2b50:	9e 8b       	std	Y+22, r25	; 0x16
    2b52:	af 8b       	std	Y+23, r26	; 0x17
    2b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	dc d4       	rcall	.+2488   	; 0x3520 <__cmpsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <camera+0x62>
		__ticks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 8b       	std	Y+20, r25	; 0x14
    2b72:	8b 8b       	std	Y+19, r24	; 0x13
    2b74:	3b c0       	rjmp	.+118    	; 0x2bec <camera+0xd8>
	else if (__tmp > 65535)
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	1b d6       	rcall	.+3126   	; 0x37be <__gesf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	3c f5       	brge	.+78     	; 0x2bda <camera+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	14 d6       	rcall	.+3112   	; 0x37c6 <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	2d d5       	rcall	.+2650   	; 0x3602 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <camera+0xbc>
    2bb2:	8a ef       	ldi	r24, 0xFA	; 250
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9a 8b       	std	Y+18, r25	; 0x12
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
    2bba:	89 89       	ldd	r24, Y+17	; 0x11
    2bbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <camera+0xaa>
    2bc2:	9a 8b       	std	Y+18, r25	; 0x12
    2bc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <camera+0x9e>
    2bd8:	13 c0       	rjmp	.+38     	; 0x2c00 <camera+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bda:	6d 89       	ldd	r22, Y+21	; 0x15
    2bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bde:	8f 89       	ldd	r24, Y+23	; 0x17
    2be0:	98 8d       	ldd	r25, Y+24	; 0x18
    2be2:	0f d5       	rcall	.+2590   	; 0x3602 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	98 8b       	std	Y+16, r25	; 0x10
    2bf2:	8f 87       	std	Y+15, r24	; 0x0f
    2bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf6:	98 89       	ldd	r25, Y+16	; 0x10
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <camera+0xe4>
    2bfc:	98 8b       	std	Y+16, r25	; 0x10
    2bfe:	8f 87       	std	Y+15, r24	; 0x0f
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    2c00:	1e 8e       	std	Y+30, r1	; 0x1e
    2c02:	1d 8e       	std	Y+29, r1	; 0x1d
    2c04:	8f c0       	rjmp	.+286    	; 0x2d24 <camera+0x210>
	{
		combination[0] = gpio_read_pin(7);
    2c06:	87 e0       	ldi	r24, 0x07	; 7
    2c08:	0e 94 45 09 	call	0x128a	; 0x128a <gpio_read_pin>
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	90 93 17 02 	sts	0x0217, r25
    2c14:	80 93 16 02 	sts	0x0216, r24
		combination[1] = gpio_read_pin(6);
    2c18:	86 e0       	ldi	r24, 0x06	; 6
    2c1a:	0e 94 45 09 	call	0x128a	; 0x128a <gpio_read_pin>
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	90 93 19 02 	sts	0x0219, r25
    2c26:	80 93 18 02 	sts	0x0218, r24
		combination[2] = gpio_read_pin(5);
    2c2a:	85 e0       	ldi	r24, 0x05	; 5
    2c2c:	0e 94 45 09 	call	0x128a	; 0x128a <gpio_read_pin>
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	90 93 1b 02 	sts	0x021B, r25
    2c38:	80 93 1a 02 	sts	0x021A, r24
		
		comb = combination_check();
    2c3c:	ce de       	rcall	.-612    	; 0x29da <combination_check>
    2c3e:	98 a3       	std	Y+32, r25	; 0x20
    2c40:	8f 8f       	std	Y+31, r24	; 0x1f
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a8 ec       	ldi	r26, 0xC8	; 200
    2c48:	b2 e4       	ldi	r27, 0x42	; 66
    2c4a:	8b 87       	std	Y+11, r24	; 0x0b
    2c4c:	9c 87       	std	Y+12, r25	; 0x0c
    2c4e:	ad 87       	std	Y+13, r26	; 0x0d
    2c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e4       	ldi	r19, 0x40	; 64
    2c5e:	4c e1       	ldi	r20, 0x1C	; 28
    2c60:	55 e4       	ldi	r21, 0x45	; 69
    2c62:	b1 d5       	rcall	.+2914   	; 0x37c6 <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8f 83       	std	Y+7, r24	; 0x07
    2c6a:	98 87       	std	Y+8, r25	; 0x08
    2c6c:	a9 87       	std	Y+9, r26	; 0x09
    2c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	4f d4       	rcall	.+2206   	; 0x3520 <__cmpsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <camera+0x17c>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	3b c0       	rjmp	.+118    	; 0x2d06 <camera+0x1f2>
	else if (__tmp > 65535)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	8e d5       	rcall	.+2844   	; 0x37be <__gesf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	3c f5       	brge	.+78     	; 0x2cf4 <camera+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	87 d5       	rcall	.+2830   	; 0x37c6 <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	a0 d4       	rcall	.+2368   	; 0x3602 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <camera+0x1d6>
    2ccc:	8a ef       	ldi	r24, 0xFA	; 250
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9c 83       	std	Y+4, r25	; 0x04
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <camera+0x1c4>
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <camera+0x1b8>
    2cf2:	13 c0       	rjmp	.+38     	; 0x2d1a <camera+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf6:	78 85       	ldd	r23, Y+8	; 0x08
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfc:	82 d4       	rcall	.+2308   	; 0x3602 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <camera+0x1fe>
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
}
int camera(void)
{
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    2d1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	9e 8f       	std	Y+30, r25	; 0x1e
    2d22:	8d 8f       	std	Y+29, r24	; 0x1d
    2d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d28:	85 30       	cpi	r24, 0x05	; 5
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	0c f4       	brge	.+2      	; 0x2d30 <camera+0x21c>
    2d2e:	6b cf       	rjmp	.-298    	; 0x2c06 <camera+0xf2>
		combination[2] = gpio_read_pin(5);
		
		comb = combination_check();
		_delay_ms(100);	
	}
	return comb;
    2d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d32:	98 a1       	ldd	r25, Y+32	; 0x20
}
    2d34:	a0 96       	adiw	r28, 0x20	; 32
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <timer_init>:


void timer_init(unsigned int freq)
{
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <timer_init+0xa>
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2d58:	e0 e8       	ldi	r30, 0x80	; 128
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2d5e:	e1 e8       	ldi	r30, 0x81	; 129
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	89 e0       	ldi	r24, 0x09	; 9
    2d64:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2d66:	08 e8       	ldi	r16, 0x88	; 136
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	cc 01       	movw	r24, r24
    2d70:	a0 e0       	ldi	r26, 0x00	; 0
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	70 d4       	rcall	.+2272   	; 0x365a <__floatunsisf>
    2d7a:	9b 01       	movw	r18, r22
    2d7c:	ac 01       	movw	r20, r24
    2d7e:	60 e8       	ldi	r22, 0x80	; 128
    2d80:	76 e9       	ldi	r23, 0x96	; 150
    2d82:	88 e1       	ldi	r24, 0x18	; 24
    2d84:	9b e4       	ldi	r25, 0x4B	; 75
    2d86:	d0 d3       	rcall	.+1952   	; 0x3528 <__divsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	5f d3       	rcall	.+1726   	; 0x3458 <__addsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	2f d4       	rcall	.+2142   	; 0x3602 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	f8 01       	movw	r30, r16
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2dae:	ef e6       	ldi	r30, 0x6F	; 111
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	80 83       	st	Z, r24

	SREG |= 0x80;
    2db6:	af e5       	ldi	r26, 0x5F	; 95
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e5       	ldi	r30, 0x5F	; 95
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 68       	ori	r24, 0x80	; 128
    2dc2:	8c 93       	st	X, r24
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	08 95       	ret

00002dd2 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2dd2:	1f 92       	push	r1
    2dd4:	0f 92       	push	r0
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	0f 92       	push	r0
    2dda:	00 90 5b 00 	lds	r0, 0x005B
    2dde:	0f 92       	push	r0
    2de0:	11 24       	eor	r1, r1
    2de2:	2f 93       	push	r18
    2de4:	3f 93       	push	r19
    2de6:	4f 93       	push	r20
    2de8:	5f 93       	push	r21
    2dea:	6f 93       	push	r22
    2dec:	7f 93       	push	r23
    2dee:	8f 93       	push	r24
    2df0:	9f 93       	push	r25
    2df2:	af 93       	push	r26
    2df4:	bf 93       	push	r27
    2df6:	ef 93       	push	r30
    2df8:	ff 93       	push	r31
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2e02:	80 91 0d 02 	lds	r24, 0x020D
    2e06:	90 91 0e 02 	lds	r25, 0x020E
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	29 f0       	breq	.+10     	; 0x2e18 <__vector_12+0x46>
        timer_callback();
    2e0e:	e0 91 0d 02 	lds	r30, 0x020D
    2e12:	f0 91 0e 02 	lds	r31, 0x020E
    2e16:	09 95       	icall
	if(sys_time >= 80000)
    2e18:	80 91 11 02 	lds	r24, 0x0211
    2e1c:	90 91 12 02 	lds	r25, 0x0212
    2e20:	a0 91 13 02 	lds	r26, 0x0213
    2e24:	b0 91 14 02 	lds	r27, 0x0214
    2e28:	80 38       	cpi	r24, 0x80	; 128
    2e2a:	28 e3       	ldi	r18, 0x38	; 56
    2e2c:	92 07       	cpc	r25, r18
    2e2e:	21 e0       	ldi	r18, 0x01	; 1
    2e30:	a2 07       	cpc	r26, r18
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	b2 07       	cpc	r27, r18
    2e36:	10 f0       	brcs	.+4      	; 0x2e3c <__vector_12+0x6a>
		actuators_umbrella();
    2e38:	0e 94 6d 02 	call	0x4da	; 0x4da <actuators_umbrella>
	sys_time++;
    2e3c:	80 91 11 02 	lds	r24, 0x0211
    2e40:	90 91 12 02 	lds	r25, 0x0212
    2e44:	a0 91 13 02 	lds	r26, 0x0213
    2e48:	b0 91 14 02 	lds	r27, 0x0214
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	b1 1d       	adc	r27, r1
    2e52:	80 93 11 02 	sts	0x0211, r24
    2e56:	90 93 12 02 	sts	0x0212, r25
    2e5a:	a0 93 13 02 	sts	0x0213, r26
    2e5e:	b0 93 14 02 	sts	0x0214, r27
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	ff 91       	pop	r31
    2e68:	ef 91       	pop	r30
    2e6a:	bf 91       	pop	r27
    2e6c:	af 91       	pop	r26
    2e6e:	9f 91       	pop	r25
    2e70:	8f 91       	pop	r24
    2e72:	7f 91       	pop	r23
    2e74:	6f 91       	pop	r22
    2e76:	5f 91       	pop	r21
    2e78:	4f 91       	pop	r20
    2e7a:	3f 91       	pop	r19
    2e7c:	2f 91       	pop	r18
    2e7e:	0f 90       	pop	r0
    2e80:	00 92 5b 00 	sts	0x005B, r0
    2e84:	0f 90       	pop	r0
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	0f 90       	pop	r0
    2e8a:	1f 90       	pop	r1
    2e8c:	18 95       	reti

00002e8e <system_reset_system_time>:
void system_reset_system_time(void)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2e96:	10 92 11 02 	sts	0x0211, r1
    2e9a:	10 92 12 02 	sts	0x0212, r1
    2e9e:	10 92 13 02 	sts	0x0213, r1
    2ea2:	10 92 14 02 	sts	0x0214, r1
}
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <system_set_match_started>:
void system_set_match_started(void)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 15 02 	sts	0x0215, r24
}
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2ec8:	80 91 11 02 	lds	r24, 0x0211
    2ecc:	90 91 12 02 	lds	r25, 0x0212
    2ed0:	a0 91 13 02 	lds	r26, 0x0213
    2ed4:	b0 91 14 02 	lds	r27, 0x0214
}
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <return_active_state>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
uint8_t return_active_state(void)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
	return active_state;
    2eea:	80 91 23 03 	lds	r24, 0x0323
    2eee:	90 91 24 03 	lds	r25, 0x0324
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <do_the_camera>:
void do_the_camera()
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <do_the_camera+0x6>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
	static int camera_return;
	
	camera_return = camera();
    2f02:	08 de       	rcall	.-1008   	; 0x2b14 <camera>
    2f04:	90 93 10 02 	sts	0x0210, r25
    2f08:	80 93 0f 02 	sts	0x020F, r24
	switch(camera_return)
    2f0c:	80 91 0f 02 	lds	r24, 0x020F
    2f10:	90 91 10 02 	lds	r25, 0x0210
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	91 05       	cpc	r25, r1
    2f20:	31 f1       	breq	.+76     	; 0x2f6e <do_the_camera+0x76>
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	91 05       	cpc	r25, r1
    2f2a:	54 f4       	brge	.+20     	; 0x2f40 <do_the_camera+0x48>
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	c9 f1       	breq	.+114    	; 0x2fa6 <do_the_camera+0xae>
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	91 05       	cpc	r25, r1
    2f3c:	89 f0       	breq	.+34     	; 0x2f60 <do_the_camera+0x68>
    2f3e:	39 c0       	rjmp	.+114    	; 0x2fb2 <do_the_camera+0xba>
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	84 30       	cpi	r24, 0x04	; 4
    2f46:	91 05       	cpc	r25, r1
    2f48:	01 f1       	breq	.+64     	; 0x2f8a <do_the_camera+0x92>
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	84 30       	cpi	r24, 0x04	; 4
    2f50:	91 05       	cpc	r25, r1
    2f52:	a4 f0       	brlt	.+40     	; 0x2f7c <do_the_camera+0x84>
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	85 30       	cpi	r24, 0x05	; 5
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	e9 f0       	breq	.+58     	; 0x2f98 <do_the_camera+0xa0>
    2f5e:	29 c0       	rjmp	.+82     	; 0x2fb2 <do_the_camera+0xba>
	{
		case 1:
			active_state = ROBOT_STATE_TACTIC_ONE;
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	90 93 24 03 	sts	0x0324, r25
    2f68:	80 93 23 03 	sts	0x0323, r24
    2f6c:	22 c0       	rjmp	.+68     	; 0x2fb2 <do_the_camera+0xba>
			//gpio_write_pin(0,1);
			break;
		case 2:
			active_state = ROBOT_STATE_TACTIC_TWO;
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	90 93 24 03 	sts	0x0324, r25
    2f76:	80 93 23 03 	sts	0x0323, r24
    2f7a:	1b c0       	rjmp	.+54     	; 0x2fb2 <do_the_camera+0xba>
			//gpio_write_pin(1,1);
			break;
		case 3:
			active_state = ROBOT_STATE_TACTIC_THREE;
    2f7c:	84 e0       	ldi	r24, 0x04	; 4
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	90 93 24 03 	sts	0x0324, r25
    2f84:	80 93 23 03 	sts	0x0323, r24
    2f88:	14 c0       	rjmp	.+40     	; 0x2fb2 <do_the_camera+0xba>
			//gpio_write_pin(2,1);
			break;
		case 4:
			active_state = ROBOT_STATE_TACTIC_FOUR;
    2f8a:	85 e0       	ldi	r24, 0x05	; 5
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	90 93 24 03 	sts	0x0324, r25
    2f92:	80 93 23 03 	sts	0x0323, r24
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <do_the_camera+0xba>
			//gpio_write_pin(3,1);
			break;
		case 5:
			active_state = ROBOT_STATE_TACTIC_FIVE;
    2f98:	86 e0       	ldi	r24, 0x06	; 6
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	90 93 24 03 	sts	0x0324, r25
    2fa0:	80 93 23 03 	sts	0x0323, r24
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <do_the_camera+0xba>
			//gpio_write_pin(4,1);
			break;
		case 0:
			active_state = 5;
    2fa6:	85 e0       	ldi	r24, 0x05	; 5
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	90 93 24 03 	sts	0x0324, r25
    2fae:	80 93 23 03 	sts	0x0323, r24
			//gpio_write_pin(0,1);
			//gpio_write_pin(4,1);
			break;
		//maybe put default for rotate for getting the camera right
	}
}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <system_init>:
void system_init(void)
{	
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	6c 97       	sbiw	r28, 0x1c	; 28
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    2fd0:	85 ec       	ldi	r24, 0xC5	; 197
    2fd2:	99 e0       	ldi	r25, 0x09	; 9
    2fd4:	f0 dc       	rcall	.-1568   	; 0x29b6 <timer_register_callback>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	a8 ec       	ldi	r26, 0xC8	; 200
    2fdc:	b2 e4       	ldi	r27, 0x42	; 66
    2fde:	89 8f       	std	Y+25, r24	; 0x19
    2fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe2:	ab 8f       	std	Y+27, r26	; 0x1b
    2fe4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e4       	ldi	r19, 0x40	; 64
    2ff2:	4c e1       	ldi	r20, 0x1C	; 28
    2ff4:	55 e4       	ldi	r21, 0x45	; 69
    2ff6:	e7 d3       	rcall	.+1998   	; 0x37c6 <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	8d 8b       	std	Y+21, r24	; 0x15
    2ffe:	9e 8b       	std	Y+22, r25	; 0x16
    3000:	af 8b       	std	Y+23, r26	; 0x17
    3002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3004:	6d 89       	ldd	r22, Y+21	; 0x15
    3006:	7e 89       	ldd	r23, Y+22	; 0x16
    3008:	8f 89       	ldd	r24, Y+23	; 0x17
    300a:	98 8d       	ldd	r25, Y+24	; 0x18
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e8       	ldi	r20, 0x80	; 128
    3012:	5f e3       	ldi	r21, 0x3F	; 63
    3014:	85 d2       	rcall	.+1290   	; 0x3520 <__cmpsf2>
    3016:	88 23       	and	r24, r24
    3018:	2c f4       	brge	.+10     	; 0x3024 <system_init+0x68>
		__ticks = 1;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	9c 8b       	std	Y+20, r25	; 0x14
    3020:	8b 8b       	std	Y+19, r24	; 0x13
    3022:	3b c0       	rjmp	.+118    	; 0x309a <system_init+0xde>
	else if (__tmp > 65535)
    3024:	6d 89       	ldd	r22, Y+21	; 0x15
    3026:	7e 89       	ldd	r23, Y+22	; 0x16
    3028:	8f 89       	ldd	r24, Y+23	; 0x17
    302a:	98 8d       	ldd	r25, Y+24	; 0x18
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	c4 d3       	rcall	.+1928   	; 0x37be <__gesf2>
    3036:	18 16       	cp	r1, r24
    3038:	3c f5       	brge	.+78     	; 0x3088 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	69 8d       	ldd	r22, Y+25	; 0x19
    303c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	bd d3       	rcall	.+1914   	; 0x37c6 <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	d6 d2       	rcall	.+1452   	; 0x3602 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
    305e:	0f c0       	rjmp	.+30     	; 0x307e <system_init+0xc2>
    3060:	8a ef       	ldi	r24, 0xFA	; 250
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9a 8b       	std	Y+18, r25	; 0x12
    3066:	89 8b       	std	Y+17, r24	; 0x11
    3068:	89 89       	ldd	r24, Y+17	; 0x11
    306a:	9a 89       	ldd	r25, Y+18	; 0x12
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <system_init+0xb0>
    3070:	9a 8b       	std	Y+18, r25	; 0x12
    3072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3074:	8b 89       	ldd	r24, Y+19	; 0x13
    3076:	9c 89       	ldd	r25, Y+20	; 0x14
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	9c 8b       	std	Y+20, r25	; 0x14
    307c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307e:	8b 89       	ldd	r24, Y+19	; 0x13
    3080:	9c 89       	ldd	r25, Y+20	; 0x14
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	69 f7       	brne	.-38     	; 0x3060 <system_init+0xa4>
    3086:	13 c0       	rjmp	.+38     	; 0x30ae <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3088:	6d 89       	ldd	r22, Y+21	; 0x15
    308a:	7e 89       	ldd	r23, Y+22	; 0x16
    308c:	8f 89       	ldd	r24, Y+23	; 0x17
    308e:	98 8d       	ldd	r25, Y+24	; 0x18
    3090:	b8 d2       	rcall	.+1392   	; 0x3602 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9c 8b       	std	Y+20, r25	; 0x14
    3098:	8b 8b       	std	Y+19, r24	; 0x13
    309a:	8b 89       	ldd	r24, Y+19	; 0x13
    309c:	9c 89       	ldd	r25, Y+20	; 0x14
    309e:	98 8b       	std	Y+16, r25	; 0x10
    30a0:	8f 87       	std	Y+15, r24	; 0x0f
    30a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a4:	98 89       	ldd	r25, Y+16	; 0x10
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <system_init+0xea>
    30aa:	98 8b       	std	Y+16, r25	; 0x10
    30ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);							//jumper
    30ae:	88 e0       	ldi	r24, 0x08	; 8
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(15,GPIO_DIRECTION_INPUT,true);						//prekidac za stranu
    30b8:	8f e0       	ldi	r24, 0x0F	; 15
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(7,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    30c2:	87 e0       	ldi	r24, 0x07	; 7
    30c4:	60 e0       	ldi	r22, 0x00	; 0
    30c6:	41 e0       	ldi	r20, 0x01	; 1
    30c8:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(6,GPIO_DIRECTION_INPUT,true);							//camera 1 position
    30cc:	86 e0       	ldi	r24, 0x06	; 6
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(5,GPIO_DIRECTION_INPUT,true);							//camera 2 position
    30d6:	85 e0       	ldi	r24, 0x05	; 5
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>

	//need to test
	gpio_register_pin(9,GPIO_DIRECTION_INPUT,true);							//sensor front left
    30e0:	89 e0       	ldi	r24, 0x09	; 9
    30e2:	60 e0       	ldi	r22, 0x00	; 0
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(10,GPIO_DIRECTION_INPUT,true);						//sensor front right
    30ea:	8a e0       	ldi	r24, 0x0A	; 10
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(11,GPIO_DIRECTION_INPUT,true);						//sensor back left
    30f4:	8b e0       	ldi	r24, 0x0B	; 11
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(12,GPIO_DIRECTION_INPUT,true);						//sensor back right
    30fe:	8c e0       	ldi	r24, 0x0C	; 12
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	41 e0       	ldi	r20, 0x01	; 1
    3104:	0e 94 d7 07 	call	0xfae	; 0xfae <gpio_register_pin>
	gpio_register_pin(2,GPIO_DIRECTION_OUTPUT,false);						//led tactic 3
	gpio_register_pin(3,GPIO_DIRECTION_OUTPUT,false);						//led tactic 4
	gpio_register_pin(4,GPIO_DIRECTION_OUTPUT,false);						//led tactic 5
	*/
	
	DDRG = 0xff;
    3108:	e3 e3       	ldi	r30, 0x33	; 51
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	80 83       	st	Z, r24
	PORTG = 0xff;
    3110:	e4 e3       	ldi	r30, 0x34	; 52
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	8f ef       	ldi	r24, 0xFF	; 255
    3116:	80 83       	st	Z, r24
	servo_init(50);
    3118:	82 e3       	ldi	r24, 0x32	; 50
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 7a 00 	call	0xf4	; 0xf4 <servo_init>
	timer_init(1000);
    3120:	88 ee       	ldi	r24, 0xE8	; 232
    3122:	93 e0       	ldi	r25, 0x03	; 3
    3124:	10 de       	rcall	.-992    	; 0x2d46 <timer_init>
	CAN_Init(1);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 96 06 	call	0xd2c	; 0xd2c <CAN_Init>

	actuators_setup();
    312c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <actuators_setup>
    3130:	6c c0       	rjmp	.+216    	; 0x320a <system_init+0x24e>
	
	while(gpio_read_pin(8))
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a0 e2       	ldi	r26, 0x20	; 32
    3138:	b1 e4       	ldi	r27, 0x41	; 65
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	9c 87       	std	Y+12, r25	; 0x0c
    313e:	ad 87       	std	Y+13, r26	; 0x0d
    3140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e4       	ldi	r19, 0x40	; 64
    314e:	4c e1       	ldi	r20, 0x1C	; 28
    3150:	55 e4       	ldi	r21, 0x45	; 69
    3152:	39 d3       	rcall	.+1650   	; 0x37c6 <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8f 83       	std	Y+7, r24	; 0x07
    315a:	98 87       	std	Y+8, r25	; 0x08
    315c:	a9 87       	std	Y+9, r26	; 0x09
    315e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	d7 d1       	rcall	.+942    	; 0x3520 <__cmpsf2>
    3172:	88 23       	and	r24, r24
    3174:	2c f4       	brge	.+10     	; 0x3180 <system_init+0x1c4>
		__ticks = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	3b c0       	rjmp	.+118    	; 0x31f6 <system_init+0x23a>
	else if (__tmp > 65535)
    3180:	6f 81       	ldd	r22, Y+7	; 0x07
    3182:	78 85       	ldd	r23, Y+8	; 0x08
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	9a 85       	ldd	r25, Y+10	; 0x0a
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	3f ef       	ldi	r19, 0xFF	; 255
    318c:	4f e7       	ldi	r20, 0x7F	; 127
    318e:	57 e4       	ldi	r21, 0x47	; 71
    3190:	16 d3       	rcall	.+1580   	; 0x37be <__gesf2>
    3192:	18 16       	cp	r1, r24
    3194:	3c f5       	brge	.+78     	; 0x31e4 <system_init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0f d3       	rcall	.+1566   	; 0x37c6 <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	bc 01       	movw	r22, r24
    31ae:	cd 01       	movw	r24, r26
    31b0:	28 d2       	rcall	.+1104   	; 0x3602 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <system_init+0x21e>
    31bc:	8a ef       	ldi	r24, 0xFA	; 250
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <system_init+0x20c>
    31cc:	9c 83       	std	Y+4, r25	; 0x04
    31ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	9e 81       	ldd	r25, Y+6	; 0x06
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f7       	brne	.-38     	; 0x31bc <system_init+0x200>
    31e2:	13 c0       	rjmp	.+38     	; 0x320a <system_init+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	0a d2       	rcall	.+1044   	; 0x3602 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <system_init+0x246>
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	88 e0       	ldi	r24, 0x08	; 8
    320c:	0e 94 45 09 	call	0x128a	; 0x128a <gpio_read_pin>
    3210:	88 23       	and	r24, r24
    3212:	09 f0       	breq	.+2      	; 0x3216 <system_init+0x25a>
    3214:	8e cf       	rjmp	.-228    	; 0x3132 <system_init+0x176>
		_delay_ms(10);
	PORTG = 0x00;
    3216:	e4 e3       	ldi	r30, 0x34	; 52
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	10 82       	st	Z, r1
	system_reset_system_time();
    321c:	38 de       	rcall	.-912    	; 0x2e8e <system_reset_system_time>
	system_set_match_started();
    321e:	46 de       	rcall	.-884    	; 0x2eac <system_set_match_started>
}
    3220:	6c 96       	adiw	r28, 0x1c	; 28
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <__vector_23>:
    3232:	1f 92       	push	r1
    3234:	0f 92       	push	r0
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	0f 92       	push	r0
    323a:	00 90 5b 00 	lds	r0, 0x005B
    323e:	0f 92       	push	r0
    3240:	11 24       	eor	r1, r1
    3242:	8f 93       	push	r24
    3244:	9f 93       	push	r25
    3246:	af 93       	push	r26
    3248:	bf 93       	push	r27
    324a:	ef 93       	push	r30
    324c:	ff 93       	push	r31
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	80 91 1a 02 	lds	r24, 0x021A
    325a:	88 23       	and	r24, r24
    325c:	d9 f0       	breq	.+54     	; 0x3294 <__vector_23+0x62>
    325e:	80 91 1a 02 	lds	r24, 0x021A
    3262:	81 50       	subi	r24, 0x01	; 1
    3264:	80 93 1a 02 	sts	0x021A, r24
    3268:	a6 ec       	ldi	r26, 0xC6	; 198
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	80 91 1b 02 	lds	r24, 0x021B
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	fc 01       	movw	r30, r24
    3276:	ee 5d       	subi	r30, 0xDE	; 222
    3278:	fd 4f       	sbci	r31, 0xFD	; 253
    327a:	80 81       	ld	r24, Z
    327c:	8c 93       	st	X, r24
    327e:	80 91 1b 02 	lds	r24, 0x021B
    3282:	8f 5f       	subi	r24, 0xFF	; 255
    3284:	80 93 1b 02 	sts	0x021B, r24
    3288:	80 91 1b 02 	lds	r24, 0x021B
    328c:	80 34       	cpi	r24, 0x40	; 64
    328e:	11 f4       	brne	.+4      	; 0x3294 <__vector_23+0x62>
    3290:	10 92 1b 02 	sts	0x021B, r1
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	ff 91       	pop	r31
    329a:	ef 91       	pop	r30
    329c:	bf 91       	pop	r27
    329e:	af 91       	pop	r26
    32a0:	9f 91       	pop	r25
    32a2:	8f 91       	pop	r24
    32a4:	0f 90       	pop	r0
    32a6:	00 92 5b 00 	sts	0x005B, r0
    32aa:	0f 90       	pop	r0
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	0f 90       	pop	r0
    32b0:	1f 90       	pop	r1
    32b2:	18 95       	reti

000032b4 <__vector_21>:
    32b4:	1f 92       	push	r1
    32b6:	0f 92       	push	r0
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	0f 92       	push	r0
    32bc:	00 90 5b 00 	lds	r0, 0x005B
    32c0:	0f 92       	push	r0
    32c2:	11 24       	eor	r1, r1
    32c4:	2f 93       	push	r18
    32c6:	8f 93       	push	r24
    32c8:	9f 93       	push	r25
    32ca:	ef 93       	push	r30
    32cc:	ff 93       	push	r31
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	0f 92       	push	r0
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	e0 ec       	ldi	r30, 0xC0	; 192
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	88 2f       	mov	r24, r24
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	8c 71       	andi	r24, 0x1C	; 28
    32e8:	90 70       	andi	r25, 0x00	; 0
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	d9 f4       	brne	.+54     	; 0x3324 <__vector_21+0x70>
    32ee:	80 91 1c 02 	lds	r24, 0x021C
    32f2:	88 2f       	mov	r24, r24
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	e6 ec       	ldi	r30, 0xC6	; 198
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	20 81       	ld	r18, Z
    32fc:	fc 01       	movw	r30, r24
    32fe:	ee 59       	subi	r30, 0x9E	; 158
    3300:	fd 4f       	sbci	r31, 0xFD	; 253
    3302:	20 83       	st	Z, r18
    3304:	80 91 1c 02 	lds	r24, 0x021C
    3308:	8f 5f       	subi	r24, 0xFF	; 255
    330a:	80 93 1c 02 	sts	0x021C, r24
    330e:	80 91 1c 02 	lds	r24, 0x021C
    3312:	80 34       	cpi	r24, 0x40	; 64
    3314:	11 f4       	brne	.+4      	; 0x331a <__vector_21+0x66>
    3316:	10 92 1c 02 	sts	0x021C, r1
    331a:	80 91 1d 02 	lds	r24, 0x021D
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	80 93 1d 02 	sts	0x021D, r24
    3324:	0f 90       	pop	r0
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	ff 91       	pop	r31
    332c:	ef 91       	pop	r30
    332e:	9f 91       	pop	r25
    3330:	8f 91       	pop	r24
    3332:	2f 91       	pop	r18
    3334:	0f 90       	pop	r0
    3336:	00 92 5b 00 	sts	0x005B, r0
    333a:	0f 90       	pop	r0
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	0f 90       	pop	r0
    3340:	1f 90       	pop	r1
    3342:	18 95       	reti

00003344 <__vector_34>:
    3344:	1f 92       	push	r1
    3346:	0f 92       	push	r0
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	0f 92       	push	r0
    334c:	00 90 5b 00 	lds	r0, 0x005B
    3350:	0f 92       	push	r0
    3352:	11 24       	eor	r1, r1
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	ef 93       	push	r30
    335e:	ff 93       	push	r31
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	80 91 1e 02 	lds	r24, 0x021E
    336c:	88 23       	and	r24, r24
    336e:	d9 f0       	breq	.+54     	; 0x33a6 <__vector_34+0x62>
    3370:	80 91 1e 02 	lds	r24, 0x021E
    3374:	81 50       	subi	r24, 0x01	; 1
    3376:	80 93 1e 02 	sts	0x021E, r24
    337a:	ae ec       	ldi	r26, 0xCE	; 206
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	80 91 1f 02 	lds	r24, 0x021F
    3382:	88 2f       	mov	r24, r24
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	fc 01       	movw	r30, r24
    3388:	ee 55       	subi	r30, 0x5E	; 94
    338a:	fd 4f       	sbci	r31, 0xFD	; 253
    338c:	80 81       	ld	r24, Z
    338e:	8c 93       	st	X, r24
    3390:	80 91 1f 02 	lds	r24, 0x021F
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	80 93 1f 02 	sts	0x021F, r24
    339a:	80 91 1f 02 	lds	r24, 0x021F
    339e:	80 34       	cpi	r24, 0x40	; 64
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <__vector_34+0x62>
    33a2:	10 92 1f 02 	sts	0x021F, r1
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	ff 91       	pop	r31
    33ac:	ef 91       	pop	r30
    33ae:	bf 91       	pop	r27
    33b0:	af 91       	pop	r26
    33b2:	9f 91       	pop	r25
    33b4:	8f 91       	pop	r24
    33b6:	0f 90       	pop	r0
    33b8:	00 92 5b 00 	sts	0x005B, r0
    33bc:	0f 90       	pop	r0
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	0f 90       	pop	r0
    33c2:	1f 90       	pop	r1
    33c4:	18 95       	reti

000033c6 <__vector_32>:
    33c6:	1f 92       	push	r1
    33c8:	0f 92       	push	r0
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	0f 92       	push	r0
    33ce:	00 90 5b 00 	lds	r0, 0x005B
    33d2:	0f 92       	push	r0
    33d4:	11 24       	eor	r1, r1
    33d6:	2f 93       	push	r18
    33d8:	8f 93       	push	r24
    33da:	9f 93       	push	r25
    33dc:	ef 93       	push	r30
    33de:	ff 93       	push	r31
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	0f 92       	push	r0
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	e8 ec       	ldi	r30, 0xC8	; 200
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	8c 71       	andi	r24, 0x1C	; 28
    33fa:	90 70       	andi	r25, 0x00	; 0
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	d9 f4       	brne	.+54     	; 0x3436 <__vector_32+0x70>
    3400:	80 91 20 02 	lds	r24, 0x0220
    3404:	88 2f       	mov	r24, r24
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	ee ec       	ldi	r30, 0xCE	; 206
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	20 81       	ld	r18, Z
    340e:	fc 01       	movw	r30, r24
    3410:	ee 51       	subi	r30, 0x1E	; 30
    3412:	fd 4f       	sbci	r31, 0xFD	; 253
    3414:	20 83       	st	Z, r18
    3416:	80 91 20 02 	lds	r24, 0x0220
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	80 93 20 02 	sts	0x0220, r24
    3420:	80 91 20 02 	lds	r24, 0x0220
    3424:	80 34       	cpi	r24, 0x40	; 64
    3426:	11 f4       	brne	.+4      	; 0x342c <__vector_32+0x66>
    3428:	10 92 20 02 	sts	0x0220, r1
    342c:	80 91 21 02 	lds	r24, 0x0221
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	80 93 21 02 	sts	0x0221, r24
    3436:	0f 90       	pop	r0
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	ff 91       	pop	r31
    343e:	ef 91       	pop	r30
    3440:	9f 91       	pop	r25
    3442:	8f 91       	pop	r24
    3444:	2f 91       	pop	r18
    3446:	0f 90       	pop	r0
    3448:	00 92 5b 00 	sts	0x005B, r0
    344c:	0f 90       	pop	r0
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	0f 90       	pop	r0
    3452:	1f 90       	pop	r1
    3454:	18 95       	reti

00003456 <__subsf3>:
    3456:	50 58       	subi	r21, 0x80	; 128

00003458 <__addsf3>:
    3458:	bb 27       	eor	r27, r27
    345a:	aa 27       	eor	r26, r26
    345c:	0e d0       	rcall	.+28     	; 0x347a <__addsf3x>
    345e:	75 c1       	rjmp	.+746    	; 0x374a <__fp_round>
    3460:	66 d1       	rcall	.+716    	; 0x372e <__fp_pscA>
    3462:	30 f0       	brcs	.+12     	; 0x3470 <__addsf3+0x18>
    3464:	6b d1       	rcall	.+726    	; 0x373c <__fp_pscB>
    3466:	20 f0       	brcs	.+8      	; 0x3470 <__addsf3+0x18>
    3468:	31 f4       	brne	.+12     	; 0x3476 <__addsf3+0x1e>
    346a:	9f 3f       	cpi	r25, 0xFF	; 255
    346c:	11 f4       	brne	.+4      	; 0x3472 <__addsf3+0x1a>
    346e:	1e f4       	brtc	.+6      	; 0x3476 <__addsf3+0x1e>
    3470:	5b c1       	rjmp	.+694    	; 0x3728 <__fp_nan>
    3472:	0e f4       	brtc	.+2      	; 0x3476 <__addsf3+0x1e>
    3474:	e0 95       	com	r30
    3476:	e7 fb       	bst	r30, 7
    3478:	51 c1       	rjmp	.+674    	; 0x371c <__fp_inf>

0000347a <__addsf3x>:
    347a:	e9 2f       	mov	r30, r25
    347c:	77 d1       	rcall	.+750    	; 0x376c <__fp_split3>
    347e:	80 f3       	brcs	.-32     	; 0x3460 <__addsf3+0x8>
    3480:	ba 17       	cp	r27, r26
    3482:	62 07       	cpc	r22, r18
    3484:	73 07       	cpc	r23, r19
    3486:	84 07       	cpc	r24, r20
    3488:	95 07       	cpc	r25, r21
    348a:	18 f0       	brcs	.+6      	; 0x3492 <__addsf3x+0x18>
    348c:	71 f4       	brne	.+28     	; 0x34aa <__addsf3x+0x30>
    348e:	9e f5       	brtc	.+102    	; 0x34f6 <__addsf3x+0x7c>
    3490:	8f c1       	rjmp	.+798    	; 0x37b0 <__fp_zero>
    3492:	0e f4       	brtc	.+2      	; 0x3496 <__addsf3x+0x1c>
    3494:	e0 95       	com	r30
    3496:	0b 2e       	mov	r0, r27
    3498:	ba 2f       	mov	r27, r26
    349a:	a0 2d       	mov	r26, r0
    349c:	0b 01       	movw	r0, r22
    349e:	b9 01       	movw	r22, r18
    34a0:	90 01       	movw	r18, r0
    34a2:	0c 01       	movw	r0, r24
    34a4:	ca 01       	movw	r24, r20
    34a6:	a0 01       	movw	r20, r0
    34a8:	11 24       	eor	r1, r1
    34aa:	ff 27       	eor	r31, r31
    34ac:	59 1b       	sub	r21, r25
    34ae:	99 f0       	breq	.+38     	; 0x34d6 <__addsf3x+0x5c>
    34b0:	59 3f       	cpi	r21, 0xF9	; 249
    34b2:	50 f4       	brcc	.+20     	; 0x34c8 <__addsf3x+0x4e>
    34b4:	50 3e       	cpi	r21, 0xE0	; 224
    34b6:	68 f1       	brcs	.+90     	; 0x3512 <__addsf3x+0x98>
    34b8:	1a 16       	cp	r1, r26
    34ba:	f0 40       	sbci	r31, 0x00	; 0
    34bc:	a2 2f       	mov	r26, r18
    34be:	23 2f       	mov	r18, r19
    34c0:	34 2f       	mov	r19, r20
    34c2:	44 27       	eor	r20, r20
    34c4:	58 5f       	subi	r21, 0xF8	; 248
    34c6:	f3 cf       	rjmp	.-26     	; 0x34ae <__addsf3x+0x34>
    34c8:	46 95       	lsr	r20
    34ca:	37 95       	ror	r19
    34cc:	27 95       	ror	r18
    34ce:	a7 95       	ror	r26
    34d0:	f0 40       	sbci	r31, 0x00	; 0
    34d2:	53 95       	inc	r21
    34d4:	c9 f7       	brne	.-14     	; 0x34c8 <__addsf3x+0x4e>
    34d6:	7e f4       	brtc	.+30     	; 0x34f6 <__addsf3x+0x7c>
    34d8:	1f 16       	cp	r1, r31
    34da:	ba 0b       	sbc	r27, r26
    34dc:	62 0b       	sbc	r22, r18
    34de:	73 0b       	sbc	r23, r19
    34e0:	84 0b       	sbc	r24, r20
    34e2:	ba f0       	brmi	.+46     	; 0x3512 <__addsf3x+0x98>
    34e4:	91 50       	subi	r25, 0x01	; 1
    34e6:	a1 f0       	breq	.+40     	; 0x3510 <__addsf3x+0x96>
    34e8:	ff 0f       	add	r31, r31
    34ea:	bb 1f       	adc	r27, r27
    34ec:	66 1f       	adc	r22, r22
    34ee:	77 1f       	adc	r23, r23
    34f0:	88 1f       	adc	r24, r24
    34f2:	c2 f7       	brpl	.-16     	; 0x34e4 <__addsf3x+0x6a>
    34f4:	0e c0       	rjmp	.+28     	; 0x3512 <__addsf3x+0x98>
    34f6:	ba 0f       	add	r27, r26
    34f8:	62 1f       	adc	r22, r18
    34fa:	73 1f       	adc	r23, r19
    34fc:	84 1f       	adc	r24, r20
    34fe:	48 f4       	brcc	.+18     	; 0x3512 <__addsf3x+0x98>
    3500:	87 95       	ror	r24
    3502:	77 95       	ror	r23
    3504:	67 95       	ror	r22
    3506:	b7 95       	ror	r27
    3508:	f7 95       	ror	r31
    350a:	9e 3f       	cpi	r25, 0xFE	; 254
    350c:	08 f0       	brcs	.+2      	; 0x3510 <__addsf3x+0x96>
    350e:	b3 cf       	rjmp	.-154    	; 0x3476 <__addsf3+0x1e>
    3510:	93 95       	inc	r25
    3512:	88 0f       	add	r24, r24
    3514:	08 f0       	brcs	.+2      	; 0x3518 <__addsf3x+0x9e>
    3516:	99 27       	eor	r25, r25
    3518:	ee 0f       	add	r30, r30
    351a:	97 95       	ror	r25
    351c:	87 95       	ror	r24
    351e:	08 95       	ret

00003520 <__cmpsf2>:
    3520:	d9 d0       	rcall	.+434    	; 0x36d4 <__fp_cmp>
    3522:	08 f4       	brcc	.+2      	; 0x3526 <__cmpsf2+0x6>
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	08 95       	ret

00003528 <__divsf3>:
    3528:	0c d0       	rcall	.+24     	; 0x3542 <__divsf3x>
    352a:	0f c1       	rjmp	.+542    	; 0x374a <__fp_round>
    352c:	07 d1       	rcall	.+526    	; 0x373c <__fp_pscB>
    352e:	40 f0       	brcs	.+16     	; 0x3540 <__divsf3+0x18>
    3530:	fe d0       	rcall	.+508    	; 0x372e <__fp_pscA>
    3532:	30 f0       	brcs	.+12     	; 0x3540 <__divsf3+0x18>
    3534:	21 f4       	brne	.+8      	; 0x353e <__divsf3+0x16>
    3536:	5f 3f       	cpi	r21, 0xFF	; 255
    3538:	19 f0       	breq	.+6      	; 0x3540 <__divsf3+0x18>
    353a:	f0 c0       	rjmp	.+480    	; 0x371c <__fp_inf>
    353c:	51 11       	cpse	r21, r1
    353e:	39 c1       	rjmp	.+626    	; 0x37b2 <__fp_szero>
    3540:	f3 c0       	rjmp	.+486    	; 0x3728 <__fp_nan>

00003542 <__divsf3x>:
    3542:	14 d1       	rcall	.+552    	; 0x376c <__fp_split3>
    3544:	98 f3       	brcs	.-26     	; 0x352c <__divsf3+0x4>

00003546 <__divsf3_pse>:
    3546:	99 23       	and	r25, r25
    3548:	c9 f3       	breq	.-14     	; 0x353c <__divsf3+0x14>
    354a:	55 23       	and	r21, r21
    354c:	b1 f3       	breq	.-20     	; 0x353a <__divsf3+0x12>
    354e:	95 1b       	sub	r25, r21
    3550:	55 0b       	sbc	r21, r21
    3552:	bb 27       	eor	r27, r27
    3554:	aa 27       	eor	r26, r26
    3556:	62 17       	cp	r22, r18
    3558:	73 07       	cpc	r23, r19
    355a:	84 07       	cpc	r24, r20
    355c:	38 f0       	brcs	.+14     	; 0x356c <__divsf3_pse+0x26>
    355e:	9f 5f       	subi	r25, 0xFF	; 255
    3560:	5f 4f       	sbci	r21, 0xFF	; 255
    3562:	22 0f       	add	r18, r18
    3564:	33 1f       	adc	r19, r19
    3566:	44 1f       	adc	r20, r20
    3568:	aa 1f       	adc	r26, r26
    356a:	a9 f3       	breq	.-22     	; 0x3556 <__divsf3_pse+0x10>
    356c:	33 d0       	rcall	.+102    	; 0x35d4 <__divsf3_pse+0x8e>
    356e:	0e 2e       	mov	r0, r30
    3570:	3a f0       	brmi	.+14     	; 0x3580 <__divsf3_pse+0x3a>
    3572:	e0 e8       	ldi	r30, 0x80	; 128
    3574:	30 d0       	rcall	.+96     	; 0x35d6 <__divsf3_pse+0x90>
    3576:	91 50       	subi	r25, 0x01	; 1
    3578:	50 40       	sbci	r21, 0x00	; 0
    357a:	e6 95       	lsr	r30
    357c:	00 1c       	adc	r0, r0
    357e:	ca f7       	brpl	.-14     	; 0x3572 <__divsf3_pse+0x2c>
    3580:	29 d0       	rcall	.+82     	; 0x35d4 <__divsf3_pse+0x8e>
    3582:	fe 2f       	mov	r31, r30
    3584:	27 d0       	rcall	.+78     	; 0x35d4 <__divsf3_pse+0x8e>
    3586:	66 0f       	add	r22, r22
    3588:	77 1f       	adc	r23, r23
    358a:	88 1f       	adc	r24, r24
    358c:	bb 1f       	adc	r27, r27
    358e:	26 17       	cp	r18, r22
    3590:	37 07       	cpc	r19, r23
    3592:	48 07       	cpc	r20, r24
    3594:	ab 07       	cpc	r26, r27
    3596:	b0 e8       	ldi	r27, 0x80	; 128
    3598:	09 f0       	breq	.+2      	; 0x359c <__divsf3_pse+0x56>
    359a:	bb 0b       	sbc	r27, r27
    359c:	80 2d       	mov	r24, r0
    359e:	bf 01       	movw	r22, r30
    35a0:	ff 27       	eor	r31, r31
    35a2:	93 58       	subi	r25, 0x83	; 131
    35a4:	5f 4f       	sbci	r21, 0xFF	; 255
    35a6:	2a f0       	brmi	.+10     	; 0x35b2 <__divsf3_pse+0x6c>
    35a8:	9e 3f       	cpi	r25, 0xFE	; 254
    35aa:	51 05       	cpc	r21, r1
    35ac:	68 f0       	brcs	.+26     	; 0x35c8 <__divsf3_pse+0x82>
    35ae:	b6 c0       	rjmp	.+364    	; 0x371c <__fp_inf>
    35b0:	00 c1       	rjmp	.+512    	; 0x37b2 <__fp_szero>
    35b2:	5f 3f       	cpi	r21, 0xFF	; 255
    35b4:	ec f3       	brlt	.-6      	; 0x35b0 <__divsf3_pse+0x6a>
    35b6:	98 3e       	cpi	r25, 0xE8	; 232
    35b8:	dc f3       	brlt	.-10     	; 0x35b0 <__divsf3_pse+0x6a>
    35ba:	86 95       	lsr	r24
    35bc:	77 95       	ror	r23
    35be:	67 95       	ror	r22
    35c0:	b7 95       	ror	r27
    35c2:	f7 95       	ror	r31
    35c4:	9f 5f       	subi	r25, 0xFF	; 255
    35c6:	c9 f7       	brne	.-14     	; 0x35ba <__divsf3_pse+0x74>
    35c8:	88 0f       	add	r24, r24
    35ca:	91 1d       	adc	r25, r1
    35cc:	96 95       	lsr	r25
    35ce:	87 95       	ror	r24
    35d0:	97 f9       	bld	r25, 7
    35d2:	08 95       	ret
    35d4:	e1 e0       	ldi	r30, 0x01	; 1
    35d6:	66 0f       	add	r22, r22
    35d8:	77 1f       	adc	r23, r23
    35da:	88 1f       	adc	r24, r24
    35dc:	bb 1f       	adc	r27, r27
    35de:	62 17       	cp	r22, r18
    35e0:	73 07       	cpc	r23, r19
    35e2:	84 07       	cpc	r24, r20
    35e4:	ba 07       	cpc	r27, r26
    35e6:	20 f0       	brcs	.+8      	; 0x35f0 <__divsf3_pse+0xaa>
    35e8:	62 1b       	sub	r22, r18
    35ea:	73 0b       	sbc	r23, r19
    35ec:	84 0b       	sbc	r24, r20
    35ee:	ba 0b       	sbc	r27, r26
    35f0:	ee 1f       	adc	r30, r30
    35f2:	88 f7       	brcc	.-30     	; 0x35d6 <__divsf3_pse+0x90>
    35f4:	e0 95       	com	r30
    35f6:	08 95       	ret

000035f8 <__fixsfsi>:
    35f8:	04 d0       	rcall	.+8      	; 0x3602 <__fixunssfsi>
    35fa:	68 94       	set
    35fc:	b1 11       	cpse	r27, r1
    35fe:	d9 c0       	rjmp	.+434    	; 0x37b2 <__fp_szero>
    3600:	08 95       	ret

00003602 <__fixunssfsi>:
    3602:	bc d0       	rcall	.+376    	; 0x377c <__fp_splitA>
    3604:	88 f0       	brcs	.+34     	; 0x3628 <__fixunssfsi+0x26>
    3606:	9f 57       	subi	r25, 0x7F	; 127
    3608:	90 f0       	brcs	.+36     	; 0x362e <__fixunssfsi+0x2c>
    360a:	b9 2f       	mov	r27, r25
    360c:	99 27       	eor	r25, r25
    360e:	b7 51       	subi	r27, 0x17	; 23
    3610:	a0 f0       	brcs	.+40     	; 0x363a <__fixunssfsi+0x38>
    3612:	d1 f0       	breq	.+52     	; 0x3648 <__fixunssfsi+0x46>
    3614:	66 0f       	add	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	88 1f       	adc	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	1a f0       	brmi	.+6      	; 0x3624 <__fixunssfsi+0x22>
    361e:	ba 95       	dec	r27
    3620:	c9 f7       	brne	.-14     	; 0x3614 <__fixunssfsi+0x12>
    3622:	12 c0       	rjmp	.+36     	; 0x3648 <__fixunssfsi+0x46>
    3624:	b1 30       	cpi	r27, 0x01	; 1
    3626:	81 f0       	breq	.+32     	; 0x3648 <__fixunssfsi+0x46>
    3628:	c3 d0       	rcall	.+390    	; 0x37b0 <__fp_zero>
    362a:	b1 e0       	ldi	r27, 0x01	; 1
    362c:	08 95       	ret
    362e:	c0 c0       	rjmp	.+384    	; 0x37b0 <__fp_zero>
    3630:	67 2f       	mov	r22, r23
    3632:	78 2f       	mov	r23, r24
    3634:	88 27       	eor	r24, r24
    3636:	b8 5f       	subi	r27, 0xF8	; 248
    3638:	39 f0       	breq	.+14     	; 0x3648 <__fixunssfsi+0x46>
    363a:	b9 3f       	cpi	r27, 0xF9	; 249
    363c:	cc f3       	brlt	.-14     	; 0x3630 <__fixunssfsi+0x2e>
    363e:	86 95       	lsr	r24
    3640:	77 95       	ror	r23
    3642:	67 95       	ror	r22
    3644:	b3 95       	inc	r27
    3646:	d9 f7       	brne	.-10     	; 0x363e <__fixunssfsi+0x3c>
    3648:	3e f4       	brtc	.+14     	; 0x3658 <__fixunssfsi+0x56>
    364a:	90 95       	com	r25
    364c:	80 95       	com	r24
    364e:	70 95       	com	r23
    3650:	61 95       	neg	r22
    3652:	7f 4f       	sbci	r23, 0xFF	; 255
    3654:	8f 4f       	sbci	r24, 0xFF	; 255
    3656:	9f 4f       	sbci	r25, 0xFF	; 255
    3658:	08 95       	ret

0000365a <__floatunsisf>:
    365a:	e8 94       	clt
    365c:	09 c0       	rjmp	.+18     	; 0x3670 <__floatsisf+0x12>

0000365e <__floatsisf>:
    365e:	97 fb       	bst	r25, 7
    3660:	3e f4       	brtc	.+14     	; 0x3670 <__floatsisf+0x12>
    3662:	90 95       	com	r25
    3664:	80 95       	com	r24
    3666:	70 95       	com	r23
    3668:	61 95       	neg	r22
    366a:	7f 4f       	sbci	r23, 0xFF	; 255
    366c:	8f 4f       	sbci	r24, 0xFF	; 255
    366e:	9f 4f       	sbci	r25, 0xFF	; 255
    3670:	99 23       	and	r25, r25
    3672:	a9 f0       	breq	.+42     	; 0x369e <__floatsisf+0x40>
    3674:	f9 2f       	mov	r31, r25
    3676:	96 e9       	ldi	r25, 0x96	; 150
    3678:	bb 27       	eor	r27, r27
    367a:	93 95       	inc	r25
    367c:	f6 95       	lsr	r31
    367e:	87 95       	ror	r24
    3680:	77 95       	ror	r23
    3682:	67 95       	ror	r22
    3684:	b7 95       	ror	r27
    3686:	f1 11       	cpse	r31, r1
    3688:	f8 cf       	rjmp	.-16     	; 0x367a <__floatsisf+0x1c>
    368a:	fa f4       	brpl	.+62     	; 0x36ca <__floatsisf+0x6c>
    368c:	bb 0f       	add	r27, r27
    368e:	11 f4       	brne	.+4      	; 0x3694 <__floatsisf+0x36>
    3690:	60 ff       	sbrs	r22, 0
    3692:	1b c0       	rjmp	.+54     	; 0x36ca <__floatsisf+0x6c>
    3694:	6f 5f       	subi	r22, 0xFF	; 255
    3696:	7f 4f       	sbci	r23, 0xFF	; 255
    3698:	8f 4f       	sbci	r24, 0xFF	; 255
    369a:	9f 4f       	sbci	r25, 0xFF	; 255
    369c:	16 c0       	rjmp	.+44     	; 0x36ca <__floatsisf+0x6c>
    369e:	88 23       	and	r24, r24
    36a0:	11 f0       	breq	.+4      	; 0x36a6 <__floatsisf+0x48>
    36a2:	96 e9       	ldi	r25, 0x96	; 150
    36a4:	11 c0       	rjmp	.+34     	; 0x36c8 <__floatsisf+0x6a>
    36a6:	77 23       	and	r23, r23
    36a8:	21 f0       	breq	.+8      	; 0x36b2 <__floatsisf+0x54>
    36aa:	9e e8       	ldi	r25, 0x8E	; 142
    36ac:	87 2f       	mov	r24, r23
    36ae:	76 2f       	mov	r23, r22
    36b0:	05 c0       	rjmp	.+10     	; 0x36bc <__floatsisf+0x5e>
    36b2:	66 23       	and	r22, r22
    36b4:	71 f0       	breq	.+28     	; 0x36d2 <__floatsisf+0x74>
    36b6:	96 e8       	ldi	r25, 0x86	; 134
    36b8:	86 2f       	mov	r24, r22
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	2a f0       	brmi	.+10     	; 0x36ca <__floatsisf+0x6c>
    36c0:	9a 95       	dec	r25
    36c2:	66 0f       	add	r22, r22
    36c4:	77 1f       	adc	r23, r23
    36c6:	88 1f       	adc	r24, r24
    36c8:	da f7       	brpl	.-10     	; 0x36c0 <__floatsisf+0x62>
    36ca:	88 0f       	add	r24, r24
    36cc:	96 95       	lsr	r25
    36ce:	87 95       	ror	r24
    36d0:	97 f9       	bld	r25, 7
    36d2:	08 95       	ret

000036d4 <__fp_cmp>:
    36d4:	99 0f       	add	r25, r25
    36d6:	00 08       	sbc	r0, r0
    36d8:	55 0f       	add	r21, r21
    36da:	aa 0b       	sbc	r26, r26
    36dc:	e0 e8       	ldi	r30, 0x80	; 128
    36de:	fe ef       	ldi	r31, 0xFE	; 254
    36e0:	16 16       	cp	r1, r22
    36e2:	17 06       	cpc	r1, r23
    36e4:	e8 07       	cpc	r30, r24
    36e6:	f9 07       	cpc	r31, r25
    36e8:	c0 f0       	brcs	.+48     	; 0x371a <__fp_cmp+0x46>
    36ea:	12 16       	cp	r1, r18
    36ec:	13 06       	cpc	r1, r19
    36ee:	e4 07       	cpc	r30, r20
    36f0:	f5 07       	cpc	r31, r21
    36f2:	98 f0       	brcs	.+38     	; 0x371a <__fp_cmp+0x46>
    36f4:	62 1b       	sub	r22, r18
    36f6:	73 0b       	sbc	r23, r19
    36f8:	84 0b       	sbc	r24, r20
    36fa:	95 0b       	sbc	r25, r21
    36fc:	39 f4       	brne	.+14     	; 0x370c <__fp_cmp+0x38>
    36fe:	0a 26       	eor	r0, r26
    3700:	61 f0       	breq	.+24     	; 0x371a <__fp_cmp+0x46>
    3702:	23 2b       	or	r18, r19
    3704:	24 2b       	or	r18, r20
    3706:	25 2b       	or	r18, r21
    3708:	21 f4       	brne	.+8      	; 0x3712 <__fp_cmp+0x3e>
    370a:	08 95       	ret
    370c:	0a 26       	eor	r0, r26
    370e:	09 f4       	brne	.+2      	; 0x3712 <__fp_cmp+0x3e>
    3710:	a1 40       	sbci	r26, 0x01	; 1
    3712:	a6 95       	lsr	r26
    3714:	8f ef       	ldi	r24, 0xFF	; 255
    3716:	81 1d       	adc	r24, r1
    3718:	81 1d       	adc	r24, r1
    371a:	08 95       	ret

0000371c <__fp_inf>:
    371c:	97 f9       	bld	r25, 7
    371e:	9f 67       	ori	r25, 0x7F	; 127
    3720:	80 e8       	ldi	r24, 0x80	; 128
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	08 95       	ret

00003728 <__fp_nan>:
    3728:	9f ef       	ldi	r25, 0xFF	; 255
    372a:	80 ec       	ldi	r24, 0xC0	; 192
    372c:	08 95       	ret

0000372e <__fp_pscA>:
    372e:	00 24       	eor	r0, r0
    3730:	0a 94       	dec	r0
    3732:	16 16       	cp	r1, r22
    3734:	17 06       	cpc	r1, r23
    3736:	18 06       	cpc	r1, r24
    3738:	09 06       	cpc	r0, r25
    373a:	08 95       	ret

0000373c <__fp_pscB>:
    373c:	00 24       	eor	r0, r0
    373e:	0a 94       	dec	r0
    3740:	12 16       	cp	r1, r18
    3742:	13 06       	cpc	r1, r19
    3744:	14 06       	cpc	r1, r20
    3746:	05 06       	cpc	r0, r21
    3748:	08 95       	ret

0000374a <__fp_round>:
    374a:	09 2e       	mov	r0, r25
    374c:	03 94       	inc	r0
    374e:	00 0c       	add	r0, r0
    3750:	11 f4       	brne	.+4      	; 0x3756 <__fp_round+0xc>
    3752:	88 23       	and	r24, r24
    3754:	52 f0       	brmi	.+20     	; 0x376a <__fp_round+0x20>
    3756:	bb 0f       	add	r27, r27
    3758:	40 f4       	brcc	.+16     	; 0x376a <__fp_round+0x20>
    375a:	bf 2b       	or	r27, r31
    375c:	11 f4       	brne	.+4      	; 0x3762 <__fp_round+0x18>
    375e:	60 ff       	sbrs	r22, 0
    3760:	04 c0       	rjmp	.+8      	; 0x376a <__fp_round+0x20>
    3762:	6f 5f       	subi	r22, 0xFF	; 255
    3764:	7f 4f       	sbci	r23, 0xFF	; 255
    3766:	8f 4f       	sbci	r24, 0xFF	; 255
    3768:	9f 4f       	sbci	r25, 0xFF	; 255
    376a:	08 95       	ret

0000376c <__fp_split3>:
    376c:	57 fd       	sbrc	r21, 7
    376e:	90 58       	subi	r25, 0x80	; 128
    3770:	44 0f       	add	r20, r20
    3772:	55 1f       	adc	r21, r21
    3774:	59 f0       	breq	.+22     	; 0x378c <__fp_splitA+0x10>
    3776:	5f 3f       	cpi	r21, 0xFF	; 255
    3778:	71 f0       	breq	.+28     	; 0x3796 <__fp_splitA+0x1a>
    377a:	47 95       	ror	r20

0000377c <__fp_splitA>:
    377c:	88 0f       	add	r24, r24
    377e:	97 fb       	bst	r25, 7
    3780:	99 1f       	adc	r25, r25
    3782:	61 f0       	breq	.+24     	; 0x379c <__fp_splitA+0x20>
    3784:	9f 3f       	cpi	r25, 0xFF	; 255
    3786:	79 f0       	breq	.+30     	; 0x37a6 <__fp_splitA+0x2a>
    3788:	87 95       	ror	r24
    378a:	08 95       	ret
    378c:	12 16       	cp	r1, r18
    378e:	13 06       	cpc	r1, r19
    3790:	14 06       	cpc	r1, r20
    3792:	55 1f       	adc	r21, r21
    3794:	f2 cf       	rjmp	.-28     	; 0x377a <__fp_split3+0xe>
    3796:	46 95       	lsr	r20
    3798:	f1 df       	rcall	.-30     	; 0x377c <__fp_splitA>
    379a:	08 c0       	rjmp	.+16     	; 0x37ac <__fp_splitA+0x30>
    379c:	16 16       	cp	r1, r22
    379e:	17 06       	cpc	r1, r23
    37a0:	18 06       	cpc	r1, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	f1 cf       	rjmp	.-30     	; 0x3788 <__fp_splitA+0xc>
    37a6:	86 95       	lsr	r24
    37a8:	71 05       	cpc	r23, r1
    37aa:	61 05       	cpc	r22, r1
    37ac:	08 94       	sec
    37ae:	08 95       	ret

000037b0 <__fp_zero>:
    37b0:	e8 94       	clt

000037b2 <__fp_szero>:
    37b2:	bb 27       	eor	r27, r27
    37b4:	66 27       	eor	r22, r22
    37b6:	77 27       	eor	r23, r23
    37b8:	cb 01       	movw	r24, r22
    37ba:	97 f9       	bld	r25, 7
    37bc:	08 95       	ret

000037be <__gesf2>:
    37be:	8a df       	rcall	.-236    	; 0x36d4 <__fp_cmp>
    37c0:	08 f4       	brcc	.+2      	; 0x37c4 <__gesf2+0x6>
    37c2:	8f ef       	ldi	r24, 0xFF	; 255
    37c4:	08 95       	ret

000037c6 <__mulsf3>:
    37c6:	0b d0       	rcall	.+22     	; 0x37de <__mulsf3x>
    37c8:	c0 cf       	rjmp	.-128    	; 0x374a <__fp_round>
    37ca:	b1 df       	rcall	.-158    	; 0x372e <__fp_pscA>
    37cc:	28 f0       	brcs	.+10     	; 0x37d8 <__mulsf3+0x12>
    37ce:	b6 df       	rcall	.-148    	; 0x373c <__fp_pscB>
    37d0:	18 f0       	brcs	.+6      	; 0x37d8 <__mulsf3+0x12>
    37d2:	95 23       	and	r25, r21
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <__mulsf3+0x12>
    37d6:	a2 cf       	rjmp	.-188    	; 0x371c <__fp_inf>
    37d8:	a7 cf       	rjmp	.-178    	; 0x3728 <__fp_nan>
    37da:	11 24       	eor	r1, r1
    37dc:	ea cf       	rjmp	.-44     	; 0x37b2 <__fp_szero>

000037de <__mulsf3x>:
    37de:	c6 df       	rcall	.-116    	; 0x376c <__fp_split3>
    37e0:	a0 f3       	brcs	.-24     	; 0x37ca <__mulsf3+0x4>

000037e2 <__mulsf3_pse>:
    37e2:	95 9f       	mul	r25, r21
    37e4:	d1 f3       	breq	.-12     	; 0x37da <__mulsf3+0x14>
    37e6:	95 0f       	add	r25, r21
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	55 1f       	adc	r21, r21
    37ec:	62 9f       	mul	r22, r18
    37ee:	f0 01       	movw	r30, r0
    37f0:	72 9f       	mul	r23, r18
    37f2:	bb 27       	eor	r27, r27
    37f4:	f0 0d       	add	r31, r0
    37f6:	b1 1d       	adc	r27, r1
    37f8:	63 9f       	mul	r22, r19
    37fa:	aa 27       	eor	r26, r26
    37fc:	f0 0d       	add	r31, r0
    37fe:	b1 1d       	adc	r27, r1
    3800:	aa 1f       	adc	r26, r26
    3802:	64 9f       	mul	r22, r20
    3804:	66 27       	eor	r22, r22
    3806:	b0 0d       	add	r27, r0
    3808:	a1 1d       	adc	r26, r1
    380a:	66 1f       	adc	r22, r22
    380c:	82 9f       	mul	r24, r18
    380e:	22 27       	eor	r18, r18
    3810:	b0 0d       	add	r27, r0
    3812:	a1 1d       	adc	r26, r1
    3814:	62 1f       	adc	r22, r18
    3816:	73 9f       	mul	r23, r19
    3818:	b0 0d       	add	r27, r0
    381a:	a1 1d       	adc	r26, r1
    381c:	62 1f       	adc	r22, r18
    381e:	83 9f       	mul	r24, r19
    3820:	a0 0d       	add	r26, r0
    3822:	61 1d       	adc	r22, r1
    3824:	22 1f       	adc	r18, r18
    3826:	74 9f       	mul	r23, r20
    3828:	33 27       	eor	r19, r19
    382a:	a0 0d       	add	r26, r0
    382c:	61 1d       	adc	r22, r1
    382e:	23 1f       	adc	r18, r19
    3830:	84 9f       	mul	r24, r20
    3832:	60 0d       	add	r22, r0
    3834:	21 1d       	adc	r18, r1
    3836:	82 2f       	mov	r24, r18
    3838:	76 2f       	mov	r23, r22
    383a:	6a 2f       	mov	r22, r26
    383c:	11 24       	eor	r1, r1
    383e:	9f 57       	subi	r25, 0x7F	; 127
    3840:	50 40       	sbci	r21, 0x00	; 0
    3842:	8a f0       	brmi	.+34     	; 0x3866 <__mulsf3_pse+0x84>
    3844:	e1 f0       	breq	.+56     	; 0x387e <__mulsf3_pse+0x9c>
    3846:	88 23       	and	r24, r24
    3848:	4a f0       	brmi	.+18     	; 0x385c <__mulsf3_pse+0x7a>
    384a:	ee 0f       	add	r30, r30
    384c:	ff 1f       	adc	r31, r31
    384e:	bb 1f       	adc	r27, r27
    3850:	66 1f       	adc	r22, r22
    3852:	77 1f       	adc	r23, r23
    3854:	88 1f       	adc	r24, r24
    3856:	91 50       	subi	r25, 0x01	; 1
    3858:	50 40       	sbci	r21, 0x00	; 0
    385a:	a9 f7       	brne	.-22     	; 0x3846 <__mulsf3_pse+0x64>
    385c:	9e 3f       	cpi	r25, 0xFE	; 254
    385e:	51 05       	cpc	r21, r1
    3860:	70 f0       	brcs	.+28     	; 0x387e <__mulsf3_pse+0x9c>
    3862:	5c cf       	rjmp	.-328    	; 0x371c <__fp_inf>
    3864:	a6 cf       	rjmp	.-180    	; 0x37b2 <__fp_szero>
    3866:	5f 3f       	cpi	r21, 0xFF	; 255
    3868:	ec f3       	brlt	.-6      	; 0x3864 <__mulsf3_pse+0x82>
    386a:	98 3e       	cpi	r25, 0xE8	; 232
    386c:	dc f3       	brlt	.-10     	; 0x3864 <__mulsf3_pse+0x82>
    386e:	86 95       	lsr	r24
    3870:	77 95       	ror	r23
    3872:	67 95       	ror	r22
    3874:	b7 95       	ror	r27
    3876:	f7 95       	ror	r31
    3878:	e7 95       	ror	r30
    387a:	9f 5f       	subi	r25, 0xFF	; 255
    387c:	c1 f7       	brne	.-16     	; 0x386e <__mulsf3_pse+0x8c>
    387e:	fe 2b       	or	r31, r30
    3880:	88 0f       	add	r24, r24
    3882:	91 1d       	adc	r25, r1
    3884:	96 95       	lsr	r25
    3886:	87 95       	ror	r24
    3888:	97 f9       	bld	r25, 7
    388a:	08 95       	ret

0000388c <calloc>:
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	68 9f       	mul	r22, r24
    3896:	80 01       	movw	r16, r0
    3898:	69 9f       	mul	r22, r25
    389a:	10 0d       	add	r17, r0
    389c:	78 9f       	mul	r23, r24
    389e:	10 0d       	add	r17, r0
    38a0:	11 24       	eor	r1, r1
    38a2:	c8 01       	movw	r24, r16
    38a4:	0d d0       	rcall	.+26     	; 0x38c0 <malloc>
    38a6:	ec 01       	movw	r28, r24
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	21 f0       	breq	.+8      	; 0x38b4 <calloc+0x28>
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	a8 01       	movw	r20, r16
    38b2:	0b d1       	rcall	.+534    	; 0x3aca <memset>
    38b4:	ce 01       	movw	r24, r28
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	1f 91       	pop	r17
    38bc:	0f 91       	pop	r16
    38be:	08 95       	ret

000038c0 <malloc>:
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	bc 01       	movw	r22, r24
    38c6:	82 30       	cpi	r24, 0x02	; 2
    38c8:	91 05       	cpc	r25, r1
    38ca:	10 f4       	brcc	.+4      	; 0x38d0 <malloc+0x10>
    38cc:	62 e0       	ldi	r22, 0x02	; 2
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	a0 91 28 03 	lds	r26, 0x0328
    38d4:	b0 91 29 03 	lds	r27, 0x0329
    38d8:	ed 01       	movw	r28, r26
    38da:	e0 e0       	ldi	r30, 0x00	; 0
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	21 c0       	rjmp	.+66     	; 0x3926 <malloc+0x66>
    38e4:	88 81       	ld	r24, Y
    38e6:	99 81       	ldd	r25, Y+1	; 0x01
    38e8:	86 17       	cp	r24, r22
    38ea:	97 07       	cpc	r25, r23
    38ec:	69 f4       	brne	.+26     	; 0x3908 <malloc+0x48>
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	9b 81       	ldd	r25, Y+3	; 0x03
    38f2:	30 97       	sbiw	r30, 0x00	; 0
    38f4:	19 f0       	breq	.+6      	; 0x38fc <malloc+0x3c>
    38f6:	93 83       	std	Z+3, r25	; 0x03
    38f8:	82 83       	std	Z+2, r24	; 0x02
    38fa:	04 c0       	rjmp	.+8      	; 0x3904 <malloc+0x44>
    38fc:	90 93 29 03 	sts	0x0329, r25
    3900:	80 93 28 03 	sts	0x0328, r24
    3904:	fe 01       	movw	r30, r28
    3906:	34 c0       	rjmp	.+104    	; 0x3970 <malloc+0xb0>
    3908:	68 17       	cp	r22, r24
    390a:	79 07       	cpc	r23, r25
    390c:	38 f4       	brcc	.+14     	; 0x391c <malloc+0x5c>
    390e:	41 15       	cp	r20, r1
    3910:	51 05       	cpc	r21, r1
    3912:	19 f0       	breq	.+6      	; 0x391a <malloc+0x5a>
    3914:	84 17       	cp	r24, r20
    3916:	95 07       	cpc	r25, r21
    3918:	08 f4       	brcc	.+2      	; 0x391c <malloc+0x5c>
    391a:	ac 01       	movw	r20, r24
    391c:	fe 01       	movw	r30, r28
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	9b 81       	ldd	r25, Y+3	; 0x03
    3922:	9c 01       	movw	r18, r24
    3924:	e9 01       	movw	r28, r18
    3926:	20 97       	sbiw	r28, 0x00	; 0
    3928:	e9 f6       	brne	.-70     	; 0x38e4 <malloc+0x24>
    392a:	41 15       	cp	r20, r1
    392c:	51 05       	cpc	r21, r1
    392e:	a9 f1       	breq	.+106    	; 0x399a <malloc+0xda>
    3930:	ca 01       	movw	r24, r20
    3932:	86 1b       	sub	r24, r22
    3934:	97 0b       	sbc	r25, r23
    3936:	04 97       	sbiw	r24, 0x04	; 4
    3938:	08 f4       	brcc	.+2      	; 0x393c <malloc+0x7c>
    393a:	ba 01       	movw	r22, r20
    393c:	e0 e0       	ldi	r30, 0x00	; 0
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	2a c0       	rjmp	.+84     	; 0x3996 <malloc+0xd6>
    3942:	8d 91       	ld	r24, X+
    3944:	9c 91       	ld	r25, X
    3946:	11 97       	sbiw	r26, 0x01	; 1
    3948:	84 17       	cp	r24, r20
    394a:	95 07       	cpc	r25, r21
    394c:	f9 f4       	brne	.+62     	; 0x398c <malloc+0xcc>
    394e:	64 17       	cp	r22, r20
    3950:	75 07       	cpc	r23, r21
    3952:	81 f4       	brne	.+32     	; 0x3974 <malloc+0xb4>
    3954:	12 96       	adiw	r26, 0x02	; 2
    3956:	8d 91       	ld	r24, X+
    3958:	9c 91       	ld	r25, X
    395a:	13 97       	sbiw	r26, 0x03	; 3
    395c:	30 97       	sbiw	r30, 0x00	; 0
    395e:	19 f0       	breq	.+6      	; 0x3966 <malloc+0xa6>
    3960:	93 83       	std	Z+3, r25	; 0x03
    3962:	82 83       	std	Z+2, r24	; 0x02
    3964:	04 c0       	rjmp	.+8      	; 0x396e <malloc+0xae>
    3966:	90 93 29 03 	sts	0x0329, r25
    396a:	80 93 28 03 	sts	0x0328, r24
    396e:	fd 01       	movw	r30, r26
    3970:	32 96       	adiw	r30, 0x02	; 2
    3972:	4f c0       	rjmp	.+158    	; 0x3a12 <malloc+0x152>
    3974:	ca 01       	movw	r24, r20
    3976:	86 1b       	sub	r24, r22
    3978:	97 0b       	sbc	r25, r23
    397a:	fd 01       	movw	r30, r26
    397c:	e8 0f       	add	r30, r24
    397e:	f9 1f       	adc	r31, r25
    3980:	61 93       	st	Z+, r22
    3982:	71 93       	st	Z+, r23
    3984:	02 97       	sbiw	r24, 0x02	; 2
    3986:	8d 93       	st	X+, r24
    3988:	9c 93       	st	X, r25
    398a:	43 c0       	rjmp	.+134    	; 0x3a12 <malloc+0x152>
    398c:	fd 01       	movw	r30, r26
    398e:	82 81       	ldd	r24, Z+2	; 0x02
    3990:	93 81       	ldd	r25, Z+3	; 0x03
    3992:	9c 01       	movw	r18, r24
    3994:	d9 01       	movw	r26, r18
    3996:	10 97       	sbiw	r26, 0x00	; 0
    3998:	a1 f6       	brne	.-88     	; 0x3942 <malloc+0x82>
    399a:	80 91 26 03 	lds	r24, 0x0326
    399e:	90 91 27 03 	lds	r25, 0x0327
    39a2:	89 2b       	or	r24, r25
    39a4:	41 f4       	brne	.+16     	; 0x39b6 <malloc+0xf6>
    39a6:	80 91 02 01 	lds	r24, 0x0102
    39aa:	90 91 03 01 	lds	r25, 0x0103
    39ae:	90 93 27 03 	sts	0x0327, r25
    39b2:	80 93 26 03 	sts	0x0326, r24
    39b6:	40 91 04 01 	lds	r20, 0x0104
    39ba:	50 91 05 01 	lds	r21, 0x0105
    39be:	41 15       	cp	r20, r1
    39c0:	51 05       	cpc	r21, r1
    39c2:	41 f4       	brne	.+16     	; 0x39d4 <malloc+0x114>
    39c4:	4d b7       	in	r20, 0x3d	; 61
    39c6:	5e b7       	in	r21, 0x3e	; 62
    39c8:	80 91 00 01 	lds	r24, 0x0100
    39cc:	90 91 01 01 	lds	r25, 0x0101
    39d0:	48 1b       	sub	r20, r24
    39d2:	59 0b       	sbc	r21, r25
    39d4:	20 91 26 03 	lds	r18, 0x0326
    39d8:	30 91 27 03 	lds	r19, 0x0327
    39dc:	24 17       	cp	r18, r20
    39de:	35 07       	cpc	r19, r21
    39e0:	b0 f4       	brcc	.+44     	; 0x3a0e <malloc+0x14e>
    39e2:	ca 01       	movw	r24, r20
    39e4:	82 1b       	sub	r24, r18
    39e6:	93 0b       	sbc	r25, r19
    39e8:	86 17       	cp	r24, r22
    39ea:	97 07       	cpc	r25, r23
    39ec:	80 f0       	brcs	.+32     	; 0x3a0e <malloc+0x14e>
    39ee:	ab 01       	movw	r20, r22
    39f0:	4e 5f       	subi	r20, 0xFE	; 254
    39f2:	5f 4f       	sbci	r21, 0xFF	; 255
    39f4:	84 17       	cp	r24, r20
    39f6:	95 07       	cpc	r25, r21
    39f8:	50 f0       	brcs	.+20     	; 0x3a0e <malloc+0x14e>
    39fa:	42 0f       	add	r20, r18
    39fc:	53 1f       	adc	r21, r19
    39fe:	50 93 27 03 	sts	0x0327, r21
    3a02:	40 93 26 03 	sts	0x0326, r20
    3a06:	f9 01       	movw	r30, r18
    3a08:	61 93       	st	Z+, r22
    3a0a:	71 93       	st	Z+, r23
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <malloc+0x152>
    3a0e:	e0 e0       	ldi	r30, 0x00	; 0
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	cf 01       	movw	r24, r30
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	08 95       	ret

00003a1a <free>:
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <free+0xa>
    3a22:	50 c0       	rjmp	.+160    	; 0x3ac4 <free+0xaa>
    3a24:	ec 01       	movw	r28, r24
    3a26:	22 97       	sbiw	r28, 0x02	; 2
    3a28:	1b 82       	std	Y+3, r1	; 0x03
    3a2a:	1a 82       	std	Y+2, r1	; 0x02
    3a2c:	a0 91 28 03 	lds	r26, 0x0328
    3a30:	b0 91 29 03 	lds	r27, 0x0329
    3a34:	10 97       	sbiw	r26, 0x00	; 0
    3a36:	09 f1       	breq	.+66     	; 0x3a7a <free+0x60>
    3a38:	40 e0       	ldi	r20, 0x00	; 0
    3a3a:	50 e0       	ldi	r21, 0x00	; 0
    3a3c:	ac 17       	cp	r26, r28
    3a3e:	bd 07       	cpc	r27, r29
    3a40:	08 f1       	brcs	.+66     	; 0x3a84 <free+0x6a>
    3a42:	bb 83       	std	Y+3, r27	; 0x03
    3a44:	aa 83       	std	Y+2, r26	; 0x02
    3a46:	fe 01       	movw	r30, r28
    3a48:	21 91       	ld	r18, Z+
    3a4a:	31 91       	ld	r19, Z+
    3a4c:	e2 0f       	add	r30, r18
    3a4e:	f3 1f       	adc	r31, r19
    3a50:	ae 17       	cp	r26, r30
    3a52:	bf 07       	cpc	r27, r31
    3a54:	79 f4       	brne	.+30     	; 0x3a74 <free+0x5a>
    3a56:	8d 91       	ld	r24, X+
    3a58:	9c 91       	ld	r25, X
    3a5a:	11 97       	sbiw	r26, 0x01	; 1
    3a5c:	28 0f       	add	r18, r24
    3a5e:	39 1f       	adc	r19, r25
    3a60:	2e 5f       	subi	r18, 0xFE	; 254
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	39 83       	std	Y+1, r19	; 0x01
    3a66:	28 83       	st	Y, r18
    3a68:	12 96       	adiw	r26, 0x02	; 2
    3a6a:	8d 91       	ld	r24, X+
    3a6c:	9c 91       	ld	r25, X
    3a6e:	13 97       	sbiw	r26, 0x03	; 3
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
    3a74:	41 15       	cp	r20, r1
    3a76:	51 05       	cpc	r21, r1
    3a78:	71 f4       	brne	.+28     	; 0x3a96 <free+0x7c>
    3a7a:	d0 93 29 03 	sts	0x0329, r29
    3a7e:	c0 93 28 03 	sts	0x0328, r28
    3a82:	20 c0       	rjmp	.+64     	; 0x3ac4 <free+0xaa>
    3a84:	12 96       	adiw	r26, 0x02	; 2
    3a86:	8d 91       	ld	r24, X+
    3a88:	9c 91       	ld	r25, X
    3a8a:	13 97       	sbiw	r26, 0x03	; 3
    3a8c:	ad 01       	movw	r20, r26
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	11 f0       	breq	.+4      	; 0x3a96 <free+0x7c>
    3a92:	dc 01       	movw	r26, r24
    3a94:	d3 cf       	rjmp	.-90     	; 0x3a3c <free+0x22>
    3a96:	fa 01       	movw	r30, r20
    3a98:	d3 83       	std	Z+3, r29	; 0x03
    3a9a:	c2 83       	std	Z+2, r28	; 0x02
    3a9c:	21 91       	ld	r18, Z+
    3a9e:	31 91       	ld	r19, Z+
    3aa0:	e2 0f       	add	r30, r18
    3aa2:	f3 1f       	adc	r31, r19
    3aa4:	ce 17       	cp	r28, r30
    3aa6:	df 07       	cpc	r29, r31
    3aa8:	69 f4       	brne	.+26     	; 0x3ac4 <free+0xaa>
    3aaa:	88 81       	ld	r24, Y
    3aac:	99 81       	ldd	r25, Y+1	; 0x01
    3aae:	28 0f       	add	r18, r24
    3ab0:	39 1f       	adc	r19, r25
    3ab2:	2e 5f       	subi	r18, 0xFE	; 254
    3ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab6:	fa 01       	movw	r30, r20
    3ab8:	31 83       	std	Z+1, r19	; 0x01
    3aba:	20 83       	st	Z, r18
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac0:	93 83       	std	Z+3, r25	; 0x03
    3ac2:	82 83       	std	Z+2, r24	; 0x02
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <memset>:
    3aca:	dc 01       	movw	r26, r24
    3acc:	01 c0       	rjmp	.+2      	; 0x3ad0 <memset+0x6>
    3ace:	6d 93       	st	X+, r22
    3ad0:	41 50       	subi	r20, 0x01	; 1
    3ad2:	50 40       	sbci	r21, 0x00	; 0
    3ad4:	e0 f7       	brcc	.-8      	; 0x3ace <memset+0x4>
    3ad6:	08 95       	ret

00003ad8 <_exit>:
    3ad8:	f8 94       	cli

00003ada <__stop_program>:
    3ada:	ff cf       	rjmp	.-2      	; 0x3ada <__stop_program>
