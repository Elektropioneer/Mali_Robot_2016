
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  00003250  000032e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800316  00800316  000034fa  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  000034fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008bb  00000000  00000000  0000385a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002666  00000000  00000000  00004115  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7c  00000000  00000000  0000677b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c6e  00000000  00000000  000072f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a0  00000000  00000000  00009f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000afe  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000318  00000000  00000000  0000b006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static void led()
{
	PORTG = 0x00;
	_delay_ms(1000);
	PORTG = 0xff;
}
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       2:	00 00       	nop
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       6:	00 00       	nop
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       a:	00 00       	nop
{
    timer_callback = callback;
}

static int combination_check()
{
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	7d c3       	rjmp	.+1786   	; 0x744 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 e5       	ldi	r30, 0x50	; 80
      a8:	f2 e3       	ldi	r31, 0x32	; 50
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 31       	cpi	r26, 0x16	; 22
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	14 e0       	ldi	r17, 0x04	; 4
      bc:	a6 e1       	ldi	r26, 0x16	; 22
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 35       	cpi	r26, 0x5E	; 94
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 26 19 	jmp	0x324c	; 0x324c <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	60 97       	sbiw	r28, 0x10	; 16
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int camera = 1;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	98 8b       	std	Y+16, r25	; 0x10
      ec:	8f 87       	std	Y+15, r24	; 0x0f


	system_init();
      ee:	0e 94 9a 13 	call	0x2734	; 0x2734 <system_init>
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	a8 ec       	ldi	r26, 0xC8	; 200
      f8:	b2 e4       	ldi	r27, 0x42	; 66
      fa:	8b 87       	std	Y+11, r24	; 0x0b
      fc:	9c 87       	std	Y+12, r25	; 0x0c
      fe:	ad 87       	std	Y+13, r26	; 0x0d
     100:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     102:	6b 85       	ldd	r22, Y+11	; 0x0b
     104:	7c 85       	ldd	r23, Y+12	; 0x0c
     106:	8d 85       	ldd	r24, Y+13	; 0x0d
     108:	9e 85       	ldd	r25, Y+14	; 0x0e
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e4       	ldi	r19, 0x40	; 64
     10e:	4c e1       	ldi	r20, 0x1C	; 28
     110:	55 e4       	ldi	r21, 0x45	; 69
     112:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     116:	dc 01       	movw	r26, r24
     118:	cb 01       	movw	r24, r22
     11a:	8f 83       	std	Y+7, r24	; 0x07
     11c:	98 87       	std	Y+8, r25	; 0x08
     11e:	a9 87       	std	Y+9, r26	; 0x09
     120:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     122:	6f 81       	ldd	r22, Y+7	; 0x07
     124:	78 85       	ldd	r23, Y+8	; 0x08
     126:	89 85       	ldd	r24, Y+9	; 0x09
     128:	9a 85       	ldd	r25, Y+10	; 0x0a
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	5f e3       	ldi	r21, 0x3F	; 63
     132:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
     136:	88 23       	and	r24, r24
     138:	2c f4       	brge	.+10     	; 0x144 <main+0x72>
		__ticks = 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	9e 83       	std	Y+6, r25	; 0x06
     140:	8d 83       	std	Y+5, r24	; 0x05
     142:	3f c0       	rjmp	.+126    	; 0x1c2 <main+0xf0>
	else if (__tmp > 65535)
     144:	6f 81       	ldd	r22, Y+7	; 0x07
     146:	78 85       	ldd	r23, Y+8	; 0x08
     148:	89 85       	ldd	r24, Y+9	; 0x09
     14a:	9a 85       	ldd	r25, Y+10	; 0x0a
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	3f ef       	ldi	r19, 0xFF	; 255
     150:	4f e7       	ldi	r20, 0x7F	; 127
     152:	57 e4       	ldi	r21, 0x47	; 71
     154:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
     158:	18 16       	cp	r1, r24
     15a:	4c f5       	brge	.+82     	; 0x1ae <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15c:	6b 85       	ldd	r22, Y+11	; 0x0b
     15e:	7c 85       	ldd	r23, Y+12	; 0x0c
     160:	8d 85       	ldd	r24, Y+13	; 0x0d
     162:	9e 85       	ldd	r25, Y+14	; 0x0e
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e2       	ldi	r20, 0x20	; 32
     16a:	51 e4       	ldi	r21, 0x41	; 65
     16c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	bc 01       	movw	r22, r24
     176:	cd 01       	movw	r24, r26
     178:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     17c:	dc 01       	movw	r26, r24
     17e:	cb 01       	movw	r24, r22
     180:	9e 83       	std	Y+6, r25	; 0x06
     182:	8d 83       	std	Y+5, r24	; 0x05
     184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0xd2>
     186:	8a ef       	ldi	r24, 0xFA	; 250
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9c 83       	std	Y+4, r25	; 0x04
     18c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <main+0xc0>
     196:	9c 83       	std	Y+4, r25	; 0x04
     198:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	8d 81       	ldd	r24, Y+5	; 0x05
     19c:	9e 81       	ldd	r25, Y+6	; 0x06
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	9e 83       	std	Y+6, r25	; 0x06
     1a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	69 f7       	brne	.-38     	; 0x186 <main+0xb4>
     1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ae:	6f 81       	ldd	r22, Y+7	; 0x07
     1b0:	78 85       	ldd	r23, Y+8	; 0x08
     1b2:	89 85       	ldd	r24, Y+9	; 0x09
     1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	9e 83       	std	Y+6, r25	; 0x06
     1c0:	8d 83       	std	Y+5, r24	; 0x05
     1c2:	8d 81       	ldd	r24, Y+5	; 0x05
     1c4:	9e 81       	ldd	r25, Y+6	; 0x06
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0xfc>
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01
		{
			purple_camera();	
			camera = 0;
			_delay_ms(3000);
		}*/
		purpleside();
     1d6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <purpleside>
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <main+0x104>

000001dc <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <servo_init+0xa>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	9a 83       	std	Y+2, r25	; 0x02
     1ec:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1ee:	ad e2       	ldi	r26, 0x2D	; 45
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	ed e2       	ldi	r30, 0x2D	; 45
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	88 63       	ori	r24, 0x38	; 56
     1fa:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1fc:	a4 e2       	ldi	r26, 0x24	; 36
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e4 e2       	ldi	r30, 0x24	; 36
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	80 68       	ori	r24, 0x80	; 128
     208:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     20a:	e4 e9       	ldi	r30, 0x94	; 148
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	11 82       	std	Z+1, r1	; 0x01
     210:	10 82       	st	Z, r1
	TCNT0 = 0;
     212:	e6 e4       	ldi	r30, 0x46	; 70
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	10 82       	st	Z, r1

	OCR3A = 0;
     218:	e8 e9       	ldi	r30, 0x98	; 152
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	11 82       	std	Z+1, r1	; 0x01
     21e:	10 82       	st	Z, r1
	OCR3B = 0;
     220:	ea e9       	ldi	r30, 0x9A	; 154
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1
	OCR3C = 0;
     228:	ec e9       	ldi	r30, 0x9C	; 156
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	11 82       	std	Z+1, r1	; 0x01
     22e:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     230:	e0 e9       	ldi	r30, 0x90	; 144
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	8e eb       	ldi	r24, 0xBE	; 190
     236:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     238:	e1 e9       	ldi	r30, 0x91	; 145
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	8a e1       	ldi	r24, 0x1A	; 26
     23e:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     240:	e4 e4       	ldi	r30, 0x44	; 68
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	8b e6       	ldi	r24, 0x6B	; 107
     246:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     248:	06 e9       	ldi	r16, 0x96	; 150
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
     250:	cc 01       	movw	r24, r24
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	bc 01       	movw	r22, r24
     258:	cd 01       	movw	r24, r26
     25a:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__floatunsisf>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	bc 01       	movw	r22, r24
     264:	cd 01       	movw	r24, r26
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	9c 01       	movw	r18, r24
     278:	ad 01       	movw	r20, r26
     27a:	60 e8       	ldi	r22, 0x80	; 128
     27c:	76 e9       	ldi	r23, 0x96	; 150
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	9b e4       	ldi	r25, 0x4B	; 75
     282:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	5f e3       	ldi	r21, 0x3F	; 63
     296:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__addsf3>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	f8 01       	movw	r30, r16
     2ac:	91 83       	std	Z+1, r25	; 0x01
     2ae:	80 83       	st	Z, r24
}
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	df 93       	push	r29
     2c8:	cf 93       	push	r28
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <servo_set_duty_cycle_umbrella+0xe>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <servo_set_duty_cycle_umbrella+0x10>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	9c 83       	std	Y+4, r25	; 0x04
     2d4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2d6:	e6 e9       	ldi	r30, 0x96	; 150
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	91 81       	ldd	r25, Z+1	; 0x01
     2de:	cc 01       	movw	r24, r24
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__floatunsisf>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	4f e7       	ldi	r20, 0x7F	; 127
     2fa:	53 e4       	ldi	r21, 0x43	; 67
     2fc:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	7c 01       	movw	r14, r24
     306:	8d 01       	movw	r16, r26
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	aa 27       	eor	r26, r26
     30e:	97 fd       	sbrc	r25, 7
     310:	a0 95       	com	r26
     312:	ba 2f       	mov	r27, r26
     314:	bc 01       	movw	r22, r24
     316:	cd 01       	movw	r24, r26
     318:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__floatsisf>
     31c:	9b 01       	movw	r18, r22
     31e:	ac 01       	movw	r20, r24
     320:	c8 01       	movw	r24, r16
     322:	b7 01       	movw	r22, r14
     324:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__addsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     348:	dc 01       	movw	r26, r24
     34a:	cb 01       	movw	r24, r22
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     350:	e9 e9       	ldi	r30, 0x99	; 153
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	89 2f       	mov	r24, r25
     35a:	99 27       	eor	r25, r25
     35c:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     35e:	e8 e9       	ldi	r30, 0x98	; 152
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	80 83       	st	Z, r24
}
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	cf 91       	pop	r28
     370:	df 91       	pop	r29
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	08 95       	ret

0000037c <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	df 93       	push	r29
     386:	cf 93       	push	r28
     388:	00 d0       	rcall	.+0      	; 0x38a <servo_set_duty_cycle_door+0xe>
     38a:	00 d0       	rcall	.+0      	; 0x38c <servo_set_duty_cycle_door+0x10>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9c 83       	std	Y+4, r25	; 0x04
     392:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     394:	e6 e9       	ldi	r30, 0x96	; 150
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	91 81       	ldd	r25, Z+1	; 0x01
     39c:	cc 01       	movw	r24, r24
     39e:	a0 e0       	ldi	r26, 0x00	; 0
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__floatunsisf>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4f e7       	ldi	r20, 0x7F	; 127
     3b8:	53 e4       	ldi	r21, 0x43	; 67
     3ba:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	7c 01       	movw	r14, r24
     3c4:	8d 01       	movw	r16, r26
     3c6:	8b 81       	ldd	r24, Y+3	; 0x03
     3c8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ca:	aa 27       	eor	r26, r26
     3cc:	97 fd       	sbrc	r25, 7
     3ce:	a0 95       	com	r26
     3d0:	ba 2f       	mov	r27, r26
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__floatsisf>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	c8 01       	movw	r24, r16
     3e0:	b7 01       	movw	r22, r14
     3e2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	bc 01       	movw	r22, r24
     3ec:	cd 01       	movw	r24, r26
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	5f e3       	ldi	r21, 0x3F	; 63
     3f6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__addsf3>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     40e:	eb e9       	ldi	r30, 0x9B	; 155
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	9a 81       	ldd	r25, Y+2	; 0x02
     416:	89 2f       	mov	r24, r25
     418:	99 27       	eor	r25, r25
     41a:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     41c:	ea e9       	ldi	r30, 0x9A	; 154
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	80 83       	st	Z, r24
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	08 95       	ret

0000043a <servo_set_umbrella_position>:
	OCR3CL = temp & 0xFF;
}
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	0f 92       	push	r0
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	99 27       	eor	r25, r25
     44a:	87 fd       	sbrc	r24, 7
     44c:	90 95       	com	r25
     44e:	a9 2f       	mov	r26, r25
     450:	b9 2f       	mov	r27, r25
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__floatsisf>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	bc 01       	movw	r22, r24
     460:	cd 01       	movw	r24, r26
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	44 eb       	ldi	r20, 0xB4	; 180
     468:	52 e4       	ldi	r21, 0x42	; 66
     46a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     46e:	dc 01       	movw	r26, r24
     470:	cb 01       	movw	r24, r22
     472:	bc 01       	movw	r22, r24
     474:	cd 01       	movw	r24, r26
     476:	26 e6       	ldi	r18, 0x66	; 102
     478:	36 e6       	ldi	r19, 0x66	; 102
     47a:	46 e3       	ldi	r20, 0x36	; 54
     47c:	51 ec       	ldi	r21, 0xC1	; 193
     47e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	bc 01       	movw	r22, r24
     488:	cd 01       	movw	r24, r26
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	4c e6       	ldi	r20, 0x6C	; 108
     490:	53 e4       	ldi	r21, 0x43	; 67
     492:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__addsf3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	9c 01       	movw	r18, r24
     49c:	ad 01       	movw	r20, r26
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8f e7       	ldi	r24, 0x7F	; 127
     4a4:	93 e4       	ldi	r25, 0x43	; 67
     4a6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__subsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	bc 01       	movw	r22, r24
     4b0:	cd 01       	movw	r24, r26
     4b2:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fixsfsi>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	01 df       	rcall	.-510    	; 0x2be <servo_set_duty_cycle_umbrella>
}
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	0f 92       	push	r0
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	99 27       	eor	r25, r25
     4d4:	87 fd       	sbrc	r24, 7
     4d6:	90 95       	com	r25
     4d8:	a9 2f       	mov	r26, r25
     4da:	b9 2f       	mov	r27, r25
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__floatsisf>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	bc 01       	movw	r22, r24
     4ea:	cd 01       	movw	r24, r26
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	44 eb       	ldi	r20, 0xB4	; 180
     4f2:	52 e4       	ldi	r21, 0x42	; 66
     4f4:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divsf3>
     4f8:	dc 01       	movw	r26, r24
     4fa:	cb 01       	movw	r24, r22
     4fc:	bc 01       	movw	r22, r24
     4fe:	cd 01       	movw	r24, r26
     500:	26 e6       	ldi	r18, 0x66	; 102
     502:	36 e6       	ldi	r19, 0x66	; 102
     504:	46 e3       	ldi	r20, 0x36	; 54
     506:	51 ec       	ldi	r21, 0xC1	; 193
     508:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4c e6       	ldi	r20, 0x6C	; 108
     51a:	53 e4       	ldi	r21, 0x43	; 67
     51c:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__addsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	9c 01       	movw	r18, r24
     526:	ad 01       	movw	r20, r26
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	8f e7       	ldi	r24, 0x7F	; 127
     52e:	93 e4       	ldi	r25, 0x43	; 67
     530:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__subsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__fixsfsi>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	1b df       	rcall	.-458    	; 0x37c <servo_set_duty_cycle_door>
}
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	6c 97       	sbiw	r28, 0x1c	; 28
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     562:	85 e5       	ldi	r24, 0x55	; 85
     564:	6a df       	rcall	.-300    	; 0x43a <servo_set_umbrella_position>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	aa e7       	ldi	r26, 0x7A	; 122
     56c:	b4 e4       	ldi	r27, 0x44	; 68
     56e:	89 8f       	std	Y+25, r24	; 0x19
     570:	9a 8f       	std	Y+26, r25	; 0x1a
     572:	ab 8f       	std	Y+27, r26	; 0x1b
     574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     576:	69 8d       	ldd	r22, Y+25	; 0x19
     578:	7a 8d       	ldd	r23, Y+26	; 0x1a
     57a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e4       	ldi	r19, 0x40	; 64
     582:	4c e1       	ldi	r20, 0x1C	; 28
     584:	55 e4       	ldi	r21, 0x45	; 69
     586:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	8d 8b       	std	Y+21, r24	; 0x15
     590:	9e 8b       	std	Y+22, r25	; 0x16
     592:	af 8b       	std	Y+23, r26	; 0x17
     594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     596:	6d 89       	ldd	r22, Y+21	; 0x15
     598:	7e 89       	ldd	r23, Y+22	; 0x16
     59a:	8f 89       	ldd	r24, Y+23	; 0x17
     59c:	98 8d       	ldd	r25, Y+24	; 0x18
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5f e3       	ldi	r21, 0x3F	; 63
     5a6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
     5aa:	88 23       	and	r24, r24
     5ac:	2c f4       	brge	.+10     	; 0x5b8 <actuators_umbrella+0x6a>
		__ticks = 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9c 8b       	std	Y+20, r25	; 0x14
     5b4:	8b 8b       	std	Y+19, r24	; 0x13
     5b6:	3f c0       	rjmp	.+126    	; 0x636 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     5b8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ba:	7e 89       	ldd	r23, Y+22	; 0x16
     5bc:	8f 89       	ldd	r24, Y+23	; 0x17
     5be:	98 8d       	ldd	r25, Y+24	; 0x18
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	4c f5       	brge	.+82     	; 0x622 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d0:	69 8d       	ldd	r22, Y+25	; 0x19
     5d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e2       	ldi	r20, 0x20	; 32
     5de:	51 e4       	ldi	r21, 0x41	; 65
     5e0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	9c 8b       	std	Y+20, r25	; 0x14
     5f6:	8b 8b       	std	Y+19, r24	; 0x13
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <actuators_umbrella+0xca>
     5fa:	8a ef       	ldi	r24, 0xFA	; 250
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	9a 8b       	std	Y+18, r25	; 0x12
     600:	89 8b       	std	Y+17, r24	; 0x11
     602:	89 89       	ldd	r24, Y+17	; 0x11
     604:	9a 89       	ldd	r25, Y+18	; 0x12
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <actuators_umbrella+0xb8>
     60a:	9a 8b       	std	Y+18, r25	; 0x12
     60c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     60e:	8b 89       	ldd	r24, Y+19	; 0x13
     610:	9c 89       	ldd	r25, Y+20	; 0x14
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	9c 8b       	std	Y+20, r25	; 0x14
     616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     618:	8b 89       	ldd	r24, Y+19	; 0x13
     61a:	9c 89       	ldd	r25, Y+20	; 0x14
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	69 f7       	brne	.-38     	; 0x5fa <actuators_umbrella+0xac>
     620:	14 c0       	rjmp	.+40     	; 0x64a <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     622:	6d 89       	ldd	r22, Y+21	; 0x15
     624:	7e 89       	ldd	r23, Y+22	; 0x16
     626:	8f 89       	ldd	r24, Y+23	; 0x17
     628:	98 8d       	ldd	r25, Y+24	; 0x18
     62a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	9c 8b       	std	Y+20, r25	; 0x14
     634:	8b 8b       	std	Y+19, r24	; 0x13
     636:	8b 89       	ldd	r24, Y+19	; 0x13
     638:	9c 89       	ldd	r25, Y+20	; 0x14
     63a:	98 8b       	std	Y+16, r25	; 0x10
     63c:	8f 87       	std	Y+15, r24	; 0x0f
     63e:	8f 85       	ldd	r24, Y+15	; 0x0f
     640:	98 89       	ldd	r25, Y+16	; 0x10
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <actuators_umbrella+0xf4>
     646:	98 8b       	std	Y+16, r25	; 0x10
     648:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	3b df       	rcall	.-394    	; 0x4c4 <servo_set_door_position>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	aa e7       	ldi	r26, 0x7A	; 122
     654:	b4 e4       	ldi	r27, 0x44	; 68
     656:	8b 87       	std	Y+11, r24	; 0x0b
     658:	9c 87       	std	Y+12, r25	; 0x0c
     65a:	ad 87       	std	Y+13, r26	; 0x0d
     65c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     65e:	6b 85       	ldd	r22, Y+11	; 0x0b
     660:	7c 85       	ldd	r23, Y+12	; 0x0c
     662:	8d 85       	ldd	r24, Y+13	; 0x0d
     664:	9e 85       	ldd	r25, Y+14	; 0x0e
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e4       	ldi	r19, 0x40	; 64
     66a:	4c e1       	ldi	r20, 0x1C	; 28
     66c:	55 e4       	ldi	r21, 0x45	; 69
     66e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	8f 83       	std	Y+7, r24	; 0x07
     678:	98 87       	std	Y+8, r25	; 0x08
     67a:	a9 87       	std	Y+9, r26	; 0x09
     67c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     67e:	6f 81       	ldd	r22, Y+7	; 0x07
     680:	78 85       	ldd	r23, Y+8	; 0x08
     682:	89 85       	ldd	r24, Y+9	; 0x09
     684:	9a 85       	ldd	r25, Y+10	; 0x0a
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e8       	ldi	r20, 0x80	; 128
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
     692:	88 23       	and	r24, r24
     694:	2c f4       	brge	.+10     	; 0x6a0 <actuators_umbrella+0x152>
		__ticks = 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	9e 83       	std	Y+6, r25	; 0x06
     69c:	8d 83       	std	Y+5, r24	; 0x05
     69e:	3f c0       	rjmp	.+126    	; 0x71e <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     6a0:	6f 81       	ldd	r22, Y+7	; 0x07
     6a2:	78 85       	ldd	r23, Y+8	; 0x08
     6a4:	89 85       	ldd	r24, Y+9	; 0x09
     6a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	3f ef       	ldi	r19, 0xFF	; 255
     6ac:	4f e7       	ldi	r20, 0x7F	; 127
     6ae:	57 e4       	ldi	r21, 0x47	; 71
     6b0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
     6b4:	18 16       	cp	r1, r24
     6b6:	4c f5       	brge	.+82     	; 0x70a <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b8:	6b 85       	ldd	r22, Y+11	; 0x0b
     6ba:	7c 85       	ldd	r23, Y+12	; 0x0c
     6bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6be:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e2       	ldi	r20, 0x20	; 32
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	bc 01       	movw	r22, r24
     6d2:	cd 01       	movw	r24, r26
     6d4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	9e 83       	std	Y+6, r25	; 0x06
     6de:	8d 83       	std	Y+5, r24	; 0x05
     6e0:	0f c0       	rjmp	.+30     	; 0x700 <actuators_umbrella+0x1b2>
     6e2:	8a ef       	ldi	r24, 0xFA	; 250
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <actuators_umbrella+0x1a0>
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f6:	8d 81       	ldd	r24, Y+5	; 0x05
     6f8:	9e 81       	ldd	r25, Y+6	; 0x06
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	9e 83       	std	Y+6, r25	; 0x06
     6fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	8d 81       	ldd	r24, Y+5	; 0x05
     702:	9e 81       	ldd	r25, Y+6	; 0x06
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	69 f7       	brne	.-38     	; 0x6e2 <actuators_umbrella+0x194>
     708:	14 c0       	rjmp	.+40     	; 0x732 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70a:	6f 81       	ldd	r22, Y+7	; 0x07
     70c:	78 85       	ldd	r23, Y+8	; 0x08
     70e:	89 85       	ldd	r24, Y+9	; 0x09
     710:	9a 85       	ldd	r25, Y+10	; 0x0a
     712:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e 83       	std	Y+6, r25	; 0x06
     71c:	8d 83       	std	Y+5, r24	; 0x05
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <actuators_umbrella+0x1dc>
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     732:	6c 96       	adiw	r28, 0x1c	; 28
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	08 95       	ret

00000744 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	00 90 5b 00 	lds	r0, 0x005B
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <__vector_18+0x2a>
     76e:	00 d0       	rcall	.+0      	; 0x770 <__vector_18+0x2c>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     774:	ed ee       	ldi	r30, 0xED	; 237
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     77c:	1b 82       	std	Y+3, r1	; 0x03
     77e:	9c c0       	rjmp	.+312    	; 0x8b8 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     780:	ed ee       	ldi	r30, 0xED	; 237
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	82 95       	swap	r24
     788:	80 7f       	andi	r24, 0xF0	; 240
     78a:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     78c:	ee ee       	ldi	r30, 0xEE	; 238
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	82 95       	swap	r24
     794:	86 95       	lsr	r24
     796:	87 70       	andi	r24, 0x07	; 7
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	81 70       	andi	r24, 0x01	; 1
     79e:	90 70       	andi	r25, 0x00	; 0
     7a0:	88 23       	and	r24, r24
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <__vector_18+0x62>
     7a4:	6e c0       	rjmp	.+220    	; 0x882 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     7a6:	ef ee       	ldi	r30, 0xEF	; 239
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     7ae:	ae ee       	ldi	r26, 0xEE	; 238
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	ee ee       	ldi	r30, 0xEE	; 238
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8f 7d       	andi	r24, 0xDF	; 223
     7ba:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     7bc:	e2 ef       	ldi	r30, 0xF2	; 242
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	82 95       	swap	r24
     7c4:	86 95       	lsr	r24
     7c6:	87 70       	andi	r24, 0x07	; 7
     7c8:	28 2f       	mov	r18, r24
     7ca:	e3 ef       	ldi	r30, 0xF3	; 243
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	82 2b       	or	r24, r18
     7e2:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     7e4:	19 82       	std	Y+1, r1	; 0x01
     7e6:	2a c0       	rjmp	.+84     	; 0x83c <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	82 1b       	sub	r24, r18
     7f4:	93 0b       	sbc	r25, r19
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	90 95       	com	r25
     7fc:	81 95       	neg	r24
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	fc 01       	movw	r30, r24
     802:	ea 5e       	subi	r30, 0xEA	; 234
     804:	fc 4f       	sbci	r31, 0xFC	; 252
     806:	40 81       	ld	r20, Z
     808:	51 81       	ldd	r21, Z+1	; 0x01
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	fc 01       	movw	r30, r24
     814:	e6 5d       	subi	r30, 0xD6	; 214
     816:	fc 4f       	sbci	r31, 0xFC	; 252
     818:	80 81       	ld	r24, Z
     81a:	28 2f       	mov	r18, r24
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	88 2f       	mov	r24, r24
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	da 01       	movw	r26, r20
     82a:	a8 0f       	add	r26, r24
     82c:	b9 1f       	adc	r27, r25
     82e:	ea ef       	ldi	r30, 0xFA	; 250
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	88 30       	cpi	r24, 0x08	; 8
     840:	98 f2       	brcs	.-90     	; 0x7e8 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	fc 01       	movw	r30, r24
     84c:	e6 5d       	subi	r30, 0xD6	; 214
     84e:	fc 4f       	sbci	r31, 0xFC	; 252
     850:	80 81       	ld	r24, Z
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	80 83       	st	Z, r24
     856:	80 81       	ld	r24, Z
     858:	85 30       	cpi	r24, 0x05	; 5
     85a:	41 f4       	brne	.+16     	; 0x86c <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	fc 01       	movw	r30, r24
     866:	e6 5d       	subi	r30, 0xD6	; 214
     868:	fc 4f       	sbci	r31, 0xFC	; 252
     86a:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	fc 01       	movw	r30, r24
     876:	e2 5c       	subi	r30, 0xC2	; 194
     878:	fc 4f       	sbci	r31, 0xFC	; 252
     87a:	80 81       	ld	r24, Z
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	80 83       	st	Z, r24
     880:	1f c0       	rjmp	.+62     	; 0x8c0 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     882:	ee ee       	ldi	r30, 0xEE	; 238
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	82 95       	swap	r24
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	83 70       	andi	r24, 0x03	; 3
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	81 70       	andi	r24, 0x01	; 1
     896:	90 70       	andi	r25, 0x00	; 0
     898:	88 23       	and	r24, r24
     89a:	59 f0       	breq	.+22     	; 0x8b2 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     89c:	ef ee       	ldi	r30, 0xEF	; 239
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     8a2:	ae ee       	ldi	r26, 0xEE	; 238
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	ee ee       	ldi	r30, 0xEE	; 238
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 7b       	andi	r24, 0xBF	; 191
     8ae:	8c 93       	st	X, r24
     8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	8f 30       	cpi	r24, 0x0F	; 15
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <__vector_18+0x17c>
     8be:	60 cf       	rjmp	.-320    	; 0x780 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     8c0:	ed ee       	ldi	r30, 0xED	; 237
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	8c 81       	ldd	r24, Y+4	; 0x04
     8c6:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     8c8:	aa ed       	ldi	r26, 0xDA	; 218
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	ea ed       	ldi	r30, 0xDA	; 218
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	8c 93       	st	X, r24
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	00 92 5b 00 	sts	0x005B, r0
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	00 d0       	rcall	.+0      	; 0x90a <CAN_InitModule+0x6>
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     90e:	e8 ed       	ldi	r30, 0xD8	; 216
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     916:	1a 82       	std	Y+2, r1	; 0x02
     918:	32 c0       	rjmp	.+100    	; 0x97e <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     91a:	ed ee       	ldi	r30, 0xED	; 237
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
     920:	82 95       	swap	r24
     922:	80 7f       	andi	r24, 0xF0	; 240
     924:	80 83       	st	Z, r24

		CANSTMOB = 0;
     926:	ee ee       	ldi	r30, 0xEE	; 238
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	10 82       	st	Z, r1
		CANCDMOB = 0;
     92c:	ef ee       	ldi	r30, 0xEF	; 239
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	10 82       	st	Z, r1

		CANIDT1 = 0;
     932:	e3 ef       	ldi	r30, 0xF3	; 243
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	10 82       	st	Z, r1
		CANIDT2 = 0;
     938:	e2 ef       	ldi	r30, 0xF2	; 242
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	10 82       	st	Z, r1
		CANIDT3 = 0;
     93e:	e1 ef       	ldi	r30, 0xF1	; 241
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	10 82       	st	Z, r1
		CANIDT4 = 0;
     944:	e0 ef       	ldi	r30, 0xF0	; 240
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	10 82       	st	Z, r1
		CANIDM1 = 0;
     94a:	e7 ef       	ldi	r30, 0xF7	; 247
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	10 82       	st	Z, r1
		CANIDM2 = 0;
     950:	e6 ef       	ldi	r30, 0xF6	; 246
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	10 82       	st	Z, r1
		CANIDM3 = 0;
     956:	e5 ef       	ldi	r30, 0xF5	; 245
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	10 82       	st	Z, r1
		CANIDM4 = 0;
     95c:	e4 ef       	ldi	r30, 0xF4	; 244
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     962:	19 82       	std	Y+1, r1	; 0x01
     964:	06 c0       	rjmp	.+12     	; 0x972 <CAN_InitModule+0x6e>
			CANMSG = 0;
     966:	ea ef       	ldi	r30, 0xFA	; 250
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	88 30       	cpi	r24, 0x08	; 8
     976:	b8 f3       	brcs	.-18     	; 0x966 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	8a 83       	std	Y+2, r24	; 0x02
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	8f 30       	cpi	r24, 0x0F	; 15
     982:	58 f2       	brcs	.-106    	; 0x91a <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     984:	e8 ed       	ldi	r30, 0xD8	; 216
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     98c:	e2 ee       	ldi	r30, 0xE2	; 226
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     994:	e3 ee       	ldi	r30, 0xE3	; 227
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	88 e0       	ldi	r24, 0x08	; 8
     99a:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     99c:	e4 ee       	ldi	r30, 0xE4	; 228
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	8e e5       	ldi	r24, 0x5E	; 94
     9a2:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     9a4:	e5 ee       	ldi	r30, 0xE5	; 229
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     9aa:	eb ed       	ldi	r30, 0xDB	; 219
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 eb       	ldi	r24, 0xB0	; 176
     9b0:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     9b2:	ef ed       	ldi	r30, 0xDF	; 223
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	8f e7       	ldi	r24, 0x7F	; 127
     9b8:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     9ba:	ee ed       	ldi	r30, 0xDE	; 222
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	80 83       	st	Z, r24
	sei();
     9c2:	78 94       	sei
}
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <CAN_InitRxMob+0x6>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <CAN_InitRxMob+0x8>
     9d6:	0f 92       	push	r0
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	9c 83       	std	Y+4, r25	; 0x04
     9de:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     9e0:	ed ee       	ldi	r30, 0xED	; 237
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     9e8:	e9 ed       	ldi	r30, 0xD9	; 217
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	82 95       	swap	r24
     9f0:	8f 70       	andi	r24, 0x0F	; 15
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	90 70       	andi	r25, 0x00	; 0
     9fa:	88 23       	and	r24, r24
     9fc:	a9 f7       	brne	.-22     	; 0x9e8 <CAN_InitRxMob+0x1a>
     9fe:	e9 ed       	ldi	r30, 0xD9	; 217
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	86 95       	lsr	r24
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	88 2f       	mov	r24, r24
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	81 70       	andi	r24, 0x01	; 1
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	88 23       	and	r24, r24
     a14:	49 f7       	brne	.-46     	; 0x9e8 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a16:	1a 82       	std	Y+2, r1	; 0x02
     a18:	3f c0       	rjmp	.+126    	; 0xa98 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     a1a:	ed ee       	ldi	r30, 0xED	; 237
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	82 95       	swap	r24
     a22:	80 7f       	andi	r24, 0xF0	; 240
     a24:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     a26:	ef ee       	ldi	r30, 0xEF	; 239
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	82 95       	swap	r24
     a2e:	86 95       	lsr	r24
     a30:	86 95       	lsr	r24
     a32:	83 70       	andi	r24, 0x03	; 3
     a34:	88 23       	and	r24, r24
     a36:	69 f5       	brne	.+90     	; 0xa92 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     a38:	ef ee       	ldi	r30, 0xEF	; 239
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	8f e0       	ldi	r24, 0x0F	; 15
     a3e:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     a40:	e3 ef       	ldi	r30, 0xF3	; 243
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	90 70       	andi	r25, 0x00	; 0
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	96 95       	lsr	r25
     a50:	87 95       	ror	r24
     a52:	96 95       	lsr	r25
     a54:	87 95       	ror	r24
     a56:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     a58:	e2 ef       	ldi	r30, 0xF2	; 242
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	82 95       	swap	r24
     a60:	88 0f       	add	r24, r24
     a62:	80 7e       	andi	r24, 0xE0	; 224
     a64:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     a66:	e6 ef       	ldi	r30, 0xF6	; 246
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 ee       	ldi	r24, 0xE0	; 224
     a6c:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     a6e:	e7 ef       	ldi	r30, 0xF7	; 247
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     a76:	af ee       	ldi	r26, 0xEF	; 239
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	ef ee       	ldi	r30, 0xEF	; 239
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	80 68       	ori	r24, 0x80	; 128
     a82:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     a84:	ed ee       	ldi	r30, 0xED	; 237
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	80 83       	st	Z, r24

		return 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	8d 83       	std	Y+5, r24	; 0x05
     a90:	0c c0       	rjmp	.+24     	; 0xaaa <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	8a 83       	std	Y+2, r24	; 0x02
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	8f 30       	cpi	r24, 0x0F	; 15
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <CAN_InitRxMob+0xd2>
     a9e:	bd cf       	rjmp	.-134    	; 0xa1a <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     aa0:	ed ee       	ldi	r30, 0xED	; 237
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	80 83       	st	Z, r24

	return 0;
     aa8:	1d 82       	std	Y+5, r1	; 0x05
     aaa:	8d 81       	ldd	r24, Y+5	; 0x05
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	df 93       	push	r29
     ac2:	cf 93       	push	r28
     ac4:	00 d0       	rcall	.+0      	; 0xac6 <CAN_Init+0xa>
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     acc:	1b df       	rcall	.-458    	; 0x904 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     ace:	19 82       	std	Y+1, r1	; 0x01
     ad0:	36 c0       	rjmp	.+108    	; 0xb3e <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	79 df       	rcall	.-270    	; 0x9ce <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	8c 01       	movw	r16, r24
     ae8:	0a 5e       	subi	r16, 0xEA	; 234
     aea:	1c 4f       	sbci	r17, 0xFC	; 252
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 00 18 	call	0x3000	; 0x3000 <calloc>
     af8:	f8 01       	movw	r30, r16
     afa:	91 83       	std	Z+1, r25	; 0x01
     afc:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	48 2f       	mov	r20, r24
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	e2 5c       	subi	r30, 0xC2	; 194
     b14:	fc 4f       	sbci	r31, 0xFC	; 252
     b16:	10 82       	st	Z, r1
     b18:	fc 01       	movw	r30, r24
     b1a:	e2 5c       	subi	r30, 0xC2	; 194
     b1c:	fc 4f       	sbci	r31, 0xFC	; 252
     b1e:	80 81       	ld	r24, Z
     b20:	f9 01       	movw	r30, r18
     b22:	ec 5c       	subi	r30, 0xCC	; 204
     b24:	fc 4f       	sbci	r31, 0xFC	; 252
     b26:	80 83       	st	Z, r24
     b28:	f9 01       	movw	r30, r18
     b2a:	ec 5c       	subi	r30, 0xCC	; 204
     b2c:	fc 4f       	sbci	r31, 0xFC	; 252
     b2e:	80 81       	ld	r24, Z
     b30:	fa 01       	movw	r30, r20
     b32:	e6 5d       	subi	r30, 0xD6	; 214
     b34:	fc 4f       	sbci	r31, 0xFC	; 252
     b36:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	99 81       	ldd	r25, Y+1	; 0x01
     b40:	8a 81       	ldd	r24, Y+2	; 0x02
     b42:	98 17       	cp	r25, r24
     b44:	30 f2       	brcs	.-116    	; 0xad2 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	00 d0       	rcall	.+0      	; 0xb5a <CAN_Read+0x6>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <CAN_Read+0x8>
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	9b 83       	std	Y+3, r25	; 0x03
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     b66:	e4 e3       	ldi	r30, 0x34	; 52
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	fc 01       	movw	r30, r24
     b78:	e2 5c       	subi	r30, 0xC2	; 194
     b7a:	fc 4f       	sbci	r31, 0xFC	; 252
     b7c:	80 81       	ld	r24, Z
     b7e:	88 23       	and	r24, r24
     b80:	b1 f3       	breq	.-20     	; 0xb6e <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     b82:	19 82       	std	Y+1, r1	; 0x01
     b84:	30 c0       	rjmp	.+96     	; 0xbe6 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	dc 01       	movw	r26, r24
     b92:	a2 0f       	add	r26, r18
     b94:	b3 1f       	adc	r27, r19
     b96:	8c 81       	ldd	r24, Y+4	; 0x04
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	82 1b       	sub	r24, r18
     ba2:	93 0b       	sbc	r25, r19
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	90 95       	com	r25
     baa:	81 95       	neg	r24
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	fc 01       	movw	r30, r24
     bb0:	ea 5e       	subi	r30, 0xEA	; 234
     bb2:	fc 4f       	sbci	r31, 0xFC	; 252
     bb4:	40 81       	ld	r20, Z
     bb6:	51 81       	ldd	r21, Z+1	; 0x01
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	fc 01       	movw	r30, r24
     bc2:	ec 5c       	subi	r30, 0xCC	; 204
     bc4:	fc 4f       	sbci	r31, 0xFC	; 252
     bc6:	80 81       	ld	r24, Z
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	fa 01       	movw	r30, r20
     bd8:	e8 0f       	add	r30, r24
     bda:	f9 1f       	adc	r31, r25
     bdc:	80 81       	ld	r24, Z
     bde:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	68 f2       	brcs	.-102    	; 0xb86 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	fc 01       	movw	r30, r24
     bf6:	ec 5c       	subi	r30, 0xCC	; 204
     bf8:	fc 4f       	sbci	r31, 0xFC	; 252
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	80 83       	st	Z, r24
     c00:	80 81       	ld	r24, Z
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	41 f4       	brne	.+16     	; 0xc16 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	fc 01       	movw	r30, r24
     c10:	ec 5c       	subi	r30, 0xCC	; 204
     c12:	fc 4f       	sbci	r31, 0xFC	; 252
     c14:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	9c 01       	movw	r18, r24
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	30 40       	sbci	r19, 0x00	; 0
     c22:	f9 01       	movw	r30, r18
     c24:	e2 5c       	subi	r30, 0xC2	; 194
     c26:	fc 4f       	sbci	r31, 0xFC	; 252
     c28:	80 81       	ld	r24, Z
     c2a:	81 50       	subi	r24, 0x01	; 1
     c2c:	f9 01       	movw	r30, r18
     c2e:	e2 5c       	subi	r30, 0xC2	; 194
     c30:	fc 4f       	sbci	r31, 0xFC	; 252
     c32:	80 83       	st	Z, r24

	return 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
}
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	27 97       	sbiw	r28, 0x07	; 7
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	9d 83       	std	Y+5, r25	; 0x05
     c5a:	8c 83       	std	Y+4, r24	; 0x04
     c5c:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c5e:	e9 ed       	ldi	r30, 0xD9	; 217
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	82 95       	swap	r24
     c66:	8f 70       	andi	r24, 0x0F	; 15
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	88 23       	and	r24, r24
     c72:	a9 f7       	brne	.-22     	; 0xc5e <CAN_Write+0x1a>
     c74:	e9 ed       	ldi	r30, 0xD9	; 217
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	86 95       	lsr	r24
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	90 70       	andi	r25, 0x00	; 0
     c88:	88 23       	and	r24, r24
     c8a:	49 f7       	brne	.-46     	; 0xc5e <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c8c:	ed ee       	ldi	r30, 0xED	; 237
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c94:	1a 82       	std	Y+2, r1	; 0x02
     c96:	12 c0       	rjmp	.+36     	; 0xcbc <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     c98:	ed ee       	ldi	r30, 0xED	; 237
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	82 95       	swap	r24
     ca0:	80 7f       	andi	r24, 0xF0	; 240
     ca2:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     ca4:	ef ee       	ldi	r30, 0xEF	; 239
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 95       	swap	r24
     cac:	86 95       	lsr	r24
     cae:	86 95       	lsr	r24
     cb0:	83 70       	andi	r24, 0x03	; 3
     cb2:	88 23       	and	r24, r24
     cb4:	31 f0       	breq	.+12     	; 0xcc2 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	8f 30       	cpi	r24, 0x0F	; 15
     cc0:	58 f3       	brcs	.-42     	; 0xc98 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	8f 30       	cpi	r24, 0x0F	; 15
     cc6:	19 f4       	brne	.+6      	; 0xcce <CAN_Write+0x8a>
		return -1;
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	8f 83       	std	Y+7, r24	; 0x07
     ccc:	32 c0       	rjmp	.+100    	; 0xd32 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     cce:	e2 ef       	ldi	r30, 0xF2	; 242
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	82 95       	swap	r24
     cd6:	88 0f       	add	r24, r24
     cd8:	80 7e       	andi	r24, 0xE0	; 224
     cda:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     cdc:	e3 ef       	ldi	r30, 0xF3	; 243
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	8e 81       	ldd	r24, Y+6	; 0x06
     ce2:	86 95       	lsr	r24
     ce4:	86 95       	lsr	r24
     ce6:	86 95       	lsr	r24
     ce8:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     cea:	ef ee       	ldi	r30, 0xEF	; 239
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     cf2:	1b 82       	std	Y+3, r1	; 0x03
     cf4:	0f c0       	rjmp	.+30     	; 0xd14 <CAN_Write+0xd0>
		CANMSG = data[i];
     cf6:	aa ef       	ldi	r26, 0xFA	; 250
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	fc 01       	movw	r30, r24
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	80 81       	ld	r24, Z
     d0c:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	8b 83       	std	Y+3, r24	; 0x03
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	88 30       	cpi	r24, 0x08	; 8
     d18:	70 f3       	brcs	.-36     	; 0xcf6 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     d1a:	af ee       	ldi	r26, 0xEF	; 239
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ef ee       	ldi	r30, 0xEF	; 239
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 64       	ori	r24, 0x40	; 64
     d26:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     d28:	ed ee       	ldi	r30, 0xED	; 237
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	80 83       	st	Z, r24

	return 0;
     d30:	1f 82       	std	Y+7, r1	; 0x07
     d32:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	2c 97       	sbiw	r28, 0x0c	; 12
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 87       	std	Y+9, r24	; 0x09
     d5c:	6a 87       	std	Y+10, r22	; 0x0a
     d5e:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d60:	80 91 08 01 	lds	r24, 0x0108
     d64:	90 91 09 01 	lds	r25, 0x0109
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	06 97       	sbiw	r24, 0x06	; 6
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	8f 83       	std	Y+7, r24	; 0x07
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     d78:	ef 81       	ldd	r30, Y+7	; 0x07
     d7a:	f8 85       	ldd	r31, Y+8	; 0x08
     d7c:	90 81       	ld	r25, Z
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	98 17       	cp	r25, r24
     d82:	19 f4       	brne	.+6      	; 0xd8a <gpio_register_pin+0x44>
            return 1;
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	2c 87       	std	Y+12, r18	; 0x0c
     d88:	c9 c0       	rjmp	.+402    	; 0xf1c <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d8a:	ef 81       	ldd	r30, Y+7	; 0x07
     d8c:	f8 85       	ldd	r31, Y+8	; 0x08
     d8e:	80 85       	ldd	r24, Z+8	; 0x08
     d90:	91 85       	ldd	r25, Z+9	; 0x09
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	06 97       	sbiw	r24, 0x06	; 6
     d9c:	98 87       	std	Y+8, r25	; 0x08
     d9e:	8f 83       	std	Y+7, r24	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	06 96       	adiw	r24, 0x06	; 6
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	86 30       	cpi	r24, 0x06	; 6
     daa:	92 07       	cpc	r25, r18
     dac:	29 f7       	brne	.-54     	; 0xd78 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	86 95       	lsr	r24
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	87 70       	andi	r24, 0x07	; 7
     dbe:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     dc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <gpio_register_pin+0x82>
     dc6:	48 c0       	rjmp	.+144    	; 0xe58 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	c9 01       	movw	r24, r18
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	4e 96       	adiw	r24, 0x1e	; 30
     dda:	dc 01       	movw	r26, r24
     ddc:	8e 81       	ldd	r24, Y+6	; 0x06
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	c9 01       	movw	r24, r18
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
     dec:	4e 96       	adiw	r24, 0x1e	; 30
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <gpio_register_pin+0xbe>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	2a 95       	dec	r18
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <gpio_register_pin+0xba>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	c9 01       	movw	r24, r18
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	4f 96       	adiw	r24, 0x1f	; 31
     e1e:	dc 01       	movw	r26, r24
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	c9 01       	movw	r24, r18
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	4f 96       	adiw	r24, 0x1f	; 31
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <gpio_register_pin+0x104>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <gpio_register_pin+0x100>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
        return 0;
     e54:	1c 86       	std	Y+12, r1	; 0x0c
     e56:	62 c0       	rjmp	.+196    	; 0xf1c <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e58:	8e 81       	ldd	r24, Y+6	; 0x06
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	c9 01       	movw	r24, r18
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	4e 96       	adiw	r24, 0x1e	; 30
     e6a:	dc 01       	movw	r26, r24
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	c9 01       	movw	r24, r18
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	82 0f       	add	r24, r18
     e7a:	93 1f       	adc	r25, r19
     e7c:	4e 96       	adiw	r24, 0x1e	; 30
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <gpio_register_pin+0x14e>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	2a 95       	dec	r18
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <gpio_register_pin+0x14a>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	c9 01       	movw	r24, r18
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	4f 96       	adiw	r24, 0x1f	; 31
     eb0:	dc 01       	movw	r26, r24
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	c9 01       	movw	r24, r18
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	4f 96       	adiw	r24, 0x1f	; 31
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <gpio_register_pin+0x194>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	2a 95       	dec	r18
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <gpio_register_pin+0x190>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     ee2:	8a e0       	ldi	r24, 0x0A	; 10
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 1a 18 	call	0x3034	; 0x3034 <malloc>
     eea:	98 87       	std	Y+8, r25	; 0x08
     eec:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	19 f4       	brne	.+6      	; 0xefc <gpio_register_pin+0x1b6>
        return 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	8c 87       	std	Y+12, r24	; 0x0c
     efa:	10 c0       	rjmp	.+32     	; 0xf1c <gpio_register_pin+0x1d6>

    input->pin       = pin;
     efc:	ef 81       	ldd	r30, Y+7	; 0x07
     efe:	f8 85       	ldd	r31, Y+8	; 0x08
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     f04:	ef 81       	ldd	r30, Y+7	; 0x07
     f06:	f8 85       	ldd	r31, Y+8	; 0x08
     f08:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0a:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     f0c:	8f 81       	ldd	r24, Y+7	; 0x07
     f0e:	98 85       	ldd	r25, Y+8	; 0x08
     f10:	06 96       	adiw	r24, 0x06	; 6
     f12:	26 e0       	ldi	r18, 0x06	; 6
     f14:	31 e0       	ldi	r19, 0x01	; 1
     f16:	b9 01       	movw	r22, r18
     f18:	0b d0       	rcall	.+22     	; 0xf30 <list_add>

    return 0;
     f1a:	1c 86       	std	Y+12, r1	; 0x0c
     f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     f1e:	2c 96       	adiw	r28, 0x0c	; 12
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <list_add+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <list_add+0x8>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	7c 83       	std	Y+4, r23	; 0x04
     f42:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f44:	eb 81       	ldd	r30, Y+3	; 0x03
     f46:	fc 81       	ldd	r31, Y+4	; 0x04
     f48:	42 81       	ldd	r20, Z+2	; 0x02
     f4a:	53 81       	ldd	r21, Z+3	; 0x03
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	3c 81       	ldd	r19, Y+4	; 0x04
     f54:	b9 01       	movw	r22, r18
     f56:	07 d0       	rcall	.+14     	; 0xf66 <__list_add>
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <__list_add+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <__list_add+0x8>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <__list_add+0xa>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	7c 83       	std	Y+4, r23	; 0x04
     f7a:	6b 83       	std	Y+3, r22	; 0x03
     f7c:	5e 83       	std	Y+6, r21	; 0x06
     f7e:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f80:	ed 81       	ldd	r30, Y+5	; 0x05
     f82:	fe 81       	ldd	r31, Y+6	; 0x06
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
    new->next = next;
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	93 83       	std	Z+3, r25	; 0x03
     f96:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
    prev->next = new;
     fa4:	eb 81       	ldd	r30, Y+3	; 0x03
     fa6:	fc 81       	ldd	r31, Y+4	; 0x04
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	93 83       	std	Z+3, r25	; 0x03
     fae:	82 83       	std	Z+2, r24	; 0x02
}
     fb0:	26 96       	adiw	r28, 0x06	; 6
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <__gpio_read_pin+0x6>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	87 70       	andi	r24, 0x07	; 7
     fe0:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	4d 96       	adiw	r24, 0x1d	; 29
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <__gpio_read_pin+0x4c>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <__gpio_read_pin+0x48>
    1012:	ca 01       	movw	r24, r20
    1014:	81 70       	andi	r24, 0x01	; 1
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	2b 97       	sbiw	r28, 0x0b	; 11
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1038:	80 91 08 01 	lds	r24, 0x0108
    103c:	90 91 09 01 	lds	r25, 0x0109
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	06 97       	sbiw	r24, 0x06	; 6
    104a:	98 87       	std	Y+8, r25	; 0x08
    104c:	8f 83       	std	Y+7, r24	; 0x07
    104e:	55 c0       	rjmp	.+170    	; 0x10fa <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1050:	ef 81       	ldd	r30, Y+7	; 0x07
    1052:	f8 85       	ldd	r31, Y+8	; 0x08
    1054:	90 81       	ld	r25, Z
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	98 17       	cp	r25, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <gpio_read_pin+0x3c>
    105c:	43 c0       	rjmp	.+134    	; 0x10e4 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    105e:	1c 82       	std	Y+4, r1	; 0x04
    1060:	21 c0       	rjmp	.+66     	; 0x10a4 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	fc 01       	movw	r30, r24
    1072:	32 96       	adiw	r30, 0x02	; 2
    1074:	40 81       	ld	r20, Z
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	fc 01       	movw	r30, r24
    108c:	32 96       	adiw	r30, 0x02	; 2
    108e:	80 81       	ld	r24, Z
    1090:	48 17       	cp	r20, r24
    1092:	29 f0       	breq	.+10     	; 0x109e <gpio_read_pin+0x7c>
                    return input->previous_state;
    1094:	ef 81       	ldd	r30, Y+7	; 0x07
    1096:	f8 85       	ldd	r31, Y+8	; 0x08
    1098:	25 81       	ldd	r18, Z+5	; 0x05
    109a:	2b 87       	std	Y+11, r18	; 0x0b
    109c:	38 c0       	rjmp	.+112    	; 0x110e <__stack+0xf>
                i++;
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	e0 f2       	brcs	.-72     	; 0x1062 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    10aa:	ef 81       	ldd	r30, Y+7	; 0x07
    10ac:	f8 85       	ldd	r31, Y+8	; 0x08
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 27       	eor	r24, r25
    10b4:	88 23       	and	r24, r24
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <gpio_read_pin+0xa0>
    10b8:	ef 81       	ldd	r30, Y+7	; 0x07
    10ba:	f8 85       	ldd	r31, Y+8	; 0x08
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	8a 87       	std	Y+10, r24	; 0x0a
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <gpio_read_pin+0xb0>
    10c2:	ef 81       	ldd	r30, Y+7	; 0x07
    10c4:	f8 85       	ldd	r31, Y+8	; 0x08
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	1a 86       	std	Y+10, r1	; 0x0a
    10ca:	88 23       	and	r24, r24
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <gpio_read_pin+0xb0>
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	2a 87       	std	Y+10, r18	; 0x0a
    10d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d4:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    10d6:	ef 81       	ldd	r30, Y+7	; 0x07
    10d8:	f8 85       	ldd	r31, Y+8	; 0x08
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	85 83       	std	Z+5, r24	; 0x05

            return state;
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	2b 87       	std	Y+11, r18	; 0x0b
    10e2:	15 c0       	rjmp	.+42     	; 0x110e <__stack+0xf>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10e4:	ef 81       	ldd	r30, Y+7	; 0x07
    10e6:	f8 85       	ldd	r31, Y+8	; 0x08
    10e8:	80 85       	ldd	r24, Z+8	; 0x08
    10ea:	91 85       	ldd	r25, Z+9	; 0x09
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	06 97       	sbiw	r24, 0x06	; 6
    10f6:	98 87       	std	Y+8, r25	; 0x08
    10f8:	8f 83       	std	Y+7, r24	; 0x07
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	06 96       	adiw	r24, 0x06	; 6
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	86 30       	cpi	r24, 0x06	; 6
    1104:	92 07       	cpc	r25, r18
    1106:	09 f0       	breq	.+2      	; 0x110a <__stack+0xb>
    1108:	a3 cf       	rjmp	.-186    	; 0x1050 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	8b 87       	std	Y+11, r24	; 0x0b
    110e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1110:	2b 96       	adiw	r28, 0x0b	; 11
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <gpio_debouncer+0xa>
    112c:	00 d0       	rcall	.+0      	; 0x112e <gpio_debouncer+0xc>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <gpio_debouncer+0xe>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1134:	80 91 08 01 	lds	r24, 0x0108
    1138:	90 91 09 01 	lds	r25, 0x0109
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	06 97       	sbiw	r24, 0x06	; 6
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	1b c0       	rjmp	.+54     	; 0x1182 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    114c:	00 91 48 03 	lds	r16, 0x0348
    1150:	10 91 49 03 	lds	r17, 0x0349
    1154:	ed 81       	ldd	r30, Y+5	; 0x05
    1156:	fe 81       	ldd	r31, Y+6	; 0x06
    1158:	80 81       	ld	r24, Z
    115a:	33 df       	rcall	.-410    	; 0xfc2 <__gpio_read_pin>
    115c:	28 2f       	mov	r18, r24
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	80 0f       	add	r24, r16
    1164:	91 1f       	adc	r25, r17
    1166:	fc 01       	movw	r30, r24
    1168:	32 96       	adiw	r30, 0x02	; 2
    116a:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    116c:	ed 81       	ldd	r30, Y+5	; 0x05
    116e:	fe 81       	ldd	r31, Y+6	; 0x06
    1170:	80 85       	ldd	r24, Z+8	; 0x08
    1172:	91 85       	ldd	r25, Z+9	; 0x09
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	06 97       	sbiw	r24, 0x06	; 6
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	06 96       	adiw	r24, 0x06	; 6
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	86 30       	cpi	r24, 0x06	; 6
    118c:	92 07       	cpc	r25, r18
    118e:	f1 f6       	brne	.-68     	; 0x114c <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1190:	80 91 48 03 	lds	r24, 0x0348
    1194:	90 91 49 03 	lds	r25, 0x0349
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	90 93 49 03 	sts	0x0349, r25
    119e:	80 93 48 03 	sts	0x0348, r24
    11a2:	80 91 48 03 	lds	r24, 0x0348
    11a6:	90 91 49 03 	lds	r25, 0x0349
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <gpio_debouncer+0x96>
        count = 0;
    11b0:	10 92 49 03 	sts	0x0349, r1
    11b4:	10 92 48 03 	sts	0x0348, r1
	
}
    11b8:	26 96       	adiw	r28, 0x06	; 6
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	67 97       	sbiw	r28, 0x17	; 23
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    11e4:	90 91 4a 03 	lds	r25, 0x034A
    11e8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ea:	89 17       	cp	r24, r25
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <odometry_set_speed+0x22>
    11ee:	81 c0       	rjmp	.+258    	; 0x12f2 <odometry_set_speed+0x124>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    11f0:	86 e5       	ldi	r24, 0x56	; 86
    11f2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    11f4:	8f 89       	ldd	r24, Y+23	; 0x17
    11f6:	88 8b       	std	Y+16, r24	; 0x10
    11f8:	72 c0       	rjmp	.+228    	; 0x12de <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a8 e4       	ldi	r26, 0x48	; 72
    1200:	b2 e4       	ldi	r27, 0x42	; 66
    1202:	8b 87       	std	Y+11, r24	; 0x0b
    1204:	9c 87       	std	Y+12, r25	; 0x0c
    1206:	ad 87       	std	Y+13, r26	; 0x0d
    1208:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120a:	6b 85       	ldd	r22, Y+11	; 0x0b
    120c:	7c 85       	ldd	r23, Y+12	; 0x0c
    120e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1210:	9e 85       	ldd	r25, Y+14	; 0x0e
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e4       	ldi	r19, 0x40	; 64
    1216:	4c e1       	ldi	r20, 0x1C	; 28
    1218:	55 e4       	ldi	r21, 0x45	; 69
    121a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	8f 83       	std	Y+7, r24	; 0x07
    1224:	98 87       	std	Y+8, r25	; 0x08
    1226:	a9 87       	std	Y+9, r26	; 0x09
    1228:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	5f e3       	ldi	r21, 0x3F	; 63
    123a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    123e:	88 23       	and	r24, r24
    1240:	2c f4       	brge	.+10     	; 0x124c <odometry_set_speed+0x7e>
		__ticks = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	3f c0       	rjmp	.+126    	; 0x12ca <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	4f e7       	ldi	r20, 0x7F	; 127
    125a:	57 e4       	ldi	r21, 0x47	; 71
    125c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    1260:	18 16       	cp	r1, r24
    1262:	4c f5       	brge	.+82     	; 0x12b6 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1264:	6b 85       	ldd	r22, Y+11	; 0x0b
    1266:	7c 85       	ldd	r23, Y+12	; 0x0c
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e2       	ldi	r20, 0x20	; 32
    1272:	51 e4       	ldi	r21, 0x41	; 65
    1274:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	0f c0       	rjmp	.+30     	; 0x12ac <odometry_set_speed+0xde>
    128e:	8a ef       	ldi	r24, 0xFA	; 250
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <odometry_set_speed+0xcc>
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	69 f7       	brne	.-38     	; 0x128e <odometry_set_speed+0xc0>
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <odometry_set_speed+0x108>
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	ce 01       	movw	r24, r28
    12e0:	0f 96       	adiw	r24, 0x0f	; 15
    12e2:	63 ec       	ldi	r22, 0xC3	; 195
    12e4:	af dc       	rcall	.-1698   	; 0xc44 <CAN_Write>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f0       	breq	.+2      	; 0x12ec <odometry_set_speed+0x11e>
    12ea:	87 cf       	rjmp	.-242    	; 0x11fa <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    12ec:	8f 89       	ldd	r24, Y+23	; 0x17
    12ee:	80 93 4a 03 	sts	0x034A, r24
}
    12f2:	67 96       	adiw	r28, 0x17	; 23
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <odometry_query_position>:

static void odometry_query_position(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	66 97       	sbiw	r28, 0x16	; 22
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1318:	80 e5       	ldi	r24, 0x50	; 80
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	72 c0       	rjmp	.+228    	; 0x1402 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a8 e4       	ldi	r26, 0x48	; 72
    1324:	b2 e4       	ldi	r27, 0x42	; 66
    1326:	8b 87       	std	Y+11, r24	; 0x0b
    1328:	9c 87       	std	Y+12, r25	; 0x0c
    132a:	ad 87       	std	Y+13, r26	; 0x0d
    132c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1330:	7c 85       	ldd	r23, Y+12	; 0x0c
    1332:	8d 85       	ldd	r24, Y+13	; 0x0d
    1334:	9e 85       	ldd	r25, Y+14	; 0x0e
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e4       	ldi	r19, 0x40	; 64
    133a:	4c e1       	ldi	r20, 0x1C	; 28
    133c:	55 e4       	ldi	r21, 0x45	; 69
    133e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	8f 83       	std	Y+7, r24	; 0x07
    1348:	98 87       	std	Y+8, r25	; 0x08
    134a:	a9 87       	std	Y+9, r26	; 0x09
    134c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <odometry_query_position+0x6c>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	7c 85       	ldd	r23, Y+12	; 0x0c
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <odometry_query_position+0xcc>
    13b2:	8a ef       	ldi	r24, 0xFA	; 250
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <odometry_query_position+0xba>
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <odometry_query_position+0xae>
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <odometry_query_position+0xf6>
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	ce 01       	movw	r24, r28
    1404:	0f 96       	adiw	r24, 0x0f	; 15
    1406:	63 ec       	ldi	r22, 0xC3	; 195
    1408:	1d dc       	rcall	.-1990   	; 0xc44 <CAN_Write>
    140a:	88 23       	and	r24, r24
    140c:	09 f0       	breq	.+2      	; 0x1410 <odometry_query_position+0x10c>
    140e:	87 cf       	rjmp	.-242    	; 0x131e <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1410:	ce 01       	movw	r24, r28
    1412:	0f 96       	adiw	r24, 0x0f	; 15
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	9e db       	rcall	.-2244   	; 0xb54 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1418:	8f 85       	ldd	r24, Y+15	; 0x0f
    141a:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    141e:	88 89       	ldd	r24, Y+16	; 0x10
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	38 2f       	mov	r19, r24
    1426:	22 27       	eor	r18, r18
    1428:	89 89       	ldd	r24, Y+17	; 0x11
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	82 2b       	or	r24, r18
    1430:	93 2b       	or	r25, r19
    1432:	90 93 0b 01 	sts	0x010B, r25
    1436:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    143a:	8a 89       	ldd	r24, Y+18	; 0x12
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	38 2f       	mov	r19, r24
    1442:	22 27       	eor	r18, r18
    1444:	8b 89       	ldd	r24, Y+19	; 0x13
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	82 2b       	or	r24, r18
    144c:	93 2b       	or	r25, r19
    144e:	90 93 0d 01 	sts	0x010D, r25
    1452:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1456:	8c 89       	ldd	r24, Y+20	; 0x14
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	38 2f       	mov	r19, r24
    145e:	22 27       	eor	r18, r18
    1460:	8d 89       	ldd	r24, Y+21	; 0x15
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	82 2b       	or	r24, r18
    1468:	93 2b       	or	r25, r19
    146a:	90 93 0f 01 	sts	0x010F, r25
    146e:	80 93 0e 01 	sts	0x010E, r24
}
    1472:	66 96       	adiw	r28, 0x16	; 22
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	27 97       	sbiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    149c:	0e 94 89 13 	call	0x2712	; 0x2712 <system_get_system_time>
    14a0:	aa 27       	eor	r26, r26
    14a2:	97 fd       	sbrc	r25, 7
    14a4:	a0 95       	com	r26
    14a6:	ba 2f       	mov	r27, r26
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	ab 83       	std	Y+3, r26	; 0x03
    14ae:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    14b0:	29 df       	rcall	.-430    	; 0x1304 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	ab 81       	ldd	r26, Y+3	; 0x03
    14c0:	bc 81       	ldd	r27, Y+4	; 0x04
    14c2:	ed 81       	ldd	r30, Y+5	; 0x05
    14c4:	fe 81       	ldd	r31, Y+6	; 0x06
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	09 95       	icall
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    14d6:	80 91 10 01 	lds	r24, 0x0110
    14da:	8d 34       	cpi	r24, 0x4D	; 77
    14dc:	49 f3       	breq	.-46     	; 0x14b0 <odometry_wait_until_done+0x2c>
    14de:	80 91 10 01 	lds	r24, 0x0110
    14e2:	82 35       	cpi	r24, 0x52	; 82
    14e4:	29 f3       	breq	.-54     	; 0x14b0 <odometry_wait_until_done+0x2c>
	
	return ODOMETRY_SUCCESS;
    14e6:	1f 82       	std	Y+7, r1	; 0x07
    14e8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14ea:	27 96       	adiw	r28, 0x07	; 7
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <odometry_move_to_position>:
		
	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	6c 97       	sbiw	r28, 0x1c	; 28
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	98 8f       	std	Y+24, r25	; 0x18
    1512:	8f 8b       	std	Y+23, r24	; 0x17
    1514:	69 8f       	std	Y+25, r22	; 0x19
    1516:	4a 8f       	std	Y+26, r20	; 0x1a
    1518:	3c 8f       	std	Y+28, r19	; 0x1c
    151a:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    151c:	89 8d       	ldd	r24, Y+25	; 0x19
    151e:	57 de       	rcall	.-850    	; 0x11ce <odometry_set_speed>

	buffer[0] = 'G';
    1520:	87 e4       	ldi	r24, 0x47	; 71
    1522:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1524:	ef 89       	ldd	r30, Y+23	; 0x17
    1526:	f8 8d       	ldd	r31, Y+24	; 0x18
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	89 2f       	mov	r24, r25
    152e:	99 0f       	add	r25, r25
    1530:	99 0b       	sbc	r25, r25
    1532:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1534:	ef 89       	ldd	r30, Y+23	; 0x17
    1536:	f8 8d       	ldd	r31, Y+24	; 0x18
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    153e:	ef 89       	ldd	r30, Y+23	; 0x17
    1540:	f8 8d       	ldd	r31, Y+24	; 0x18
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	89 2f       	mov	r24, r25
    1548:	99 0f       	add	r25, r25
    154a:	99 0b       	sbc	r25, r25
    154c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    154e:	ef 89       	ldd	r30, Y+23	; 0x17
    1550:	f8 8d       	ldd	r31, Y+24	; 0x18
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1558:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    155a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    155c:	81 95       	neg	r24
    155e:	8d 8b       	std	Y+21, r24	; 0x15
    1560:	72 c0       	rjmp	.+228    	; 0x1646 <odometry_move_to_position+0x14a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a8 e4       	ldi	r26, 0x48	; 72
    1568:	b2 e4       	ldi	r27, 0x42	; 66
    156a:	8b 87       	std	Y+11, r24	; 0x0b
    156c:	9c 87       	std	Y+12, r25	; 0x0c
    156e:	ad 87       	std	Y+13, r26	; 0x0d
    1570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e4       	ldi	r19, 0x40	; 64
    157e:	4c e1       	ldi	r20, 0x1C	; 28
    1580:	55 e4       	ldi	r21, 0x45	; 69
    1582:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8f 83       	std	Y+7, r24	; 0x07
    158c:	98 87       	std	Y+8, r25	; 0x08
    158e:	a9 87       	std	Y+9, r26	; 0x09
    1590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <odometry_move_to_position+0xb8>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <odometry_move_to_position+0x136>
	else if (__tmp > 65535)
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <odometry_move_to_position+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <odometry_move_to_position+0x118>
    15f6:	8a ef       	ldi	r24, 0xFA	; 250
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <odometry_move_to_position+0x106>
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <odometry_move_to_position+0xfa>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <odometry_move_to_position+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <odometry_move_to_position+0x142>
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	ce 01       	movw	r24, r28
    1648:	0f 96       	adiw	r24, 0x0f	; 15
    164a:	63 ec       	ldi	r22, 0xC3	; 195
    164c:	fb da       	rcall	.-2570   	; 0xc44 <CAN_Write>
    164e:	88 23       	and	r24, r24
    1650:	09 f0       	breq	.+2      	; 0x1654 <odometry_move_to_position+0x158>
    1652:	87 cf       	rjmp	.-242    	; 0x1562 <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	15 df       	rcall	.-470    	; 0x1484 <odometry_wait_until_done>
}
    165a:	6c 96       	adiw	r28, 0x1c	; 28
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	69 97       	sbiw	r28, 0x19	; 25
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	99 8f       	std	Y+25, r25	; 0x19
    1682:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    1684:	89 e4       	ldi	r24, 0x49	; 73
    1686:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    1688:	e8 8d       	ldd	r30, Y+24	; 0x18
    168a:	f9 8d       	ldd	r31, Y+25	; 0x19
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	89 2f       	mov	r24, r25
    1692:	99 0f       	add	r25, r25
    1694:	99 0b       	sbc	r25, r25
    1696:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    1698:	e8 8d       	ldd	r30, Y+24	; 0x18
    169a:	f9 8d       	ldd	r31, Y+25	; 0x19
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    16a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    16a4:	f9 8d       	ldd	r31, Y+25	; 0x19
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	89 2f       	mov	r24, r25
    16ac:	99 0f       	add	r25, r25
    16ae:	99 0b       	sbc	r25, r25
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    16b2:	e8 8d       	ldd	r30, Y+24	; 0x18
    16b4:	f9 8d       	ldd	r31, Y+25	; 0x19
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    16bc:	e8 8d       	ldd	r30, Y+24	; 0x18
    16be:	f9 8d       	ldd	r31, Y+25	; 0x19
    16c0:	84 81       	ldd	r24, Z+4	; 0x04
    16c2:	95 81       	ldd	r25, Z+5	; 0x05
    16c4:	81 95       	neg	r24
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	99 27       	eor	r25, r25
    16cc:	87 fd       	sbrc	r24, 7
    16ce:	90 95       	com	r25
    16d0:	89 2f       	mov	r24, r25
    16d2:	99 0f       	add	r25, r25
    16d4:	99 0b       	sbc	r25, r25
    16d6:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    16d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16da:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    16dc:	e8 8d       	ldd	r30, Y+24	; 0x18
    16de:	f9 8d       	ldd	r31, Y+25	; 0x19
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	90 93 0b 01 	sts	0x010B, r25
    16e8:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    16ec:	e8 8d       	ldd	r30, Y+24	; 0x18
    16ee:	f9 8d       	ldd	r31, Y+25	; 0x19
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	90 93 0d 01 	sts	0x010D, r25
    16f8:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    16fc:	e8 8d       	ldd	r30, Y+24	; 0x18
    16fe:	f9 8d       	ldd	r31, Y+25	; 0x19
    1700:	84 81       	ldd	r24, Z+4	; 0x04
    1702:	95 81       	ldd	r25, Z+5	; 0x05
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	90 93 0f 01 	sts	0x010F, r25
    170e:	80 93 0e 01 	sts	0x010E, r24
    1712:	72 c0       	rjmp	.+228    	; 0x17f8 <odometry_set_position+0x18c>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a8 e4       	ldi	r26, 0x48	; 72
    171a:	b2 e4       	ldi	r27, 0x42	; 66
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e4       	ldi	r19, 0x40	; 64
    1730:	4c e1       	ldi	r20, 0x1C	; 28
    1732:	55 e4       	ldi	r21, 0x45	; 69
    1734:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <odometry_set_position+0xfa>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <odometry_set_position+0x178>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <odometry_set_position+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <odometry_set_position+0x15a>
    17a8:	8a ef       	ldi	r24, 0xFA	; 250
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <odometry_set_position+0x148>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <odometry_set_position+0x13c>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <odometry_set_position+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <odometry_set_position+0x184>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	ce 01       	movw	r24, r28
    17fa:	40 96       	adiw	r24, 0x10	; 16
    17fc:	63 ec       	ldi	r22, 0xC3	; 195
    17fe:	22 da       	rcall	.-3004   	; 0xc44 <CAN_Write>
    1800:	88 23       	and	r24, r24
    1802:	09 f0       	breq	.+2      	; 0x1806 <odometry_set_position+0x19a>
    1804:	87 cf       	rjmp	.-242    	; 0x1714 <odometry_set_position+0xa8>
		_delay_ms(50);
}
    1806:	69 96       	adiw	r28, 0x19	; 25
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	6b 97       	sbiw	r28, 0x1b	; 27
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	98 8f       	std	Y+24, r25	; 0x18
    182e:	8f 8b       	std	Y+23, r24	; 0x17
    1830:	69 8f       	std	Y+25, r22	; 0x19
    1832:	5b 8f       	std	Y+27, r21	; 0x1b
    1834:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1836:	89 8d       	ldd	r24, Y+25	; 0x19
    1838:	ca dc       	rcall	.-1644   	; 0x11ce <odometry_set_speed>

	angle *= -1;
    183a:	8f 89       	ldd	r24, Y+23	; 0x17
    183c:	98 8d       	ldd	r25, Y+24	; 0x18
    183e:	90 95       	com	r25
    1840:	81 95       	neg	r24
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	98 8f       	std	Y+24, r25	; 0x18
    1846:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    1848:	84 e5       	ldi	r24, 0x54	; 84
    184a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    184c:	8f 89       	ldd	r24, Y+23	; 0x17
    184e:	98 8d       	ldd	r25, Y+24	; 0x18
    1850:	89 2f       	mov	r24, r25
    1852:	99 0f       	add	r25, r25
    1854:	99 0b       	sbc	r25, r25
    1856:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	89 8b       	std	Y+17, r24	; 0x11
    185c:	72 c0       	rjmp	.+228    	; 0x1942 <odometry_rotate+0x12a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a8 e4       	ldi	r26, 0x48	; 72
    1864:	b2 e4       	ldi	r27, 0x42	; 66
    1866:	8b 87       	std	Y+11, r24	; 0x0b
    1868:	9c 87       	std	Y+12, r25	; 0x0c
    186a:	ad 87       	std	Y+13, r26	; 0x0d
    186c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1870:	7c 85       	ldd	r23, Y+12	; 0x0c
    1872:	8d 85       	ldd	r24, Y+13	; 0x0d
    1874:	9e 85       	ldd	r25, Y+14	; 0x0e
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e4       	ldi	r19, 0x40	; 64
    187a:	4c e1       	ldi	r20, 0x1C	; 28
    187c:	55 e4       	ldi	r21, 0x45	; 69
    187e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8f 83       	std	Y+7, r24	; 0x07
    1888:	98 87       	std	Y+8, r25	; 0x08
    188a:	a9 87       	std	Y+9, r26	; 0x09
    188c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <odometry_rotate+0x98>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <odometry_rotate+0x116>
	else if (__tmp > 65535)
    18b0:	6f 81       	ldd	r22, Y+7	; 0x07
    18b2:	78 85       	ldd	r23, Y+8	; 0x08
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <odometry_rotate+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <odometry_rotate+0xf8>
    18f2:	8a ef       	ldi	r24, 0xFA	; 250
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <odometry_rotate+0xe6>
    1902:	9c 83       	std	Y+4, r25	; 0x04
    1904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <odometry_rotate+0xda>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <odometry_rotate+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <odometry_rotate+0x122>
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	ce 01       	movw	r24, r28
    1944:	0f 96       	adiw	r24, 0x0f	; 15
    1946:	63 ec       	ldi	r22, 0xC3	; 195
    1948:	7d d9       	rcall	.-3334   	; 0xc44 <CAN_Write>
    194a:	88 23       	and	r24, r24
    194c:	09 f0       	breq	.+2      	; 0x1950 <odometry_rotate+0x138>
    194e:	87 cf       	rjmp	.-242    	; 0x185e <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1950:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1952:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1954:	97 dd       	rcall	.-1234   	; 0x1484 <odometry_wait_until_done>

}
    1956:	6b 96       	adiw	r28, 0x1b	; 27
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <purpleside>:
const struct goto_fields purple_tactic_five_positions[TACTIC_FIVE_POSITION_COUNT] =
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}	
};
void purpleside(void)
{
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	c3 55       	subi	r28, 0x53	; 83
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    1982:	fe 01       	movw	r30, r28
    1984:	e6 5b       	subi	r30, 0xB6	; 182
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    198a:	fe 01       	movw	r30, r28
    198c:	e7 5b       	subi	r30, 0xB7	; 183
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_THREE;
    1992:	fe 01       	movw	r30, r28
    1994:	e9 5b       	subi	r30, 0xB9	; 185
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	80 83       	st	Z, r24
	
	starting_position.x		= 180;
    199c:	fe 01       	movw	r30, r28
    199e:	e5 5b       	subi	r30, 0xB5	; 181
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	84 eb       	ldi	r24, 0xB4	; 180
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
	starting_position.y		= 1010;
    19aa:	fe 01       	movw	r30, r28
    19ac:	e5 5b       	subi	r30, 0xB5	; 181
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	82 ef       	ldi	r24, 0xF2	; 242
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	93 83       	std	Z+3, r25	; 0x03
    19b6:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    19b8:	fe 01       	movw	r30, r28
    19ba:	e5 5b       	subi	r30, 0xB5	; 181
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	8a e5       	ldi	r24, 0x5A	; 90
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	95 83       	std	Z+5, r25	; 0x05
    19c4:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    19c6:	ce 01       	movw	r24, r28
    19c8:	85 5b       	subi	r24, 0xB5	; 181
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	4f de       	rcall	.-866    	; 0x166c <odometry_set_position>
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    19ce:	de 01       	movw	r26, r28
    19d0:	a6 5b       	subi	r26, 0xB6	; 182
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	e7 5b       	subi	r30, 0xB7	; 183
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	8c 93       	st	X, r24
    19de:	03 c1       	rjmp	.+518    	; 0x1be6 <purpleside+0x27e>
	{
		odometry_status = odometry_move_to_position(&(purple_camera[current_position].point), purple_camera[current_position].speed,
    19e0:	fe 01       	movw	r30, r28
    19e2:	e6 5b       	subi	r30, 0xB6	; 182
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	ca 01       	movw	r24, r20
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	9c 01       	movw	r18, r24
    19f4:	22 0f       	add	r18, r18
    19f6:	33 1f       	adc	r19, r19
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	82 0f       	add	r24, r18
    19fe:	93 1f       	adc	r25, r19
    1a00:	84 0f       	add	r24, r20
    1a02:	95 1f       	adc	r25, r21
    1a04:	8f 5e       	subi	r24, 0xEF	; 239
    1a06:	9e 4f       	sbci	r25, 0xFE	; 254
    1a08:	bc 01       	movw	r22, r24
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e6 5b       	subi	r30, 0xB6	; 182
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	ca 01       	movw	r24, r20
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	9c 01       	movw	r18, r24
    1a1e:	22 0f       	add	r18, r18
    1a20:	33 1f       	adc	r19, r19
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	84 0f       	add	r24, r20
    1a2c:	95 1f       	adc	r25, r21
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e8 5e       	subi	r30, 0xE8	; 232
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	a0 81       	ld	r26, Z
    1a36:	fe 01       	movw	r30, r28
    1a38:	e6 5b       	subi	r30, 0xB6	; 182
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	48 2f       	mov	r20, r24
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	ca 01       	movw	r24, r20
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	9c 01       	movw	r18, r24
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	84 0f       	add	r24, r20
    1a58:	95 1f       	adc	r25, r21
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e7 5e       	subi	r30, 0xE7	; 231
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a60:	80 81       	ld	r24, Z
    1a62:	b8 2f       	mov	r27, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	e6 5b       	subi	r30, 0xB6	; 182
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	ca 01       	movw	r24, r20
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	9c 01       	movw	r18, r24
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	82 0f       	add	r24, r18
    1a82:	93 1f       	adc	r25, r19
    1a84:	84 0f       	add	r24, r20
    1a86:	95 1f       	adc	r25, r21
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e6 5e       	subi	r30, 0xE6	; 230
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	20 81       	ld	r18, Z
    1a90:	31 81       	ldd	r19, Z+1	; 0x01
    1a92:	cb 01       	movw	r24, r22
    1a94:	6a 2f       	mov	r22, r26
    1a96:	4b 2f       	mov	r20, r27
    1a98:	31 dd       	rcall	.-1438   	; 0x14fc <odometry_move_to_position>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e8 5b       	subi	r30, 0xB8	; 184
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 83       	st	Z, r24
		purple_camera[current_position].direction,purple_camera[current_position].callback);
		if(odometry_status == ODOMETRY_FAIL)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e8 5b       	subi	r30, 0xB8	; 184
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <purpleside+0x148>
    1aae:	a2 c0       	rjmp	.+324    	; 0x1bf4 <purpleside+0x28c>
		}
		else if(current_position == 0)
		{
			//_delay_ms(1000);
		}
		if(current_position == 3)
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e6 5b       	subi	r30, 0xB6	; 182
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	09 f0       	breq	.+2      	; 0x1abe <purpleside+0x156>
    1abc:	8b c0       	rjmp	.+278    	; 0x1bd4 <purpleside+0x26c>
		{
			odometry_rotate(80,LOW_SPEED,NULL);                     //rotira se da dodje u poziciju za slikanje kamere
    1abe:	80 e5       	ldi	r24, 0x50	; 80
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	6e e1       	ldi	r22, 0x1E	; 30
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	a7 de       	rcall	.-690    	; 0x1818 <odometry_rotate>
    1aca:	fe 01       	movw	r30, r28
    1acc:	ed 5b       	subi	r30, 0xBD	; 189
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	aa ef       	ldi	r26, 0xFA	; 250
    1ad6:	b4 e4       	ldi	r27, 0x44	; 68
    1ad8:	80 83       	st	Z, r24
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	a2 83       	std	Z+2, r26	; 0x02
    1ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	01 5c       	subi	r16, 0xC1	; 193
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ed 5b       	subi	r30, 0xBD	; 189
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e4       	ldi	r19, 0x40	; 64
    1af8:	4c e1       	ldi	r20, 0x1C	; 28
    1afa:	55 e4       	ldi	r21, 0x45	; 69
    1afc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	80 83       	st	Z, r24
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	a2 83       	std	Z+2, r26	; 0x02
    1b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ff 96       	adiw	r30, 0x3f	; 63
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__cmpsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <purpleside+0x1cc>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9e af       	std	Y+62, r25	; 0x3e
    1b30:	8d af       	std	Y+61, r24	; 0x3d
    1b32:	46 c0       	rjmp	.+140    	; 0x1bc0 <purpleside+0x258>
	else if (__tmp > 65535)
    1b34:	fe 01       	movw	r30, r28
    1b36:	ff 96       	adiw	r30, 0x3f	; 63
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__gesf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	64 f5       	brge	.+88     	; 0x1ba8 <purpleside+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	fe 01       	movw	r30, r28
    1b52:	ed 5b       	subi	r30, 0xBD	; 189
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e af       	std	Y+62, r25	; 0x3e
    1b7c:	8d af       	std	Y+61, r24	; 0x3d
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <purpleside+0x236>
    1b80:	8a ef       	ldi	r24, 0xFA	; 250
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c af       	std	Y+60, r25	; 0x3c
    1b86:	8b af       	std	Y+59, r24	; 0x3b
    1b88:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <purpleside+0x224>
    1b90:	9c af       	std	Y+60, r25	; 0x3c
    1b92:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9e af       	std	Y+62, r25	; 0x3e
    1b9c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <purpleside+0x218>
    1ba6:	16 c0       	rjmp	.+44     	; 0x1bd4 <purpleside+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ff 96       	adiw	r30, 0x3f	; 63
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e af       	std	Y+62, r25	; 0x3e
    1bbe:	8d af       	std	Y+61, r24	; 0x3d
    1bc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc4:	9a af       	std	Y+58, r25	; 0x3a
    1bc6:	89 af       	std	Y+57, r24	; 0x39
    1bc8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bca:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <purpleside+0x264>
    1bd0:	9a af       	std	Y+58, r25	; 0x3a
    1bd2:	89 af       	std	Y+57, r24	; 0x39
	starting_position.y		= 1010;
	starting_position.angle = 90;
	
	odometry_set_position(&starting_position);
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    1bd4:	de 01       	movw	r26, r28
    1bd6:	a6 5b       	subi	r26, 0xB6	; 182
    1bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e6 5b       	subi	r30, 0xB6	; 182
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8c 93       	st	X, r24
    1be6:	fe 01       	movw	r30, r28
    1be8:	e6 5b       	subi	r30, 0xB6	; 182
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <purpleside+0x28c>
    1bf2:	f6 ce       	rjmp	.-532    	; 0x19e0 <purpleside+0x78>
		}
	}//end for
	
	while(1)
	{
		switch(active_state)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 5b       	subi	r30, 0xB9	; 185
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	33 27       	eor	r19, r19
    1c00:	27 fd       	sbrc	r18, 7
    1c02:	30 95       	com	r19
    1c04:	64 96       	adiw	r28, 0x14	; 20
    1c06:	3f af       	std	Y+63, r19	; 0x3f
    1c08:	2e af       	std	Y+62, r18	; 0x3e
    1c0a:	64 97       	sbiw	r28, 0x14	; 20
    1c0c:	64 96       	adiw	r28, 0x14	; 20
    1c0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c10:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c12:	64 97       	sbiw	r28, 0x14	; 20
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <purpleside+0x2b4>
    1c1a:	36 c1       	rjmp	.+620    	; 0x1e88 <purpleside+0x520>
    1c1c:	64 96       	adiw	r28, 0x14	; 20
    1c1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c20:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c22:	64 97       	sbiw	r28, 0x14	; 20
    1c24:	e5 30       	cpi	r30, 0x05	; 5
    1c26:	f1 05       	cpc	r31, r1
    1c28:	84 f4       	brge	.+32     	; 0x1c4a <purpleside+0x2e2>
    1c2a:	64 96       	adiw	r28, 0x14	; 20
    1c2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c30:	64 97       	sbiw	r28, 0x14	; 20
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <purpleside+0x304>
    1c38:	64 96       	adiw	r28, 0x14	; 20
    1c3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c3e:	64 97       	sbiw	r28, 0x14	; 20
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <purpleside+0x2e0>
    1c46:	99 c0       	rjmp	.+306    	; 0x1d7a <purpleside+0x412>
    1c48:	d5 cf       	rjmp	.-86     	; 0x1bf4 <purpleside+0x28c>
    1c4a:	64 96       	adiw	r28, 0x14	; 20
    1c4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c50:	64 97       	sbiw	r28, 0x14	; 20
    1c52:	e5 30       	cpi	r30, 0x05	; 5
    1c54:	f1 05       	cpc	r31, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <purpleside+0x2f2>
    1c58:	8d c2       	rjmp	.+1306   	; 0x2174 <purpleside+0x80c>
    1c5a:	64 96       	adiw	r28, 0x14	; 20
    1c5c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c5e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c60:	64 97       	sbiw	r28, 0x14	; 20
    1c62:	26 30       	cpi	r18, 0x06	; 6
    1c64:	31 05       	cpc	r19, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <purpleside+0x302>
    1c68:	fb c3       	rjmp	.+2038   	; 0x2460 <purpleside+0xaf8>
    1c6a:	c4 cf       	rjmp	.-120    	; 0x1bf4 <purpleside+0x28c>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e6 5b       	subi	r30, 0xB6	; 182
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	de 01       	movw	r26, r28
    1c74:	a7 5b       	subi	r26, 0xB7	; 183
    1c76:	bf 4f       	sbci	r27, 0xFF	; 255
    1c78:	8c 91       	ld	r24, X
    1c7a:	80 83       	st	Z, r24
    1c7c:	77 c0       	rjmp	.+238    	; 0x1d6c <purpleside+0x404>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e6 5b       	subi	r30, 0xB6	; 182
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	84 0f       	add	r24, r20
    1ca0:	95 1f       	adc	r25, r21
    1ca2:	83 5c       	subi	r24, 0xC3	; 195
    1ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e6 5b       	subi	r30, 0xB6	; 182
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	9c 01       	movw	r18, r24
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	84 0f       	add	r24, r20
    1cca:	95 1f       	adc	r25, r21
    1ccc:	fc 01       	movw	r30, r24
    1cce:	ec 5b       	subi	r30, 0xBC	; 188
    1cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd2:	a0 81       	ld	r26, Z
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e6 5b       	subi	r30, 0xB6	; 182
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	9c 01       	movw	r18, r24
    1ce8:	22 0f       	add	r18, r18
    1cea:	33 1f       	adc	r19, r19
    1cec:	22 0f       	add	r18, r18
    1cee:	33 1f       	adc	r19, r19
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	84 0f       	add	r24, r20
    1cf6:	95 1f       	adc	r25, r21
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	eb 5b       	subi	r30, 0xBB	; 187
    1cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfe:	80 81       	ld	r24, Z
    1d00:	b8 2f       	mov	r27, r24
    1d02:	fe 01       	movw	r30, r28
    1d04:	e6 5b       	subi	r30, 0xB6	; 182
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	ca 01       	movw	r24, r20
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	9c 01       	movw	r18, r24
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	84 0f       	add	r24, r20
    1d24:	95 1f       	adc	r25, r21
    1d26:	fc 01       	movw	r30, r24
    1d28:	ea 5b       	subi	r30, 0xBA	; 186
    1d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2c:	20 81       	ld	r18, Z
    1d2e:	31 81       	ldd	r19, Z+1	; 0x01
    1d30:	cb 01       	movw	r24, r22
    1d32:	6a 2f       	mov	r22, r26
    1d34:	4b 2f       	mov	r20, r27
    1d36:	e2 db       	rcall	.-2108   	; 0x14fc <odometry_move_to_position>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e8 5b       	subi	r30, 0xB8	; 184
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 83       	st	Z, r24
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e8 5b       	subi	r30, 0xB8	; 184
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	b9 f0       	breq	.+46     	; 0x1d7a <purpleside+0x412>
					{
						break;
					}
					if(current_position == 8)
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e6 5b       	subi	r30, 0xB6	; 182
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <purpleside+0x3f2>
    1d58:	ff cf       	rjmp	.-2      	; 0x1d58 <purpleside+0x3f0>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1d5a:	de 01       	movw	r26, r28
    1d5c:	a6 5b       	subi	r26, 0xB6	; 182
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e6 5b       	subi	r30, 0xB6	; 182
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	8c 93       	st	X, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e6 5b       	subi	r30, 0xB6	; 182
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	88 23       	and	r24, r24
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <purpleside+0x412>
    1d78:	82 cf       	rjmp	.-252    	; 0x1c7e <purpleside+0x316>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e6 5b       	subi	r30, 0xB6	; 182
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	de 01       	movw	r26, r28
    1d82:	a7 5b       	subi	r26, 0xB7	; 183
    1d84:	bf 4f       	sbci	r27, 0xFF	; 255
    1d86:	8c 91       	ld	r24, X
    1d88:	80 83       	st	Z, r24
    1d8a:	77 c0       	rjmp	.+238    	; 0x1e7a <purpleside+0x512>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_two_positions[current_position].point), purple_tactic_two_positions[current_position].speed,
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e6 5b       	subi	r30, 0xB6	; 182
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	ca 01       	movw	r24, r20
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	9c 01       	movw	r18, r24
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	84 0f       	add	r24, r20
    1dae:	95 1f       	adc	r25, r21
    1db0:	88 5b       	subi	r24, 0xB8	; 184
    1db2:	9e 4f       	sbci	r25, 0xFE	; 254
    1db4:	bc 01       	movw	r22, r24
    1db6:	fe 01       	movw	r30, r28
    1db8:	e6 5b       	subi	r30, 0xB6	; 182
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	ca 01       	movw	r24, r20
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	9c 01       	movw	r18, r24
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	84 0f       	add	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e1 5b       	subi	r30, 0xB1	; 177
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	a0 81       	ld	r26, Z
    1de2:	fe 01       	movw	r30, r28
    1de4:	e6 5b       	subi	r30, 0xB6	; 182
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	ca 01       	movw	r24, r20
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	9c 01       	movw	r18, r24
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	84 0f       	add	r24, r20
    1e04:	95 1f       	adc	r25, r21
    1e06:	fc 01       	movw	r30, r24
    1e08:	e0 5b       	subi	r30, 0xB0	; 176
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	80 81       	ld	r24, Z
    1e0e:	b8 2f       	mov	r27, r24
    1e10:	fe 01       	movw	r30, r28
    1e12:	e6 5b       	subi	r30, 0xB6	; 182
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 81       	ld	r24, Z
    1e18:	48 2f       	mov	r20, r24
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	9c 01       	movw	r18, r24
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	82 0f       	add	r24, r18
    1e2e:	93 1f       	adc	r25, r19
    1e30:	84 0f       	add	r24, r20
    1e32:	95 1f       	adc	r25, r21
    1e34:	fc 01       	movw	r30, r24
    1e36:	ef 5a       	subi	r30, 0xAF	; 175
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	20 81       	ld	r18, Z
    1e3c:	31 81       	ldd	r19, Z+1	; 0x01
    1e3e:	cb 01       	movw	r24, r22
    1e40:	6a 2f       	mov	r22, r26
    1e42:	4b 2f       	mov	r20, r27
    1e44:	5b db       	rcall	.-2378   	; 0x14fc <odometry_move_to_position>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e8 5b       	subi	r30, 0xB8	; 184
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 83       	st	Z, r24
					purple_tactic_two_positions[current_position].direction,purple_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e8 5b       	subi	r30, 0xB8	; 184
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	b9 f0       	breq	.+46     	; 0x1e88 <purpleside+0x520>
					{
						break;
					}
					if(current_position == 0)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e6 5b       	subi	r30, 0xB6	; 182
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <purpleside+0x500>
    1e66:	ff cf       	rjmp	.-2      	; 0x1e66 <purpleside+0x4fe>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    1e68:	de 01       	movw	r26, r28
    1e6a:	a6 5b       	subi	r26, 0xB6	; 182
    1e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e6 5b       	subi	r30, 0xB6	; 182
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	8c 93       	st	X, r24
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e6 5b       	subi	r30, 0xB6	; 182
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <purpleside+0x520>
    1e86:	82 cf       	rjmp	.-252    	; 0x1d8c <purpleside+0x424>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e6 5b       	subi	r30, 0xB6	; 182
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	de 01       	movw	r26, r28
    1e90:	a7 5b       	subi	r26, 0xB7	; 183
    1e92:	bf 4f       	sbci	r27, 0xFF	; 255
    1e94:	8c 91       	ld	r24, X
    1e96:	80 83       	st	Z, r24
    1e98:	66 c1       	rjmp	.+716    	; 0x2166 <purpleside+0x7fe>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_three_positions[current_position].point), purple_tactic_three_positions[current_position].speed,
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e6 5b       	subi	r30, 0xB6	; 182
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	9c 01       	movw	r18, r24
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	84 0f       	add	r24, r20
    1ebc:	95 1f       	adc	r25, r21
    1ebe:	8d 5a       	subi	r24, 0xAD	; 173
    1ec0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e6 5b       	subi	r30, 0xB6	; 182
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	ca 01       	movw	r24, r20
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	9c 01       	movw	r18, r24
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	84 0f       	add	r24, r20
    1ee6:	95 1f       	adc	r25, r21
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e6 5a       	subi	r30, 0xA6	; 166
    1eec:	fe 4f       	sbci	r31, 0xFE	; 254
    1eee:	a0 81       	ld	r26, Z
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e6 5b       	subi	r30, 0xB6	; 182
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	ca 01       	movw	r24, r20
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	9c 01       	movw	r18, r24
    1f04:	22 0f       	add	r18, r18
    1f06:	33 1f       	adc	r19, r19
    1f08:	22 0f       	add	r18, r18
    1f0a:	33 1f       	adc	r19, r19
    1f0c:	82 0f       	add	r24, r18
    1f0e:	93 1f       	adc	r25, r19
    1f10:	84 0f       	add	r24, r20
    1f12:	95 1f       	adc	r25, r21
    1f14:	fc 01       	movw	r30, r24
    1f16:	e5 5a       	subi	r30, 0xA5	; 165
    1f18:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1a:	80 81       	ld	r24, Z
    1f1c:	b8 2f       	mov	r27, r24
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e6 5b       	subi	r30, 0xB6	; 182
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	9c 01       	movw	r18, r24
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	82 0f       	add	r24, r18
    1f3c:	93 1f       	adc	r25, r19
    1f3e:	84 0f       	add	r24, r20
    1f40:	95 1f       	adc	r25, r21
    1f42:	fc 01       	movw	r30, r24
    1f44:	e4 5a       	subi	r30, 0xA4	; 164
    1f46:	fe 4f       	sbci	r31, 0xFE	; 254
    1f48:	20 81       	ld	r18, Z
    1f4a:	31 81       	ldd	r19, Z+1	; 0x01
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	6a 2f       	mov	r22, r26
    1f50:	4b 2f       	mov	r20, r27
    1f52:	d4 da       	rcall	.-2648   	; 0x14fc <odometry_move_to_position>
    1f54:	fe 01       	movw	r30, r28
    1f56:	e8 5b       	subi	r30, 0xB8	; 184
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24
					purple_tactic_three_positions[current_position].direction,purple_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e8 5b       	subi	r30, 0xB8	; 184
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <purpleside+0x602>
    1f68:	05 c1       	rjmp	.+522    	; 0x2174 <purpleside+0x80c>
					{
						break;
					}
					if(current_position == 10)
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e6 5b       	subi	r30, 0xB6	; 182
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	8a 30       	cpi	r24, 0x0A	; 10
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <purpleside+0x610>
    1f76:	6d c0       	rjmp	.+218    	; 0x2052 <purpleside+0x6ea>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e4       	ldi	r25, 0x40	; 64
    1f7c:	ac e1       	ldi	r26, 0x1C	; 28
    1f7e:	b6 e4       	ldi	r27, 0x46	; 70
    1f80:	8d ab       	std	Y+53, r24	; 0x35
    1f82:	9e ab       	std	Y+54, r25	; 0x36
    1f84:	af ab       	std	Y+55, r26	; 0x37
    1f86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e4       	ldi	r19, 0x40	; 64
    1f94:	4c e1       	ldi	r20, 0x1C	; 28
    1f96:	55 e4       	ldi	r21, 0x45	; 69
    1f98:	d0 d7       	rcall	.+4000   	; 0x2f3a <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	89 ab       	std	Y+49, r24	; 0x31
    1fa0:	9a ab       	std	Y+50, r25	; 0x32
    1fa2:	ab ab       	std	Y+51, r26	; 0x33
    1fa4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1faa:	8b a9       	ldd	r24, Y+51	; 0x33
    1fac:	9c a9       	ldd	r25, Y+52	; 0x34
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	6e d6       	rcall	.+3292   	; 0x2c94 <__cmpsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <purpleside+0x65e>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 ab       	std	Y+48, r25	; 0x30
    1fc2:	8f a7       	std	Y+47, r24	; 0x2f
    1fc4:	3b c0       	rjmp	.+118    	; 0x203c <purpleside+0x6d4>
	else if (__tmp > 65535)
    1fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fca:	8b a9       	ldd	r24, Y+51	; 0x33
    1fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	ad d7       	rcall	.+3930   	; 0x2f32 <__gesf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	3c f5       	brge	.+78     	; 0x202a <purpleside+0x6c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fde:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	a6 d7       	rcall	.+3916   	; 0x2f3a <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	bf d6       	rcall	.+3454   	; 0x2d76 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <purpleside+0x6b8>
    2002:	8a ef       	ldi	r24, 0xFA	; 250
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9e a7       	std	Y+46, r25	; 0x2e
    2008:	8d a7       	std	Y+45, r24	; 0x2d
    200a:	8d a5       	ldd	r24, Y+45	; 0x2d
    200c:	9e a5       	ldd	r25, Y+46	; 0x2e
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <purpleside+0x6a6>
    2012:	9e a7       	std	Y+46, r25	; 0x2e
    2014:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	8f a5       	ldd	r24, Y+47	; 0x2f
    2018:	98 a9       	ldd	r25, Y+48	; 0x30
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	98 ab       	std	Y+48, r25	; 0x30
    201e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	8f a5       	ldd	r24, Y+47	; 0x2f
    2022:	98 a9       	ldd	r25, Y+48	; 0x30
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <purpleside+0x69a>
    2028:	95 c0       	rjmp	.+298    	; 0x2154 <purpleside+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	69 a9       	ldd	r22, Y+49	; 0x31
    202c:	7a a9       	ldd	r23, Y+50	; 0x32
    202e:	8b a9       	ldd	r24, Y+51	; 0x33
    2030:	9c a9       	ldd	r25, Y+52	; 0x34
    2032:	a1 d6       	rcall	.+3394   	; 0x2d76 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	98 ab       	std	Y+48, r25	; 0x30
    203a:	8f a7       	std	Y+47, r24	; 0x2f
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	9c a7       	std	Y+44, r25	; 0x2c
    2042:	8b a7       	std	Y+43, r24	; 0x2b
    2044:	8b a5       	ldd	r24, Y+43	; 0x2b
    2046:	9c a5       	ldd	r25, Y+44	; 0x2c
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <purpleside+0x6e0>
    204c:	9c a7       	std	Y+44, r25	; 0x2c
    204e:	8b a7       	std	Y+43, r24	; 0x2b
    2050:	81 c0       	rjmp	.+258    	; 0x2154 <purpleside+0x7ec>
					{
						_delay_ms(10000);
					}
					else if(current_position == 11 || current_position ==  15)
    2052:	fe 01       	movw	r30, r28
    2054:	e6 5b       	subi	r30, 0xB6	; 182
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 81       	ld	r24, Z
    205a:	8b 30       	cpi	r24, 0x0B	; 11
    205c:	39 f0       	breq	.+14     	; 0x206c <purpleside+0x704>
    205e:	fe 01       	movw	r30, r28
    2060:	e6 5b       	subi	r30, 0xB6	; 182
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	8f 30       	cpi	r24, 0x0F	; 15
    2068:	09 f0       	breq	.+2      	; 0x206c <purpleside+0x704>
    206a:	6d c0       	rjmp	.+218    	; 0x2146 <purpleside+0x7de>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	aa ef       	ldi	r26, 0xFA	; 250
    2072:	b4 e4       	ldi	r27, 0x44	; 68
    2074:	8f a3       	std	Y+39, r24	; 0x27
    2076:	98 a7       	std	Y+40, r25	; 0x28
    2078:	a9 a7       	std	Y+41, r26	; 0x29
    207a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6f a1       	ldd	r22, Y+39	; 0x27
    207e:	78 a5       	ldd	r23, Y+40	; 0x28
    2080:	89 a5       	ldd	r24, Y+41	; 0x29
    2082:	9a a5       	ldd	r25, Y+42	; 0x2a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e4       	ldi	r19, 0x40	; 64
    2088:	4c e1       	ldi	r20, 0x1C	; 28
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	56 d7       	rcall	.+3756   	; 0x2f3a <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	9c a3       	std	Y+36, r25	; 0x24
    2096:	ad a3       	std	Y+37, r26	; 0x25
    2098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	f4 d5       	rcall	.+3048   	; 0x2c94 <__cmpsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <purpleside+0x752>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	3b c0       	rjmp	.+118    	; 0x2130 <purpleside+0x7c8>
	else if (__tmp > 65535)
    20ba:	6b a1       	ldd	r22, Y+35	; 0x23
    20bc:	7c a1       	ldd	r23, Y+36	; 0x24
    20be:	8d a1       	ldd	r24, Y+37	; 0x25
    20c0:	9e a1       	ldd	r25, Y+38	; 0x26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	33 d7       	rcall	.+3686   	; 0x2f32 <__gesf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	3c f5       	brge	.+78     	; 0x211e <purpleside+0x7b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6f a1       	ldd	r22, Y+39	; 0x27
    20d2:	78 a5       	ldd	r23, Y+40	; 0x28
    20d4:	89 a5       	ldd	r24, Y+41	; 0x29
    20d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	2c d7       	rcall	.+3672   	; 0x2f3a <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	45 d6       	rcall	.+3210   	; 0x2d76 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <purpleside+0x7ac>
    20f6:	8a ef       	ldi	r24, 0xFA	; 250
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 a3       	std	Y+32, r25	; 0x20
    20fc:	8f 8f       	std	Y+31, r24	; 0x1f
    20fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2100:	98 a1       	ldd	r25, Y+32	; 0x20
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <purpleside+0x79a>
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	89 a1       	ldd	r24, Y+33	; 0x21
    210c:	9a a1       	ldd	r25, Y+34	; 0x22
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <purpleside+0x78e>
    211c:	1b c0       	rjmp	.+54     	; 0x2154 <purpleside+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	6b a1       	ldd	r22, Y+35	; 0x23
    2120:	7c a1       	ldd	r23, Y+36	; 0x24
    2122:	8d a1       	ldd	r24, Y+37	; 0x25
    2124:	9e a1       	ldd	r25, Y+38	; 0x26
    2126:	27 d6       	rcall	.+3150   	; 0x2d76 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	89 a1       	ldd	r24, Y+33	; 0x21
    2132:	9a a1       	ldd	r25, Y+34	; 0x22
    2134:	9e 8f       	std	Y+30, r25	; 0x1e
    2136:	8d 8f       	std	Y+29, r24	; 0x1d
    2138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <purpleside+0x7d4>
    2140:	9e 8f       	std	Y+30, r25	; 0x1e
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <purpleside+0x7ec>
					{
						_delay_ms(2000);
					}
					else if(current_position == 18)
    2146:	fe 01       	movw	r30, r28
    2148:	e6 5b       	subi	r30, 0xB6	; 182
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	82 31       	cpi	r24, 0x12	; 18
    2150:	09 f4       	brne	.+2      	; 0x2154 <purpleside+0x7ec>
    2152:	ff cf       	rjmp	.-2      	; 0x2152 <purpleside+0x7ea>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    2154:	de 01       	movw	r26, r28
    2156:	a6 5b       	subi	r26, 0xB6	; 182
    2158:	bf 4f       	sbci	r27, 0xFF	; 255
    215a:	fe 01       	movw	r30, r28
    215c:	e6 5b       	subi	r30, 0xB6	; 182
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	8c 93       	st	X, r24
    2166:	fe 01       	movw	r30, r28
    2168:	e6 5b       	subi	r30, 0xB6	; 182
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	84 31       	cpi	r24, 0x14	; 20
    2170:	08 f4       	brcc	.+2      	; 0x2174 <purpleside+0x80c>
    2172:	93 ce       	rjmp	.-730    	; 0x1e9a <purpleside+0x532>
						while(1);					
					}
					
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    2174:	fe 01       	movw	r30, r28
    2176:	e6 5b       	subi	r30, 0xB6	; 182
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	de 01       	movw	r26, r28
    217c:	a7 5b       	subi	r26, 0xB7	; 183
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	8c 91       	ld	r24, X
    2182:	80 83       	st	Z, r24
    2184:	66 c1       	rjmp	.+716    	; 0x2452 <purpleside+0xaea>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_four_positions[current_position].point), purple_tactic_four_positions[current_position].speed,
    2186:	fe 01       	movw	r30, r28
    2188:	e6 5b       	subi	r30, 0xB6	; 182
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	ca 01       	movw	r24, r20
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	9c 01       	movw	r18, r24
    219a:	22 0f       	add	r18, r18
    219c:	33 1f       	adc	r19, r19
    219e:	22 0f       	add	r18, r18
    21a0:	33 1f       	adc	r19, r19
    21a2:	82 0f       	add	r24, r18
    21a4:	93 1f       	adc	r25, r19
    21a6:	84 0f       	add	r24, r20
    21a8:	95 1f       	adc	r25, r21
    21aa:	81 5d       	subi	r24, 0xD1	; 209
    21ac:	9d 4f       	sbci	r25, 0xFD	; 253
    21ae:	bc 01       	movw	r22, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	e6 5b       	subi	r30, 0xB6	; 182
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	ca 01       	movw	r24, r20
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	9c 01       	movw	r18, r24
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	82 0f       	add	r24, r18
    21ce:	93 1f       	adc	r25, r19
    21d0:	84 0f       	add	r24, r20
    21d2:	95 1f       	adc	r25, r21
    21d4:	fc 01       	movw	r30, r24
    21d6:	ea 5c       	subi	r30, 0xCA	; 202
    21d8:	fd 4f       	sbci	r31, 0xFD	; 253
    21da:	a0 81       	ld	r26, Z
    21dc:	fe 01       	movw	r30, r28
    21de:	e6 5b       	subi	r30, 0xB6	; 182
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	ca 01       	movw	r24, r20
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	9c 01       	movw	r18, r24
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	82 0f       	add	r24, r18
    21fa:	93 1f       	adc	r25, r19
    21fc:	84 0f       	add	r24, r20
    21fe:	95 1f       	adc	r25, r21
    2200:	fc 01       	movw	r30, r24
    2202:	e9 5c       	subi	r30, 0xC9	; 201
    2204:	fd 4f       	sbci	r31, 0xFD	; 253
    2206:	80 81       	ld	r24, Z
    2208:	b8 2f       	mov	r27, r24
    220a:	fe 01       	movw	r30, r28
    220c:	e6 5b       	subi	r30, 0xB6	; 182
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	ca 01       	movw	r24, r20
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	9c 01       	movw	r18, r24
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	84 0f       	add	r24, r20
    222c:	95 1f       	adc	r25, r21
    222e:	fc 01       	movw	r30, r24
    2230:	e8 5c       	subi	r30, 0xC8	; 200
    2232:	fd 4f       	sbci	r31, 0xFD	; 253
    2234:	20 81       	ld	r18, Z
    2236:	31 81       	ldd	r19, Z+1	; 0x01
    2238:	cb 01       	movw	r24, r22
    223a:	6a 2f       	mov	r22, r26
    223c:	4b 2f       	mov	r20, r27
    223e:	5e d9       	rcall	.-3396   	; 0x14fc <odometry_move_to_position>
    2240:	fe 01       	movw	r30, r28
    2242:	e8 5b       	subi	r30, 0xB8	; 184
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 83       	st	Z, r24
					purple_tactic_four_positions[current_position].direction,purple_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2248:	fe 01       	movw	r30, r28
    224a:	e8 5b       	subi	r30, 0xB8	; 184
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	09 f4       	brne	.+2      	; 0x2256 <purpleside+0x8ee>
    2254:	05 c1       	rjmp	.+522    	; 0x2460 <purpleside+0xaf8>
					{
						break;
					}
					if(current_position == 10)
    2256:	fe 01       	movw	r30, r28
    2258:	e6 5b       	subi	r30, 0xB6	; 182
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	8a 30       	cpi	r24, 0x0A	; 10
    2260:	09 f0       	breq	.+2      	; 0x2264 <purpleside+0x8fc>
    2262:	6d c0       	rjmp	.+218    	; 0x233e <purpleside+0x9d6>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e4       	ldi	r25, 0x40	; 64
    2268:	ac e1       	ldi	r26, 0x1C	; 28
    226a:	b6 e4       	ldi	r27, 0x46	; 70
    226c:	89 8f       	std	Y+25, r24	; 0x19
    226e:	9a 8f       	std	Y+26, r25	; 0x1a
    2270:	ab 8f       	std	Y+27, r26	; 0x1b
    2272:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	69 8d       	ldd	r22, Y+25	; 0x19
    2276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e4       	ldi	r19, 0x40	; 64
    2280:	4c e1       	ldi	r20, 0x1C	; 28
    2282:	55 e4       	ldi	r21, 0x45	; 69
    2284:	5a d6       	rcall	.+3252   	; 0x2f3a <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	8d 8b       	std	Y+21, r24	; 0x15
    228c:	9e 8b       	std	Y+22, r25	; 0x16
    228e:	af 8b       	std	Y+23, r26	; 0x17
    2290:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2292:	6d 89       	ldd	r22, Y+21	; 0x15
    2294:	7e 89       	ldd	r23, Y+22	; 0x16
    2296:	8f 89       	ldd	r24, Y+23	; 0x17
    2298:	98 8d       	ldd	r25, Y+24	; 0x18
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	f8 d4       	rcall	.+2544   	; 0x2c94 <__cmpsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <purpleside+0x94a>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
    22b0:	3b c0       	rjmp	.+118    	; 0x2328 <purpleside+0x9c0>
	else if (__tmp > 65535)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	37 d6       	rcall	.+3182   	; 0x2f32 <__gesf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	3c f5       	brge	.+78     	; 0x2316 <purpleside+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	30 d6       	rcall	.+3168   	; 0x2f3a <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	49 d5       	rcall	.+2706   	; 0x2d76 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <purpleside+0x9a4>
    22ee:	8a ef       	ldi	r24, 0xFA	; 250
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9a 8b       	std	Y+18, r25	; 0x12
    22f4:	89 8b       	std	Y+17, r24	; 0x11
    22f6:	89 89       	ldd	r24, Y+17	; 0x11
    22f8:	9a 89       	ldd	r25, Y+18	; 0x12
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <purpleside+0x992>
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <purpleside+0x986>
    2314:	95 c0       	rjmp	.+298    	; 0x2440 <purpleside+0xad8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	2b d5       	rcall	.+2646   	; 0x2d76 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	98 8b       	std	Y+16, r25	; 0x10
    232e:	8f 87       	std	Y+15, r24	; 0x0f
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	98 89       	ldd	r25, Y+16	; 0x10
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <purpleside+0x9cc>
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
    233c:	81 c0       	rjmp	.+258    	; 0x2440 <purpleside+0xad8>
					{
						_delay_ms(10000);
					}
					else if(current_position == 11 || current_position ==  15)
    233e:	fe 01       	movw	r30, r28
    2340:	e6 5b       	subi	r30, 0xB6	; 182
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	8b 30       	cpi	r24, 0x0B	; 11
    2348:	39 f0       	breq	.+14     	; 0x2358 <purpleside+0x9f0>
    234a:	fe 01       	movw	r30, r28
    234c:	e6 5b       	subi	r30, 0xB6	; 182
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	8f 30       	cpi	r24, 0x0F	; 15
    2354:	09 f0       	breq	.+2      	; 0x2358 <purpleside+0x9f0>
    2356:	6d c0       	rjmp	.+218    	; 0x2432 <purpleside+0xaca>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	aa ef       	ldi	r26, 0xFA	; 250
    235e:	b4 e4       	ldi	r27, 0x44	; 68
    2360:	8b 87       	std	Y+11, r24	; 0x0b
    2362:	9c 87       	std	Y+12, r25	; 0x0c
    2364:	ad 87       	std	Y+13, r26	; 0x0d
    2366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6b 85       	ldd	r22, Y+11	; 0x0b
    236a:	7c 85       	ldd	r23, Y+12	; 0x0c
    236c:	8d 85       	ldd	r24, Y+13	; 0x0d
    236e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e4       	ldi	r19, 0x40	; 64
    2374:	4c e1       	ldi	r20, 0x1C	; 28
    2376:	55 e4       	ldi	r21, 0x45	; 69
    2378:	e0 d5       	rcall	.+3008   	; 0x2f3a <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	98 87       	std	Y+8, r25	; 0x08
    2382:	a9 87       	std	Y+9, r26	; 0x09
    2384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	7e d4       	rcall	.+2300   	; 0x2c94 <__cmpsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <purpleside+0xa3e>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3b c0       	rjmp	.+118    	; 0x241c <purpleside+0xab4>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	bd d5       	rcall	.+2938   	; 0x2f32 <__gesf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	3c f5       	brge	.+78     	; 0x240a <purpleside+0xaa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	b6 d5       	rcall	.+2924   	; 0x2f3a <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	cf d4       	rcall	.+2462   	; 0x2d76 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <purpleside+0xa98>
    23e2:	8a ef       	ldi	r24, 0xFA	; 250
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <purpleside+0xa86>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <purpleside+0xa7a>
    2408:	1b c0       	rjmp	.+54     	; 0x2440 <purpleside+0xad8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	b1 d4       	rcall	.+2402   	; 0x2d76 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <purpleside+0xac0>
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <purpleside+0xad8>
					{
						_delay_ms(2000);
					}
					else if(current_position == 18)
    2432:	fe 01       	movw	r30, r28
    2434:	e6 5b       	subi	r30, 0xB6	; 182
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	82 31       	cpi	r24, 0x12	; 18
    243c:	09 f4       	brne	.+2      	; 0x2440 <purpleside+0xad8>
    243e:	ff cf       	rjmp	.-2      	; 0x243e <purpleside+0xad6>
						while(1);					
					}
					
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    2440:	de 01       	movw	r26, r28
    2442:	a6 5b       	subi	r26, 0xB6	; 182
    2444:	bf 4f       	sbci	r27, 0xFF	; 255
    2446:	fe 01       	movw	r30, r28
    2448:	e6 5b       	subi	r30, 0xB6	; 182
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	8c 93       	st	X, r24
    2452:	fe 01       	movw	r30, r28
    2454:	e6 5b       	subi	r30, 0xB6	; 182
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	84 31       	cpi	r24, 0x14	; 20
    245c:	08 f4       	brcc	.+2      	; 0x2460 <purpleside+0xaf8>
    245e:	93 ce       	rjmp	.-730    	; 0x2186 <purpleside+0x81e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    2460:	fe 01       	movw	r30, r28
    2462:	e6 5b       	subi	r30, 0xB6	; 182
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	de 01       	movw	r26, r28
    2468:	a7 5b       	subi	r26, 0xB7	; 183
    246a:	bf 4f       	sbci	r27, 0xFF	; 255
    246c:	8c 91       	ld	r24, X
    246e:	80 83       	st	Z, r24
    2470:	79 c0       	rjmp	.+242    	; 0x2564 <purpleside+0xbfc>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_five_positions[current_position].point), purple_tactic_five_positions[current_position].speed,
    2472:	fe 01       	movw	r30, r28
    2474:	e6 5b       	subi	r30, 0xB6	; 182
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	48 2f       	mov	r20, r24
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	ca 01       	movw	r24, r20
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	9c 01       	movw	r18, r24
    2486:	22 0f       	add	r18, r18
    2488:	33 1f       	adc	r19, r19
    248a:	22 0f       	add	r18, r18
    248c:	33 1f       	adc	r19, r19
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	84 0f       	add	r24, r20
    2494:	95 1f       	adc	r25, r21
    2496:	85 5f       	subi	r24, 0xF5	; 245
    2498:	9c 4f       	sbci	r25, 0xFC	; 252
    249a:	bc 01       	movw	r22, r24
    249c:	fe 01       	movw	r30, r28
    249e:	e6 5b       	subi	r30, 0xB6	; 182
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	ca 01       	movw	r24, r20
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	9c 01       	movw	r18, r24
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	82 0f       	add	r24, r18
    24ba:	93 1f       	adc	r25, r19
    24bc:	84 0f       	add	r24, r20
    24be:	95 1f       	adc	r25, r21
    24c0:	fc 01       	movw	r30, r24
    24c2:	ee 5e       	subi	r30, 0xEE	; 238
    24c4:	fc 4f       	sbci	r31, 0xFC	; 252
    24c6:	a0 81       	ld	r26, Z
    24c8:	fe 01       	movw	r30, r28
    24ca:	e6 5b       	subi	r30, 0xB6	; 182
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	48 2f       	mov	r20, r24
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	ca 01       	movw	r24, r20
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	9c 01       	movw	r18, r24
    24dc:	22 0f       	add	r18, r18
    24de:	33 1f       	adc	r19, r19
    24e0:	22 0f       	add	r18, r18
    24e2:	33 1f       	adc	r19, r19
    24e4:	82 0f       	add	r24, r18
    24e6:	93 1f       	adc	r25, r19
    24e8:	84 0f       	add	r24, r20
    24ea:	95 1f       	adc	r25, r21
    24ec:	fc 01       	movw	r30, r24
    24ee:	ed 5e       	subi	r30, 0xED	; 237
    24f0:	fc 4f       	sbci	r31, 0xFC	; 252
    24f2:	80 81       	ld	r24, Z
    24f4:	b8 2f       	mov	r27, r24
    24f6:	fe 01       	movw	r30, r28
    24f8:	e6 5b       	subi	r30, 0xB6	; 182
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	48 2f       	mov	r20, r24
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	ca 01       	movw	r24, r20
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	9c 01       	movw	r18, r24
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	22 0f       	add	r18, r18
    2510:	33 1f       	adc	r19, r19
    2512:	82 0f       	add	r24, r18
    2514:	93 1f       	adc	r25, r19
    2516:	84 0f       	add	r24, r20
    2518:	95 1f       	adc	r25, r21
    251a:	fc 01       	movw	r30, r24
    251c:	ec 5e       	subi	r30, 0xEC	; 236
    251e:	fc 4f       	sbci	r31, 0xFC	; 252
    2520:	20 81       	ld	r18, Z
    2522:	31 81       	ldd	r19, Z+1	; 0x01
    2524:	cb 01       	movw	r24, r22
    2526:	6a 2f       	mov	r22, r26
    2528:	4b 2f       	mov	r20, r27
    252a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <odometry_move_to_position>
    252e:	fe 01       	movw	r30, r28
    2530:	e8 5b       	subi	r30, 0xB8	; 184
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 83       	st	Z, r24
					purple_tactic_five_positions[current_position].direction,purple_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2536:	fe 01       	movw	r30, r28
    2538:	e8 5b       	subi	r30, 0xB8	; 184
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	09 f4       	brne	.+2      	; 0x2544 <purpleside+0xbdc>
    2542:	58 cb       	rjmp	.-2384   	; 0x1bf4 <purpleside+0x28c>
					{
						break;
					}
					if(current_position == 0)
    2544:	fe 01       	movw	r30, r28
    2546:	e6 5b       	subi	r30, 0xB6	; 182
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	88 23       	and	r24, r24
    254e:	09 f4       	brne	.+2      	; 0x2552 <purpleside+0xbea>
    2550:	ff cf       	rjmp	.-2      	; 0x2550 <purpleside+0xbe8>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    2552:	de 01       	movw	r26, r28
    2554:	a6 5b       	subi	r26, 0xB6	; 182
    2556:	bf 4f       	sbci	r27, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	e6 5b       	subi	r30, 0xB6	; 182
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8c 93       	st	X, r24
    2564:	fe 01       	movw	r30, r28
    2566:	e6 5b       	subi	r30, 0xB6	; 182
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	09 f4       	brne	.+2      	; 0x2572 <purpleside+0xc0a>
    2570:	80 cf       	rjmp	.-256    	; 0x2472 <purpleside+0xb0a>
    2572:	40 cb       	rjmp	.-2432   	; 0x1bf4 <purpleside+0x28c>

00002574 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <timer_register_callback+0x6>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	90 93 4c 03 	sts	0x034C, r25
    258a:	80 93 4b 03 	sts	0x034B, r24
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <timer_init>:
	returned = combination_check();
}


void timer_init(unsigned int freq)
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <timer_init+0xa>
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    25aa:	e0 e8       	ldi	r30, 0x80	; 128
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    25b0:	e1 e8       	ldi	r30, 0x81	; 129
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	89 e0       	ldi	r24, 0x09	; 9
    25b6:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    25b8:	08 e8       	ldi	r16, 0x88	; 136
    25ba:	10 e0       	ldi	r17, 0x00	; 0
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	cc 01       	movw	r24, r24
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	01 d4       	rcall	.+2050   	; 0x2dce <__floatunsisf>
    25cc:	9b 01       	movw	r18, r22
    25ce:	ac 01       	movw	r20, r24
    25d0:	60 e8       	ldi	r22, 0x80	; 128
    25d2:	76 e9       	ldi	r23, 0x96	; 150
    25d4:	88 e1       	ldi	r24, 0x18	; 24
    25d6:	9b e4       	ldi	r25, 0x4B	; 75
    25d8:	61 d3       	rcall	.+1730   	; 0x2c9c <__divsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	f0 d2       	rcall	.+1504   	; 0x2bcc <__addsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	c0 d3       	rcall	.+1920   	; 0x2d76 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2600:	ef e6       	ldi	r30, 0x6F	; 111
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	80 83       	st	Z, r24

	SREG |= 0x80;
    2608:	af e5       	ldi	r26, 0x5F	; 95
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	ef e5       	ldi	r30, 0x5F	; 95
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 68       	ori	r24, 0x80	; 128
    2614:	8c 93       	st	X, r24
}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	08 95       	ret

00002624 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2624:	1f 92       	push	r1
    2626:	0f 92       	push	r0
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	0f 92       	push	r0
    262c:	00 90 5b 00 	lds	r0, 0x005B
    2630:	0f 92       	push	r0
    2632:	11 24       	eor	r1, r1
    2634:	2f 93       	push	r18
    2636:	3f 93       	push	r19
    2638:	4f 93       	push	r20
    263a:	5f 93       	push	r21
    263c:	6f 93       	push	r22
    263e:	7f 93       	push	r23
    2640:	8f 93       	push	r24
    2642:	9f 93       	push	r25
    2644:	af 93       	push	r26
    2646:	bf 93       	push	r27
    2648:	ef 93       	push	r30
    264a:	ff 93       	push	r31
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2654:	80 91 4b 03 	lds	r24, 0x034B
    2658:	90 91 4c 03 	lds	r25, 0x034C
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	29 f0       	breq	.+10     	; 0x266a <__vector_12+0x46>
        timer_callback();
    2660:	e0 91 4b 03 	lds	r30, 0x034B
    2664:	f0 91 4c 03 	lds	r31, 0x034C
    2668:	09 95       	icall
	if(sys_time >= 90000)
    266a:	80 91 4d 03 	lds	r24, 0x034D
    266e:	90 91 4e 03 	lds	r25, 0x034E
    2672:	a0 91 4f 03 	lds	r26, 0x034F
    2676:	b0 91 50 03 	lds	r27, 0x0350
    267a:	80 39       	cpi	r24, 0x90	; 144
    267c:	2f e5       	ldi	r18, 0x5F	; 95
    267e:	92 07       	cpc	r25, r18
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	a2 07       	cpc	r26, r18
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	b2 07       	cpc	r27, r18
    2688:	10 f0       	brcs	.+4      	; 0x268e <__vector_12+0x6a>
		actuators_umbrella();
    268a:	0e 94 a7 02 	call	0x54e	; 0x54e <actuators_umbrella>
	sys_time++;
    268e:	80 91 4d 03 	lds	r24, 0x034D
    2692:	90 91 4e 03 	lds	r25, 0x034E
    2696:	a0 91 4f 03 	lds	r26, 0x034F
    269a:	b0 91 50 03 	lds	r27, 0x0350
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	a1 1d       	adc	r26, r1
    26a2:	b1 1d       	adc	r27, r1
    26a4:	80 93 4d 03 	sts	0x034D, r24
    26a8:	90 93 4e 03 	sts	0x034E, r25
    26ac:	a0 93 4f 03 	sts	0x034F, r26
    26b0:	b0 93 50 03 	sts	0x0350, r27
}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	ff 91       	pop	r31
    26ba:	ef 91       	pop	r30
    26bc:	bf 91       	pop	r27
    26be:	af 91       	pop	r26
    26c0:	9f 91       	pop	r25
    26c2:	8f 91       	pop	r24
    26c4:	7f 91       	pop	r23
    26c6:	6f 91       	pop	r22
    26c8:	5f 91       	pop	r21
    26ca:	4f 91       	pop	r20
    26cc:	3f 91       	pop	r19
    26ce:	2f 91       	pop	r18
    26d0:	0f 90       	pop	r0
    26d2:	00 92 5b 00 	sts	0x005B, r0
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <system_reset_system_time>:
void system_reset_system_time(void)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    26e8:	10 92 4d 03 	sts	0x034D, r1
    26ec:	10 92 4e 03 	sts	0x034E, r1
    26f0:	10 92 4f 03 	sts	0x034F, r1
    26f4:	10 92 50 03 	sts	0x0350, r1
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <system_set_match_started>:
void system_set_match_started(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	80 93 51 03 	sts	0x0351, r24
}
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    271a:	80 91 4d 03 	lds	r24, 0x034D
    271e:	90 91 4e 03 	lds	r25, 0x034E
    2722:	a0 91 4f 03 	lds	r26, 0x034F
    2726:	b0 91 50 03 	lds	r27, 0x0350
}
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <system_init>:
/*uint8_t return_active_state(void)
{
	return active_state;
}*/
void system_init(void)
{	
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	6c 97       	sbiw	r28, 0x1c	; 28
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    2748:	81 e9       	ldi	r24, 0x91	; 145
    274a:	98 e0       	ldi	r25, 0x08	; 8
    274c:	13 df       	rcall	.-474    	; 0x2574 <timer_register_callback>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a8 ec       	ldi	r26, 0xC8	; 200
    2754:	b2 e4       	ldi	r27, 0x42	; 66
    2756:	89 8f       	std	Y+25, r24	; 0x19
    2758:	9a 8f       	std	Y+26, r25	; 0x1a
    275a:	ab 8f       	std	Y+27, r26	; 0x1b
    275c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	69 8d       	ldd	r22, Y+25	; 0x19
    2760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e4       	ldi	r19, 0x40	; 64
    276a:	4c e1       	ldi	r20, 0x1C	; 28
    276c:	55 e4       	ldi	r21, 0x45	; 69
    276e:	e5 d3       	rcall	.+1994   	; 0x2f3a <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8d 8b       	std	Y+21, r24	; 0x15
    2776:	9e 8b       	std	Y+22, r25	; 0x16
    2778:	af 8b       	std	Y+23, r26	; 0x17
    277a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	83 d2       	rcall	.+1286   	; 0x2c94 <__cmpsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <system_init+0x68>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	3b c0       	rjmp	.+118    	; 0x2812 <system_init+0xde>
	else if (__tmp > 65535)
    279c:	6d 89       	ldd	r22, Y+21	; 0x15
    279e:	7e 89       	ldd	r23, Y+22	; 0x16
    27a0:	8f 89       	ldd	r24, Y+23	; 0x17
    27a2:	98 8d       	ldd	r25, Y+24	; 0x18
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	c2 d3       	rcall	.+1924   	; 0x2f32 <__gesf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	3c f5       	brge	.+78     	; 0x2800 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	69 8d       	ldd	r22, Y+25	; 0x19
    27b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	bb d3       	rcall	.+1910   	; 0x2f3a <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	d4 d2       	rcall	.+1448   	; 0x2d76 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9c 8b       	std	Y+20, r25	; 0x14
    27d4:	8b 8b       	std	Y+19, r24	; 0x13
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <system_init+0xc2>
    27d8:	8a ef       	ldi	r24, 0xFA	; 250
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9a 8b       	std	Y+18, r25	; 0x12
    27de:	89 8b       	std	Y+17, r24	; 0x11
    27e0:	89 89       	ldd	r24, Y+17	; 0x11
    27e2:	9a 89       	ldd	r25, Y+18	; 0x12
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <system_init+0xb0>
    27e8:	9a 8b       	std	Y+18, r25	; 0x12
    27ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8b 89       	ldd	r24, Y+19	; 0x13
    27ee:	9c 89       	ldd	r25, Y+20	; 0x14
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <system_init+0xa4>
    27fe:	13 c0       	rjmp	.+38     	; 0x2826 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6d 89       	ldd	r22, Y+21	; 0x15
    2802:	7e 89       	ldd	r23, Y+22	; 0x16
    2804:	8f 89       	ldd	r24, Y+23	; 0x17
    2806:	98 8d       	ldd	r25, Y+24	; 0x18
    2808:	b6 d2       	rcall	.+1388   	; 0x2d76 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9c 8b       	std	Y+20, r25	; 0x14
    2810:	8b 8b       	std	Y+19, r24	; 0x13
    2812:	8b 89       	ldd	r24, Y+19	; 0x13
    2814:	9c 89       	ldd	r25, Y+20	; 0x14
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	8f 87       	std	Y+15, r24	; 0x0f
    281a:	8f 85       	ldd	r24, Y+15	; 0x0f
    281c:	98 89       	ldd	r25, Y+16	; 0x10
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <system_init+0xea>
    2822:	98 8b       	std	Y+16, r25	; 0x10
    2824:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    2826:	88 e2       	ldi	r24, 0x28	; 40
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    2830:	89 e2       	ldi	r24, 0x29	; 41
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    2858:	88 e0       	ldi	r24, 0x08	; 8
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    2862:	8a e0       	ldi	r24, 0x0A	; 10
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    286c:	8c e0       	ldi	r24, 0x0C	; 12
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    2876:	8e e0       	ldi	r24, 0x0E	; 14
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 a3 06 	call	0xd46	; 0xd46 <gpio_register_pin>
	
	
	DDRG = 0xff;
    2880:	e3 e3       	ldi	r30, 0x33	; 51
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	8f ef       	ldi	r24, 0xFF	; 255
    2886:	80 83       	st	Z, r24
	PORTG = 0x00;
    2888:	e4 e3       	ldi	r30, 0x34	; 52
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	10 82       	st	Z, r1
	servo_init(50);
    288e:	82 e3       	ldi	r24, 0x32	; 50
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 ee 00 	call	0x1dc	; 0x1dc <servo_init>
	timer_init(1000);
    2896:	88 ee       	ldi	r24, 0xE8	; 232
    2898:	93 e0       	ldi	r25, 0x03	; 3
    289a:	7e de       	rcall	.-772    	; 0x2598 <timer_init>
	CAN_Init(1);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 5e 05 	call	0xabc	; 0xabc <CAN_Init>
    28a2:	6c c0       	rjmp	.+216    	; 0x297c <system_init+0x248>

	//actuators_setup();
	
	while(gpio_read_pin(JUMPER_PIN))
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e2       	ldi	r26, 0x20	; 32
    28aa:	b1 e4       	ldi	r27, 0x41	; 65
    28ac:	8b 87       	std	Y+11, r24	; 0x0b
    28ae:	9c 87       	std	Y+12, r25	; 0x0c
    28b0:	ad 87       	std	Y+13, r26	; 0x0d
    28b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e4       	ldi	r19, 0x40	; 64
    28c0:	4c e1       	ldi	r20, 0x1C	; 28
    28c2:	55 e4       	ldi	r21, 0x45	; 69
    28c4:	3a d3       	rcall	.+1652   	; 0x2f3a <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8f 83       	std	Y+7, r24	; 0x07
    28cc:	98 87       	std	Y+8, r25	; 0x08
    28ce:	a9 87       	std	Y+9, r26	; 0x09
    28d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	d8 d1       	rcall	.+944    	; 0x2c94 <__cmpsf2>
    28e4:	88 23       	and	r24, r24
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <system_init+0x1be>
		__ticks = 1;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
    28f0:	3b c0       	rjmp	.+118    	; 0x2968 <system_init+0x234>
	else if (__tmp > 65535)
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	3f ef       	ldi	r19, 0xFF	; 255
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	57 e4       	ldi	r21, 0x47	; 71
    2902:	17 d3       	rcall	.+1582   	; 0x2f32 <__gesf2>
    2904:	18 16       	cp	r1, r24
    2906:	3c f5       	brge	.+78     	; 0x2956 <system_init+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2908:	6b 85       	ldd	r22, Y+11	; 0x0b
    290a:	7c 85       	ldd	r23, Y+12	; 0x0c
    290c:	8d 85       	ldd	r24, Y+13	; 0x0d
    290e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e2       	ldi	r20, 0x20	; 32
    2916:	51 e4       	ldi	r21, 0x41	; 65
    2918:	10 d3       	rcall	.+1568   	; 0x2f3a <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	29 d2       	rcall	.+1106   	; 0x2d76 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	0f c0       	rjmp	.+30     	; 0x294c <system_init+0x218>
    292e:	8a ef       	ldi	r24, 0xFA	; 250
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <system_init+0x206>
    293e:	9c 83       	std	Y+4, r25	; 0x04
    2940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <system_init+0x1fa>
    2954:	13 c0       	rjmp	.+38     	; 0x297c <system_init+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	0b d2       	rcall	.+1046   	; 0x2d76 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <system_init+0x240>
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	88 e2       	ldi	r24, 0x28	; 40
    297e:	0e 94 11 08 	call	0x1022	; 0x1022 <gpio_read_pin>
    2982:	88 23       	and	r24, r24
    2984:	09 f0       	breq	.+2      	; 0x2988 <system_init+0x254>
    2986:	8e cf       	rjmp	.-228    	; 0x28a4 <system_init+0x170>
		_delay_ms(10);
	PORTG = 0xff;
    2988:	e4 e3       	ldi	r30, 0x34	; 52
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	80 83       	st	Z, r24
	system_reset_system_time();
    2990:	a7 de       	rcall	.-690    	; 0x26e0 <system_reset_system_time>
	system_set_match_started();
    2992:	b5 de       	rcall	.-662    	; 0x26fe <system_set_match_started>
	
}
    2994:	6c 96       	adiw	r28, 0x1c	; 28
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    29a6:	1f 92       	push	r1
    29a8:	0f 92       	push	r0
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	0f 92       	push	r0
    29ae:	00 90 5b 00 	lds	r0, 0x005B
    29b2:	0f 92       	push	r0
    29b4:	11 24       	eor	r1, r1
    29b6:	8f 93       	push	r24
    29b8:	9f 93       	push	r25
    29ba:	af 93       	push	r26
    29bc:	bf 93       	push	r27
    29be:	ef 93       	push	r30
    29c0:	ff 93       	push	r31
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    29ca:	80 91 52 03 	lds	r24, 0x0352
    29ce:	88 23       	and	r24, r24
    29d0:	d9 f0       	breq	.+54     	; 0x2a08 <__vector_23+0x62>
	{
		tx0_counter--;
    29d2:	80 91 52 03 	lds	r24, 0x0352
    29d6:	81 50       	subi	r24, 0x01	; 1
    29d8:	80 93 52 03 	sts	0x0352, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    29dc:	a6 ec       	ldi	r26, 0xC6	; 198
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	80 91 53 03 	lds	r24, 0x0353
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	fc 01       	movw	r30, r24
    29ea:	e6 5a       	subi	r30, 0xA6	; 166
    29ec:	fc 4f       	sbci	r31, 0xFC	; 252
    29ee:	80 81       	ld	r24, Z
    29f0:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    29f2:	80 91 53 03 	lds	r24, 0x0353
    29f6:	8f 5f       	subi	r24, 0xFF	; 255
    29f8:	80 93 53 03 	sts	0x0353, r24
    29fc:	80 91 53 03 	lds	r24, 0x0353
    2a00:	80 34       	cpi	r24, 0x40	; 64
    2a02:	11 f4       	brne	.+4      	; 0x2a08 <__vector_23+0x62>
			tx0_rd_index = 0;
    2a04:	10 92 53 03 	sts	0x0353, r1
	}
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	ff 91       	pop	r31
    2a0e:	ef 91       	pop	r30
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	0f 90       	pop	r0
    2a1a:	00 92 5b 00 	sts	0x005B, r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	0f 90       	pop	r0
    2a24:	1f 90       	pop	r1
    2a26:	18 95       	reti

00002a28 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	00 90 5b 00 	lds	r0, 0x005B
    2a34:	0f 92       	push	r0
    2a36:	11 24       	eor	r1, r1
    2a38:	2f 93       	push	r18
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	0f 92       	push	r0
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2a4c:	e0 ec       	ldi	r30, 0xC0	; 192
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	8c 71       	andi	r24, 0x1C	; 28
    2a5c:	90 70       	andi	r25, 0x00	; 0
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	d9 f4       	brne	.+54     	; 0x2a98 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2a62:	80 91 54 03 	lds	r24, 0x0354
    2a66:	88 2f       	mov	r24, r24
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	e6 ec       	ldi	r30, 0xC6	; 198
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	20 81       	ld	r18, Z
    2a70:	fc 01       	movw	r30, r24
    2a72:	e6 56       	subi	r30, 0x66	; 102
    2a74:	fc 4f       	sbci	r31, 0xFC	; 252
    2a76:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2a78:	80 91 54 03 	lds	r24, 0x0354
    2a7c:	8f 5f       	subi	r24, 0xFF	; 255
    2a7e:	80 93 54 03 	sts	0x0354, r24
    2a82:	80 91 54 03 	lds	r24, 0x0354
    2a86:	80 34       	cpi	r24, 0x40	; 64
    2a88:	11 f4       	brne	.+4      	; 0x2a8e <__vector_21+0x66>
			rx0_wr_index = 0;
    2a8a:	10 92 54 03 	sts	0x0354, r1

		rx0_counter++;
    2a8e:	80 91 55 03 	lds	r24, 0x0355
    2a92:	8f 5f       	subi	r24, 0xFF	; 255
    2a94:	80 93 55 03 	sts	0x0355, r24
	}
}
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	9f 91       	pop	r25
    2aa4:	8f 91       	pop	r24
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	00 92 5b 00 	sts	0x005B, r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	1f 90       	pop	r1
    2ab6:	18 95       	reti

00002ab8 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2ab8:	1f 92       	push	r1
    2aba:	0f 92       	push	r0
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	0f 92       	push	r0
    2ac0:	00 90 5b 00 	lds	r0, 0x005B
    2ac4:	0f 92       	push	r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	8f 93       	push	r24
    2aca:	9f 93       	push	r25
    2acc:	af 93       	push	r26
    2ace:	bf 93       	push	r27
    2ad0:	ef 93       	push	r30
    2ad2:	ff 93       	push	r31
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2adc:	80 91 56 03 	lds	r24, 0x0356
    2ae0:	88 23       	and	r24, r24
    2ae2:	d9 f0       	breq	.+54     	; 0x2b1a <__vector_34+0x62>
	{
		tx1_counter--;
    2ae4:	80 91 56 03 	lds	r24, 0x0356
    2ae8:	81 50       	subi	r24, 0x01	; 1
    2aea:	80 93 56 03 	sts	0x0356, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2aee:	ae ec       	ldi	r26, 0xCE	; 206
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	80 91 57 03 	lds	r24, 0x0357
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	fc 01       	movw	r30, r24
    2afc:	e6 52       	subi	r30, 0x26	; 38
    2afe:	fc 4f       	sbci	r31, 0xFC	; 252
    2b00:	80 81       	ld	r24, Z
    2b02:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2b04:	80 91 57 03 	lds	r24, 0x0357
    2b08:	8f 5f       	subi	r24, 0xFF	; 255
    2b0a:	80 93 57 03 	sts	0x0357, r24
    2b0e:	80 91 57 03 	lds	r24, 0x0357
    2b12:	80 34       	cpi	r24, 0x40	; 64
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <__vector_34+0x62>
			tx1_rd_index = 0;
    2b16:	10 92 57 03 	sts	0x0357, r1
	}
}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	ff 91       	pop	r31
    2b20:	ef 91       	pop	r30
    2b22:	bf 91       	pop	r27
    2b24:	af 91       	pop	r26
    2b26:	9f 91       	pop	r25
    2b28:	8f 91       	pop	r24
    2b2a:	0f 90       	pop	r0
    2b2c:	00 92 5b 00 	sts	0x005B, r0
    2b30:	0f 90       	pop	r0
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	0f 90       	pop	r0
    2b36:	1f 90       	pop	r1
    2b38:	18 95       	reti

00002b3a <__vector_32>:

ISR(USART1_RX_vect)
{
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	00 90 5b 00 	lds	r0, 0x005B
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	2f 93       	push	r18
    2b4c:	8f 93       	push	r24
    2b4e:	9f 93       	push	r25
    2b50:	ef 93       	push	r30
    2b52:	ff 93       	push	r31
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2b5e:	e8 ec       	ldi	r30, 0xC8	; 200
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	8c 71       	andi	r24, 0x1C	; 28
    2b6e:	90 70       	andi	r25, 0x00	; 0
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	d9 f4       	brne	.+54     	; 0x2baa <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    2b74:	80 91 58 03 	lds	r24, 0x0358
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	ee ec       	ldi	r30, 0xCE	; 206
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	20 81       	ld	r18, Z
    2b82:	fc 01       	movw	r30, r24
    2b84:	e6 5e       	subi	r30, 0xE6	; 230
    2b86:	fb 4f       	sbci	r31, 0xFB	; 251
    2b88:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    2b8a:	80 91 58 03 	lds	r24, 0x0358
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	80 93 58 03 	sts	0x0358, r24
    2b94:	80 91 58 03 	lds	r24, 0x0358
    2b98:	80 34       	cpi	r24, 0x40	; 64
    2b9a:	11 f4       	brne	.+4      	; 0x2ba0 <__vector_32+0x66>
		rx1_wr_index = 0;
    2b9c:	10 92 58 03 	sts	0x0358, r1

		rx1_counter++;
    2ba0:	80 91 59 03 	lds	r24, 0x0359
    2ba4:	8f 5f       	subi	r24, 0xFF	; 255
    2ba6:	80 93 59 03 	sts	0x0359, r24
	}
}
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	ff 91       	pop	r31
    2bb2:	ef 91       	pop	r30
    2bb4:	9f 91       	pop	r25
    2bb6:	8f 91       	pop	r24
    2bb8:	2f 91       	pop	r18
    2bba:	0f 90       	pop	r0
    2bbc:	00 92 5b 00 	sts	0x005B, r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	0f 90       	pop	r0
    2bc6:	1f 90       	pop	r1
    2bc8:	18 95       	reti

00002bca <__subsf3>:
    2bca:	50 58       	subi	r21, 0x80	; 128

00002bcc <__addsf3>:
    2bcc:	bb 27       	eor	r27, r27
    2bce:	aa 27       	eor	r26, r26
    2bd0:	0e d0       	rcall	.+28     	; 0x2bee <__addsf3x>
    2bd2:	75 c1       	rjmp	.+746    	; 0x2ebe <__fp_round>
    2bd4:	66 d1       	rcall	.+716    	; 0x2ea2 <__fp_pscA>
    2bd6:	30 f0       	brcs	.+12     	; 0x2be4 <__addsf3+0x18>
    2bd8:	6b d1       	rcall	.+726    	; 0x2eb0 <__fp_pscB>
    2bda:	20 f0       	brcs	.+8      	; 0x2be4 <__addsf3+0x18>
    2bdc:	31 f4       	brne	.+12     	; 0x2bea <__addsf3+0x1e>
    2bde:	9f 3f       	cpi	r25, 0xFF	; 255
    2be0:	11 f4       	brne	.+4      	; 0x2be6 <__addsf3+0x1a>
    2be2:	1e f4       	brtc	.+6      	; 0x2bea <__addsf3+0x1e>
    2be4:	5b c1       	rjmp	.+694    	; 0x2e9c <__fp_nan>
    2be6:	0e f4       	brtc	.+2      	; 0x2bea <__addsf3+0x1e>
    2be8:	e0 95       	com	r30
    2bea:	e7 fb       	bst	r30, 7
    2bec:	51 c1       	rjmp	.+674    	; 0x2e90 <__fp_inf>

00002bee <__addsf3x>:
    2bee:	e9 2f       	mov	r30, r25
    2bf0:	77 d1       	rcall	.+750    	; 0x2ee0 <__fp_split3>
    2bf2:	80 f3       	brcs	.-32     	; 0x2bd4 <__addsf3+0x8>
    2bf4:	ba 17       	cp	r27, r26
    2bf6:	62 07       	cpc	r22, r18
    2bf8:	73 07       	cpc	r23, r19
    2bfa:	84 07       	cpc	r24, r20
    2bfc:	95 07       	cpc	r25, r21
    2bfe:	18 f0       	brcs	.+6      	; 0x2c06 <__addsf3x+0x18>
    2c00:	71 f4       	brne	.+28     	; 0x2c1e <__addsf3x+0x30>
    2c02:	9e f5       	brtc	.+102    	; 0x2c6a <__addsf3x+0x7c>
    2c04:	8f c1       	rjmp	.+798    	; 0x2f24 <__fp_zero>
    2c06:	0e f4       	brtc	.+2      	; 0x2c0a <__addsf3x+0x1c>
    2c08:	e0 95       	com	r30
    2c0a:	0b 2e       	mov	r0, r27
    2c0c:	ba 2f       	mov	r27, r26
    2c0e:	a0 2d       	mov	r26, r0
    2c10:	0b 01       	movw	r0, r22
    2c12:	b9 01       	movw	r22, r18
    2c14:	90 01       	movw	r18, r0
    2c16:	0c 01       	movw	r0, r24
    2c18:	ca 01       	movw	r24, r20
    2c1a:	a0 01       	movw	r20, r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	ff 27       	eor	r31, r31
    2c20:	59 1b       	sub	r21, r25
    2c22:	99 f0       	breq	.+38     	; 0x2c4a <__addsf3x+0x5c>
    2c24:	59 3f       	cpi	r21, 0xF9	; 249
    2c26:	50 f4       	brcc	.+20     	; 0x2c3c <__addsf3x+0x4e>
    2c28:	50 3e       	cpi	r21, 0xE0	; 224
    2c2a:	68 f1       	brcs	.+90     	; 0x2c86 <__addsf3x+0x98>
    2c2c:	1a 16       	cp	r1, r26
    2c2e:	f0 40       	sbci	r31, 0x00	; 0
    2c30:	a2 2f       	mov	r26, r18
    2c32:	23 2f       	mov	r18, r19
    2c34:	34 2f       	mov	r19, r20
    2c36:	44 27       	eor	r20, r20
    2c38:	58 5f       	subi	r21, 0xF8	; 248
    2c3a:	f3 cf       	rjmp	.-26     	; 0x2c22 <__addsf3x+0x34>
    2c3c:	46 95       	lsr	r20
    2c3e:	37 95       	ror	r19
    2c40:	27 95       	ror	r18
    2c42:	a7 95       	ror	r26
    2c44:	f0 40       	sbci	r31, 0x00	; 0
    2c46:	53 95       	inc	r21
    2c48:	c9 f7       	brne	.-14     	; 0x2c3c <__addsf3x+0x4e>
    2c4a:	7e f4       	brtc	.+30     	; 0x2c6a <__addsf3x+0x7c>
    2c4c:	1f 16       	cp	r1, r31
    2c4e:	ba 0b       	sbc	r27, r26
    2c50:	62 0b       	sbc	r22, r18
    2c52:	73 0b       	sbc	r23, r19
    2c54:	84 0b       	sbc	r24, r20
    2c56:	ba f0       	brmi	.+46     	; 0x2c86 <__addsf3x+0x98>
    2c58:	91 50       	subi	r25, 0x01	; 1
    2c5a:	a1 f0       	breq	.+40     	; 0x2c84 <__addsf3x+0x96>
    2c5c:	ff 0f       	add	r31, r31
    2c5e:	bb 1f       	adc	r27, r27
    2c60:	66 1f       	adc	r22, r22
    2c62:	77 1f       	adc	r23, r23
    2c64:	88 1f       	adc	r24, r24
    2c66:	c2 f7       	brpl	.-16     	; 0x2c58 <__addsf3x+0x6a>
    2c68:	0e c0       	rjmp	.+28     	; 0x2c86 <__addsf3x+0x98>
    2c6a:	ba 0f       	add	r27, r26
    2c6c:	62 1f       	adc	r22, r18
    2c6e:	73 1f       	adc	r23, r19
    2c70:	84 1f       	adc	r24, r20
    2c72:	48 f4       	brcc	.+18     	; 0x2c86 <__addsf3x+0x98>
    2c74:	87 95       	ror	r24
    2c76:	77 95       	ror	r23
    2c78:	67 95       	ror	r22
    2c7a:	b7 95       	ror	r27
    2c7c:	f7 95       	ror	r31
    2c7e:	9e 3f       	cpi	r25, 0xFE	; 254
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <__addsf3x+0x96>
    2c82:	b3 cf       	rjmp	.-154    	; 0x2bea <__addsf3+0x1e>
    2c84:	93 95       	inc	r25
    2c86:	88 0f       	add	r24, r24
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <__addsf3x+0x9e>
    2c8a:	99 27       	eor	r25, r25
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	97 95       	ror	r25
    2c90:	87 95       	ror	r24
    2c92:	08 95       	ret

00002c94 <__cmpsf2>:
    2c94:	d9 d0       	rcall	.+434    	; 0x2e48 <__fp_cmp>
    2c96:	08 f4       	brcc	.+2      	; 0x2c9a <__cmpsf2+0x6>
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	08 95       	ret

00002c9c <__divsf3>:
    2c9c:	0c d0       	rcall	.+24     	; 0x2cb6 <__divsf3x>
    2c9e:	0f c1       	rjmp	.+542    	; 0x2ebe <__fp_round>
    2ca0:	07 d1       	rcall	.+526    	; 0x2eb0 <__fp_pscB>
    2ca2:	40 f0       	brcs	.+16     	; 0x2cb4 <__divsf3+0x18>
    2ca4:	fe d0       	rcall	.+508    	; 0x2ea2 <__fp_pscA>
    2ca6:	30 f0       	brcs	.+12     	; 0x2cb4 <__divsf3+0x18>
    2ca8:	21 f4       	brne	.+8      	; 0x2cb2 <__divsf3+0x16>
    2caa:	5f 3f       	cpi	r21, 0xFF	; 255
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <__divsf3+0x18>
    2cae:	f0 c0       	rjmp	.+480    	; 0x2e90 <__fp_inf>
    2cb0:	51 11       	cpse	r21, r1
    2cb2:	39 c1       	rjmp	.+626    	; 0x2f26 <__fp_szero>
    2cb4:	f3 c0       	rjmp	.+486    	; 0x2e9c <__fp_nan>

00002cb6 <__divsf3x>:
    2cb6:	14 d1       	rcall	.+552    	; 0x2ee0 <__fp_split3>
    2cb8:	98 f3       	brcs	.-26     	; 0x2ca0 <__divsf3+0x4>

00002cba <__divsf3_pse>:
    2cba:	99 23       	and	r25, r25
    2cbc:	c9 f3       	breq	.-14     	; 0x2cb0 <__divsf3+0x14>
    2cbe:	55 23       	and	r21, r21
    2cc0:	b1 f3       	breq	.-20     	; 0x2cae <__divsf3+0x12>
    2cc2:	95 1b       	sub	r25, r21
    2cc4:	55 0b       	sbc	r21, r21
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	aa 27       	eor	r26, r26
    2cca:	62 17       	cp	r22, r18
    2ccc:	73 07       	cpc	r23, r19
    2cce:	84 07       	cpc	r24, r20
    2cd0:	38 f0       	brcs	.+14     	; 0x2ce0 <__divsf3_pse+0x26>
    2cd2:	9f 5f       	subi	r25, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	22 0f       	add	r18, r18
    2cd8:	33 1f       	adc	r19, r19
    2cda:	44 1f       	adc	r20, r20
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	a9 f3       	breq	.-22     	; 0x2cca <__divsf3_pse+0x10>
    2ce0:	33 d0       	rcall	.+102    	; 0x2d48 <__divsf3_pse+0x8e>
    2ce2:	0e 2e       	mov	r0, r30
    2ce4:	3a f0       	brmi	.+14     	; 0x2cf4 <__divsf3_pse+0x3a>
    2ce6:	e0 e8       	ldi	r30, 0x80	; 128
    2ce8:	30 d0       	rcall	.+96     	; 0x2d4a <__divsf3_pse+0x90>
    2cea:	91 50       	subi	r25, 0x01	; 1
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	e6 95       	lsr	r30
    2cf0:	00 1c       	adc	r0, r0
    2cf2:	ca f7       	brpl	.-14     	; 0x2ce6 <__divsf3_pse+0x2c>
    2cf4:	29 d0       	rcall	.+82     	; 0x2d48 <__divsf3_pse+0x8e>
    2cf6:	fe 2f       	mov	r31, r30
    2cf8:	27 d0       	rcall	.+78     	; 0x2d48 <__divsf3_pse+0x8e>
    2cfa:	66 0f       	add	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	88 1f       	adc	r24, r24
    2d00:	bb 1f       	adc	r27, r27
    2d02:	26 17       	cp	r18, r22
    2d04:	37 07       	cpc	r19, r23
    2d06:	48 07       	cpc	r20, r24
    2d08:	ab 07       	cpc	r26, r27
    2d0a:	b0 e8       	ldi	r27, 0x80	; 128
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <__divsf3_pse+0x56>
    2d0e:	bb 0b       	sbc	r27, r27
    2d10:	80 2d       	mov	r24, r0
    2d12:	bf 01       	movw	r22, r30
    2d14:	ff 27       	eor	r31, r31
    2d16:	93 58       	subi	r25, 0x83	; 131
    2d18:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1a:	2a f0       	brmi	.+10     	; 0x2d26 <__divsf3_pse+0x6c>
    2d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d1e:	51 05       	cpc	r21, r1
    2d20:	68 f0       	brcs	.+26     	; 0x2d3c <__divsf3_pse+0x82>
    2d22:	b6 c0       	rjmp	.+364    	; 0x2e90 <__fp_inf>
    2d24:	00 c1       	rjmp	.+512    	; 0x2f26 <__fp_szero>
    2d26:	5f 3f       	cpi	r21, 0xFF	; 255
    2d28:	ec f3       	brlt	.-6      	; 0x2d24 <__divsf3_pse+0x6a>
    2d2a:	98 3e       	cpi	r25, 0xE8	; 232
    2d2c:	dc f3       	brlt	.-10     	; 0x2d24 <__divsf3_pse+0x6a>
    2d2e:	86 95       	lsr	r24
    2d30:	77 95       	ror	r23
    2d32:	67 95       	ror	r22
    2d34:	b7 95       	ror	r27
    2d36:	f7 95       	ror	r31
    2d38:	9f 5f       	subi	r25, 0xFF	; 255
    2d3a:	c9 f7       	brne	.-14     	; 0x2d2e <__divsf3_pse+0x74>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	91 1d       	adc	r25, r1
    2d40:	96 95       	lsr	r25
    2d42:	87 95       	ror	r24
    2d44:	97 f9       	bld	r25, 7
    2d46:	08 95       	ret
    2d48:	e1 e0       	ldi	r30, 0x01	; 1
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	bb 1f       	adc	r27, r27
    2d52:	62 17       	cp	r22, r18
    2d54:	73 07       	cpc	r23, r19
    2d56:	84 07       	cpc	r24, r20
    2d58:	ba 07       	cpc	r27, r26
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__divsf3_pse+0xaa>
    2d5c:	62 1b       	sub	r22, r18
    2d5e:	73 0b       	sbc	r23, r19
    2d60:	84 0b       	sbc	r24, r20
    2d62:	ba 0b       	sbc	r27, r26
    2d64:	ee 1f       	adc	r30, r30
    2d66:	88 f7       	brcc	.-30     	; 0x2d4a <__divsf3_pse+0x90>
    2d68:	e0 95       	com	r30
    2d6a:	08 95       	ret

00002d6c <__fixsfsi>:
    2d6c:	04 d0       	rcall	.+8      	; 0x2d76 <__fixunssfsi>
    2d6e:	68 94       	set
    2d70:	b1 11       	cpse	r27, r1
    2d72:	d9 c0       	rjmp	.+434    	; 0x2f26 <__fp_szero>
    2d74:	08 95       	ret

00002d76 <__fixunssfsi>:
    2d76:	bc d0       	rcall	.+376    	; 0x2ef0 <__fp_splitA>
    2d78:	88 f0       	brcs	.+34     	; 0x2d9c <__fixunssfsi+0x26>
    2d7a:	9f 57       	subi	r25, 0x7F	; 127
    2d7c:	90 f0       	brcs	.+36     	; 0x2da2 <__fixunssfsi+0x2c>
    2d7e:	b9 2f       	mov	r27, r25
    2d80:	99 27       	eor	r25, r25
    2d82:	b7 51       	subi	r27, 0x17	; 23
    2d84:	a0 f0       	brcs	.+40     	; 0x2dae <__fixunssfsi+0x38>
    2d86:	d1 f0       	breq	.+52     	; 0x2dbc <__fixunssfsi+0x46>
    2d88:	66 0f       	add	r22, r22
    2d8a:	77 1f       	adc	r23, r23
    2d8c:	88 1f       	adc	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	1a f0       	brmi	.+6      	; 0x2d98 <__fixunssfsi+0x22>
    2d92:	ba 95       	dec	r27
    2d94:	c9 f7       	brne	.-14     	; 0x2d88 <__fixunssfsi+0x12>
    2d96:	12 c0       	rjmp	.+36     	; 0x2dbc <__fixunssfsi+0x46>
    2d98:	b1 30       	cpi	r27, 0x01	; 1
    2d9a:	81 f0       	breq	.+32     	; 0x2dbc <__fixunssfsi+0x46>
    2d9c:	c3 d0       	rcall	.+390    	; 0x2f24 <__fp_zero>
    2d9e:	b1 e0       	ldi	r27, 0x01	; 1
    2da0:	08 95       	ret
    2da2:	c0 c0       	rjmp	.+384    	; 0x2f24 <__fp_zero>
    2da4:	67 2f       	mov	r22, r23
    2da6:	78 2f       	mov	r23, r24
    2da8:	88 27       	eor	r24, r24
    2daa:	b8 5f       	subi	r27, 0xF8	; 248
    2dac:	39 f0       	breq	.+14     	; 0x2dbc <__fixunssfsi+0x46>
    2dae:	b9 3f       	cpi	r27, 0xF9	; 249
    2db0:	cc f3       	brlt	.-14     	; 0x2da4 <__fixunssfsi+0x2e>
    2db2:	86 95       	lsr	r24
    2db4:	77 95       	ror	r23
    2db6:	67 95       	ror	r22
    2db8:	b3 95       	inc	r27
    2dba:	d9 f7       	brne	.-10     	; 0x2db2 <__fixunssfsi+0x3c>
    2dbc:	3e f4       	brtc	.+14     	; 0x2dcc <__fixunssfsi+0x56>
    2dbe:	90 95       	com	r25
    2dc0:	80 95       	com	r24
    2dc2:	70 95       	com	r23
    2dc4:	61 95       	neg	r22
    2dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	08 95       	ret

00002dce <__floatunsisf>:
    2dce:	e8 94       	clt
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <__floatsisf+0x12>

00002dd2 <__floatsisf>:
    2dd2:	97 fb       	bst	r25, 7
    2dd4:	3e f4       	brtc	.+14     	; 0x2de4 <__floatsisf+0x12>
    2dd6:	90 95       	com	r25
    2dd8:	80 95       	com	r24
    2dda:	70 95       	com	r23
    2ddc:	61 95       	neg	r22
    2dde:	7f 4f       	sbci	r23, 0xFF	; 255
    2de0:	8f 4f       	sbci	r24, 0xFF	; 255
    2de2:	9f 4f       	sbci	r25, 0xFF	; 255
    2de4:	99 23       	and	r25, r25
    2de6:	a9 f0       	breq	.+42     	; 0x2e12 <__floatsisf+0x40>
    2de8:	f9 2f       	mov	r31, r25
    2dea:	96 e9       	ldi	r25, 0x96	; 150
    2dec:	bb 27       	eor	r27, r27
    2dee:	93 95       	inc	r25
    2df0:	f6 95       	lsr	r31
    2df2:	87 95       	ror	r24
    2df4:	77 95       	ror	r23
    2df6:	67 95       	ror	r22
    2df8:	b7 95       	ror	r27
    2dfa:	f1 11       	cpse	r31, r1
    2dfc:	f8 cf       	rjmp	.-16     	; 0x2dee <__floatsisf+0x1c>
    2dfe:	fa f4       	brpl	.+62     	; 0x2e3e <__floatsisf+0x6c>
    2e00:	bb 0f       	add	r27, r27
    2e02:	11 f4       	brne	.+4      	; 0x2e08 <__floatsisf+0x36>
    2e04:	60 ff       	sbrs	r22, 0
    2e06:	1b c0       	rjmp	.+54     	; 0x2e3e <__floatsisf+0x6c>
    2e08:	6f 5f       	subi	r22, 0xFF	; 255
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	16 c0       	rjmp	.+44     	; 0x2e3e <__floatsisf+0x6c>
    2e12:	88 23       	and	r24, r24
    2e14:	11 f0       	breq	.+4      	; 0x2e1a <__floatsisf+0x48>
    2e16:	96 e9       	ldi	r25, 0x96	; 150
    2e18:	11 c0       	rjmp	.+34     	; 0x2e3c <__floatsisf+0x6a>
    2e1a:	77 23       	and	r23, r23
    2e1c:	21 f0       	breq	.+8      	; 0x2e26 <__floatsisf+0x54>
    2e1e:	9e e8       	ldi	r25, 0x8E	; 142
    2e20:	87 2f       	mov	r24, r23
    2e22:	76 2f       	mov	r23, r22
    2e24:	05 c0       	rjmp	.+10     	; 0x2e30 <__floatsisf+0x5e>
    2e26:	66 23       	and	r22, r22
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <__floatsisf+0x74>
    2e2a:	96 e8       	ldi	r25, 0x86	; 134
    2e2c:	86 2f       	mov	r24, r22
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	2a f0       	brmi	.+10     	; 0x2e3e <__floatsisf+0x6c>
    2e34:	9a 95       	dec	r25
    2e36:	66 0f       	add	r22, r22
    2e38:	77 1f       	adc	r23, r23
    2e3a:	88 1f       	adc	r24, r24
    2e3c:	da f7       	brpl	.-10     	; 0x2e34 <__floatsisf+0x62>
    2e3e:	88 0f       	add	r24, r24
    2e40:	96 95       	lsr	r25
    2e42:	87 95       	ror	r24
    2e44:	97 f9       	bld	r25, 7
    2e46:	08 95       	ret

00002e48 <__fp_cmp>:
    2e48:	99 0f       	add	r25, r25
    2e4a:	00 08       	sbc	r0, r0
    2e4c:	55 0f       	add	r21, r21
    2e4e:	aa 0b       	sbc	r26, r26
    2e50:	e0 e8       	ldi	r30, 0x80	; 128
    2e52:	fe ef       	ldi	r31, 0xFE	; 254
    2e54:	16 16       	cp	r1, r22
    2e56:	17 06       	cpc	r1, r23
    2e58:	e8 07       	cpc	r30, r24
    2e5a:	f9 07       	cpc	r31, r25
    2e5c:	c0 f0       	brcs	.+48     	; 0x2e8e <__fp_cmp+0x46>
    2e5e:	12 16       	cp	r1, r18
    2e60:	13 06       	cpc	r1, r19
    2e62:	e4 07       	cpc	r30, r20
    2e64:	f5 07       	cpc	r31, r21
    2e66:	98 f0       	brcs	.+38     	; 0x2e8e <__fp_cmp+0x46>
    2e68:	62 1b       	sub	r22, r18
    2e6a:	73 0b       	sbc	r23, r19
    2e6c:	84 0b       	sbc	r24, r20
    2e6e:	95 0b       	sbc	r25, r21
    2e70:	39 f4       	brne	.+14     	; 0x2e80 <__fp_cmp+0x38>
    2e72:	0a 26       	eor	r0, r26
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <__fp_cmp+0x46>
    2e76:	23 2b       	or	r18, r19
    2e78:	24 2b       	or	r18, r20
    2e7a:	25 2b       	or	r18, r21
    2e7c:	21 f4       	brne	.+8      	; 0x2e86 <__fp_cmp+0x3e>
    2e7e:	08 95       	ret
    2e80:	0a 26       	eor	r0, r26
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <__fp_cmp+0x3e>
    2e84:	a1 40       	sbci	r26, 0x01	; 1
    2e86:	a6 95       	lsr	r26
    2e88:	8f ef       	ldi	r24, 0xFF	; 255
    2e8a:	81 1d       	adc	r24, r1
    2e8c:	81 1d       	adc	r24, r1
    2e8e:	08 95       	ret

00002e90 <__fp_inf>:
    2e90:	97 f9       	bld	r25, 7
    2e92:	9f 67       	ori	r25, 0x7F	; 127
    2e94:	80 e8       	ldi	r24, 0x80	; 128
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	08 95       	ret

00002e9c <__fp_nan>:
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	80 ec       	ldi	r24, 0xC0	; 192
    2ea0:	08 95       	ret

00002ea2 <__fp_pscA>:
    2ea2:	00 24       	eor	r0, r0
    2ea4:	0a 94       	dec	r0
    2ea6:	16 16       	cp	r1, r22
    2ea8:	17 06       	cpc	r1, r23
    2eaa:	18 06       	cpc	r1, r24
    2eac:	09 06       	cpc	r0, r25
    2eae:	08 95       	ret

00002eb0 <__fp_pscB>:
    2eb0:	00 24       	eor	r0, r0
    2eb2:	0a 94       	dec	r0
    2eb4:	12 16       	cp	r1, r18
    2eb6:	13 06       	cpc	r1, r19
    2eb8:	14 06       	cpc	r1, r20
    2eba:	05 06       	cpc	r0, r21
    2ebc:	08 95       	ret

00002ebe <__fp_round>:
    2ebe:	09 2e       	mov	r0, r25
    2ec0:	03 94       	inc	r0
    2ec2:	00 0c       	add	r0, r0
    2ec4:	11 f4       	brne	.+4      	; 0x2eca <__fp_round+0xc>
    2ec6:	88 23       	and	r24, r24
    2ec8:	52 f0       	brmi	.+20     	; 0x2ede <__fp_round+0x20>
    2eca:	bb 0f       	add	r27, r27
    2ecc:	40 f4       	brcc	.+16     	; 0x2ede <__fp_round+0x20>
    2ece:	bf 2b       	or	r27, r31
    2ed0:	11 f4       	brne	.+4      	; 0x2ed6 <__fp_round+0x18>
    2ed2:	60 ff       	sbrs	r22, 0
    2ed4:	04 c0       	rjmp	.+8      	; 0x2ede <__fp_round+0x20>
    2ed6:	6f 5f       	subi	r22, 0xFF	; 255
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	8f 4f       	sbci	r24, 0xFF	; 255
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ede:	08 95       	ret

00002ee0 <__fp_split3>:
    2ee0:	57 fd       	sbrc	r21, 7
    2ee2:	90 58       	subi	r25, 0x80	; 128
    2ee4:	44 0f       	add	r20, r20
    2ee6:	55 1f       	adc	r21, r21
    2ee8:	59 f0       	breq	.+22     	; 0x2f00 <__fp_splitA+0x10>
    2eea:	5f 3f       	cpi	r21, 0xFF	; 255
    2eec:	71 f0       	breq	.+28     	; 0x2f0a <__fp_splitA+0x1a>
    2eee:	47 95       	ror	r20

00002ef0 <__fp_splitA>:
    2ef0:	88 0f       	add	r24, r24
    2ef2:	97 fb       	bst	r25, 7
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	61 f0       	breq	.+24     	; 0x2f10 <__fp_splitA+0x20>
    2ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    2efa:	79 f0       	breq	.+30     	; 0x2f1a <__fp_splitA+0x2a>
    2efc:	87 95       	ror	r24
    2efe:	08 95       	ret
    2f00:	12 16       	cp	r1, r18
    2f02:	13 06       	cpc	r1, r19
    2f04:	14 06       	cpc	r1, r20
    2f06:	55 1f       	adc	r21, r21
    2f08:	f2 cf       	rjmp	.-28     	; 0x2eee <__fp_split3+0xe>
    2f0a:	46 95       	lsr	r20
    2f0c:	f1 df       	rcall	.-30     	; 0x2ef0 <__fp_splitA>
    2f0e:	08 c0       	rjmp	.+16     	; 0x2f20 <__fp_splitA+0x30>
    2f10:	16 16       	cp	r1, r22
    2f12:	17 06       	cpc	r1, r23
    2f14:	18 06       	cpc	r1, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	f1 cf       	rjmp	.-30     	; 0x2efc <__fp_splitA+0xc>
    2f1a:	86 95       	lsr	r24
    2f1c:	71 05       	cpc	r23, r1
    2f1e:	61 05       	cpc	r22, r1
    2f20:	08 94       	sec
    2f22:	08 95       	ret

00002f24 <__fp_zero>:
    2f24:	e8 94       	clt

00002f26 <__fp_szero>:
    2f26:	bb 27       	eor	r27, r27
    2f28:	66 27       	eor	r22, r22
    2f2a:	77 27       	eor	r23, r23
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	97 f9       	bld	r25, 7
    2f30:	08 95       	ret

00002f32 <__gesf2>:
    2f32:	8a df       	rcall	.-236    	; 0x2e48 <__fp_cmp>
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <__gesf2+0x6>
    2f36:	8f ef       	ldi	r24, 0xFF	; 255
    2f38:	08 95       	ret

00002f3a <__mulsf3>:
    2f3a:	0b d0       	rcall	.+22     	; 0x2f52 <__mulsf3x>
    2f3c:	c0 cf       	rjmp	.-128    	; 0x2ebe <__fp_round>
    2f3e:	b1 df       	rcall	.-158    	; 0x2ea2 <__fp_pscA>
    2f40:	28 f0       	brcs	.+10     	; 0x2f4c <__mulsf3+0x12>
    2f42:	b6 df       	rcall	.-148    	; 0x2eb0 <__fp_pscB>
    2f44:	18 f0       	brcs	.+6      	; 0x2f4c <__mulsf3+0x12>
    2f46:	95 23       	and	r25, r21
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <__mulsf3+0x12>
    2f4a:	a2 cf       	rjmp	.-188    	; 0x2e90 <__fp_inf>
    2f4c:	a7 cf       	rjmp	.-178    	; 0x2e9c <__fp_nan>
    2f4e:	11 24       	eor	r1, r1
    2f50:	ea cf       	rjmp	.-44     	; 0x2f26 <__fp_szero>

00002f52 <__mulsf3x>:
    2f52:	c6 df       	rcall	.-116    	; 0x2ee0 <__fp_split3>
    2f54:	a0 f3       	brcs	.-24     	; 0x2f3e <__mulsf3+0x4>

00002f56 <__mulsf3_pse>:
    2f56:	95 9f       	mul	r25, r21
    2f58:	d1 f3       	breq	.-12     	; 0x2f4e <__mulsf3+0x14>
    2f5a:	95 0f       	add	r25, r21
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	55 1f       	adc	r21, r21
    2f60:	62 9f       	mul	r22, r18
    2f62:	f0 01       	movw	r30, r0
    2f64:	72 9f       	mul	r23, r18
    2f66:	bb 27       	eor	r27, r27
    2f68:	f0 0d       	add	r31, r0
    2f6a:	b1 1d       	adc	r27, r1
    2f6c:	63 9f       	mul	r22, r19
    2f6e:	aa 27       	eor	r26, r26
    2f70:	f0 0d       	add	r31, r0
    2f72:	b1 1d       	adc	r27, r1
    2f74:	aa 1f       	adc	r26, r26
    2f76:	64 9f       	mul	r22, r20
    2f78:	66 27       	eor	r22, r22
    2f7a:	b0 0d       	add	r27, r0
    2f7c:	a1 1d       	adc	r26, r1
    2f7e:	66 1f       	adc	r22, r22
    2f80:	82 9f       	mul	r24, r18
    2f82:	22 27       	eor	r18, r18
    2f84:	b0 0d       	add	r27, r0
    2f86:	a1 1d       	adc	r26, r1
    2f88:	62 1f       	adc	r22, r18
    2f8a:	73 9f       	mul	r23, r19
    2f8c:	b0 0d       	add	r27, r0
    2f8e:	a1 1d       	adc	r26, r1
    2f90:	62 1f       	adc	r22, r18
    2f92:	83 9f       	mul	r24, r19
    2f94:	a0 0d       	add	r26, r0
    2f96:	61 1d       	adc	r22, r1
    2f98:	22 1f       	adc	r18, r18
    2f9a:	74 9f       	mul	r23, r20
    2f9c:	33 27       	eor	r19, r19
    2f9e:	a0 0d       	add	r26, r0
    2fa0:	61 1d       	adc	r22, r1
    2fa2:	23 1f       	adc	r18, r19
    2fa4:	84 9f       	mul	r24, r20
    2fa6:	60 0d       	add	r22, r0
    2fa8:	21 1d       	adc	r18, r1
    2faa:	82 2f       	mov	r24, r18
    2fac:	76 2f       	mov	r23, r22
    2fae:	6a 2f       	mov	r22, r26
    2fb0:	11 24       	eor	r1, r1
    2fb2:	9f 57       	subi	r25, 0x7F	; 127
    2fb4:	50 40       	sbci	r21, 0x00	; 0
    2fb6:	8a f0       	brmi	.+34     	; 0x2fda <__mulsf3_pse+0x84>
    2fb8:	e1 f0       	breq	.+56     	; 0x2ff2 <__mulsf3_pse+0x9c>
    2fba:	88 23       	and	r24, r24
    2fbc:	4a f0       	brmi	.+18     	; 0x2fd0 <__mulsf3_pse+0x7a>
    2fbe:	ee 0f       	add	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	bb 1f       	adc	r27, r27
    2fc4:	66 1f       	adc	r22, r22
    2fc6:	77 1f       	adc	r23, r23
    2fc8:	88 1f       	adc	r24, r24
    2fca:	91 50       	subi	r25, 0x01	; 1
    2fcc:	50 40       	sbci	r21, 0x00	; 0
    2fce:	a9 f7       	brne	.-22     	; 0x2fba <__mulsf3_pse+0x64>
    2fd0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fd2:	51 05       	cpc	r21, r1
    2fd4:	70 f0       	brcs	.+28     	; 0x2ff2 <__mulsf3_pse+0x9c>
    2fd6:	5c cf       	rjmp	.-328    	; 0x2e90 <__fp_inf>
    2fd8:	a6 cf       	rjmp	.-180    	; 0x2f26 <__fp_szero>
    2fda:	5f 3f       	cpi	r21, 0xFF	; 255
    2fdc:	ec f3       	brlt	.-6      	; 0x2fd8 <__mulsf3_pse+0x82>
    2fde:	98 3e       	cpi	r25, 0xE8	; 232
    2fe0:	dc f3       	brlt	.-10     	; 0x2fd8 <__mulsf3_pse+0x82>
    2fe2:	86 95       	lsr	r24
    2fe4:	77 95       	ror	r23
    2fe6:	67 95       	ror	r22
    2fe8:	b7 95       	ror	r27
    2fea:	f7 95       	ror	r31
    2fec:	e7 95       	ror	r30
    2fee:	9f 5f       	subi	r25, 0xFF	; 255
    2ff0:	c1 f7       	brne	.-16     	; 0x2fe2 <__mulsf3_pse+0x8c>
    2ff2:	fe 2b       	or	r31, r30
    2ff4:	88 0f       	add	r24, r24
    2ff6:	91 1d       	adc	r25, r1
    2ff8:	96 95       	lsr	r25
    2ffa:	87 95       	ror	r24
    2ffc:	97 f9       	bld	r25, 7
    2ffe:	08 95       	ret

00003000 <calloc>:
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	68 9f       	mul	r22, r24
    300a:	80 01       	movw	r16, r0
    300c:	69 9f       	mul	r22, r25
    300e:	10 0d       	add	r17, r0
    3010:	78 9f       	mul	r23, r24
    3012:	10 0d       	add	r17, r0
    3014:	11 24       	eor	r1, r1
    3016:	c8 01       	movw	r24, r16
    3018:	0d d0       	rcall	.+26     	; 0x3034 <malloc>
    301a:	ec 01       	movw	r28, r24
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	21 f0       	breq	.+8      	; 0x3028 <calloc+0x28>
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	a8 01       	movw	r20, r16
    3026:	0b d1       	rcall	.+534    	; 0x323e <memset>
    3028:	ce 01       	movw	r24, r28
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	08 95       	ret

00003034 <malloc>:
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	bc 01       	movw	r22, r24
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	91 05       	cpc	r25, r1
    303e:	10 f4       	brcc	.+4      	; 0x3044 <malloc+0x10>
    3040:	62 e0       	ldi	r22, 0x02	; 2
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	a0 91 5c 04 	lds	r26, 0x045C
    3048:	b0 91 5d 04 	lds	r27, 0x045D
    304c:	ed 01       	movw	r28, r26
    304e:	e0 e0       	ldi	r30, 0x00	; 0
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	21 c0       	rjmp	.+66     	; 0x309a <malloc+0x66>
    3058:	88 81       	ld	r24, Y
    305a:	99 81       	ldd	r25, Y+1	; 0x01
    305c:	86 17       	cp	r24, r22
    305e:	97 07       	cpc	r25, r23
    3060:	69 f4       	brne	.+26     	; 0x307c <malloc+0x48>
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	9b 81       	ldd	r25, Y+3	; 0x03
    3066:	30 97       	sbiw	r30, 0x00	; 0
    3068:	19 f0       	breq	.+6      	; 0x3070 <malloc+0x3c>
    306a:	93 83       	std	Z+3, r25	; 0x03
    306c:	82 83       	std	Z+2, r24	; 0x02
    306e:	04 c0       	rjmp	.+8      	; 0x3078 <malloc+0x44>
    3070:	90 93 5d 04 	sts	0x045D, r25
    3074:	80 93 5c 04 	sts	0x045C, r24
    3078:	fe 01       	movw	r30, r28
    307a:	34 c0       	rjmp	.+104    	; 0x30e4 <malloc+0xb0>
    307c:	68 17       	cp	r22, r24
    307e:	79 07       	cpc	r23, r25
    3080:	38 f4       	brcc	.+14     	; 0x3090 <malloc+0x5c>
    3082:	41 15       	cp	r20, r1
    3084:	51 05       	cpc	r21, r1
    3086:	19 f0       	breq	.+6      	; 0x308e <malloc+0x5a>
    3088:	84 17       	cp	r24, r20
    308a:	95 07       	cpc	r25, r21
    308c:	08 f4       	brcc	.+2      	; 0x3090 <malloc+0x5c>
    308e:	ac 01       	movw	r20, r24
    3090:	fe 01       	movw	r30, r28
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	9c 01       	movw	r18, r24
    3098:	e9 01       	movw	r28, r18
    309a:	20 97       	sbiw	r28, 0x00	; 0
    309c:	e9 f6       	brne	.-70     	; 0x3058 <malloc+0x24>
    309e:	41 15       	cp	r20, r1
    30a0:	51 05       	cpc	r21, r1
    30a2:	a9 f1       	breq	.+106    	; 0x310e <malloc+0xda>
    30a4:	ca 01       	movw	r24, r20
    30a6:	86 1b       	sub	r24, r22
    30a8:	97 0b       	sbc	r25, r23
    30aa:	04 97       	sbiw	r24, 0x04	; 4
    30ac:	08 f4       	brcc	.+2      	; 0x30b0 <malloc+0x7c>
    30ae:	ba 01       	movw	r22, r20
    30b0:	e0 e0       	ldi	r30, 0x00	; 0
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	2a c0       	rjmp	.+84     	; 0x310a <malloc+0xd6>
    30b6:	8d 91       	ld	r24, X+
    30b8:	9c 91       	ld	r25, X
    30ba:	11 97       	sbiw	r26, 0x01	; 1
    30bc:	84 17       	cp	r24, r20
    30be:	95 07       	cpc	r25, r21
    30c0:	f9 f4       	brne	.+62     	; 0x3100 <malloc+0xcc>
    30c2:	64 17       	cp	r22, r20
    30c4:	75 07       	cpc	r23, r21
    30c6:	81 f4       	brne	.+32     	; 0x30e8 <malloc+0xb4>
    30c8:	12 96       	adiw	r26, 0x02	; 2
    30ca:	8d 91       	ld	r24, X+
    30cc:	9c 91       	ld	r25, X
    30ce:	13 97       	sbiw	r26, 0x03	; 3
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	19 f0       	breq	.+6      	; 0x30da <malloc+0xa6>
    30d4:	93 83       	std	Z+3, r25	; 0x03
    30d6:	82 83       	std	Z+2, r24	; 0x02
    30d8:	04 c0       	rjmp	.+8      	; 0x30e2 <malloc+0xae>
    30da:	90 93 5d 04 	sts	0x045D, r25
    30de:	80 93 5c 04 	sts	0x045C, r24
    30e2:	fd 01       	movw	r30, r26
    30e4:	32 96       	adiw	r30, 0x02	; 2
    30e6:	4f c0       	rjmp	.+158    	; 0x3186 <malloc+0x152>
    30e8:	ca 01       	movw	r24, r20
    30ea:	86 1b       	sub	r24, r22
    30ec:	97 0b       	sbc	r25, r23
    30ee:	fd 01       	movw	r30, r26
    30f0:	e8 0f       	add	r30, r24
    30f2:	f9 1f       	adc	r31, r25
    30f4:	61 93       	st	Z+, r22
    30f6:	71 93       	st	Z+, r23
    30f8:	02 97       	sbiw	r24, 0x02	; 2
    30fa:	8d 93       	st	X+, r24
    30fc:	9c 93       	st	X, r25
    30fe:	43 c0       	rjmp	.+134    	; 0x3186 <malloc+0x152>
    3100:	fd 01       	movw	r30, r26
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	9c 01       	movw	r18, r24
    3108:	d9 01       	movw	r26, r18
    310a:	10 97       	sbiw	r26, 0x00	; 0
    310c:	a1 f6       	brne	.-88     	; 0x30b6 <malloc+0x82>
    310e:	80 91 5a 04 	lds	r24, 0x045A
    3112:	90 91 5b 04 	lds	r25, 0x045B
    3116:	89 2b       	or	r24, r25
    3118:	41 f4       	brne	.+16     	; 0x312a <malloc+0xf6>
    311a:	80 91 02 01 	lds	r24, 0x0102
    311e:	90 91 03 01 	lds	r25, 0x0103
    3122:	90 93 5b 04 	sts	0x045B, r25
    3126:	80 93 5a 04 	sts	0x045A, r24
    312a:	40 91 04 01 	lds	r20, 0x0104
    312e:	50 91 05 01 	lds	r21, 0x0105
    3132:	41 15       	cp	r20, r1
    3134:	51 05       	cpc	r21, r1
    3136:	41 f4       	brne	.+16     	; 0x3148 <malloc+0x114>
    3138:	4d b7       	in	r20, 0x3d	; 61
    313a:	5e b7       	in	r21, 0x3e	; 62
    313c:	80 91 00 01 	lds	r24, 0x0100
    3140:	90 91 01 01 	lds	r25, 0x0101
    3144:	48 1b       	sub	r20, r24
    3146:	59 0b       	sbc	r21, r25
    3148:	20 91 5a 04 	lds	r18, 0x045A
    314c:	30 91 5b 04 	lds	r19, 0x045B
    3150:	24 17       	cp	r18, r20
    3152:	35 07       	cpc	r19, r21
    3154:	b0 f4       	brcc	.+44     	; 0x3182 <malloc+0x14e>
    3156:	ca 01       	movw	r24, r20
    3158:	82 1b       	sub	r24, r18
    315a:	93 0b       	sbc	r25, r19
    315c:	86 17       	cp	r24, r22
    315e:	97 07       	cpc	r25, r23
    3160:	80 f0       	brcs	.+32     	; 0x3182 <malloc+0x14e>
    3162:	ab 01       	movw	r20, r22
    3164:	4e 5f       	subi	r20, 0xFE	; 254
    3166:	5f 4f       	sbci	r21, 0xFF	; 255
    3168:	84 17       	cp	r24, r20
    316a:	95 07       	cpc	r25, r21
    316c:	50 f0       	brcs	.+20     	; 0x3182 <malloc+0x14e>
    316e:	42 0f       	add	r20, r18
    3170:	53 1f       	adc	r21, r19
    3172:	50 93 5b 04 	sts	0x045B, r21
    3176:	40 93 5a 04 	sts	0x045A, r20
    317a:	f9 01       	movw	r30, r18
    317c:	61 93       	st	Z+, r22
    317e:	71 93       	st	Z+, r23
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <malloc+0x152>
    3182:	e0 e0       	ldi	r30, 0x00	; 0
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	cf 01       	movw	r24, r30
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	08 95       	ret

0000318e <free>:
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	09 f4       	brne	.+2      	; 0x3198 <free+0xa>
    3196:	50 c0       	rjmp	.+160    	; 0x3238 <free+0xaa>
    3198:	ec 01       	movw	r28, r24
    319a:	22 97       	sbiw	r28, 0x02	; 2
    319c:	1b 82       	std	Y+3, r1	; 0x03
    319e:	1a 82       	std	Y+2, r1	; 0x02
    31a0:	a0 91 5c 04 	lds	r26, 0x045C
    31a4:	b0 91 5d 04 	lds	r27, 0x045D
    31a8:	10 97       	sbiw	r26, 0x00	; 0
    31aa:	09 f1       	breq	.+66     	; 0x31ee <free+0x60>
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	ac 17       	cp	r26, r28
    31b2:	bd 07       	cpc	r27, r29
    31b4:	08 f1       	brcs	.+66     	; 0x31f8 <free+0x6a>
    31b6:	bb 83       	std	Y+3, r27	; 0x03
    31b8:	aa 83       	std	Y+2, r26	; 0x02
    31ba:	fe 01       	movw	r30, r28
    31bc:	21 91       	ld	r18, Z+
    31be:	31 91       	ld	r19, Z+
    31c0:	e2 0f       	add	r30, r18
    31c2:	f3 1f       	adc	r31, r19
    31c4:	ae 17       	cp	r26, r30
    31c6:	bf 07       	cpc	r27, r31
    31c8:	79 f4       	brne	.+30     	; 0x31e8 <free+0x5a>
    31ca:	8d 91       	ld	r24, X+
    31cc:	9c 91       	ld	r25, X
    31ce:	11 97       	sbiw	r26, 0x01	; 1
    31d0:	28 0f       	add	r18, r24
    31d2:	39 1f       	adc	r19, r25
    31d4:	2e 5f       	subi	r18, 0xFE	; 254
    31d6:	3f 4f       	sbci	r19, 0xFF	; 255
    31d8:	39 83       	std	Y+1, r19	; 0x01
    31da:	28 83       	st	Y, r18
    31dc:	12 96       	adiw	r26, 0x02	; 2
    31de:	8d 91       	ld	r24, X+
    31e0:	9c 91       	ld	r25, X
    31e2:	13 97       	sbiw	r26, 0x03	; 3
    31e4:	9b 83       	std	Y+3, r25	; 0x03
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	41 15       	cp	r20, r1
    31ea:	51 05       	cpc	r21, r1
    31ec:	71 f4       	brne	.+28     	; 0x320a <free+0x7c>
    31ee:	d0 93 5d 04 	sts	0x045D, r29
    31f2:	c0 93 5c 04 	sts	0x045C, r28
    31f6:	20 c0       	rjmp	.+64     	; 0x3238 <free+0xaa>
    31f8:	12 96       	adiw	r26, 0x02	; 2
    31fa:	8d 91       	ld	r24, X+
    31fc:	9c 91       	ld	r25, X
    31fe:	13 97       	sbiw	r26, 0x03	; 3
    3200:	ad 01       	movw	r20, r26
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	11 f0       	breq	.+4      	; 0x320a <free+0x7c>
    3206:	dc 01       	movw	r26, r24
    3208:	d3 cf       	rjmp	.-90     	; 0x31b0 <free+0x22>
    320a:	fa 01       	movw	r30, r20
    320c:	d3 83       	std	Z+3, r29	; 0x03
    320e:	c2 83       	std	Z+2, r28	; 0x02
    3210:	21 91       	ld	r18, Z+
    3212:	31 91       	ld	r19, Z+
    3214:	e2 0f       	add	r30, r18
    3216:	f3 1f       	adc	r31, r19
    3218:	ce 17       	cp	r28, r30
    321a:	df 07       	cpc	r29, r31
    321c:	69 f4       	brne	.+26     	; 0x3238 <free+0xaa>
    321e:	88 81       	ld	r24, Y
    3220:	99 81       	ldd	r25, Y+1	; 0x01
    3222:	28 0f       	add	r18, r24
    3224:	39 1f       	adc	r19, r25
    3226:	2e 5f       	subi	r18, 0xFE	; 254
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	fa 01       	movw	r30, r20
    322c:	31 83       	std	Z+1, r19	; 0x01
    322e:	20 83       	st	Z, r18
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	9b 81       	ldd	r25, Y+3	; 0x03
    3234:	93 83       	std	Z+3, r25	; 0x03
    3236:	82 83       	std	Z+2, r24	; 0x02
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	08 95       	ret

0000323e <memset>:
    323e:	dc 01       	movw	r26, r24
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <memset+0x6>
    3242:	6d 93       	st	X+, r22
    3244:	41 50       	subi	r20, 0x01	; 1
    3246:	50 40       	sbci	r21, 0x00	; 0
    3248:	e0 f7       	brcc	.-8      	; 0x3242 <memset+0x4>
    324a:	08 95       	ret

0000324c <_exit>:
    324c:	f8 94       	cli

0000324e <__stop_program>:
    324e:	ff cf       	rjmp	.-2      	; 0x324e <__stop_program>
