
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002b96  00002c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800112  00800112  00002c3c  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008ae  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002356  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b01  00000000  00000000  00005ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028c5  00000000  00000000  000066a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a0  00000000  00000000  00008f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6f  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000318  00000000  00000000  0000a077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
	return camera_state;
	*/
}
static int green_camera()
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
{
	servo_set_left_grabber_position(10);
	servo_set_right_grabber_position(70);
}
void servo_set_grabbers_down(void)
{
       2:	00 00       	nop
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       6:	00 00       	nop
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
{
    timer_callback = callback;
}

static int combination_check()
{
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c7       	rjmp	.+3676   	; 0xea6 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e9       	ldi	r30, 0x96	; 150
      a8:	fb e2       	ldi	r31, 0x2B	; 43
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a2 e1       	ldi	r26, 0x12	; 18
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 35       	cpi	r26, 0x5A	; 90
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	8c d1       	rcall	.+792    	; 0x3e4 <main>
      cc:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <purple_camera>:
#include "actuators.h"

int camera_state = 0;

static int purple_camera()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ac 97       	sbiw	r28, 0x2c	; 44
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	//put coordinations XD
	odometry_move_straight(150,50,NULL);					//ide napred zbog velikog
      e6:	86 e9       	ldi	r24, 0x96	; 150
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	62 e3       	ldi	r22, 0x32	; 50
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <odometry_move_straight>
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	aa e7       	ldi	r26, 0x7A	; 122
      fa:	b4 e4       	ldi	r27, 0x44	; 68
      fc:	8f a3       	std	Y+39, r24	; 0x27
      fe:	98 a7       	std	Y+40, r25	; 0x28
     100:	a9 a7       	std	Y+41, r26	; 0x29
     102:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     104:	6f a1       	ldd	r22, Y+39	; 0x27
     106:	78 a5       	ldd	r23, Y+40	; 0x28
     108:	89 a5       	ldd	r24, Y+41	; 0x29
     10a:	9a a5       	ldd	r25, Y+42	; 0x2a
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e4       	ldi	r19, 0x40	; 64
     110:	4c e1       	ldi	r20, 0x1C	; 28
     112:	55 e4       	ldi	r21, 0x45	; 69
     114:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     118:	dc 01       	movw	r26, r24
     11a:	cb 01       	movw	r24, r22
     11c:	8b a3       	std	Y+35, r24	; 0x23
     11e:	9c a3       	std	Y+36, r25	; 0x24
     120:	ad a3       	std	Y+37, r26	; 0x25
     122:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     124:	6b a1       	ldd	r22, Y+35	; 0x23
     126:	7c a1       	ldd	r23, Y+36	; 0x24
     128:	8d a1       	ldd	r24, Y+37	; 0x25
     12a:	9e a1       	ldd	r25, Y+38	; 0x26
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e8       	ldi	r20, 0x80	; 128
     132:	5f e3       	ldi	r21, 0x3F	; 63
     134:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     138:	88 23       	and	r24, r24
     13a:	2c f4       	brge	.+10     	; 0x146 <purple_camera+0x74>
		__ticks = 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	9a a3       	std	Y+34, r25	; 0x22
     142:	89 a3       	std	Y+33, r24	; 0x21
     144:	3f c0       	rjmp	.+126    	; 0x1c4 <purple_camera+0xf2>
	else if (__tmp > 65535)
     146:	6b a1       	ldd	r22, Y+35	; 0x23
     148:	7c a1       	ldd	r23, Y+36	; 0x24
     14a:	8d a1       	ldd	r24, Y+37	; 0x25
     14c:	9e a1       	ldd	r25, Y+38	; 0x26
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	3f ef       	ldi	r19, 0xFF	; 255
     152:	4f e7       	ldi	r20, 0x7F	; 127
     154:	57 e4       	ldi	r21, 0x47	; 71
     156:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     15a:	18 16       	cp	r1, r24
     15c:	4c f5       	brge	.+82     	; 0x1b0 <purple_camera+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15e:	6f a1       	ldd	r22, Y+39	; 0x27
     160:	78 a5       	ldd	r23, Y+40	; 0x28
     162:	89 a5       	ldd	r24, Y+41	; 0x29
     164:	9a a5       	ldd	r25, Y+42	; 0x2a
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e2       	ldi	r20, 0x20	; 32
     16c:	51 e4       	ldi	r21, 0x41	; 65
     16e:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	bc 01       	movw	r22, r24
     178:	cd 01       	movw	r24, r26
     17a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	9a a3       	std	Y+34, r25	; 0x22
     184:	89 a3       	std	Y+33, r24	; 0x21
     186:	0f c0       	rjmp	.+30     	; 0x1a6 <purple_camera+0xd4>
     188:	8a ef       	ldi	r24, 0xFA	; 250
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	98 a3       	std	Y+32, r25	; 0x20
     18e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     190:	8f 8d       	ldd	r24, Y+31	; 0x1f
     192:	98 a1       	ldd	r25, Y+32	; 0x20
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <purple_camera+0xc2>
     198:	98 a3       	std	Y+32, r25	; 0x20
     19a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19c:	89 a1       	ldd	r24, Y+33	; 0x21
     19e:	9a a1       	ldd	r25, Y+34	; 0x22
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	9a a3       	std	Y+34, r25	; 0x22
     1a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a6:	89 a1       	ldd	r24, Y+33	; 0x21
     1a8:	9a a1       	ldd	r25, Y+34	; 0x22
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	69 f7       	brne	.-38     	; 0x188 <purple_camera+0xb6>
     1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <purple_camera+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b0:	6b a1       	ldd	r22, Y+35	; 0x23
     1b2:	7c a1       	ldd	r23, Y+36	; 0x24
     1b4:	8d a1       	ldd	r24, Y+37	; 0x25
     1b6:	9e a1       	ldd	r25, Y+38	; 0x26
     1b8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	9a a3       	std	Y+34, r25	; 0x22
     1c2:	89 a3       	std	Y+33, r24	; 0x21
     1c4:	89 a1       	ldd	r24, Y+33	; 0x21
     1c6:	9a a1       	ldd	r25, Y+34	; 0x22
     1c8:	9e 8f       	std	Y+30, r25	; 0x1e
     1ca:	8d 8f       	std	Y+29, r24	; 0x1d
     1cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     1ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <purple_camera+0xfe>
     1d4:	9e 8f       	std	Y+30, r25	; 0x1e
     1d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	PORTG = 0xff;
     1d8:	e4 e3       	ldi	r30, 0x34	; 52
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	80 83       	st	Z, r24
	odometry_move_straight(-200,LOW_SPEED,NULL);			//vraca se nazad
     1e0:	88 e3       	ldi	r24, 0x38	; 56
     1e2:	9f ef       	ldi	r25, 0xFF	; 255
     1e4:	6e e1       	ldi	r22, 0x1E	; 30
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <odometry_move_straight>
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	aa ef       	ldi	r26, 0xFA	; 250
     1f4:	b3 e4       	ldi	r27, 0x43	; 67
     1f6:	89 8f       	std	Y+25, r24	; 0x19
     1f8:	9a 8f       	std	Y+26, r25	; 0x1a
     1fa:	ab 8f       	std	Y+27, r26	; 0x1b
     1fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1fe:	69 8d       	ldd	r22, Y+25	; 0x19
     200:	7a 8d       	ldd	r23, Y+26	; 0x1a
     202:	8b 8d       	ldd	r24, Y+27	; 0x1b
     204:	9c 8d       	ldd	r25, Y+28	; 0x1c
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e4       	ldi	r19, 0x40	; 64
     20a:	4c e1       	ldi	r20, 0x1C	; 28
     20c:	55 e4       	ldi	r21, 0x45	; 69
     20e:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
     216:	8d 8b       	std	Y+21, r24	; 0x15
     218:	9e 8b       	std	Y+22, r25	; 0x16
     21a:	af 8b       	std	Y+23, r26	; 0x17
     21c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     21e:	6d 89       	ldd	r22, Y+21	; 0x15
     220:	7e 89       	ldd	r23, Y+22	; 0x16
     222:	8f 89       	ldd	r24, Y+23	; 0x17
     224:	98 8d       	ldd	r25, Y+24	; 0x18
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e8       	ldi	r20, 0x80	; 128
     22c:	5f e3       	ldi	r21, 0x3F	; 63
     22e:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     232:	88 23       	and	r24, r24
     234:	2c f4       	brge	.+10     	; 0x240 <purple_camera+0x16e>
		__ticks = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	9c 8b       	std	Y+20, r25	; 0x14
     23c:	8b 8b       	std	Y+19, r24	; 0x13
     23e:	3f c0       	rjmp	.+126    	; 0x2be <purple_camera+0x1ec>
	else if (__tmp > 65535)
     240:	6d 89       	ldd	r22, Y+21	; 0x15
     242:	7e 89       	ldd	r23, Y+22	; 0x16
     244:	8f 89       	ldd	r24, Y+23	; 0x17
     246:	98 8d       	ldd	r25, Y+24	; 0x18
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	3f ef       	ldi	r19, 0xFF	; 255
     24c:	4f e7       	ldi	r20, 0x7F	; 127
     24e:	57 e4       	ldi	r21, 0x47	; 71
     250:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     254:	18 16       	cp	r1, r24
     256:	4c f5       	brge	.+82     	; 0x2aa <purple_camera+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	69 8d       	ldd	r22, Y+25	; 0x19
     25a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     25c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     25e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e2       	ldi	r20, 0x20	; 32
     266:	51 e4       	ldi	r21, 0x41	; 65
     268:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	bc 01       	movw	r22, r24
     272:	cd 01       	movw	r24, r26
     274:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	9c 8b       	std	Y+20, r25	; 0x14
     27e:	8b 8b       	std	Y+19, r24	; 0x13
     280:	0f c0       	rjmp	.+30     	; 0x2a0 <purple_camera+0x1ce>
     282:	8a ef       	ldi	r24, 0xFA	; 250
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	9a 8b       	std	Y+18, r25	; 0x12
     288:	89 8b       	std	Y+17, r24	; 0x11
     28a:	89 89       	ldd	r24, Y+17	; 0x11
     28c:	9a 89       	ldd	r25, Y+18	; 0x12
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <purple_camera+0x1bc>
     292:	9a 8b       	std	Y+18, r25	; 0x12
     294:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	8b 89       	ldd	r24, Y+19	; 0x13
     298:	9c 89       	ldd	r25, Y+20	; 0x14
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	9c 8b       	std	Y+20, r25	; 0x14
     29e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a0:	8b 89       	ldd	r24, Y+19	; 0x13
     2a2:	9c 89       	ldd	r25, Y+20	; 0x14
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	69 f7       	brne	.-38     	; 0x282 <purple_camera+0x1b0>
     2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <purple_camera+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2aa:	6d 89       	ldd	r22, Y+21	; 0x15
     2ac:	7e 89       	ldd	r23, Y+22	; 0x16
     2ae:	8f 89       	ldd	r24, Y+23	; 0x17
     2b0:	98 8d       	ldd	r25, Y+24	; 0x18
     2b2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	9c 8b       	std	Y+20, r25	; 0x14
     2bc:	8b 8b       	std	Y+19, r24	; 0x13
     2be:	8b 89       	ldd	r24, Y+19	; 0x13
     2c0:	9c 89       	ldd	r25, Y+20	; 0x14
     2c2:	98 8b       	std	Y+16, r25	; 0x10
     2c4:	8f 87       	std	Y+15, r24	; 0x0f
     2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c8:	98 89       	ldd	r25, Y+16	; 0x10
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <purple_camera+0x1f8>
     2ce:	98 8b       	std	Y+16, r25	; 0x10
     2d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	odometry_rotate(90,LOW_SPEED,NULL);						//rotira se za kocke
     2d2:	8a e5       	ldi	r24, 0x5A	; 90
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	6e e1       	ldi	r22, 0x1E	; 30
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <odometry_rotate>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	aa e7       	ldi	r26, 0x7A	; 122
     2e6:	b4 e4       	ldi	r27, 0x44	; 68
     2e8:	8b 87       	std	Y+11, r24	; 0x0b
     2ea:	9c 87       	std	Y+12, r25	; 0x0c
     2ec:	ad 87       	std	Y+13, r26	; 0x0d
     2ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2f2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e4       	ldi	r19, 0x40	; 64
     2fc:	4c e1       	ldi	r20, 0x1C	; 28
     2fe:	55 e4       	ldi	r21, 0x45	; 69
     300:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	8f 83       	std	Y+7, r24	; 0x07
     30a:	98 87       	std	Y+8, r25	; 0x08
     30c:	a9 87       	std	Y+9, r26	; 0x09
     30e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     310:	6f 81       	ldd	r22, Y+7	; 0x07
     312:	78 85       	ldd	r23, Y+8	; 0x08
     314:	89 85       	ldd	r24, Y+9	; 0x09
     316:	9a 85       	ldd	r25, Y+10	; 0x0a
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e8       	ldi	r20, 0x80	; 128
     31e:	5f e3       	ldi	r21, 0x3F	; 63
     320:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     324:	88 23       	and	r24, r24
     326:	2c f4       	brge	.+10     	; 0x332 <purple_camera+0x260>
		__ticks = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9e 83       	std	Y+6, r25	; 0x06
     32e:	8d 83       	std	Y+5, r24	; 0x05
     330:	3f c0       	rjmp	.+126    	; 0x3b0 <purple_camera+0x2de>
	else if (__tmp > 65535)
     332:	6f 81       	ldd	r22, Y+7	; 0x07
     334:	78 85       	ldd	r23, Y+8	; 0x08
     336:	89 85       	ldd	r24, Y+9	; 0x09
     338:	9a 85       	ldd	r25, Y+10	; 0x0a
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	3f ef       	ldi	r19, 0xFF	; 255
     33e:	4f e7       	ldi	r20, 0x7F	; 127
     340:	57 e4       	ldi	r21, 0x47	; 71
     342:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     346:	18 16       	cp	r1, r24
     348:	4c f5       	brge	.+82     	; 0x39c <purple_camera+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     34a:	6b 85       	ldd	r22, Y+11	; 0x0b
     34c:	7c 85       	ldd	r23, Y+12	; 0x0c
     34e:	8d 85       	ldd	r24, Y+13	; 0x0d
     350:	9e 85       	ldd	r25, Y+14	; 0x0e
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e2       	ldi	r20, 0x20	; 32
     358:	51 e4       	ldi	r21, 0x41	; 65
     35a:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
     36e:	9e 83       	std	Y+6, r25	; 0x06
     370:	8d 83       	std	Y+5, r24	; 0x05
     372:	0f c0       	rjmp	.+30     	; 0x392 <purple_camera+0x2c0>
     374:	8a ef       	ldi	r24, 0xFA	; 250
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9c 83       	std	Y+4, r25	; 0x04
     37a:	8b 83       	std	Y+3, r24	; 0x03
     37c:	8b 81       	ldd	r24, Y+3	; 0x03
     37e:	9c 81       	ldd	r25, Y+4	; 0x04
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <purple_camera+0x2ae>
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	9e 81       	ldd	r25, Y+6	; 0x06
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	9e 83       	std	Y+6, r25	; 0x06
     390:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     392:	8d 81       	ldd	r24, Y+5	; 0x05
     394:	9e 81       	ldd	r25, Y+6	; 0x06
     396:	00 97       	sbiw	r24, 0x00	; 0
     398:	69 f7       	brne	.-38     	; 0x374 <purple_camera+0x2a2>
     39a:	14 c0       	rjmp	.+40     	; 0x3c4 <purple_camera+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     39c:	6f 81       	ldd	r22, Y+7	; 0x07
     39e:	78 85       	ldd	r23, Y+8	; 0x08
     3a0:	89 85       	ldd	r24, Y+9	; 0x09
     3a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	9e 83       	std	Y+6, r25	; 0x06
     3ae:	8d 83       	std	Y+5, r24	; 0x05
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <purple_camera+0x2ea>
     3c0:	9a 83       	std	Y+2, r25	; 0x02
     3c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	odometry_move_straight(1000,LOW_SPEED,NULL);			//gura kocke
     3c4:	88 ee       	ldi	r24, 0xE8	; 232
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	6e e1       	ldi	r22, 0x1E	; 30
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <odometry_move_straight>
	{
		camera_state = camera();		
	}
	return camera_state;
	*/
}
     3d2:	ac 96       	adiw	r28, 0x2c	; 44
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	cf 91       	pop	r28
     3e0:	df 91       	pop	r29
     3e2:	08 95       	ret

000003e4 <main>:
	PORTG = 0x00;
	_delay_ms(1000);
	PORTG = 0xff;
}
int main()
{
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	2e 97       	sbiw	r28, 0x0e	; 14
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61

	system_init();
     3f8:	0e 94 46 10 	call	0x208c	; 0x208c <system_init>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	a8 ec       	ldi	r26, 0xC8	; 200
     402:	b2 e4       	ldi	r27, 0x42	; 66
     404:	8b 87       	std	Y+11, r24	; 0x0b
     406:	9c 87       	std	Y+12, r25	; 0x0c
     408:	ad 87       	std	Y+13, r26	; 0x0d
     40a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     40c:	6b 85       	ldd	r22, Y+11	; 0x0b
     40e:	7c 85       	ldd	r23, Y+12	; 0x0c
     410:	8d 85       	ldd	r24, Y+13	; 0x0d
     412:	9e 85       	ldd	r25, Y+14	; 0x0e
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e4       	ldi	r19, 0x40	; 64
     418:	4c e1       	ldi	r20, 0x1C	; 28
     41a:	55 e4       	ldi	r21, 0x45	; 69
     41c:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	8f 83       	std	Y+7, r24	; 0x07
     426:	98 87       	std	Y+8, r25	; 0x08
     428:	a9 87       	std	Y+9, r26	; 0x09
     42a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     42c:	6f 81       	ldd	r22, Y+7	; 0x07
     42e:	78 85       	ldd	r23, Y+8	; 0x08
     430:	89 85       	ldd	r24, Y+9	; 0x09
     432:	9a 85       	ldd	r25, Y+10	; 0x0a
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e8       	ldi	r20, 0x80	; 128
     43a:	5f e3       	ldi	r21, 0x3F	; 63
     43c:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     440:	88 23       	and	r24, r24
     442:	2c f4       	brge	.+10     	; 0x44e <main+0x6a>
		__ticks = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	9e 83       	std	Y+6, r25	; 0x06
     44a:	8d 83       	std	Y+5, r24	; 0x05
     44c:	3f c0       	rjmp	.+126    	; 0x4cc <main+0xe8>
	else if (__tmp > 65535)
     44e:	6f 81       	ldd	r22, Y+7	; 0x07
     450:	78 85       	ldd	r23, Y+8	; 0x08
     452:	89 85       	ldd	r24, Y+9	; 0x09
     454:	9a 85       	ldd	r25, Y+10	; 0x0a
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	3f ef       	ldi	r19, 0xFF	; 255
     45a:	4f e7       	ldi	r20, 0x7F	; 127
     45c:	57 e4       	ldi	r21, 0x47	; 71
     45e:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     462:	18 16       	cp	r1, r24
     464:	4c f5       	brge	.+82     	; 0x4b8 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     466:	6b 85       	ldd	r22, Y+11	; 0x0b
     468:	7c 85       	ldd	r23, Y+12	; 0x0c
     46a:	8d 85       	ldd	r24, Y+13	; 0x0d
     46c:	9e 85       	ldd	r25, Y+14	; 0x0e
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e2       	ldi	r20, 0x20	; 32
     474:	51 e4       	ldi	r21, 0x41	; 65
     476:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	9e 83       	std	Y+6, r25	; 0x06
     48c:	8d 83       	std	Y+5, r24	; 0x05
     48e:	0f c0       	rjmp	.+30     	; 0x4ae <main+0xca>
     490:	8a ef       	ldi	r24, 0xFA	; 250
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <main+0xb8>
     4a0:	9c 83       	std	Y+4, r25	; 0x04
     4a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a4:	8d 81       	ldd	r24, Y+5	; 0x05
     4a6:	9e 81       	ldd	r25, Y+6	; 0x06
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	9e 83       	std	Y+6, r25	; 0x06
     4ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ae:	8d 81       	ldd	r24, Y+5	; 0x05
     4b0:	9e 81       	ldd	r25, Y+6	; 0x06
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	69 f7       	brne	.-38     	; 0x490 <main+0xac>
     4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b8:	6f 81       	ldd	r22, Y+7	; 0x07
     4ba:	78 85       	ldd	r23, Y+8	; 0x08
     4bc:	89 85       	ldd	r24, Y+9	; 0x09
     4be:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	9e 83       	std	Y+6, r25	; 0x06
     4ca:	8d 83       	std	Y+5, r24	; 0x05
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
     4ce:	9e 81       	ldd	r25, Y+6	; 0x06
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <main+0xf4>
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	while(1)
	{
		purple_camera();
     4e0:	f8 dd       	rcall	.-1040   	; 0xd2 <purple_camera>
     4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <main+0xfe>

000004e4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <servo_init+0xa>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     4f6:	ad e2       	ldi	r26, 0x2D	; 45
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	ed e2       	ldi	r30, 0x2D	; 45
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	88 63       	ori	r24, 0x38	; 56
     502:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     504:	a4 e2       	ldi	r26, 0x24	; 36
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	e4 e2       	ldi	r30, 0x24	; 36
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 68       	ori	r24, 0x80	; 128
     510:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     512:	e4 e9       	ldi	r30, 0x94	; 148
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	11 82       	std	Z+1, r1	; 0x01
     518:	10 82       	st	Z, r1
	TCNT0 = 0;
     51a:	e6 e4       	ldi	r30, 0x46	; 70
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	10 82       	st	Z, r1

	OCR3A = 0;
     520:	e8 e9       	ldi	r30, 0x98	; 152
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	11 82       	std	Z+1, r1	; 0x01
     526:	10 82       	st	Z, r1
	OCR3B = 0;
     528:	ea e9       	ldi	r30, 0x9A	; 154
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	11 82       	std	Z+1, r1	; 0x01
     52e:	10 82       	st	Z, r1
	OCR3C = 0;
     530:	ec e9       	ldi	r30, 0x9C	; 156
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	11 82       	std	Z+1, r1	; 0x01
     536:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     538:	e0 e9       	ldi	r30, 0x90	; 144
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	8e eb       	ldi	r24, 0xBE	; 190
     53e:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     540:	e1 e9       	ldi	r30, 0x91	; 145
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	8a e1       	ldi	r24, 0x1A	; 26
     546:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     548:	e4 e4       	ldi	r30, 0x44	; 68
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	8b e6       	ldi	r24, 0x6B	; 107
     54e:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     550:	06 e9       	ldi	r16, 0x96	; 150
     552:	10 e0       	ldi	r17, 0x00	; 0
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	cc 01       	movw	r24, r24
     55a:	a0 e0       	ldi	r26, 0x00	; 0
     55c:	b0 e0       	ldi	r27, 0x00	; 0
     55e:	bc 01       	movw	r22, r24
     560:	cd 01       	movw	r24, r26
     562:	0e 94 8a 13 	call	0x2714	; 0x2714 <__floatunsisf>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	9c 01       	movw	r18, r24
     580:	ad 01       	movw	r20, r26
     582:	60 e8       	ldi	r22, 0x80	; 128
     584:	76 e9       	ldi	r23, 0x96	; 150
     586:	88 e1       	ldi	r24, 0x18	; 24
     588:	9b e4       	ldi	r25, 0x4B	; 75
     58a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	f8 01       	movw	r30, r16
     5b4:	91 83       	std	Z+1, r25	; 0x01
     5b6:	80 83       	st	Z, r24
}
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	cf 91       	pop	r28
     5be:	df 91       	pop	r29
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <servo_set_duty_cycle_umbrella+0xe>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <servo_set_duty_cycle_umbrella+0x10>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9c 83       	std	Y+4, r25	; 0x04
     5dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     5de:	e6 e9       	ldi	r30, 0x96	; 150
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	91 81       	ldd	r25, Z+1	; 0x01
     5e6:	cc 01       	movw	r24, r24
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 8a 13 	call	0x2714	; 0x2714 <__floatunsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	4f e7       	ldi	r20, 0x7F	; 127
     602:	53 e4       	ldi	r21, 0x43	; 67
     604:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	7c 01       	movw	r14, r24
     60e:	8d 01       	movw	r16, r26
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	aa 27       	eor	r26, r26
     616:	97 fd       	sbrc	r25, 7
     618:	a0 95       	com	r26
     61a:	ba 2f       	mov	r27, r26
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c8 01       	movw	r24, r16
     62a:	b7 01       	movw	r22, r14
     62c:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	bc 01       	movw	r22, r24
     636:	cd 01       	movw	r24, r26
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     658:	e9 e9       	ldi	r30, 0x99	; 153
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	9a 81       	ldd	r25, Y+2	; 0x02
     660:	89 2f       	mov	r24, r25
     662:	99 27       	eor	r25, r25
     664:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     666:	e8 e9       	ldi	r30, 0x98	; 152
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	80 83       	st	Z, r24
}
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	08 95       	ret

00000684 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <servo_set_duty_cycle_door+0xe>
     692:	00 d0       	rcall	.+0      	; 0x694 <servo_set_duty_cycle_door+0x10>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     69c:	e6 e9       	ldi	r30, 0x96	; 150
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	cc 01       	movw	r24, r24
     6a6:	a0 e0       	ldi	r26, 0x00	; 0
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 8a 13 	call	0x2714	; 0x2714 <__floatunsisf>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	4f e7       	ldi	r20, 0x7F	; 127
     6c0:	53 e4       	ldi	r21, 0x43	; 67
     6c2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	8d 01       	movw	r16, r26
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	aa 27       	eor	r26, r26
     6d4:	97 fd       	sbrc	r25, 7
     6d6:	a0 95       	com	r26
     6d8:	ba 2f       	mov	r27, r26
     6da:	bc 01       	movw	r22, r24
     6dc:	cd 01       	movw	r24, r26
     6de:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c8 01       	movw	r24, r16
     6e8:	b7 01       	movw	r22, r14
     6ea:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	bc 01       	movw	r22, r24
     6f4:	cd 01       	movw	r24, r26
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     716:	eb e9       	ldi	r30, 0x9B	; 155
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	89 2f       	mov	r24, r25
     720:	99 27       	eor	r25, r25
     722:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     724:	ea e9       	ldi	r30, 0x9A	; 154
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	80 83       	st	Z, r24
}
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	08 95       	ret

00000742 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	00 d0       	rcall	.+0      	; 0x750 <servo_set_duty_cycle_left_grabber+0xe>
     750:	00 d0       	rcall	.+0      	; 0x752 <servo_set_duty_cycle_left_grabber+0x10>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	9c 83       	std	Y+4, r25	; 0x04
     758:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     75a:	e6 e9       	ldi	r30, 0x96	; 150
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	cc 01       	movw	r24, r24
     764:	a0 e0       	ldi	r26, 0x00	; 0
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	bc 01       	movw	r22, r24
     76a:	cd 01       	movw	r24, r26
     76c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__floatunsisf>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	bc 01       	movw	r22, r24
     776:	cd 01       	movw	r24, r26
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	4f e7       	ldi	r20, 0x7F	; 127
     77e:	53 e4       	ldi	r21, 0x43	; 67
     780:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	7c 01       	movw	r14, r24
     78a:	8d 01       	movw	r16, r26
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	aa 27       	eor	r26, r26
     792:	97 fd       	sbrc	r25, 7
     794:	a0 95       	com	r26
     796:	ba 2f       	mov	r27, r26
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	c8 01       	movw	r24, r16
     7a6:	b7 01       	movw	r22, r14
     7a8:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	5f e3       	ldi	r21, 0x3F	; 63
     7bc:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	bc 01       	movw	r22, r24
     7c6:	cd 01       	movw	r24, r26
     7c8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	9a 83       	std	Y+2, r25	; 0x02
     7d2:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     7d4:	ed e9       	ldi	r30, 0x9D	; 157
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	89 2f       	mov	r24, r25
     7de:	99 27       	eor	r25, r25
     7e0:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     7e2:	ec e9       	ldi	r30, 0x9C	; 156
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	80 83       	st	Z, r24
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	0f 92       	push	r0
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	99 27       	eor	r25, r25
     810:	87 fd       	sbrc	r24, 7
     812:	90 95       	com	r25
     814:	a9 2f       	mov	r26, r25
     816:	b9 2f       	mov	r27, r25
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	44 eb       	ldi	r20, 0xB4	; 180
     82e:	52 e4       	ldi	r21, 0x42	; 66
     830:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	26 e6       	ldi	r18, 0x66	; 102
     83e:	36 e6       	ldi	r19, 0x66	; 102
     840:	46 e3       	ldi	r20, 0x36	; 54
     842:	51 ec       	ldi	r21, 0xC1	; 193
     844:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	bc 01       	movw	r22, r24
     84e:	cd 01       	movw	r24, r26
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	4c e6       	ldi	r20, 0x6C	; 108
     856:	53 e4       	ldi	r21, 0x43	; 67
     858:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	9c 01       	movw	r18, r24
     862:	ad 01       	movw	r20, r26
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	8f e7       	ldi	r24, 0x7F	; 127
     86a:	93 e4       	ldi	r25, 0x43	; 67
     86c:	0e 94 88 12 	call	0x2510	; 0x2510 <__subsf3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixsfsi>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	a2 de       	rcall	.-700    	; 0x5c6 <servo_set_duty_cycle_umbrella>
}
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	0f 92       	push	r0
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	99 27       	eor	r25, r25
     89a:	87 fd       	sbrc	r24, 7
     89c:	90 95       	com	r25
     89e:	a9 2f       	mov	r26, r25
     8a0:	b9 2f       	mov	r27, r25
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	44 eb       	ldi	r20, 0xB4	; 180
     8b8:	52 e4       	ldi	r21, 0x42	; 66
     8ba:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	26 e6       	ldi	r18, 0x66	; 102
     8c8:	36 e6       	ldi	r19, 0x66	; 102
     8ca:	46 e3       	ldi	r20, 0x36	; 54
     8cc:	51 ec       	ldi	r21, 0xC1	; 193
     8ce:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	4c e6       	ldi	r20, 0x6C	; 108
     8e0:	53 e4       	ldi	r21, 0x43	; 67
     8e2:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	9c 01       	movw	r18, r24
     8ec:	ad 01       	movw	r20, r26
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	8f e7       	ldi	r24, 0x7F	; 127
     8f4:	93 e4       	ldi	r25, 0x43	; 67
     8f6:	0e 94 88 12 	call	0x2510	; 0x2510 <__subsf3>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixsfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	bc de       	rcall	.-648    	; 0x684 <servo_set_duty_cycle_door>
}
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	0f 92       	push	r0
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	99 27       	eor	r25, r25
     924:	87 fd       	sbrc	r24, 7
     926:	90 95       	com	r25
     928:	a9 2f       	mov	r26, r25
     92a:	b9 2f       	mov	r27, r25
     92c:	bc 01       	movw	r22, r24
     92e:	cd 01       	movw	r24, r26
     930:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	44 eb       	ldi	r20, 0xB4	; 180
     942:	52 e4       	ldi	r21, 0x42	; 66
     944:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	26 e6       	ldi	r18, 0x66	; 102
     952:	36 e6       	ldi	r19, 0x66	; 102
     954:	46 e3       	ldi	r20, 0x36	; 54
     956:	51 ec       	ldi	r21, 0xC1	; 193
     958:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4c e6       	ldi	r20, 0x6C	; 108
     96a:	53 e4       	ldi	r21, 0x43	; 67
     96c:	0e 94 89 12 	call	0x2512	; 0x2512 <__addsf3>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	9c 01       	movw	r18, r24
     976:	ad 01       	movw	r20, r26
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	8f e7       	ldi	r24, 0x7F	; 127
     97e:	93 e4       	ldi	r25, 0x43	; 67
     980:	0e 94 88 12 	call	0x2510	; 0x2510 <__subsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__fixsfsi>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	d6 de       	rcall	.-596    	; 0x742 <servo_set_duty_cycle_left_grabber>
}
     996:	0f 90       	pop	r0
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	08 95       	ret

0000099e <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	0f 92       	push	r0
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     9aa:	e7 e4       	ldi	r30, 0x47	; 71
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	80 83       	st	Z, r24
}
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(10);
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	a7 df       	rcall	.-178    	; 0x914 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(70);
     9c6:	86 e4       	ldi	r24, 0x46	; 70
     9c8:	ea df       	rcall	.-44     	; 0x99e <servo_set_right_grabber_position>
}
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	08 95       	ret

000009d0 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	6c 97       	sbiw	r28, 0x1c	; 28
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     9e4:	85 e5       	ldi	r24, 0x55	; 85
     9e6:	0c df       	rcall	.-488    	; 0x800 <servo_set_umbrella_position>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	aa e7       	ldi	r26, 0x7A	; 122
     9ee:	b4 e4       	ldi	r27, 0x44	; 68
     9f0:	89 8f       	std	Y+25, r24	; 0x19
     9f2:	9a 8f       	std	Y+26, r25	; 0x1a
     9f4:	ab 8f       	std	Y+27, r26	; 0x1b
     9f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9f8:	69 8d       	ldd	r22, Y+25	; 0x19
     9fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e4       	ldi	r19, 0x40	; 64
     a04:	4c e1       	ldi	r20, 0x1C	; 28
     a06:	55 e4       	ldi	r21, 0x45	; 69
     a08:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	8d 8b       	std	Y+21, r24	; 0x15
     a12:	9e 8b       	std	Y+22, r25	; 0x16
     a14:	af 8b       	std	Y+23, r26	; 0x17
     a16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a18:	6d 89       	ldd	r22, Y+21	; 0x15
     a1a:	7e 89       	ldd	r23, Y+22	; 0x16
     a1c:	8f 89       	ldd	r24, Y+23	; 0x17
     a1e:	98 8d       	ldd	r25, Y+24	; 0x18
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e8       	ldi	r20, 0x80	; 128
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     a2c:	88 23       	and	r24, r24
     a2e:	2c f4       	brge	.+10     	; 0xa3a <actuators_umbrella+0x6a>
		__ticks = 1;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9c 8b       	std	Y+20, r25	; 0x14
     a36:	8b 8b       	std	Y+19, r24	; 0x13
     a38:	3f c0       	rjmp	.+126    	; 0xab8 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     a3a:	6d 89       	ldd	r22, Y+21	; 0x15
     a3c:	7e 89       	ldd	r23, Y+22	; 0x16
     a3e:	8f 89       	ldd	r24, Y+23	; 0x17
     a40:	98 8d       	ldd	r25, Y+24	; 0x18
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	3f ef       	ldi	r19, 0xFF	; 255
     a46:	4f e7       	ldi	r20, 0x7F	; 127
     a48:	57 e4       	ldi	r21, 0x47	; 71
     a4a:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     a4e:	18 16       	cp	r1, r24
     a50:	4c f5       	brge	.+82     	; 0xaa4 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a52:	69 8d       	ldd	r22, Y+25	; 0x19
     a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e2       	ldi	r20, 0x20	; 32
     a60:	51 e4       	ldi	r21, 0x41	; 65
     a62:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	9c 8b       	std	Y+20, r25	; 0x14
     a78:	8b 8b       	std	Y+19, r24	; 0x13
     a7a:	0f c0       	rjmp	.+30     	; 0xa9a <actuators_umbrella+0xca>
     a7c:	8a ef       	ldi	r24, 0xFA	; 250
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9a 8b       	std	Y+18, r25	; 0x12
     a82:	89 8b       	std	Y+17, r24	; 0x11
     a84:	89 89       	ldd	r24, Y+17	; 0x11
     a86:	9a 89       	ldd	r25, Y+18	; 0x12
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <actuators_umbrella+0xb8>
     a8c:	9a 8b       	std	Y+18, r25	; 0x12
     a8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a90:	8b 89       	ldd	r24, Y+19	; 0x13
     a92:	9c 89       	ldd	r25, Y+20	; 0x14
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	9c 8b       	std	Y+20, r25	; 0x14
     a98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a9a:	8b 89       	ldd	r24, Y+19	; 0x13
     a9c:	9c 89       	ldd	r25, Y+20	; 0x14
     a9e:	00 97       	sbiw	r24, 0x00	; 0
     aa0:	69 f7       	brne	.-38     	; 0xa7c <actuators_umbrella+0xac>
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa4:	6d 89       	ldd	r22, Y+21	; 0x15
     aa6:	7e 89       	ldd	r23, Y+22	; 0x16
     aa8:	8f 89       	ldd	r24, Y+23	; 0x17
     aaa:	98 8d       	ldd	r25, Y+24	; 0x18
     aac:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	9c 8b       	std	Y+20, r25	; 0x14
     ab6:	8b 8b       	std	Y+19, r24	; 0x13
     ab8:	8b 89       	ldd	r24, Y+19	; 0x13
     aba:	9c 89       	ldd	r25, Y+20	; 0x14
     abc:	98 8b       	std	Y+16, r25	; 0x10
     abe:	8f 87       	std	Y+15, r24	; 0x0f
     ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac2:	98 89       	ldd	r25, Y+16	; 0x10
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <actuators_umbrella+0xf4>
     ac8:	98 8b       	std	Y+16, r25	; 0x10
     aca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	dd de       	rcall	.-582    	; 0x88a <servo_set_door_position>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	aa e7       	ldi	r26, 0x7A	; 122
     ad6:	b4 e4       	ldi	r27, 0x44	; 68
     ad8:	8b 87       	std	Y+11, r24	; 0x0b
     ada:	9c 87       	std	Y+12, r25	; 0x0c
     adc:	ad 87       	std	Y+13, r26	; 0x0d
     ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e4       	ldi	r19, 0x40	; 64
     aec:	4c e1       	ldi	r20, 0x1C	; 28
     aee:	55 e4       	ldi	r21, 0x45	; 69
     af0:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	8f 83       	std	Y+7, r24	; 0x07
     afa:	98 87       	std	Y+8, r25	; 0x08
     afc:	a9 87       	std	Y+9, r26	; 0x09
     afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b00:	6f 81       	ldd	r22, Y+7	; 0x07
     b02:	78 85       	ldd	r23, Y+8	; 0x08
     b04:	89 85       	ldd	r24, Y+9	; 0x09
     b06:	9a 85       	ldd	r25, Y+10	; 0x0a
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     b14:	88 23       	and	r24, r24
     b16:	2c f4       	brge	.+10     	; 0xb22 <actuators_umbrella+0x152>
		__ticks = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9e 83       	std	Y+6, r25	; 0x06
     b1e:	8d 83       	std	Y+5, r24	; 0x05
     b20:	3f c0       	rjmp	.+126    	; 0xba0 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     b22:	6f 81       	ldd	r22, Y+7	; 0x07
     b24:	78 85       	ldd	r23, Y+8	; 0x08
     b26:	89 85       	ldd	r24, Y+9	; 0x09
     b28:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	3f ef       	ldi	r19, 0xFF	; 255
     b2e:	4f e7       	ldi	r20, 0x7F	; 127
     b30:	57 e4       	ldi	r21, 0x47	; 71
     b32:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     b36:	18 16       	cp	r1, r24
     b38:	4c f5       	brge	.+82     	; 0xb8c <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b40:	9e 85       	ldd	r25, Y+14	; 0x0e
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e2       	ldi	r20, 0x20	; 32
     b48:	51 e4       	ldi	r21, 0x41	; 65
     b4a:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	bc 01       	movw	r22, r24
     b54:	cd 01       	movw	r24, r26
     b56:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	9e 83       	std	Y+6, r25	; 0x06
     b60:	8d 83       	std	Y+5, r24	; 0x05
     b62:	0f c0       	rjmp	.+30     	; 0xb82 <actuators_umbrella+0x1b2>
     b64:	8a ef       	ldi	r24, 0xFA	; 250
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9c 83       	std	Y+4, r25	; 0x04
     b6a:	8b 83       	std	Y+3, r24	; 0x03
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	9c 81       	ldd	r25, Y+4	; 0x04
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <actuators_umbrella+0x1a0>
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	9e 83       	std	Y+6, r25	; 0x06
     b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b82:	8d 81       	ldd	r24, Y+5	; 0x05
     b84:	9e 81       	ldd	r25, Y+6	; 0x06
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	69 f7       	brne	.-38     	; 0xb64 <actuators_umbrella+0x194>
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b8c:	6f 81       	ldd	r22, Y+7	; 0x07
     b8e:	78 85       	ldd	r23, Y+8	; 0x08
     b90:	89 85       	ldd	r24, Y+9	; 0x09
     b92:	9a 85       	ldd	r25, Y+10	; 0x0a
     b94:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	9e 83       	std	Y+6, r25	; 0x06
     b9e:	8d 83       	std	Y+5, r24	; 0x05
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <actuators_umbrella+0x1dc>
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     bb4:	6c 96       	adiw	r28, 0x1c	; 28
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <actuators_setup>:
void actuators_setup(void)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	aa 97       	sbiw	r28, 0x2a	; 42
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(80);
     bda:	80 e5       	ldi	r24, 0x50	; 80
     bdc:	56 de       	rcall	.-852    	; 0x88a <servo_set_door_position>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	aa e7       	ldi	r26, 0x7A	; 122
     be4:	b4 e4       	ldi	r27, 0x44	; 68
     be6:	8f a3       	std	Y+39, r24	; 0x27
     be8:	98 a7       	std	Y+40, r25	; 0x28
     bea:	a9 a7       	std	Y+41, r26	; 0x29
     bec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bee:	6f a1       	ldd	r22, Y+39	; 0x27
     bf0:	78 a5       	ldd	r23, Y+40	; 0x28
     bf2:	89 a5       	ldd	r24, Y+41	; 0x29
     bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e4       	ldi	r19, 0x40	; 64
     bfa:	4c e1       	ldi	r20, 0x1C	; 28
     bfc:	55 e4       	ldi	r21, 0x45	; 69
     bfe:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	8b a3       	std	Y+35, r24	; 0x23
     c08:	9c a3       	std	Y+36, r25	; 0x24
     c0a:	ad a3       	std	Y+37, r26	; 0x25
     c0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c0e:	6b a1       	ldd	r22, Y+35	; 0x23
     c10:	7c a1       	ldd	r23, Y+36	; 0x24
     c12:	8d a1       	ldd	r24, Y+37	; 0x25
     c14:	9e a1       	ldd	r25, Y+38	; 0x26
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e8       	ldi	r20, 0x80	; 128
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     c22:	88 23       	and	r24, r24
     c24:	2c f4       	brge	.+10     	; 0xc30 <actuators_setup+0x6a>
		__ticks = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9a a3       	std	Y+34, r25	; 0x22
     c2c:	89 a3       	std	Y+33, r24	; 0x21
     c2e:	3f c0       	rjmp	.+126    	; 0xcae <actuators_setup+0xe8>
	else if (__tmp > 65535)
     c30:	6b a1       	ldd	r22, Y+35	; 0x23
     c32:	7c a1       	ldd	r23, Y+36	; 0x24
     c34:	8d a1       	ldd	r24, Y+37	; 0x25
     c36:	9e a1       	ldd	r25, Y+38	; 0x26
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	3f ef       	ldi	r19, 0xFF	; 255
     c3c:	4f e7       	ldi	r20, 0x7F	; 127
     c3e:	57 e4       	ldi	r21, 0x47	; 71
     c40:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	4c f5       	brge	.+82     	; 0xc9a <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c48:	6f a1       	ldd	r22, Y+39	; 0x27
     c4a:	78 a5       	ldd	r23, Y+40	; 0x28
     c4c:	89 a5       	ldd	r24, Y+41	; 0x29
     c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9a a3       	std	Y+34, r25	; 0x22
     c6e:	89 a3       	std	Y+33, r24	; 0x21
     c70:	0f c0       	rjmp	.+30     	; 0xc90 <actuators_setup+0xca>
     c72:	8a ef       	ldi	r24, 0xFA	; 250
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	98 a3       	std	Y+32, r25	; 0x20
     c78:	8f 8f       	std	Y+31, r24	; 0x1f
     c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c7c:	98 a1       	ldd	r25, Y+32	; 0x20
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <actuators_setup+0xb8>
     c82:	98 a3       	std	Y+32, r25	; 0x20
     c84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	89 a1       	ldd	r24, Y+33	; 0x21
     c88:	9a a1       	ldd	r25, Y+34	; 0x22
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	9a a3       	std	Y+34, r25	; 0x22
     c8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c90:	89 a1       	ldd	r24, Y+33	; 0x21
     c92:	9a a1       	ldd	r25, Y+34	; 0x22
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	69 f7       	brne	.-38     	; 0xc72 <actuators_setup+0xac>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	6b a1       	ldd	r22, Y+35	; 0x23
     c9c:	7c a1       	ldd	r23, Y+36	; 0x24
     c9e:	8d a1       	ldd	r24, Y+37	; 0x25
     ca0:	9e a1       	ldd	r25, Y+38	; 0x26
     ca2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9a a3       	std	Y+34, r25	; 0x22
     cac:	89 a3       	std	Y+33, r24	; 0x21
     cae:	89 a1       	ldd	r24, Y+33	; 0x21
     cb0:	9a a1       	ldd	r25, Y+34	; 0x22
     cb2:	9e 8f       	std	Y+30, r25	; 0x1e
     cb4:	8d 8f       	std	Y+29, r24	; 0x1d
     cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <actuators_setup+0xf4>
     cbe:	9e 8f       	std	Y+30, r25	; 0x1e
     cc0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(-90);
     cc2:	86 ea       	ldi	r24, 0xA6	; 166
     cc4:	9d dd       	rcall	.-1222   	; 0x800 <servo_set_umbrella_position>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	aa e7       	ldi	r26, 0x7A	; 122
     ccc:	b4 e4       	ldi	r27, 0x44	; 68
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e4       	ldi	r19, 0x40	; 64
     ce2:	4c e1       	ldi	r20, 0x1C	; 28
     ce4:	55 e4       	ldi	r21, 0x45	; 69
     ce6:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8d 8b       	std	Y+21, r24	; 0x15
     cf0:	9e 8b       	std	Y+22, r25	; 0x16
     cf2:	af 8b       	std	Y+23, r26	; 0x17
     cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	2c f4       	brge	.+10     	; 0xd18 <actuators_setup+0x152>
		__ticks = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c 8b       	std	Y+20, r25	; 0x14
     d14:	8b 8b       	std	Y+19, r24	; 0x13
     d16:	3f c0       	rjmp	.+126    	; 0xd96 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     d18:	6d 89       	ldd	r22, Y+21	; 0x15
     d1a:	7e 89       	ldd	r23, Y+22	; 0x16
     d1c:	8f 89       	ldd	r24, Y+23	; 0x17
     d1e:	98 8d       	ldd	r25, Y+24	; 0x18
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	57 e4       	ldi	r21, 0x47	; 71
     d28:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	4c f5       	brge	.+82     	; 0xd82 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	69 8d       	ldd	r22, Y+25	; 0x19
     d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9c 8b       	std	Y+20, r25	; 0x14
     d56:	8b 8b       	std	Y+19, r24	; 0x13
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <actuators_setup+0x1b2>
     d5a:	8a ef       	ldi	r24, 0xFA	; 250
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a 8b       	std	Y+18, r25	; 0x12
     d60:	89 8b       	std	Y+17, r24	; 0x11
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	9a 89       	ldd	r25, Y+18	; 0x12
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <actuators_setup+0x1a0>
     d6a:	9a 8b       	std	Y+18, r25	; 0x12
     d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d78:	8b 89       	ldd	r24, Y+19	; 0x13
     d7a:	9c 89       	ldd	r25, Y+20	; 0x14
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f7       	brne	.-38     	; 0xd5a <actuators_setup+0x194>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d82:	6d 89       	ldd	r22, Y+21	; 0x15
     d84:	7e 89       	ldd	r23, Y+22	; 0x16
     d86:	8f 89       	ldd	r24, Y+23	; 0x17
     d88:	98 8d       	ldd	r25, Y+24	; 0x18
     d8a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9c 8b       	std	Y+20, r25	; 0x14
     d94:	8b 8b       	std	Y+19, r24	; 0x13
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	98 8b       	std	Y+16, r25	; 0x10
     d9c:	8f 87       	std	Y+15, r24	; 0x0f
     d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     da0:	98 89       	ldd	r25, Y+16	; 0x10
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <actuators_setup+0x1dc>
     da6:	98 8b       	std	Y+16, r25	; 0x10
     da8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	6e dd       	rcall	.-1316   	; 0x88a <servo_set_door_position>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	aa ef       	ldi	r26, 0xFA	; 250
     db4:	b3 e4       	ldi	r27, 0x43	; 67
     db6:	8b 87       	std	Y+11, r24	; 0x0b
     db8:	9c 87       	std	Y+12, r25	; 0x0c
     dba:	ad 87       	std	Y+13, r26	; 0x0d
     dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e4       	ldi	r19, 0x40	; 64
     dca:	4c e1       	ldi	r20, 0x1C	; 28
     dcc:	55 e4       	ldi	r21, 0x45	; 69
     dce:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8f 83       	std	Y+7, r24	; 0x07
     dd8:	98 87       	std	Y+8, r25	; 0x08
     dda:	a9 87       	std	Y+9, r26	; 0x09
     ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dde:	6f 81       	ldd	r22, Y+7	; 0x07
     de0:	78 85       	ldd	r23, Y+8	; 0x08
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 ed 12 	call	0x25da	; 0x25da <__cmpsf2>
     df2:	88 23       	and	r24, r24
     df4:	2c f4       	brge	.+10     	; 0xe00 <actuators_setup+0x23a>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	0e 94 3c 14 	call	0x2878	; 0x2878 <__gesf2>
     e14:	18 16       	cp	r1, r24
     e16:	4c f5       	brge	.+82     	; 0xe6a <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9e 83       	std	Y+6, r25	; 0x06
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <actuators_setup+0x29a>
     e42:	8a ef       	ldi	r24, 0xFA	; 250
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <actuators_setup+0x288>
     e52:	9c 83       	std	Y+4, r25	; 0x04
     e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f7       	brne	.-38     	; 0xe42 <actuators_setup+0x27c>
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6a:	6f 81       	ldd	r22, Y+7	; 0x07
     e6c:	78 85       	ldd	r23, Y+8	; 0x08
     e6e:	89 85       	ldd	r24, Y+9	; 0x09
     e70:	9a 85       	ldd	r25, Y+10	; 0x0a
     e72:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <actuators_setup+0x2c4>
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     e92:	93 dd       	rcall	.-1242   	; 0x9ba <servo_set_grabbers_up>
}
     e94:	aa 96       	adiw	r28, 0x2a	; 42
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	00 90 5b 00 	lds	r0, 0x005B
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <__vector_18+0x2a>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <__vector_18+0x2c>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     ed6:	ed ee       	ldi	r30, 0xED	; 237
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     ede:	1b 82       	std	Y+3, r1	; 0x03
     ee0:	9c c0       	rjmp	.+312    	; 0x101a <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     ee2:	ed ee       	ldi	r30, 0xED	; 237
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	82 95       	swap	r24
     eea:	80 7f       	andi	r24, 0xF0	; 240
     eec:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     eee:	ee ee       	ldi	r30, 0xEE	; 238
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	82 95       	swap	r24
     ef6:	86 95       	lsr	r24
     ef8:	87 70       	andi	r24, 0x07	; 7
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	90 70       	andi	r25, 0x00	; 0
     f02:	88 23       	and	r24, r24
     f04:	09 f4       	brne	.+2      	; 0xf08 <__vector_18+0x62>
     f06:	6e c0       	rjmp	.+220    	; 0xfe4 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     f08:	ef ee       	ldi	r30, 0xEF	; 239
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 e8       	ldi	r24, 0x80	; 128
     f0e:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     f10:	ae ee       	ldi	r26, 0xEE	; 238
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ee ee       	ldi	r30, 0xEE	; 238
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     f1e:	e2 ef       	ldi	r30, 0xF2	; 242
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	82 95       	swap	r24
     f26:	86 95       	lsr	r24
     f28:	87 70       	andi	r24, 0x07	; 7
     f2a:	28 2f       	mov	r18, r24
     f2c:	e3 ef       	ldi	r30, 0xF3	; 243
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 2b       	or	r24, r18
     f44:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	82 1b       	sub	r24, r18
     f56:	93 0b       	sbc	r25, r19
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	90 95       	com	r25
     f5e:	81 95       	neg	r24
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	fc 01       	movw	r30, r24
     f64:	ee 5e       	subi	r30, 0xEE	; 238
     f66:	fe 4f       	sbci	r31, 0xFE	; 254
     f68:	40 81       	ld	r20, Z
     f6a:	51 81       	ldd	r21, Z+1	; 0x01
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	fc 01       	movw	r30, r24
     f76:	ea 5d       	subi	r30, 0xDA	; 218
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	82 0f       	add	r24, r18
     f88:	93 1f       	adc	r25, r19
     f8a:	da 01       	movw	r26, r20
     f8c:	a8 0f       	add	r26, r24
     f8e:	b9 1f       	adc	r27, r25
     f90:	ea ef       	ldi	r30, 0xFA	; 250
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	88 30       	cpi	r24, 0x08	; 8
     fa2:	98 f2       	brcs	.-90     	; 0xf4a <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	fc 01       	movw	r30, r24
     fae:	ea 5d       	subi	r30, 0xDA	; 218
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	80 83       	st	Z, r24
     fb8:	80 81       	ld	r24, Z
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	41 f4       	brne	.+16     	; 0xfce <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	fc 01       	movw	r30, r24
     fc8:	ea 5d       	subi	r30, 0xDA	; 218
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	fc 01       	movw	r30, r24
     fd8:	e6 5c       	subi	r30, 0xC6	; 198
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	80 81       	ld	r24, Z
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 83       	st	Z, r24
     fe2:	1f c0       	rjmp	.+62     	; 0x1022 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     fe4:	ee ee       	ldi	r30, 0xEE	; 238
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 95       	swap	r24
     fec:	86 95       	lsr	r24
     fee:	86 95       	lsr	r24
     ff0:	83 70       	andi	r24, 0x03	; 3
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	59 f0       	breq	.+22     	; 0x1014 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     ffe:	ef ee       	ldi	r30, 0xEF	; 239
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
    1004:	ae ee       	ldi	r26, 0xEE	; 238
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ee ee       	ldi	r30, 0xEE	; 238
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7b       	andi	r24, 0xBF	; 191
    1010:	8c 93       	st	X, r24
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	8f 30       	cpi	r24, 0x0F	; 15
    101e:	08 f4       	brcc	.+2      	; 0x1022 <__vector_18+0x17c>
    1020:	60 cf       	rjmp	.-320    	; 0xee2 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
    1022:	ed ee       	ldi	r30, 0xED	; 237
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
    102a:	aa ed       	ldi	r26, 0xDA	; 218
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ea ed       	ldi	r30, 0xDA	; 218
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8c 93       	st	X, r24
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	5f 91       	pop	r21
    1050:	4f 91       	pop	r20
    1052:	3f 91       	pop	r19
    1054:	2f 91       	pop	r18
    1056:	0f 90       	pop	r0
    1058:	00 92 5b 00 	sts	0x005B, r0
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <CAN_InitModule>:


static void CAN_InitModule(void)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <CAN_InitModule+0x6>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1070:	e8 ed       	ldi	r30, 0xD8	; 216
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    1078:	1a 82       	std	Y+2, r1	; 0x02
    107a:	32 c0       	rjmp	.+100    	; 0x10e0 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
    107c:	ed ee       	ldi	r30, 0xED	; 237
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	82 95       	swap	r24
    1084:	80 7f       	andi	r24, 0xF0	; 240
    1086:	80 83       	st	Z, r24

		CANSTMOB = 0;
    1088:	ee ee       	ldi	r30, 0xEE	; 238
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	10 82       	st	Z, r1
		CANCDMOB = 0;
    108e:	ef ee       	ldi	r30, 0xEF	; 239
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	10 82       	st	Z, r1

		CANIDT1 = 0;
    1094:	e3 ef       	ldi	r30, 0xF3	; 243
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	10 82       	st	Z, r1
		CANIDT2 = 0;
    109a:	e2 ef       	ldi	r30, 0xF2	; 242
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	10 82       	st	Z, r1
		CANIDT3 = 0;
    10a0:	e1 ef       	ldi	r30, 0xF1	; 241
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	10 82       	st	Z, r1
		CANIDT4 = 0;
    10a6:	e0 ef       	ldi	r30, 0xF0	; 240
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	10 82       	st	Z, r1
		CANIDM1 = 0;
    10ac:	e7 ef       	ldi	r30, 0xF7	; 247
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	10 82       	st	Z, r1
		CANIDM2 = 0;
    10b2:	e6 ef       	ldi	r30, 0xF6	; 246
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	10 82       	st	Z, r1
		CANIDM3 = 0;
    10b8:	e5 ef       	ldi	r30, 0xF5	; 245
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	10 82       	st	Z, r1
		CANIDM4 = 0;
    10be:	e4 ef       	ldi	r30, 0xF4	; 244
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	06 c0       	rjmp	.+12     	; 0x10d4 <CAN_InitModule+0x6e>
			CANMSG = 0;
    10c8:	ea ef       	ldi	r30, 0xFA	; 250
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	b8 f3       	brcs	.-18     	; 0x10c8 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	8f 30       	cpi	r24, 0x0F	; 15
    10e4:	58 f2       	brcs	.-106    	; 0x107c <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    10e6:	e8 ed       	ldi	r30, 0xD8	; 216
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    10ee:	e2 ee       	ldi	r30, 0xE2	; 226
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    10f6:	e3 ee       	ldi	r30, 0xE3	; 227
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    10fe:	e4 ee       	ldi	r30, 0xE4	; 228
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8e e5       	ldi	r24, 0x5E	; 94
    1104:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    1106:	e5 ee       	ldi	r30, 0xE5	; 229
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    110c:	eb ed       	ldi	r30, 0xDB	; 219
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 eb       	ldi	r24, 0xB0	; 176
    1112:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    1114:	ef ed       	ldi	r30, 0xDF	; 223
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8f e7       	ldi	r24, 0x7F	; 127
    111a:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
    111c:	ee ed       	ldi	r30, 0xDE	; 222
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	80 83       	st	Z, r24
	sei();
    1124:	78 94       	sei
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <CAN_InitRxMob+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <CAN_InitRxMob+0x8>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1142:	ed ee       	ldi	r30, 0xED	; 237
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    114a:	e9 ed       	ldi	r30, 0xD9	; 217
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	82 95       	swap	r24
    1152:	8f 70       	andi	r24, 0x0F	; 15
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	88 23       	and	r24, r24
    115e:	a9 f7       	brne	.-22     	; 0x114a <CAN_InitRxMob+0x1a>
    1160:	e9 ed       	ldi	r30, 0xD9	; 217
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	86 95       	lsr	r24
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	90 70       	andi	r25, 0x00	; 0
    1174:	88 23       	and	r24, r24
    1176:	49 f7       	brne	.-46     	; 0x114a <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1178:	1a 82       	std	Y+2, r1	; 0x02
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
    117c:	ed ee       	ldi	r30, 0xED	; 237
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	82 95       	swap	r24
    1184:	80 7f       	andi	r24, 0xF0	; 240
    1186:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    1188:	ef ee       	ldi	r30, 0xEF	; 239
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	82 95       	swap	r24
    1190:	86 95       	lsr	r24
    1192:	86 95       	lsr	r24
    1194:	83 70       	andi	r24, 0x03	; 3
    1196:	88 23       	and	r24, r24
    1198:	69 f5       	brne	.+90     	; 0x11f4 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    119a:	ef ee       	ldi	r30, 0xEF	; 239
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8f e0       	ldi	r24, 0x0F	; 15
    11a0:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    11a2:	e3 ef       	ldi	r30, 0xF3	; 243
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
    11ba:	e2 ef       	ldi	r30, 0xF2	; 242
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	82 95       	swap	r24
    11c2:	88 0f       	add	r24, r24
    11c4:	80 7e       	andi	r24, 0xE0	; 224
    11c6:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    11c8:	e6 ef       	ldi	r30, 0xF6	; 246
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 ee       	ldi	r24, 0xE0	; 224
    11ce:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
    11d0:	e7 ef       	ldi	r30, 0xF7	; 247
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    11d8:	af ee       	ldi	r26, 0xEF	; 239
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ef ee       	ldi	r30, 0xEF	; 239
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 68       	ori	r24, 0x80	; 128
    11e4:	8c 93       	st	X, r24

		CANPAGE = tempPage;
    11e6:	ed ee       	ldi	r30, 0xED	; 237
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	80 83       	st	Z, r24

		return 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	8f 30       	cpi	r24, 0x0F	; 15
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <CAN_InitRxMob+0xd2>
    1200:	bd cf       	rjmp	.-134    	; 0x117c <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    1202:	ed ee       	ldi	r30, 0xED	; 237
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	80 83       	st	Z, r24

	return 0;
    120a:	1d 82       	std	Y+5, r1	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <CAN_Init+0xa>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    122e:	1b df       	rcall	.-458    	; 0x1066 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1230:	19 82       	std	Y+1, r1	; 0x01
    1232:	36 c0       	rjmp	.+108    	; 0x12a0 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	79 df       	rcall	.-270    	; 0x1130 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	8c 01       	movw	r16, r24
    124a:	0e 5e       	subi	r16, 0xEE	; 238
    124c:	1e 4f       	sbci	r17, 0xFE	; 254
    124e:	85 e0       	ldi	r24, 0x05	; 5
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	0e 94 a3 14 	call	0x2946	; 0x2946 <calloc>
    125a:	f8 01       	movw	r30, r16
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	48 2f       	mov	r20, r24
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	fc 01       	movw	r30, r24
    1274:	e6 5c       	subi	r30, 0xC6	; 198
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	10 82       	st	Z, r1
    127a:	fc 01       	movw	r30, r24
    127c:	e6 5c       	subi	r30, 0xC6	; 198
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	80 81       	ld	r24, Z
    1282:	f9 01       	movw	r30, r18
    1284:	e0 5d       	subi	r30, 0xD0	; 208
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	80 83       	st	Z, r24
    128a:	f9 01       	movw	r30, r18
    128c:	e0 5d       	subi	r30, 0xD0	; 208
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 81       	ld	r24, Z
    1292:	fa 01       	movw	r30, r20
    1294:	ea 5d       	subi	r30, 0xDA	; 218
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	99 81       	ldd	r25, Y+1	; 0x01
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	98 17       	cp	r25, r24
    12a6:	30 f2       	brcs	.-116    	; 0x1234 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <CAN_Read+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <CAN_Read+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    12c8:	e4 e3       	ldi	r30, 0x34	; 52
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	fc 01       	movw	r30, r24
    12da:	e6 5c       	subi	r30, 0xC6	; 198
    12dc:	fe 4f       	sbci	r31, 0xFE	; 254
    12de:	80 81       	ld	r24, Z
    12e0:	88 23       	and	r24, r24
    12e2:	b1 f3       	breq	.-20     	; 0x12d0 <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	30 c0       	rjmp	.+96     	; 0x1348 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	dc 01       	movw	r26, r24
    12f4:	a2 0f       	add	r26, r18
    12f6:	b3 1f       	adc	r27, r19
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	82 1b       	sub	r24, r18
    1304:	93 0b       	sbc	r25, r19
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	90 95       	com	r25
    130c:	81 95       	neg	r24
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	fc 01       	movw	r30, r24
    1312:	ee 5e       	subi	r30, 0xEE	; 238
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	40 81       	ld	r20, Z
    1318:	51 81       	ldd	r21, Z+1	; 0x01
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	fc 01       	movw	r30, r24
    1324:	e0 5d       	subi	r30, 0xD0	; 208
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	fa 01       	movw	r30, r20
    133a:	e8 0f       	add	r30, r24
    133c:	f9 1f       	adc	r31, r25
    133e:	80 81       	ld	r24, Z
    1340:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	88 30       	cpi	r24, 0x08	; 8
    134c:	68 f2       	brcs	.-102    	; 0x12e8 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	fc 01       	movw	r30, r24
    1358:	e0 5d       	subi	r30, 0xD0	; 208
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 81       	ld	r24, Z
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 83       	st	Z, r24
    1362:	80 81       	ld	r24, Z
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	41 f4       	brne	.+16     	; 0x1378 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	fc 01       	movw	r30, r24
    1372:	e0 5d       	subi	r30, 0xD0	; 208
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9c 01       	movw	r18, r24
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	30 40       	sbci	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	e6 5c       	subi	r30, 0xC6	; 198
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	80 81       	ld	r24, Z
    138c:	81 50       	subi	r24, 0x01	; 1
    138e:	f9 01       	movw	r30, r18
    1390:	e6 5c       	subi	r30, 0xC6	; 198
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	80 83       	st	Z, r24

	return 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	27 97       	sbiw	r28, 0x07	; 7
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	9d 83       	std	Y+5, r25	; 0x05
    13bc:	8c 83       	std	Y+4, r24	; 0x04
    13be:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    13c0:	e9 ed       	ldi	r30, 0xD9	; 217
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	82 95       	swap	r24
    13c8:	8f 70       	andi	r24, 0x0F	; 15
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	90 70       	andi	r25, 0x00	; 0
    13d2:	88 23       	and	r24, r24
    13d4:	a9 f7       	brne	.-22     	; 0x13c0 <CAN_Write+0x1a>
    13d6:	e9 ed       	ldi	r30, 0xD9	; 217
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	86 95       	lsr	r24
    13de:	86 95       	lsr	r24
    13e0:	86 95       	lsr	r24
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	88 23       	and	r24, r24
    13ec:	49 f7       	brne	.-46     	; 0x13c0 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    13ee:	ed ee       	ldi	r30, 0xED	; 237
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	12 c0       	rjmp	.+36     	; 0x141e <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
    13fa:	ed ee       	ldi	r30, 0xED	; 237
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	82 95       	swap	r24
    1402:	80 7f       	andi	r24, 0xF0	; 240
    1404:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    1406:	ef ee       	ldi	r30, 0xEF	; 239
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	82 95       	swap	r24
    140e:	86 95       	lsr	r24
    1410:	86 95       	lsr	r24
    1412:	83 70       	andi	r24, 0x03	; 3
    1414:	88 23       	and	r24, r24
    1416:	31 f0       	breq	.+12     	; 0x1424 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	8f 5f       	subi	r24, 0xFF	; 255
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	8f 30       	cpi	r24, 0x0F	; 15
    1422:	58 f3       	brcs	.-42     	; 0x13fa <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	8f 30       	cpi	r24, 0x0F	; 15
    1428:	19 f4       	brne	.+6      	; 0x1430 <CAN_Write+0x8a>
		return -1;
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	8f 83       	std	Y+7, r24	; 0x07
    142e:	32 c0       	rjmp	.+100    	; 0x1494 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1430:	e2 ef       	ldi	r30, 0xF2	; 242
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8e 81       	ldd	r24, Y+6	; 0x06
    1436:	82 95       	swap	r24
    1438:	88 0f       	add	r24, r24
    143a:	80 7e       	andi	r24, 0xE0	; 224
    143c:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    143e:	e3 ef       	ldi	r30, 0xF3	; 243
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8e 81       	ldd	r24, Y+6	; 0x06
    1444:	86 95       	lsr	r24
    1446:	86 95       	lsr	r24
    1448:	86 95       	lsr	r24
    144a:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    144c:	ef ee       	ldi	r30, 0xEF	; 239
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1454:	1b 82       	std	Y+3, r1	; 0x03
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <CAN_Write+0xd0>
		CANMSG = data[i];
    1458:	aa ef       	ldi	r26, 0xFA	; 250
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	fc 01       	movw	r30, r24
    1468:	e2 0f       	add	r30, r18
    146a:	f3 1f       	adc	r31, r19
    146c:	80 81       	ld	r24, Z
    146e:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	70 f3       	brcs	.-36     	; 0x1458 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    147c:	af ee       	ldi	r26, 0xEF	; 239
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ef ee       	ldi	r30, 0xEF	; 239
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 64       	ori	r24, 0x40	; 64
    1488:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    148a:	ed ee       	ldi	r30, 0xED	; 237
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	80 83       	st	Z, r24

	return 0;
    1492:	1f 82       	std	Y+7, r1	; 0x07
    1494:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1496:	27 96       	adiw	r28, 0x07	; 7
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	2c 97       	sbiw	r28, 0x0c	; 12
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	89 87       	std	Y+9, r24	; 0x09
    14be:	6a 87       	std	Y+10, r22	; 0x0a
    14c0:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14c2:	80 91 08 01 	lds	r24, 0x0108
    14c6:	90 91 09 01 	lds	r25, 0x0109
    14ca:	9c 83       	std	Y+4, r25	; 0x04
    14cc:	8b 83       	std	Y+3, r24	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	06 97       	sbiw	r24, 0x06	; 6
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	8f 83       	std	Y+7, r24	; 0x07
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    14da:	ef 81       	ldd	r30, Y+7	; 0x07
    14dc:	f8 85       	ldd	r31, Y+8	; 0x08
    14de:	90 81       	ld	r25, Z
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	98 17       	cp	r25, r24
    14e4:	19 f4       	brne	.+6      	; 0x14ec <gpio_register_pin+0x44>
            return 1;
    14e6:	21 e0       	ldi	r18, 0x01	; 1
    14e8:	2c 87       	std	Y+12, r18	; 0x0c
    14ea:	c9 c0       	rjmp	.+402    	; 0x167e <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14ec:	ef 81       	ldd	r30, Y+7	; 0x07
    14ee:	f8 85       	ldd	r31, Y+8	; 0x08
    14f0:	80 85       	ldd	r24, Z+8	; 0x08
    14f2:	91 85       	ldd	r25, Z+9	; 0x09
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	06 97       	sbiw	r24, 0x06	; 6
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	8f 83       	std	Y+7, r24	; 0x07
    1502:	8f 81       	ldd	r24, Y+7	; 0x07
    1504:	98 85       	ldd	r25, Y+8	; 0x08
    1506:	06 96       	adiw	r24, 0x06	; 6
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	86 30       	cpi	r24, 0x06	; 6
    150c:	92 07       	cpc	r25, r18
    150e:	29 f7       	brne	.-54     	; 0x14da <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	87 70       	andi	r24, 0x07	; 7
    1520:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1522:	8a 85       	ldd	r24, Y+10	; 0x0a
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	09 f0       	breq	.+2      	; 0x152a <gpio_register_pin+0x82>
    1528:	48 c0       	rjmp	.+144    	; 0x15ba <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	c9 01       	movw	r24, r18
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	4e 96       	adiw	r24, 0x1e	; 30
    153c:	dc 01       	movw	r26, r24
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	c9 01       	movw	r24, r18
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
    154e:	4e 96       	adiw	r24, 0x1e	; 30
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <gpio_register_pin+0xbe>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	2a 95       	dec	r18
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <gpio_register_pin+0xba>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    156e:	8e 81       	ldd	r24, Y+6	; 0x06
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	c9 01       	movw	r24, r18
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	82 0f       	add	r24, r18
    157c:	93 1f       	adc	r25, r19
    157e:	4f 96       	adiw	r24, 0x1f	; 31
    1580:	dc 01       	movw	r26, r24
    1582:	8e 81       	ldd	r24, Y+6	; 0x06
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	4f 96       	adiw	r24, 0x1f	; 31
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <gpio_register_pin+0x104>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <gpio_register_pin+0x100>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
        return 0;
    15b6:	1c 86       	std	Y+12, r1	; 0x0c
    15b8:	62 c0       	rjmp	.+196    	; 0x167e <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	c9 01       	movw	r24, r18
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	4e 96       	adiw	r24, 0x1e	; 30
    15cc:	dc 01       	movw	r26, r24
    15ce:	8e 81       	ldd	r24, Y+6	; 0x06
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	4e 96       	adiw	r24, 0x1e	; 30
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <gpio_register_pin+0x14e>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	2a 95       	dec	r18
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <gpio_register_pin+0x14a>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1600:	8e 81       	ldd	r24, Y+6	; 0x06
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	c9 01       	movw	r24, r18
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	4f 96       	adiw	r24, 0x1f	; 31
    1612:	dc 01       	movw	r26, r24
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	c9 01       	movw	r24, r18
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	4f 96       	adiw	r24, 0x1f	; 31
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <gpio_register_pin+0x194>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	2a 95       	dec	r18
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <gpio_register_pin+0x190>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1644:	8a e0       	ldi	r24, 0x0A	; 10
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 bd 14 	call	0x297a	; 0x297a <malloc>
    164c:	98 87       	std	Y+8, r25	; 0x08
    164e:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1650:	8f 81       	ldd	r24, Y+7	; 0x07
    1652:	98 85       	ldd	r25, Y+8	; 0x08
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	19 f4       	brne	.+6      	; 0x165e <gpio_register_pin+0x1b6>
        return 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	8c 87       	std	Y+12, r24	; 0x0c
    165c:	10 c0       	rjmp	.+32     	; 0x167e <gpio_register_pin+0x1d6>

    input->pin       = pin;
    165e:	ef 81       	ldd	r30, Y+7	; 0x07
    1660:	f8 85       	ldd	r31, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1666:	ef 81       	ldd	r30, Y+7	; 0x07
    1668:	f8 85       	ldd	r31, Y+8	; 0x08
    166a:	8b 85       	ldd	r24, Y+11	; 0x0b
    166c:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    166e:	8f 81       	ldd	r24, Y+7	; 0x07
    1670:	98 85       	ldd	r25, Y+8	; 0x08
    1672:	06 96       	adiw	r24, 0x06	; 6
    1674:	26 e0       	ldi	r18, 0x06	; 6
    1676:	31 e0       	ldi	r19, 0x01	; 1
    1678:	b9 01       	movw	r22, r18
    167a:	0b d0       	rcall	.+22     	; 0x1692 <list_add>

    return 0;
    167c:	1c 86       	std	Y+12, r1	; 0x0c
    167e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1680:	2c 96       	adiw	r28, 0x0c	; 12
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <list_add+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <list_add+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	7c 83       	std	Y+4, r23	; 0x04
    16a4:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	42 81       	ldd	r20, Z+2	; 0x02
    16ac:	53 81       	ldd	r21, Z+3	; 0x03
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	b9 01       	movw	r22, r18
    16b8:	07 d0       	rcall	.+14     	; 0x16c8 <__list_add>
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <__list_add+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <__list_add+0x8>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <__list_add+0xa>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	7c 83       	std	Y+4, r23	; 0x04
    16dc:	6b 83       	std	Y+3, r22	; 0x03
    16de:	5e 83       	std	Y+6, r21	; 0x06
    16e0:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    16e2:	ed 81       	ldd	r30, Y+5	; 0x05
    16e4:	fe 81       	ldd	r31, Y+6	; 0x06
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    new->next = next;
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    16fa:	e9 81       	ldd	r30, Y+1	; 0x01
    16fc:	fa 81       	ldd	r31, Y+2	; 0x02
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    prev->next = new;
    1706:	eb 81       	ldd	r30, Y+3	; 0x03
    1708:	fc 81       	ldd	r31, Y+4	; 0x04
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	93 83       	std	Z+3, r25	; 0x03
    1710:	82 83       	std	Z+2, r24	; 0x02
}
    1712:	26 96       	adiw	r28, 0x06	; 6
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <__gpio_read_pin+0x6>
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	86 95       	lsr	r24
    1736:	86 95       	lsr	r24
    1738:	86 95       	lsr	r24
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	87 70       	andi	r24, 0x07	; 7
    1742:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	c9 01       	movw	r24, r18
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	4d 96       	adiw	r24, 0x1d	; 29
    1756:	fc 01       	movw	r30, r24
    1758:	80 81       	ld	r24, Z
    175a:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <__gpio_read_pin+0x4c>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <__gpio_read_pin+0x48>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	2b 97       	sbiw	r28, 0x0b	; 11
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    179a:	80 91 08 01 	lds	r24, 0x0108
    179e:	90 91 09 01 	lds	r25, 0x0109
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	06 97       	sbiw	r24, 0x06	; 6
    17ac:	98 87       	std	Y+8, r25	; 0x08
    17ae:	8f 83       	std	Y+7, r24	; 0x07
    17b0:	55 c0       	rjmp	.+170    	; 0x185c <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    17b2:	ef 81       	ldd	r30, Y+7	; 0x07
    17b4:	f8 85       	ldd	r31, Y+8	; 0x08
    17b6:	90 81       	ld	r25, Z
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	98 17       	cp	r25, r24
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <gpio_read_pin+0x3c>
    17be:	43 c0       	rjmp	.+134    	; 0x1846 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    17c0:	1c 82       	std	Y+4, r1	; 0x04
    17c2:	21 c0       	rjmp	.+66     	; 0x1806 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8f 81       	ldd	r24, Y+7	; 0x07
    17cc:	98 85       	ldd	r25, Y+8	; 0x08
    17ce:	82 0f       	add	r24, r18
    17d0:	93 1f       	adc	r25, r19
    17d2:	fc 01       	movw	r30, r24
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	40 81       	ld	r20, Z
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9c 01       	movw	r18, r24
    17e0:	2f 5f       	subi	r18, 0xFF	; 255
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	8f 81       	ldd	r24, Y+7	; 0x07
    17e6:	98 85       	ldd	r25, Y+8	; 0x08
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	fc 01       	movw	r30, r24
    17ee:	32 96       	adiw	r30, 0x02	; 2
    17f0:	80 81       	ld	r24, Z
    17f2:	48 17       	cp	r20, r24
    17f4:	29 f0       	breq	.+10     	; 0x1800 <gpio_read_pin+0x7c>
                    return input->previous_state;
    17f6:	ef 81       	ldd	r30, Y+7	; 0x07
    17f8:	f8 85       	ldd	r31, Y+8	; 0x08
    17fa:	25 81       	ldd	r18, Z+5	; 0x05
    17fc:	2b 87       	std	Y+11, r18	; 0x0b
    17fe:	38 c0       	rjmp	.+112    	; 0x1870 <gpio_read_pin+0xec>
                i++;
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	e0 f2       	brcs	.-72     	; 0x17c4 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    180c:	ef 81       	ldd	r30, Y+7	; 0x07
    180e:	f8 85       	ldd	r31, Y+8	; 0x08
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	89 27       	eor	r24, r25
    1816:	88 23       	and	r24, r24
    1818:	29 f0       	breq	.+10     	; 0x1824 <gpio_read_pin+0xa0>
    181a:	ef 81       	ldd	r30, Y+7	; 0x07
    181c:	f8 85       	ldd	r31, Y+8	; 0x08
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	8a 87       	std	Y+10, r24	; 0x0a
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <gpio_read_pin+0xb0>
    1824:	ef 81       	ldd	r30, Y+7	; 0x07
    1826:	f8 85       	ldd	r31, Y+8	; 0x08
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	1a 86       	std	Y+10, r1	; 0x0a
    182c:	88 23       	and	r24, r24
    182e:	11 f4       	brne	.+4      	; 0x1834 <gpio_read_pin+0xb0>
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	2a 87       	std	Y+10, r18	; 0x0a
    1834:	8a 85       	ldd	r24, Y+10	; 0x0a
    1836:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1838:	ef 81       	ldd	r30, Y+7	; 0x07
    183a:	f8 85       	ldd	r31, Y+8	; 0x08
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	2b 87       	std	Y+11, r18	; 0x0b
    1844:	15 c0       	rjmp	.+42     	; 0x1870 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1846:	ef 81       	ldd	r30, Y+7	; 0x07
    1848:	f8 85       	ldd	r31, Y+8	; 0x08
    184a:	80 85       	ldd	r24, Z+8	; 0x08
    184c:	91 85       	ldd	r25, Z+9	; 0x09
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	06 97       	sbiw	r24, 0x06	; 6
    1858:	98 87       	std	Y+8, r25	; 0x08
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	8f 81       	ldd	r24, Y+7	; 0x07
    185e:	98 85       	ldd	r25, Y+8	; 0x08
    1860:	06 96       	adiw	r24, 0x06	; 6
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	86 30       	cpi	r24, 0x06	; 6
    1866:	92 07       	cpc	r25, r18
    1868:	09 f0       	breq	.+2      	; 0x186c <gpio_read_pin+0xe8>
    186a:	a3 cf       	rjmp	.-186    	; 0x17b2 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	8b 87       	std	Y+11, r24	; 0x0b
    1870:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1872:	2b 96       	adiw	r28, 0x0b	; 11
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <gpio_debouncer+0xa>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <gpio_debouncer+0xc>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <gpio_debouncer+0xe>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1896:	80 91 08 01 	lds	r24, 0x0108
    189a:	90 91 09 01 	lds	r25, 0x0109
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	06 97       	sbiw	r24, 0x06	; 6
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	1b c0       	rjmp	.+54     	; 0x18e4 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    18ae:	00 91 44 01 	lds	r16, 0x0144
    18b2:	10 91 45 01 	lds	r17, 0x0145
    18b6:	ed 81       	ldd	r30, Y+5	; 0x05
    18b8:	fe 81       	ldd	r31, Y+6	; 0x06
    18ba:	80 81       	ld	r24, Z
    18bc:	33 df       	rcall	.-410    	; 0x1724 <__gpio_read_pin>
    18be:	28 2f       	mov	r18, r24
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	80 0f       	add	r24, r16
    18c6:	91 1f       	adc	r25, r17
    18c8:	fc 01       	movw	r30, r24
    18ca:	32 96       	adiw	r30, 0x02	; 2
    18cc:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    18ce:	ed 81       	ldd	r30, Y+5	; 0x05
    18d0:	fe 81       	ldd	r31, Y+6	; 0x06
    18d2:	80 85       	ldd	r24, Z+8	; 0x08
    18d4:	91 85       	ldd	r25, Z+9	; 0x09
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	06 97       	sbiw	r24, 0x06	; 6
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	06 96       	adiw	r24, 0x06	; 6
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	86 30       	cpi	r24, 0x06	; 6
    18ee:	92 07       	cpc	r25, r18
    18f0:	f1 f6       	brne	.-68     	; 0x18ae <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    18f2:	80 91 44 01 	lds	r24, 0x0144
    18f6:	90 91 45 01 	lds	r25, 0x0145
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	90 93 45 01 	sts	0x0145, r25
    1900:	80 93 44 01 	sts	0x0144, r24
    1904:	80 91 44 01 	lds	r24, 0x0144
    1908:	90 91 45 01 	lds	r25, 0x0145
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	91 05       	cpc	r25, r1
    1910:	21 f4       	brne	.+8      	; 0x191a <gpio_debouncer+0x96>
        count = 0;
    1912:	10 92 45 01 	sts	0x0145, r1
    1916:	10 92 44 01 	sts	0x0144, r1
	
}
    191a:	26 96       	adiw	r28, 0x06	; 6
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	67 97       	sbiw	r28, 0x17	; 23
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1946:	90 91 46 01 	lds	r25, 0x0146
    194a:	8f 89       	ldd	r24, Y+23	; 0x17
    194c:	89 17       	cp	r24, r25
    194e:	09 f4       	brne	.+2      	; 0x1952 <odometry_set_speed+0x22>
    1950:	7b c0       	rjmp	.+246    	; 0x1a48 <odometry_set_speed+0x118>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1952:	86 e5       	ldi	r24, 0x56	; 86
    1954:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	88 8b       	std	Y+16, r24	; 0x10
    195a:	6c c0       	rjmp	.+216    	; 0x1a34 <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a8 e4       	ldi	r26, 0x48	; 72
    1962:	b2 e4       	ldi	r27, 0x42	; 66
    1964:	8b 87       	std	Y+11, r24	; 0x0b
    1966:	9c 87       	std	Y+12, r25	; 0x0c
    1968:	ad 87       	std	Y+13, r26	; 0x0d
    196a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e4       	ldi	r19, 0x40	; 64
    1978:	4c e1       	ldi	r20, 0x1C	; 28
    197a:	55 e4       	ldi	r21, 0x45	; 69
    197c:	81 d7       	rcall	.+3842   	; 0x2880 <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8f 83       	std	Y+7, r24	; 0x07
    1984:	98 87       	std	Y+8, r25	; 0x08
    1986:	a9 87       	std	Y+9, r26	; 0x09
    1988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	1f d6       	rcall	.+3134   	; 0x25da <__cmpsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <odometry_set_speed+0x7a>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	3b c0       	rjmp	.+118    	; 0x1a20 <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	5e d7       	rcall	.+3772   	; 0x2878 <__gesf2>
    19bc:	18 16       	cp	r1, r24
    19be:	3c f5       	brge	.+78     	; 0x1a0e <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	57 d7       	rcall	.+3758   	; 0x2880 <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	70 d6       	rcall	.+3296   	; 0x26bc <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <odometry_set_speed+0xd4>
    19e6:	8a ef       	ldi	r24, 0xFA	; 250
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <odometry_set_speed+0xc2>
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <odometry_set_speed+0xb6>
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	52 d6       	rcall	.+3236   	; 0x26bc <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <odometry_set_speed+0xfc>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	ce 01       	movw	r24, r28
    1a36:	0f 96       	adiw	r24, 0x0f	; 15
    1a38:	63 ec       	ldi	r22, 0xC3	; 195
    1a3a:	b5 dc       	rcall	.-1686   	; 0x13a6 <CAN_Write>
    1a3c:	88 23       	and	r24, r24
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <odometry_set_speed+0x112>
    1a40:	8d cf       	rjmp	.-230    	; 0x195c <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	80 93 46 01 	sts	0x0146, r24
}
    1a48:	67 96       	adiw	r28, 0x17	; 23
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <odometry_query_position>:

static void odometry_query_position(void)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	66 97       	sbiw	r28, 0x16	; 22
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1a6e:	80 e5       	ldi	r24, 0x50	; 80
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
    1a72:	6c c0       	rjmp	.+216    	; 0x1b4c <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a8 e4       	ldi	r26, 0x48	; 72
    1a7a:	b2 e4       	ldi	r27, 0x42	; 66
    1a7c:	8b 87       	std	Y+11, r24	; 0x0b
    1a7e:	9c 87       	std	Y+12, r25	; 0x0c
    1a80:	ad 87       	std	Y+13, r26	; 0x0d
    1a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e4       	ldi	r19, 0x40	; 64
    1a90:	4c e1       	ldi	r20, 0x1C	; 28
    1a92:	55 e4       	ldi	r21, 0x45	; 69
    1a94:	f5 d6       	rcall	.+3562   	; 0x2880 <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
    1a9c:	98 87       	std	Y+8, r25	; 0x08
    1a9e:	a9 87       	std	Y+9, r26	; 0x09
    1aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	93 d5       	rcall	.+2854   	; 0x25da <__cmpsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <odometry_query_position+0x68>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	3b c0       	rjmp	.+118    	; 0x1b38 <odometry_query_position+0xde>
	else if (__tmp > 65535)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	d2 d6       	rcall	.+3492   	; 0x2878 <__gesf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	3c f5       	brge	.+78     	; 0x1b26 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	cb d6       	rcall	.+3478   	; 0x2880 <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	e4 d5       	rcall	.+3016   	; 0x26bc <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <odometry_query_position+0xc2>
    1afe:	8a ef       	ldi	r24, 0xFA	; 250
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <odometry_query_position+0xb0>
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <odometry_query_position+0xa4>
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	c6 d5       	rcall	.+2956   	; 0x26bc <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <odometry_query_position+0xea>
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0f 96       	adiw	r24, 0x0f	; 15
    1b50:	63 ec       	ldi	r22, 0xC3	; 195
    1b52:	29 dc       	rcall	.-1966   	; 0x13a6 <CAN_Write>
    1b54:	88 23       	and	r24, r24
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <odometry_query_position+0x100>
    1b58:	8d cf       	rjmp	.-230    	; 0x1a74 <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	0f 96       	adiw	r24, 0x0f	; 15
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	aa db       	rcall	.-2220   	; 0x12b6 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b64:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1b68:	88 89       	ldd	r24, Y+16	; 0x10
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	38 2f       	mov	r19, r24
    1b70:	22 27       	eor	r18, r18
    1b72:	89 89       	ldd	r24, Y+17	; 0x11
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	82 2b       	or	r24, r18
    1b7a:	93 2b       	or	r25, r19
    1b7c:	90 93 0b 01 	sts	0x010B, r25
    1b80:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1b84:	8a 89       	ldd	r24, Y+18	; 0x12
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	38 2f       	mov	r19, r24
    1b8c:	22 27       	eor	r18, r18
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	82 2b       	or	r24, r18
    1b96:	93 2b       	or	r25, r19
    1b98:	90 93 0d 01 	sts	0x010D, r25
    1b9c:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1ba0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	38 2f       	mov	r19, r24
    1ba8:	22 27       	eor	r18, r18
    1baa:	8d 89       	ldd	r24, Y+21	; 0x15
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	82 2b       	or	r24, r18
    1bb2:	93 2b       	or	r25, r19
    1bb4:	90 93 0f 01 	sts	0x010F, r25
    1bb8:	80 93 0e 01 	sts	0x010E, r24
}
    1bbc:	66 96       	adiw	r28, 0x16	; 22
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	27 97       	sbiw	r28, 0x07	; 7
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1be6:	41 d2       	rcall	.+1154   	; 0x206a <system_get_system_time>
    1be8:	aa 27       	eor	r26, r26
    1bea:	97 fd       	sbrc	r25, 7
    1bec:	a0 95       	com	r26
    1bee:	ba 2f       	mov	r27, r26
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	ab 83       	std	Y+3, r26	; 0x03
    1bf6:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    1bf8:	30 df       	rcall	.-416    	; 0x1a5a <odometry_query_position>
		//nije uso
		if(callback != NULL)
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	ab 81       	ldd	r26, Y+3	; 0x03
    1c08:	bc 81       	ldd	r27, Y+4	; 0x04
    1c0a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c0c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	09 95       	icall
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	8f 83       	std	Y+7, r24	; 0x07
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1c1e:	80 91 10 01 	lds	r24, 0x0110
    1c22:	8d 34       	cpi	r24, 0x4D	; 77
    1c24:	49 f3       	breq	.-46     	; 0x1bf8 <odometry_wait_until_done+0x2a>
    1c26:	80 91 10 01 	lds	r24, 0x0110
    1c2a:	82 35       	cpi	r24, 0x52	; 82
    1c2c:	29 f3       	breq	.-54     	; 0x1bf8 <odometry_wait_until_done+0x2a>
	
	return ODOMETRY_SUCCESS;
    1c2e:	1f 82       	std	Y+7, r1	; 0x07
    1c30:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1c32:	27 96       	adiw	r28, 0x07	; 7
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	6b 97       	sbiw	r28, 0x1b	; 27
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	98 8f       	std	Y+24, r25	; 0x18
    1c5a:	8f 8b       	std	Y+23, r24	; 0x17
    1c5c:	69 8f       	std	Y+25, r22	; 0x19
    1c5e:	5b 8f       	std	Y+27, r21	; 0x1b
    1c60:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1c62:	89 8d       	ldd	r24, Y+25	; 0x19
    1c64:	65 de       	rcall	.-822    	; 0x1930 <odometry_set_speed>
	distance *= -1;
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6a:	90 95       	com	r25
    1c6c:	81 95       	neg	r24
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	98 8f       	std	Y+24, r25	; 0x18
    1c72:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    1c74:	84 e4       	ldi	r24, 0x44	; 68
    1c76:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	89 2f       	mov	r24, r25
    1c7e:	99 0f       	add	r25, r25
    1c80:	99 0b       	sbc	r25, r25
    1c82:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1c84:	8f 89       	ldd	r24, Y+23	; 0x17
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    1c88:	6c c0       	rjmp	.+216    	; 0x1d62 <odometry_move_straight+0x11e>
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a8 e4       	ldi	r26, 0x48	; 72
    1c90:	b2 e4       	ldi	r27, 0x42	; 66
    1c92:	8b 87       	std	Y+11, r24	; 0x0b
    1c94:	9c 87       	std	Y+12, r25	; 0x0c
    1c96:	ad 87       	std	Y+13, r26	; 0x0d
    1c98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e4       	ldi	r19, 0x40	; 64
    1ca6:	4c e1       	ldi	r20, 0x1C	; 28
    1ca8:	55 e4       	ldi	r21, 0x45	; 69
    1caa:	ea d5       	rcall	.+3028   	; 0x2880 <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8f 83       	std	Y+7, r24	; 0x07
    1cb2:	98 87       	std	Y+8, r25	; 0x08
    1cb4:	a9 87       	std	Y+9, r26	; 0x09
    1cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	88 d4       	rcall	.+2320   	; 0x25da <__cmpsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <odometry_move_straight+0x94>
		__ticks = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	3b c0       	rjmp	.+118    	; 0x1d4e <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	4f e7       	ldi	r20, 0x7F	; 127
    1ce6:	57 e4       	ldi	r21, 0x47	; 71
    1ce8:	c7 d5       	rcall	.+2958   	; 0x2878 <__gesf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	3c f5       	brge	.+78     	; 0x1d3c <odometry_move_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	c0 d5       	rcall	.+2944   	; 0x2880 <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	d9 d4       	rcall	.+2482   	; 0x26bc <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <odometry_move_straight+0xee>
    1d14:	8a ef       	ldi	r24, 0xFA	; 250
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <odometry_move_straight+0xdc>
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <odometry_move_straight+0xd0>
    1d3a:	13 c0       	rjmp	.+38     	; 0x1d62 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	bb d4       	rcall	.+2422   	; 0x26bc <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <odometry_move_straight+0x116>
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	ce 01       	movw	r24, r28
    1d64:	0f 96       	adiw	r24, 0x0f	; 15
    1d66:	63 ec       	ldi	r22, 0xC3	; 195
    1d68:	1e db       	rcall	.-2500   	; 0x13a6 <CAN_Write>
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <odometry_move_straight+0x12c>
    1d6e:	8d cf       	rjmp	.-230    	; 0x1c8a <odometry_move_straight+0x46>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    1d70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d74:	2c df       	rcall	.-424    	; 0x1bce <odometry_wait_until_done>
}
    1d76:	6b 96       	adiw	r28, 0x1b	; 27
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <odometry_rotate>:
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
		_delay_ms(50);
}

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	6b 97       	sbiw	r28, 0x1b	; 27
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	98 8f       	std	Y+24, r25	; 0x18
    1d9e:	8f 8b       	std	Y+23, r24	; 0x17
    1da0:	69 8f       	std	Y+25, r22	; 0x19
    1da2:	5b 8f       	std	Y+27, r21	; 0x1b
    1da4:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1da6:	89 8d       	ldd	r24, Y+25	; 0x19
    1da8:	c3 dd       	rcall	.-1146   	; 0x1930 <odometry_set_speed>

	angle *= -1;
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	90 95       	com	r25
    1db0:	81 95       	neg	r24
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	98 8f       	std	Y+24, r25	; 0x18
    1db6:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    1db8:	84 e5       	ldi	r24, 0x54	; 84
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	89 2f       	mov	r24, r25
    1dc2:	99 0f       	add	r25, r25
    1dc4:	99 0b       	sbc	r25, r25
    1dc6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	89 8b       	std	Y+17, r24	; 0x11
    1dcc:	6c c0       	rjmp	.+216    	; 0x1ea6 <odometry_rotate+0x11e>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a8 e4       	ldi	r26, 0x48	; 72
    1dd4:	b2 e4       	ldi	r27, 0x42	; 66
    1dd6:	8b 87       	std	Y+11, r24	; 0x0b
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	ad 87       	std	Y+13, r26	; 0x0d
    1ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e4       	ldi	r19, 0x40	; 64
    1dea:	4c e1       	ldi	r20, 0x1C	; 28
    1dec:	55 e4       	ldi	r21, 0x45	; 69
    1dee:	48 d5       	rcall	.+2704   	; 0x2880 <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	a9 87       	std	Y+9, r26	; 0x09
    1dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	e6 d3       	rcall	.+1996   	; 0x25da <__cmpsf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <odometry_rotate+0x94>
		__ticks = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	3b c0       	rjmp	.+118    	; 0x1e92 <odometry_rotate+0x10a>
	else if (__tmp > 65535)
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	25 d5       	rcall	.+2634   	; 0x2878 <__gesf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	3c f5       	brge	.+78     	; 0x1e80 <odometry_rotate+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	1e d5       	rcall	.+2620   	; 0x2880 <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	37 d4       	rcall	.+2158   	; 0x26bc <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <odometry_rotate+0xee>
    1e58:	8a ef       	ldi	r24, 0xFA	; 250
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <odometry_rotate+0xdc>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <odometry_rotate+0xd0>
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <odometry_rotate+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	19 d4       	rcall	.+2098   	; 0x26bc <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <odometry_rotate+0x116>
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	0f 96       	adiw	r24, 0x0f	; 15
    1eaa:	63 ec       	ldi	r22, 0xC3	; 195
    1eac:	7c da       	rcall	.-2824   	; 0x13a6 <CAN_Write>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <odometry_rotate+0x12c>
    1eb2:	8d cf       	rjmp	.-230    	; 0x1dce <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1eb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eb6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eb8:	8a de       	rcall	.-748    	; 0x1bce <odometry_wait_until_done>

}
    1eba:	6b 96       	adiw	r28, 0x1b	; 27
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <timer_register_callback+0x6>
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	90 93 48 01 	sts	0x0148, r25
    1ee2:	80 93 47 01 	sts	0x0147, r24
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <timer_init>:
	returned = combination_check();
}


void timer_init(unsigned int freq)
{
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <timer_init+0xa>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1f02:	e0 e8       	ldi	r30, 0x80	; 128
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1f08:	e1 e8       	ldi	r30, 0x81	; 129
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	89 e0       	ldi	r24, 0x09	; 9
    1f0e:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1f10:	08 e8       	ldi	r16, 0x88	; 136
    1f12:	10 e0       	ldi	r17, 0x00	; 0
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	cc 01       	movw	r24, r24
    1f1a:	a0 e0       	ldi	r26, 0x00	; 0
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	f8 d3       	rcall	.+2032   	; 0x2714 <__floatunsisf>
    1f24:	9b 01       	movw	r18, r22
    1f26:	ac 01       	movw	r20, r24
    1f28:	60 e8       	ldi	r22, 0x80	; 128
    1f2a:	76 e9       	ldi	r23, 0x96	; 150
    1f2c:	88 e1       	ldi	r24, 0x18	; 24
    1f2e:	9b e4       	ldi	r25, 0x4B	; 75
    1f30:	58 d3       	rcall	.+1712   	; 0x25e2 <__divsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	e7 d2       	rcall	.+1486   	; 0x2512 <__addsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	b7 d3       	rcall	.+1902   	; 0x26bc <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1f58:	ef e6       	ldi	r30, 0x6F	; 111
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 83       	st	Z, r24

	SREG |= 0x80;
    1f60:	af e5       	ldi	r26, 0x5F	; 95
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ef e5       	ldi	r30, 0x5F	; 95
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 68       	ori	r24, 0x80	; 128
    1f6c:	8c 93       	st	X, r24
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    1f7c:	1f 92       	push	r1
    1f7e:	0f 92       	push	r0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	0f 92       	push	r0
    1f84:	00 90 5b 00 	lds	r0, 0x005B
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1fac:	80 91 47 01 	lds	r24, 0x0147
    1fb0:	90 91 48 01 	lds	r25, 0x0148
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <__vector_12+0x46>
        timer_callback();
    1fb8:	e0 91 47 01 	lds	r30, 0x0147
    1fbc:	f0 91 48 01 	lds	r31, 0x0148
    1fc0:	09 95       	icall
	if(sys_time >= 90000)
    1fc2:	80 91 49 01 	lds	r24, 0x0149
    1fc6:	90 91 4a 01 	lds	r25, 0x014A
    1fca:	a0 91 4b 01 	lds	r26, 0x014B
    1fce:	b0 91 4c 01 	lds	r27, 0x014C
    1fd2:	80 39       	cpi	r24, 0x90	; 144
    1fd4:	2f e5       	ldi	r18, 0x5F	; 95
    1fd6:	92 07       	cpc	r25, r18
    1fd8:	21 e0       	ldi	r18, 0x01	; 1
    1fda:	a2 07       	cpc	r26, r18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	b2 07       	cpc	r27, r18
    1fe0:	10 f0       	brcs	.+4      	; 0x1fe6 <__vector_12+0x6a>
		actuators_umbrella();
    1fe2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <actuators_umbrella>
	sys_time++;
    1fe6:	80 91 49 01 	lds	r24, 0x0149
    1fea:	90 91 4a 01 	lds	r25, 0x014A
    1fee:	a0 91 4b 01 	lds	r26, 0x014B
    1ff2:	b0 91 4c 01 	lds	r27, 0x014C
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	b1 1d       	adc	r27, r1
    1ffc:	80 93 49 01 	sts	0x0149, r24
    2000:	90 93 4a 01 	sts	0x014A, r25
    2004:	a0 93 4b 01 	sts	0x014B, r26
    2008:	b0 93 4c 01 	sts	0x014C, r27
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	bf 91       	pop	r27
    2016:	af 91       	pop	r26
    2018:	9f 91       	pop	r25
    201a:	8f 91       	pop	r24
    201c:	7f 91       	pop	r23
    201e:	6f 91       	pop	r22
    2020:	5f 91       	pop	r21
    2022:	4f 91       	pop	r20
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 90       	pop	r0
    202a:	00 92 5b 00 	sts	0x005B, r0
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <system_reset_system_time>:
void system_reset_system_time(void)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2040:	10 92 49 01 	sts	0x0149, r1
    2044:	10 92 4a 01 	sts	0x014A, r1
    2048:	10 92 4b 01 	sts	0x014B, r1
    204c:	10 92 4c 01 	sts	0x014C, r1
}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <system_set_match_started>:
void system_set_match_started(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	80 93 4d 01 	sts	0x014D, r24
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2072:	80 91 49 01 	lds	r24, 0x0149
    2076:	90 91 4a 01 	lds	r25, 0x014A
    207a:	a0 91 4b 01 	lds	r26, 0x014B
    207e:	b0 91 4c 01 	lds	r27, 0x014C
}
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <system_init>:
/*uint8_t return_active_state(void)
{
	return active_state;
}*/
void system_init(void)
{	
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	6c 97       	sbiw	r28, 0x1c	; 28
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    20a0:	82 e4       	ldi	r24, 0x42	; 66
    20a2:	9c e0       	ldi	r25, 0x0C	; 12
    20a4:	13 df       	rcall	.-474    	; 0x1ecc <timer_register_callback>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a8 ec       	ldi	r26, 0xC8	; 200
    20ac:	b2 e4       	ldi	r27, 0x42	; 66
    20ae:	89 8f       	std	Y+25, r24	; 0x19
    20b0:	9a 8f       	std	Y+26, r25	; 0x1a
    20b2:	ab 8f       	std	Y+27, r26	; 0x1b
    20b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	69 8d       	ldd	r22, Y+25	; 0x19
    20b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e4       	ldi	r19, 0x40	; 64
    20c2:	4c e1       	ldi	r20, 0x1C	; 28
    20c4:	55 e4       	ldi	r21, 0x45	; 69
    20c6:	dc d3       	rcall	.+1976   	; 0x2880 <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8d 8b       	std	Y+21, r24	; 0x15
    20ce:	9e 8b       	std	Y+22, r25	; 0x16
    20d0:	af 8b       	std	Y+23, r26	; 0x17
    20d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	7a d2       	rcall	.+1268   	; 0x25da <__cmpsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <system_init+0x68>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	3b c0       	rjmp	.+118    	; 0x216a <system_init+0xde>
	else if (__tmp > 65535)
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	b9 d3       	rcall	.+1906   	; 0x2878 <__gesf2>
    2106:	18 16       	cp	r1, r24
    2108:	3c f5       	brge	.+78     	; 0x2158 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	b2 d3       	rcall	.+1892   	; 0x2880 <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	cb d2       	rcall	.+1430   	; 0x26bc <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
    212e:	0f c0       	rjmp	.+30     	; 0x214e <system_init+0xc2>
    2130:	8a ef       	ldi	r24, 0xFA	; 250
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	9a 89       	ldd	r25, Y+18	; 0x12
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <system_init+0xb0>
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <system_init+0xa4>
    2156:	13 c0       	rjmp	.+38     	; 0x217e <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6d 89       	ldd	r22, Y+21	; 0x15
    215a:	7e 89       	ldd	r23, Y+22	; 0x16
    215c:	8f 89       	ldd	r24, Y+23	; 0x17
    215e:	98 8d       	ldd	r25, Y+24	; 0x18
    2160:	ad d2       	rcall	.+1370   	; 0x26bc <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
    216a:	8b 89       	ldd	r24, Y+19	; 0x13
    216c:	9c 89       	ldd	r25, Y+20	; 0x14
    216e:	98 8b       	std	Y+16, r25	; 0x10
    2170:	8f 87       	std	Y+15, r24	; 0x0f
    2172:	8f 85       	ldd	r24, Y+15	; 0x0f
    2174:	98 89       	ldd	r25, Y+16	; 0x10
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <system_init+0xea>
    217a:	98 8b       	std	Y+16, r25	; 0x10
    217c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    217e:	88 e2       	ldi	r24, 0x28	; 40
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	91 d9       	rcall	.-3294   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    2186:	89 e2       	ldi	r24, 0x29	; 41
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	8d d9       	rcall	.-3302   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	89 d9       	rcall	.-3310   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	85 d9       	rcall	.-3318   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	81 d9       	rcall	.-3326   	; 0x14a8 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    21a6:	88 e0       	ldi	r24, 0x08	; 8
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	7d d9       	rcall	.-3334   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    21ae:	8a e0       	ldi	r24, 0x0A	; 10
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	79 d9       	rcall	.-3342   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    21b6:	8c e0       	ldi	r24, 0x0C	; 12
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	75 d9       	rcall	.-3350   	; 0x14a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    21be:	8e e0       	ldi	r24, 0x0E	; 14
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	71 d9       	rcall	.-3358   	; 0x14a8 <gpio_register_pin>
	
	
	DDRG = 0xff;
    21c6:	e3 e3       	ldi	r30, 0x33	; 51
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	80 83       	st	Z, r24
	PORTG = 0x00;
    21ce:	e4 e3       	ldi	r30, 0x34	; 52
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	10 82       	st	Z, r1
	servo_init(50);
    21d4:	82 e3       	ldi	r24, 0x32	; 50
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <servo_init>
	timer_init(1000);
    21dc:	88 ee       	ldi	r24, 0xE8	; 232
    21de:	93 e0       	ldi	r25, 0x03	; 3
    21e0:	87 de       	rcall	.-754    	; 0x1ef0 <timer_init>
	CAN_Init(1);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	1c d8       	rcall	.-4040   	; 0x121e <CAN_Init>

	actuators_setup();
    21e6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <actuators_setup>
    21ea:	6c c0       	rjmp	.+216    	; 0x22c4 <system_init+0x238>
	
	while(gpio_read_pin(JUMPER_PIN))
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e2       	ldi	r26, 0x20	; 32
    21f2:	b1 e4       	ldi	r27, 0x41	; 65
    21f4:	8b 87       	std	Y+11, r24	; 0x0b
    21f6:	9c 87       	std	Y+12, r25	; 0x0c
    21f8:	ad 87       	std	Y+13, r26	; 0x0d
    21fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e4       	ldi	r19, 0x40	; 64
    2208:	4c e1       	ldi	r20, 0x1C	; 28
    220a:	55 e4       	ldi	r21, 0x45	; 69
    220c:	39 d3       	rcall	.+1650   	; 0x2880 <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8f 83       	std	Y+7, r24	; 0x07
    2214:	98 87       	std	Y+8, r25	; 0x08
    2216:	a9 87       	std	Y+9, r26	; 0x09
    2218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221a:	6f 81       	ldd	r22, Y+7	; 0x07
    221c:	78 85       	ldd	r23, Y+8	; 0x08
    221e:	89 85       	ldd	r24, Y+9	; 0x09
    2220:	9a 85       	ldd	r25, Y+10	; 0x0a
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	d7 d1       	rcall	.+942    	; 0x25da <__cmpsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <system_init+0x1ae>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3b c0       	rjmp	.+118    	; 0x22b0 <system_init+0x224>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	16 d3       	rcall	.+1580   	; 0x2878 <__gesf2>
    224c:	18 16       	cp	r1, r24
    224e:	3c f5       	brge	.+78     	; 0x229e <system_init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0f d3       	rcall	.+1566   	; 0x2880 <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	28 d2       	rcall	.+1104   	; 0x26bc <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <system_init+0x208>
    2276:	8a ef       	ldi	r24, 0xFA	; 250
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <system_init+0x1f6>
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <system_init+0x1ea>
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <system_init+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0a d2       	rcall	.+1044   	; 0x26bc <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <system_init+0x230>
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	88 e2       	ldi	r24, 0x28	; 40
    22c6:	5e da       	rcall	.-2884   	; 0x1784 <gpio_read_pin>
    22c8:	88 23       	and	r24, r24
    22ca:	09 f0       	breq	.+2      	; 0x22ce <system_init+0x242>
    22cc:	8f cf       	rjmp	.-226    	; 0x21ec <system_init+0x160>
		_delay_ms(10);
	PORTG = 0xff;
    22ce:	e4 e3       	ldi	r30, 0x34	; 52
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	80 83       	st	Z, r24
	system_reset_system_time();
    22d6:	b0 de       	rcall	.-672    	; 0x2038 <system_reset_system_time>
	system_set_match_started();
    22d8:	be de       	rcall	.-644    	; 0x2056 <system_set_match_started>
	
}
    22da:	6c 96       	adiw	r28, 0x1c	; 28
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <__vector_23>:
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	00 90 5b 00 	lds	r0, 0x005B
    22f8:	0f 92       	push	r0
    22fa:	11 24       	eor	r1, r1
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	af 93       	push	r26
    2302:	bf 93       	push	r27
    2304:	ef 93       	push	r30
    2306:	ff 93       	push	r31
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	80 91 4e 01 	lds	r24, 0x014E
    2314:	88 23       	and	r24, r24
    2316:	d9 f0       	breq	.+54     	; 0x234e <__vector_23+0x62>
    2318:	80 91 4e 01 	lds	r24, 0x014E
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	80 93 4e 01 	sts	0x014E, r24
    2322:	a6 ec       	ldi	r26, 0xC6	; 198
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	80 91 4f 01 	lds	r24, 0x014F
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	fc 01       	movw	r30, r24
    2330:	ea 5a       	subi	r30, 0xAA	; 170
    2332:	fe 4f       	sbci	r31, 0xFE	; 254
    2334:	80 81       	ld	r24, Z
    2336:	8c 93       	st	X, r24
    2338:	80 91 4f 01 	lds	r24, 0x014F
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	80 93 4f 01 	sts	0x014F, r24
    2342:	80 91 4f 01 	lds	r24, 0x014F
    2346:	80 34       	cpi	r24, 0x40	; 64
    2348:	11 f4       	brne	.+4      	; 0x234e <__vector_23+0x62>
    234a:	10 92 4f 01 	sts	0x014F, r1
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	0f 90       	pop	r0
    2360:	00 92 5b 00 	sts	0x005B, r0
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <__vector_21>:
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	00 90 5b 00 	lds	r0, 0x005B
    237a:	0f 92       	push	r0
    237c:	11 24       	eor	r1, r1
    237e:	2f 93       	push	r18
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	e0 ec       	ldi	r30, 0xC0	; 192
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	8c 71       	andi	r24, 0x1C	; 28
    23a2:	90 70       	andi	r25, 0x00	; 0
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	d9 f4       	brne	.+54     	; 0x23de <__vector_21+0x70>
    23a8:	80 91 50 01 	lds	r24, 0x0150
    23ac:	88 2f       	mov	r24, r24
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	e6 ec       	ldi	r30, 0xC6	; 198
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	20 81       	ld	r18, Z
    23b6:	fc 01       	movw	r30, r24
    23b8:	ea 56       	subi	r30, 0x6A	; 106
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	20 83       	st	Z, r18
    23be:	80 91 50 01 	lds	r24, 0x0150
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 50 01 	sts	0x0150, r24
    23c8:	80 91 50 01 	lds	r24, 0x0150
    23cc:	80 34       	cpi	r24, 0x40	; 64
    23ce:	11 f4       	brne	.+4      	; 0x23d4 <__vector_21+0x66>
    23d0:	10 92 50 01 	sts	0x0150, r1
    23d4:	80 91 51 01 	lds	r24, 0x0151
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	80 93 51 01 	sts	0x0151, r24
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	9f 91       	pop	r25
    23ea:	8f 91       	pop	r24
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	00 92 5b 00 	sts	0x005B, r0
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_34>:
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	00 90 5b 00 	lds	r0, 0x005B
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	80 91 52 01 	lds	r24, 0x0152
    2426:	88 23       	and	r24, r24
    2428:	d9 f0       	breq	.+54     	; 0x2460 <__vector_34+0x62>
    242a:	80 91 52 01 	lds	r24, 0x0152
    242e:	81 50       	subi	r24, 0x01	; 1
    2430:	80 93 52 01 	sts	0x0152, r24
    2434:	ae ec       	ldi	r26, 0xCE	; 206
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	80 91 53 01 	lds	r24, 0x0153
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	fc 01       	movw	r30, r24
    2442:	ea 52       	subi	r30, 0x2A	; 42
    2444:	fe 4f       	sbci	r31, 0xFE	; 254
    2446:	80 81       	ld	r24, Z
    2448:	8c 93       	st	X, r24
    244a:	80 91 53 01 	lds	r24, 0x0153
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	80 93 53 01 	sts	0x0153, r24
    2454:	80 91 53 01 	lds	r24, 0x0153
    2458:	80 34       	cpi	r24, 0x40	; 64
    245a:	11 f4       	brne	.+4      	; 0x2460 <__vector_34+0x62>
    245c:	10 92 53 01 	sts	0x0153, r1
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	0f 90       	pop	r0
    2472:	00 92 5b 00 	sts	0x005B, r0
    2476:	0f 90       	pop	r0
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	0f 90       	pop	r0
    247c:	1f 90       	pop	r1
    247e:	18 95       	reti

00002480 <__vector_32>:
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	00 90 5b 00 	lds	r0, 0x005B
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	2f 93       	push	r18
    2492:	8f 93       	push	r24
    2494:	9f 93       	push	r25
    2496:	ef 93       	push	r30
    2498:	ff 93       	push	r31
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	0f 92       	push	r0
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	e8 ec       	ldi	r30, 0xC8	; 200
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	8c 71       	andi	r24, 0x1C	; 28
    24b4:	90 70       	andi	r25, 0x00	; 0
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	d9 f4       	brne	.+54     	; 0x24f0 <__vector_32+0x70>
    24ba:	80 91 54 01 	lds	r24, 0x0154
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	ee ec       	ldi	r30, 0xCE	; 206
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	20 81       	ld	r18, Z
    24c8:	fc 01       	movw	r30, r24
    24ca:	ea 5e       	subi	r30, 0xEA	; 234
    24cc:	fd 4f       	sbci	r31, 0xFD	; 253
    24ce:	20 83       	st	Z, r18
    24d0:	80 91 54 01 	lds	r24, 0x0154
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	80 93 54 01 	sts	0x0154, r24
    24da:	80 91 54 01 	lds	r24, 0x0154
    24de:	80 34       	cpi	r24, 0x40	; 64
    24e0:	11 f4       	brne	.+4      	; 0x24e6 <__vector_32+0x66>
    24e2:	10 92 54 01 	sts	0x0154, r1
    24e6:	80 91 55 01 	lds	r24, 0x0155
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	80 93 55 01 	sts	0x0155, r24
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	ff 91       	pop	r31
    24f8:	ef 91       	pop	r30
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	2f 91       	pop	r18
    2500:	0f 90       	pop	r0
    2502:	00 92 5b 00 	sts	0x005B, r0
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <__subsf3>:
    2510:	50 58       	subi	r21, 0x80	; 128

00002512 <__addsf3>:
    2512:	bb 27       	eor	r27, r27
    2514:	aa 27       	eor	r26, r26
    2516:	0e d0       	rcall	.+28     	; 0x2534 <__addsf3x>
    2518:	75 c1       	rjmp	.+746    	; 0x2804 <__fp_round>
    251a:	66 d1       	rcall	.+716    	; 0x27e8 <__fp_pscA>
    251c:	30 f0       	brcs	.+12     	; 0x252a <__addsf3+0x18>
    251e:	6b d1       	rcall	.+726    	; 0x27f6 <__fp_pscB>
    2520:	20 f0       	brcs	.+8      	; 0x252a <__addsf3+0x18>
    2522:	31 f4       	brne	.+12     	; 0x2530 <__addsf3+0x1e>
    2524:	9f 3f       	cpi	r25, 0xFF	; 255
    2526:	11 f4       	brne	.+4      	; 0x252c <__addsf3+0x1a>
    2528:	1e f4       	brtc	.+6      	; 0x2530 <__addsf3+0x1e>
    252a:	5b c1       	rjmp	.+694    	; 0x27e2 <__fp_nan>
    252c:	0e f4       	brtc	.+2      	; 0x2530 <__addsf3+0x1e>
    252e:	e0 95       	com	r30
    2530:	e7 fb       	bst	r30, 7
    2532:	51 c1       	rjmp	.+674    	; 0x27d6 <__fp_inf>

00002534 <__addsf3x>:
    2534:	e9 2f       	mov	r30, r25
    2536:	77 d1       	rcall	.+750    	; 0x2826 <__fp_split3>
    2538:	80 f3       	brcs	.-32     	; 0x251a <__addsf3+0x8>
    253a:	ba 17       	cp	r27, r26
    253c:	62 07       	cpc	r22, r18
    253e:	73 07       	cpc	r23, r19
    2540:	84 07       	cpc	r24, r20
    2542:	95 07       	cpc	r25, r21
    2544:	18 f0       	brcs	.+6      	; 0x254c <__addsf3x+0x18>
    2546:	71 f4       	brne	.+28     	; 0x2564 <__addsf3x+0x30>
    2548:	9e f5       	brtc	.+102    	; 0x25b0 <__addsf3x+0x7c>
    254a:	8f c1       	rjmp	.+798    	; 0x286a <__fp_zero>
    254c:	0e f4       	brtc	.+2      	; 0x2550 <__addsf3x+0x1c>
    254e:	e0 95       	com	r30
    2550:	0b 2e       	mov	r0, r27
    2552:	ba 2f       	mov	r27, r26
    2554:	a0 2d       	mov	r26, r0
    2556:	0b 01       	movw	r0, r22
    2558:	b9 01       	movw	r22, r18
    255a:	90 01       	movw	r18, r0
    255c:	0c 01       	movw	r0, r24
    255e:	ca 01       	movw	r24, r20
    2560:	a0 01       	movw	r20, r0
    2562:	11 24       	eor	r1, r1
    2564:	ff 27       	eor	r31, r31
    2566:	59 1b       	sub	r21, r25
    2568:	99 f0       	breq	.+38     	; 0x2590 <__addsf3x+0x5c>
    256a:	59 3f       	cpi	r21, 0xF9	; 249
    256c:	50 f4       	brcc	.+20     	; 0x2582 <__addsf3x+0x4e>
    256e:	50 3e       	cpi	r21, 0xE0	; 224
    2570:	68 f1       	brcs	.+90     	; 0x25cc <__addsf3x+0x98>
    2572:	1a 16       	cp	r1, r26
    2574:	f0 40       	sbci	r31, 0x00	; 0
    2576:	a2 2f       	mov	r26, r18
    2578:	23 2f       	mov	r18, r19
    257a:	34 2f       	mov	r19, r20
    257c:	44 27       	eor	r20, r20
    257e:	58 5f       	subi	r21, 0xF8	; 248
    2580:	f3 cf       	rjmp	.-26     	; 0x2568 <__addsf3x+0x34>
    2582:	46 95       	lsr	r20
    2584:	37 95       	ror	r19
    2586:	27 95       	ror	r18
    2588:	a7 95       	ror	r26
    258a:	f0 40       	sbci	r31, 0x00	; 0
    258c:	53 95       	inc	r21
    258e:	c9 f7       	brne	.-14     	; 0x2582 <__addsf3x+0x4e>
    2590:	7e f4       	brtc	.+30     	; 0x25b0 <__addsf3x+0x7c>
    2592:	1f 16       	cp	r1, r31
    2594:	ba 0b       	sbc	r27, r26
    2596:	62 0b       	sbc	r22, r18
    2598:	73 0b       	sbc	r23, r19
    259a:	84 0b       	sbc	r24, r20
    259c:	ba f0       	brmi	.+46     	; 0x25cc <__addsf3x+0x98>
    259e:	91 50       	subi	r25, 0x01	; 1
    25a0:	a1 f0       	breq	.+40     	; 0x25ca <__addsf3x+0x96>
    25a2:	ff 0f       	add	r31, r31
    25a4:	bb 1f       	adc	r27, r27
    25a6:	66 1f       	adc	r22, r22
    25a8:	77 1f       	adc	r23, r23
    25aa:	88 1f       	adc	r24, r24
    25ac:	c2 f7       	brpl	.-16     	; 0x259e <__addsf3x+0x6a>
    25ae:	0e c0       	rjmp	.+28     	; 0x25cc <__addsf3x+0x98>
    25b0:	ba 0f       	add	r27, r26
    25b2:	62 1f       	adc	r22, r18
    25b4:	73 1f       	adc	r23, r19
    25b6:	84 1f       	adc	r24, r20
    25b8:	48 f4       	brcc	.+18     	; 0x25cc <__addsf3x+0x98>
    25ba:	87 95       	ror	r24
    25bc:	77 95       	ror	r23
    25be:	67 95       	ror	r22
    25c0:	b7 95       	ror	r27
    25c2:	f7 95       	ror	r31
    25c4:	9e 3f       	cpi	r25, 0xFE	; 254
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <__addsf3x+0x96>
    25c8:	b3 cf       	rjmp	.-154    	; 0x2530 <__addsf3+0x1e>
    25ca:	93 95       	inc	r25
    25cc:	88 0f       	add	r24, r24
    25ce:	08 f0       	brcs	.+2      	; 0x25d2 <__addsf3x+0x9e>
    25d0:	99 27       	eor	r25, r25
    25d2:	ee 0f       	add	r30, r30
    25d4:	97 95       	ror	r25
    25d6:	87 95       	ror	r24
    25d8:	08 95       	ret

000025da <__cmpsf2>:
    25da:	d9 d0       	rcall	.+434    	; 0x278e <__fp_cmp>
    25dc:	08 f4       	brcc	.+2      	; 0x25e0 <__cmpsf2+0x6>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	08 95       	ret

000025e2 <__divsf3>:
    25e2:	0c d0       	rcall	.+24     	; 0x25fc <__divsf3x>
    25e4:	0f c1       	rjmp	.+542    	; 0x2804 <__fp_round>
    25e6:	07 d1       	rcall	.+526    	; 0x27f6 <__fp_pscB>
    25e8:	40 f0       	brcs	.+16     	; 0x25fa <__divsf3+0x18>
    25ea:	fe d0       	rcall	.+508    	; 0x27e8 <__fp_pscA>
    25ec:	30 f0       	brcs	.+12     	; 0x25fa <__divsf3+0x18>
    25ee:	21 f4       	brne	.+8      	; 0x25f8 <__divsf3+0x16>
    25f0:	5f 3f       	cpi	r21, 0xFF	; 255
    25f2:	19 f0       	breq	.+6      	; 0x25fa <__divsf3+0x18>
    25f4:	f0 c0       	rjmp	.+480    	; 0x27d6 <__fp_inf>
    25f6:	51 11       	cpse	r21, r1
    25f8:	39 c1       	rjmp	.+626    	; 0x286c <__fp_szero>
    25fa:	f3 c0       	rjmp	.+486    	; 0x27e2 <__fp_nan>

000025fc <__divsf3x>:
    25fc:	14 d1       	rcall	.+552    	; 0x2826 <__fp_split3>
    25fe:	98 f3       	brcs	.-26     	; 0x25e6 <__divsf3+0x4>

00002600 <__divsf3_pse>:
    2600:	99 23       	and	r25, r25
    2602:	c9 f3       	breq	.-14     	; 0x25f6 <__divsf3+0x14>
    2604:	55 23       	and	r21, r21
    2606:	b1 f3       	breq	.-20     	; 0x25f4 <__divsf3+0x12>
    2608:	95 1b       	sub	r25, r21
    260a:	55 0b       	sbc	r21, r21
    260c:	bb 27       	eor	r27, r27
    260e:	aa 27       	eor	r26, r26
    2610:	62 17       	cp	r22, r18
    2612:	73 07       	cpc	r23, r19
    2614:	84 07       	cpc	r24, r20
    2616:	38 f0       	brcs	.+14     	; 0x2626 <__divsf3_pse+0x26>
    2618:	9f 5f       	subi	r25, 0xFF	; 255
    261a:	5f 4f       	sbci	r21, 0xFF	; 255
    261c:	22 0f       	add	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	44 1f       	adc	r20, r20
    2622:	aa 1f       	adc	r26, r26
    2624:	a9 f3       	breq	.-22     	; 0x2610 <__divsf3_pse+0x10>
    2626:	33 d0       	rcall	.+102    	; 0x268e <__divsf3_pse+0x8e>
    2628:	0e 2e       	mov	r0, r30
    262a:	3a f0       	brmi	.+14     	; 0x263a <__divsf3_pse+0x3a>
    262c:	e0 e8       	ldi	r30, 0x80	; 128
    262e:	30 d0       	rcall	.+96     	; 0x2690 <__divsf3_pse+0x90>
    2630:	91 50       	subi	r25, 0x01	; 1
    2632:	50 40       	sbci	r21, 0x00	; 0
    2634:	e6 95       	lsr	r30
    2636:	00 1c       	adc	r0, r0
    2638:	ca f7       	brpl	.-14     	; 0x262c <__divsf3_pse+0x2c>
    263a:	29 d0       	rcall	.+82     	; 0x268e <__divsf3_pse+0x8e>
    263c:	fe 2f       	mov	r31, r30
    263e:	27 d0       	rcall	.+78     	; 0x268e <__divsf3_pse+0x8e>
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	88 1f       	adc	r24, r24
    2646:	bb 1f       	adc	r27, r27
    2648:	26 17       	cp	r18, r22
    264a:	37 07       	cpc	r19, r23
    264c:	48 07       	cpc	r20, r24
    264e:	ab 07       	cpc	r26, r27
    2650:	b0 e8       	ldi	r27, 0x80	; 128
    2652:	09 f0       	breq	.+2      	; 0x2656 <__divsf3_pse+0x56>
    2654:	bb 0b       	sbc	r27, r27
    2656:	80 2d       	mov	r24, r0
    2658:	bf 01       	movw	r22, r30
    265a:	ff 27       	eor	r31, r31
    265c:	93 58       	subi	r25, 0x83	; 131
    265e:	5f 4f       	sbci	r21, 0xFF	; 255
    2660:	2a f0       	brmi	.+10     	; 0x266c <__divsf3_pse+0x6c>
    2662:	9e 3f       	cpi	r25, 0xFE	; 254
    2664:	51 05       	cpc	r21, r1
    2666:	68 f0       	brcs	.+26     	; 0x2682 <__divsf3_pse+0x82>
    2668:	b6 c0       	rjmp	.+364    	; 0x27d6 <__fp_inf>
    266a:	00 c1       	rjmp	.+512    	; 0x286c <__fp_szero>
    266c:	5f 3f       	cpi	r21, 0xFF	; 255
    266e:	ec f3       	brlt	.-6      	; 0x266a <__divsf3_pse+0x6a>
    2670:	98 3e       	cpi	r25, 0xE8	; 232
    2672:	dc f3       	brlt	.-10     	; 0x266a <__divsf3_pse+0x6a>
    2674:	86 95       	lsr	r24
    2676:	77 95       	ror	r23
    2678:	67 95       	ror	r22
    267a:	b7 95       	ror	r27
    267c:	f7 95       	ror	r31
    267e:	9f 5f       	subi	r25, 0xFF	; 255
    2680:	c9 f7       	brne	.-14     	; 0x2674 <__divsf3_pse+0x74>
    2682:	88 0f       	add	r24, r24
    2684:	91 1d       	adc	r25, r1
    2686:	96 95       	lsr	r25
    2688:	87 95       	ror	r24
    268a:	97 f9       	bld	r25, 7
    268c:	08 95       	ret
    268e:	e1 e0       	ldi	r30, 0x01	; 1
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	bb 1f       	adc	r27, r27
    2698:	62 17       	cp	r22, r18
    269a:	73 07       	cpc	r23, r19
    269c:	84 07       	cpc	r24, r20
    269e:	ba 07       	cpc	r27, r26
    26a0:	20 f0       	brcs	.+8      	; 0x26aa <__divsf3_pse+0xaa>
    26a2:	62 1b       	sub	r22, r18
    26a4:	73 0b       	sbc	r23, r19
    26a6:	84 0b       	sbc	r24, r20
    26a8:	ba 0b       	sbc	r27, r26
    26aa:	ee 1f       	adc	r30, r30
    26ac:	88 f7       	brcc	.-30     	; 0x2690 <__divsf3_pse+0x90>
    26ae:	e0 95       	com	r30
    26b0:	08 95       	ret

000026b2 <__fixsfsi>:
    26b2:	04 d0       	rcall	.+8      	; 0x26bc <__fixunssfsi>
    26b4:	68 94       	set
    26b6:	b1 11       	cpse	r27, r1
    26b8:	d9 c0       	rjmp	.+434    	; 0x286c <__fp_szero>
    26ba:	08 95       	ret

000026bc <__fixunssfsi>:
    26bc:	bc d0       	rcall	.+376    	; 0x2836 <__fp_splitA>
    26be:	88 f0       	brcs	.+34     	; 0x26e2 <__fixunssfsi+0x26>
    26c0:	9f 57       	subi	r25, 0x7F	; 127
    26c2:	90 f0       	brcs	.+36     	; 0x26e8 <__fixunssfsi+0x2c>
    26c4:	b9 2f       	mov	r27, r25
    26c6:	99 27       	eor	r25, r25
    26c8:	b7 51       	subi	r27, 0x17	; 23
    26ca:	a0 f0       	brcs	.+40     	; 0x26f4 <__fixunssfsi+0x38>
    26cc:	d1 f0       	breq	.+52     	; 0x2702 <__fixunssfsi+0x46>
    26ce:	66 0f       	add	r22, r22
    26d0:	77 1f       	adc	r23, r23
    26d2:	88 1f       	adc	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	1a f0       	brmi	.+6      	; 0x26de <__fixunssfsi+0x22>
    26d8:	ba 95       	dec	r27
    26da:	c9 f7       	brne	.-14     	; 0x26ce <__fixunssfsi+0x12>
    26dc:	12 c0       	rjmp	.+36     	; 0x2702 <__fixunssfsi+0x46>
    26de:	b1 30       	cpi	r27, 0x01	; 1
    26e0:	81 f0       	breq	.+32     	; 0x2702 <__fixunssfsi+0x46>
    26e2:	c3 d0       	rcall	.+390    	; 0x286a <__fp_zero>
    26e4:	b1 e0       	ldi	r27, 0x01	; 1
    26e6:	08 95       	ret
    26e8:	c0 c0       	rjmp	.+384    	; 0x286a <__fp_zero>
    26ea:	67 2f       	mov	r22, r23
    26ec:	78 2f       	mov	r23, r24
    26ee:	88 27       	eor	r24, r24
    26f0:	b8 5f       	subi	r27, 0xF8	; 248
    26f2:	39 f0       	breq	.+14     	; 0x2702 <__fixunssfsi+0x46>
    26f4:	b9 3f       	cpi	r27, 0xF9	; 249
    26f6:	cc f3       	brlt	.-14     	; 0x26ea <__fixunssfsi+0x2e>
    26f8:	86 95       	lsr	r24
    26fa:	77 95       	ror	r23
    26fc:	67 95       	ror	r22
    26fe:	b3 95       	inc	r27
    2700:	d9 f7       	brne	.-10     	; 0x26f8 <__fixunssfsi+0x3c>
    2702:	3e f4       	brtc	.+14     	; 0x2712 <__fixunssfsi+0x56>
    2704:	90 95       	com	r25
    2706:	80 95       	com	r24
    2708:	70 95       	com	r23
    270a:	61 95       	neg	r22
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	8f 4f       	sbci	r24, 0xFF	; 255
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	08 95       	ret

00002714 <__floatunsisf>:
    2714:	e8 94       	clt
    2716:	09 c0       	rjmp	.+18     	; 0x272a <__floatsisf+0x12>

00002718 <__floatsisf>:
    2718:	97 fb       	bst	r25, 7
    271a:	3e f4       	brtc	.+14     	; 0x272a <__floatsisf+0x12>
    271c:	90 95       	com	r25
    271e:	80 95       	com	r24
    2720:	70 95       	com	r23
    2722:	61 95       	neg	r22
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	99 23       	and	r25, r25
    272c:	a9 f0       	breq	.+42     	; 0x2758 <__floatsisf+0x40>
    272e:	f9 2f       	mov	r31, r25
    2730:	96 e9       	ldi	r25, 0x96	; 150
    2732:	bb 27       	eor	r27, r27
    2734:	93 95       	inc	r25
    2736:	f6 95       	lsr	r31
    2738:	87 95       	ror	r24
    273a:	77 95       	ror	r23
    273c:	67 95       	ror	r22
    273e:	b7 95       	ror	r27
    2740:	f1 11       	cpse	r31, r1
    2742:	f8 cf       	rjmp	.-16     	; 0x2734 <__floatsisf+0x1c>
    2744:	fa f4       	brpl	.+62     	; 0x2784 <__floatsisf+0x6c>
    2746:	bb 0f       	add	r27, r27
    2748:	11 f4       	brne	.+4      	; 0x274e <__floatsisf+0x36>
    274a:	60 ff       	sbrs	r22, 0
    274c:	1b c0       	rjmp	.+54     	; 0x2784 <__floatsisf+0x6c>
    274e:	6f 5f       	subi	r22, 0xFF	; 255
    2750:	7f 4f       	sbci	r23, 0xFF	; 255
    2752:	8f 4f       	sbci	r24, 0xFF	; 255
    2754:	9f 4f       	sbci	r25, 0xFF	; 255
    2756:	16 c0       	rjmp	.+44     	; 0x2784 <__floatsisf+0x6c>
    2758:	88 23       	and	r24, r24
    275a:	11 f0       	breq	.+4      	; 0x2760 <__floatsisf+0x48>
    275c:	96 e9       	ldi	r25, 0x96	; 150
    275e:	11 c0       	rjmp	.+34     	; 0x2782 <__floatsisf+0x6a>
    2760:	77 23       	and	r23, r23
    2762:	21 f0       	breq	.+8      	; 0x276c <__floatsisf+0x54>
    2764:	9e e8       	ldi	r25, 0x8E	; 142
    2766:	87 2f       	mov	r24, r23
    2768:	76 2f       	mov	r23, r22
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <__floatsisf+0x5e>
    276c:	66 23       	and	r22, r22
    276e:	71 f0       	breq	.+28     	; 0x278c <__floatsisf+0x74>
    2770:	96 e8       	ldi	r25, 0x86	; 134
    2772:	86 2f       	mov	r24, r22
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	2a f0       	brmi	.+10     	; 0x2784 <__floatsisf+0x6c>
    277a:	9a 95       	dec	r25
    277c:	66 0f       	add	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	88 1f       	adc	r24, r24
    2782:	da f7       	brpl	.-10     	; 0x277a <__floatsisf+0x62>
    2784:	88 0f       	add	r24, r24
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <__fp_cmp>:
    278e:	99 0f       	add	r25, r25
    2790:	00 08       	sbc	r0, r0
    2792:	55 0f       	add	r21, r21
    2794:	aa 0b       	sbc	r26, r26
    2796:	e0 e8       	ldi	r30, 0x80	; 128
    2798:	fe ef       	ldi	r31, 0xFE	; 254
    279a:	16 16       	cp	r1, r22
    279c:	17 06       	cpc	r1, r23
    279e:	e8 07       	cpc	r30, r24
    27a0:	f9 07       	cpc	r31, r25
    27a2:	c0 f0       	brcs	.+48     	; 0x27d4 <__fp_cmp+0x46>
    27a4:	12 16       	cp	r1, r18
    27a6:	13 06       	cpc	r1, r19
    27a8:	e4 07       	cpc	r30, r20
    27aa:	f5 07       	cpc	r31, r21
    27ac:	98 f0       	brcs	.+38     	; 0x27d4 <__fp_cmp+0x46>
    27ae:	62 1b       	sub	r22, r18
    27b0:	73 0b       	sbc	r23, r19
    27b2:	84 0b       	sbc	r24, r20
    27b4:	95 0b       	sbc	r25, r21
    27b6:	39 f4       	brne	.+14     	; 0x27c6 <__fp_cmp+0x38>
    27b8:	0a 26       	eor	r0, r26
    27ba:	61 f0       	breq	.+24     	; 0x27d4 <__fp_cmp+0x46>
    27bc:	23 2b       	or	r18, r19
    27be:	24 2b       	or	r18, r20
    27c0:	25 2b       	or	r18, r21
    27c2:	21 f4       	brne	.+8      	; 0x27cc <__fp_cmp+0x3e>
    27c4:	08 95       	ret
    27c6:	0a 26       	eor	r0, r26
    27c8:	09 f4       	brne	.+2      	; 0x27cc <__fp_cmp+0x3e>
    27ca:	a1 40       	sbci	r26, 0x01	; 1
    27cc:	a6 95       	lsr	r26
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	81 1d       	adc	r24, r1
    27d2:	81 1d       	adc	r24, r1
    27d4:	08 95       	ret

000027d6 <__fp_inf>:
    27d6:	97 f9       	bld	r25, 7
    27d8:	9f 67       	ori	r25, 0x7F	; 127
    27da:	80 e8       	ldi	r24, 0x80	; 128
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	08 95       	ret

000027e2 <__fp_nan>:
    27e2:	9f ef       	ldi	r25, 0xFF	; 255
    27e4:	80 ec       	ldi	r24, 0xC0	; 192
    27e6:	08 95       	ret

000027e8 <__fp_pscA>:
    27e8:	00 24       	eor	r0, r0
    27ea:	0a 94       	dec	r0
    27ec:	16 16       	cp	r1, r22
    27ee:	17 06       	cpc	r1, r23
    27f0:	18 06       	cpc	r1, r24
    27f2:	09 06       	cpc	r0, r25
    27f4:	08 95       	ret

000027f6 <__fp_pscB>:
    27f6:	00 24       	eor	r0, r0
    27f8:	0a 94       	dec	r0
    27fa:	12 16       	cp	r1, r18
    27fc:	13 06       	cpc	r1, r19
    27fe:	14 06       	cpc	r1, r20
    2800:	05 06       	cpc	r0, r21
    2802:	08 95       	ret

00002804 <__fp_round>:
    2804:	09 2e       	mov	r0, r25
    2806:	03 94       	inc	r0
    2808:	00 0c       	add	r0, r0
    280a:	11 f4       	brne	.+4      	; 0x2810 <__fp_round+0xc>
    280c:	88 23       	and	r24, r24
    280e:	52 f0       	brmi	.+20     	; 0x2824 <__fp_round+0x20>
    2810:	bb 0f       	add	r27, r27
    2812:	40 f4       	brcc	.+16     	; 0x2824 <__fp_round+0x20>
    2814:	bf 2b       	or	r27, r31
    2816:	11 f4       	brne	.+4      	; 0x281c <__fp_round+0x18>
    2818:	60 ff       	sbrs	r22, 0
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <__fp_round+0x20>
    281c:	6f 5f       	subi	r22, 0xFF	; 255
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	8f 4f       	sbci	r24, 0xFF	; 255
    2822:	9f 4f       	sbci	r25, 0xFF	; 255
    2824:	08 95       	ret

00002826 <__fp_split3>:
    2826:	57 fd       	sbrc	r21, 7
    2828:	90 58       	subi	r25, 0x80	; 128
    282a:	44 0f       	add	r20, r20
    282c:	55 1f       	adc	r21, r21
    282e:	59 f0       	breq	.+22     	; 0x2846 <__fp_splitA+0x10>
    2830:	5f 3f       	cpi	r21, 0xFF	; 255
    2832:	71 f0       	breq	.+28     	; 0x2850 <__fp_splitA+0x1a>
    2834:	47 95       	ror	r20

00002836 <__fp_splitA>:
    2836:	88 0f       	add	r24, r24
    2838:	97 fb       	bst	r25, 7
    283a:	99 1f       	adc	r25, r25
    283c:	61 f0       	breq	.+24     	; 0x2856 <__fp_splitA+0x20>
    283e:	9f 3f       	cpi	r25, 0xFF	; 255
    2840:	79 f0       	breq	.+30     	; 0x2860 <__fp_splitA+0x2a>
    2842:	87 95       	ror	r24
    2844:	08 95       	ret
    2846:	12 16       	cp	r1, r18
    2848:	13 06       	cpc	r1, r19
    284a:	14 06       	cpc	r1, r20
    284c:	55 1f       	adc	r21, r21
    284e:	f2 cf       	rjmp	.-28     	; 0x2834 <__fp_split3+0xe>
    2850:	46 95       	lsr	r20
    2852:	f1 df       	rcall	.-30     	; 0x2836 <__fp_splitA>
    2854:	08 c0       	rjmp	.+16     	; 0x2866 <__fp_splitA+0x30>
    2856:	16 16       	cp	r1, r22
    2858:	17 06       	cpc	r1, r23
    285a:	18 06       	cpc	r1, r24
    285c:	99 1f       	adc	r25, r25
    285e:	f1 cf       	rjmp	.-30     	; 0x2842 <__fp_splitA+0xc>
    2860:	86 95       	lsr	r24
    2862:	71 05       	cpc	r23, r1
    2864:	61 05       	cpc	r22, r1
    2866:	08 94       	sec
    2868:	08 95       	ret

0000286a <__fp_zero>:
    286a:	e8 94       	clt

0000286c <__fp_szero>:
    286c:	bb 27       	eor	r27, r27
    286e:	66 27       	eor	r22, r22
    2870:	77 27       	eor	r23, r23
    2872:	cb 01       	movw	r24, r22
    2874:	97 f9       	bld	r25, 7
    2876:	08 95       	ret

00002878 <__gesf2>:
    2878:	8a df       	rcall	.-236    	; 0x278e <__fp_cmp>
    287a:	08 f4       	brcc	.+2      	; 0x287e <__gesf2+0x6>
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	08 95       	ret

00002880 <__mulsf3>:
    2880:	0b d0       	rcall	.+22     	; 0x2898 <__mulsf3x>
    2882:	c0 cf       	rjmp	.-128    	; 0x2804 <__fp_round>
    2884:	b1 df       	rcall	.-158    	; 0x27e8 <__fp_pscA>
    2886:	28 f0       	brcs	.+10     	; 0x2892 <__mulsf3+0x12>
    2888:	b6 df       	rcall	.-148    	; 0x27f6 <__fp_pscB>
    288a:	18 f0       	brcs	.+6      	; 0x2892 <__mulsf3+0x12>
    288c:	95 23       	and	r25, r21
    288e:	09 f0       	breq	.+2      	; 0x2892 <__mulsf3+0x12>
    2890:	a2 cf       	rjmp	.-188    	; 0x27d6 <__fp_inf>
    2892:	a7 cf       	rjmp	.-178    	; 0x27e2 <__fp_nan>
    2894:	11 24       	eor	r1, r1
    2896:	ea cf       	rjmp	.-44     	; 0x286c <__fp_szero>

00002898 <__mulsf3x>:
    2898:	c6 df       	rcall	.-116    	; 0x2826 <__fp_split3>
    289a:	a0 f3       	brcs	.-24     	; 0x2884 <__mulsf3+0x4>

0000289c <__mulsf3_pse>:
    289c:	95 9f       	mul	r25, r21
    289e:	d1 f3       	breq	.-12     	; 0x2894 <__mulsf3+0x14>
    28a0:	95 0f       	add	r25, r21
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	55 1f       	adc	r21, r21
    28a6:	62 9f       	mul	r22, r18
    28a8:	f0 01       	movw	r30, r0
    28aa:	72 9f       	mul	r23, r18
    28ac:	bb 27       	eor	r27, r27
    28ae:	f0 0d       	add	r31, r0
    28b0:	b1 1d       	adc	r27, r1
    28b2:	63 9f       	mul	r22, r19
    28b4:	aa 27       	eor	r26, r26
    28b6:	f0 0d       	add	r31, r0
    28b8:	b1 1d       	adc	r27, r1
    28ba:	aa 1f       	adc	r26, r26
    28bc:	64 9f       	mul	r22, r20
    28be:	66 27       	eor	r22, r22
    28c0:	b0 0d       	add	r27, r0
    28c2:	a1 1d       	adc	r26, r1
    28c4:	66 1f       	adc	r22, r22
    28c6:	82 9f       	mul	r24, r18
    28c8:	22 27       	eor	r18, r18
    28ca:	b0 0d       	add	r27, r0
    28cc:	a1 1d       	adc	r26, r1
    28ce:	62 1f       	adc	r22, r18
    28d0:	73 9f       	mul	r23, r19
    28d2:	b0 0d       	add	r27, r0
    28d4:	a1 1d       	adc	r26, r1
    28d6:	62 1f       	adc	r22, r18
    28d8:	83 9f       	mul	r24, r19
    28da:	a0 0d       	add	r26, r0
    28dc:	61 1d       	adc	r22, r1
    28de:	22 1f       	adc	r18, r18
    28e0:	74 9f       	mul	r23, r20
    28e2:	33 27       	eor	r19, r19
    28e4:	a0 0d       	add	r26, r0
    28e6:	61 1d       	adc	r22, r1
    28e8:	23 1f       	adc	r18, r19
    28ea:	84 9f       	mul	r24, r20
    28ec:	60 0d       	add	r22, r0
    28ee:	21 1d       	adc	r18, r1
    28f0:	82 2f       	mov	r24, r18
    28f2:	76 2f       	mov	r23, r22
    28f4:	6a 2f       	mov	r22, r26
    28f6:	11 24       	eor	r1, r1
    28f8:	9f 57       	subi	r25, 0x7F	; 127
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	8a f0       	brmi	.+34     	; 0x2920 <__mulsf3_pse+0x84>
    28fe:	e1 f0       	breq	.+56     	; 0x2938 <__mulsf3_pse+0x9c>
    2900:	88 23       	and	r24, r24
    2902:	4a f0       	brmi	.+18     	; 0x2916 <__mulsf3_pse+0x7a>
    2904:	ee 0f       	add	r30, r30
    2906:	ff 1f       	adc	r31, r31
    2908:	bb 1f       	adc	r27, r27
    290a:	66 1f       	adc	r22, r22
    290c:	77 1f       	adc	r23, r23
    290e:	88 1f       	adc	r24, r24
    2910:	91 50       	subi	r25, 0x01	; 1
    2912:	50 40       	sbci	r21, 0x00	; 0
    2914:	a9 f7       	brne	.-22     	; 0x2900 <__mulsf3_pse+0x64>
    2916:	9e 3f       	cpi	r25, 0xFE	; 254
    2918:	51 05       	cpc	r21, r1
    291a:	70 f0       	brcs	.+28     	; 0x2938 <__mulsf3_pse+0x9c>
    291c:	5c cf       	rjmp	.-328    	; 0x27d6 <__fp_inf>
    291e:	a6 cf       	rjmp	.-180    	; 0x286c <__fp_szero>
    2920:	5f 3f       	cpi	r21, 0xFF	; 255
    2922:	ec f3       	brlt	.-6      	; 0x291e <__mulsf3_pse+0x82>
    2924:	98 3e       	cpi	r25, 0xE8	; 232
    2926:	dc f3       	brlt	.-10     	; 0x291e <__mulsf3_pse+0x82>
    2928:	86 95       	lsr	r24
    292a:	77 95       	ror	r23
    292c:	67 95       	ror	r22
    292e:	b7 95       	ror	r27
    2930:	f7 95       	ror	r31
    2932:	e7 95       	ror	r30
    2934:	9f 5f       	subi	r25, 0xFF	; 255
    2936:	c1 f7       	brne	.-16     	; 0x2928 <__mulsf3_pse+0x8c>
    2938:	fe 2b       	or	r31, r30
    293a:	88 0f       	add	r24, r24
    293c:	91 1d       	adc	r25, r1
    293e:	96 95       	lsr	r25
    2940:	87 95       	ror	r24
    2942:	97 f9       	bld	r25, 7
    2944:	08 95       	ret

00002946 <calloc>:
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	68 9f       	mul	r22, r24
    2950:	80 01       	movw	r16, r0
    2952:	69 9f       	mul	r22, r25
    2954:	10 0d       	add	r17, r0
    2956:	78 9f       	mul	r23, r24
    2958:	10 0d       	add	r17, r0
    295a:	11 24       	eor	r1, r1
    295c:	c8 01       	movw	r24, r16
    295e:	0d d0       	rcall	.+26     	; 0x297a <malloc>
    2960:	ec 01       	movw	r28, r24
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	21 f0       	breq	.+8      	; 0x296e <calloc+0x28>
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	a8 01       	movw	r20, r16
    296c:	0b d1       	rcall	.+534    	; 0x2b84 <memset>
    296e:	ce 01       	movw	r24, r28
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <malloc>:
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	bc 01       	movw	r22, r24
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	91 05       	cpc	r25, r1
    2984:	10 f4       	brcc	.+4      	; 0x298a <malloc+0x10>
    2986:	62 e0       	ldi	r22, 0x02	; 2
    2988:	70 e0       	ldi	r23, 0x00	; 0
    298a:	a0 91 58 02 	lds	r26, 0x0258
    298e:	b0 91 59 02 	lds	r27, 0x0259
    2992:	ed 01       	movw	r28, r26
    2994:	e0 e0       	ldi	r30, 0x00	; 0
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	21 c0       	rjmp	.+66     	; 0x29e0 <malloc+0x66>
    299e:	88 81       	ld	r24, Y
    29a0:	99 81       	ldd	r25, Y+1	; 0x01
    29a2:	86 17       	cp	r24, r22
    29a4:	97 07       	cpc	r25, r23
    29a6:	69 f4       	brne	.+26     	; 0x29c2 <malloc+0x48>
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	30 97       	sbiw	r30, 0x00	; 0
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <malloc+0x3c>
    29b0:	93 83       	std	Z+3, r25	; 0x03
    29b2:	82 83       	std	Z+2, r24	; 0x02
    29b4:	04 c0       	rjmp	.+8      	; 0x29be <malloc+0x44>
    29b6:	90 93 59 02 	sts	0x0259, r25
    29ba:	80 93 58 02 	sts	0x0258, r24
    29be:	fe 01       	movw	r30, r28
    29c0:	34 c0       	rjmp	.+104    	; 0x2a2a <malloc+0xb0>
    29c2:	68 17       	cp	r22, r24
    29c4:	79 07       	cpc	r23, r25
    29c6:	38 f4       	brcc	.+14     	; 0x29d6 <malloc+0x5c>
    29c8:	41 15       	cp	r20, r1
    29ca:	51 05       	cpc	r21, r1
    29cc:	19 f0       	breq	.+6      	; 0x29d4 <malloc+0x5a>
    29ce:	84 17       	cp	r24, r20
    29d0:	95 07       	cpc	r25, r21
    29d2:	08 f4       	brcc	.+2      	; 0x29d6 <malloc+0x5c>
    29d4:	ac 01       	movw	r20, r24
    29d6:	fe 01       	movw	r30, r28
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	9c 01       	movw	r18, r24
    29de:	e9 01       	movw	r28, r18
    29e0:	20 97       	sbiw	r28, 0x00	; 0
    29e2:	e9 f6       	brne	.-70     	; 0x299e <malloc+0x24>
    29e4:	41 15       	cp	r20, r1
    29e6:	51 05       	cpc	r21, r1
    29e8:	a9 f1       	breq	.+106    	; 0x2a54 <malloc+0xda>
    29ea:	ca 01       	movw	r24, r20
    29ec:	86 1b       	sub	r24, r22
    29ee:	97 0b       	sbc	r25, r23
    29f0:	04 97       	sbiw	r24, 0x04	; 4
    29f2:	08 f4       	brcc	.+2      	; 0x29f6 <malloc+0x7c>
    29f4:	ba 01       	movw	r22, r20
    29f6:	e0 e0       	ldi	r30, 0x00	; 0
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	2a c0       	rjmp	.+84     	; 0x2a50 <malloc+0xd6>
    29fc:	8d 91       	ld	r24, X+
    29fe:	9c 91       	ld	r25, X
    2a00:	11 97       	sbiw	r26, 0x01	; 1
    2a02:	84 17       	cp	r24, r20
    2a04:	95 07       	cpc	r25, r21
    2a06:	f9 f4       	brne	.+62     	; 0x2a46 <malloc+0xcc>
    2a08:	64 17       	cp	r22, r20
    2a0a:	75 07       	cpc	r23, r21
    2a0c:	81 f4       	brne	.+32     	; 0x2a2e <malloc+0xb4>
    2a0e:	12 96       	adiw	r26, 0x02	; 2
    2a10:	8d 91       	ld	r24, X+
    2a12:	9c 91       	ld	r25, X
    2a14:	13 97       	sbiw	r26, 0x03	; 3
    2a16:	30 97       	sbiw	r30, 0x00	; 0
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <malloc+0xa6>
    2a1a:	93 83       	std	Z+3, r25	; 0x03
    2a1c:	82 83       	std	Z+2, r24	; 0x02
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <malloc+0xae>
    2a20:	90 93 59 02 	sts	0x0259, r25
    2a24:	80 93 58 02 	sts	0x0258, r24
    2a28:	fd 01       	movw	r30, r26
    2a2a:	32 96       	adiw	r30, 0x02	; 2
    2a2c:	4f c0       	rjmp	.+158    	; 0x2acc <malloc+0x152>
    2a2e:	ca 01       	movw	r24, r20
    2a30:	86 1b       	sub	r24, r22
    2a32:	97 0b       	sbc	r25, r23
    2a34:	fd 01       	movw	r30, r26
    2a36:	e8 0f       	add	r30, r24
    2a38:	f9 1f       	adc	r31, r25
    2a3a:	61 93       	st	Z+, r22
    2a3c:	71 93       	st	Z+, r23
    2a3e:	02 97       	sbiw	r24, 0x02	; 2
    2a40:	8d 93       	st	X+, r24
    2a42:	9c 93       	st	X, r25
    2a44:	43 c0       	rjmp	.+134    	; 0x2acc <malloc+0x152>
    2a46:	fd 01       	movw	r30, r26
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	9c 01       	movw	r18, r24
    2a4e:	d9 01       	movw	r26, r18
    2a50:	10 97       	sbiw	r26, 0x00	; 0
    2a52:	a1 f6       	brne	.-88     	; 0x29fc <malloc+0x82>
    2a54:	80 91 56 02 	lds	r24, 0x0256
    2a58:	90 91 57 02 	lds	r25, 0x0257
    2a5c:	89 2b       	or	r24, r25
    2a5e:	41 f4       	brne	.+16     	; 0x2a70 <malloc+0xf6>
    2a60:	80 91 02 01 	lds	r24, 0x0102
    2a64:	90 91 03 01 	lds	r25, 0x0103
    2a68:	90 93 57 02 	sts	0x0257, r25
    2a6c:	80 93 56 02 	sts	0x0256, r24
    2a70:	40 91 04 01 	lds	r20, 0x0104
    2a74:	50 91 05 01 	lds	r21, 0x0105
    2a78:	41 15       	cp	r20, r1
    2a7a:	51 05       	cpc	r21, r1
    2a7c:	41 f4       	brne	.+16     	; 0x2a8e <malloc+0x114>
    2a7e:	4d b7       	in	r20, 0x3d	; 61
    2a80:	5e b7       	in	r21, 0x3e	; 62
    2a82:	80 91 00 01 	lds	r24, 0x0100
    2a86:	90 91 01 01 	lds	r25, 0x0101
    2a8a:	48 1b       	sub	r20, r24
    2a8c:	59 0b       	sbc	r21, r25
    2a8e:	20 91 56 02 	lds	r18, 0x0256
    2a92:	30 91 57 02 	lds	r19, 0x0257
    2a96:	24 17       	cp	r18, r20
    2a98:	35 07       	cpc	r19, r21
    2a9a:	b0 f4       	brcc	.+44     	; 0x2ac8 <malloc+0x14e>
    2a9c:	ca 01       	movw	r24, r20
    2a9e:	82 1b       	sub	r24, r18
    2aa0:	93 0b       	sbc	r25, r19
    2aa2:	86 17       	cp	r24, r22
    2aa4:	97 07       	cpc	r25, r23
    2aa6:	80 f0       	brcs	.+32     	; 0x2ac8 <malloc+0x14e>
    2aa8:	ab 01       	movw	r20, r22
    2aaa:	4e 5f       	subi	r20, 0xFE	; 254
    2aac:	5f 4f       	sbci	r21, 0xFF	; 255
    2aae:	84 17       	cp	r24, r20
    2ab0:	95 07       	cpc	r25, r21
    2ab2:	50 f0       	brcs	.+20     	; 0x2ac8 <malloc+0x14e>
    2ab4:	42 0f       	add	r20, r18
    2ab6:	53 1f       	adc	r21, r19
    2ab8:	50 93 57 02 	sts	0x0257, r21
    2abc:	40 93 56 02 	sts	0x0256, r20
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	61 93       	st	Z+, r22
    2ac4:	71 93       	st	Z+, r23
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <malloc+0x152>
    2ac8:	e0 e0       	ldi	r30, 0x00	; 0
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	cf 01       	movw	r24, r30
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <free>:
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	09 f4       	brne	.+2      	; 0x2ade <free+0xa>
    2adc:	50 c0       	rjmp	.+160    	; 0x2b7e <free+0xaa>
    2ade:	ec 01       	movw	r28, r24
    2ae0:	22 97       	sbiw	r28, 0x02	; 2
    2ae2:	1b 82       	std	Y+3, r1	; 0x03
    2ae4:	1a 82       	std	Y+2, r1	; 0x02
    2ae6:	a0 91 58 02 	lds	r26, 0x0258
    2aea:	b0 91 59 02 	lds	r27, 0x0259
    2aee:	10 97       	sbiw	r26, 0x00	; 0
    2af0:	09 f1       	breq	.+66     	; 0x2b34 <free+0x60>
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	ac 17       	cp	r26, r28
    2af8:	bd 07       	cpc	r27, r29
    2afa:	08 f1       	brcs	.+66     	; 0x2b3e <free+0x6a>
    2afc:	bb 83       	std	Y+3, r27	; 0x03
    2afe:	aa 83       	std	Y+2, r26	; 0x02
    2b00:	fe 01       	movw	r30, r28
    2b02:	21 91       	ld	r18, Z+
    2b04:	31 91       	ld	r19, Z+
    2b06:	e2 0f       	add	r30, r18
    2b08:	f3 1f       	adc	r31, r19
    2b0a:	ae 17       	cp	r26, r30
    2b0c:	bf 07       	cpc	r27, r31
    2b0e:	79 f4       	brne	.+30     	; 0x2b2e <free+0x5a>
    2b10:	8d 91       	ld	r24, X+
    2b12:	9c 91       	ld	r25, X
    2b14:	11 97       	sbiw	r26, 0x01	; 1
    2b16:	28 0f       	add	r18, r24
    2b18:	39 1f       	adc	r19, r25
    2b1a:	2e 5f       	subi	r18, 0xFE	; 254
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	39 83       	std	Y+1, r19	; 0x01
    2b20:	28 83       	st	Y, r18
    2b22:	12 96       	adiw	r26, 0x02	; 2
    2b24:	8d 91       	ld	r24, X+
    2b26:	9c 91       	ld	r25, X
    2b28:	13 97       	sbiw	r26, 0x03	; 3
    2b2a:	9b 83       	std	Y+3, r25	; 0x03
    2b2c:	8a 83       	std	Y+2, r24	; 0x02
    2b2e:	41 15       	cp	r20, r1
    2b30:	51 05       	cpc	r21, r1
    2b32:	71 f4       	brne	.+28     	; 0x2b50 <free+0x7c>
    2b34:	d0 93 59 02 	sts	0x0259, r29
    2b38:	c0 93 58 02 	sts	0x0258, r28
    2b3c:	20 c0       	rjmp	.+64     	; 0x2b7e <free+0xaa>
    2b3e:	12 96       	adiw	r26, 0x02	; 2
    2b40:	8d 91       	ld	r24, X+
    2b42:	9c 91       	ld	r25, X
    2b44:	13 97       	sbiw	r26, 0x03	; 3
    2b46:	ad 01       	movw	r20, r26
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	11 f0       	breq	.+4      	; 0x2b50 <free+0x7c>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	d3 cf       	rjmp	.-90     	; 0x2af6 <free+0x22>
    2b50:	fa 01       	movw	r30, r20
    2b52:	d3 83       	std	Z+3, r29	; 0x03
    2b54:	c2 83       	std	Z+2, r28	; 0x02
    2b56:	21 91       	ld	r18, Z+
    2b58:	31 91       	ld	r19, Z+
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	ce 17       	cp	r28, r30
    2b60:	df 07       	cpc	r29, r31
    2b62:	69 f4       	brne	.+26     	; 0x2b7e <free+0xaa>
    2b64:	88 81       	ld	r24, Y
    2b66:	99 81       	ldd	r25, Y+1	; 0x01
    2b68:	28 0f       	add	r18, r24
    2b6a:	39 1f       	adc	r19, r25
    2b6c:	2e 5f       	subi	r18, 0xFE	; 254
    2b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b70:	fa 01       	movw	r30, r20
    2b72:	31 83       	std	Z+1, r19	; 0x01
    2b74:	20 83       	st	Z, r18
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7a:	93 83       	std	Z+3, r25	; 0x03
    2b7c:	82 83       	std	Z+2, r24	; 0x02
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	08 95       	ret

00002b84 <memset>:
    2b84:	dc 01       	movw	r26, r24
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <memset+0x6>
    2b88:	6d 93       	st	X+, r22
    2b8a:	41 50       	subi	r20, 0x01	; 1
    2b8c:	50 40       	sbci	r21, 0x00	; 0
    2b8e:	e0 f7       	brcc	.-8      	; 0x2b88 <memset+0x4>
    2b90:	08 95       	ret

00002b92 <_exit>:
    2b92:	f8 94       	cli

00002b94 <__stop_program>:
    2b94:	ff cf       	rjmp	.-2      	; 0x2b94 <__stop_program>
