
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002760  000027f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800112  00800112  00002806  2**0
                  ALLOC
  3 .debug_aranges 00000338  00000000  00000000  00002806  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000892  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002188  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7c  00000000  00000000  00005558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025b0  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  00008584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b2c  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002f0  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(10);
	servo_set_right_grabber_position(70);
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
uint32_t system_get_system_time(void)
{
	return sys_time;
}
uint8_t system_get_match_started(void)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c5       	rjmp	.+2922   	; 0xbb4 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 e6       	ldi	r30, 0x60	; 96
      a8:	f7 e2       	ldi	r31, 0x27	; 39
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 31       	cpi	r26, 0x12	; 18
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a2 e1       	ldi	r26, 0x12	; 18
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 35       	cpi	r26, 0x5A	; 90
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 ae 13 	jmp	0x275c	; 0x275c <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
	PORTG = 0x00;
	_delay_ms(1000);
	PORTG = 0xff;
}*/
int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	while(1)
	{
		odometry_move_straight(200,NORMAL_SPEED,NULL);
     1ce:	88 ec       	ldi	r24, 0xC8	; 200
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	61 e4       	ldi	r22, 0x41	; 65
     1d4:	40 e0       	ldi	r20, 0x00	; 0
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <odometry_move_straight>
		PORTG = 0x00;
     1dc:	e4 e3       	ldi	r30, 0x34	; 52
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	10 82       	st	Z, r1
		odometry_move_straight(-200,NORMAL_SPEED,NULL);
     1e2:	88 e3       	ldi	r24, 0x38	; 56
     1e4:	9f ef       	ldi	r25, 0xFF	; 255
     1e6:	61 e4       	ldi	r22, 0x41	; 65
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	0e 94 a9 0c 	call	0x1952	; 0x1952 <odometry_move_straight>
     1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x11e>

000001f2 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <servo_init+0xa>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	9a 83       	std	Y+2, r25	; 0x02
     202:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     204:	ad e2       	ldi	r26, 0x2D	; 45
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	ed e2       	ldi	r30, 0x2D	; 45
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	88 63       	ori	r24, 0x38	; 56
     210:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     212:	a4 e2       	ldi	r26, 0x24	; 36
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e4 e2       	ldi	r30, 0x24	; 36
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     220:	e4 e9       	ldi	r30, 0x94	; 148
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1
	TCNT0 = 0;
     228:	e6 e4       	ldi	r30, 0x46	; 70
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	10 82       	st	Z, r1

	OCR3A = 0;
     22e:	e8 e9       	ldi	r30, 0x98	; 152
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	11 82       	std	Z+1, r1	; 0x01
     234:	10 82       	st	Z, r1
	OCR3B = 0;
     236:	ea e9       	ldi	r30, 0x9A	; 154
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	11 82       	std	Z+1, r1	; 0x01
     23c:	10 82       	st	Z, r1
	OCR3C = 0;
     23e:	ec e9       	ldi	r30, 0x9C	; 156
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	11 82       	std	Z+1, r1	; 0x01
     244:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     246:	e0 e9       	ldi	r30, 0x90	; 144
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	8e eb       	ldi	r24, 0xBE	; 190
     24c:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     24e:	e1 e9       	ldi	r30, 0x91	; 145
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	8a e1       	ldi	r24, 0x1A	; 26
     254:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     256:	e4 e4       	ldi	r30, 0x44	; 68
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	8b e6       	ldi	r24, 0x6B	; 107
     25c:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     25e:	06 e9       	ldi	r16, 0x96	; 150
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	cc 01       	movw	r24, r24
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	bc 01       	movw	r22, r24
     26e:	cd 01       	movw	r24, r26
     270:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatunsisf>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	51 e4       	ldi	r21, 0x41	; 65
     284:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	9c 01       	movw	r18, r24
     28e:	ad 01       	movw	r20, r26
     290:	60 e8       	ldi	r22, 0x80	; 128
     292:	76 e9       	ldi	r23, 0x96	; 150
     294:	88 e1       	ldi	r24, 0x18	; 24
     296:	9b e4       	ldi	r25, 0x4B	; 75
     298:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	bc 01       	movw	r22, r24
     2a2:	cd 01       	movw	r24, r26
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	5f e3       	ldi	r21, 0x3F	; 63
     2ac:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	f8 01       	movw	r30, r16
     2c2:	91 83       	std	Z+1, r25	; 0x01
     2c4:	80 83       	st	Z, r24
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <servo_set_duty_cycle_umbrella+0xe>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <servo_set_duty_cycle_umbrella+0x10>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	9c 83       	std	Y+4, r25	; 0x04
     2ea:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2ec:	e6 e9       	ldi	r30, 0x96	; 150
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	91 81       	ldd	r25, Z+1	; 0x01
     2f4:	cc 01       	movw	r24, r24
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatunsisf>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	bc 01       	movw	r22, r24
     308:	cd 01       	movw	r24, r26
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	4f e7       	ldi	r20, 0x7F	; 127
     310:	53 e4       	ldi	r21, 0x43	; 67
     312:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	7c 01       	movw	r14, r24
     31c:	8d 01       	movw	r16, r26
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	aa 27       	eor	r26, r26
     324:	97 fd       	sbrc	r25, 7
     326:	a0 95       	com	r26
     328:	ba 2f       	mov	r27, r26
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     332:	9b 01       	movw	r18, r22
     334:	ac 01       	movw	r20, r24
     336:	c8 01       	movw	r24, r16
     338:	b7 01       	movw	r22, r14
     33a:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	5f e3       	ldi	r21, 0x3F	; 63
     34e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	bc 01       	movw	r22, r24
     358:	cd 01       	movw	r24, r26
     35a:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	9a 83       	std	Y+2, r25	; 0x02
     364:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     366:	e9 e9       	ldi	r30, 0x99	; 153
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	89 2f       	mov	r24, r25
     370:	99 27       	eor	r25, r25
     372:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     374:	e8 e9       	ldi	r30, 0x98	; 152
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	80 83       	st	Z, r24
}
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	08 95       	ret

00000392 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <servo_set_duty_cycle_door+0xe>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <servo_set_duty_cycle_door+0x10>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9c 83       	std	Y+4, r25	; 0x04
     3a8:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3aa:	e6 e9       	ldi	r30, 0x96	; 150
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	cc 01       	movw	r24, r24
     3b4:	a0 e0       	ldi	r26, 0x00	; 0
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	bc 01       	movw	r22, r24
     3ba:	cd 01       	movw	r24, r26
     3bc:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatunsisf>
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
     3c4:	bc 01       	movw	r22, r24
     3c6:	cd 01       	movw	r24, r26
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	4f e7       	ldi	r20, 0x7F	; 127
     3ce:	53 e4       	ldi	r21, 0x43	; 67
     3d0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	7c 01       	movw	r14, r24
     3da:	8d 01       	movw	r16, r26
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	9c 81       	ldd	r25, Y+4	; 0x04
     3e0:	aa 27       	eor	r26, r26
     3e2:	97 fd       	sbrc	r25, 7
     3e4:	a0 95       	com	r26
     3e6:	ba 2f       	mov	r27, r26
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c8 01       	movw	r24, r16
     3f6:	b7 01       	movw	r22, r14
     3f8:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     424:	eb e9       	ldi	r30, 0x9B	; 155
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	89 2f       	mov	r24, r25
     42e:	99 27       	eor	r25, r25
     430:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     432:	ea e9       	ldi	r30, 0x9A	; 154
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	80 83       	st	Z, r24
}
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	08 95       	ret

00000450 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	00 d0       	rcall	.+0      	; 0x45e <servo_set_duty_cycle_left_grabber+0xe>
     45e:	00 d0       	rcall	.+0      	; 0x460 <servo_set_duty_cycle_left_grabber+0x10>
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     468:	e6 e9       	ldi	r30, 0x96	; 150
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	cc 01       	movw	r24, r24
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	bc 01       	movw	r22, r24
     478:	cd 01       	movw	r24, r26
     47a:	0e 94 6f 11 	call	0x22de	; 0x22de <__floatunsisf>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4f e7       	ldi	r20, 0x7F	; 127
     48c:	53 e4       	ldi	r21, 0x43	; 67
     48e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	7c 01       	movw	r14, r24
     498:	8d 01       	movw	r16, r26
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	9c 81       	ldd	r25, Y+4	; 0x04
     49e:	aa 27       	eor	r26, r26
     4a0:	97 fd       	sbrc	r25, 7
     4a2:	a0 95       	com	r26
     4a4:	ba 2f       	mov	r27, r26
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     4ae:	9b 01       	movw	r18, r22
     4b0:	ac 01       	movw	r20, r24
     4b2:	c8 01       	movw	r24, r16
     4b4:	b7 01       	movw	r22, r14
     4b6:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	bc 01       	movw	r22, r24
     4c0:	cd 01       	movw	r24, r26
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	5f e3       	ldi	r21, 0x3F	; 63
     4ca:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4e2:	ed e9       	ldi	r30, 0x9D	; 157
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	89 2f       	mov	r24, r25
     4ec:	99 27       	eor	r25, r25
     4ee:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4f0:	ec e9       	ldi	r30, 0x9C	; 156
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	80 83       	st	Z, r24
}
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	0f 92       	push	r0
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	99 27       	eor	r25, r25
     51e:	87 fd       	sbrc	r24, 7
     520:	90 95       	com	r25
     522:	a9 2f       	mov	r26, r25
     524:	b9 2f       	mov	r27, r25
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	44 eb       	ldi	r20, 0xB4	; 180
     53c:	52 e4       	ldi	r21, 0x42	; 66
     53e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     542:	dc 01       	movw	r26, r24
     544:	cb 01       	movw	r24, r22
     546:	bc 01       	movw	r22, r24
     548:	cd 01       	movw	r24, r26
     54a:	26 e6       	ldi	r18, 0x66	; 102
     54c:	36 e6       	ldi	r19, 0x66	; 102
     54e:	46 e3       	ldi	r20, 0x36	; 54
     550:	51 ec       	ldi	r21, 0xC1	; 193
     552:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	bc 01       	movw	r22, r24
     55c:	cd 01       	movw	r24, r26
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	4c e6       	ldi	r20, 0x6C	; 108
     564:	53 e4       	ldi	r21, 0x43	; 67
     566:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	9c 01       	movw	r18, r24
     570:	ad 01       	movw	r20, r26
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8f e7       	ldi	r24, 0x7F	; 127
     578:	93 e4       	ldi	r25, 0x43	; 67
     57a:	0e 94 6d 10 	call	0x20da	; 0x20da <__subsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	0e 94 3e 11 	call	0x227c	; 0x227c <__fixsfsi>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	a2 de       	rcall	.-700    	; 0x2d4 <servo_set_duty_cycle_umbrella>
}
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	0f 92       	push	r0
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	99 27       	eor	r25, r25
     5a8:	87 fd       	sbrc	r24, 7
     5aa:	90 95       	com	r25
     5ac:	a9 2f       	mov	r26, r25
     5ae:	b9 2f       	mov	r27, r25
     5b0:	bc 01       	movw	r22, r24
     5b2:	cd 01       	movw	r24, r26
     5b4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	44 eb       	ldi	r20, 0xB4	; 180
     5c6:	52 e4       	ldi	r21, 0x42	; 66
     5c8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	26 e6       	ldi	r18, 0x66	; 102
     5d6:	36 e6       	ldi	r19, 0x66	; 102
     5d8:	46 e3       	ldi	r20, 0x36	; 54
     5da:	51 ec       	ldi	r21, 0xC1	; 193
     5dc:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	4c e6       	ldi	r20, 0x6C	; 108
     5ee:	53 e4       	ldi	r21, 0x43	; 67
     5f0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	9c 01       	movw	r18, r24
     5fa:	ad 01       	movw	r20, r26
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8f e7       	ldi	r24, 0x7F	; 127
     602:	93 e4       	ldi	r25, 0x43	; 67
     604:	0e 94 6d 10 	call	0x20da	; 0x20da <__subsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	0e 94 3e 11 	call	0x227c	; 0x227c <__fixsfsi>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	bc de       	rcall	.-648    	; 0x392 <servo_set_duty_cycle_door>
}
     61a:	0f 90       	pop	r0
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	99 27       	eor	r25, r25
     632:	87 fd       	sbrc	r24, 7
     634:	90 95       	com	r25
     636:	a9 2f       	mov	r26, r25
     638:	b9 2f       	mov	r27, r25
     63a:	bc 01       	movw	r22, r24
     63c:	cd 01       	movw	r24, r26
     63e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__floatsisf>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	bc 01       	movw	r22, r24
     648:	cd 01       	movw	r24, r26
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	44 eb       	ldi	r20, 0xB4	; 180
     650:	52 e4       	ldi	r21, 0x42	; 66
     652:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__divsf3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	bc 01       	movw	r22, r24
     65c:	cd 01       	movw	r24, r26
     65e:	26 e6       	ldi	r18, 0x66	; 102
     660:	36 e6       	ldi	r19, 0x66	; 102
     662:	46 e3       	ldi	r20, 0x36	; 54
     664:	51 ec       	ldi	r21, 0xC1	; 193
     666:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	4c e6       	ldi	r20, 0x6C	; 108
     678:	53 e4       	ldi	r21, 0x43	; 67
     67a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	9c 01       	movw	r18, r24
     684:	ad 01       	movw	r20, r26
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	8f e7       	ldi	r24, 0x7F	; 127
     68c:	93 e4       	ldi	r25, 0x43	; 67
     68e:	0e 94 6d 10 	call	0x20da	; 0x20da <__subsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	0e 94 3e 11 	call	0x227c	; 0x227c <__fixsfsi>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	d6 de       	rcall	.-596    	; 0x450 <servo_set_duty_cycle_left_grabber>
}
     6a4:	0f 90       	pop	r0
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	08 95       	ret

000006ac <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6ac:	df 93       	push	r29
     6ae:	cf 93       	push	r28
     6b0:	0f 92       	push	r0
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6b8:	e7 e4       	ldi	r30, 0x47	; 71
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	80 83       	st	Z, r24
}
     6c0:	0f 90       	pop	r0
     6c2:	cf 91       	pop	r28
     6c4:	df 91       	pop	r29
     6c6:	08 95       	ret

000006c8 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(10);
     6d0:	8a e0       	ldi	r24, 0x0A	; 10
     6d2:	a7 df       	rcall	.-178    	; 0x622 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(70);
     6d4:	86 e4       	ldi	r24, 0x46	; 70
     6d6:	ea df       	rcall	.-44     	; 0x6ac <servo_set_right_grabber_position>
}
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	6c 97       	sbiw	r28, 0x1c	; 28
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     6f2:	85 e5       	ldi	r24, 0x55	; 85
     6f4:	0c df       	rcall	.-488    	; 0x50e <servo_set_umbrella_position>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	aa e7       	ldi	r26, 0x7A	; 122
     6fc:	b4 e4       	ldi	r27, 0x44	; 68
     6fe:	89 8f       	std	Y+25, r24	; 0x19
     700:	9a 8f       	std	Y+26, r25	; 0x1a
     702:	ab 8f       	std	Y+27, r26	; 0x1b
     704:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     706:	69 8d       	ldd	r22, Y+25	; 0x19
     708:	7a 8d       	ldd	r23, Y+26	; 0x1a
     70a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     70c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e4       	ldi	r19, 0x40	; 64
     712:	4c e1       	ldi	r20, 0x1C	; 28
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	8d 8b       	std	Y+21, r24	; 0x15
     720:	9e 8b       	std	Y+22, r25	; 0x16
     722:	af 8b       	std	Y+23, r26	; 0x17
     724:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     726:	6d 89       	ldd	r22, Y+21	; 0x15
     728:	7e 89       	ldd	r23, Y+22	; 0x16
     72a:	8f 89       	ldd	r24, Y+23	; 0x17
     72c:	98 8d       	ldd	r25, Y+24	; 0x18
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     73a:	88 23       	and	r24, r24
     73c:	2c f4       	brge	.+10     	; 0x748 <actuators_umbrella+0x6a>
		__ticks = 1;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	9c 8b       	std	Y+20, r25	; 0x14
     744:	8b 8b       	std	Y+19, r24	; 0x13
     746:	3f c0       	rjmp	.+126    	; 0x7c6 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     748:	6d 89       	ldd	r22, Y+21	; 0x15
     74a:	7e 89       	ldd	r23, Y+22	; 0x16
     74c:	8f 89       	ldd	r24, Y+23	; 0x17
     74e:	98 8d       	ldd	r25, Y+24	; 0x18
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	3f ef       	ldi	r19, 0xFF	; 255
     754:	4f e7       	ldi	r20, 0x7F	; 127
     756:	57 e4       	ldi	r21, 0x47	; 71
     758:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     75c:	18 16       	cp	r1, r24
     75e:	4c f5       	brge	.+82     	; 0x7b2 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     760:	69 8d       	ldd	r22, Y+25	; 0x19
     762:	7a 8d       	ldd	r23, Y+26	; 0x1a
     764:	8b 8d       	ldd	r24, Y+27	; 0x1b
     766:	9c 8d       	ldd	r25, Y+28	; 0x1c
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e2       	ldi	r20, 0x20	; 32
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	bc 01       	movw	r22, r24
     77a:	cd 01       	movw	r24, r26
     77c:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	9c 8b       	std	Y+20, r25	; 0x14
     786:	8b 8b       	std	Y+19, r24	; 0x13
     788:	0f c0       	rjmp	.+30     	; 0x7a8 <actuators_umbrella+0xca>
     78a:	8a ef       	ldi	r24, 0xFA	; 250
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9a 8b       	std	Y+18, r25	; 0x12
     790:	89 8b       	std	Y+17, r24	; 0x11
     792:	89 89       	ldd	r24, Y+17	; 0x11
     794:	9a 89       	ldd	r25, Y+18	; 0x12
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <actuators_umbrella+0xb8>
     79a:	9a 8b       	std	Y+18, r25	; 0x12
     79c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     79e:	8b 89       	ldd	r24, Y+19	; 0x13
     7a0:	9c 89       	ldd	r25, Y+20	; 0x14
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	9c 8b       	std	Y+20, r25	; 0x14
     7a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a8:	8b 89       	ldd	r24, Y+19	; 0x13
     7aa:	9c 89       	ldd	r25, Y+20	; 0x14
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	69 f7       	brne	.-38     	; 0x78a <actuators_umbrella+0xac>
     7b0:	14 c0       	rjmp	.+40     	; 0x7da <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b2:	6d 89       	ldd	r22, Y+21	; 0x15
     7b4:	7e 89       	ldd	r23, Y+22	; 0x16
     7b6:	8f 89       	ldd	r24, Y+23	; 0x17
     7b8:	98 8d       	ldd	r25, Y+24	; 0x18
     7ba:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	9c 8b       	std	Y+20, r25	; 0x14
     7c4:	8b 8b       	std	Y+19, r24	; 0x13
     7c6:	8b 89       	ldd	r24, Y+19	; 0x13
     7c8:	9c 89       	ldd	r25, Y+20	; 0x14
     7ca:	98 8b       	std	Y+16, r25	; 0x10
     7cc:	8f 87       	std	Y+15, r24	; 0x0f
     7ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d0:	98 89       	ldd	r25, Y+16	; 0x10
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <actuators_umbrella+0xf4>
     7d6:	98 8b       	std	Y+16, r25	; 0x10
     7d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	dd de       	rcall	.-582    	; 0x598 <servo_set_door_position>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	aa e7       	ldi	r26, 0x7A	; 122
     7e4:	b4 e4       	ldi	r27, 0x44	; 68
     7e6:	8b 87       	std	Y+11, r24	; 0x0b
     7e8:	9c 87       	std	Y+12, r25	; 0x0c
     7ea:	ad 87       	std	Y+13, r26	; 0x0d
     7ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7ee:	6b 85       	ldd	r22, Y+11	; 0x0b
     7f0:	7c 85       	ldd	r23, Y+12	; 0x0c
     7f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e4       	ldi	r19, 0x40	; 64
     7fa:	4c e1       	ldi	r20, 0x1C	; 28
     7fc:	55 e4       	ldi	r21, 0x45	; 69
     7fe:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	8f 83       	std	Y+7, r24	; 0x07
     808:	98 87       	std	Y+8, r25	; 0x08
     80a:	a9 87       	std	Y+9, r26	; 0x09
     80c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     80e:	6f 81       	ldd	r22, Y+7	; 0x07
     810:	78 85       	ldd	r23, Y+8	; 0x08
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	9a 85       	ldd	r25, Y+10	; 0x0a
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     822:	88 23       	and	r24, r24
     824:	2c f4       	brge	.+10     	; 0x830 <actuators_umbrella+0x152>
		__ticks = 1;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	9e 83       	std	Y+6, r25	; 0x06
     82c:	8d 83       	std	Y+5, r24	; 0x05
     82e:	3f c0       	rjmp	.+126    	; 0x8ae <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     830:	6f 81       	ldd	r22, Y+7	; 0x07
     832:	78 85       	ldd	r23, Y+8	; 0x08
     834:	89 85       	ldd	r24, Y+9	; 0x09
     836:	9a 85       	ldd	r25, Y+10	; 0x0a
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	3f ef       	ldi	r19, 0xFF	; 255
     83c:	4f e7       	ldi	r20, 0x7F	; 127
     83e:	57 e4       	ldi	r21, 0x47	; 71
     840:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     844:	18 16       	cp	r1, r24
     846:	4c f5       	brge	.+82     	; 0x89a <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     848:	6b 85       	ldd	r22, Y+11	; 0x0b
     84a:	7c 85       	ldd	r23, Y+12	; 0x0c
     84c:	8d 85       	ldd	r24, Y+13	; 0x0d
     84e:	9e 85       	ldd	r25, Y+14	; 0x0e
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e2       	ldi	r20, 0x20	; 32
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9e 83       	std	Y+6, r25	; 0x06
     86e:	8d 83       	std	Y+5, r24	; 0x05
     870:	0f c0       	rjmp	.+30     	; 0x890 <actuators_umbrella+0x1b2>
     872:	8a ef       	ldi	r24, 0xFA	; 250
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	9c 83       	std	Y+4, r25	; 0x04
     878:	8b 83       	std	Y+3, r24	; 0x03
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <actuators_umbrella+0x1a0>
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     886:	8d 81       	ldd	r24, Y+5	; 0x05
     888:	9e 81       	ldd	r25, Y+6	; 0x06
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	9e 83       	std	Y+6, r25	; 0x06
     88e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	9e 81       	ldd	r25, Y+6	; 0x06
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	69 f7       	brne	.-38     	; 0x872 <actuators_umbrella+0x194>
     898:	14 c0       	rjmp	.+40     	; 0x8c2 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89a:	6f 81       	ldd	r22, Y+7	; 0x07
     89c:	78 85       	ldd	r23, Y+8	; 0x08
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a2:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	9e 83       	std	Y+6, r25	; 0x06
     8ac:	8d 83       	std	Y+5, r24	; 0x05
     8ae:	8d 81       	ldd	r24, Y+5	; 0x05
     8b0:	9e 81       	ldd	r25, Y+6	; 0x06
     8b2:	9a 83       	std	Y+2, r25	; 0x02
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <actuators_umbrella+0x1dc>
     8be:	9a 83       	std	Y+2, r25	; 0x02
     8c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8c2:	6c 96       	adiw	r28, 0x1c	; 28
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	08 95       	ret

000008d4 <actuators_setup>:
void actuators_setup(void)
{
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	aa 97       	sbiw	r28, 0x2a	; 42
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(80);
     8e8:	80 e5       	ldi	r24, 0x50	; 80
     8ea:	56 de       	rcall	.-852    	; 0x598 <servo_set_door_position>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	aa e7       	ldi	r26, 0x7A	; 122
     8f2:	b4 e4       	ldi	r27, 0x44	; 68
     8f4:	8f a3       	std	Y+39, r24	; 0x27
     8f6:	98 a7       	std	Y+40, r25	; 0x28
     8f8:	a9 a7       	std	Y+41, r26	; 0x29
     8fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8fc:	6f a1       	ldd	r22, Y+39	; 0x27
     8fe:	78 a5       	ldd	r23, Y+40	; 0x28
     900:	89 a5       	ldd	r24, Y+41	; 0x29
     902:	9a a5       	ldd	r25, Y+42	; 0x2a
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e4       	ldi	r19, 0x40	; 64
     908:	4c e1       	ldi	r20, 0x1C	; 28
     90a:	55 e4       	ldi	r21, 0x45	; 69
     90c:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	8b a3       	std	Y+35, r24	; 0x23
     916:	9c a3       	std	Y+36, r25	; 0x24
     918:	ad a3       	std	Y+37, r26	; 0x25
     91a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     91c:	6b a1       	ldd	r22, Y+35	; 0x23
     91e:	7c a1       	ldd	r23, Y+36	; 0x24
     920:	8d a1       	ldd	r24, Y+37	; 0x25
     922:	9e a1       	ldd	r25, Y+38	; 0x26
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e8       	ldi	r20, 0x80	; 128
     92a:	5f e3       	ldi	r21, 0x3F	; 63
     92c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     930:	88 23       	and	r24, r24
     932:	2c f4       	brge	.+10     	; 0x93e <actuators_setup+0x6a>
		__ticks = 1;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9a a3       	std	Y+34, r25	; 0x22
     93a:	89 a3       	std	Y+33, r24	; 0x21
     93c:	3f c0       	rjmp	.+126    	; 0x9bc <actuators_setup+0xe8>
	else if (__tmp > 65535)
     93e:	6b a1       	ldd	r22, Y+35	; 0x23
     940:	7c a1       	ldd	r23, Y+36	; 0x24
     942:	8d a1       	ldd	r24, Y+37	; 0x25
     944:	9e a1       	ldd	r25, Y+38	; 0x26
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	3f ef       	ldi	r19, 0xFF	; 255
     94a:	4f e7       	ldi	r20, 0x7F	; 127
     94c:	57 e4       	ldi	r21, 0x47	; 71
     94e:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     952:	18 16       	cp	r1, r24
     954:	4c f5       	brge	.+82     	; 0x9a8 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     956:	6f a1       	ldd	r22, Y+39	; 0x27
     958:	78 a5       	ldd	r23, Y+40	; 0x28
     95a:	89 a5       	ldd	r24, Y+41	; 0x29
     95c:	9a a5       	ldd	r25, Y+42	; 0x2a
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e2       	ldi	r20, 0x20	; 32
     964:	51 e4       	ldi	r21, 0x41	; 65
     966:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	bc 01       	movw	r22, r24
     970:	cd 01       	movw	r24, r26
     972:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	9a a3       	std	Y+34, r25	; 0x22
     97c:	89 a3       	std	Y+33, r24	; 0x21
     97e:	0f c0       	rjmp	.+30     	; 0x99e <actuators_setup+0xca>
     980:	8a ef       	ldi	r24, 0xFA	; 250
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	98 a3       	std	Y+32, r25	; 0x20
     986:	8f 8f       	std	Y+31, r24	; 0x1f
     988:	8f 8d       	ldd	r24, Y+31	; 0x1f
     98a:	98 a1       	ldd	r25, Y+32	; 0x20
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <actuators_setup+0xb8>
     990:	98 a3       	std	Y+32, r25	; 0x20
     992:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     994:	89 a1       	ldd	r24, Y+33	; 0x21
     996:	9a a1       	ldd	r25, Y+34	; 0x22
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	9a a3       	std	Y+34, r25	; 0x22
     99c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99e:	89 a1       	ldd	r24, Y+33	; 0x21
     9a0:	9a a1       	ldd	r25, Y+34	; 0x22
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	69 f7       	brne	.-38     	; 0x980 <actuators_setup+0xac>
     9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a8:	6b a1       	ldd	r22, Y+35	; 0x23
     9aa:	7c a1       	ldd	r23, Y+36	; 0x24
     9ac:	8d a1       	ldd	r24, Y+37	; 0x25
     9ae:	9e a1       	ldd	r25, Y+38	; 0x26
     9b0:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	9a a3       	std	Y+34, r25	; 0x22
     9ba:	89 a3       	std	Y+33, r24	; 0x21
     9bc:	89 a1       	ldd	r24, Y+33	; 0x21
     9be:	9a a1       	ldd	r25, Y+34	; 0x22
     9c0:	9e 8f       	std	Y+30, r25	; 0x1e
     9c2:	8d 8f       	std	Y+29, r24	; 0x1d
     9c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <actuators_setup+0xf4>
     9cc:	9e 8f       	std	Y+30, r25	; 0x1e
     9ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(-90);
     9d0:	86 ea       	ldi	r24, 0xA6	; 166
     9d2:	9d dd       	rcall	.-1222   	; 0x50e <servo_set_umbrella_position>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	aa e7       	ldi	r26, 0x7A	; 122
     9da:	b4 e4       	ldi	r27, 0x44	; 68
     9dc:	89 8f       	std	Y+25, r24	; 0x19
     9de:	9a 8f       	std	Y+26, r25	; 0x1a
     9e0:	ab 8f       	std	Y+27, r26	; 0x1b
     9e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e4:	69 8d       	ldd	r22, Y+25	; 0x19
     9e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e4       	ldi	r19, 0x40	; 64
     9f0:	4c e1       	ldi	r20, 0x1C	; 28
     9f2:	55 e4       	ldi	r21, 0x45	; 69
     9f4:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	8d 8b       	std	Y+21, r24	; 0x15
     9fe:	9e 8b       	std	Y+22, r25	; 0x16
     a00:	af 8b       	std	Y+23, r26	; 0x17
     a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a04:	6d 89       	ldd	r22, Y+21	; 0x15
     a06:	7e 89       	ldd	r23, Y+22	; 0x16
     a08:	8f 89       	ldd	r24, Y+23	; 0x17
     a0a:	98 8d       	ldd	r25, Y+24	; 0x18
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e8       	ldi	r20, 0x80	; 128
     a12:	5f e3       	ldi	r21, 0x3F	; 63
     a14:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     a18:	88 23       	and	r24, r24
     a1a:	2c f4       	brge	.+10     	; 0xa26 <actuators_setup+0x152>
		__ticks = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	9c 8b       	std	Y+20, r25	; 0x14
     a22:	8b 8b       	std	Y+19, r24	; 0x13
     a24:	3f c0       	rjmp	.+126    	; 0xaa4 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a26:	6d 89       	ldd	r22, Y+21	; 0x15
     a28:	7e 89       	ldd	r23, Y+22	; 0x16
     a2a:	8f 89       	ldd	r24, Y+23	; 0x17
     a2c:	98 8d       	ldd	r25, Y+24	; 0x18
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f e7       	ldi	r20, 0x7F	; 127
     a34:	57 e4       	ldi	r21, 0x47	; 71
     a36:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     a3a:	18 16       	cp	r1, r24
     a3c:	4c f5       	brge	.+82     	; 0xa90 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3e:	69 8d       	ldd	r22, Y+25	; 0x19
     a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e2       	ldi	r20, 0x20	; 32
     a4c:	51 e4       	ldi	r21, 0x41	; 65
     a4e:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	bc 01       	movw	r22, r24
     a58:	cd 01       	movw	r24, r26
     a5a:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	9c 8b       	std	Y+20, r25	; 0x14
     a64:	8b 8b       	std	Y+19, r24	; 0x13
     a66:	0f c0       	rjmp	.+30     	; 0xa86 <actuators_setup+0x1b2>
     a68:	8a ef       	ldi	r24, 0xFA	; 250
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	9a 8b       	std	Y+18, r25	; 0x12
     a6e:	89 8b       	std	Y+17, r24	; 0x11
     a70:	89 89       	ldd	r24, Y+17	; 0x11
     a72:	9a 89       	ldd	r25, Y+18	; 0x12
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <actuators_setup+0x1a0>
     a78:	9a 8b       	std	Y+18, r25	; 0x12
     a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	8b 89       	ldd	r24, Y+19	; 0x13
     a7e:	9c 89       	ldd	r25, Y+20	; 0x14
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	9c 8b       	std	Y+20, r25	; 0x14
     a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a86:	8b 89       	ldd	r24, Y+19	; 0x13
     a88:	9c 89       	ldd	r25, Y+20	; 0x14
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	69 f7       	brne	.-38     	; 0xa68 <actuators_setup+0x194>
     a8e:	14 c0       	rjmp	.+40     	; 0xab8 <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a90:	6d 89       	ldd	r22, Y+21	; 0x15
     a92:	7e 89       	ldd	r23, Y+22	; 0x16
     a94:	8f 89       	ldd	r24, Y+23	; 0x17
     a96:	98 8d       	ldd	r25, Y+24	; 0x18
     a98:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	9c 8b       	std	Y+20, r25	; 0x14
     aa2:	8b 8b       	std	Y+19, r24	; 0x13
     aa4:	8b 89       	ldd	r24, Y+19	; 0x13
     aa6:	9c 89       	ldd	r25, Y+20	; 0x14
     aa8:	98 8b       	std	Y+16, r25	; 0x10
     aaa:	8f 87       	std	Y+15, r24	; 0x0f
     aac:	8f 85       	ldd	r24, Y+15	; 0x0f
     aae:	98 89       	ldd	r25, Y+16	; 0x10
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <actuators_setup+0x1dc>
     ab4:	98 8b       	std	Y+16, r25	; 0x10
     ab6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	6e dd       	rcall	.-1316   	; 0x598 <servo_set_door_position>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	aa ef       	ldi	r26, 0xFA	; 250
     ac2:	b3 e4       	ldi	r27, 0x43	; 67
     ac4:	8b 87       	std	Y+11, r24	; 0x0b
     ac6:	9c 87       	std	Y+12, r25	; 0x0c
     ac8:	ad 87       	std	Y+13, r26	; 0x0d
     aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     acc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ace:	7c 85       	ldd	r23, Y+12	; 0x0c
     ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e4       	ldi	r19, 0x40	; 64
     ad8:	4c e1       	ldi	r20, 0x1C	; 28
     ada:	55 e4       	ldi	r21, 0x45	; 69
     adc:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	8f 83       	std	Y+7, r24	; 0x07
     ae6:	98 87       	std	Y+8, r25	; 0x08
     ae8:	a9 87       	std	Y+9, r26	; 0x09
     aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     aec:	6f 81       	ldd	r22, Y+7	; 0x07
     aee:	78 85       	ldd	r23, Y+8	; 0x08
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	9a 85       	ldd	r25, Y+10	; 0x0a
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	5f e3       	ldi	r21, 0x3F	; 63
     afc:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__cmpsf2>
     b00:	88 23       	and	r24, r24
     b02:	2c f4       	brge	.+10     	; 0xb0e <actuators_setup+0x23a>
		__ticks = 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	8d 83       	std	Y+5, r24	; 0x05
     b0c:	3f c0       	rjmp	.+126    	; 0xb8c <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     b0e:	6f 81       	ldd	r22, Y+7	; 0x07
     b10:	78 85       	ldd	r23, Y+8	; 0x08
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	3f ef       	ldi	r19, 0xFF	; 255
     b1a:	4f e7       	ldi	r20, 0x7F	; 127
     b1c:	57 e4       	ldi	r21, 0x47	; 71
     b1e:	0e 94 21 12 	call	0x2442	; 0x2442 <__gesf2>
     b22:	18 16       	cp	r1, r24
     b24:	4c f5       	brge	.+82     	; 0xb78 <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b26:	6b 85       	ldd	r22, Y+11	; 0x0b
     b28:	7c 85       	ldd	r23, Y+12	; 0x0c
     b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e2       	ldi	r20, 0x20	; 32
     b34:	51 e4       	ldi	r21, 0x41	; 65
     b36:	0e 94 25 12 	call	0x244a	; 0x244a <__mulsf3>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	9e 83       	std	Y+6, r25	; 0x06
     b4c:	8d 83       	std	Y+5, r24	; 0x05
     b4e:	0f c0       	rjmp	.+30     	; 0xb6e <actuators_setup+0x29a>
     b50:	8a ef       	ldi	r24, 0xFA	; 250
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <actuators_setup+0x288>
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	9e 81       	ldd	r25, Y+6	; 0x06
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9e 83       	std	Y+6, r25	; 0x06
     b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	8d 81       	ldd	r24, Y+5	; 0x05
     b70:	9e 81       	ldd	r25, Y+6	; 0x06
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	69 f7       	brne	.-38     	; 0xb50 <actuators_setup+0x27c>
     b76:	14 c0       	rjmp	.+40     	; 0xba0 <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b78:	6f 81       	ldd	r22, Y+7	; 0x07
     b7a:	78 85       	ldd	r23, Y+8	; 0x08
     b7c:	89 85       	ldd	r24, Y+9	; 0x09
     b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b80:	0e 94 43 11 	call	0x2286	; 0x2286 <__fixunssfsi>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	8d 81       	ldd	r24, Y+5	; 0x05
     b8e:	9e 81       	ldd	r25, Y+6	; 0x06
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <actuators_setup+0x2c4>
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     ba0:	93 dd       	rcall	.-1242   	; 0x6c8 <servo_set_grabbers_up>
}
     ba2:	aa 96       	adiw	r28, 0x2a	; 42
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	00 90 5b 00 	lds	r0, 0x005B
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <__vector_18+0x2a>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <__vector_18+0x2c>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     be4:	ed ee       	ldi	r30, 0xED	; 237
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     bec:	1b 82       	std	Y+3, r1	; 0x03
     bee:	9c c0       	rjmp	.+312    	; 0xd28 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     bf0:	ed ee       	ldi	r30, 0xED	; 237
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	82 95       	swap	r24
     bf8:	80 7f       	andi	r24, 0xF0	; 240
     bfa:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     bfc:	ee ee       	ldi	r30, 0xEE	; 238
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	82 95       	swap	r24
     c04:	86 95       	lsr	r24
     c06:	87 70       	andi	r24, 0x07	; 7
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <__vector_18+0x62>
     c14:	6e c0       	rjmp	.+220    	; 0xcf2 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     c16:	ef ee       	ldi	r30, 0xEF	; 239
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 e8       	ldi	r24, 0x80	; 128
     c1c:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     c1e:	ae ee       	ldi	r26, 0xEE	; 238
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ee ee       	ldi	r30, 0xEE	; 238
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8f 7d       	andi	r24, 0xDF	; 223
     c2a:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     c2c:	e2 ef       	ldi	r30, 0xF2	; 242
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	82 95       	swap	r24
     c34:	86 95       	lsr	r24
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	28 2f       	mov	r18, r24
     c3a:	e3 ef       	ldi	r30, 0xF3	; 243
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	82 2b       	or	r24, r18
     c52:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     c54:	19 82       	std	Y+1, r1	; 0x01
     c56:	2a c0       	rjmp	.+84     	; 0xcac <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	82 1b       	sub	r24, r18
     c64:	93 0b       	sbc	r25, r19
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	90 95       	com	r25
     c6c:	81 95       	neg	r24
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	fc 01       	movw	r30, r24
     c72:	ee 5e       	subi	r30, 0xEE	; 238
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	40 81       	ld	r20, Z
     c78:	51 81       	ldd	r21, Z+1	; 0x01
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	fc 01       	movw	r30, r24
     c84:	ea 5d       	subi	r30, 0xDA	; 218
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	80 81       	ld	r24, Z
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	da 01       	movw	r26, r20
     c9a:	a8 0f       	add	r26, r24
     c9c:	b9 1f       	adc	r27, r25
     c9e:	ea ef       	ldi	r30, 0xFA	; 250
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	88 30       	cpi	r24, 0x08	; 8
     cb0:	98 f2       	brcs	.-90     	; 0xc58 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	fc 01       	movw	r30, r24
     cbc:	ea 5d       	subi	r30, 0xDA	; 218
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	41 f4       	brne	.+16     	; 0xcdc <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	fc 01       	movw	r30, r24
     cd6:	ea 5d       	subi	r30, 0xDA	; 218
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	fc 01       	movw	r30, r24
     ce6:	e6 5c       	subi	r30, 0xC6	; 198
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	80 81       	ld	r24, Z
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 83       	st	Z, r24
     cf0:	1f c0       	rjmp	.+62     	; 0xd30 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     cf2:	ee ee       	ldi	r30, 0xEE	; 238
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	82 95       	swap	r24
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	83 70       	andi	r24, 0x03	; 3
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	81 70       	andi	r24, 0x01	; 1
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	59 f0       	breq	.+22     	; 0xd22 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     d0c:	ef ee       	ldi	r30, 0xEF	; 239
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     d12:	ae ee       	ldi	r26, 0xEE	; 238
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ee ee       	ldi	r30, 0xEE	; 238
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	8c 93       	st	X, r24
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	8f 30       	cpi	r24, 0x0F	; 15
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <__vector_18+0x17c>
     d2e:	60 cf       	rjmp	.-320    	; 0xbf0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     d30:	ed ee       	ldi	r30, 0xED	; 237
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     d38:	aa ed       	ldi	r26, 0xDA	; 218
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ea ed       	ldi	r30, 0xDA	; 218
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8c 93       	st	X, r24
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	00 92 5b 00 	sts	0x005B, r0
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <CAN_InitModule+0x6>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     d7e:	e8 ed       	ldi	r30, 0xD8	; 216
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	32 c0       	rjmp	.+100    	; 0xdee <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     d8a:	ed ee       	ldi	r30, 0xED	; 237
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	82 95       	swap	r24
     d92:	80 7f       	andi	r24, 0xF0	; 240
     d94:	80 83       	st	Z, r24

		CANSTMOB = 0;
     d96:	ee ee       	ldi	r30, 0xEE	; 238
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	10 82       	st	Z, r1
		CANCDMOB = 0;
     d9c:	ef ee       	ldi	r30, 0xEF	; 239
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	10 82       	st	Z, r1

		CANIDT1 = 0;
     da2:	e3 ef       	ldi	r30, 0xF3	; 243
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	10 82       	st	Z, r1
		CANIDT2 = 0;
     da8:	e2 ef       	ldi	r30, 0xF2	; 242
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	10 82       	st	Z, r1
		CANIDT3 = 0;
     dae:	e1 ef       	ldi	r30, 0xF1	; 241
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	10 82       	st	Z, r1
		CANIDT4 = 0;
     db4:	e0 ef       	ldi	r30, 0xF0	; 240
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	10 82       	st	Z, r1
		CANIDM1 = 0;
     dba:	e7 ef       	ldi	r30, 0xF7	; 247
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	10 82       	st	Z, r1
		CANIDM2 = 0;
     dc0:	e6 ef       	ldi	r30, 0xF6	; 246
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
		CANIDM3 = 0;
     dc6:	e5 ef       	ldi	r30, 0xF5	; 245
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	10 82       	st	Z, r1
		CANIDM4 = 0;
     dcc:	e4 ef       	ldi	r30, 0xF4	; 244
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     dd2:	19 82       	std	Y+1, r1	; 0x01
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <CAN_InitModule+0x6e>
			CANMSG = 0;
     dd6:	ea ef       	ldi	r30, 0xFA	; 250
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	88 30       	cpi	r24, 0x08	; 8
     de6:	b8 f3       	brcs	.-18     	; 0xdd6 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	8f 30       	cpi	r24, 0x0F	; 15
     df2:	58 f2       	brcs	.-106    	; 0xd8a <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     df4:	e8 ed       	ldi	r30, 0xD8	; 216
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     dfc:	e2 ee       	ldi	r30, 0xE2	; 226
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     e04:	e3 ee       	ldi	r30, 0xE3	; 227
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     e0c:	e4 ee       	ldi	r30, 0xE4	; 228
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8e e5       	ldi	r24, 0x5E	; 94
     e12:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     e14:	e5 ee       	ldi	r30, 0xE5	; 229
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     e1a:	eb ed       	ldi	r30, 0xDB	; 219
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 eb       	ldi	r24, 0xB0	; 176
     e20:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     e22:	ef ed       	ldi	r30, 0xDF	; 223
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8f e7       	ldi	r24, 0x7F	; 127
     e28:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     e2a:	ee ed       	ldi	r30, 0xDE	; 222
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	80 83       	st	Z, r24
	sei();
     e32:	78 94       	sei
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <CAN_InitRxMob+0x6>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <CAN_InitRxMob+0x8>
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     e50:	ed ee       	ldi	r30, 0xED	; 237
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     e58:	e9 ed       	ldi	r30, 0xD9	; 217
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 95       	swap	r24
     e60:	8f 70       	andi	r24, 0x0F	; 15
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	88 23       	and	r24, r24
     e6c:	a9 f7       	brne	.-22     	; 0xe58 <CAN_InitRxMob+0x1a>
     e6e:	e9 ed       	ldi	r30, 0xD9	; 217
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	81 70       	andi	r24, 0x01	; 1
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	88 23       	and	r24, r24
     e84:	49 f7       	brne	.-46     	; 0xe58 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e86:	1a 82       	std	Y+2, r1	; 0x02
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     e8a:	ed ee       	ldi	r30, 0xED	; 237
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	82 95       	swap	r24
     e92:	80 7f       	andi	r24, 0xF0	; 240
     e94:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     e96:	ef ee       	ldi	r30, 0xEF	; 239
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	82 95       	swap	r24
     e9e:	86 95       	lsr	r24
     ea0:	86 95       	lsr	r24
     ea2:	83 70       	andi	r24, 0x03	; 3
     ea4:	88 23       	and	r24, r24
     ea6:	69 f5       	brne	.+90     	; 0xf02 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     ea8:	ef ee       	ldi	r30, 0xEF	; 239
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	8f e0       	ldi	r24, 0x0F	; 15
     eae:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     eb0:	e3 ef       	ldi	r30, 0xF3	; 243
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	90 70       	andi	r25, 0x00	; 0
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     ec8:	e2 ef       	ldi	r30, 0xF2	; 242
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	82 95       	swap	r24
     ed0:	88 0f       	add	r24, r24
     ed2:	80 7e       	andi	r24, 0xE0	; 224
     ed4:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     ed6:	e6 ef       	ldi	r30, 0xF6	; 246
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 ee       	ldi	r24, 0xE0	; 224
     edc:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     ede:	e7 ef       	ldi	r30, 0xF7	; 247
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     ee6:	af ee       	ldi	r26, 0xEF	; 239
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ef ee       	ldi	r30, 0xEF	; 239
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     ef4:	ed ee       	ldi	r30, 0xED	; 237
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	80 83       	st	Z, r24

		return 1;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	0c c0       	rjmp	.+24     	; 0xf1a <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	8f 30       	cpi	r24, 0x0F	; 15
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <CAN_InitRxMob+0xd2>
     f0e:	bd cf       	rjmp	.-134    	; 0xe8a <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     f10:	ed ee       	ldi	r30, 0xED	; 237
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	80 83       	st	Z, r24

	return 0;
     f18:	1d 82       	std	Y+5, r1	; 0x05
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <CAN_Init+0xa>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     f3c:	1b df       	rcall	.-458    	; 0xd74 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	36 c0       	rjmp	.+108    	; 0xfae <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	79 df       	rcall	.-270    	; 0xe3e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	8c 01       	movw	r16, r24
     f58:	0e 5e       	subi	r16, 0xEE	; 238
     f5a:	1e 4f       	sbci	r17, 0xFE	; 254
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 88 12 	call	0x2510	; 0x2510 <calloc>
     f68:	f8 01       	movw	r30, r16
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	48 2f       	mov	r20, r24
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	fc 01       	movw	r30, r24
     f82:	e6 5c       	subi	r30, 0xC6	; 198
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	10 82       	st	Z, r1
     f88:	fc 01       	movw	r30, r24
     f8a:	e6 5c       	subi	r30, 0xC6	; 198
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	80 81       	ld	r24, Z
     f90:	f9 01       	movw	r30, r18
     f92:	e0 5d       	subi	r30, 0xD0	; 208
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	80 83       	st	Z, r24
     f98:	f9 01       	movw	r30, r18
     f9a:	e0 5d       	subi	r30, 0xD0	; 208
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	80 81       	ld	r24, Z
     fa0:	fa 01       	movw	r30, r20
     fa2:	ea 5d       	subi	r30, 0xDA	; 218
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	99 81       	ldd	r25, Y+1	; 0x01
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	98 17       	cp	r25, r24
     fb4:	30 f2       	brcs	.-116    	; 0xf42 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <CAN_Read+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <CAN_Read+0x8>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9b 83       	std	Y+3, r25	; 0x03
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     fd6:	e4 e3       	ldi	r30, 0x34	; 52
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	fc 01       	movw	r30, r24
     fe8:	e6 5c       	subi	r30, 0xC6	; 198
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	88 23       	and	r24, r24
     ff0:	b1 f3       	breq	.-20     	; 0xfde <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	30 c0       	rjmp	.+96     	; 0x1056 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	dc 01       	movw	r26, r24
    1002:	a2 0f       	add	r26, r18
    1004:	b3 1f       	adc	r27, r19
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	82 1b       	sub	r24, r18
    1012:	93 0b       	sbc	r25, r19
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	90 95       	com	r25
    101a:	81 95       	neg	r24
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	fc 01       	movw	r30, r24
    1020:	ee 5e       	subi	r30, 0xEE	; 238
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	40 81       	ld	r20, Z
    1026:	51 81       	ldd	r21, Z+1	; 0x01
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	fc 01       	movw	r30, r24
    1032:	e0 5d       	subi	r30, 0xD0	; 208
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	80 81       	ld	r24, Z
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	fa 01       	movw	r30, r20
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	80 81       	ld	r24, Z
    104e:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	68 f2       	brcs	.-102    	; 0xff6 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	fc 01       	movw	r30, r24
    1066:	e0 5d       	subi	r30, 0xD0	; 208
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	80 81       	ld	r24, Z
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 83       	st	Z, r24
    1070:	80 81       	ld	r24, Z
    1072:	85 30       	cpi	r24, 0x05	; 5
    1074:	41 f4       	brne	.+16     	; 0x1086 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	fc 01       	movw	r30, r24
    1080:	e0 5d       	subi	r30, 0xD0	; 208
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9c 01       	movw	r18, r24
    108e:	21 50       	subi	r18, 0x01	; 1
    1090:	30 40       	sbci	r19, 0x00	; 0
    1092:	f9 01       	movw	r30, r18
    1094:	e6 5c       	subi	r30, 0xC6	; 198
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	80 81       	ld	r24, Z
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	f9 01       	movw	r30, r18
    109e:	e6 5c       	subi	r30, 0xC6	; 198
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	80 83       	st	Z, r24

	return 0;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	27 97       	sbiw	r28, 0x07	; 7
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	9d 83       	std	Y+5, r25	; 0x05
    10ca:	8c 83       	std	Y+4, r24	; 0x04
    10cc:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    10ce:	e9 ed       	ldi	r30, 0xD9	; 217
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	82 95       	swap	r24
    10d6:	8f 70       	andi	r24, 0x0F	; 15
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	88 23       	and	r24, r24
    10e2:	a9 f7       	brne	.-22     	; 0x10ce <CAN_Write+0x1a>
    10e4:	e9 ed       	ldi	r30, 0xD9	; 217
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	86 95       	lsr	r24
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	90 70       	andi	r25, 0x00	; 0
    10f8:	88 23       	and	r24, r24
    10fa:	49 f7       	brne	.-46     	; 0x10ce <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    10fc:	ed ee       	ldi	r30, 0xED	; 237
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1104:	1a 82       	std	Y+2, r1	; 0x02
    1106:	12 c0       	rjmp	.+36     	; 0x112c <__stack+0x2d>
	{
		CANPAGE = ch << 4;
    1108:	ed ee       	ldi	r30, 0xED	; 237
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	82 95       	swap	r24
    1110:	80 7f       	andi	r24, 0xF0	; 240
    1112:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    1114:	ef ee       	ldi	r30, 0xEF	; 239
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	82 95       	swap	r24
    111c:	86 95       	lsr	r24
    111e:	86 95       	lsr	r24
    1120:	83 70       	andi	r24, 0x03	; 3
    1122:	88 23       	and	r24, r24
    1124:	31 f0       	breq	.+12     	; 0x1132 <__stack+0x33>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	8f 30       	cpi	r24, 0x0F	; 15
    1130:	58 f3       	brcs	.-42     	; 0x1108 <__stack+0x9>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	8f 30       	cpi	r24, 0x0F	; 15
    1136:	19 f4       	brne	.+6      	; 0x113e <__stack+0x3f>
		return -1;
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	8f 83       	std	Y+7, r24	; 0x07
    113c:	32 c0       	rjmp	.+100    	; 0x11a2 <__stack+0xa3>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    113e:	e2 ef       	ldi	r30, 0xF2	; 242
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	82 95       	swap	r24
    1146:	88 0f       	add	r24, r24
    1148:	80 7e       	andi	r24, 0xE0	; 224
    114a:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    114c:	e3 ef       	ldi	r30, 0xF3	; 243
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	86 95       	lsr	r24
    1158:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    115a:	ef ee       	ldi	r30, 0xEF	; 239
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1162:	1b 82       	std	Y+3, r1	; 0x03
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <__stack+0x85>
		CANMSG = data[i];
    1166:	aa ef       	ldi	r26, 0xFA	; 250
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	80 81       	ld	r24, Z
    117c:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	70 f3       	brcs	.-36     	; 0x1166 <__stack+0x67>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    118a:	af ee       	ldi	r26, 0xEF	; 239
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ef ee       	ldi	r30, 0xEF	; 239
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 64       	ori	r24, 0x40	; 64
    1196:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    1198:	ed ee       	ldi	r30, 0xED	; 237
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	80 83       	st	Z, r24

	return 0;
    11a0:	1f 82       	std	Y+7, r1	; 0x07
    11a2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    11a4:	27 96       	adiw	r28, 0x07	; 7
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	2c 97       	sbiw	r28, 0x0c	; 12
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	89 87       	std	Y+9, r24	; 0x09
    11cc:	6a 87       	std	Y+10, r22	; 0x0a
    11ce:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11d0:	80 91 08 01 	lds	r24, 0x0108
    11d4:	90 91 09 01 	lds	r25, 0x0109
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	06 97       	sbiw	r24, 0x06	; 6
    11e2:	98 87       	std	Y+8, r25	; 0x08
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    11e8:	ef 81       	ldd	r30, Y+7	; 0x07
    11ea:	f8 85       	ldd	r31, Y+8	; 0x08
    11ec:	90 81       	ld	r25, Z
    11ee:	89 85       	ldd	r24, Y+9	; 0x09
    11f0:	98 17       	cp	r25, r24
    11f2:	19 f4       	brne	.+6      	; 0x11fa <gpio_register_pin+0x44>
            return 1;
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	2c 87       	std	Y+12, r18	; 0x0c
    11f8:	c9 c0       	rjmp	.+402    	; 0x138c <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11fa:	ef 81       	ldd	r30, Y+7	; 0x07
    11fc:	f8 85       	ldd	r31, Y+8	; 0x08
    11fe:	80 85       	ldd	r24, Z+8	; 0x08
    1200:	91 85       	ldd	r25, Z+9	; 0x09
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	06 97       	sbiw	r24, 0x06	; 6
    120c:	98 87       	std	Y+8, r25	; 0x08
    120e:	8f 83       	std	Y+7, r24	; 0x07
    1210:	8f 81       	ldd	r24, Y+7	; 0x07
    1212:	98 85       	ldd	r25, Y+8	; 0x08
    1214:	06 96       	adiw	r24, 0x06	; 6
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	86 30       	cpi	r24, 0x06	; 6
    121a:	92 07       	cpc	r25, r18
    121c:	29 f7       	brne	.-54     	; 0x11e8 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	86 95       	lsr	r24
    1222:	86 95       	lsr	r24
    1224:	86 95       	lsr	r24
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	87 70       	andi	r24, 0x07	; 7
    122e:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1230:	8a 85       	ldd	r24, Y+10	; 0x0a
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	09 f0       	breq	.+2      	; 0x1238 <gpio_register_pin+0x82>
    1236:	48 c0       	rjmp	.+144    	; 0x12c8 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	c9 01       	movw	r24, r18
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	4e 96       	adiw	r24, 0x1e	; 30
    124a:	dc 01       	movw	r26, r24
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	c9 01       	movw	r24, r18
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	82 0f       	add	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	4e 96       	adiw	r24, 0x1e	; 30
    125e:	fc 01       	movw	r30, r24
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <gpio_register_pin+0xbe>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	2a 95       	dec	r18
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <gpio_register_pin+0xba>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	4f 96       	adiw	r24, 0x1f	; 31
    128e:	dc 01       	movw	r26, r24
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	c9 01       	movw	r24, r18
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	4f 96       	adiw	r24, 0x1f	; 31
    12a2:	fc 01       	movw	r30, r24
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <gpio_register_pin+0x104>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <gpio_register_pin+0x100>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
        return 0;
    12c4:	1c 86       	std	Y+12, r1	; 0x0c
    12c6:	62 c0       	rjmp	.+196    	; 0x138c <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	c9 01       	movw	r24, r18
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	4e 96       	adiw	r24, 0x1e	; 30
    12da:	dc 01       	movw	r26, r24
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	4e 96       	adiw	r24, 0x1e	; 30
    12ee:	fc 01       	movw	r30, r24
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <gpio_register_pin+0x14e>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <gpio_register_pin+0x14a>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	4f 96       	adiw	r24, 0x1f	; 31
    1320:	dc 01       	movw	r26, r24
    1322:	8e 81       	ldd	r24, Y+6	; 0x06
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	c9 01       	movw	r24, r18
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	82 0f       	add	r24, r18
    1330:	93 1f       	adc	r25, r19
    1332:	4f 96       	adiw	r24, 0x1f	; 31
    1334:	fc 01       	movw	r30, r24
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <gpio_register_pin+0x194>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	2a 95       	dec	r18
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <gpio_register_pin+0x190>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1352:	8a e0       	ldi	r24, 0x0A	; 10
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 a2 12 	call	0x2544	; 0x2544 <malloc>
    135a:	98 87       	std	Y+8, r25	; 0x08
    135c:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	98 85       	ldd	r25, Y+8	; 0x08
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	19 f4       	brne	.+6      	; 0x136c <gpio_register_pin+0x1b6>
        return 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8c 87       	std	Y+12, r24	; 0x0c
    136a:	10 c0       	rjmp	.+32     	; 0x138c <gpio_register_pin+0x1d6>

    input->pin       = pin;
    136c:	ef 81       	ldd	r30, Y+7	; 0x07
    136e:	f8 85       	ldd	r31, Y+8	; 0x08
    1370:	89 85       	ldd	r24, Y+9	; 0x09
    1372:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1374:	ef 81       	ldd	r30, Y+7	; 0x07
    1376:	f8 85       	ldd	r31, Y+8	; 0x08
    1378:	8b 85       	ldd	r24, Y+11	; 0x0b
    137a:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    137c:	8f 81       	ldd	r24, Y+7	; 0x07
    137e:	98 85       	ldd	r25, Y+8	; 0x08
    1380:	06 96       	adiw	r24, 0x06	; 6
    1382:	26 e0       	ldi	r18, 0x06	; 6
    1384:	31 e0       	ldi	r19, 0x01	; 1
    1386:	b9 01       	movw	r22, r18
    1388:	0b d0       	rcall	.+22     	; 0x13a0 <list_add>

    return 0;
    138a:	1c 86       	std	Y+12, r1	; 0x0c
    138c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    138e:	2c 96       	adiw	r28, 0x0c	; 12
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <list_add+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <list_add+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	7c 83       	std	Y+4, r23	; 0x04
    13b2:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    13b4:	eb 81       	ldd	r30, Y+3	; 0x03
    13b6:	fc 81       	ldd	r31, Y+4	; 0x04
    13b8:	42 81       	ldd	r20, Z+2	; 0x02
    13ba:	53 81       	ldd	r21, Z+3	; 0x03
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	b9 01       	movw	r22, r18
    13c6:	07 d0       	rcall	.+14     	; 0x13d6 <__list_add>
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <__list_add+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <__list_add+0x8>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <__list_add+0xa>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	7c 83       	std	Y+4, r23	; 0x04
    13ea:	6b 83       	std	Y+3, r22	; 0x03
    13ec:	5e 83       	std	Y+6, r21	; 0x06
    13ee:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    13f0:	ed 81       	ldd	r30, Y+5	; 0x05
    13f2:	fe 81       	ldd	r31, Y+6	; 0x06
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24
    new->next = next;
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	93 83       	std	Z+3, r25	; 0x03
    1406:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    prev->next = new;
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	93 83       	std	Z+3, r25	; 0x03
    141e:	82 83       	std	Z+2, r24	; 0x02
}
    1420:	26 96       	adiw	r28, 0x06	; 6
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <__gpio_read_pin+0x6>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	86 95       	lsr	r24
    1444:	86 95       	lsr	r24
    1446:	86 95       	lsr	r24
    1448:	8f 5f       	subi	r24, 0xFF	; 255
    144a:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	87 70       	andi	r24, 0x07	; 7
    1450:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	c9 01       	movw	r24, r18
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	4d 96       	adiw	r24, 0x1d	; 29
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <__gpio_read_pin+0x4c>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <__gpio_read_pin+0x48>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	2b 97       	sbiw	r28, 0x0b	; 11
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14a8:	80 91 08 01 	lds	r24, 0x0108
    14ac:	90 91 09 01 	lds	r25, 0x0109
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	06 97       	sbiw	r24, 0x06	; 6
    14ba:	98 87       	std	Y+8, r25	; 0x08
    14bc:	8f 83       	std	Y+7, r24	; 0x07
    14be:	55 c0       	rjmp	.+170    	; 0x156a <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    14c0:	ef 81       	ldd	r30, Y+7	; 0x07
    14c2:	f8 85       	ldd	r31, Y+8	; 0x08
    14c4:	90 81       	ld	r25, Z
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	98 17       	cp	r25, r24
    14ca:	09 f0       	breq	.+2      	; 0x14ce <gpio_read_pin+0x3c>
    14cc:	43 c0       	rjmp	.+134    	; 0x1554 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    14ce:	1c 82       	std	Y+4, r1	; 0x04
    14d0:	21 c0       	rjmp	.+66     	; 0x1514 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8f 81       	ldd	r24, Y+7	; 0x07
    14da:	98 85       	ldd	r25, Y+8	; 0x08
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	fc 01       	movw	r30, r24
    14e2:	32 96       	adiw	r30, 0x02	; 2
    14e4:	40 81       	ld	r20, Z
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9c 01       	movw	r18, r24
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	98 85       	ldd	r25, Y+8	; 0x08
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	fc 01       	movw	r30, r24
    14fc:	32 96       	adiw	r30, 0x02	; 2
    14fe:	80 81       	ld	r24, Z
    1500:	48 17       	cp	r20, r24
    1502:	29 f0       	breq	.+10     	; 0x150e <gpio_read_pin+0x7c>
                    return input->previous_state;
    1504:	ef 81       	ldd	r30, Y+7	; 0x07
    1506:	f8 85       	ldd	r31, Y+8	; 0x08
    1508:	25 81       	ldd	r18, Z+5	; 0x05
    150a:	2b 87       	std	Y+11, r18	; 0x0b
    150c:	38 c0       	rjmp	.+112    	; 0x157e <gpio_read_pin+0xec>
                i++;
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	e0 f2       	brcs	.-72     	; 0x14d2 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    151a:	ef 81       	ldd	r30, Y+7	; 0x07
    151c:	f8 85       	ldd	r31, Y+8	; 0x08
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	89 27       	eor	r24, r25
    1524:	88 23       	and	r24, r24
    1526:	29 f0       	breq	.+10     	; 0x1532 <gpio_read_pin+0xa0>
    1528:	ef 81       	ldd	r30, Y+7	; 0x07
    152a:	f8 85       	ldd	r31, Y+8	; 0x08
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	8a 87       	std	Y+10, r24	; 0x0a
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <gpio_read_pin+0xb0>
    1532:	ef 81       	ldd	r30, Y+7	; 0x07
    1534:	f8 85       	ldd	r31, Y+8	; 0x08
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	1a 86       	std	Y+10, r1	; 0x0a
    153a:	88 23       	and	r24, r24
    153c:	11 f4       	brne	.+4      	; 0x1542 <gpio_read_pin+0xb0>
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	2a 87       	std	Y+10, r18	; 0x0a
    1542:	8a 85       	ldd	r24, Y+10	; 0x0a
    1544:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1546:	ef 81       	ldd	r30, Y+7	; 0x07
    1548:	f8 85       	ldd	r31, Y+8	; 0x08
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	85 83       	std	Z+5, r24	; 0x05

            return state;
    154e:	2b 81       	ldd	r18, Y+3	; 0x03
    1550:	2b 87       	std	Y+11, r18	; 0x0b
    1552:	15 c0       	rjmp	.+42     	; 0x157e <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1554:	ef 81       	ldd	r30, Y+7	; 0x07
    1556:	f8 85       	ldd	r31, Y+8	; 0x08
    1558:	80 85       	ldd	r24, Z+8	; 0x08
    155a:	91 85       	ldd	r25, Z+9	; 0x09
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	06 97       	sbiw	r24, 0x06	; 6
    1566:	98 87       	std	Y+8, r25	; 0x08
    1568:	8f 83       	std	Y+7, r24	; 0x07
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	06 96       	adiw	r24, 0x06	; 6
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	86 30       	cpi	r24, 0x06	; 6
    1574:	92 07       	cpc	r25, r18
    1576:	09 f0       	breq	.+2      	; 0x157a <gpio_read_pin+0xe8>
    1578:	a3 cf       	rjmp	.-186    	; 0x14c0 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	8b 87       	std	Y+11, r24	; 0x0b
    157e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1580:	2b 96       	adiw	r28, 0x0b	; 11
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <gpio_debouncer+0xa>
    159c:	00 d0       	rcall	.+0      	; 0x159e <gpio_debouncer+0xc>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <gpio_debouncer+0xe>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15a4:	80 91 08 01 	lds	r24, 0x0108
    15a8:	90 91 09 01 	lds	r25, 0x0109
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	06 97       	sbiw	r24, 0x06	; 6
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	1b c0       	rjmp	.+54     	; 0x15f2 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    15bc:	00 91 44 01 	lds	r16, 0x0144
    15c0:	10 91 45 01 	lds	r17, 0x0145
    15c4:	ed 81       	ldd	r30, Y+5	; 0x05
    15c6:	fe 81       	ldd	r31, Y+6	; 0x06
    15c8:	80 81       	ld	r24, Z
    15ca:	33 df       	rcall	.-410    	; 0x1432 <__gpio_read_pin>
    15cc:	28 2f       	mov	r18, r24
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	80 0f       	add	r24, r16
    15d4:	91 1f       	adc	r25, r17
    15d6:	fc 01       	movw	r30, r24
    15d8:	32 96       	adiw	r30, 0x02	; 2
    15da:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15dc:	ed 81       	ldd	r30, Y+5	; 0x05
    15de:	fe 81       	ldd	r31, Y+6	; 0x06
    15e0:	80 85       	ldd	r24, Z+8	; 0x08
    15e2:	91 85       	ldd	r25, Z+9	; 0x09
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	06 97       	sbiw	r24, 0x06	; 6
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	06 96       	adiw	r24, 0x06	; 6
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	86 30       	cpi	r24, 0x06	; 6
    15fc:	92 07       	cpc	r25, r18
    15fe:	f1 f6       	brne	.-68     	; 0x15bc <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1600:	80 91 44 01 	lds	r24, 0x0144
    1604:	90 91 45 01 	lds	r25, 0x0145
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	90 93 45 01 	sts	0x0145, r25
    160e:	80 93 44 01 	sts	0x0144, r24
    1612:	80 91 44 01 	lds	r24, 0x0144
    1616:	90 91 45 01 	lds	r25, 0x0145
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	21 f4       	brne	.+8      	; 0x1628 <gpio_debouncer+0x96>
        count = 0;
    1620:	10 92 45 01 	sts	0x0145, r1
    1624:	10 92 44 01 	sts	0x0144, r1
	
}
    1628:	26 96       	adiw	r28, 0x06	; 6
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	08 95       	ret

0000163e <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	67 97       	sbiw	r28, 0x17	; 23
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1654:	90 91 46 01 	lds	r25, 0x0146
    1658:	8f 89       	ldd	r24, Y+23	; 0x17
    165a:	89 17       	cp	r24, r25
    165c:	09 f4       	brne	.+2      	; 0x1660 <odometry_set_speed+0x22>
    165e:	7b c0       	rjmp	.+246    	; 0x1756 <odometry_set_speed+0x118>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1660:	86 e5       	ldi	r24, 0x56	; 86
    1662:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1664:	8f 89       	ldd	r24, Y+23	; 0x17
    1666:	88 8b       	std	Y+16, r24	; 0x10
    1668:	6c c0       	rjmp	.+216    	; 0x1742 <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a8 e4       	ldi	r26, 0x48	; 72
    1670:	b2 e4       	ldi	r27, 0x42	; 66
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	ad 87       	std	Y+13, r26	; 0x0d
    1678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e4       	ldi	r19, 0x40	; 64
    1686:	4c e1       	ldi	r20, 0x1C	; 28
    1688:	55 e4       	ldi	r21, 0x45	; 69
    168a:	df d6       	rcall	.+3518   	; 0x244a <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8f 83       	std	Y+7, r24	; 0x07
    1692:	98 87       	std	Y+8, r25	; 0x08
    1694:	a9 87       	std	Y+9, r26	; 0x09
    1696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	7d d5       	rcall	.+2810   	; 0x21a4 <__cmpsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <odometry_set_speed+0x7a>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	3b c0       	rjmp	.+118    	; 0x172e <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	bc d6       	rcall	.+3448   	; 0x2442 <__gesf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	3c f5       	brge	.+78     	; 0x171c <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	b5 d6       	rcall	.+3434   	; 0x244a <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	ce d5       	rcall	.+2972   	; 0x2286 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <odometry_set_speed+0xd4>
    16f4:	8a ef       	ldi	r24, 0xFA	; 250
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <odometry_set_speed+0xc2>
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	69 f7       	brne	.-38     	; 0x16f4 <odometry_set_speed+0xb6>
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	b0 d5       	rcall	.+2912   	; 0x2286 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <odometry_set_speed+0xfc>
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	ce 01       	movw	r24, r28
    1744:	0f 96       	adiw	r24, 0x0f	; 15
    1746:	63 ec       	ldi	r22, 0xC3	; 195
    1748:	b5 dc       	rcall	.-1686   	; 0x10b4 <CAN_Write>
    174a:	88 23       	and	r24, r24
    174c:	09 f0       	breq	.+2      	; 0x1750 <odometry_set_speed+0x112>
    174e:	8d cf       	rjmp	.-230    	; 0x166a <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	80 93 46 01 	sts	0x0146, r24
}
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <odometry_query_position>:

static void odometry_query_position(void)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	66 97       	sbiw	r28, 0x16	; 22
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    177c:	80 e5       	ldi	r24, 0x50	; 80
    177e:	8f 87       	std	Y+15, r24	; 0x0f
    1780:	6c c0       	rjmp	.+216    	; 0x185a <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a8 e4       	ldi	r26, 0x48	; 72
    1788:	b2 e4       	ldi	r27, 0x42	; 66
    178a:	8b 87       	std	Y+11, r24	; 0x0b
    178c:	9c 87       	std	Y+12, r25	; 0x0c
    178e:	ad 87       	std	Y+13, r26	; 0x0d
    1790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e4       	ldi	r19, 0x40	; 64
    179e:	4c e1       	ldi	r20, 0x1C	; 28
    17a0:	55 e4       	ldi	r21, 0x45	; 69
    17a2:	53 d6       	rcall	.+3238   	; 0x244a <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	f1 d4       	rcall	.+2530   	; 0x21a4 <__cmpsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <odometry_query_position+0x68>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	3b c0       	rjmp	.+118    	; 0x1846 <odometry_query_position+0xde>
	else if (__tmp > 65535)
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	30 d6       	rcall	.+3168   	; 0x2442 <__gesf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	3c f5       	brge	.+78     	; 0x1834 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	29 d6       	rcall	.+3154   	; 0x244a <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	42 d5       	rcall	.+2692   	; 0x2286 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	0f c0       	rjmp	.+30     	; 0x182a <odometry_query_position+0xc2>
    180c:	8a ef       	ldi	r24, 0xFA	; 250
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <odometry_query_position+0xb0>
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <odometry_query_position+0xa4>
    1832:	13 c0       	rjmp	.+38     	; 0x185a <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	24 d5       	rcall	.+2632   	; 0x2286 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <odometry_query_position+0xea>
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	ce 01       	movw	r24, r28
    185c:	0f 96       	adiw	r24, 0x0f	; 15
    185e:	63 ec       	ldi	r22, 0xC3	; 195
    1860:	29 dc       	rcall	.-1966   	; 0x10b4 <CAN_Write>
    1862:	88 23       	and	r24, r24
    1864:	09 f0       	breq	.+2      	; 0x1868 <odometry_query_position+0x100>
    1866:	8d cf       	rjmp	.-230    	; 0x1782 <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1868:	ce 01       	movw	r24, r28
    186a:	0f 96       	adiw	r24, 0x0f	; 15
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	aa db       	rcall	.-2220   	; 0xfc4 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1870:	8f 85       	ldd	r24, Y+15	; 0x0f
    1872:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1876:	88 89       	ldd	r24, Y+16	; 0x10
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	38 2f       	mov	r19, r24
    187e:	22 27       	eor	r18, r18
    1880:	89 89       	ldd	r24, Y+17	; 0x11
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	82 2b       	or	r24, r18
    1888:	93 2b       	or	r25, r19
    188a:	90 93 0b 01 	sts	0x010B, r25
    188e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1892:	8a 89       	ldd	r24, Y+18	; 0x12
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	38 2f       	mov	r19, r24
    189a:	22 27       	eor	r18, r18
    189c:	8b 89       	ldd	r24, Y+19	; 0x13
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	82 2b       	or	r24, r18
    18a4:	93 2b       	or	r25, r19
    18a6:	90 93 0d 01 	sts	0x010D, r25
    18aa:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    18ae:	8c 89       	ldd	r24, Y+20	; 0x14
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	38 2f       	mov	r19, r24
    18b6:	22 27       	eor	r18, r18
    18b8:	8d 89       	ldd	r24, Y+21	; 0x15
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	82 2b       	or	r24, r18
    18c0:	93 2b       	or	r25, r19
    18c2:	90 93 0f 01 	sts	0x010F, r25
    18c6:	80 93 0e 01 	sts	0x010E, r24
}
    18ca:	66 96       	adiw	r28, 0x16	; 22
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	27 97       	sbiw	r28, 0x07	; 7
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    18f4:	9f d1       	rcall	.+830    	; 0x1c34 <system_get_system_time>
    18f6:	aa 27       	eor	r26, r26
    18f8:	97 fd       	sbrc	r25, 7
    18fa:	a0 95       	com	r26
    18fc:	ba 2f       	mov	r27, r26
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	ab 83       	std	Y+3, r26	; 0x03
    1904:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    1906:	30 df       	rcall	.-416    	; 0x1768 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	71 f0       	breq	.+28     	; 0x192c <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	ab 81       	ldd	r26, Y+3	; 0x03
    1916:	bc 81       	ldd	r27, Y+4	; 0x04
    1918:	ed 81       	ldd	r30, Y+5	; 0x05
    191a:	fe 81       	ldd	r31, Y+6	; 0x06
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	09 95       	icall
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	19 f4       	brne	.+6      	; 0x192c <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	8f 83       	std	Y+7, r24	; 0x07
    192a:	09 c0       	rjmp	.+18     	; 0x193e <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    192c:	80 91 10 01 	lds	r24, 0x0110
    1930:	8d 34       	cpi	r24, 0x4D	; 77
    1932:	49 f3       	breq	.-46     	; 0x1906 <odometry_wait_until_done+0x2a>
    1934:	80 91 10 01 	lds	r24, 0x0110
    1938:	82 35       	cpi	r24, 0x52	; 82
    193a:	29 f3       	breq	.-54     	; 0x1906 <odometry_wait_until_done+0x2a>
	
	return ODOMETRY_SUCCESS;
    193c:	1f 82       	std	Y+7, r1	; 0x07
    193e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1940:	27 96       	adiw	r28, 0x07	; 7
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	6b 97       	sbiw	r28, 0x1b	; 27
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	98 8f       	std	Y+24, r25	; 0x18
    1968:	8f 8b       	std	Y+23, r24	; 0x17
    196a:	69 8f       	std	Y+25, r22	; 0x19
    196c:	5b 8f       	std	Y+27, r21	; 0x1b
    196e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1970:	89 8d       	ldd	r24, Y+25	; 0x19
    1972:	65 de       	rcall	.-822    	; 0x163e <odometry_set_speed>
	distance *= -1;
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	90 95       	com	r25
    197a:	81 95       	neg	r24
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	98 8f       	std	Y+24, r25	; 0x18
    1980:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    1982:	84 e4       	ldi	r24, 0x44	; 68
    1984:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	89 2f       	mov	r24, r25
    198c:	99 0f       	add	r25, r25
    198e:	99 0b       	sbc	r25, r25
    1990:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	89 8b       	std	Y+17, r24	; 0x11
    1996:	6c c0       	rjmp	.+216    	; 0x1a70 <odometry_move_straight+0x11e>
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a8 e4       	ldi	r26, 0x48	; 72
    199e:	b2 e4       	ldi	r27, 0x42	; 66
    19a0:	8b 87       	std	Y+11, r24	; 0x0b
    19a2:	9c 87       	std	Y+12, r25	; 0x0c
    19a4:	ad 87       	std	Y+13, r26	; 0x0d
    19a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e4       	ldi	r19, 0x40	; 64
    19b4:	4c e1       	ldi	r20, 0x1C	; 28
    19b6:	55 e4       	ldi	r21, 0x45	; 69
    19b8:	48 d5       	rcall	.+2704   	; 0x244a <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	a9 87       	std	Y+9, r26	; 0x09
    19c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	e6 d3       	rcall	.+1996   	; 0x21a4 <__cmpsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <odometry_move_straight+0x94>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	3b c0       	rjmp	.+118    	; 0x1a5c <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	78 85       	ldd	r23, Y+8	; 0x08
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	25 d5       	rcall	.+2634   	; 0x2442 <__gesf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	3c f5       	brge	.+78     	; 0x1a4a <odometry_move_straight+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	1e d5       	rcall	.+2620   	; 0x244a <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	37 d4       	rcall	.+2158   	; 0x2286 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <odometry_move_straight+0xee>
    1a22:	8a ef       	ldi	r24, 0xFA	; 250
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <odometry_move_straight+0xdc>
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <odometry_move_straight+0xd0>
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	19 d4       	rcall	.+2098   	; 0x2286 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <odometry_move_straight+0x116>
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	ce 01       	movw	r24, r28
    1a72:	0f 96       	adiw	r24, 0x0f	; 15
    1a74:	63 ec       	ldi	r22, 0xC3	; 195
    1a76:	1e db       	rcall	.-2500   	; 0x10b4 <CAN_Write>
    1a78:	88 23       	and	r24, r24
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <odometry_move_straight+0x12c>
    1a7c:	8d cf       	rjmp	.-230    	; 0x1998 <odometry_move_straight+0x46>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    1a7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a82:	2c df       	rcall	.-424    	; 0x18dc <odometry_wait_until_done>
}
    1a84:	6b 96       	adiw	r28, 0x1b	; 27
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <timer_register_callback+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	90 93 48 01 	sts	0x0148, r25
    1aac:	80 93 47 01 	sts	0x0147, r24
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <timer_init>:

}
*/

void timer_init(unsigned int freq)
{
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <timer_init+0xa>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1acc:	e0 e8       	ldi	r30, 0x80	; 128
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1ad2:	e1 e8       	ldi	r30, 0x81	; 129
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	89 e0       	ldi	r24, 0x09	; 9
    1ad8:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1ada:	08 e8       	ldi	r16, 0x88	; 136
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	cc 01       	movw	r24, r24
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	f8 d3       	rcall	.+2032   	; 0x22de <__floatunsisf>
    1aee:	9b 01       	movw	r18, r22
    1af0:	ac 01       	movw	r20, r24
    1af2:	60 e8       	ldi	r22, 0x80	; 128
    1af4:	76 e9       	ldi	r23, 0x96	; 150
    1af6:	88 e1       	ldi	r24, 0x18	; 24
    1af8:	9b e4       	ldi	r25, 0x4B	; 75
    1afa:	58 d3       	rcall	.+1712   	; 0x21ac <__divsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	e7 d2       	rcall	.+1486   	; 0x20dc <__addsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	b7 d3       	rcall	.+1902   	; 0x2286 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1b22:	ef e6       	ldi	r30, 0x6F	; 111
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24

	SREG |= 0x80;
    1b2a:	af e5       	ldi	r26, 0x5F	; 95
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ef e5       	ldi	r30, 0x5F	; 95
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 68       	ori	r24, 0x80	; 128
    1b36:	8c 93       	st	X, r24
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	00 90 5b 00 	lds	r0, 0x005B
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	2f 93       	push	r18
    1b58:	3f 93       	push	r19
    1b5a:	4f 93       	push	r20
    1b5c:	5f 93       	push	r21
    1b5e:	6f 93       	push	r22
    1b60:	7f 93       	push	r23
    1b62:	8f 93       	push	r24
    1b64:	9f 93       	push	r25
    1b66:	af 93       	push	r26
    1b68:	bf 93       	push	r27
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1b76:	80 91 47 01 	lds	r24, 0x0147
    1b7a:	90 91 48 01 	lds	r25, 0x0148
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <__vector_12+0x46>
        timer_callback();
    1b82:	e0 91 47 01 	lds	r30, 0x0147
    1b86:	f0 91 48 01 	lds	r31, 0x0148
    1b8a:	09 95       	icall
	if(sys_time >= 90000)
    1b8c:	80 91 49 01 	lds	r24, 0x0149
    1b90:	90 91 4a 01 	lds	r25, 0x014A
    1b94:	a0 91 4b 01 	lds	r26, 0x014B
    1b98:	b0 91 4c 01 	lds	r27, 0x014C
    1b9c:	80 39       	cpi	r24, 0x90	; 144
    1b9e:	2f e5       	ldi	r18, 0x5F	; 95
    1ba0:	92 07       	cpc	r25, r18
    1ba2:	21 e0       	ldi	r18, 0x01	; 1
    1ba4:	a2 07       	cpc	r26, r18
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	b2 07       	cpc	r27, r18
    1baa:	10 f0       	brcs	.+4      	; 0x1bb0 <__vector_12+0x6a>
		actuators_umbrella();
    1bac:	0e 94 6f 03 	call	0x6de	; 0x6de <actuators_umbrella>
	sys_time++;
    1bb0:	80 91 49 01 	lds	r24, 0x0149
    1bb4:	90 91 4a 01 	lds	r25, 0x014A
    1bb8:	a0 91 4b 01 	lds	r26, 0x014B
    1bbc:	b0 91 4c 01 	lds	r27, 0x014C
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	b1 1d       	adc	r27, r1
    1bc6:	80 93 49 01 	sts	0x0149, r24
    1bca:	90 93 4a 01 	sts	0x014A, r25
    1bce:	a0 93 4b 01 	sts	0x014B, r26
    1bd2:	b0 93 4c 01 	sts	0x014C, r27
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	00 92 5b 00 	sts	0x005B, r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <system_reset_system_time>:
void system_reset_system_time(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    1c0a:	10 92 49 01 	sts	0x0149, r1
    1c0e:	10 92 4a 01 	sts	0x014A, r1
    1c12:	10 92 4b 01 	sts	0x014B, r1
    1c16:	10 92 4c 01 	sts	0x014C, r1
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <system_set_match_started>:
void system_set_match_started(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 4d 01 	sts	0x014D, r24
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1c3c:	80 91 49 01 	lds	r24, 0x0149
    1c40:	90 91 4a 01 	lds	r25, 0x014A
    1c44:	a0 91 4b 01 	lds	r26, 0x014B
    1c48:	b0 91 4c 01 	lds	r27, 0x014C
}
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <system_init>:
/*uint8_t return_active_state(void)
{
	return active_state;
}*/
void system_init(void)
{	
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	6c 97       	sbiw	r28, 0x1c	; 28
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    1c6a:	89 ec       	ldi	r24, 0xC9	; 201
    1c6c:	9a e0       	ldi	r25, 0x0A	; 10
    1c6e:	13 df       	rcall	.-474    	; 0x1a96 <timer_register_callback>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a8 ec       	ldi	r26, 0xC8	; 200
    1c76:	b2 e4       	ldi	r27, 0x42	; 66
    1c78:	89 8f       	std	Y+25, r24	; 0x19
    1c7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	69 8d       	ldd	r22, Y+25	; 0x19
    1c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e4       	ldi	r19, 0x40	; 64
    1c8c:	4c e1       	ldi	r20, 0x1C	; 28
    1c8e:	55 e4       	ldi	r21, 0x45	; 69
    1c90:	dc d3       	rcall	.+1976   	; 0x244a <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8d 8b       	std	Y+21, r24	; 0x15
    1c98:	9e 8b       	std	Y+22, r25	; 0x16
    1c9a:	af 8b       	std	Y+23, r26	; 0x17
    1c9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	7a d2       	rcall	.+1268   	; 0x21a4 <__cmpsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <system_init+0x68>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	3b c0       	rjmp	.+118    	; 0x1d34 <system_init+0xde>
	else if (__tmp > 65535)
    1cbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	b9 d3       	rcall	.+1906   	; 0x2442 <__gesf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	3c f5       	brge	.+78     	; 0x1d22 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	b2 d3       	rcall	.+1892   	; 0x244a <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	cb d2       	rcall	.+1430   	; 0x2286 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <system_init+0xc2>
    1cfa:	8a ef       	ldi	r24, 0xFA	; 250
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9a 8b       	std	Y+18, r25	; 0x12
    1d00:	89 8b       	std	Y+17, r24	; 0x11
    1d02:	89 89       	ldd	r24, Y+17	; 0x11
    1d04:	9a 89       	ldd	r25, Y+18	; 0x12
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <system_init+0xb0>
    1d0a:	9a 8b       	std	Y+18, r25	; 0x12
    1d0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9c 8b       	std	Y+20, r25	; 0x14
    1d16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <system_init+0xa4>
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	ad d2       	rcall	.+1370   	; 0x2286 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	98 89       	ldd	r25, Y+16	; 0x10
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <system_init+0xea>
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    1d48:	88 e2       	ldi	r24, 0x28	; 40
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	33 da       	rcall	.-2970   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    1d50:	89 e2       	ldi	r24, 0x29	; 41
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	2f da       	rcall	.-2978   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	2b da       	rcall	.-2986   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	27 da       	rcall	.-2994   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	23 da       	rcall	.-3002   	; 0x11b6 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    1d70:	88 e0       	ldi	r24, 0x08	; 8
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	1f da       	rcall	.-3010   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    1d78:	8a e0       	ldi	r24, 0x0A	; 10
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	1b da       	rcall	.-3018   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	17 da       	rcall	.-3026   	; 0x11b6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    1d88:	8e e0       	ldi	r24, 0x0E	; 14
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	13 da       	rcall	.-3034   	; 0x11b6 <gpio_register_pin>
	
	
	DDRG = 0xff;
    1d90:	e3 e3       	ldi	r30, 0x33	; 51
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	80 83       	st	Z, r24
	PORTG = 0x00;
    1d98:	e4 e3       	ldi	r30, 0x34	; 52
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	10 82       	st	Z, r1
	servo_init(50);
    1d9e:	82 e3       	ldi	r24, 0x32	; 50
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <servo_init>
	timer_init(1000);
    1da6:	88 ee       	ldi	r24, 0xE8	; 232
    1da8:	93 e0       	ldi	r25, 0x03	; 3
    1daa:	87 de       	rcall	.-754    	; 0x1aba <timer_init>
	CAN_Init(1);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	be d8       	rcall	.-3716   	; 0xf2c <CAN_Init>

	actuators_setup();
    1db0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <actuators_setup>
    1db4:	6c c0       	rjmp	.+216    	; 0x1e8e <system_init+0x238>
	
	while(gpio_read_pin(JUMPER_PIN))
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a0 e2       	ldi	r26, 0x20	; 32
    1dbc:	b1 e4       	ldi	r27, 0x41	; 65
    1dbe:	8b 87       	std	Y+11, r24	; 0x0b
    1dc0:	9c 87       	std	Y+12, r25	; 0x0c
    1dc2:	ad 87       	std	Y+13, r26	; 0x0d
    1dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e4       	ldi	r19, 0x40	; 64
    1dd2:	4c e1       	ldi	r20, 0x1C	; 28
    1dd4:	55 e4       	ldi	r21, 0x45	; 69
    1dd6:	39 d3       	rcall	.+1650   	; 0x244a <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	d7 d1       	rcall	.+942    	; 0x21a4 <__cmpsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <system_init+0x1ae>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	3b c0       	rjmp	.+118    	; 0x1e7a <system_init+0x224>
	else if (__tmp > 65535)
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	16 d3       	rcall	.+1580   	; 0x2442 <__gesf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	3c f5       	brge	.+78     	; 0x1e68 <system_init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0f d3       	rcall	.+1566   	; 0x244a <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	28 d2       	rcall	.+1104   	; 0x2286 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <system_init+0x208>
    1e40:	8a ef       	ldi	r24, 0xFA	; 250
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <system_init+0x1f6>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <system_init+0x1ea>
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <system_init+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0a d2       	rcall	.+1044   	; 0x2286 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <system_init+0x230>
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	88 e2       	ldi	r24, 0x28	; 40
    1e90:	00 db       	rcall	.-2560   	; 0x1492 <gpio_read_pin>
    1e92:	88 23       	and	r24, r24
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <system_init+0x242>
    1e96:	8f cf       	rjmp	.-226    	; 0x1db6 <system_init+0x160>
		_delay_ms(10);
	PORTG = 0xff;
    1e98:	e4 e3       	ldi	r30, 0x34	; 52
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	80 83       	st	Z, r24
	system_reset_system_time();
    1ea0:	b0 de       	rcall	.-672    	; 0x1c02 <system_reset_system_time>
	system_set_match_started();
    1ea2:	be de       	rcall	.-644    	; 0x1c20 <system_set_match_started>
	
}
    1ea4:	6c 96       	adiw	r28, 0x1c	; 28
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <__vector_23>:
    1eb6:	1f 92       	push	r1
    1eb8:	0f 92       	push	r0
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	0f 92       	push	r0
    1ebe:	00 90 5b 00 	lds	r0, 0x005B
    1ec2:	0f 92       	push	r0
    1ec4:	11 24       	eor	r1, r1
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	80 91 4e 01 	lds	r24, 0x014E
    1ede:	88 23       	and	r24, r24
    1ee0:	d9 f0       	breq	.+54     	; 0x1f18 <__vector_23+0x62>
    1ee2:	80 91 4e 01 	lds	r24, 0x014E
    1ee6:	81 50       	subi	r24, 0x01	; 1
    1ee8:	80 93 4e 01 	sts	0x014E, r24
    1eec:	a6 ec       	ldi	r26, 0xC6	; 198
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	80 91 4f 01 	lds	r24, 0x014F
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	fc 01       	movw	r30, r24
    1efa:	ea 5a       	subi	r30, 0xAA	; 170
    1efc:	fe 4f       	sbci	r31, 0xFE	; 254
    1efe:	80 81       	ld	r24, Z
    1f00:	8c 93       	st	X, r24
    1f02:	80 91 4f 01 	lds	r24, 0x014F
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 93 4f 01 	sts	0x014F, r24
    1f0c:	80 91 4f 01 	lds	r24, 0x014F
    1f10:	80 34       	cpi	r24, 0x40	; 64
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <__vector_23+0x62>
    1f14:	10 92 4f 01 	sts	0x014F, r1
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	ff 91       	pop	r31
    1f1e:	ef 91       	pop	r30
    1f20:	bf 91       	pop	r27
    1f22:	af 91       	pop	r26
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	0f 90       	pop	r0
    1f2a:	00 92 5b 00 	sts	0x005B, r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	0f 90       	pop	r0
    1f34:	1f 90       	pop	r1
    1f36:	18 95       	reti

00001f38 <__vector_21>:
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	00 90 5b 00 	lds	r0, 0x005B
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	8f 93       	push	r24
    1f4c:	9f 93       	push	r25
    1f4e:	ef 93       	push	r30
    1f50:	ff 93       	push	r31
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	e0 ec       	ldi	r30, 0xC0	; 192
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	8c 71       	andi	r24, 0x1C	; 28
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	d9 f4       	brne	.+54     	; 0x1fa8 <__vector_21+0x70>
    1f72:	80 91 50 01 	lds	r24, 0x0150
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	e6 ec       	ldi	r30, 0xC6	; 198
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	20 81       	ld	r18, Z
    1f80:	fc 01       	movw	r30, r24
    1f82:	ea 56       	subi	r30, 0x6A	; 106
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	20 83       	st	Z, r18
    1f88:	80 91 50 01 	lds	r24, 0x0150
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	80 93 50 01 	sts	0x0150, r24
    1f92:	80 91 50 01 	lds	r24, 0x0150
    1f96:	80 34       	cpi	r24, 0x40	; 64
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <__vector_21+0x66>
    1f9a:	10 92 50 01 	sts	0x0150, r1
    1f9e:	80 91 51 01 	lds	r24, 0x0151
    1fa2:	8f 5f       	subi	r24, 0xFF	; 255
    1fa4:	80 93 51 01 	sts	0x0151, r24
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	9f 91       	pop	r25
    1fb4:	8f 91       	pop	r24
    1fb6:	2f 91       	pop	r18
    1fb8:	0f 90       	pop	r0
    1fba:	00 92 5b 00 	sts	0x005B, r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	0f 90       	pop	r0
    1fc4:	1f 90       	pop	r1
    1fc6:	18 95       	reti

00001fc8 <__vector_34>:
    1fc8:	1f 92       	push	r1
    1fca:	0f 92       	push	r0
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	0f 92       	push	r0
    1fd0:	00 90 5b 00 	lds	r0, 0x005B
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	af 93       	push	r26
    1fde:	bf 93       	push	r27
    1fe0:	ef 93       	push	r30
    1fe2:	ff 93       	push	r31
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	80 91 52 01 	lds	r24, 0x0152
    1ff0:	88 23       	and	r24, r24
    1ff2:	d9 f0       	breq	.+54     	; 0x202a <__vector_34+0x62>
    1ff4:	80 91 52 01 	lds	r24, 0x0152
    1ff8:	81 50       	subi	r24, 0x01	; 1
    1ffa:	80 93 52 01 	sts	0x0152, r24
    1ffe:	ae ec       	ldi	r26, 0xCE	; 206
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	80 91 53 01 	lds	r24, 0x0153
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	fc 01       	movw	r30, r24
    200c:	ea 52       	subi	r30, 0x2A	; 42
    200e:	fe 4f       	sbci	r31, 0xFE	; 254
    2010:	80 81       	ld	r24, Z
    2012:	8c 93       	st	X, r24
    2014:	80 91 53 01 	lds	r24, 0x0153
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	80 93 53 01 	sts	0x0153, r24
    201e:	80 91 53 01 	lds	r24, 0x0153
    2022:	80 34       	cpi	r24, 0x40	; 64
    2024:	11 f4       	brne	.+4      	; 0x202a <__vector_34+0x62>
    2026:	10 92 53 01 	sts	0x0153, r1
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	bf 91       	pop	r27
    2034:	af 91       	pop	r26
    2036:	9f 91       	pop	r25
    2038:	8f 91       	pop	r24
    203a:	0f 90       	pop	r0
    203c:	00 92 5b 00 	sts	0x005B, r0
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <__vector_32>:
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	00 90 5b 00 	lds	r0, 0x005B
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	2f 93       	push	r18
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	e8 ec       	ldi	r30, 0xC8	; 200
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	8c 71       	andi	r24, 0x1C	; 28
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	d9 f4       	brne	.+54     	; 0x20ba <__vector_32+0x70>
    2084:	80 91 54 01 	lds	r24, 0x0154
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	ee ec       	ldi	r30, 0xCE	; 206
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	20 81       	ld	r18, Z
    2092:	fc 01       	movw	r30, r24
    2094:	ea 5e       	subi	r30, 0xEA	; 234
    2096:	fd 4f       	sbci	r31, 0xFD	; 253
    2098:	20 83       	st	Z, r18
    209a:	80 91 54 01 	lds	r24, 0x0154
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	80 93 54 01 	sts	0x0154, r24
    20a4:	80 91 54 01 	lds	r24, 0x0154
    20a8:	80 34       	cpi	r24, 0x40	; 64
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <__vector_32+0x66>
    20ac:	10 92 54 01 	sts	0x0154, r1
    20b0:	80 91 55 01 	lds	r24, 0x0155
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	80 93 55 01 	sts	0x0155, r24
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	ff 91       	pop	r31
    20c2:	ef 91       	pop	r30
    20c4:	9f 91       	pop	r25
    20c6:	8f 91       	pop	r24
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	00 92 5b 00 	sts	0x005B, r0
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <__subsf3>:
    20da:	50 58       	subi	r21, 0x80	; 128

000020dc <__addsf3>:
    20dc:	bb 27       	eor	r27, r27
    20de:	aa 27       	eor	r26, r26
    20e0:	0e d0       	rcall	.+28     	; 0x20fe <__addsf3x>
    20e2:	75 c1       	rjmp	.+746    	; 0x23ce <__fp_round>
    20e4:	66 d1       	rcall	.+716    	; 0x23b2 <__fp_pscA>
    20e6:	30 f0       	brcs	.+12     	; 0x20f4 <__addsf3+0x18>
    20e8:	6b d1       	rcall	.+726    	; 0x23c0 <__fp_pscB>
    20ea:	20 f0       	brcs	.+8      	; 0x20f4 <__addsf3+0x18>
    20ec:	31 f4       	brne	.+12     	; 0x20fa <__addsf3+0x1e>
    20ee:	9f 3f       	cpi	r25, 0xFF	; 255
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <__addsf3+0x1a>
    20f2:	1e f4       	brtc	.+6      	; 0x20fa <__addsf3+0x1e>
    20f4:	5b c1       	rjmp	.+694    	; 0x23ac <__fp_nan>
    20f6:	0e f4       	brtc	.+2      	; 0x20fa <__addsf3+0x1e>
    20f8:	e0 95       	com	r30
    20fa:	e7 fb       	bst	r30, 7
    20fc:	51 c1       	rjmp	.+674    	; 0x23a0 <__fp_inf>

000020fe <__addsf3x>:
    20fe:	e9 2f       	mov	r30, r25
    2100:	77 d1       	rcall	.+750    	; 0x23f0 <__fp_split3>
    2102:	80 f3       	brcs	.-32     	; 0x20e4 <__addsf3+0x8>
    2104:	ba 17       	cp	r27, r26
    2106:	62 07       	cpc	r22, r18
    2108:	73 07       	cpc	r23, r19
    210a:	84 07       	cpc	r24, r20
    210c:	95 07       	cpc	r25, r21
    210e:	18 f0       	brcs	.+6      	; 0x2116 <__addsf3x+0x18>
    2110:	71 f4       	brne	.+28     	; 0x212e <__addsf3x+0x30>
    2112:	9e f5       	brtc	.+102    	; 0x217a <__addsf3x+0x7c>
    2114:	8f c1       	rjmp	.+798    	; 0x2434 <__fp_zero>
    2116:	0e f4       	brtc	.+2      	; 0x211a <__addsf3x+0x1c>
    2118:	e0 95       	com	r30
    211a:	0b 2e       	mov	r0, r27
    211c:	ba 2f       	mov	r27, r26
    211e:	a0 2d       	mov	r26, r0
    2120:	0b 01       	movw	r0, r22
    2122:	b9 01       	movw	r22, r18
    2124:	90 01       	movw	r18, r0
    2126:	0c 01       	movw	r0, r24
    2128:	ca 01       	movw	r24, r20
    212a:	a0 01       	movw	r20, r0
    212c:	11 24       	eor	r1, r1
    212e:	ff 27       	eor	r31, r31
    2130:	59 1b       	sub	r21, r25
    2132:	99 f0       	breq	.+38     	; 0x215a <__addsf3x+0x5c>
    2134:	59 3f       	cpi	r21, 0xF9	; 249
    2136:	50 f4       	brcc	.+20     	; 0x214c <__addsf3x+0x4e>
    2138:	50 3e       	cpi	r21, 0xE0	; 224
    213a:	68 f1       	brcs	.+90     	; 0x2196 <__addsf3x+0x98>
    213c:	1a 16       	cp	r1, r26
    213e:	f0 40       	sbci	r31, 0x00	; 0
    2140:	a2 2f       	mov	r26, r18
    2142:	23 2f       	mov	r18, r19
    2144:	34 2f       	mov	r19, r20
    2146:	44 27       	eor	r20, r20
    2148:	58 5f       	subi	r21, 0xF8	; 248
    214a:	f3 cf       	rjmp	.-26     	; 0x2132 <__addsf3x+0x34>
    214c:	46 95       	lsr	r20
    214e:	37 95       	ror	r19
    2150:	27 95       	ror	r18
    2152:	a7 95       	ror	r26
    2154:	f0 40       	sbci	r31, 0x00	; 0
    2156:	53 95       	inc	r21
    2158:	c9 f7       	brne	.-14     	; 0x214c <__addsf3x+0x4e>
    215a:	7e f4       	brtc	.+30     	; 0x217a <__addsf3x+0x7c>
    215c:	1f 16       	cp	r1, r31
    215e:	ba 0b       	sbc	r27, r26
    2160:	62 0b       	sbc	r22, r18
    2162:	73 0b       	sbc	r23, r19
    2164:	84 0b       	sbc	r24, r20
    2166:	ba f0       	brmi	.+46     	; 0x2196 <__addsf3x+0x98>
    2168:	91 50       	subi	r25, 0x01	; 1
    216a:	a1 f0       	breq	.+40     	; 0x2194 <__addsf3x+0x96>
    216c:	ff 0f       	add	r31, r31
    216e:	bb 1f       	adc	r27, r27
    2170:	66 1f       	adc	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	88 1f       	adc	r24, r24
    2176:	c2 f7       	brpl	.-16     	; 0x2168 <__addsf3x+0x6a>
    2178:	0e c0       	rjmp	.+28     	; 0x2196 <__addsf3x+0x98>
    217a:	ba 0f       	add	r27, r26
    217c:	62 1f       	adc	r22, r18
    217e:	73 1f       	adc	r23, r19
    2180:	84 1f       	adc	r24, r20
    2182:	48 f4       	brcc	.+18     	; 0x2196 <__addsf3x+0x98>
    2184:	87 95       	ror	r24
    2186:	77 95       	ror	r23
    2188:	67 95       	ror	r22
    218a:	b7 95       	ror	r27
    218c:	f7 95       	ror	r31
    218e:	9e 3f       	cpi	r25, 0xFE	; 254
    2190:	08 f0       	brcs	.+2      	; 0x2194 <__addsf3x+0x96>
    2192:	b3 cf       	rjmp	.-154    	; 0x20fa <__addsf3+0x1e>
    2194:	93 95       	inc	r25
    2196:	88 0f       	add	r24, r24
    2198:	08 f0       	brcs	.+2      	; 0x219c <__addsf3x+0x9e>
    219a:	99 27       	eor	r25, r25
    219c:	ee 0f       	add	r30, r30
    219e:	97 95       	ror	r25
    21a0:	87 95       	ror	r24
    21a2:	08 95       	ret

000021a4 <__cmpsf2>:
    21a4:	d9 d0       	rcall	.+434    	; 0x2358 <__fp_cmp>
    21a6:	08 f4       	brcc	.+2      	; 0x21aa <__cmpsf2+0x6>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	08 95       	ret

000021ac <__divsf3>:
    21ac:	0c d0       	rcall	.+24     	; 0x21c6 <__divsf3x>
    21ae:	0f c1       	rjmp	.+542    	; 0x23ce <__fp_round>
    21b0:	07 d1       	rcall	.+526    	; 0x23c0 <__fp_pscB>
    21b2:	40 f0       	brcs	.+16     	; 0x21c4 <__divsf3+0x18>
    21b4:	fe d0       	rcall	.+508    	; 0x23b2 <__fp_pscA>
    21b6:	30 f0       	brcs	.+12     	; 0x21c4 <__divsf3+0x18>
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <__divsf3+0x16>
    21ba:	5f 3f       	cpi	r21, 0xFF	; 255
    21bc:	19 f0       	breq	.+6      	; 0x21c4 <__divsf3+0x18>
    21be:	f0 c0       	rjmp	.+480    	; 0x23a0 <__fp_inf>
    21c0:	51 11       	cpse	r21, r1
    21c2:	39 c1       	rjmp	.+626    	; 0x2436 <__fp_szero>
    21c4:	f3 c0       	rjmp	.+486    	; 0x23ac <__fp_nan>

000021c6 <__divsf3x>:
    21c6:	14 d1       	rcall	.+552    	; 0x23f0 <__fp_split3>
    21c8:	98 f3       	brcs	.-26     	; 0x21b0 <__divsf3+0x4>

000021ca <__divsf3_pse>:
    21ca:	99 23       	and	r25, r25
    21cc:	c9 f3       	breq	.-14     	; 0x21c0 <__divsf3+0x14>
    21ce:	55 23       	and	r21, r21
    21d0:	b1 f3       	breq	.-20     	; 0x21be <__divsf3+0x12>
    21d2:	95 1b       	sub	r25, r21
    21d4:	55 0b       	sbc	r21, r21
    21d6:	bb 27       	eor	r27, r27
    21d8:	aa 27       	eor	r26, r26
    21da:	62 17       	cp	r22, r18
    21dc:	73 07       	cpc	r23, r19
    21de:	84 07       	cpc	r24, r20
    21e0:	38 f0       	brcs	.+14     	; 0x21f0 <__divsf3_pse+0x26>
    21e2:	9f 5f       	subi	r25, 0xFF	; 255
    21e4:	5f 4f       	sbci	r21, 0xFF	; 255
    21e6:	22 0f       	add	r18, r18
    21e8:	33 1f       	adc	r19, r19
    21ea:	44 1f       	adc	r20, r20
    21ec:	aa 1f       	adc	r26, r26
    21ee:	a9 f3       	breq	.-22     	; 0x21da <__divsf3_pse+0x10>
    21f0:	33 d0       	rcall	.+102    	; 0x2258 <__divsf3_pse+0x8e>
    21f2:	0e 2e       	mov	r0, r30
    21f4:	3a f0       	brmi	.+14     	; 0x2204 <__divsf3_pse+0x3a>
    21f6:	e0 e8       	ldi	r30, 0x80	; 128
    21f8:	30 d0       	rcall	.+96     	; 0x225a <__divsf3_pse+0x90>
    21fa:	91 50       	subi	r25, 0x01	; 1
    21fc:	50 40       	sbci	r21, 0x00	; 0
    21fe:	e6 95       	lsr	r30
    2200:	00 1c       	adc	r0, r0
    2202:	ca f7       	brpl	.-14     	; 0x21f6 <__divsf3_pse+0x2c>
    2204:	29 d0       	rcall	.+82     	; 0x2258 <__divsf3_pse+0x8e>
    2206:	fe 2f       	mov	r31, r30
    2208:	27 d0       	rcall	.+78     	; 0x2258 <__divsf3_pse+0x8e>
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	bb 1f       	adc	r27, r27
    2212:	26 17       	cp	r18, r22
    2214:	37 07       	cpc	r19, r23
    2216:	48 07       	cpc	r20, r24
    2218:	ab 07       	cpc	r26, r27
    221a:	b0 e8       	ldi	r27, 0x80	; 128
    221c:	09 f0       	breq	.+2      	; 0x2220 <__divsf3_pse+0x56>
    221e:	bb 0b       	sbc	r27, r27
    2220:	80 2d       	mov	r24, r0
    2222:	bf 01       	movw	r22, r30
    2224:	ff 27       	eor	r31, r31
    2226:	93 58       	subi	r25, 0x83	; 131
    2228:	5f 4f       	sbci	r21, 0xFF	; 255
    222a:	2a f0       	brmi	.+10     	; 0x2236 <__divsf3_pse+0x6c>
    222c:	9e 3f       	cpi	r25, 0xFE	; 254
    222e:	51 05       	cpc	r21, r1
    2230:	68 f0       	brcs	.+26     	; 0x224c <__divsf3_pse+0x82>
    2232:	b6 c0       	rjmp	.+364    	; 0x23a0 <__fp_inf>
    2234:	00 c1       	rjmp	.+512    	; 0x2436 <__fp_szero>
    2236:	5f 3f       	cpi	r21, 0xFF	; 255
    2238:	ec f3       	brlt	.-6      	; 0x2234 <__divsf3_pse+0x6a>
    223a:	98 3e       	cpi	r25, 0xE8	; 232
    223c:	dc f3       	brlt	.-10     	; 0x2234 <__divsf3_pse+0x6a>
    223e:	86 95       	lsr	r24
    2240:	77 95       	ror	r23
    2242:	67 95       	ror	r22
    2244:	b7 95       	ror	r27
    2246:	f7 95       	ror	r31
    2248:	9f 5f       	subi	r25, 0xFF	; 255
    224a:	c9 f7       	brne	.-14     	; 0x223e <__divsf3_pse+0x74>
    224c:	88 0f       	add	r24, r24
    224e:	91 1d       	adc	r25, r1
    2250:	96 95       	lsr	r25
    2252:	87 95       	ror	r24
    2254:	97 f9       	bld	r25, 7
    2256:	08 95       	ret
    2258:	e1 e0       	ldi	r30, 0x01	; 1
    225a:	66 0f       	add	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	88 1f       	adc	r24, r24
    2260:	bb 1f       	adc	r27, r27
    2262:	62 17       	cp	r22, r18
    2264:	73 07       	cpc	r23, r19
    2266:	84 07       	cpc	r24, r20
    2268:	ba 07       	cpc	r27, r26
    226a:	20 f0       	brcs	.+8      	; 0x2274 <__divsf3_pse+0xaa>
    226c:	62 1b       	sub	r22, r18
    226e:	73 0b       	sbc	r23, r19
    2270:	84 0b       	sbc	r24, r20
    2272:	ba 0b       	sbc	r27, r26
    2274:	ee 1f       	adc	r30, r30
    2276:	88 f7       	brcc	.-30     	; 0x225a <__divsf3_pse+0x90>
    2278:	e0 95       	com	r30
    227a:	08 95       	ret

0000227c <__fixsfsi>:
    227c:	04 d0       	rcall	.+8      	; 0x2286 <__fixunssfsi>
    227e:	68 94       	set
    2280:	b1 11       	cpse	r27, r1
    2282:	d9 c0       	rjmp	.+434    	; 0x2436 <__fp_szero>
    2284:	08 95       	ret

00002286 <__fixunssfsi>:
    2286:	bc d0       	rcall	.+376    	; 0x2400 <__fp_splitA>
    2288:	88 f0       	brcs	.+34     	; 0x22ac <__fixunssfsi+0x26>
    228a:	9f 57       	subi	r25, 0x7F	; 127
    228c:	90 f0       	brcs	.+36     	; 0x22b2 <__fixunssfsi+0x2c>
    228e:	b9 2f       	mov	r27, r25
    2290:	99 27       	eor	r25, r25
    2292:	b7 51       	subi	r27, 0x17	; 23
    2294:	a0 f0       	brcs	.+40     	; 0x22be <__fixunssfsi+0x38>
    2296:	d1 f0       	breq	.+52     	; 0x22cc <__fixunssfsi+0x46>
    2298:	66 0f       	add	r22, r22
    229a:	77 1f       	adc	r23, r23
    229c:	88 1f       	adc	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	1a f0       	brmi	.+6      	; 0x22a8 <__fixunssfsi+0x22>
    22a2:	ba 95       	dec	r27
    22a4:	c9 f7       	brne	.-14     	; 0x2298 <__fixunssfsi+0x12>
    22a6:	12 c0       	rjmp	.+36     	; 0x22cc <__fixunssfsi+0x46>
    22a8:	b1 30       	cpi	r27, 0x01	; 1
    22aa:	81 f0       	breq	.+32     	; 0x22cc <__fixunssfsi+0x46>
    22ac:	c3 d0       	rcall	.+390    	; 0x2434 <__fp_zero>
    22ae:	b1 e0       	ldi	r27, 0x01	; 1
    22b0:	08 95       	ret
    22b2:	c0 c0       	rjmp	.+384    	; 0x2434 <__fp_zero>
    22b4:	67 2f       	mov	r22, r23
    22b6:	78 2f       	mov	r23, r24
    22b8:	88 27       	eor	r24, r24
    22ba:	b8 5f       	subi	r27, 0xF8	; 248
    22bc:	39 f0       	breq	.+14     	; 0x22cc <__fixunssfsi+0x46>
    22be:	b9 3f       	cpi	r27, 0xF9	; 249
    22c0:	cc f3       	brlt	.-14     	; 0x22b4 <__fixunssfsi+0x2e>
    22c2:	86 95       	lsr	r24
    22c4:	77 95       	ror	r23
    22c6:	67 95       	ror	r22
    22c8:	b3 95       	inc	r27
    22ca:	d9 f7       	brne	.-10     	; 0x22c2 <__fixunssfsi+0x3c>
    22cc:	3e f4       	brtc	.+14     	; 0x22dc <__fixunssfsi+0x56>
    22ce:	90 95       	com	r25
    22d0:	80 95       	com	r24
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	08 95       	ret

000022de <__floatunsisf>:
    22de:	e8 94       	clt
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <__floatsisf+0x12>

000022e2 <__floatsisf>:
    22e2:	97 fb       	bst	r25, 7
    22e4:	3e f4       	brtc	.+14     	; 0x22f4 <__floatsisf+0x12>
    22e6:	90 95       	com	r25
    22e8:	80 95       	com	r24
    22ea:	70 95       	com	r23
    22ec:	61 95       	neg	r22
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	99 23       	and	r25, r25
    22f6:	a9 f0       	breq	.+42     	; 0x2322 <__floatsisf+0x40>
    22f8:	f9 2f       	mov	r31, r25
    22fa:	96 e9       	ldi	r25, 0x96	; 150
    22fc:	bb 27       	eor	r27, r27
    22fe:	93 95       	inc	r25
    2300:	f6 95       	lsr	r31
    2302:	87 95       	ror	r24
    2304:	77 95       	ror	r23
    2306:	67 95       	ror	r22
    2308:	b7 95       	ror	r27
    230a:	f1 11       	cpse	r31, r1
    230c:	f8 cf       	rjmp	.-16     	; 0x22fe <__floatsisf+0x1c>
    230e:	fa f4       	brpl	.+62     	; 0x234e <__floatsisf+0x6c>
    2310:	bb 0f       	add	r27, r27
    2312:	11 f4       	brne	.+4      	; 0x2318 <__floatsisf+0x36>
    2314:	60 ff       	sbrs	r22, 0
    2316:	1b c0       	rjmp	.+54     	; 0x234e <__floatsisf+0x6c>
    2318:	6f 5f       	subi	r22, 0xFF	; 255
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	8f 4f       	sbci	r24, 0xFF	; 255
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	16 c0       	rjmp	.+44     	; 0x234e <__floatsisf+0x6c>
    2322:	88 23       	and	r24, r24
    2324:	11 f0       	breq	.+4      	; 0x232a <__floatsisf+0x48>
    2326:	96 e9       	ldi	r25, 0x96	; 150
    2328:	11 c0       	rjmp	.+34     	; 0x234c <__floatsisf+0x6a>
    232a:	77 23       	and	r23, r23
    232c:	21 f0       	breq	.+8      	; 0x2336 <__floatsisf+0x54>
    232e:	9e e8       	ldi	r25, 0x8E	; 142
    2330:	87 2f       	mov	r24, r23
    2332:	76 2f       	mov	r23, r22
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <__floatsisf+0x5e>
    2336:	66 23       	and	r22, r22
    2338:	71 f0       	breq	.+28     	; 0x2356 <__floatsisf+0x74>
    233a:	96 e8       	ldi	r25, 0x86	; 134
    233c:	86 2f       	mov	r24, r22
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	2a f0       	brmi	.+10     	; 0x234e <__floatsisf+0x6c>
    2344:	9a 95       	dec	r25
    2346:	66 0f       	add	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	da f7       	brpl	.-10     	; 0x2344 <__floatsisf+0x62>
    234e:	88 0f       	add	r24, r24
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret

00002358 <__fp_cmp>:
    2358:	99 0f       	add	r25, r25
    235a:	00 08       	sbc	r0, r0
    235c:	55 0f       	add	r21, r21
    235e:	aa 0b       	sbc	r26, r26
    2360:	e0 e8       	ldi	r30, 0x80	; 128
    2362:	fe ef       	ldi	r31, 0xFE	; 254
    2364:	16 16       	cp	r1, r22
    2366:	17 06       	cpc	r1, r23
    2368:	e8 07       	cpc	r30, r24
    236a:	f9 07       	cpc	r31, r25
    236c:	c0 f0       	brcs	.+48     	; 0x239e <__fp_cmp+0x46>
    236e:	12 16       	cp	r1, r18
    2370:	13 06       	cpc	r1, r19
    2372:	e4 07       	cpc	r30, r20
    2374:	f5 07       	cpc	r31, r21
    2376:	98 f0       	brcs	.+38     	; 0x239e <__fp_cmp+0x46>
    2378:	62 1b       	sub	r22, r18
    237a:	73 0b       	sbc	r23, r19
    237c:	84 0b       	sbc	r24, r20
    237e:	95 0b       	sbc	r25, r21
    2380:	39 f4       	brne	.+14     	; 0x2390 <__fp_cmp+0x38>
    2382:	0a 26       	eor	r0, r26
    2384:	61 f0       	breq	.+24     	; 0x239e <__fp_cmp+0x46>
    2386:	23 2b       	or	r18, r19
    2388:	24 2b       	or	r18, r20
    238a:	25 2b       	or	r18, r21
    238c:	21 f4       	brne	.+8      	; 0x2396 <__fp_cmp+0x3e>
    238e:	08 95       	ret
    2390:	0a 26       	eor	r0, r26
    2392:	09 f4       	brne	.+2      	; 0x2396 <__fp_cmp+0x3e>
    2394:	a1 40       	sbci	r26, 0x01	; 1
    2396:	a6 95       	lsr	r26
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	81 1d       	adc	r24, r1
    239c:	81 1d       	adc	r24, r1
    239e:	08 95       	ret

000023a0 <__fp_inf>:
    23a0:	97 f9       	bld	r25, 7
    23a2:	9f 67       	ori	r25, 0x7F	; 127
    23a4:	80 e8       	ldi	r24, 0x80	; 128
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	08 95       	ret

000023ac <__fp_nan>:
    23ac:	9f ef       	ldi	r25, 0xFF	; 255
    23ae:	80 ec       	ldi	r24, 0xC0	; 192
    23b0:	08 95       	ret

000023b2 <__fp_pscA>:
    23b2:	00 24       	eor	r0, r0
    23b4:	0a 94       	dec	r0
    23b6:	16 16       	cp	r1, r22
    23b8:	17 06       	cpc	r1, r23
    23ba:	18 06       	cpc	r1, r24
    23bc:	09 06       	cpc	r0, r25
    23be:	08 95       	ret

000023c0 <__fp_pscB>:
    23c0:	00 24       	eor	r0, r0
    23c2:	0a 94       	dec	r0
    23c4:	12 16       	cp	r1, r18
    23c6:	13 06       	cpc	r1, r19
    23c8:	14 06       	cpc	r1, r20
    23ca:	05 06       	cpc	r0, r21
    23cc:	08 95       	ret

000023ce <__fp_round>:
    23ce:	09 2e       	mov	r0, r25
    23d0:	03 94       	inc	r0
    23d2:	00 0c       	add	r0, r0
    23d4:	11 f4       	brne	.+4      	; 0x23da <__fp_round+0xc>
    23d6:	88 23       	and	r24, r24
    23d8:	52 f0       	brmi	.+20     	; 0x23ee <__fp_round+0x20>
    23da:	bb 0f       	add	r27, r27
    23dc:	40 f4       	brcc	.+16     	; 0x23ee <__fp_round+0x20>
    23de:	bf 2b       	or	r27, r31
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <__fp_round+0x18>
    23e2:	60 ff       	sbrs	r22, 0
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <__fp_round+0x20>
    23e6:	6f 5f       	subi	r22, 0xFF	; 255
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ea:	8f 4f       	sbci	r24, 0xFF	; 255
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	08 95       	ret

000023f0 <__fp_split3>:
    23f0:	57 fd       	sbrc	r21, 7
    23f2:	90 58       	subi	r25, 0x80	; 128
    23f4:	44 0f       	add	r20, r20
    23f6:	55 1f       	adc	r21, r21
    23f8:	59 f0       	breq	.+22     	; 0x2410 <__fp_splitA+0x10>
    23fa:	5f 3f       	cpi	r21, 0xFF	; 255
    23fc:	71 f0       	breq	.+28     	; 0x241a <__fp_splitA+0x1a>
    23fe:	47 95       	ror	r20

00002400 <__fp_splitA>:
    2400:	88 0f       	add	r24, r24
    2402:	97 fb       	bst	r25, 7
    2404:	99 1f       	adc	r25, r25
    2406:	61 f0       	breq	.+24     	; 0x2420 <__fp_splitA+0x20>
    2408:	9f 3f       	cpi	r25, 0xFF	; 255
    240a:	79 f0       	breq	.+30     	; 0x242a <__fp_splitA+0x2a>
    240c:	87 95       	ror	r24
    240e:	08 95       	ret
    2410:	12 16       	cp	r1, r18
    2412:	13 06       	cpc	r1, r19
    2414:	14 06       	cpc	r1, r20
    2416:	55 1f       	adc	r21, r21
    2418:	f2 cf       	rjmp	.-28     	; 0x23fe <__fp_split3+0xe>
    241a:	46 95       	lsr	r20
    241c:	f1 df       	rcall	.-30     	; 0x2400 <__fp_splitA>
    241e:	08 c0       	rjmp	.+16     	; 0x2430 <__fp_splitA+0x30>
    2420:	16 16       	cp	r1, r22
    2422:	17 06       	cpc	r1, r23
    2424:	18 06       	cpc	r1, r24
    2426:	99 1f       	adc	r25, r25
    2428:	f1 cf       	rjmp	.-30     	; 0x240c <__fp_splitA+0xc>
    242a:	86 95       	lsr	r24
    242c:	71 05       	cpc	r23, r1
    242e:	61 05       	cpc	r22, r1
    2430:	08 94       	sec
    2432:	08 95       	ret

00002434 <__fp_zero>:
    2434:	e8 94       	clt

00002436 <__fp_szero>:
    2436:	bb 27       	eor	r27, r27
    2438:	66 27       	eor	r22, r22
    243a:	77 27       	eor	r23, r23
    243c:	cb 01       	movw	r24, r22
    243e:	97 f9       	bld	r25, 7
    2440:	08 95       	ret

00002442 <__gesf2>:
    2442:	8a df       	rcall	.-236    	; 0x2358 <__fp_cmp>
    2444:	08 f4       	brcc	.+2      	; 0x2448 <__gesf2+0x6>
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	08 95       	ret

0000244a <__mulsf3>:
    244a:	0b d0       	rcall	.+22     	; 0x2462 <__mulsf3x>
    244c:	c0 cf       	rjmp	.-128    	; 0x23ce <__fp_round>
    244e:	b1 df       	rcall	.-158    	; 0x23b2 <__fp_pscA>
    2450:	28 f0       	brcs	.+10     	; 0x245c <__mulsf3+0x12>
    2452:	b6 df       	rcall	.-148    	; 0x23c0 <__fp_pscB>
    2454:	18 f0       	brcs	.+6      	; 0x245c <__mulsf3+0x12>
    2456:	95 23       	and	r25, r21
    2458:	09 f0       	breq	.+2      	; 0x245c <__mulsf3+0x12>
    245a:	a2 cf       	rjmp	.-188    	; 0x23a0 <__fp_inf>
    245c:	a7 cf       	rjmp	.-178    	; 0x23ac <__fp_nan>
    245e:	11 24       	eor	r1, r1
    2460:	ea cf       	rjmp	.-44     	; 0x2436 <__fp_szero>

00002462 <__mulsf3x>:
    2462:	c6 df       	rcall	.-116    	; 0x23f0 <__fp_split3>
    2464:	a0 f3       	brcs	.-24     	; 0x244e <__mulsf3+0x4>

00002466 <__mulsf3_pse>:
    2466:	95 9f       	mul	r25, r21
    2468:	d1 f3       	breq	.-12     	; 0x245e <__mulsf3+0x14>
    246a:	95 0f       	add	r25, r21
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	55 1f       	adc	r21, r21
    2470:	62 9f       	mul	r22, r18
    2472:	f0 01       	movw	r30, r0
    2474:	72 9f       	mul	r23, r18
    2476:	bb 27       	eor	r27, r27
    2478:	f0 0d       	add	r31, r0
    247a:	b1 1d       	adc	r27, r1
    247c:	63 9f       	mul	r22, r19
    247e:	aa 27       	eor	r26, r26
    2480:	f0 0d       	add	r31, r0
    2482:	b1 1d       	adc	r27, r1
    2484:	aa 1f       	adc	r26, r26
    2486:	64 9f       	mul	r22, r20
    2488:	66 27       	eor	r22, r22
    248a:	b0 0d       	add	r27, r0
    248c:	a1 1d       	adc	r26, r1
    248e:	66 1f       	adc	r22, r22
    2490:	82 9f       	mul	r24, r18
    2492:	22 27       	eor	r18, r18
    2494:	b0 0d       	add	r27, r0
    2496:	a1 1d       	adc	r26, r1
    2498:	62 1f       	adc	r22, r18
    249a:	73 9f       	mul	r23, r19
    249c:	b0 0d       	add	r27, r0
    249e:	a1 1d       	adc	r26, r1
    24a0:	62 1f       	adc	r22, r18
    24a2:	83 9f       	mul	r24, r19
    24a4:	a0 0d       	add	r26, r0
    24a6:	61 1d       	adc	r22, r1
    24a8:	22 1f       	adc	r18, r18
    24aa:	74 9f       	mul	r23, r20
    24ac:	33 27       	eor	r19, r19
    24ae:	a0 0d       	add	r26, r0
    24b0:	61 1d       	adc	r22, r1
    24b2:	23 1f       	adc	r18, r19
    24b4:	84 9f       	mul	r24, r20
    24b6:	60 0d       	add	r22, r0
    24b8:	21 1d       	adc	r18, r1
    24ba:	82 2f       	mov	r24, r18
    24bc:	76 2f       	mov	r23, r22
    24be:	6a 2f       	mov	r22, r26
    24c0:	11 24       	eor	r1, r1
    24c2:	9f 57       	subi	r25, 0x7F	; 127
    24c4:	50 40       	sbci	r21, 0x00	; 0
    24c6:	8a f0       	brmi	.+34     	; 0x24ea <__mulsf3_pse+0x84>
    24c8:	e1 f0       	breq	.+56     	; 0x2502 <__mulsf3_pse+0x9c>
    24ca:	88 23       	and	r24, r24
    24cc:	4a f0       	brmi	.+18     	; 0x24e0 <__mulsf3_pse+0x7a>
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	bb 1f       	adc	r27, r27
    24d4:	66 1f       	adc	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	88 1f       	adc	r24, r24
    24da:	91 50       	subi	r25, 0x01	; 1
    24dc:	50 40       	sbci	r21, 0x00	; 0
    24de:	a9 f7       	brne	.-22     	; 0x24ca <__mulsf3_pse+0x64>
    24e0:	9e 3f       	cpi	r25, 0xFE	; 254
    24e2:	51 05       	cpc	r21, r1
    24e4:	70 f0       	brcs	.+28     	; 0x2502 <__mulsf3_pse+0x9c>
    24e6:	5c cf       	rjmp	.-328    	; 0x23a0 <__fp_inf>
    24e8:	a6 cf       	rjmp	.-180    	; 0x2436 <__fp_szero>
    24ea:	5f 3f       	cpi	r21, 0xFF	; 255
    24ec:	ec f3       	brlt	.-6      	; 0x24e8 <__mulsf3_pse+0x82>
    24ee:	98 3e       	cpi	r25, 0xE8	; 232
    24f0:	dc f3       	brlt	.-10     	; 0x24e8 <__mulsf3_pse+0x82>
    24f2:	86 95       	lsr	r24
    24f4:	77 95       	ror	r23
    24f6:	67 95       	ror	r22
    24f8:	b7 95       	ror	r27
    24fa:	f7 95       	ror	r31
    24fc:	e7 95       	ror	r30
    24fe:	9f 5f       	subi	r25, 0xFF	; 255
    2500:	c1 f7       	brne	.-16     	; 0x24f2 <__mulsf3_pse+0x8c>
    2502:	fe 2b       	or	r31, r30
    2504:	88 0f       	add	r24, r24
    2506:	91 1d       	adc	r25, r1
    2508:	96 95       	lsr	r25
    250a:	87 95       	ror	r24
    250c:	97 f9       	bld	r25, 7
    250e:	08 95       	ret

00002510 <calloc>:
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	68 9f       	mul	r22, r24
    251a:	80 01       	movw	r16, r0
    251c:	69 9f       	mul	r22, r25
    251e:	10 0d       	add	r17, r0
    2520:	78 9f       	mul	r23, r24
    2522:	10 0d       	add	r17, r0
    2524:	11 24       	eor	r1, r1
    2526:	c8 01       	movw	r24, r16
    2528:	0d d0       	rcall	.+26     	; 0x2544 <malloc>
    252a:	ec 01       	movw	r28, r24
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	21 f0       	breq	.+8      	; 0x2538 <calloc+0x28>
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	a8 01       	movw	r20, r16
    2536:	0b d1       	rcall	.+534    	; 0x274e <memset>
    2538:	ce 01       	movw	r24, r28
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	08 95       	ret

00002544 <malloc>:
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	bc 01       	movw	r22, r24
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	91 05       	cpc	r25, r1
    254e:	10 f4       	brcc	.+4      	; 0x2554 <malloc+0x10>
    2550:	62 e0       	ldi	r22, 0x02	; 2
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	a0 91 58 02 	lds	r26, 0x0258
    2558:	b0 91 59 02 	lds	r27, 0x0259
    255c:	ed 01       	movw	r28, r26
    255e:	e0 e0       	ldi	r30, 0x00	; 0
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	21 c0       	rjmp	.+66     	; 0x25aa <malloc+0x66>
    2568:	88 81       	ld	r24, Y
    256a:	99 81       	ldd	r25, Y+1	; 0x01
    256c:	86 17       	cp	r24, r22
    256e:	97 07       	cpc	r25, r23
    2570:	69 f4       	brne	.+26     	; 0x258c <malloc+0x48>
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	30 97       	sbiw	r30, 0x00	; 0
    2578:	19 f0       	breq	.+6      	; 0x2580 <malloc+0x3c>
    257a:	93 83       	std	Z+3, r25	; 0x03
    257c:	82 83       	std	Z+2, r24	; 0x02
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <malloc+0x44>
    2580:	90 93 59 02 	sts	0x0259, r25
    2584:	80 93 58 02 	sts	0x0258, r24
    2588:	fe 01       	movw	r30, r28
    258a:	34 c0       	rjmp	.+104    	; 0x25f4 <malloc+0xb0>
    258c:	68 17       	cp	r22, r24
    258e:	79 07       	cpc	r23, r25
    2590:	38 f4       	brcc	.+14     	; 0x25a0 <malloc+0x5c>
    2592:	41 15       	cp	r20, r1
    2594:	51 05       	cpc	r21, r1
    2596:	19 f0       	breq	.+6      	; 0x259e <malloc+0x5a>
    2598:	84 17       	cp	r24, r20
    259a:	95 07       	cpc	r25, r21
    259c:	08 f4       	brcc	.+2      	; 0x25a0 <malloc+0x5c>
    259e:	ac 01       	movw	r20, r24
    25a0:	fe 01       	movw	r30, r28
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	9c 01       	movw	r18, r24
    25a8:	e9 01       	movw	r28, r18
    25aa:	20 97       	sbiw	r28, 0x00	; 0
    25ac:	e9 f6       	brne	.-70     	; 0x2568 <malloc+0x24>
    25ae:	41 15       	cp	r20, r1
    25b0:	51 05       	cpc	r21, r1
    25b2:	a9 f1       	breq	.+106    	; 0x261e <malloc+0xda>
    25b4:	ca 01       	movw	r24, r20
    25b6:	86 1b       	sub	r24, r22
    25b8:	97 0b       	sbc	r25, r23
    25ba:	04 97       	sbiw	r24, 0x04	; 4
    25bc:	08 f4       	brcc	.+2      	; 0x25c0 <malloc+0x7c>
    25be:	ba 01       	movw	r22, r20
    25c0:	e0 e0       	ldi	r30, 0x00	; 0
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	2a c0       	rjmp	.+84     	; 0x261a <malloc+0xd6>
    25c6:	8d 91       	ld	r24, X+
    25c8:	9c 91       	ld	r25, X
    25ca:	11 97       	sbiw	r26, 0x01	; 1
    25cc:	84 17       	cp	r24, r20
    25ce:	95 07       	cpc	r25, r21
    25d0:	f9 f4       	brne	.+62     	; 0x2610 <malloc+0xcc>
    25d2:	64 17       	cp	r22, r20
    25d4:	75 07       	cpc	r23, r21
    25d6:	81 f4       	brne	.+32     	; 0x25f8 <malloc+0xb4>
    25d8:	12 96       	adiw	r26, 0x02	; 2
    25da:	8d 91       	ld	r24, X+
    25dc:	9c 91       	ld	r25, X
    25de:	13 97       	sbiw	r26, 0x03	; 3
    25e0:	30 97       	sbiw	r30, 0x00	; 0
    25e2:	19 f0       	breq	.+6      	; 0x25ea <malloc+0xa6>
    25e4:	93 83       	std	Z+3, r25	; 0x03
    25e6:	82 83       	std	Z+2, r24	; 0x02
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <malloc+0xae>
    25ea:	90 93 59 02 	sts	0x0259, r25
    25ee:	80 93 58 02 	sts	0x0258, r24
    25f2:	fd 01       	movw	r30, r26
    25f4:	32 96       	adiw	r30, 0x02	; 2
    25f6:	4f c0       	rjmp	.+158    	; 0x2696 <malloc+0x152>
    25f8:	ca 01       	movw	r24, r20
    25fa:	86 1b       	sub	r24, r22
    25fc:	97 0b       	sbc	r25, r23
    25fe:	fd 01       	movw	r30, r26
    2600:	e8 0f       	add	r30, r24
    2602:	f9 1f       	adc	r31, r25
    2604:	61 93       	st	Z+, r22
    2606:	71 93       	st	Z+, r23
    2608:	02 97       	sbiw	r24, 0x02	; 2
    260a:	8d 93       	st	X+, r24
    260c:	9c 93       	st	X, r25
    260e:	43 c0       	rjmp	.+134    	; 0x2696 <malloc+0x152>
    2610:	fd 01       	movw	r30, r26
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	9c 01       	movw	r18, r24
    2618:	d9 01       	movw	r26, r18
    261a:	10 97       	sbiw	r26, 0x00	; 0
    261c:	a1 f6       	brne	.-88     	; 0x25c6 <malloc+0x82>
    261e:	80 91 56 02 	lds	r24, 0x0256
    2622:	90 91 57 02 	lds	r25, 0x0257
    2626:	89 2b       	or	r24, r25
    2628:	41 f4       	brne	.+16     	; 0x263a <malloc+0xf6>
    262a:	80 91 02 01 	lds	r24, 0x0102
    262e:	90 91 03 01 	lds	r25, 0x0103
    2632:	90 93 57 02 	sts	0x0257, r25
    2636:	80 93 56 02 	sts	0x0256, r24
    263a:	40 91 04 01 	lds	r20, 0x0104
    263e:	50 91 05 01 	lds	r21, 0x0105
    2642:	41 15       	cp	r20, r1
    2644:	51 05       	cpc	r21, r1
    2646:	41 f4       	brne	.+16     	; 0x2658 <malloc+0x114>
    2648:	4d b7       	in	r20, 0x3d	; 61
    264a:	5e b7       	in	r21, 0x3e	; 62
    264c:	80 91 00 01 	lds	r24, 0x0100
    2650:	90 91 01 01 	lds	r25, 0x0101
    2654:	48 1b       	sub	r20, r24
    2656:	59 0b       	sbc	r21, r25
    2658:	20 91 56 02 	lds	r18, 0x0256
    265c:	30 91 57 02 	lds	r19, 0x0257
    2660:	24 17       	cp	r18, r20
    2662:	35 07       	cpc	r19, r21
    2664:	b0 f4       	brcc	.+44     	; 0x2692 <malloc+0x14e>
    2666:	ca 01       	movw	r24, r20
    2668:	82 1b       	sub	r24, r18
    266a:	93 0b       	sbc	r25, r19
    266c:	86 17       	cp	r24, r22
    266e:	97 07       	cpc	r25, r23
    2670:	80 f0       	brcs	.+32     	; 0x2692 <malloc+0x14e>
    2672:	ab 01       	movw	r20, r22
    2674:	4e 5f       	subi	r20, 0xFE	; 254
    2676:	5f 4f       	sbci	r21, 0xFF	; 255
    2678:	84 17       	cp	r24, r20
    267a:	95 07       	cpc	r25, r21
    267c:	50 f0       	brcs	.+20     	; 0x2692 <malloc+0x14e>
    267e:	42 0f       	add	r20, r18
    2680:	53 1f       	adc	r21, r19
    2682:	50 93 57 02 	sts	0x0257, r21
    2686:	40 93 56 02 	sts	0x0256, r20
    268a:	f9 01       	movw	r30, r18
    268c:	61 93       	st	Z+, r22
    268e:	71 93       	st	Z+, r23
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <malloc+0x152>
    2692:	e0 e0       	ldi	r30, 0x00	; 0
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	cf 01       	movw	r24, r30
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <free>:
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <free+0xa>
    26a6:	50 c0       	rjmp	.+160    	; 0x2748 <free+0xaa>
    26a8:	ec 01       	movw	r28, r24
    26aa:	22 97       	sbiw	r28, 0x02	; 2
    26ac:	1b 82       	std	Y+3, r1	; 0x03
    26ae:	1a 82       	std	Y+2, r1	; 0x02
    26b0:	a0 91 58 02 	lds	r26, 0x0258
    26b4:	b0 91 59 02 	lds	r27, 0x0259
    26b8:	10 97       	sbiw	r26, 0x00	; 0
    26ba:	09 f1       	breq	.+66     	; 0x26fe <free+0x60>
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	ac 17       	cp	r26, r28
    26c2:	bd 07       	cpc	r27, r29
    26c4:	08 f1       	brcs	.+66     	; 0x2708 <free+0x6a>
    26c6:	bb 83       	std	Y+3, r27	; 0x03
    26c8:	aa 83       	std	Y+2, r26	; 0x02
    26ca:	fe 01       	movw	r30, r28
    26cc:	21 91       	ld	r18, Z+
    26ce:	31 91       	ld	r19, Z+
    26d0:	e2 0f       	add	r30, r18
    26d2:	f3 1f       	adc	r31, r19
    26d4:	ae 17       	cp	r26, r30
    26d6:	bf 07       	cpc	r27, r31
    26d8:	79 f4       	brne	.+30     	; 0x26f8 <free+0x5a>
    26da:	8d 91       	ld	r24, X+
    26dc:	9c 91       	ld	r25, X
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	28 0f       	add	r18, r24
    26e2:	39 1f       	adc	r19, r25
    26e4:	2e 5f       	subi	r18, 0xFE	; 254
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	39 83       	std	Y+1, r19	; 0x01
    26ea:	28 83       	st	Y, r18
    26ec:	12 96       	adiw	r26, 0x02	; 2
    26ee:	8d 91       	ld	r24, X+
    26f0:	9c 91       	ld	r25, X
    26f2:	13 97       	sbiw	r26, 0x03	; 3
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	41 15       	cp	r20, r1
    26fa:	51 05       	cpc	r21, r1
    26fc:	71 f4       	brne	.+28     	; 0x271a <free+0x7c>
    26fe:	d0 93 59 02 	sts	0x0259, r29
    2702:	c0 93 58 02 	sts	0x0258, r28
    2706:	20 c0       	rjmp	.+64     	; 0x2748 <free+0xaa>
    2708:	12 96       	adiw	r26, 0x02	; 2
    270a:	8d 91       	ld	r24, X+
    270c:	9c 91       	ld	r25, X
    270e:	13 97       	sbiw	r26, 0x03	; 3
    2710:	ad 01       	movw	r20, r26
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	11 f0       	breq	.+4      	; 0x271a <free+0x7c>
    2716:	dc 01       	movw	r26, r24
    2718:	d3 cf       	rjmp	.-90     	; 0x26c0 <free+0x22>
    271a:	fa 01       	movw	r30, r20
    271c:	d3 83       	std	Z+3, r29	; 0x03
    271e:	c2 83       	std	Z+2, r28	; 0x02
    2720:	21 91       	ld	r18, Z+
    2722:	31 91       	ld	r19, Z+
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	ce 17       	cp	r28, r30
    272a:	df 07       	cpc	r29, r31
    272c:	69 f4       	brne	.+26     	; 0x2748 <free+0xaa>
    272e:	88 81       	ld	r24, Y
    2730:	99 81       	ldd	r25, Y+1	; 0x01
    2732:	28 0f       	add	r18, r24
    2734:	39 1f       	adc	r19, r25
    2736:	2e 5f       	subi	r18, 0xFE	; 254
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	fa 01       	movw	r30, r20
    273c:	31 83       	std	Z+1, r19	; 0x01
    273e:	20 83       	st	Z, r18
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	93 83       	std	Z+3, r25	; 0x03
    2746:	82 83       	std	Z+2, r24	; 0x02
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <memset>:
    274e:	dc 01       	movw	r26, r24
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <memset+0x6>
    2752:	6d 93       	st	X+, r22
    2754:	41 50       	subi	r20, 0x01	; 1
    2756:	50 40       	sbci	r21, 0x00	; 0
    2758:	e0 f7       	brcc	.-8      	; 0x2752 <memset+0x4>
    275a:	08 95       	ret

0000275c <_exit>:
    275c:	f8 94       	cli

0000275e <__stop_program>:
    275e:	ff cf       	rjmp	.-2      	; 0x275e <__stop_program>
