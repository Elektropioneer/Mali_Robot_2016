
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000034d4  00003568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800156  00800156  000035be  2**0
                  ALLOC
  3 .debug_aranges 00000330  00000000  00000000  000035be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000776  00000000  00000000  000038ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022aa  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b0b  00000000  00000000  0000630e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025bf  00000000  00000000  00006e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000540  00000000  00000000  000093d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000976  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002e8  00000000  00000000  0000a28e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(-10);
	servo_set_right_grabber_position(80);//200 is for the half step
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
		return 1;
	}
	return 0;
}
char grabbers_down_green(uint32_t start_time)
{
       6:	00 00       	nop
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
		return 1;
	}
	return 0;
}
char grabbers_down_purple(uint32_t start_time)
{
       a:	00 00       	nop
	if(sys_time >= 90000)
		actuators_umbrella();
	sys_time++;
}
void delay(double ms)
{
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c5       	rjmp	.+2750   	; 0xb08 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ed       	ldi	r30, 0xD4	; 212
      a8:	f4 e3       	ldi	r31, 0x34	; 52
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 35       	cpi	r26, 0x56	; 86
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a6 e5       	ldi	r26, 0x56	; 86
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 39       	cpi	r26, 0x9E	; 158
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "actuators.h"

int set = 1;

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 ce 14 	call	0x299c	; 0x299c <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	2a c0       	rjmp	.+84     	; 0x1fa <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	15 c0       	rjmp	.+42     	; 0x1fa <main+0x128>
	_delay_ms(100);
	
	while(set)
	{
		if(sides_switch_check() == 0)
     1d0:	0e 94 91 14 	call	0x2922	; 0x2922 <sides_switch_check>
     1d4:	88 23       	and	r24, r24
     1d6:	49 f4       	brne	.+18     	; 0x1ea <main+0x118>
		{
			set = 2;
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	90 93 07 01 	sts	0x0107, r25
     1e0:	80 93 06 01 	sts	0x0106, r24
			greenside();	
     1e4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <greenside>
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <main+0x128>
		}
		else
		{
			set = 3;
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 07 01 	sts	0x0107, r25
     1f2:	80 93 06 01 	sts	0x0106, r24
			purpleside();	
     1f6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <purpleside>
{

	system_init();
	_delay_ms(100);
	
	while(set)
     1fa:	80 91 06 01 	lds	r24, 0x0106
     1fe:	90 91 07 01 	lds	r25, 0x0107
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	29 f7       	brne	.-54     	; 0x1d0 <main+0xfe>
			purpleside();	
		}
	}
	while(1)
	{
		if(set == 2)
     206:	80 91 06 01 	lds	r24, 0x0106
     20a:	90 91 07 01 	lds	r25, 0x0107
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	91 05       	cpc	r25, r1
     212:	19 f4       	brne	.+6      	; 0x21a <main+0x148>
		{
			greenside();
     214:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <greenside>
     218:	f6 cf       	rjmp	.-20     	; 0x206 <main+0x134>
		}
		else if(set == 3)
     21a:	80 91 06 01 	lds	r24, 0x0106
     21e:	90 91 07 01 	lds	r25, 0x0107
     222:	83 30       	cpi	r24, 0x03	; 3
     224:	91 05       	cpc	r25, r1
     226:	79 f7       	brne	.-34     	; 0x206 <main+0x134>
		{
			purpleside();
     228:	0e 94 5d 11 	call	0x22ba	; 0x22ba <purpleside>
     22c:	ec cf       	rjmp	.-40     	; 0x206 <main+0x134>

0000022e <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	00 d0       	rcall	.+0      	; 0x238 <servo_init+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     240:	ad e2       	ldi	r26, 0x2D	; 45
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	ed e2       	ldi	r30, 0x2D	; 45
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	88 63       	ori	r24, 0x38	; 56
     24c:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     24e:	a4 e2       	ldi	r26, 0x24	; 36
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	e4 e2       	ldi	r30, 0x24	; 36
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     25c:	e4 e9       	ldi	r30, 0x94	; 148
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	11 82       	std	Z+1, r1	; 0x01
     262:	10 82       	st	Z, r1
	TCNT0 = 0;
     264:	e6 e4       	ldi	r30, 0x46	; 70
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	10 82       	st	Z, r1

	OCR3A = 0;
     26a:	e8 e9       	ldi	r30, 0x98	; 152
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	11 82       	std	Z+1, r1	; 0x01
     270:	10 82       	st	Z, r1
	OCR3B = 0;
     272:	ea e9       	ldi	r30, 0x9A	; 154
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	11 82       	std	Z+1, r1	; 0x01
     278:	10 82       	st	Z, r1
	OCR3C = 0;
     27a:	ec e9       	ldi	r30, 0x9C	; 156
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	11 82       	std	Z+1, r1	; 0x01
     280:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     282:	e0 e9       	ldi	r30, 0x90	; 144
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	8e eb       	ldi	r24, 0xBE	; 190
     288:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     28a:	e1 e9       	ldi	r30, 0x91	; 145
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	8a e1       	ldi	r24, 0x1A	; 26
     290:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     292:	e4 e4       	ldi	r30, 0x44	; 68
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	8b e6       	ldi	r24, 0x6B	; 107
     298:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     29a:	06 e9       	ldi	r16, 0x96	; 150
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	cc 01       	movw	r24, r24
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 29 18 	call	0x3052	; 0x3052 <__floatunsisf>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	51 e4       	ldi	r21, 0x41	; 65
     2c0:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	9c 01       	movw	r18, r24
     2ca:	ad 01       	movw	r20, r26
     2cc:	60 e8       	ldi	r22, 0x80	; 128
     2ce:	76 e9       	ldi	r23, 0x96	; 150
     2d0:	88 e1       	ldi	r24, 0x18	; 24
     2d2:	9b e4       	ldi	r25, 0x4B	; 75
     2d4:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	5f e3       	ldi	r21, 0x3F	; 63
     2e8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	f8 01       	movw	r30, r16
     2fe:	91 83       	std	Z+1, r25	; 0x01
     300:	80 83       	st	Z, r24
}
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	cf 91       	pop	r28
     308:	df 91       	pop	r29
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	00 d0       	rcall	.+0      	; 0x31e <servo_set_duty_cycle_umbrella+0xe>
     31e:	00 d0       	rcall	.+0      	; 0x320 <servo_set_duty_cycle_umbrella+0x10>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9c 83       	std	Y+4, r25	; 0x04
     326:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     328:	e6 e9       	ldi	r30, 0x96	; 150
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	cc 01       	movw	r24, r24
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 29 18 	call	0x3052	; 0x3052 <__floatunsisf>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4f e7       	ldi	r20, 0x7F	; 127
     34c:	53 e4       	ldi	r21, 0x43	; 67
     34e:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	7c 01       	movw	r14, r24
     358:	8d 01       	movw	r16, r26
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	aa 27       	eor	r26, r26
     360:	97 fd       	sbrc	r25, 7
     362:	a0 95       	com	r26
     364:	ba 2f       	mov	r27, r26
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     3a2:	e9 e9       	ldi	r30, 0x99	; 153
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	89 2f       	mov	r24, r25
     3ac:	99 27       	eor	r25, r25
     3ae:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     3b0:	e8 e9       	ldi	r30, 0x98	; 152
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	80 83       	st	Z, r24
}
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	00 d0       	rcall	.+0      	; 0x3dc <servo_set_duty_cycle_door+0xe>
     3dc:	00 d0       	rcall	.+0      	; 0x3de <servo_set_duty_cycle_door+0x10>
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3e6:	e6 e9       	ldi	r30, 0x96	; 150
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	cc 01       	movw	r24, r24
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	0e 94 29 18 	call	0x3052	; 0x3052 <__floatunsisf>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	4f e7       	ldi	r20, 0x7F	; 127
     40a:	53 e4       	ldi	r21, 0x43	; 67
     40c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	7c 01       	movw	r14, r24
     416:	8d 01       	movw	r16, r26
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	9c 81       	ldd	r25, Y+4	; 0x04
     41c:	aa 27       	eor	r26, r26
     41e:	97 fd       	sbrc	r25, 7
     420:	a0 95       	com	r26
     422:	ba 2f       	mov	r27, r26
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c8 01       	movw	r24, r16
     432:	b7 01       	movw	r22, r14
     434:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	9a 83       	std	Y+2, r25	; 0x02
     45e:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     460:	eb e9       	ldi	r30, 0x9B	; 155
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	89 2f       	mov	r24, r25
     46a:	99 27       	eor	r25, r25
     46c:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     46e:	ea e9       	ldi	r30, 0x9A	; 154
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	80 83       	st	Z, r24
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	08 95       	ret

0000048c <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <servo_set_duty_cycle_left_grabber+0xe>
     49a:	00 d0       	rcall	.+0      	; 0x49c <servo_set_duty_cycle_left_grabber+0x10>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	9c 83       	std	Y+4, r25	; 0x04
     4a2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     4a4:	e6 e9       	ldi	r30, 0x96	; 150
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	cc 01       	movw	r24, r24
     4ae:	a0 e0       	ldi	r26, 0x00	; 0
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 29 18 	call	0x3052	; 0x3052 <__floatunsisf>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	bc 01       	movw	r22, r24
     4c0:	cd 01       	movw	r24, r26
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	7c 01       	movw	r14, r24
     4d4:	8d 01       	movw	r16, r26
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	9c 81       	ldd	r25, Y+4	; 0x04
     4da:	aa 27       	eor	r26, r26
     4dc:	97 fd       	sbrc	r25, 7
     4de:	a0 95       	com	r26
     4e0:	ba 2f       	mov	r27, r26
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     4ea:	9b 01       	movw	r18, r22
     4ec:	ac 01       	movw	r20, r24
     4ee:	c8 01       	movw	r24, r16
     4f0:	b7 01       	movw	r22, r14
     4f2:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	5f e3       	ldi	r21, 0x3F	; 63
     506:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     50a:	dc 01       	movw	r26, r24
     50c:	cb 01       	movw	r24, r22
     50e:	bc 01       	movw	r22, r24
     510:	cd 01       	movw	r24, r26
     512:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     51e:	ed e9       	ldi	r30, 0x9D	; 157
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	89 2f       	mov	r24, r25
     528:	99 27       	eor	r25, r25
     52a:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     52c:	ec e9       	ldi	r30, 0x9C	; 156
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	80 83       	st	Z, r24
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	0f 92       	push	r0
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	99 27       	eor	r25, r25
     55a:	87 fd       	sbrc	r24, 7
     55c:	90 95       	com	r25
     55e:	a9 2f       	mov	r26, r25
     560:	b9 2f       	mov	r27, r25
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	bc 01       	movw	r22, r24
     570:	cd 01       	movw	r24, r26
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	44 eb       	ldi	r20, 0xB4	; 180
     578:	52 e4       	ldi	r21, 0x42	; 66
     57a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	26 e6       	ldi	r18, 0x66	; 102
     588:	36 e6       	ldi	r19, 0x66	; 102
     58a:	46 e3       	ldi	r20, 0x36	; 54
     58c:	51 ec       	ldi	r21, 0xC1	; 193
     58e:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	bc 01       	movw	r22, r24
     598:	cd 01       	movw	r24, r26
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4c e6       	ldi	r20, 0x6C	; 108
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	9c 01       	movw	r18, r24
     5ac:	ad 01       	movw	r20, r26
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	8f e7       	ldi	r24, 0x7F	; 127
     5b4:	93 e4       	ldi	r25, 0x43	; 67
     5b6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__subsf3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	bc 01       	movw	r22, r24
     5c0:	cd 01       	movw	r24, r26
     5c2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__fixsfsi>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	a2 de       	rcall	.-700    	; 0x310 <servo_set_duty_cycle_umbrella>
}
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	08 95       	ret

000005d4 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     5d4:	df 93       	push	r29
     5d6:	cf 93       	push	r28
     5d8:	0f 92       	push	r0
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	99 27       	eor	r25, r25
     5e4:	87 fd       	sbrc	r24, 7
     5e6:	90 95       	com	r25
     5e8:	a9 2f       	mov	r26, r25
     5ea:	b9 2f       	mov	r27, r25
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	44 eb       	ldi	r20, 0xB4	; 180
     602:	52 e4       	ldi	r21, 0x42	; 66
     604:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	26 e6       	ldi	r18, 0x66	; 102
     612:	36 e6       	ldi	r19, 0x66	; 102
     614:	46 e3       	ldi	r20, 0x36	; 54
     616:	51 ec       	ldi	r21, 0xC1	; 193
     618:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	4c e6       	ldi	r20, 0x6C	; 108
     62a:	53 e4       	ldi	r21, 0x43	; 67
     62c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	9c 01       	movw	r18, r24
     636:	ad 01       	movw	r20, r26
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8f e7       	ldi	r24, 0x7F	; 127
     63e:	93 e4       	ldi	r25, 0x43	; 67
     640:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__subsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__fixsfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	bc de       	rcall	.-648    	; 0x3ce <servo_set_duty_cycle_door>
}
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	99 27       	eor	r25, r25
     66e:	87 fd       	sbrc	r24, 7
     670:	90 95       	com	r25
     672:	a9 2f       	mov	r26, r25
     674:	b9 2f       	mov	r27, r25
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 2b 18 	call	0x3056	; 0x3056 <__floatsisf>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	44 eb       	ldi	r20, 0xB4	; 180
     68c:	52 e4       	ldi	r21, 0x42	; 66
     68e:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__divsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	26 e6       	ldi	r18, 0x66	; 102
     69c:	36 e6       	ldi	r19, 0x66	; 102
     69e:	46 e3       	ldi	r20, 0x36	; 54
     6a0:	51 ec       	ldi	r21, 0xC1	; 193
     6a2:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	4c e6       	ldi	r20, 0x6C	; 108
     6b4:	53 e4       	ldi	r21, 0x43	; 67
     6b6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__addsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	9c 01       	movw	r18, r24
     6c0:	ad 01       	movw	r20, r26
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8f e7       	ldi	r24, 0x7F	; 127
     6c8:	93 e4       	ldi	r25, 0x43	; 67
     6ca:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__subsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__fixsfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	d6 de       	rcall	.-596    	; 0x48c <servo_set_duty_cycle_left_grabber>
}
     6e0:	0f 90       	pop	r0
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	0f 92       	push	r0
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6f4:	e7 e4       	ldi	r30, 0x47	; 71
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	80 83       	st	Z, r24
}
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-10);
     70c:	86 ef       	ldi	r24, 0xF6	; 246
     70e:	a7 df       	rcall	.-178    	; 0x65e <servo_set_left_grabber_position>
	servo_set_right_grabber_position(80);//200 is for the half step
     710:	80 e5       	ldi	r24, 0x50	; 80
     712:	ea df       	rcall	.-44     	; 0x6e8 <servo_set_right_grabber_position>
}
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	2e 97       	sbiw	r28, 0x0e	; 14
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     72e:	8a e5       	ldi	r24, 0x5A	; 90
     730:	51 df       	rcall	.-350    	; 0x5d4 <servo_set_door_position>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	aa ef       	ldi	r26, 0xFA	; 250
     738:	b4 e4       	ldi	r27, 0x44	; 68
     73a:	8b 87       	std	Y+11, r24	; 0x0b
     73c:	9c 87       	std	Y+12, r25	; 0x0c
     73e:	ad 87       	std	Y+13, r26	; 0x0d
     740:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     742:	6b 85       	ldd	r22, Y+11	; 0x0b
     744:	7c 85       	ldd	r23, Y+12	; 0x0c
     746:	8d 85       	ldd	r24, Y+13	; 0x0d
     748:	9e 85       	ldd	r25, Y+14	; 0x0e
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e4       	ldi	r19, 0x40	; 64
     74e:	4c e1       	ldi	r20, 0x1C	; 28
     750:	55 e4       	ldi	r21, 0x45	; 69
     752:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	8f 83       	std	Y+7, r24	; 0x07
     75c:	98 87       	std	Y+8, r25	; 0x08
     75e:	a9 87       	std	Y+9, r26	; 0x09
     760:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     762:	6f 81       	ldd	r22, Y+7	; 0x07
     764:	78 85       	ldd	r23, Y+8	; 0x08
     766:	89 85       	ldd	r24, Y+9	; 0x09
     768:	9a 85       	ldd	r25, Y+10	; 0x0a
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e8       	ldi	r20, 0x80	; 128
     770:	5f e3       	ldi	r21, 0x3F	; 63
     772:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
     776:	88 23       	and	r24, r24
     778:	2c f4       	brge	.+10     	; 0x784 <actuators_umbrella+0x6a>
		__ticks = 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9e 83       	std	Y+6, r25	; 0x06
     780:	8d 83       	std	Y+5, r24	; 0x05
     782:	3f c0       	rjmp	.+126    	; 0x802 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     784:	6f 81       	ldd	r22, Y+7	; 0x07
     786:	78 85       	ldd	r23, Y+8	; 0x08
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	9a 85       	ldd	r25, Y+10	; 0x0a
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	3f ef       	ldi	r19, 0xFF	; 255
     790:	4f e7       	ldi	r20, 0x7F	; 127
     792:	57 e4       	ldi	r21, 0x47	; 71
     794:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	4c f5       	brge	.+82     	; 0x7ee <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79c:	6b 85       	ldd	r22, Y+11	; 0x0b
     79e:	7c 85       	ldd	r23, Y+12	; 0x0c
     7a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e2       	ldi	r20, 0x20	; 32
     7aa:	51 e4       	ldi	r21, 0x41	; 65
     7ac:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	9e 83       	std	Y+6, r25	; 0x06
     7c2:	8d 83       	std	Y+5, r24	; 0x05
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <actuators_umbrella+0xca>
     7c6:	8a ef       	ldi	r24, 0xFA	; 250
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9c 83       	std	Y+4, r25	; 0x04
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	9c 81       	ldd	r25, Y+4	; 0x04
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <actuators_umbrella+0xb8>
     7d6:	9c 83       	std	Y+4, r25	; 0x04
     7d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7da:	8d 81       	ldd	r24, Y+5	; 0x05
     7dc:	9e 81       	ldd	r25, Y+6	; 0x06
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	9e 83       	std	Y+6, r25	; 0x06
     7e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	9e 81       	ldd	r25, Y+6	; 0x06
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	69 f7       	brne	.-38     	; 0x7c6 <actuators_umbrella+0xac>
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ee:	6f 81       	ldd	r22, Y+7	; 0x07
     7f0:	78 85       	ldd	r23, Y+8	; 0x08
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	9e 83       	std	Y+6, r25	; 0x06
     800:	8d 83       	std	Y+5, r24	; 0x05
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	9e 81       	ldd	r25, Y+6	; 0x06
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <actuators_umbrella+0xf4>
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_set_umbrella_position(70);
     816:	86 e4       	ldi	r24, 0x46	; 70
     818:	98 de       	rcall	.-720    	; 0x54a <servo_set_umbrella_position>
	
}
     81a:	2e 96       	adiw	r28, 0x0e	; 14
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <actuators_setup>:
void actuators_setup(void)
{
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	aa 97       	sbiw	r28, 0x2a	; 42
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     840:	8a e5       	ldi	r24, 0x5A	; 90
     842:	c8 de       	rcall	.-624    	; 0x5d4 <servo_set_door_position>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	aa e7       	ldi	r26, 0x7A	; 122
     84a:	b4 e4       	ldi	r27, 0x44	; 68
     84c:	8f a3       	std	Y+39, r24	; 0x27
     84e:	98 a7       	std	Y+40, r25	; 0x28
     850:	a9 a7       	std	Y+41, r26	; 0x29
     852:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     854:	6f a1       	ldd	r22, Y+39	; 0x27
     856:	78 a5       	ldd	r23, Y+40	; 0x28
     858:	89 a5       	ldd	r24, Y+41	; 0x29
     85a:	9a a5       	ldd	r25, Y+42	; 0x2a
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e4       	ldi	r19, 0x40	; 64
     860:	4c e1       	ldi	r20, 0x1C	; 28
     862:	55 e4       	ldi	r21, 0x45	; 69
     864:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	8b a3       	std	Y+35, r24	; 0x23
     86e:	9c a3       	std	Y+36, r25	; 0x24
     870:	ad a3       	std	Y+37, r26	; 0x25
     872:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     874:	6b a1       	ldd	r22, Y+35	; 0x23
     876:	7c a1       	ldd	r23, Y+36	; 0x24
     878:	8d a1       	ldd	r24, Y+37	; 0x25
     87a:	9e a1       	ldd	r25, Y+38	; 0x26
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	2c f4       	brge	.+10     	; 0x896 <actuators_setup+0x6a>
		__ticks = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9a a3       	std	Y+34, r25	; 0x22
     892:	89 a3       	std	Y+33, r24	; 0x21
     894:	3f c0       	rjmp	.+126    	; 0x914 <actuators_setup+0xe8>
	else if (__tmp > 65535)
     896:	6b a1       	ldd	r22, Y+35	; 0x23
     898:	7c a1       	ldd	r23, Y+36	; 0x24
     89a:	8d a1       	ldd	r24, Y+37	; 0x25
     89c:	9e a1       	ldd	r25, Y+38	; 0x26
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	3f ef       	ldi	r19, 0xFF	; 255
     8a2:	4f e7       	ldi	r20, 0x7F	; 127
     8a4:	57 e4       	ldi	r21, 0x47	; 71
     8a6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
     8aa:	18 16       	cp	r1, r24
     8ac:	4c f5       	brge	.+82     	; 0x900 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ae:	6f a1       	ldd	r22, Y+39	; 0x27
     8b0:	78 a5       	ldd	r23, Y+40	; 0x28
     8b2:	89 a5       	ldd	r24, Y+41	; 0x29
     8b4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e2       	ldi	r20, 0x20	; 32
     8bc:	51 e4       	ldi	r21, 0x41	; 65
     8be:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	bc 01       	movw	r22, r24
     8c8:	cd 01       	movw	r24, r26
     8ca:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	9a a3       	std	Y+34, r25	; 0x22
     8d4:	89 a3       	std	Y+33, r24	; 0x21
     8d6:	0f c0       	rjmp	.+30     	; 0x8f6 <actuators_setup+0xca>
     8d8:	8a ef       	ldi	r24, 0xFA	; 250
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	98 a3       	std	Y+32, r25	; 0x20
     8de:	8f 8f       	std	Y+31, r24	; 0x1f
     8e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8e2:	98 a1       	ldd	r25, Y+32	; 0x20
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <actuators_setup+0xb8>
     8e8:	98 a3       	std	Y+32, r25	; 0x20
     8ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ec:	89 a1       	ldd	r24, Y+33	; 0x21
     8ee:	9a a1       	ldd	r25, Y+34	; 0x22
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	9a a3       	std	Y+34, r25	; 0x22
     8f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f6:	89 a1       	ldd	r24, Y+33	; 0x21
     8f8:	9a a1       	ldd	r25, Y+34	; 0x22
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	69 f7       	brne	.-38     	; 0x8d8 <actuators_setup+0xac>
     8fe:	14 c0       	rjmp	.+40     	; 0x928 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     900:	6b a1       	ldd	r22, Y+35	; 0x23
     902:	7c a1       	ldd	r23, Y+36	; 0x24
     904:	8d a1       	ldd	r24, Y+37	; 0x25
     906:	9e a1       	ldd	r25, Y+38	; 0x26
     908:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	9a a3       	std	Y+34, r25	; 0x22
     912:	89 a3       	std	Y+33, r24	; 0x21
     914:	89 a1       	ldd	r24, Y+33	; 0x21
     916:	9a a1       	ldd	r25, Y+34	; 0x22
     918:	9e 8f       	std	Y+30, r25	; 0x1e
     91a:	8d 8f       	std	Y+29, r24	; 0x1d
     91c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     91e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <actuators_setup+0xf4>
     924:	9e 8f       	std	Y+30, r25	; 0x1e
     926:	8d 8f       	std	Y+29, r24	; 0x1d
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	aa e7       	ldi	r26, 0x7A	; 122
     92e:	b4 e4       	ldi	r27, 0x44	; 68
     930:	89 8f       	std	Y+25, r24	; 0x19
     932:	9a 8f       	std	Y+26, r25	; 0x1a
     934:	ab 8f       	std	Y+27, r26	; 0x1b
     936:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     938:	69 8d       	ldd	r22, Y+25	; 0x19
     93a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     93c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     93e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e4       	ldi	r19, 0x40	; 64
     944:	4c e1       	ldi	r20, 0x1C	; 28
     946:	55 e4       	ldi	r21, 0x45	; 69
     948:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	8d 8b       	std	Y+21, r24	; 0x15
     952:	9e 8b       	std	Y+22, r25	; 0x16
     954:	af 8b       	std	Y+23, r26	; 0x17
     956:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     958:	6d 89       	ldd	r22, Y+21	; 0x15
     95a:	7e 89       	ldd	r23, Y+22	; 0x16
     95c:	8f 89       	ldd	r24, Y+23	; 0x17
     95e:	98 8d       	ldd	r25, Y+24	; 0x18
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e8       	ldi	r20, 0x80	; 128
     966:	5f e3       	ldi	r21, 0x3F	; 63
     968:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
     96c:	88 23       	and	r24, r24
     96e:	2c f4       	brge	.+10     	; 0x97a <actuators_setup+0x14e>
		__ticks = 1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	9c 8b       	std	Y+20, r25	; 0x14
     976:	8b 8b       	std	Y+19, r24	; 0x13
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <actuators_setup+0x1cc>
	else if (__tmp > 65535)
     97a:	6d 89       	ldd	r22, Y+21	; 0x15
     97c:	7e 89       	ldd	r23, Y+22	; 0x16
     97e:	8f 89       	ldd	r24, Y+23	; 0x17
     980:	98 8d       	ldd	r25, Y+24	; 0x18
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	3f ef       	ldi	r19, 0xFF	; 255
     986:	4f e7       	ldi	r20, 0x7F	; 127
     988:	57 e4       	ldi	r21, 0x47	; 71
     98a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	4c f5       	brge	.+82     	; 0x9e4 <actuators_setup+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     992:	69 8d       	ldd	r22, Y+25	; 0x19
     994:	7a 8d       	ldd	r23, Y+26	; 0x1a
     996:	8b 8d       	ldd	r24, Y+27	; 0x1b
     998:	9c 8d       	ldd	r25, Y+28	; 0x1c
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	51 e4       	ldi	r21, 0x41	; 65
     9a2:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
     9ba:	0f c0       	rjmp	.+30     	; 0x9da <actuators_setup+0x1ae>
     9bc:	8a ef       	ldi	r24, 0xFA	; 250
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	9a 8b       	std	Y+18, r25	; 0x12
     9c2:	89 8b       	std	Y+17, r24	; 0x11
     9c4:	89 89       	ldd	r24, Y+17	; 0x11
     9c6:	9a 89       	ldd	r25, Y+18	; 0x12
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <actuators_setup+0x19c>
     9cc:	9a 8b       	std	Y+18, r25	; 0x12
     9ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d0:	8b 89       	ldd	r24, Y+19	; 0x13
     9d2:	9c 89       	ldd	r25, Y+20	; 0x14
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	9c 89       	ldd	r25, Y+20	; 0x14
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	69 f7       	brne	.-38     	; 0x9bc <actuators_setup+0x190>
     9e2:	14 c0       	rjmp	.+40     	; 0xa0c <actuators_setup+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e4:	6d 89       	ldd	r22, Y+21	; 0x15
     9e6:	7e 89       	ldd	r23, Y+22	; 0x16
     9e8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ea:	98 8d       	ldd	r25, Y+24	; 0x18
     9ec:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	9c 8b       	std	Y+20, r25	; 0x14
     9f6:	8b 8b       	std	Y+19, r24	; 0x13
     9f8:	8b 89       	ldd	r24, Y+19	; 0x13
     9fa:	9c 89       	ldd	r25, Y+20	; 0x14
     9fc:	98 8b       	std	Y+16, r25	; 0x10
     9fe:	8f 87       	std	Y+15, r24	; 0x0f
     a00:	8f 85       	ldd	r24, Y+15	; 0x0f
     a02:	98 89       	ldd	r25, Y+16	; 0x10
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <actuators_setup+0x1d8>
     a08:	98 8b       	std	Y+16, r25	; 0x10
     a0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	//servo_set_umbrella_position(-89);
	_delay_ms(1000);
	servo_set_door_position(30);
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	e2 dd       	rcall	.-1084   	; 0x5d4 <servo_set_door_position>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	aa ef       	ldi	r26, 0xFA	; 250
     a16:	b3 e4       	ldi	r27, 0x43	; 67
     a18:	8b 87       	std	Y+11, r24	; 0x0b
     a1a:	9c 87       	std	Y+12, r25	; 0x0c
     a1c:	ad 87       	std	Y+13, r26	; 0x0d
     a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a20:	6b 85       	ldd	r22, Y+11	; 0x0b
     a22:	7c 85       	ldd	r23, Y+12	; 0x0c
     a24:	8d 85       	ldd	r24, Y+13	; 0x0d
     a26:	9e 85       	ldd	r25, Y+14	; 0x0e
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e4       	ldi	r19, 0x40	; 64
     a2c:	4c e1       	ldi	r20, 0x1C	; 28
     a2e:	55 e4       	ldi	r21, 0x45	; 69
     a30:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	8f 83       	std	Y+7, r24	; 0x07
     a3a:	98 87       	std	Y+8, r25	; 0x08
     a3c:	a9 87       	std	Y+9, r26	; 0x09
     a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a40:	6f 81       	ldd	r22, Y+7	; 0x07
     a42:	78 85       	ldd	r23, Y+8	; 0x08
     a44:	89 85       	ldd	r24, Y+9	; 0x09
     a46:	9a 85       	ldd	r25, Y+10	; 0x0a
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
     a54:	88 23       	and	r24, r24
     a56:	2c f4       	brge	.+10     	; 0xa62 <actuators_setup+0x236>
		__ticks = 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	9e 83       	std	Y+6, r25	; 0x06
     a5e:	8d 83       	std	Y+5, r24	; 0x05
     a60:	3f c0       	rjmp	.+126    	; 0xae0 <actuators_setup+0x2b4>
	else if (__tmp > 65535)
     a62:	6f 81       	ldd	r22, Y+7	; 0x07
     a64:	78 85       	ldd	r23, Y+8	; 0x08
     a66:	89 85       	ldd	r24, Y+9	; 0x09
     a68:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	3f ef       	ldi	r19, 0xFF	; 255
     a6e:	4f e7       	ldi	r20, 0x7F	; 127
     a70:	57 e4       	ldi	r21, 0x47	; 71
     a72:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
     a76:	18 16       	cp	r1, r24
     a78:	4c f5       	brge	.+82     	; 0xacc <actuators_setup+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a80:	9e 85       	ldd	r25, Y+14	; 0x0e
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e2       	ldi	r20, 0x20	; 32
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	9e 83       	std	Y+6, r25	; 0x06
     aa0:	8d 83       	std	Y+5, r24	; 0x05
     aa2:	0f c0       	rjmp	.+30     	; 0xac2 <actuators_setup+0x296>
     aa4:	8a ef       	ldi	r24, 0xFA	; 250
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <actuators_setup+0x284>
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	9e 83       	std	Y+6, r25	; 0x06
     ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	69 f7       	brne	.-38     	; 0xaa4 <actuators_setup+0x278>
     aca:	14 c0       	rjmp	.+40     	; 0xaf4 <actuators_setup+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     acc:	6f 81       	ldd	r22, Y+7	; 0x07
     ace:	78 85       	ldd	r23, Y+8	; 0x08
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	9e 83       	std	Y+6, r25	; 0x06
     ade:	8d 83       	std	Y+5, r24	; 0x05
     ae0:	8d 81       	ldd	r24, Y+5	; 0x05
     ae2:	9e 81       	ldd	r25, Y+6	; 0x06
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <actuators_setup+0x2c0>
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     af4:	07 de       	rcall	.-1010   	; 0x704 <servo_set_grabbers_up>
}
     af6:	aa 96       	adiw	r28, 0x2a	; 42
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	00 90 5b 00 	lds	r0, 0x005B
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	8f 93       	push	r24
     b22:	9f 93       	push	r25
     b24:	af 93       	push	r26
     b26:	bf 93       	push	r27
     b28:	ef 93       	push	r30
     b2a:	ff 93       	push	r31
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	00 d0       	rcall	.+0      	; 0xb32 <__vector_18+0x2a>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <__vector_18+0x2c>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     b38:	ed ee       	ldi	r30, 0xED	; 237
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     b40:	1b 82       	std	Y+3, r1	; 0x03
     b42:	9c c0       	rjmp	.+312    	; 0xc7c <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     b44:	ed ee       	ldi	r30, 0xED	; 237
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	82 95       	swap	r24
     b4c:	80 7f       	andi	r24, 0xF0	; 240
     b4e:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     b50:	ee ee       	ldi	r30, 0xEE	; 238
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	82 95       	swap	r24
     b58:	86 95       	lsr	r24
     b5a:	87 70       	andi	r24, 0x07	; 7
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	81 70       	andi	r24, 0x01	; 1
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <__vector_18+0x62>
     b68:	6e c0       	rjmp	.+220    	; 0xc46 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     b6a:	ef ee       	ldi	r30, 0xEF	; 239
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     b72:	ae ee       	ldi	r26, 0xEE	; 238
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ee ee       	ldi	r30, 0xEE	; 238
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8f 7d       	andi	r24, 0xDF	; 223
     b7e:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     b80:	e2 ef       	ldi	r30, 0xF2	; 242
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	82 95       	swap	r24
     b88:	86 95       	lsr	r24
     b8a:	87 70       	andi	r24, 0x07	; 7
     b8c:	28 2f       	mov	r18, r24
     b8e:	e3 ef       	ldi	r30, 0xF3	; 243
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 2f       	mov	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	82 2b       	or	r24, r18
     ba6:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     ba8:	19 82       	std	Y+1, r1	; 0x01
     baa:	2a c0       	rjmp	.+84     	; 0xc00 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	82 1b       	sub	r24, r18
     bb8:	93 0b       	sbc	r25, r19
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	90 95       	com	r25
     bc0:	81 95       	neg	r24
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	ea 5a       	subi	r30, 0xAA	; 170
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	40 81       	ld	r20, Z
     bcc:	51 81       	ldd	r21, Z+1	; 0x01
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	fc 01       	movw	r30, r24
     bd8:	e6 59       	subi	r30, 0x96	; 150
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	80 81       	ld	r24, Z
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	82 0f       	add	r24, r18
     bea:	93 1f       	adc	r25, r19
     bec:	da 01       	movw	r26, r20
     bee:	a8 0f       	add	r26, r24
     bf0:	b9 1f       	adc	r27, r25
     bf2:	ea ef       	ldi	r30, 0xFA	; 250
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	98 f2       	brcs	.-90     	; 0xbac <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	fc 01       	movw	r30, r24
     c10:	e6 59       	subi	r30, 0x96	; 150
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	80 81       	ld	r24, Z
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	80 83       	st	Z, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	85 30       	cpi	r24, 0x05	; 5
     c1e:	41 f4       	brne	.+16     	; 0xc30 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	fc 01       	movw	r30, r24
     c2a:	e6 59       	subi	r30, 0x96	; 150
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	e2 58       	subi	r30, 0x82	; 130
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	80 81       	ld	r24, Z
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	80 83       	st	Z, r24
     c44:	1f c0       	rjmp	.+62     	; 0xc84 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     c46:	ee ee       	ldi	r30, 0xEE	; 238
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 95       	swap	r24
     c4e:	86 95       	lsr	r24
     c50:	86 95       	lsr	r24
     c52:	83 70       	andi	r24, 0x03	; 3
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	88 23       	and	r24, r24
     c5e:	59 f0       	breq	.+22     	; 0xc76 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     c60:	ef ee       	ldi	r30, 0xEF	; 239
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     c66:	ae ee       	ldi	r26, 0xEE	; 238
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ee ee       	ldi	r30, 0xEE	; 238
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7b       	andi	r24, 0xBF	; 191
     c72:	8c 93       	st	X, r24
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	8f 30       	cpi	r24, 0x0F	; 15
     c80:	08 f4       	brcc	.+2      	; 0xc84 <__vector_18+0x17c>
     c82:	60 cf       	rjmp	.-320    	; 0xb44 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     c84:	ed ee       	ldi	r30, 0xED	; 237
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     c8c:	aa ed       	ldi	r26, 0xDA	; 218
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ea ed       	ldi	r30, 0xDA	; 218
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8c 93       	st	X, r24
}
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	00 92 5b 00 	sts	0x005B, r0
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <CAN_InitModule+0x6>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     cd2:	e8 ed       	ldi	r30, 0xD8	; 216
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     cda:	1a 82       	std	Y+2, r1	; 0x02
     cdc:	32 c0       	rjmp	.+100    	; 0xd42 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     cde:	ed ee       	ldi	r30, 0xED	; 237
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	82 95       	swap	r24
     ce6:	80 7f       	andi	r24, 0xF0	; 240
     ce8:	80 83       	st	Z, r24

		CANSTMOB = 0;
     cea:	ee ee       	ldi	r30, 0xEE	; 238
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	10 82       	st	Z, r1
		CANCDMOB = 0;
     cf0:	ef ee       	ldi	r30, 0xEF	; 239
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	10 82       	st	Z, r1

		CANIDT1 = 0;
     cf6:	e3 ef       	ldi	r30, 0xF3	; 243
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
		CANIDT2 = 0;
     cfc:	e2 ef       	ldi	r30, 0xF2	; 242
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	10 82       	st	Z, r1
		CANIDT3 = 0;
     d02:	e1 ef       	ldi	r30, 0xF1	; 241
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	10 82       	st	Z, r1
		CANIDT4 = 0;
     d08:	e0 ef       	ldi	r30, 0xF0	; 240
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	10 82       	st	Z, r1
		CANIDM1 = 0;
     d0e:	e7 ef       	ldi	r30, 0xF7	; 247
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	10 82       	st	Z, r1
		CANIDM2 = 0;
     d14:	e6 ef       	ldi	r30, 0xF6	; 246
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	10 82       	st	Z, r1
		CANIDM3 = 0;
     d1a:	e5 ef       	ldi	r30, 0xF5	; 245
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	10 82       	st	Z, r1
		CANIDM4 = 0;
     d20:	e4 ef       	ldi	r30, 0xF4	; 244
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     d26:	19 82       	std	Y+1, r1	; 0x01
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <CAN_InitModule+0x6e>
			CANMSG = 0;
     d2a:	ea ef       	ldi	r30, 0xFA	; 250
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	b8 f3       	brcs	.-18     	; 0xd2a <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	8a 83       	std	Y+2, r24	; 0x02
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	8f 30       	cpi	r24, 0x0F	; 15
     d46:	58 f2       	brcs	.-106    	; 0xcde <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     d48:	e8 ed       	ldi	r30, 0xD8	; 216
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     d50:	e2 ee       	ldi	r30, 0xE2	; 226
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     d58:	e3 ee       	ldi	r30, 0xE3	; 227
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     d60:	e4 ee       	ldi	r30, 0xE4	; 228
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	8e e5       	ldi	r24, 0x5E	; 94
     d66:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     d68:	e5 ee       	ldi	r30, 0xE5	; 229
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     d6e:	eb ed       	ldi	r30, 0xDB	; 219
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 eb       	ldi	r24, 0xB0	; 176
     d74:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     d76:	ef ed       	ldi	r30, 0xDF	; 223
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8f e7       	ldi	r24, 0x7F	; 127
     d7c:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     d7e:	ee ed       	ldi	r30, 0xDE	; 222
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	80 83       	st	Z, r24
	sei();
     d86:	78 94       	sei
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <CAN_InitRxMob+0x6>
     d98:	00 d0       	rcall	.+0      	; 0xd9a <CAN_InitRxMob+0x8>
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     da4:	ed ee       	ldi	r30, 0xED	; 237
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     dac:	e9 ed       	ldi	r30, 0xD9	; 217
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	82 95       	swap	r24
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	88 23       	and	r24, r24
     dc0:	a9 f7       	brne	.-22     	; 0xdac <CAN_InitRxMob+0x1a>
     dc2:	e9 ed       	ldi	r30, 0xD9	; 217
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	86 95       	lsr	r24
     dca:	86 95       	lsr	r24
     dcc:	86 95       	lsr	r24
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	90 70       	andi	r25, 0x00	; 0
     dd6:	88 23       	and	r24, r24
     dd8:	49 f7       	brne	.-46     	; 0xdac <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     dde:	ed ee       	ldi	r30, 0xED	; 237
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	82 95       	swap	r24
     de6:	80 7f       	andi	r24, 0xF0	; 240
     de8:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     dea:	ef ee       	ldi	r30, 0xEF	; 239
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	82 95       	swap	r24
     df2:	86 95       	lsr	r24
     df4:	86 95       	lsr	r24
     df6:	83 70       	andi	r24, 0x03	; 3
     df8:	88 23       	and	r24, r24
     dfa:	69 f5       	brne	.+90     	; 0xe56 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     dfc:	ef ee       	ldi	r30, 0xEF	; 239
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	8f e0       	ldi	r24, 0x0F	; 15
     e02:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     e04:	e3 ef       	ldi	r30, 0xF3	; 243
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	90 70       	andi	r25, 0x00	; 0
     e0e:	96 95       	lsr	r25
     e10:	87 95       	ror	r24
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     e1c:	e2 ef       	ldi	r30, 0xF2	; 242
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	82 95       	swap	r24
     e24:	88 0f       	add	r24, r24
     e26:	80 7e       	andi	r24, 0xE0	; 224
     e28:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     e2a:	e6 ef       	ldi	r30, 0xF6	; 246
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 ee       	ldi	r24, 0xE0	; 224
     e30:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     e32:	e7 ef       	ldi	r30, 0xF7	; 247
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     e3a:	af ee       	ldi	r26, 0xEF	; 239
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ef ee       	ldi	r30, 0xEF	; 239
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     e48:	ed ee       	ldi	r30, 0xED	; 237
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 83       	st	Z, r24

		return 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	0c c0       	rjmp	.+24     	; 0xe6e <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	8a 83       	std	Y+2, r24	; 0x02
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	8f 30       	cpi	r24, 0x0F	; 15
     e60:	08 f4       	brcc	.+2      	; 0xe64 <CAN_InitRxMob+0xd2>
     e62:	bd cf       	rjmp	.-134    	; 0xdde <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     e64:	ed ee       	ldi	r30, 0xED	; 237
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	80 83       	st	Z, r24

	return 0;
     e6c:	1d 82       	std	Y+5, r1	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <CAN_Init+0xa>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     e90:	1b df       	rcall	.-458    	; 0xcc8 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     e92:	19 82       	std	Y+1, r1	; 0x01
     e94:	36 c0       	rjmp	.+108    	; 0xf02 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	79 df       	rcall	.-270    	; 0xd92 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	8c 01       	movw	r16, r24
     eac:	0a 5a       	subi	r16, 0xAA	; 170
     eae:	1e 4f       	sbci	r17, 0xFE	; 254
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 42 19 	call	0x3284	; 0x3284 <calloc>
     ebc:	f8 01       	movw	r30, r16
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	48 2f       	mov	r20, r24
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	e2 58       	subi	r30, 0x82	; 130
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	10 82       	st	Z, r1
     edc:	fc 01       	movw	r30, r24
     ede:	e2 58       	subi	r30, 0x82	; 130
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	80 81       	ld	r24, Z
     ee4:	f9 01       	movw	r30, r18
     ee6:	ec 58       	subi	r30, 0x8C	; 140
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 83       	st	Z, r24
     eec:	f9 01       	movw	r30, r18
     eee:	ec 58       	subi	r30, 0x8C	; 140
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	80 81       	ld	r24, Z
     ef4:	fa 01       	movw	r30, r20
     ef6:	e6 59       	subi	r30, 0x96	; 150
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	99 81       	ldd	r25, Y+1	; 0x01
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	98 17       	cp	r25, r24
     f08:	30 f2       	brcs	.-116    	; 0xe96 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <CAN_Read+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <CAN_Read+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     f2a:	e4 e3       	ldi	r30, 0x34	; 52
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	fc 01       	movw	r30, r24
     f3c:	e2 58       	subi	r30, 0x82	; 130
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	80 81       	ld	r24, Z
     f42:	88 23       	and	r24, r24
     f44:	b1 f3       	breq	.-20     	; 0xf32 <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	30 c0       	rjmp	.+96     	; 0xfaa <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	9b 81       	ldd	r25, Y+3	; 0x03
     f54:	dc 01       	movw	r26, r24
     f56:	a2 0f       	add	r26, r18
     f58:	b3 1f       	adc	r27, r19
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	82 1b       	sub	r24, r18
     f66:	93 0b       	sbc	r25, r19
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	90 95       	com	r25
     f6e:	81 95       	neg	r24
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	ea 5a       	subi	r30, 0xAA	; 170
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	40 81       	ld	r20, Z
     f7a:	51 81       	ldd	r21, Z+1	; 0x01
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	fc 01       	movw	r30, r24
     f86:	ec 58       	subi	r30, 0x8C	; 140
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	fa 01       	movw	r30, r20
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	80 81       	ld	r24, Z
     fa2:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	68 f2       	brcs	.-102    	; 0xf4a <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	fc 01       	movw	r30, r24
     fba:	ec 58       	subi	r30, 0x8C	; 140
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 83       	st	Z, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	85 30       	cpi	r24, 0x05	; 5
     fc8:	41 f4       	brne	.+16     	; 0xfda <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	fc 01       	movw	r30, r24
     fd4:	ec 58       	subi	r30, 0x8C	; 140
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 01       	movw	r18, r24
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	30 40       	sbci	r19, 0x00	; 0
     fe6:	f9 01       	movw	r30, r18
     fe8:	e2 58       	subi	r30, 0x82	; 130
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	81 50       	subi	r24, 0x01	; 1
     ff0:	f9 01       	movw	r30, r18
     ff2:	e2 58       	subi	r30, 0x82	; 130
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	80 83       	st	Z, r24

	return 0;
     ff8:	80 e0       	ldi	r24, 0x00	; 0
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	27 97       	sbiw	r28, 0x07	; 7
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	9d 83       	std	Y+5, r25	; 0x05
    101e:	8c 83       	std	Y+4, r24	; 0x04
    1020:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1022:	e9 ed       	ldi	r30, 0xD9	; 217
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	82 95       	swap	r24
    102a:	8f 70       	andi	r24, 0x0F	; 15
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	81 70       	andi	r24, 0x01	; 1
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	88 23       	and	r24, r24
    1036:	a9 f7       	brne	.-22     	; 0x1022 <CAN_Write+0x1a>
    1038:	e9 ed       	ldi	r30, 0xD9	; 217
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	86 95       	lsr	r24
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	81 70       	andi	r24, 0x01	; 1
    104a:	90 70       	andi	r25, 0x00	; 0
    104c:	88 23       	and	r24, r24
    104e:	49 f7       	brne	.-46     	; 0x1022 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1050:	ed ee       	ldi	r30, 0xED	; 237
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	12 c0       	rjmp	.+36     	; 0x1080 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
    105c:	ed ee       	ldi	r30, 0xED	; 237
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	82 95       	swap	r24
    1064:	80 7f       	andi	r24, 0xF0	; 240
    1066:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    1068:	ef ee       	ldi	r30, 0xEF	; 239
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	82 95       	swap	r24
    1070:	86 95       	lsr	r24
    1072:	86 95       	lsr	r24
    1074:	83 70       	andi	r24, 0x03	; 3
    1076:	88 23       	and	r24, r24
    1078:	31 f0       	breq	.+12     	; 0x1086 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	8a 83       	std	Y+2, r24	; 0x02
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	8f 30       	cpi	r24, 0x0F	; 15
    1084:	58 f3       	brcs	.-42     	; 0x105c <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	8f 30       	cpi	r24, 0x0F	; 15
    108a:	19 f4       	brne	.+6      	; 0x1092 <CAN_Write+0x8a>
		return -1;
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	8f 83       	std	Y+7, r24	; 0x07
    1090:	32 c0       	rjmp	.+100    	; 0x10f6 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1092:	e2 ef       	ldi	r30, 0xF2	; 242
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	82 95       	swap	r24
    109a:	88 0f       	add	r24, r24
    109c:	80 7e       	andi	r24, 0xE0	; 224
    109e:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    10a0:	e3 ef       	ldi	r30, 0xF3	; 243
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	86 95       	lsr	r24
    10a8:	86 95       	lsr	r24
    10aa:	86 95       	lsr	r24
    10ac:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    10ae:	ef ee       	ldi	r30, 0xEF	; 239
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    10b6:	1b 82       	std	Y+3, r1	; 0x03
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <CAN_Write+0xd0>
		CANMSG = data[i];
    10ba:	aa ef       	ldi	r26, 0xFA	; 250
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 30       	cpi	r24, 0x08	; 8
    10dc:	70 f3       	brcs	.-36     	; 0x10ba <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    10de:	af ee       	ldi	r26, 0xEF	; 239
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ef ee       	ldi	r30, 0xEF	; 239
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    10ec:	ed ee       	ldi	r30, 0xED	; 237
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	80 83       	st	Z, r24

	return 0;
    10f4:	1f 82       	std	Y+7, r1	; 0x07
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10f8:	27 96       	adiw	r28, 0x07	; 7
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	2c 97       	sbiw	r28, 0x0c	; 12
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	89 87       	std	Y+9, r24	; 0x09
    1120:	6a 87       	std	Y+10, r22	; 0x0a
    1122:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1124:	80 91 0a 01 	lds	r24, 0x010A
    1128:	90 91 0b 01 	lds	r25, 0x010B
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	06 97       	sbiw	r24, 0x06	; 6
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	8f 83       	std	Y+7, r24	; 0x07
    113a:	14 c0       	rjmp	.+40     	; 0x1164 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    113c:	ef 81       	ldd	r30, Y+7	; 0x07
    113e:	f8 85       	ldd	r31, Y+8	; 0x08
    1140:	90 81       	ld	r25, Z
    1142:	89 85       	ldd	r24, Y+9	; 0x09
    1144:	98 17       	cp	r25, r24
    1146:	19 f4       	brne	.+6      	; 0x114e <gpio_register_pin+0x44>
            return 1;
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	2c 87       	std	Y+12, r18	; 0x0c
    114c:	c9 c0       	rjmp	.+402    	; 0x12e0 <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    114e:	ef 81       	ldd	r30, Y+7	; 0x07
    1150:	f8 85       	ldd	r31, Y+8	; 0x08
    1152:	80 85       	ldd	r24, Z+8	; 0x08
    1154:	91 85       	ldd	r25, Z+9	; 0x09
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	06 97       	sbiw	r24, 0x06	; 6
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	8f 83       	std	Y+7, r24	; 0x07
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	06 96       	adiw	r24, 0x06	; 6
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	92 07       	cpc	r25, r18
    1170:	29 f7       	brne	.-54     	; 0x113c <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	86 95       	lsr	r24
    1176:	86 95       	lsr	r24
    1178:	86 95       	lsr	r24
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	87 70       	andi	r24, 0x07	; 7
    1182:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1184:	8a 85       	ldd	r24, Y+10	; 0x0a
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	09 f0       	breq	.+2      	; 0x118c <gpio_register_pin+0x82>
    118a:	48 c0       	rjmp	.+144    	; 0x121c <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	c9 01       	movw	r24, r18
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	4e 96       	adiw	r24, 0x1e	; 30
    119e:	dc 01       	movw	r26, r24
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	c9 01       	movw	r24, r18
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	4e 96       	adiw	r24, 0x1e	; 30
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <gpio_register_pin+0xbe>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	2a 95       	dec	r18
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <gpio_register_pin+0xba>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	c9 01       	movw	r24, r18
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	4f 96       	adiw	r24, 0x1f	; 31
    11e2:	dc 01       	movw	r26, r24
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	c9 01       	movw	r24, r18
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	4f 96       	adiw	r24, 0x1f	; 31
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <gpio_register_pin+0x104>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <gpio_register_pin+0x100>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
        return 0;
    1218:	1c 86       	std	Y+12, r1	; 0x0c
    121a:	62 c0       	rjmp	.+196    	; 0x12e0 <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    121c:	8e 81       	ldd	r24, Y+6	; 0x06
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	4e 96       	adiw	r24, 0x1e	; 30
    122e:	dc 01       	movw	r26, r24
    1230:	8e 81       	ldd	r24, Y+6	; 0x06
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	c9 01       	movw	r24, r18
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	4e 96       	adiw	r24, 0x1e	; 30
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <gpio_register_pin+0x14e>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	2a 95       	dec	r18
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <gpio_register_pin+0x14a>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1262:	8e 81       	ldd	r24, Y+6	; 0x06
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	c9 01       	movw	r24, r18
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	4f 96       	adiw	r24, 0x1f	; 31
    1274:	dc 01       	movw	r26, r24
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	c9 01       	movw	r24, r18
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	82 0f       	add	r24, r18
    1284:	93 1f       	adc	r25, r19
    1286:	4f 96       	adiw	r24, 0x1f	; 31
    1288:	fc 01       	movw	r30, r24
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <gpio_register_pin+0x194>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	2a 95       	dec	r18
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <gpio_register_pin+0x190>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    12a6:	8a e0       	ldi	r24, 0x0A	; 10
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <malloc>
    12ae:	98 87       	std	Y+8, r25	; 0x08
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <gpio_register_pin+0x1b6>
        return 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	8c 87       	std	Y+12, r24	; 0x0c
    12be:	10 c0       	rjmp	.+32     	; 0x12e0 <gpio_register_pin+0x1d6>

    input->pin       = pin;
    12c0:	ef 81       	ldd	r30, Y+7	; 0x07
    12c2:	f8 85       	ldd	r31, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    12c8:	ef 81       	ldd	r30, Y+7	; 0x07
    12ca:	f8 85       	ldd	r31, Y+8	; 0x08
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	06 96       	adiw	r24, 0x06	; 6
    12d6:	28 e0       	ldi	r18, 0x08	; 8
    12d8:	31 e0       	ldi	r19, 0x01	; 1
    12da:	b9 01       	movw	r22, r18
    12dc:	0b d0       	rcall	.+22     	; 0x12f4 <list_add>

    return 0;
    12de:	1c 86       	std	Y+12, r1	; 0x0c
    12e0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    12e2:	2c 96       	adiw	r28, 0x0c	; 12
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <list_add+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <list_add+0x8>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	7c 83       	std	Y+4, r23	; 0x04
    1306:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    1308:	eb 81       	ldd	r30, Y+3	; 0x03
    130a:	fc 81       	ldd	r31, Y+4	; 0x04
    130c:	42 81       	ldd	r20, Z+2	; 0x02
    130e:	53 81       	ldd	r21, Z+3	; 0x03
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	b9 01       	movw	r22, r18
    131a:	07 d0       	rcall	.+14     	; 0x132a <__list_add>
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <__list_add+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <__list_add+0x8>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <__list_add+0xa>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	7c 83       	std	Y+4, r23	; 0x04
    133e:	6b 83       	std	Y+3, r22	; 0x03
    1340:	5e 83       	std	Y+6, r21	; 0x06
    1342:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1344:	ed 81       	ldd	r30, Y+5	; 0x05
    1346:	fe 81       	ldd	r31, Y+6	; 0x06
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
    new->next = next;
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    135c:	e9 81       	ldd	r30, Y+1	; 0x01
    135e:	fa 81       	ldd	r31, Y+2	; 0x02
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    prev->next = new;
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	93 83       	std	Z+3, r25	; 0x03
    1372:	82 83       	std	Z+2, r24	; 0x02
}
    1374:	26 96       	adiw	r28, 0x06	; 6
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <__gpio_read_pin+0x6>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	86 95       	lsr	r24
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	87 70       	andi	r24, 0x07	; 7
    13a4:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	c9 01       	movw	r24, r18
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	4d 96       	adiw	r24, 0x1d	; 29
    13b8:	fc 01       	movw	r30, r24
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <__gpio_read_pin+0x4c>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <__gpio_read_pin+0x48>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	2b 97       	sbiw	r28, 0x0b	; 11
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13fc:	80 91 0a 01 	lds	r24, 0x010A
    1400:	90 91 0b 01 	lds	r25, 0x010B
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	06 97       	sbiw	r24, 0x06	; 6
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	8f 83       	std	Y+7, r24	; 0x07
    1412:	55 c0       	rjmp	.+170    	; 0x14be <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1414:	ef 81       	ldd	r30, Y+7	; 0x07
    1416:	f8 85       	ldd	r31, Y+8	; 0x08
    1418:	90 81       	ld	r25, Z
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	98 17       	cp	r25, r24
    141e:	09 f0       	breq	.+2      	; 0x1422 <gpio_read_pin+0x3c>
    1420:	43 c0       	rjmp	.+134    	; 0x14a8 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    1422:	1c 82       	std	Y+4, r1	; 0x04
    1424:	21 c0       	rjmp	.+66     	; 0x1468 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8f 81       	ldd	r24, Y+7	; 0x07
    142e:	98 85       	ldd	r25, Y+8	; 0x08
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	fc 01       	movw	r30, r24
    1436:	32 96       	adiw	r30, 0x02	; 2
    1438:	40 81       	ld	r20, Z
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9c 01       	movw	r18, r24
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	8f 81       	ldd	r24, Y+7	; 0x07
    1448:	98 85       	ldd	r25, Y+8	; 0x08
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	fc 01       	movw	r30, r24
    1450:	32 96       	adiw	r30, 0x02	; 2
    1452:	80 81       	ld	r24, Z
    1454:	48 17       	cp	r20, r24
    1456:	29 f0       	breq	.+10     	; 0x1462 <gpio_read_pin+0x7c>
                    return input->previous_state;
    1458:	ef 81       	ldd	r30, Y+7	; 0x07
    145a:	f8 85       	ldd	r31, Y+8	; 0x08
    145c:	25 81       	ldd	r18, Z+5	; 0x05
    145e:	2b 87       	std	Y+11, r18	; 0x0b
    1460:	38 c0       	rjmp	.+112    	; 0x14d2 <gpio_read_pin+0xec>
                i++;
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	e0 f2       	brcs	.-72     	; 0x1426 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    146e:	ef 81       	ldd	r30, Y+7	; 0x07
    1470:	f8 85       	ldd	r31, Y+8	; 0x08
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 27       	eor	r24, r25
    1478:	88 23       	and	r24, r24
    147a:	29 f0       	breq	.+10     	; 0x1486 <gpio_read_pin+0xa0>
    147c:	ef 81       	ldd	r30, Y+7	; 0x07
    147e:	f8 85       	ldd	r31, Y+8	; 0x08
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	8a 87       	std	Y+10, r24	; 0x0a
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <gpio_read_pin+0xb0>
    1486:	ef 81       	ldd	r30, Y+7	; 0x07
    1488:	f8 85       	ldd	r31, Y+8	; 0x08
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	1a 86       	std	Y+10, r1	; 0x0a
    148e:	88 23       	and	r24, r24
    1490:	11 f4       	brne	.+4      	; 0x1496 <gpio_read_pin+0xb0>
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	2a 87       	std	Y+10, r18	; 0x0a
    1496:	8a 85       	ldd	r24, Y+10	; 0x0a
    1498:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    149a:	ef 81       	ldd	r30, Y+7	; 0x07
    149c:	f8 85       	ldd	r31, Y+8	; 0x08
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	85 83       	std	Z+5, r24	; 0x05

            return state;
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	2b 87       	std	Y+11, r18	; 0x0b
    14a6:	15 c0       	rjmp	.+42     	; 0x14d2 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14a8:	ef 81       	ldd	r30, Y+7	; 0x07
    14aa:	f8 85       	ldd	r31, Y+8	; 0x08
    14ac:	80 85       	ldd	r24, Z+8	; 0x08
    14ae:	91 85       	ldd	r25, Z+9	; 0x09
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	06 97       	sbiw	r24, 0x06	; 6
    14ba:	98 87       	std	Y+8, r25	; 0x08
    14bc:	8f 83       	std	Y+7, r24	; 0x07
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	06 96       	adiw	r24, 0x06	; 6
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	92 07       	cpc	r25, r18
    14ca:	09 f0       	breq	.+2      	; 0x14ce <gpio_read_pin+0xe8>
    14cc:	a3 cf       	rjmp	.-186    	; 0x1414 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8b 87       	std	Y+11, r24	; 0x0b
    14d2:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    14d4:	2b 96       	adiw	r28, 0x0b	; 11
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <gpio_debouncer+0xa>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <gpio_debouncer+0xc>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <gpio_debouncer+0xe>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14f8:	80 91 0a 01 	lds	r24, 0x010A
    14fc:	90 91 0b 01 	lds	r25, 0x010B
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	06 97       	sbiw	r24, 0x06	; 6
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	1b c0       	rjmp	.+54     	; 0x1546 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1510:	00 91 88 01 	lds	r16, 0x0188
    1514:	10 91 89 01 	lds	r17, 0x0189
    1518:	ed 81       	ldd	r30, Y+5	; 0x05
    151a:	fe 81       	ldd	r31, Y+6	; 0x06
    151c:	80 81       	ld	r24, Z
    151e:	33 df       	rcall	.-410    	; 0x1386 <__gpio_read_pin>
    1520:	28 2f       	mov	r18, r24
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	80 0f       	add	r24, r16
    1528:	91 1f       	adc	r25, r17
    152a:	fc 01       	movw	r30, r24
    152c:	32 96       	adiw	r30, 0x02	; 2
    152e:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1530:	ed 81       	ldd	r30, Y+5	; 0x05
    1532:	fe 81       	ldd	r31, Y+6	; 0x06
    1534:	80 85       	ldd	r24, Z+8	; 0x08
    1536:	91 85       	ldd	r25, Z+9	; 0x09
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	06 97       	sbiw	r24, 0x06	; 6
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	06 96       	adiw	r24, 0x06	; 6
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	88 30       	cpi	r24, 0x08	; 8
    1550:	92 07       	cpc	r25, r18
    1552:	f1 f6       	brne	.-68     	; 0x1510 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1554:	80 91 88 01 	lds	r24, 0x0188
    1558:	90 91 89 01 	lds	r25, 0x0189
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	90 93 89 01 	sts	0x0189, r25
    1562:	80 93 88 01 	sts	0x0188, r24
    1566:	80 91 88 01 	lds	r24, 0x0188
    156a:	90 91 89 01 	lds	r25, 0x0189
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	21 f4       	brne	.+8      	; 0x157c <gpio_debouncer+0x96>
        count = 0;
    1574:	10 92 89 01 	sts	0x0189, r1
    1578:	10 92 88 01 	sts	0x0188, r1
	
}
    157c:	26 96       	adiw	r28, 0x06	; 6
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <green_detection_front>:
//////////////////////////////////////////////////////////////////////////



char green_detection_front(uint32_t start_time)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <green_detection_front+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <green_detection_front+0x8>
    159a:	00 d0       	rcall	.+0      	; 0x159c <green_detection_front+0xa>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	6a 83       	std	Y+2, r22	; 0x02
    15a2:	7b 83       	std	Y+3, r23	; 0x03
    15a4:	8c 83       	std	Y+4, r24	; 0x04
    15a6:	9d 83       	std	Y+5, r25	; 0x05
	signed char i;
	i = check_front_sensors(FRONT_ALL);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <check_front_sensors>
    15ae:	89 83       	std	Y+1, r24	; 0x01
	if(i == DETECTED)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	31 f4       	brne	.+12     	; 0x15c2 <green_detection_front+0x30>
	{
		stop(HARD_STOP);
    15b6:	83 e5       	ldi	r24, 0x53	; 83
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	3a d4       	rcall	.+2164   	; 0x1e30 <stop>
		return 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	8e 83       	std	Y+6, r24	; 0x06
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <green_detection_front+0x32>
	}
	return 0;
    15c2:	1e 82       	std	Y+6, r1	; 0x06
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    15c6:	26 96       	adiw	r28, 0x06	; 6
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <greenside>:
	{{280,1910},20,FORWARD,NULL},						//POSITION 1			MOVE BACK INFRONT OF THE BLOCKS
	{{280,1810},20,BACKWARD,NULL}

};
void greenside(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	c5 54       	subi	r28, 0x45	; 69
    15e2:	d0 40       	sbci	r29, 0x00	; 0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    15ee:	1c ae       	std	Y+60, r1	; 0x3c
	uint8_t next_position = 0;
    15f0:	1b ae       	std	Y+59, r1	; 0x3b
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	89 af       	std	Y+57, r24	; 0x39
	
	starting_position.x		= 180;
    15f6:	84 eb       	ldi	r24, 0xB4	; 180
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
	starting_position.y		= 1320;
    15fe:	88 e2       	ldi	r24, 0x28	; 40
    1600:	95 e0       	ldi	r25, 0x05	; 5
    1602:	fe 01       	movw	r30, r28
    1604:	ff 96       	adiw	r30, 0x3f	; 63
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
	starting_position.angle = 90;
    160a:	fe 01       	movw	r30, r28
    160c:	ef 5b       	subi	r30, 0xBF	; 191
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	8a e5       	ldi	r24, 0x5A	; 90
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
	
	odometry_set_position(&starting_position);
    1618:	ce 01       	movw	r24, r28
    161a:	cd 96       	adiw	r24, 0x3d	; 61
    161c:	5a d5       	rcall	.+2740   	; 0x20d2 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    161e:	89 ad       	ldd	r24, Y+57	; 0x39
    1620:	28 2f       	mov	r18, r24
    1622:	33 27       	eor	r19, r19
    1624:	27 fd       	sbrc	r18, 7
    1626:	30 95       	com	r19
    1628:	26 96       	adiw	r28, 0x06	; 6
    162a:	3f af       	std	Y+63, r19	; 0x3f
    162c:	2e af       	std	Y+62, r18	; 0x3e
    162e:	26 97       	sbiw	r28, 0x06	; 6
    1630:	26 96       	adiw	r28, 0x06	; 6
    1632:	8e ad       	ldd	r24, Y+62	; 0x3e
    1634:	9f ad       	ldd	r25, Y+63	; 0x3f
    1636:	26 97       	sbiw	r28, 0x06	; 6
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	49 f0       	breq	.+18     	; 0x164e <greenside+0x76>
    163c:	26 96       	adiw	r28, 0x06	; 6
    163e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1640:	3f ad       	ldd	r19, Y+63	; 0x3f
    1642:	26 97       	sbiw	r28, 0x06	; 6
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <greenside+0x74>
    164a:	0a c1       	rjmp	.+532    	; 0x1860 <greenside+0x288>
    164c:	e8 cf       	rjmp	.-48     	; 0x161e <greenside+0x46>
		{
			case ROBOT_STATE_COLLISION:
				if(current_position == 0)
    164e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1650:	88 23       	and	r24, r24
    1652:	09 f0       	breq	.+2      	; 0x1656 <greenside+0x7e>
    1654:	05 c1       	rjmp	.+522    	; 0x1860 <greenside+0x288>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a8 e4       	ldi	r26, 0x48	; 72
    165c:	b3 e4       	ldi	r27, 0x43	; 67
    165e:	8d ab       	std	Y+53, r24	; 0x35
    1660:	9e ab       	std	Y+54, r25	; 0x36
    1662:	af ab       	std	Y+55, r26	; 0x37
    1664:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6d a9       	ldd	r22, Y+53	; 0x35
    1668:	7e a9       	ldd	r23, Y+54	; 0x36
    166a:	8f a9       	ldd	r24, Y+55	; 0x37
    166c:	98 ad       	ldd	r25, Y+56	; 0x38
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e4       	ldi	r19, 0x40	; 64
    1672:	4c e1       	ldi	r20, 0x1C	; 28
    1674:	55 e4       	ldi	r21, 0x45	; 69
    1676:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	89 ab       	std	Y+49, r24	; 0x31
    1680:	9a ab       	std	Y+50, r25	; 0x32
    1682:	ab ab       	std	Y+51, r26	; 0x33
    1684:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1686:	69 a9       	ldd	r22, Y+49	; 0x31
    1688:	7a a9       	ldd	r23, Y+50	; 0x32
    168a:	8b a9       	ldd	r24, Y+51	; 0x33
    168c:	9c a9       	ldd	r25, Y+52	; 0x34
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <greenside+0xd0>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	98 ab       	std	Y+48, r25	; 0x30
    16a4:	8f a7       	std	Y+47, r24	; 0x2f
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <greenside+0x14e>
	else if (__tmp > 65535)
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <greenside+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6d a9       	ldd	r22, Y+53	; 0x35
    16c2:	7e a9       	ldd	r23, Y+54	; 0x36
    16c4:	8f a9       	ldd	r24, Y+55	; 0x37
    16c6:	98 ad       	ldd	r25, Y+56	; 0x38
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	98 ab       	std	Y+48, r25	; 0x30
    16e6:	8f a7       	std	Y+47, r24	; 0x2f
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <greenside+0x130>
    16ea:	8a ef       	ldi	r24, 0xFA	; 250
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e a7       	std	Y+46, r25	; 0x2e
    16f0:	8d a7       	std	Y+45, r24	; 0x2d
    16f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <greenside+0x11e>
    16fa:	9e a7       	std	Y+46, r25	; 0x2e
    16fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1700:	98 a9       	ldd	r25, Y+48	; 0x30
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8f a5       	ldd	r24, Y+47	; 0x2f
    170a:	98 a9       	ldd	r25, Y+48	; 0x30
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <greenside+0x112>
    1710:	87 c0       	rjmp	.+270    	; 0x1820 <greenside+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	69 a9       	ldd	r22, Y+49	; 0x31
    1714:	7a a9       	ldd	r23, Y+50	; 0x32
    1716:	8b a9       	ldd	r24, Y+51	; 0x33
    1718:	9c a9       	ldd	r25, Y+52	; 0x34
    171a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	98 ab       	std	Y+48, r25	; 0x30
    1724:	8f a7       	std	Y+47, r24	; 0x2f
    1726:	8f a5       	ldd	r24, Y+47	; 0x2f
    1728:	98 a9       	ldd	r25, Y+48	; 0x30
    172a:	9c a7       	std	Y+44, r25	; 0x2c
    172c:	8b a7       	std	Y+43, r24	; 0x2b
    172e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1730:	9c a5       	ldd	r25, Y+44	; 0x2c
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <greenside+0x15a>
    1736:	9c a7       	std	Y+44, r25	; 0x2c
    1738:	8b a7       	std	Y+43, r24	; 0x2b
    173a:	72 c0       	rjmp	.+228    	; 0x1820 <greenside+0x248>
				{
					_delay_ms(200);
					while(green_tactic_one_positions[current_position].callback(0) != 0)
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a8 ec       	ldi	r26, 0xC8	; 200
    1742:	b2 e4       	ldi	r27, 0x42	; 66
    1744:	8f a3       	std	Y+39, r24	; 0x27
    1746:	98 a7       	std	Y+40, r25	; 0x28
    1748:	a9 a7       	std	Y+41, r26	; 0x29
    174a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6f a1       	ldd	r22, Y+39	; 0x27
    174e:	78 a5       	ldd	r23, Y+40	; 0x28
    1750:	89 a5       	ldd	r24, Y+41	; 0x29
    1752:	9a a5       	ldd	r25, Y+42	; 0x2a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e4       	ldi	r19, 0x40	; 64
    1758:	4c e1       	ldi	r20, 0x1C	; 28
    175a:	55 e4       	ldi	r21, 0x45	; 69
    175c:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8b a3       	std	Y+35, r24	; 0x23
    1766:	9c a3       	std	Y+36, r25	; 0x24
    1768:	ad a3       	std	Y+37, r26	; 0x25
    176a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <greenside+0x1b6>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
    178c:	3f c0       	rjmp	.+126    	; 0x180c <greenside+0x234>
	else if (__tmp > 65535)
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <greenside+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <greenside+0x216>
    17d0:	8a ef       	ldi	r24, 0xFA	; 250
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	98 a3       	std	Y+32, r25	; 0x20
    17d6:	8f 8f       	std	Y+31, r24	; 0x1f
    17d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17da:	98 a1       	ldd	r25, Y+32	; 0x20
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <greenside+0x204>
    17e0:	98 a3       	std	Y+32, r25	; 0x20
    17e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <greenside+0x1f8>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <greenside+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6b a1       	ldd	r22, Y+35	; 0x23
    17fa:	7c a1       	ldd	r23, Y+36	; 0x24
    17fc:	8d a1       	ldd	r24, Y+37	; 0x25
    17fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1800:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9a a3       	std	Y+34, r25	; 0x22
    180a:	89 a3       	std	Y+33, r24	; 0x21
    180c:	89 a1       	ldd	r24, Y+33	; 0x21
    180e:	9a a1       	ldd	r25, Y+34	; 0x22
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
    1814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <greenside+0x240>
    181c:	9e 8f       	std	Y+30, r25	; 0x1e
    181e:	8d 8f       	std	Y+29, r24	; 0x1d
    1820:	8c ad       	ldd	r24, Y+60	; 0x3c
    1822:	48 2f       	mov	r20, r24
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	ca 01       	movw	r24, r20
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	9c 01       	movw	r18, r24
    182e:	22 0f       	add	r18, r18
    1830:	33 1f       	adc	r19, r19
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	84 0f       	add	r24, r20
    183c:	95 1f       	adc	r25, r21
    183e:	fc 01       	movw	r30, r24
    1840:	e4 5e       	subi	r30, 0xE4	; 228
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	01 90       	ld	r0, Z+
    1846:	f0 81       	ld	r31, Z
    1848:	e0 2d       	mov	r30, r0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	09 95       	icall
    1854:	88 23       	and	r24, r24
    1856:	09 f0       	breq	.+2      	; 0x185a <greenside+0x282>
    1858:	71 cf       	rjmp	.-286    	; 0x173c <greenside+0x164>
					_delay_ms(100);
					//next_position = current_position;
					active_state = ROBOT_STATE_TACTIC_ONE;
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	89 af       	std	Y+57, r24	; 0x39
    185e:	df ce       	rjmp	.-578    	; 0x161e <greenside+0x46>
					break;
				}
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1860:	8b ad       	ldd	r24, Y+59	; 0x3b
    1862:	8c af       	std	Y+60, r24	; 0x3c
    1864:	4a c1       	rjmp	.+660    	; 0x1afa <greenside+0x522>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_one_positions[current_position].point), green_tactic_one_positions[current_position].speed,
    1866:	8c ad       	ldd	r24, Y+60	; 0x3c
    1868:	48 2f       	mov	r20, r24
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	ca 01       	movw	r24, r20
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	9c 01       	movw	r18, r24
    1874:	22 0f       	add	r18, r18
    1876:	33 1f       	adc	r19, r19
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	84 0f       	add	r24, r20
    1882:	95 1f       	adc	r25, r21
    1884:	8d 5e       	subi	r24, 0xED	; 237
    1886:	9e 4f       	sbci	r25, 0xFE	; 254
    1888:	bc 01       	movw	r22, r24
    188a:	8c ad       	ldd	r24, Y+60	; 0x3c
    188c:	48 2f       	mov	r20, r24
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	ca 01       	movw	r24, r20
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	9c 01       	movw	r18, r24
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	84 0f       	add	r24, r20
    18a6:	95 1f       	adc	r25, r21
    18a8:	fc 01       	movw	r30, r24
    18aa:	e6 5e       	subi	r30, 0xE6	; 230
    18ac:	fe 4f       	sbci	r31, 0xFE	; 254
    18ae:	a0 81       	ld	r26, Z
    18b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    18b2:	48 2f       	mov	r20, r24
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	ca 01       	movw	r24, r20
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	9c 01       	movw	r18, r24
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	22 0f       	add	r18, r18
    18c4:	33 1f       	adc	r19, r19
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	84 0f       	add	r24, r20
    18cc:	95 1f       	adc	r25, r21
    18ce:	fc 01       	movw	r30, r24
    18d0:	e5 5e       	subi	r30, 0xE5	; 229
    18d2:	fe 4f       	sbci	r31, 0xFE	; 254
    18d4:	80 81       	ld	r24, Z
    18d6:	b8 2f       	mov	r27, r24
    18d8:	8c ad       	ldd	r24, Y+60	; 0x3c
    18da:	48 2f       	mov	r20, r24
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	ca 01       	movw	r24, r20
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	9c 01       	movw	r18, r24
    18e6:	22 0f       	add	r18, r18
    18e8:	33 1f       	adc	r19, r19
    18ea:	22 0f       	add	r18, r18
    18ec:	33 1f       	adc	r19, r19
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	84 0f       	add	r24, r20
    18f4:	95 1f       	adc	r25, r21
    18f6:	fc 01       	movw	r30, r24
    18f8:	e4 5e       	subi	r30, 0xE4	; 228
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	cb 01       	movw	r24, r22
    1902:	6a 2f       	mov	r22, r26
    1904:	4b 2f       	mov	r20, r27
    1906:	2f d3       	rcall	.+1630   	; 0x1f66 <odometry_move_to_position>
    1908:	8a af       	std	Y+58, r24	; 0x3a
					green_tactic_one_positions[current_position].direction,green_tactic_one_positions[current_position].callback);
		
					if(odometry_status == ODOMETRY_FAIL)
    190a:	8a ad       	ldd	r24, Y+58	; 0x3a
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	09 f4       	brne	.+2      	; 0x1912 <greenside+0x33a>
    1910:	86 ce       	rjmp	.-756    	; 0x161e <greenside+0x46>
					{
						break;
					}
					if(current_position == 0)
    1912:	8c ad       	ldd	r24, Y+60	; 0x3c
    1914:	88 23       	and	r24, r24
    1916:	09 f0       	breq	.+2      	; 0x191a <greenside+0x342>
    1918:	73 c0       	rjmp	.+230    	; 0x1a00 <greenside+0x428>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e8       	ldi	r25, 0x80	; 128
    191e:	ab e3       	ldi	r26, 0x3B	; 59
    1920:	b5 e4       	ldi	r27, 0x45	; 69
    1922:	89 8f       	std	Y+25, r24	; 0x19
    1924:	9a 8f       	std	Y+26, r25	; 0x1a
    1926:	ab 8f       	std	Y+27, r26	; 0x1b
    1928:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e4       	ldi	r19, 0x40	; 64
    1936:	4c e1       	ldi	r20, 0x1C	; 28
    1938:	55 e4       	ldi	r21, 0x45	; 69
    193a:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 8b       	std	Y+21, r24	; 0x15
    1944:	9e 8b       	std	Y+22, r25	; 0x16
    1946:	af 8b       	std	Y+23, r26	; 0x17
    1948:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <greenside+0x394>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <greenside+0x412>
	else if (__tmp > 65535)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <greenside+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <greenside+0x3f4>
    19ae:	8a ef       	ldi	r24, 0xFA	; 250
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9a 8b       	std	Y+18, r25	; 0x12
    19b4:	89 8b       	std	Y+17, r24	; 0x11
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <greenside+0x3e2>
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <greenside+0x3d6>
    19d4:	8b c0       	rjmp	.+278    	; 0x1aec <greenside+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	98 8b       	std	Y+16, r25	; 0x10
    19f0:	8f 87       	std	Y+15, r24	; 0x0f
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	98 89       	ldd	r25, Y+16	; 0x10
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <greenside+0x41e>
    19fa:	98 8b       	std	Y+16, r25	; 0x10
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
    19fe:	76 c0       	rjmp	.+236    	; 0x1aec <greenside+0x514>
					{
						_delay_ms(3000);
					}
					else if(current_position == 1)
    1a00:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <greenside+0x430>
    1a06:	72 c0       	rjmp	.+228    	; 0x1aec <greenside+0x514>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e8       	ldi	r25, 0x80	; 128
    1a0c:	ab eb       	ldi	r26, 0xBB	; 187
    1a0e:	b4 e4       	ldi	r27, 0x44	; 68
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e4       	ldi	r19, 0x40	; 64
    1a24:	4c e1       	ldi	r20, 0x1C	; 28
    1a26:	55 e4       	ldi	r21, 0x45	; 69
    1a28:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <greenside+0x482>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <greenside+0x500>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <greenside+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <greenside+0x4e2>
    1a9c:	8a ef       	ldi	r24, 0xFA	; 250
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <greenside+0x4d0>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <greenside+0x4c4>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <greenside+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <greenside+0x50c>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(1500);
					}
					if(current_position == 2)
    1aec:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aee:	82 30       	cpi	r24, 0x02	; 2
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <greenside+0x51c>
    1af2:	ff cf       	rjmp	.-2      	; 0x1af2 <greenside+0x51a>
					//next_position = current_position;
					active_state = ROBOT_STATE_TACTIC_ONE;
					break;
				}
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1af4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	8c af       	std	Y+60, r24	; 0x3c
    1afa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <greenside+0x52a>
    1b00:	b2 ce       	rjmp	.-668    	; 0x1866 <greenside+0x28e>
    1b02:	8d cd       	rjmp	.-1254   	; 0x161e <greenside+0x46>

00001b04 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	67 97       	sbiw	r28, 0x17	; 23
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1b1a:	90 91 8a 01 	lds	r25, 0x018A
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	89 17       	cp	r24, r25
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <odometry_set_speed+0x22>
    1b24:	81 c0       	rjmp	.+258    	; 0x1c28 <odometry_set_speed+0x124>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1b26:	86 e5       	ldi	r24, 0x56	; 86
    1b28:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2c:	88 8b       	std	Y+16, r24	; 0x10
    1b2e:	72 c0       	rjmp	.+228    	; 0x1c14 <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a8 e4       	ldi	r26, 0x48	; 72
    1b36:	b2 e4       	ldi	r27, 0x42	; 66
    1b38:	8b 87       	std	Y+11, r24	; 0x0b
    1b3a:	9c 87       	std	Y+12, r25	; 0x0c
    1b3c:	ad 87       	std	Y+13, r26	; 0x0d
    1b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e4       	ldi	r19, 0x40	; 64
    1b4c:	4c e1       	ldi	r20, 0x1C	; 28
    1b4e:	55 e4       	ldi	r21, 0x45	; 69
    1b50:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8f 83       	std	Y+7, r24	; 0x07
    1b5a:	98 87       	std	Y+8, r25	; 0x08
    1b5c:	a9 87       	std	Y+9, r26	; 0x09
    1b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <odometry_set_speed+0x7e>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <odometry_set_speed+0xde>
    1bc4:	8a ef       	ldi	r24, 0xFA	; 250
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <odometry_set_speed+0xcc>
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <odometry_set_speed+0xc0>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <odometry_set_speed+0x108>
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	ce 01       	movw	r24, r28
    1c16:	0f 96       	adiw	r24, 0x0f	; 15
    1c18:	63 ec       	ldi	r22, 0xC3	; 195
    1c1a:	f6 d9       	rcall	.-3092   	; 0x1008 <CAN_Write>
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <odometry_set_speed+0x11e>
    1c20:	87 cf       	rjmp	.-242    	; 0x1b30 <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    1c22:	8f 89       	ldd	r24, Y+23	; 0x17
    1c24:	80 93 8a 01 	sts	0x018A, r24
}
    1c28:	67 96       	adiw	r28, 0x17	; 23
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <odometry_query_position>:

static void odometry_query_position(void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	66 97       	sbiw	r28, 0x16	; 22
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1c4e:	80 e5       	ldi	r24, 0x50	; 80
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
    1c52:	72 c0       	rjmp	.+228    	; 0x1d38 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a8 e4       	ldi	r26, 0x48	; 72
    1c5a:	b2 e4       	ldi	r27, 0x42	; 66
    1c5c:	8b 87       	std	Y+11, r24	; 0x0b
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	ad 87       	std	Y+13, r26	; 0x0d
    1c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e4       	ldi	r19, 0x40	; 64
    1c70:	4c e1       	ldi	r20, 0x1C	; 28
    1c72:	55 e4       	ldi	r21, 0x45	; 69
    1c74:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8f 83       	std	Y+7, r24	; 0x07
    1c7e:	98 87       	std	Y+8, r25	; 0x08
    1c80:	a9 87       	std	Y+9, r26	; 0x09
    1c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <odometry_query_position+0x6c>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	3f c0       	rjmp	.+126    	; 0x1d24 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	4c f5       	brge	.+82     	; 0x1d10 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <odometry_query_position+0xcc>
    1ce8:	8a ef       	ldi	r24, 0xFA	; 250
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <odometry_query_position+0xba>
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <odometry_query_position+0xae>
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <odometry_query_position+0xf6>
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0f 96       	adiw	r24, 0x0f	; 15
    1d3c:	63 ec       	ldi	r22, 0xC3	; 195
    1d3e:	64 d9       	rcall	.-3384   	; 0x1008 <CAN_Write>
    1d40:	88 23       	and	r24, r24
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <odometry_query_position+0x10c>
    1d44:	87 cf       	rjmp	.-242    	; 0x1c54 <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1d46:	ce 01       	movw	r24, r28
    1d48:	0f 96       	adiw	r24, 0x0f	; 15
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	e5 d8       	rcall	.-3638   	; 0xf18 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d50:	80 93 12 01 	sts	0x0112, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	38 2f       	mov	r19, r24
    1d5c:	22 27       	eor	r18, r18
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	82 2b       	or	r24, r18
    1d66:	93 2b       	or	r25, r19
    1d68:	90 93 0d 01 	sts	0x010D, r25
    1d6c:	80 93 0c 01 	sts	0x010C, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1d70:	8a 89       	ldd	r24, Y+18	; 0x12
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	38 2f       	mov	r19, r24
    1d78:	22 27       	eor	r18, r18
    1d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	82 2b       	or	r24, r18
    1d82:	93 2b       	or	r25, r19
    1d84:	90 93 0f 01 	sts	0x010F, r25
    1d88:	80 93 0e 01 	sts	0x010E, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1d8c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	38 2f       	mov	r19, r24
    1d94:	22 27       	eor	r18, r18
    1d96:	8d 89       	ldd	r24, Y+21	; 0x15
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	82 2b       	or	r24, r18
    1d9e:	93 2b       	or	r25, r19
    1da0:	90 93 11 01 	sts	0x0111, r25
    1da4:	80 93 10 01 	sts	0x0110, r24
}
    1da8:	66 96       	adiw	r28, 0x16	; 22
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	27 97       	sbiw	r28, 0x07	; 7
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1dd2:	d3 d5       	rcall	.+2982   	; 0x297a <system_get_system_time>
    1dd4:	aa 27       	eor	r26, r26
    1dd6:	97 fd       	sbrc	r25, 7
    1dd8:	a0 95       	com	r26
    1dda:	ba 2f       	mov	r27, r26
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	ab 83       	std	Y+3, r26	; 0x03
    1de2:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    1de4:	2a df       	rcall	.-428    	; 0x1c3a <odometry_query_position>
		//nije uso
		if(callback != NULL)
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	ab 81       	ldd	r26, Y+3	; 0x03
    1df4:	bc 81       	ldd	r27, Y+4	; 0x04
    1df6:	ed 81       	ldd	r30, Y+5	; 0x05
    1df8:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	09 95       	icall
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	8f 83       	std	Y+7, r24	; 0x07
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1e0a:	80 91 12 01 	lds	r24, 0x0112
    1e0e:	8d 34       	cpi	r24, 0x4D	; 77
    1e10:	49 f3       	breq	.-46     	; 0x1de4 <odometry_wait_until_done+0x2a>
    1e12:	80 91 12 01 	lds	r24, 0x0112
    1e16:	82 35       	cpi	r24, 0x52	; 82
    1e18:	29 f3       	breq	.-54     	; 0x1de4 <odometry_wait_until_done+0x2a>
	
	return ODOMETRY_SUCCESS;
    1e1a:	1f 82       	std	Y+7, r1	; 0x07
    1e1c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1e1e:	27 96       	adiw	r28, 0x07	; 7
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <stop>:

void stop(int8_t type)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	67 97       	sbiw	r28, 0x17	; 23
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1e46:	8f 89       	ldd	r24, Y+23	; 0x17
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
    1e4a:	72 c0       	rjmp	.+228    	; 0x1f30 <stop+0x100>

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a8 e4       	ldi	r26, 0x48	; 72
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	8b 87       	std	Y+11, r24	; 0x0b
    1e56:	9c 87       	std	Y+12, r25	; 0x0c
    1e58:	ad 87       	std	Y+13, r26	; 0x0d
    1e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e4       	ldi	r19, 0x40	; 64
    1e68:	4c e1       	ldi	r20, 0x1C	; 28
    1e6a:	55 e4       	ldi	r21, 0x45	; 69
    1e6c:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8f 83       	std	Y+7, r24	; 0x07
    1e76:	98 87       	std	Y+8, r25	; 0x08
    1e78:	a9 87       	std	Y+9, r26	; 0x09
    1e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7e:	78 85       	ldd	r23, Y+8	; 0x08
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <__cmpsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <stop+0x6e>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <stop+0xec>
	else if (__tmp > 65535)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <stop+0xce>
    1ee0:	8a ef       	ldi	r24, 0xFA	; 250
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <stop+0xbc>
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <stop+0xb0>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0a:	78 85       	ldd	r23, Y+8	; 0x08
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f10:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <stop+0xf8>
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	ce 01       	movw	r24, r28
    1f32:	0f 96       	adiw	r24, 0x0f	; 15
    1f34:	63 ec       	ldi	r22, 0xC3	; 195
    1f36:	68 d8       	rcall	.-3888   	; 0x1008 <CAN_Write>
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <stop+0x10e>
    1f3c:	87 cf       	rjmp	.-242    	; 0x1e4c <stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1f3e:	7d de       	rcall	.-774    	; 0x1c3a <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1f40:	80 91 12 01 	lds	r24, 0x0112
    1f44:	8d 34       	cpi	r24, 0x4D	; 77
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <stop+0x11a>
    1f48:	7e cf       	rjmp	.-260    	; 0x1e46 <stop+0x16>
    1f4a:	80 91 12 01 	lds	r24, 0x0112
    1f4e:	82 35       	cpi	r24, 0x52	; 82
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <stop+0x124>
    1f52:	79 cf       	rjmp	.-270    	; 0x1e46 <stop+0x16>
}
    1f54:	67 96       	adiw	r28, 0x17	; 23
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <odometry_move_to_position>:
		
	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	6c 97       	sbiw	r28, 0x1c	; 28
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	98 8f       	std	Y+24, r25	; 0x18
    1f7c:	8f 8b       	std	Y+23, r24	; 0x17
    1f7e:	69 8f       	std	Y+25, r22	; 0x19
    1f80:	4a 8f       	std	Y+26, r20	; 0x1a
    1f82:	3c 8f       	std	Y+28, r19	; 0x1c
    1f84:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1f86:	89 8d       	ldd	r24, Y+25	; 0x19
    1f88:	bd dd       	rcall	.-1158   	; 0x1b04 <odometry_set_speed>

	buffer[0] = 'G';
    1f8a:	87 e4       	ldi	r24, 0x47	; 71
    1f8c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1f8e:	ef 89       	ldd	r30, Y+23	; 0x17
    1f90:	f8 8d       	ldd	r31, Y+24	; 0x18
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	89 2f       	mov	r24, r25
    1f98:	99 0f       	add	r25, r25
    1f9a:	99 0b       	sbc	r25, r25
    1f9c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1f9e:	ef 89       	ldd	r30, Y+23	; 0x17
    1fa0:	f8 8d       	ldd	r31, Y+24	; 0x18
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1fa8:	ef 89       	ldd	r30, Y+23	; 0x17
    1faa:	f8 8d       	ldd	r31, Y+24	; 0x18
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	99 0f       	add	r25, r25
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1fb8:	ef 89       	ldd	r30, Y+23	; 0x17
    1fba:	f8 8d       	ldd	r31, Y+24	; 0x18
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1fc2:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    1fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc6:	81 95       	neg	r24
    1fc8:	8d 8b       	std	Y+21, r24	; 0x15
    1fca:	6f c0       	rjmp	.+222    	; 0x20aa <odometry_move_to_position+0x144>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a8 e4       	ldi	r26, 0x48	; 72
    1fd2:	b2 e4       	ldi	r27, 0x42	; 66
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e4       	ldi	r19, 0x40	; 64
    1fe8:	4c e1       	ldi	r20, 0x1C	; 28
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	85 d7       	rcall	.+3850   	; 0x2f18 <__cmpsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <odometry_move_to_position+0xb6>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	3d c0       	rjmp	.+122    	; 0x2096 <odometry_move_to_position+0x130>
	else if (__tmp > 65535)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__gesf2>
    2030:	18 16       	cp	r1, r24
    2032:	44 f5       	brge	.+80     	; 0x2084 <odometry_move_to_position+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	d4 d7       	rcall	.+4008   	; 0x2ffa <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <odometry_move_to_position+0x114>
    205c:	8a ef       	ldi	r24, 0xFA	; 250
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <odometry_move_to_position+0x102>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <odometry_move_to_position+0xf6>
    2082:	13 c0       	rjmp	.+38     	; 0x20aa <odometry_move_to_position+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	b6 d7       	rcall	.+3948   	; 0x2ffa <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <odometry_move_to_position+0x13c>
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	ce 01       	movw	r24, r28
    20ac:	0f 96       	adiw	r24, 0x0f	; 15
    20ae:	63 ec       	ldi	r22, 0xC3	; 195
    20b0:	0e 94 04 08 	call	0x1008	; 0x1008 <CAN_Write>
    20b4:	88 23       	and	r24, r24
    20b6:	09 f0       	breq	.+2      	; 0x20ba <odometry_move_to_position+0x154>
    20b8:	89 cf       	rjmp	.-238    	; 0x1fcc <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20be:	7d de       	rcall	.-774    	; 0x1dba <odometry_wait_until_done>
}
    20c0:	6c 96       	adiw	r28, 0x1c	; 28
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	69 97       	sbiw	r28, 0x19	; 25
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	99 8f       	std	Y+25, r25	; 0x19
    20e8:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    20ea:	89 e4       	ldi	r24, 0x49	; 73
    20ec:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    20ee:	e8 8d       	ldd	r30, Y+24	; 0x18
    20f0:	f9 8d       	ldd	r31, Y+25	; 0x19
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	89 2f       	mov	r24, r25
    20f8:	99 0f       	add	r25, r25
    20fa:	99 0b       	sbc	r25, r25
    20fc:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    20fe:	e8 8d       	ldd	r30, Y+24	; 0x18
    2100:	f9 8d       	ldd	r31, Y+25	; 0x19
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    2108:	e8 8d       	ldd	r30, Y+24	; 0x18
    210a:	f9 8d       	ldd	r31, Y+25	; 0x19
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	89 2f       	mov	r24, r25
    2112:	99 0f       	add	r25, r25
    2114:	99 0b       	sbc	r25, r25
    2116:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    2118:	e8 8d       	ldd	r30, Y+24	; 0x18
    211a:	f9 8d       	ldd	r31, Y+25	; 0x19
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    2122:	e8 8d       	ldd	r30, Y+24	; 0x18
    2124:	f9 8d       	ldd	r31, Y+25	; 0x19
    2126:	84 81       	ldd	r24, Z+4	; 0x04
    2128:	95 81       	ldd	r25, Z+5	; 0x05
    212a:	81 95       	neg	r24
    212c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	99 27       	eor	r25, r25
    2132:	87 fd       	sbrc	r24, 7
    2134:	90 95       	com	r25
    2136:	89 2f       	mov	r24, r25
    2138:	99 0f       	add	r25, r25
    213a:	99 0b       	sbc	r25, r25
    213c:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    213e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2140:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    2142:	e8 8d       	ldd	r30, Y+24	; 0x18
    2144:	f9 8d       	ldd	r31, Y+25	; 0x19
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	90 93 0d 01 	sts	0x010D, r25
    214e:	80 93 0c 01 	sts	0x010C, r24
	position.y	   = new_position->y;
    2152:	e8 8d       	ldd	r30, Y+24	; 0x18
    2154:	f9 8d       	ldd	r31, Y+25	; 0x19
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	90 93 0f 01 	sts	0x010F, r25
    215e:	80 93 0e 01 	sts	0x010E, r24
	position.angle = -1 * new_position->angle;
    2162:	e8 8d       	ldd	r30, Y+24	; 0x18
    2164:	f9 8d       	ldd	r31, Y+25	; 0x19
    2166:	84 81       	ldd	r24, Z+4	; 0x04
    2168:	95 81       	ldd	r25, Z+5	; 0x05
    216a:	90 95       	com	r25
    216c:	81 95       	neg	r24
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	90 93 11 01 	sts	0x0111, r25
    2174:	80 93 10 01 	sts	0x0110, r24
    2178:	6d c0       	rjmp	.+218    	; 0x2254 <odometry_set_position+0x182>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a8 e4       	ldi	r26, 0x48	; 72
    2180:	b2 e4       	ldi	r27, 0x42	; 66
    2182:	8b 87       	std	Y+11, r24	; 0x0b
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	ad 87       	std	Y+13, r26	; 0x0d
    2188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e4       	ldi	r19, 0x40	; 64
    2196:	4c e1       	ldi	r20, 0x1C	; 28
    2198:	55 e4       	ldi	r21, 0x45	; 69
    219a:	0e 94 df 18 	call	0x31be	; 0x31be <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8f 83       	std	Y+7, r24	; 0x07
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	a9 87       	std	Y+9, r26	; 0x09
    21a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	ae d6       	rcall	.+3420   	; 0x2f18 <__cmpsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <odometry_set_position+0xf8>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	3b c0       	rjmp	.+118    	; 0x2240 <odometry_set_position+0x16e>
	else if (__tmp > 65535)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	ed d7       	rcall	.+4058   	; 0x31b6 <__gesf2>
    21dc:	18 16       	cp	r1, r24
    21de:	3c f5       	brge	.+78     	; 0x222e <odometry_set_position+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e2       	ldi	r20, 0x20	; 32
    21ee:	51 e4       	ldi	r21, 0x41	; 65
    21f0:	e6 d7       	rcall	.+4044   	; 0x31be <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	ff d6       	rcall	.+3582   	; 0x2ffa <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <odometry_set_position+0x152>
    2206:	8a ef       	ldi	r24, 0xFA	; 250
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <odometry_set_position+0x140>
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <odometry_set_position+0x134>
    222c:	13 c0       	rjmp	.+38     	; 0x2254 <odometry_set_position+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	e1 d6       	rcall	.+3522   	; 0x2ffa <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <odometry_set_position+0x17a>
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	ce 01       	movw	r24, r28
    2256:	40 96       	adiw	r24, 0x10	; 16
    2258:	63 ec       	ldi	r22, 0xC3	; 195
    225a:	0e 94 04 08 	call	0x1008	; 0x1008 <CAN_Write>
    225e:	88 23       	and	r24, r24
    2260:	09 f0       	breq	.+2      	; 0x2264 <odometry_set_position+0x192>
    2262:	8b cf       	rjmp	.-234    	; 0x217a <odometry_set_position+0xa8>
		_delay_ms(50);
}
    2264:	69 96       	adiw	r28, 0x19	; 25
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <purple_detection_front>:
//																		//
//////////////////////////////////////////////////////////////////////////


char purple_detection_front(uint32_t start_time)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <purple_detection_front+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <purple_detection_front+0x8>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <purple_detection_front+0xa>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	6a 83       	std	Y+2, r22	; 0x02
    2286:	7b 83       	std	Y+3, r23	; 0x03
    2288:	8c 83       	std	Y+4, r24	; 0x04
    228a:	9d 83       	std	Y+5, r25	; 0x05
	signed char i;
	i = check_front_sensors(FRONT_ALL);
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	b0 d4       	rcall	.+2400   	; 0x2bf0 <check_front_sensors>
    2290:	89 83       	std	Y+1, r24	; 0x01
	if(i == DETECTED)
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	31 f4       	brne	.+12     	; 0x22a4 <purple_detection_front+0x2e>
	{
		stop(HARD_STOP);
    2298:	83 e5       	ldi	r24, 0x53	; 83
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	c9 dd       	rcall	.-1134   	; 0x1e30 <stop>
		return 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	8e 83       	std	Y+6, r24	; 0x06
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <purple_detection_front+0x30>
	}
	return 0;
    22a4:	1e 82       	std	Y+6, r1	; 0x06
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    22a8:	26 96       	adiw	r28, 0x06	; 6
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <purpleside>:
	{{280,90},20,FORWARD,NULL},						//POSITION 1			MOVE BACK INFRONT OF THE BLOCKS
	{{280,190},20,BACKWARD,NULL}

};
void purpleside(void)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	c5 54       	subi	r28, 0x45	; 69
    22c4:	d0 40       	sbci	r29, 0x00	; 0
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    22d0:	1c ae       	std	Y+60, r1	; 0x3c
	uint8_t next_position = 0;
    22d2:	1b ae       	std	Y+59, r1	; 0x3b
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    22d4:	82 e0       	ldi	r24, 0x02	; 2
    22d6:	89 af       	std	Y+57, r24	; 0x39
	
	starting_position.x		= 180;
    22d8:	84 eb       	ldi	r24, 0xB4	; 180
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9e af       	std	Y+62, r25	; 0x3e
    22de:	8d af       	std	Y+61, r24	; 0x3d
	starting_position.y		= 680;
    22e0:	88 ea       	ldi	r24, 0xA8	; 168
    22e2:	92 e0       	ldi	r25, 0x02	; 2
    22e4:	fe 01       	movw	r30, r28
    22e6:	ff 96       	adiw	r30, 0x3f	; 63
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
	starting_position.angle = -90;
    22ec:	fe 01       	movw	r30, r28
    22ee:	ef 5b       	subi	r30, 0xBF	; 191
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	86 ea       	ldi	r24, 0xA6	; 166
    22f4:	9f ef       	ldi	r25, 0xFF	; 255
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
	
	odometry_set_position(&starting_position);
    22fa:	ce 01       	movw	r24, r28
    22fc:	cd 96       	adiw	r24, 0x3d	; 61
    22fe:	e9 de       	rcall	.-558    	; 0x20d2 <odometry_set_position>
	
	while(1)
	{
		switch(active_state)
    2300:	89 ad       	ldd	r24, Y+57	; 0x39
    2302:	28 2f       	mov	r18, r24
    2304:	33 27       	eor	r19, r19
    2306:	27 fd       	sbrc	r18, 7
    2308:	30 95       	com	r19
    230a:	26 96       	adiw	r28, 0x06	; 6
    230c:	3f af       	std	Y+63, r19	; 0x3f
    230e:	2e af       	std	Y+62, r18	; 0x3e
    2310:	26 97       	sbiw	r28, 0x06	; 6
    2312:	26 96       	adiw	r28, 0x06	; 6
    2314:	8e ad       	ldd	r24, Y+62	; 0x3e
    2316:	9f ad       	ldd	r25, Y+63	; 0x3f
    2318:	26 97       	sbiw	r28, 0x06	; 6
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	49 f0       	breq	.+18     	; 0x2330 <purpleside+0x76>
    231e:	26 96       	adiw	r28, 0x06	; 6
    2320:	2e ad       	ldd	r18, Y+62	; 0x3e
    2322:	3f ad       	ldd	r19, Y+63	; 0x3f
    2324:	26 97       	sbiw	r28, 0x06	; 6
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <purpleside+0x74>
    232c:	fe c0       	rjmp	.+508    	; 0x252a <purpleside+0x270>
    232e:	e8 cf       	rjmp	.-48     	; 0x2300 <purpleside+0x46>
		{
			case ROBOT_STATE_COLLISION:
				if(current_position == 0)
    2330:	8c ad       	ldd	r24, Y+60	; 0x3c
    2332:	88 23       	and	r24, r24
    2334:	09 f0       	breq	.+2      	; 0x2338 <purpleside+0x7e>
    2336:	f9 c0       	rjmp	.+498    	; 0x252a <purpleside+0x270>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a8 e4       	ldi	r26, 0x48	; 72
    233e:	b3 e4       	ldi	r27, 0x43	; 67
    2340:	8d ab       	std	Y+53, r24	; 0x35
    2342:	9e ab       	std	Y+54, r25	; 0x36
    2344:	af ab       	std	Y+55, r26	; 0x37
    2346:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e4       	ldi	r19, 0x40	; 64
    2354:	4c e1       	ldi	r20, 0x1C	; 28
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	32 d7       	rcall	.+3684   	; 0x31be <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	89 ab       	std	Y+49, r24	; 0x31
    2360:	9a ab       	std	Y+50, r25	; 0x32
    2362:	ab ab       	std	Y+51, r26	; 0x33
    2364:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	d0 d5       	rcall	.+2976   	; 0x2f18 <__cmpsf2>
    2378:	88 23       	and	r24, r24
    237a:	2c f4       	brge	.+10     	; 0x2386 <purpleside+0xcc>
		__ticks = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
    2384:	3b c0       	rjmp	.+118    	; 0x23fc <purpleside+0x142>
	else if (__tmp > 65535)
    2386:	69 a9       	ldd	r22, Y+49	; 0x31
    2388:	7a a9       	ldd	r23, Y+50	; 0x32
    238a:	8b a9       	ldd	r24, Y+51	; 0x33
    238c:	9c a9       	ldd	r25, Y+52	; 0x34
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0f d7       	rcall	.+3614   	; 0x31b6 <__gesf2>
    2398:	18 16       	cp	r1, r24
    239a:	3c f5       	brge	.+78     	; 0x23ea <purpleside+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6d a9       	ldd	r22, Y+53	; 0x35
    239e:	7e a9       	ldd	r23, Y+54	; 0x36
    23a0:	8f a9       	ldd	r24, Y+55	; 0x37
    23a2:	98 ad       	ldd	r25, Y+56	; 0x38
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	08 d7       	rcall	.+3600   	; 0x31be <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	21 d6       	rcall	.+3138   	; 0x2ffa <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	98 ab       	std	Y+48, r25	; 0x30
    23be:	8f a7       	std	Y+47, r24	; 0x2f
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <purpleside+0x126>
    23c2:	8a ef       	ldi	r24, 0xFA	; 250
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9e a7       	std	Y+46, r25	; 0x2e
    23c8:	8d a7       	std	Y+45, r24	; 0x2d
    23ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    23cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <purpleside+0x114>
    23d2:	9e a7       	std	Y+46, r25	; 0x2e
    23d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d8:	98 a9       	ldd	r25, Y+48	; 0x30
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	98 ab       	std	Y+48, r25	; 0x30
    23de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e2:	98 a9       	ldd	r25, Y+48	; 0x30
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <purpleside+0x108>
    23e8:	80 c0       	rjmp	.+256    	; 0x24ea <purpleside+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	69 a9       	ldd	r22, Y+49	; 0x31
    23ec:	7a a9       	ldd	r23, Y+50	; 0x32
    23ee:	8b a9       	ldd	r24, Y+51	; 0x33
    23f0:	9c a9       	ldd	r25, Y+52	; 0x34
    23f2:	03 d6       	rcall	.+3078   	; 0x2ffa <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	98 ab       	std	Y+48, r25	; 0x30
    23fa:	8f a7       	std	Y+47, r24	; 0x2f
    23fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2400:	9c a7       	std	Y+44, r25	; 0x2c
    2402:	8b a7       	std	Y+43, r24	; 0x2b
    2404:	8b a5       	ldd	r24, Y+43	; 0x2b
    2406:	9c a5       	ldd	r25, Y+44	; 0x2c
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <purpleside+0x14e>
    240c:	9c a7       	std	Y+44, r25	; 0x2c
    240e:	8b a7       	std	Y+43, r24	; 0x2b
    2410:	6c c0       	rjmp	.+216    	; 0x24ea <purpleside+0x230>
				{
					_delay_ms(200);
					while(purple_tactic_one_positions[current_position].callback(0) != 0)
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a8 ec       	ldi	r26, 0xC8	; 200
    2418:	b2 e4       	ldi	r27, 0x42	; 66
    241a:	8f a3       	std	Y+39, r24	; 0x27
    241c:	98 a7       	std	Y+40, r25	; 0x28
    241e:	a9 a7       	std	Y+41, r26	; 0x29
    2420:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6f a1       	ldd	r22, Y+39	; 0x27
    2424:	78 a5       	ldd	r23, Y+40	; 0x28
    2426:	89 a5       	ldd	r24, Y+41	; 0x29
    2428:	9a a5       	ldd	r25, Y+42	; 0x2a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e4       	ldi	r19, 0x40	; 64
    242e:	4c e1       	ldi	r20, 0x1C	; 28
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	c5 d6       	rcall	.+3466   	; 0x31be <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8b a3       	std	Y+35, r24	; 0x23
    243a:	9c a3       	std	Y+36, r25	; 0x24
    243c:	ad a3       	std	Y+37, r26	; 0x25
    243e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2440:	6b a1       	ldd	r22, Y+35	; 0x23
    2442:	7c a1       	ldd	r23, Y+36	; 0x24
    2444:	8d a1       	ldd	r24, Y+37	; 0x25
    2446:	9e a1       	ldd	r25, Y+38	; 0x26
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	63 d5       	rcall	.+2758   	; 0x2f18 <__cmpsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <purpleside+0x1a6>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	3b c0       	rjmp	.+118    	; 0x24d6 <purpleside+0x21c>
	else if (__tmp > 65535)
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	a2 d6       	rcall	.+3396   	; 0x31b6 <__gesf2>
    2472:	18 16       	cp	r1, r24
    2474:	3c f5       	brge	.+78     	; 0x24c4 <purpleside+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	6f a1       	ldd	r22, Y+39	; 0x27
    2478:	78 a5       	ldd	r23, Y+40	; 0x28
    247a:	89 a5       	ldd	r24, Y+41	; 0x29
    247c:	9a a5       	ldd	r25, Y+42	; 0x2a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	9b d6       	rcall	.+3382   	; 0x31be <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	b4 d5       	rcall	.+2920   	; 0x2ffa <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9a a3       	std	Y+34, r25	; 0x22
    2498:	89 a3       	std	Y+33, r24	; 0x21
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <purpleside+0x200>
    249c:	8a ef       	ldi	r24, 0xFA	; 250
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 a3       	std	Y+32, r25	; 0x20
    24a2:	8f 8f       	std	Y+31, r24	; 0x1f
    24a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a6:	98 a1       	ldd	r25, Y+32	; 0x20
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <purpleside+0x1ee>
    24ac:	98 a3       	std	Y+32, r25	; 0x20
    24ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	89 a1       	ldd	r24, Y+33	; 0x21
    24b2:	9a a1       	ldd	r25, Y+34	; 0x22
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	89 a1       	ldd	r24, Y+33	; 0x21
    24bc:	9a a1       	ldd	r25, Y+34	; 0x22
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <purpleside+0x1e2>
    24c2:	13 c0       	rjmp	.+38     	; 0x24ea <purpleside+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6b a1       	ldd	r22, Y+35	; 0x23
    24c6:	7c a1       	ldd	r23, Y+36	; 0x24
    24c8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ca:	9e a1       	ldd	r25, Y+38	; 0x26
    24cc:	96 d5       	rcall	.+2860   	; 0x2ffa <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	89 a1       	ldd	r24, Y+33	; 0x21
    24d8:	9a a1       	ldd	r25, Y+34	; 0x22
    24da:	9e 8f       	std	Y+30, r25	; 0x1e
    24dc:	8d 8f       	std	Y+29, r24	; 0x1d
    24de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <purpleside+0x228>
    24e6:	9e 8f       	std	Y+30, r25	; 0x1e
    24e8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ea:	8c ad       	ldd	r24, Y+60	; 0x3c
    24ec:	48 2f       	mov	r20, r24
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	ca 01       	movw	r24, r20
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	9c 01       	movw	r18, r24
    24f8:	22 0f       	add	r18, r18
    24fa:	33 1f       	adc	r19, r19
    24fc:	22 0f       	add	r18, r18
    24fe:	33 1f       	adc	r19, r19
    2500:	82 0f       	add	r24, r18
    2502:	93 1f       	adc	r25, r19
    2504:	84 0f       	add	r24, r20
    2506:	95 1f       	adc	r25, r21
    2508:	fc 01       	movw	r30, r24
    250a:	e3 5c       	subi	r30, 0xC3	; 195
    250c:	fe 4f       	sbci	r31, 0xFE	; 254
    250e:	01 90       	ld	r0, Z+
    2510:	f0 81       	ld	r31, Z
    2512:	e0 2d       	mov	r30, r0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	09 95       	icall
    251e:	88 23       	and	r24, r24
    2520:	09 f0       	breq	.+2      	; 0x2524 <purpleside+0x26a>
    2522:	77 cf       	rjmp	.-274    	; 0x2412 <purpleside+0x158>
					_delay_ms(100);
					//next_position = current_position;
					active_state = ROBOT_STATE_TACTIC_ONE;
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	89 af       	std	Y+57, r24	; 0x39
    2528:	eb ce       	rjmp	.-554    	; 0x2300 <purpleside+0x46>
					break;
				}
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    252a:	8b ad       	ldd	r24, Y+59	; 0x3b
    252c:	8c af       	std	Y+60, r24	; 0x3c
    252e:	3e c1       	rjmp	.+636    	; 0x27ac <purpleside+0x4f2>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    2530:	8c ad       	ldd	r24, Y+60	; 0x3c
    2532:	48 2f       	mov	r20, r24
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	ca 01       	movw	r24, r20
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	9c 01       	movw	r18, r24
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	84 0f       	add	r24, r20
    254c:	95 1f       	adc	r25, r21
    254e:	8c 5c       	subi	r24, 0xCC	; 204
    2550:	9e 4f       	sbci	r25, 0xFE	; 254
    2552:	bc 01       	movw	r22, r24
    2554:	8c ad       	ldd	r24, Y+60	; 0x3c
    2556:	48 2f       	mov	r20, r24
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	ca 01       	movw	r24, r20
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	9c 01       	movw	r18, r24
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	22 0f       	add	r18, r18
    2568:	33 1f       	adc	r19, r19
    256a:	82 0f       	add	r24, r18
    256c:	93 1f       	adc	r25, r19
    256e:	84 0f       	add	r24, r20
    2570:	95 1f       	adc	r25, r21
    2572:	fc 01       	movw	r30, r24
    2574:	e5 5c       	subi	r30, 0xC5	; 197
    2576:	fe 4f       	sbci	r31, 0xFE	; 254
    2578:	a0 81       	ld	r26, Z
    257a:	8c ad       	ldd	r24, Y+60	; 0x3c
    257c:	48 2f       	mov	r20, r24
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	ca 01       	movw	r24, r20
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	9c 01       	movw	r18, r24
    2588:	22 0f       	add	r18, r18
    258a:	33 1f       	adc	r19, r19
    258c:	22 0f       	add	r18, r18
    258e:	33 1f       	adc	r19, r19
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	84 0f       	add	r24, r20
    2596:	95 1f       	adc	r25, r21
    2598:	fc 01       	movw	r30, r24
    259a:	e4 5c       	subi	r30, 0xC4	; 196
    259c:	fe 4f       	sbci	r31, 0xFE	; 254
    259e:	80 81       	ld	r24, Z
    25a0:	b8 2f       	mov	r27, r24
    25a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    25a4:	48 2f       	mov	r20, r24
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	ca 01       	movw	r24, r20
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	9c 01       	movw	r18, r24
    25b0:	22 0f       	add	r18, r18
    25b2:	33 1f       	adc	r19, r19
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	82 0f       	add	r24, r18
    25ba:	93 1f       	adc	r25, r19
    25bc:	84 0f       	add	r24, r20
    25be:	95 1f       	adc	r25, r21
    25c0:	fc 01       	movw	r30, r24
    25c2:	e3 5c       	subi	r30, 0xC3	; 195
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	20 81       	ld	r18, Z
    25c8:	31 81       	ldd	r19, Z+1	; 0x01
    25ca:	cb 01       	movw	r24, r22
    25cc:	6a 2f       	mov	r22, r26
    25ce:	4b 2f       	mov	r20, r27
    25d0:	ca dc       	rcall	.-1644   	; 0x1f66 <odometry_move_to_position>
    25d2:	8a af       	std	Y+58, r24	; 0x3a
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 

					if(odometry_status == ODOMETRY_FAIL)
    25d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <purpleside+0x322>
    25da:	92 ce       	rjmp	.-732    	; 0x2300 <purpleside+0x46>
					{
						break;
					}
					if(current_position == 0)
    25dc:	8c ad       	ldd	r24, Y+60	; 0x3c
    25de:	88 23       	and	r24, r24
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <purpleside+0x32a>
    25e2:	6d c0       	rjmp	.+218    	; 0x26be <purpleside+0x404>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e8       	ldi	r25, 0x80	; 128
    25e8:	ab e3       	ldi	r26, 0x3B	; 59
    25ea:	b5 e4       	ldi	r27, 0x45	; 69
    25ec:	89 8f       	std	Y+25, r24	; 0x19
    25ee:	9a 8f       	std	Y+26, r25	; 0x1a
    25f0:	ab 8f       	std	Y+27, r26	; 0x1b
    25f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	69 8d       	ldd	r22, Y+25	; 0x19
    25f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e4       	ldi	r19, 0x40	; 64
    2600:	4c e1       	ldi	r20, 0x1C	; 28
    2602:	55 e4       	ldi	r21, 0x45	; 69
    2604:	dc d5       	rcall	.+3000   	; 0x31be <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8d 8b       	std	Y+21, r24	; 0x15
    260c:	9e 8b       	std	Y+22, r25	; 0x16
    260e:	af 8b       	std	Y+23, r26	; 0x17
    2610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	7a d4       	rcall	.+2292   	; 0x2f18 <__cmpsf2>
    2624:	88 23       	and	r24, r24
    2626:	2c f4       	brge	.+10     	; 0x2632 <purpleside+0x378>
		__ticks = 1;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	3b c0       	rjmp	.+118    	; 0x26a8 <purpleside+0x3ee>
	else if (__tmp > 65535)
    2632:	6d 89       	ldd	r22, Y+21	; 0x15
    2634:	7e 89       	ldd	r23, Y+22	; 0x16
    2636:	8f 89       	ldd	r24, Y+23	; 0x17
    2638:	98 8d       	ldd	r25, Y+24	; 0x18
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	3f ef       	ldi	r19, 0xFF	; 255
    263e:	4f e7       	ldi	r20, 0x7F	; 127
    2640:	57 e4       	ldi	r21, 0x47	; 71
    2642:	b9 d5       	rcall	.+2930   	; 0x31b6 <__gesf2>
    2644:	18 16       	cp	r1, r24
    2646:	3c f5       	brge	.+78     	; 0x2696 <purpleside+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	69 8d       	ldd	r22, Y+25	; 0x19
    264a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	b2 d5       	rcall	.+2916   	; 0x31be <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	cb d4       	rcall	.+2454   	; 0x2ffa <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	0f c0       	rjmp	.+30     	; 0x268c <purpleside+0x3d2>
    266e:	8a ef       	ldi	r24, 0xFA	; 250
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
    2676:	89 89       	ldd	r24, Y+17	; 0x11
    2678:	9a 89       	ldd	r25, Y+18	; 0x12
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <purpleside+0x3c0>
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	8b 89       	ldd	r24, Y+19	; 0x13
    268e:	9c 89       	ldd	r25, Y+20	; 0x14
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	69 f7       	brne	.-38     	; 0x266e <purpleside+0x3b4>
    2694:	84 c0       	rjmp	.+264    	; 0x279e <purpleside+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2696:	6d 89       	ldd	r22, Y+21	; 0x15
    2698:	7e 89       	ldd	r23, Y+22	; 0x16
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	ad d4       	rcall	.+2394   	; 0x2ffa <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9c 8b       	std	Y+20, r25	; 0x14
    26a6:	8b 8b       	std	Y+19, r24	; 0x13
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	98 8b       	std	Y+16, r25	; 0x10
    26ae:	8f 87       	std	Y+15, r24	; 0x0f
    26b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b2:	98 89       	ldd	r25, Y+16	; 0x10
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <purpleside+0x3fa>
    26b8:	98 8b       	std	Y+16, r25	; 0x10
    26ba:	8f 87       	std	Y+15, r24	; 0x0f
    26bc:	70 c0       	rjmp	.+224    	; 0x279e <purpleside+0x4e4>
					{
						_delay_ms(3000);
					}
					else if(current_position == 1)
    26be:	8c ad       	ldd	r24, Y+60	; 0x3c
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <purpleside+0x40c>
    26c4:	6c c0       	rjmp	.+216    	; 0x279e <purpleside+0x4e4>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e8       	ldi	r25, 0x80	; 128
    26ca:	ab eb       	ldi	r26, 0xBB	; 187
    26cc:	b4 e4       	ldi	r27, 0x44	; 68
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
    26d0:	9c 87       	std	Y+12, r25	; 0x0c
    26d2:	ad 87       	std	Y+13, r26	; 0x0d
    26d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e4       	ldi	r19, 0x40	; 64
    26e2:	4c e1       	ldi	r20, 0x1C	; 28
    26e4:	55 e4       	ldi	r21, 0x45	; 69
    26e6:	6b d5       	rcall	.+2774   	; 0x31be <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8f 83       	std	Y+7, r24	; 0x07
    26ee:	98 87       	std	Y+8, r25	; 0x08
    26f0:	a9 87       	std	Y+9, r26	; 0x09
    26f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	09 d4       	rcall	.+2066   	; 0x2f18 <__cmpsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <purpleside+0x45a>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	3b c0       	rjmp	.+118    	; 0x278a <purpleside+0x4d0>
	else if (__tmp > 65535)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	48 d5       	rcall	.+2704   	; 0x31b6 <__gesf2>
    2726:	18 16       	cp	r1, r24
    2728:	3c f5       	brge	.+78     	; 0x2778 <purpleside+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	41 d5       	rcall	.+2690   	; 0x31be <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	5a d4       	rcall	.+2228   	; 0x2ffa <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	0f c0       	rjmp	.+30     	; 0x276e <purpleside+0x4b4>
    2750:	8a ef       	ldi	r24, 0xFA	; 250
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <purpleside+0x4a2>
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <purpleside+0x496>
    2776:	13 c0       	rjmp	.+38     	; 0x279e <purpleside+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	3c d4       	rcall	.+2168   	; 0x2ffa <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <purpleside+0x4dc>
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(1500);
					}
					if(current_position == 2)
    279e:	8c ad       	ldd	r24, Y+60	; 0x3c
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <purpleside+0x4ec>
    27a4:	ff cf       	rjmp	.-2      	; 0x27a4 <purpleside+0x4ea>
					//next_position = current_position;
					active_state = ROBOT_STATE_TACTIC_ONE;
					break;
				}
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    27a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	8c af       	std	Y+60, r24	; 0x3c
    27ac:	8c ad       	ldd	r24, Y+60	; 0x3c
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	08 f4       	brcc	.+2      	; 0x27b4 <purpleside+0x4fa>
    27b2:	be ce       	rjmp	.-644    	; 0x2530 <purpleside+0x276>
    27b4:	a5 cd       	rjmp	.-1206   	; 0x2300 <purpleside+0x46>

000027b6 <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <timer_register_callback+0x6>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	90 93 8c 01 	sts	0x018C, r25
    27cc:	80 93 8b 01 	sts	0x018B, r24
}
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <timer_init+0xa>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    27ec:	e0 e8       	ldi	r30, 0x80	; 128
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    27f2:	e1 e8       	ldi	r30, 0x81	; 129
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	89 e0       	ldi	r24, 0x09	; 9
    27f8:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    27fa:	08 e8       	ldi	r16, 0x88	; 136
    27fc:	10 e0       	ldi	r17, 0x00	; 0
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	cc 01       	movw	r24, r24
    2804:	a0 e0       	ldi	r26, 0x00	; 0
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	22 d4       	rcall	.+2116   	; 0x3052 <__floatunsisf>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	60 e8       	ldi	r22, 0x80	; 128
    2814:	76 e9       	ldi	r23, 0x96	; 150
    2816:	88 e1       	ldi	r24, 0x18	; 24
    2818:	9b e4       	ldi	r25, 0x4B	; 75
    281a:	82 d3       	rcall	.+1796   	; 0x2f20 <__divsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	11 d3       	rcall	.+1570   	; 0x2e50 <__addsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	e1 d3       	rcall	.+1986   	; 0x2ffa <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2842:	ef e6       	ldi	r30, 0x6F	; 111
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	80 83       	st	Z, r24

	SREG |= 0x80;
    284a:	af e5       	ldi	r26, 0x5F	; 95
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ef e5       	ldi	r30, 0x5F	; 95
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	8c 93       	st	X, r24
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	08 95       	ret

00002866 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2866:	1f 92       	push	r1
    2868:	0f 92       	push	r0
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	0f 92       	push	r0
    286e:	00 90 5b 00 	lds	r0, 0x005B
    2872:	0f 92       	push	r0
    2874:	11 24       	eor	r1, r1
    2876:	2f 93       	push	r18
    2878:	3f 93       	push	r19
    287a:	4f 93       	push	r20
    287c:	5f 93       	push	r21
    287e:	6f 93       	push	r22
    2880:	7f 93       	push	r23
    2882:	8f 93       	push	r24
    2884:	9f 93       	push	r25
    2886:	af 93       	push	r26
    2888:	bf 93       	push	r27
    288a:	ef 93       	push	r30
    288c:	ff 93       	push	r31
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2896:	80 91 8b 01 	lds	r24, 0x018B
    289a:	90 91 8c 01 	lds	r25, 0x018C
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	29 f0       	breq	.+10     	; 0x28ac <__vector_12+0x46>
        timer_callback();
    28a2:	e0 91 8b 01 	lds	r30, 0x018B
    28a6:	f0 91 8c 01 	lds	r31, 0x018C
    28aa:	09 95       	icall
	if(sys_time >= 90000)
    28ac:	80 91 8d 01 	lds	r24, 0x018D
    28b0:	90 91 8e 01 	lds	r25, 0x018E
    28b4:	a0 91 8f 01 	lds	r26, 0x018F
    28b8:	b0 91 90 01 	lds	r27, 0x0190
    28bc:	80 39       	cpi	r24, 0x90	; 144
    28be:	2f e5       	ldi	r18, 0x5F	; 95
    28c0:	92 07       	cpc	r25, r18
    28c2:	21 e0       	ldi	r18, 0x01	; 1
    28c4:	a2 07       	cpc	r26, r18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	b2 07       	cpc	r27, r18
    28ca:	10 f0       	brcs	.+4      	; 0x28d0 <__vector_12+0x6a>
		actuators_umbrella();
    28cc:	0e 94 8d 03 	call	0x71a	; 0x71a <actuators_umbrella>
	sys_time++;
    28d0:	80 91 8d 01 	lds	r24, 0x018D
    28d4:	90 91 8e 01 	lds	r25, 0x018E
    28d8:	a0 91 8f 01 	lds	r26, 0x018F
    28dc:	b0 91 90 01 	lds	r27, 0x0190
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	a1 1d       	adc	r26, r1
    28e4:	b1 1d       	adc	r27, r1
    28e6:	80 93 8d 01 	sts	0x018D, r24
    28ea:	90 93 8e 01 	sts	0x018E, r25
    28ee:	a0 93 8f 01 	sts	0x018F, r26
    28f2:	b0 93 90 01 	sts	0x0190, r27
}
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	ff 91       	pop	r31
    28fc:	ef 91       	pop	r30
    28fe:	bf 91       	pop	r27
    2900:	af 91       	pop	r26
    2902:	9f 91       	pop	r25
    2904:	8f 91       	pop	r24
    2906:	7f 91       	pop	r23
    2908:	6f 91       	pop	r22
    290a:	5f 91       	pop	r21
    290c:	4f 91       	pop	r20
    290e:	3f 91       	pop	r19
    2910:	2f 91       	pop	r18
    2912:	0f 90       	pop	r0
    2914:	00 92 5b 00 	sts	0x005B, r0
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <sides_switch_check>:
void wait_for_big_robot(double time_to_wait)
{
	while(sys_time < time_to_wait);
}
signed char sides_switch_check(void)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	0f 92       	push	r0
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	if(gpio_read_pin(SIDE_PIN) == 1)
    292c:	89 e2       	ldi	r24, 0x29	; 41
    292e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_read_pin>
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	19 f4       	brne	.+6      	; 0x293c <sides_switch_check+0x1a>
	{
		return 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	01 c0       	rjmp	.+2      	; 0x293e <sides_switch_check+0x1c>
	}
	
	return 0;
    293c:	19 82       	std	Y+1, r1	; 0x01
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <system_reset_system_time>:

void system_reset_system_time(void)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2950:	10 92 8d 01 	sts	0x018D, r1
    2954:	10 92 8e 01 	sts	0x018E, r1
    2958:	10 92 8f 01 	sts	0x018F, r1
    295c:	10 92 90 01 	sts	0x0190, r1
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <system_set_match_started>:
void system_set_match_started(void)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 91 01 	sts	0x0191, r24
}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2982:	80 91 8d 01 	lds	r24, 0x018D
    2986:	90 91 8e 01 	lds	r25, 0x018E
    298a:	a0 91 8f 01 	lds	r26, 0x018F
    298e:	b0 91 90 01 	lds	r27, 0x0190
}
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <system_init>:
	uint32_t current;
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
void system_init(void)
{	
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	6c 97       	sbiw	r28, 0x1c	; 28
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    29b0:	83 e7       	ldi	r24, 0x73	; 115
    29b2:	9a e0       	ldi	r25, 0x0A	; 10
    29b4:	00 df       	rcall	.-512    	; 0x27b6 <timer_register_callback>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a8 ec       	ldi	r26, 0xC8	; 200
    29bc:	b2 e4       	ldi	r27, 0x42	; 66
    29be:	89 8f       	std	Y+25, r24	; 0x19
    29c0:	9a 8f       	std	Y+26, r25	; 0x1a
    29c2:	ab 8f       	std	Y+27, r26	; 0x1b
    29c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	69 8d       	ldd	r22, Y+25	; 0x19
    29c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e4       	ldi	r19, 0x40	; 64
    29d2:	4c e1       	ldi	r20, 0x1C	; 28
    29d4:	55 e4       	ldi	r21, 0x45	; 69
    29d6:	f3 d3       	rcall	.+2022   	; 0x31be <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8d 8b       	std	Y+21, r24	; 0x15
    29de:	9e 8b       	std	Y+22, r25	; 0x16
    29e0:	af 8b       	std	Y+23, r26	; 0x17
    29e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e4:	6d 89       	ldd	r22, Y+21	; 0x15
    29e6:	7e 89       	ldd	r23, Y+22	; 0x16
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	91 d2       	rcall	.+1314   	; 0x2f18 <__cmpsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <system_init+0x68>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	3b c0       	rjmp	.+118    	; 0x2a7a <system_init+0xde>
	else if (__tmp > 65535)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	d0 d3       	rcall	.+1952   	; 0x31b6 <__gesf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	3c f5       	brge	.+78     	; 0x2a68 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	c9 d3       	rcall	.+1938   	; 0x31be <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	e2 d2       	rcall	.+1476   	; 0x2ffa <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <system_init+0xc2>
    2a40:	8a ef       	ldi	r24, 0xFA	; 250
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9a 8b       	std	Y+18, r25	; 0x12
    2a46:	89 8b       	std	Y+17, r24	; 0x11
    2a48:	89 89       	ldd	r24, Y+17	; 0x11
    2a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <system_init+0xb0>
    2a50:	9a 8b       	std	Y+18, r25	; 0x12
    2a52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	8b 89       	ldd	r24, Y+19	; 0x13
    2a56:	9c 89       	ldd	r25, Y+20	; 0x14
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a60:	9c 89       	ldd	r25, Y+20	; 0x14
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <system_init+0xa4>
    2a66:	13 c0       	rjmp	.+38     	; 0x2a8e <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a70:	c4 d2       	rcall	.+1416   	; 0x2ffa <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
    2a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a84:	98 89       	ldd	r25, Y+16	; 0x10
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <system_init+0xea>
    2a8a:	98 8b       	std	Y+16, r25	; 0x10
    2a8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    2a8e:	88 e2       	ldi	r24, 0x28	; 40
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    2a98:	89 e2       	ldi	r24, 0x29	; 41
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    2aa2:	88 e0       	ldi	r24, 0x08	; 8
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    2aac:	8a e0       	ldi	r24, 0x0A	; 10
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    2ab6:	8c e0       	ldi	r24, 0x0C	; 12
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    2ac0:	8e e0       	ldi	r24, 0x0E	; 14
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 85 08 	call	0x110a	; 0x110a <gpio_register_pin>
	
	
	DDRG = 0xff;
    2aca:	e3 e3       	ldi	r30, 0x33	; 51
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	8f ef       	ldi	r24, 0xFF	; 255
    2ad0:	80 83       	st	Z, r24
	PORTG = 0x00;
    2ad2:	e4 e3       	ldi	r30, 0x34	; 52
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	10 82       	st	Z, r1
	servo_init(50);
    2ad8:	82 e3       	ldi	r24, 0x32	; 50
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 17 01 	call	0x22e	; 0x22e <servo_init>
	timer_init(1000);
    2ae0:	88 ee       	ldi	r24, 0xE8	; 232
    2ae2:	93 e0       	ldi	r25, 0x03	; 3
    2ae4:	7a de       	rcall	.-780    	; 0x27da <timer_init>
	CAN_Init(1);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	0e 94 40 07 	call	0xe80	; 0xe80 <CAN_Init>

	actuators_setup();
    2aec:	0e 94 16 04 	call	0x82c	; 0x82c <actuators_setup>
	
	while(!(gpio_read_pin(JUMPER_PIN)));
    2af0:	88 e2       	ldi	r24, 0x28	; 40
    2af2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_read_pin>
    2af6:	88 23       	and	r24, r24
    2af8:	d9 f3       	breq	.-10     	; 0x2af0 <system_init+0x154>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e2       	ldi	r26, 0x20	; 32
    2b00:	b1 e4       	ldi	r27, 0x41	; 65
    2b02:	8b 87       	std	Y+11, r24	; 0x0b
    2b04:	9c 87       	std	Y+12, r25	; 0x0c
    2b06:	ad 87       	std	Y+13, r26	; 0x0d
    2b08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e4       	ldi	r19, 0x40	; 64
    2b16:	4c e1       	ldi	r20, 0x1C	; 28
    2b18:	55 e4       	ldi	r21, 0x45	; 69
    2b1a:	51 d3       	rcall	.+1698   	; 0x31be <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8f 83       	std	Y+7, r24	; 0x07
    2b22:	98 87       	std	Y+8, r25	; 0x08
    2b24:	a9 87       	std	Y+9, r26	; 0x09
    2b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	ef d1       	rcall	.+990    	; 0x2f18 <__cmpsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <system_init+0x1ac>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	3b c0       	rjmp	.+118    	; 0x2bbe <system_init+0x222>
	else if (__tmp > 65535)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	2e d3       	rcall	.+1628   	; 0x31b6 <__gesf2>
    2b5a:	18 16       	cp	r1, r24
    2b5c:	3c f5       	brge	.+78     	; 0x2bac <system_init+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e2       	ldi	r20, 0x20	; 32
    2b6c:	51 e4       	ldi	r21, 0x41	; 65
    2b6e:	27 d3       	rcall	.+1614   	; 0x31be <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	40 d2       	rcall	.+1152   	; 0x2ffa <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <system_init+0x206>
    2b84:	8a ef       	ldi	r24, 0xFA	; 250
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9c 83       	std	Y+4, r25	; 0x04
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <system_init+0x1f4>
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <system_init+0x1e8>
    2baa:	13 c0       	rjmp	.+38     	; 0x2bd2 <system_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	22 d2       	rcall	.+1092   	; 0x2ffa <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <system_init+0x22e>
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	PORTG = 0xff;
    2bd2:	e4 e3       	ldi	r30, 0x34	; 52
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	80 83       	st	Z, r24
	system_reset_system_time();
    2bda:	b6 de       	rcall	.-660    	; 0x2948 <system_reset_system_time>
	system_set_match_started();
    2bdc:	c4 de       	rcall	.-632    	; 0x2966 <system_set_match_started>
}
    2bde:	6c 96       	adiw	r28, 0x1c	; 28
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <check_front_sensors>:
signed char check_front_sensors(signed char sensor)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <check_front_sensors+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == FRONT_ALL)
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	83 30       	cpi	r24, 0x03	; 3
    2c00:	69 f4       	brne	.+26     	; 0x2c1c <check_front_sensors+0x2c>
	{
		if(!(gpio_read_pin(SENSOR_F_L_PIN)) || !(gpio_read_pin(SENSOR_F_R_PIN)))
    2c02:	88 e0       	ldi	r24, 0x08	; 8
    2c04:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_read_pin>
    2c08:	88 23       	and	r24, r24
    2c0a:	29 f0       	breq	.+10     	; 0x2c16 <check_front_sensors+0x26>
    2c0c:	8a e0       	ldi	r24, 0x0A	; 10
    2c0e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <gpio_read_pin>
    2c12:	88 23       	and	r24, r24
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <check_front_sensors+0x2c>
		{
			return DETECTED;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <check_front_sensors+0x2e>
		}
	}
	
	return NOT_DETECTED;
    2c1c:	1a 82       	std	Y+2, r1	; 0x02
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	00 90 5b 00 	lds	r0, 0x005B
    2c36:	0f 92       	push	r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	8f 93       	push	r24
    2c3c:	9f 93       	push	r25
    2c3e:	af 93       	push	r26
    2c40:	bf 93       	push	r27
    2c42:	ef 93       	push	r30
    2c44:	ff 93       	push	r31
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2c4e:	80 91 92 01 	lds	r24, 0x0192
    2c52:	88 23       	and	r24, r24
    2c54:	d9 f0       	breq	.+54     	; 0x2c8c <__vector_23+0x62>
	{
		tx0_counter--;
    2c56:	80 91 92 01 	lds	r24, 0x0192
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	80 93 92 01 	sts	0x0192, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2c60:	a6 ec       	ldi	r26, 0xC6	; 198
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	80 91 93 01 	lds	r24, 0x0193
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e6 56       	subi	r30, 0x66	; 102
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	80 81       	ld	r24, Z
    2c74:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2c76:	80 91 93 01 	lds	r24, 0x0193
    2c7a:	8f 5f       	subi	r24, 0xFF	; 255
    2c7c:	80 93 93 01 	sts	0x0193, r24
    2c80:	80 91 93 01 	lds	r24, 0x0193
    2c84:	80 34       	cpi	r24, 0x40	; 64
    2c86:	11 f4       	brne	.+4      	; 0x2c8c <__vector_23+0x62>
			tx0_rd_index = 0;
    2c88:	10 92 93 01 	sts	0x0193, r1
	}
}
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	0f 90       	pop	r0
    2c9e:	00 92 5b 00 	sts	0x005B, r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	0f 90       	pop	r0
    2ca8:	1f 90       	pop	r1
    2caa:	18 95       	reti

00002cac <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2cac:	1f 92       	push	r1
    2cae:	0f 92       	push	r0
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	0f 92       	push	r0
    2cb4:	00 90 5b 00 	lds	r0, 0x005B
    2cb8:	0f 92       	push	r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	2f 93       	push	r18
    2cbe:	8f 93       	push	r24
    2cc0:	9f 93       	push	r25
    2cc2:	ef 93       	push	r30
    2cc4:	ff 93       	push	r31
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2cd0:	e0 ec       	ldi	r30, 0xC0	; 192
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	8c 71       	andi	r24, 0x1C	; 28
    2ce0:	90 70       	andi	r25, 0x00	; 0
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	d9 f4       	brne	.+54     	; 0x2d1c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2ce6:	80 91 94 01 	lds	r24, 0x0194
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	e6 ec       	ldi	r30, 0xC6	; 198
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	20 81       	ld	r18, Z
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	e6 52       	subi	r30, 0x26	; 38
    2cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfa:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2cfc:	80 91 94 01 	lds	r24, 0x0194
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	80 93 94 01 	sts	0x0194, r24
    2d06:	80 91 94 01 	lds	r24, 0x0194
    2d0a:	80 34       	cpi	r24, 0x40	; 64
    2d0c:	11 f4       	brne	.+4      	; 0x2d12 <__vector_21+0x66>
			rx0_wr_index = 0;
    2d0e:	10 92 94 01 	sts	0x0194, r1

		rx0_counter++;
    2d12:	80 91 95 01 	lds	r24, 0x0195
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	80 93 95 01 	sts	0x0195, r24
	}
}
    2d1c:	0f 90       	pop	r0
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	ff 91       	pop	r31
    2d24:	ef 91       	pop	r30
    2d26:	9f 91       	pop	r25
    2d28:	8f 91       	pop	r24
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	00 92 5b 00 	sts	0x005B, r0
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2d3c:	1f 92       	push	r1
    2d3e:	0f 92       	push	r0
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	0f 92       	push	r0
    2d44:	00 90 5b 00 	lds	r0, 0x005B
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2d60:	80 91 96 01 	lds	r24, 0x0196
    2d64:	88 23       	and	r24, r24
    2d66:	d9 f0       	breq	.+54     	; 0x2d9e <__vector_34+0x62>
	{
		tx1_counter--;
    2d68:	80 91 96 01 	lds	r24, 0x0196
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	80 93 96 01 	sts	0x0196, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2d72:	ae ec       	ldi	r26, 0xCE	; 206
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	80 91 97 01 	lds	r24, 0x0197
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e6 5e       	subi	r30, 0xE6	; 230
    2d82:	fd 4f       	sbci	r31, 0xFD	; 253
    2d84:	80 81       	ld	r24, Z
    2d86:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2d88:	80 91 97 01 	lds	r24, 0x0197
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	80 93 97 01 	sts	0x0197, r24
    2d92:	80 91 97 01 	lds	r24, 0x0197
    2d96:	80 34       	cpi	r24, 0x40	; 64
    2d98:	11 f4       	brne	.+4      	; 0x2d9e <__vector_34+0x62>
			tx1_rd_index = 0;
    2d9a:	10 92 97 01 	sts	0x0197, r1
	}
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	0f 90       	pop	r0
    2db0:	00 92 5b 00 	sts	0x005B, r0
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <__vector_32>:

ISR(USART1_RX_vect)
{
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	00 90 5b 00 	lds	r0, 0x005B
    2dca:	0f 92       	push	r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	2f 93       	push	r18
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	ef 93       	push	r30
    2dd6:	ff 93       	push	r31
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2de2:	e8 ec       	ldi	r30, 0xC8	; 200
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	8c 71       	andi	r24, 0x1C	; 28
    2df2:	90 70       	andi	r25, 0x00	; 0
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	d9 f4       	brne	.+54     	; 0x2e2e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    2df8:	80 91 98 01 	lds	r24, 0x0198
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	ee ec       	ldi	r30, 0xCE	; 206
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	20 81       	ld	r18, Z
    2e06:	fc 01       	movw	r30, r24
    2e08:	e6 5a       	subi	r30, 0xA6	; 166
    2e0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e0c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    2e0e:	80 91 98 01 	lds	r24, 0x0198
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	80 93 98 01 	sts	0x0198, r24
    2e18:	80 91 98 01 	lds	r24, 0x0198
    2e1c:	80 34       	cpi	r24, 0x40	; 64
    2e1e:	11 f4       	brne	.+4      	; 0x2e24 <__vector_32+0x66>
		rx1_wr_index = 0;
    2e20:	10 92 98 01 	sts	0x0198, r1

		rx1_counter++;
    2e24:	80 91 99 01 	lds	r24, 0x0199
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	80 93 99 01 	sts	0x0199, r24
	}
}
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	ff 91       	pop	r31
    2e36:	ef 91       	pop	r30
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	2f 91       	pop	r18
    2e3e:	0f 90       	pop	r0
    2e40:	00 92 5b 00 	sts	0x005B, r0
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <__subsf3>:
    2e4e:	50 58       	subi	r21, 0x80	; 128

00002e50 <__addsf3>:
    2e50:	bb 27       	eor	r27, r27
    2e52:	aa 27       	eor	r26, r26
    2e54:	0e d0       	rcall	.+28     	; 0x2e72 <__addsf3x>
    2e56:	75 c1       	rjmp	.+746    	; 0x3142 <__fp_round>
    2e58:	66 d1       	rcall	.+716    	; 0x3126 <__fp_pscA>
    2e5a:	30 f0       	brcs	.+12     	; 0x2e68 <__addsf3+0x18>
    2e5c:	6b d1       	rcall	.+726    	; 0x3134 <__fp_pscB>
    2e5e:	20 f0       	brcs	.+8      	; 0x2e68 <__addsf3+0x18>
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <__addsf3+0x1e>
    2e62:	9f 3f       	cpi	r25, 0xFF	; 255
    2e64:	11 f4       	brne	.+4      	; 0x2e6a <__addsf3+0x1a>
    2e66:	1e f4       	brtc	.+6      	; 0x2e6e <__addsf3+0x1e>
    2e68:	5b c1       	rjmp	.+694    	; 0x3120 <__fp_nan>
    2e6a:	0e f4       	brtc	.+2      	; 0x2e6e <__addsf3+0x1e>
    2e6c:	e0 95       	com	r30
    2e6e:	e7 fb       	bst	r30, 7
    2e70:	51 c1       	rjmp	.+674    	; 0x3114 <__fp_inf>

00002e72 <__addsf3x>:
    2e72:	e9 2f       	mov	r30, r25
    2e74:	77 d1       	rcall	.+750    	; 0x3164 <__fp_split3>
    2e76:	80 f3       	brcs	.-32     	; 0x2e58 <__addsf3+0x8>
    2e78:	ba 17       	cp	r27, r26
    2e7a:	62 07       	cpc	r22, r18
    2e7c:	73 07       	cpc	r23, r19
    2e7e:	84 07       	cpc	r24, r20
    2e80:	95 07       	cpc	r25, r21
    2e82:	18 f0       	brcs	.+6      	; 0x2e8a <__addsf3x+0x18>
    2e84:	71 f4       	brne	.+28     	; 0x2ea2 <__addsf3x+0x30>
    2e86:	9e f5       	brtc	.+102    	; 0x2eee <__addsf3x+0x7c>
    2e88:	8f c1       	rjmp	.+798    	; 0x31a8 <__fp_zero>
    2e8a:	0e f4       	brtc	.+2      	; 0x2e8e <__addsf3x+0x1c>
    2e8c:	e0 95       	com	r30
    2e8e:	0b 2e       	mov	r0, r27
    2e90:	ba 2f       	mov	r27, r26
    2e92:	a0 2d       	mov	r26, r0
    2e94:	0b 01       	movw	r0, r22
    2e96:	b9 01       	movw	r22, r18
    2e98:	90 01       	movw	r18, r0
    2e9a:	0c 01       	movw	r0, r24
    2e9c:	ca 01       	movw	r24, r20
    2e9e:	a0 01       	movw	r20, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	ff 27       	eor	r31, r31
    2ea4:	59 1b       	sub	r21, r25
    2ea6:	99 f0       	breq	.+38     	; 0x2ece <__addsf3x+0x5c>
    2ea8:	59 3f       	cpi	r21, 0xF9	; 249
    2eaa:	50 f4       	brcc	.+20     	; 0x2ec0 <__addsf3x+0x4e>
    2eac:	50 3e       	cpi	r21, 0xE0	; 224
    2eae:	68 f1       	brcs	.+90     	; 0x2f0a <__addsf3x+0x98>
    2eb0:	1a 16       	cp	r1, r26
    2eb2:	f0 40       	sbci	r31, 0x00	; 0
    2eb4:	a2 2f       	mov	r26, r18
    2eb6:	23 2f       	mov	r18, r19
    2eb8:	34 2f       	mov	r19, r20
    2eba:	44 27       	eor	r20, r20
    2ebc:	58 5f       	subi	r21, 0xF8	; 248
    2ebe:	f3 cf       	rjmp	.-26     	; 0x2ea6 <__addsf3x+0x34>
    2ec0:	46 95       	lsr	r20
    2ec2:	37 95       	ror	r19
    2ec4:	27 95       	ror	r18
    2ec6:	a7 95       	ror	r26
    2ec8:	f0 40       	sbci	r31, 0x00	; 0
    2eca:	53 95       	inc	r21
    2ecc:	c9 f7       	brne	.-14     	; 0x2ec0 <__addsf3x+0x4e>
    2ece:	7e f4       	brtc	.+30     	; 0x2eee <__addsf3x+0x7c>
    2ed0:	1f 16       	cp	r1, r31
    2ed2:	ba 0b       	sbc	r27, r26
    2ed4:	62 0b       	sbc	r22, r18
    2ed6:	73 0b       	sbc	r23, r19
    2ed8:	84 0b       	sbc	r24, r20
    2eda:	ba f0       	brmi	.+46     	; 0x2f0a <__addsf3x+0x98>
    2edc:	91 50       	subi	r25, 0x01	; 1
    2ede:	a1 f0       	breq	.+40     	; 0x2f08 <__addsf3x+0x96>
    2ee0:	ff 0f       	add	r31, r31
    2ee2:	bb 1f       	adc	r27, r27
    2ee4:	66 1f       	adc	r22, r22
    2ee6:	77 1f       	adc	r23, r23
    2ee8:	88 1f       	adc	r24, r24
    2eea:	c2 f7       	brpl	.-16     	; 0x2edc <__addsf3x+0x6a>
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <__addsf3x+0x98>
    2eee:	ba 0f       	add	r27, r26
    2ef0:	62 1f       	adc	r22, r18
    2ef2:	73 1f       	adc	r23, r19
    2ef4:	84 1f       	adc	r24, r20
    2ef6:	48 f4       	brcc	.+18     	; 0x2f0a <__addsf3x+0x98>
    2ef8:	87 95       	ror	r24
    2efa:	77 95       	ror	r23
    2efc:	67 95       	ror	r22
    2efe:	b7 95       	ror	r27
    2f00:	f7 95       	ror	r31
    2f02:	9e 3f       	cpi	r25, 0xFE	; 254
    2f04:	08 f0       	brcs	.+2      	; 0x2f08 <__addsf3x+0x96>
    2f06:	b3 cf       	rjmp	.-154    	; 0x2e6e <__addsf3+0x1e>
    2f08:	93 95       	inc	r25
    2f0a:	88 0f       	add	r24, r24
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <__addsf3x+0x9e>
    2f0e:	99 27       	eor	r25, r25
    2f10:	ee 0f       	add	r30, r30
    2f12:	97 95       	ror	r25
    2f14:	87 95       	ror	r24
    2f16:	08 95       	ret

00002f18 <__cmpsf2>:
    2f18:	d9 d0       	rcall	.+434    	; 0x30cc <__fp_cmp>
    2f1a:	08 f4       	brcc	.+2      	; 0x2f1e <__cmpsf2+0x6>
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	08 95       	ret

00002f20 <__divsf3>:
    2f20:	0c d0       	rcall	.+24     	; 0x2f3a <__divsf3x>
    2f22:	0f c1       	rjmp	.+542    	; 0x3142 <__fp_round>
    2f24:	07 d1       	rcall	.+526    	; 0x3134 <__fp_pscB>
    2f26:	40 f0       	brcs	.+16     	; 0x2f38 <__divsf3+0x18>
    2f28:	fe d0       	rcall	.+508    	; 0x3126 <__fp_pscA>
    2f2a:	30 f0       	brcs	.+12     	; 0x2f38 <__divsf3+0x18>
    2f2c:	21 f4       	brne	.+8      	; 0x2f36 <__divsf3+0x16>
    2f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f30:	19 f0       	breq	.+6      	; 0x2f38 <__divsf3+0x18>
    2f32:	f0 c0       	rjmp	.+480    	; 0x3114 <__fp_inf>
    2f34:	51 11       	cpse	r21, r1
    2f36:	39 c1       	rjmp	.+626    	; 0x31aa <__fp_szero>
    2f38:	f3 c0       	rjmp	.+486    	; 0x3120 <__fp_nan>

00002f3a <__divsf3x>:
    2f3a:	14 d1       	rcall	.+552    	; 0x3164 <__fp_split3>
    2f3c:	98 f3       	brcs	.-26     	; 0x2f24 <__divsf3+0x4>

00002f3e <__divsf3_pse>:
    2f3e:	99 23       	and	r25, r25
    2f40:	c9 f3       	breq	.-14     	; 0x2f34 <__divsf3+0x14>
    2f42:	55 23       	and	r21, r21
    2f44:	b1 f3       	breq	.-20     	; 0x2f32 <__divsf3+0x12>
    2f46:	95 1b       	sub	r25, r21
    2f48:	55 0b       	sbc	r21, r21
    2f4a:	bb 27       	eor	r27, r27
    2f4c:	aa 27       	eor	r26, r26
    2f4e:	62 17       	cp	r22, r18
    2f50:	73 07       	cpc	r23, r19
    2f52:	84 07       	cpc	r24, r20
    2f54:	38 f0       	brcs	.+14     	; 0x2f64 <__divsf3_pse+0x26>
    2f56:	9f 5f       	subi	r25, 0xFF	; 255
    2f58:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5a:	22 0f       	add	r18, r18
    2f5c:	33 1f       	adc	r19, r19
    2f5e:	44 1f       	adc	r20, r20
    2f60:	aa 1f       	adc	r26, r26
    2f62:	a9 f3       	breq	.-22     	; 0x2f4e <__divsf3_pse+0x10>
    2f64:	33 d0       	rcall	.+102    	; 0x2fcc <__divsf3_pse+0x8e>
    2f66:	0e 2e       	mov	r0, r30
    2f68:	3a f0       	brmi	.+14     	; 0x2f78 <__divsf3_pse+0x3a>
    2f6a:	e0 e8       	ldi	r30, 0x80	; 128
    2f6c:	30 d0       	rcall	.+96     	; 0x2fce <__divsf3_pse+0x90>
    2f6e:	91 50       	subi	r25, 0x01	; 1
    2f70:	50 40       	sbci	r21, 0x00	; 0
    2f72:	e6 95       	lsr	r30
    2f74:	00 1c       	adc	r0, r0
    2f76:	ca f7       	brpl	.-14     	; 0x2f6a <__divsf3_pse+0x2c>
    2f78:	29 d0       	rcall	.+82     	; 0x2fcc <__divsf3_pse+0x8e>
    2f7a:	fe 2f       	mov	r31, r30
    2f7c:	27 d0       	rcall	.+78     	; 0x2fcc <__divsf3_pse+0x8e>
    2f7e:	66 0f       	add	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	88 1f       	adc	r24, r24
    2f84:	bb 1f       	adc	r27, r27
    2f86:	26 17       	cp	r18, r22
    2f88:	37 07       	cpc	r19, r23
    2f8a:	48 07       	cpc	r20, r24
    2f8c:	ab 07       	cpc	r26, r27
    2f8e:	b0 e8       	ldi	r27, 0x80	; 128
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <__divsf3_pse+0x56>
    2f92:	bb 0b       	sbc	r27, r27
    2f94:	80 2d       	mov	r24, r0
    2f96:	bf 01       	movw	r22, r30
    2f98:	ff 27       	eor	r31, r31
    2f9a:	93 58       	subi	r25, 0x83	; 131
    2f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9e:	2a f0       	brmi	.+10     	; 0x2faa <__divsf3_pse+0x6c>
    2fa0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fa2:	51 05       	cpc	r21, r1
    2fa4:	68 f0       	brcs	.+26     	; 0x2fc0 <__divsf3_pse+0x82>
    2fa6:	b6 c0       	rjmp	.+364    	; 0x3114 <__fp_inf>
    2fa8:	00 c1       	rjmp	.+512    	; 0x31aa <__fp_szero>
    2faa:	5f 3f       	cpi	r21, 0xFF	; 255
    2fac:	ec f3       	brlt	.-6      	; 0x2fa8 <__divsf3_pse+0x6a>
    2fae:	98 3e       	cpi	r25, 0xE8	; 232
    2fb0:	dc f3       	brlt	.-10     	; 0x2fa8 <__divsf3_pse+0x6a>
    2fb2:	86 95       	lsr	r24
    2fb4:	77 95       	ror	r23
    2fb6:	67 95       	ror	r22
    2fb8:	b7 95       	ror	r27
    2fba:	f7 95       	ror	r31
    2fbc:	9f 5f       	subi	r25, 0xFF	; 255
    2fbe:	c9 f7       	brne	.-14     	; 0x2fb2 <__divsf3_pse+0x74>
    2fc0:	88 0f       	add	r24, r24
    2fc2:	91 1d       	adc	r25, r1
    2fc4:	96 95       	lsr	r25
    2fc6:	87 95       	ror	r24
    2fc8:	97 f9       	bld	r25, 7
    2fca:	08 95       	ret
    2fcc:	e1 e0       	ldi	r30, 0x01	; 1
    2fce:	66 0f       	add	r22, r22
    2fd0:	77 1f       	adc	r23, r23
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	bb 1f       	adc	r27, r27
    2fd6:	62 17       	cp	r22, r18
    2fd8:	73 07       	cpc	r23, r19
    2fda:	84 07       	cpc	r24, r20
    2fdc:	ba 07       	cpc	r27, r26
    2fde:	20 f0       	brcs	.+8      	; 0x2fe8 <__divsf3_pse+0xaa>
    2fe0:	62 1b       	sub	r22, r18
    2fe2:	73 0b       	sbc	r23, r19
    2fe4:	84 0b       	sbc	r24, r20
    2fe6:	ba 0b       	sbc	r27, r26
    2fe8:	ee 1f       	adc	r30, r30
    2fea:	88 f7       	brcc	.-30     	; 0x2fce <__divsf3_pse+0x90>
    2fec:	e0 95       	com	r30
    2fee:	08 95       	ret

00002ff0 <__fixsfsi>:
    2ff0:	04 d0       	rcall	.+8      	; 0x2ffa <__fixunssfsi>
    2ff2:	68 94       	set
    2ff4:	b1 11       	cpse	r27, r1
    2ff6:	d9 c0       	rjmp	.+434    	; 0x31aa <__fp_szero>
    2ff8:	08 95       	ret

00002ffa <__fixunssfsi>:
    2ffa:	bc d0       	rcall	.+376    	; 0x3174 <__fp_splitA>
    2ffc:	88 f0       	brcs	.+34     	; 0x3020 <__fixunssfsi+0x26>
    2ffe:	9f 57       	subi	r25, 0x7F	; 127
    3000:	90 f0       	brcs	.+36     	; 0x3026 <__fixunssfsi+0x2c>
    3002:	b9 2f       	mov	r27, r25
    3004:	99 27       	eor	r25, r25
    3006:	b7 51       	subi	r27, 0x17	; 23
    3008:	a0 f0       	brcs	.+40     	; 0x3032 <__fixunssfsi+0x38>
    300a:	d1 f0       	breq	.+52     	; 0x3040 <__fixunssfsi+0x46>
    300c:	66 0f       	add	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	88 1f       	adc	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	1a f0       	brmi	.+6      	; 0x301c <__fixunssfsi+0x22>
    3016:	ba 95       	dec	r27
    3018:	c9 f7       	brne	.-14     	; 0x300c <__fixunssfsi+0x12>
    301a:	12 c0       	rjmp	.+36     	; 0x3040 <__fixunssfsi+0x46>
    301c:	b1 30       	cpi	r27, 0x01	; 1
    301e:	81 f0       	breq	.+32     	; 0x3040 <__fixunssfsi+0x46>
    3020:	c3 d0       	rcall	.+390    	; 0x31a8 <__fp_zero>
    3022:	b1 e0       	ldi	r27, 0x01	; 1
    3024:	08 95       	ret
    3026:	c0 c0       	rjmp	.+384    	; 0x31a8 <__fp_zero>
    3028:	67 2f       	mov	r22, r23
    302a:	78 2f       	mov	r23, r24
    302c:	88 27       	eor	r24, r24
    302e:	b8 5f       	subi	r27, 0xF8	; 248
    3030:	39 f0       	breq	.+14     	; 0x3040 <__fixunssfsi+0x46>
    3032:	b9 3f       	cpi	r27, 0xF9	; 249
    3034:	cc f3       	brlt	.-14     	; 0x3028 <__fixunssfsi+0x2e>
    3036:	86 95       	lsr	r24
    3038:	77 95       	ror	r23
    303a:	67 95       	ror	r22
    303c:	b3 95       	inc	r27
    303e:	d9 f7       	brne	.-10     	; 0x3036 <__fixunssfsi+0x3c>
    3040:	3e f4       	brtc	.+14     	; 0x3050 <__fixunssfsi+0x56>
    3042:	90 95       	com	r25
    3044:	80 95       	com	r24
    3046:	70 95       	com	r23
    3048:	61 95       	neg	r22
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	8f 4f       	sbci	r24, 0xFF	; 255
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	08 95       	ret

00003052 <__floatunsisf>:
    3052:	e8 94       	clt
    3054:	09 c0       	rjmp	.+18     	; 0x3068 <__floatsisf+0x12>

00003056 <__floatsisf>:
    3056:	97 fb       	bst	r25, 7
    3058:	3e f4       	brtc	.+14     	; 0x3068 <__floatsisf+0x12>
    305a:	90 95       	com	r25
    305c:	80 95       	com	r24
    305e:	70 95       	com	r23
    3060:	61 95       	neg	r22
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	8f 4f       	sbci	r24, 0xFF	; 255
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	99 23       	and	r25, r25
    306a:	a9 f0       	breq	.+42     	; 0x3096 <__floatsisf+0x40>
    306c:	f9 2f       	mov	r31, r25
    306e:	96 e9       	ldi	r25, 0x96	; 150
    3070:	bb 27       	eor	r27, r27
    3072:	93 95       	inc	r25
    3074:	f6 95       	lsr	r31
    3076:	87 95       	ror	r24
    3078:	77 95       	ror	r23
    307a:	67 95       	ror	r22
    307c:	b7 95       	ror	r27
    307e:	f1 11       	cpse	r31, r1
    3080:	f8 cf       	rjmp	.-16     	; 0x3072 <__floatsisf+0x1c>
    3082:	fa f4       	brpl	.+62     	; 0x30c2 <__floatsisf+0x6c>
    3084:	bb 0f       	add	r27, r27
    3086:	11 f4       	brne	.+4      	; 0x308c <__floatsisf+0x36>
    3088:	60 ff       	sbrs	r22, 0
    308a:	1b c0       	rjmp	.+54     	; 0x30c2 <__floatsisf+0x6c>
    308c:	6f 5f       	subi	r22, 0xFF	; 255
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	8f 4f       	sbci	r24, 0xFF	; 255
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	16 c0       	rjmp	.+44     	; 0x30c2 <__floatsisf+0x6c>
    3096:	88 23       	and	r24, r24
    3098:	11 f0       	breq	.+4      	; 0x309e <__floatsisf+0x48>
    309a:	96 e9       	ldi	r25, 0x96	; 150
    309c:	11 c0       	rjmp	.+34     	; 0x30c0 <__floatsisf+0x6a>
    309e:	77 23       	and	r23, r23
    30a0:	21 f0       	breq	.+8      	; 0x30aa <__floatsisf+0x54>
    30a2:	9e e8       	ldi	r25, 0x8E	; 142
    30a4:	87 2f       	mov	r24, r23
    30a6:	76 2f       	mov	r23, r22
    30a8:	05 c0       	rjmp	.+10     	; 0x30b4 <__floatsisf+0x5e>
    30aa:	66 23       	and	r22, r22
    30ac:	71 f0       	breq	.+28     	; 0x30ca <__floatsisf+0x74>
    30ae:	96 e8       	ldi	r25, 0x86	; 134
    30b0:	86 2f       	mov	r24, r22
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	2a f0       	brmi	.+10     	; 0x30c2 <__floatsisf+0x6c>
    30b8:	9a 95       	dec	r25
    30ba:	66 0f       	add	r22, r22
    30bc:	77 1f       	adc	r23, r23
    30be:	88 1f       	adc	r24, r24
    30c0:	da f7       	brpl	.-10     	; 0x30b8 <__floatsisf+0x62>
    30c2:	88 0f       	add	r24, r24
    30c4:	96 95       	lsr	r25
    30c6:	87 95       	ror	r24
    30c8:	97 f9       	bld	r25, 7
    30ca:	08 95       	ret

000030cc <__fp_cmp>:
    30cc:	99 0f       	add	r25, r25
    30ce:	00 08       	sbc	r0, r0
    30d0:	55 0f       	add	r21, r21
    30d2:	aa 0b       	sbc	r26, r26
    30d4:	e0 e8       	ldi	r30, 0x80	; 128
    30d6:	fe ef       	ldi	r31, 0xFE	; 254
    30d8:	16 16       	cp	r1, r22
    30da:	17 06       	cpc	r1, r23
    30dc:	e8 07       	cpc	r30, r24
    30de:	f9 07       	cpc	r31, r25
    30e0:	c0 f0       	brcs	.+48     	; 0x3112 <__fp_cmp+0x46>
    30e2:	12 16       	cp	r1, r18
    30e4:	13 06       	cpc	r1, r19
    30e6:	e4 07       	cpc	r30, r20
    30e8:	f5 07       	cpc	r31, r21
    30ea:	98 f0       	brcs	.+38     	; 0x3112 <__fp_cmp+0x46>
    30ec:	62 1b       	sub	r22, r18
    30ee:	73 0b       	sbc	r23, r19
    30f0:	84 0b       	sbc	r24, r20
    30f2:	95 0b       	sbc	r25, r21
    30f4:	39 f4       	brne	.+14     	; 0x3104 <__fp_cmp+0x38>
    30f6:	0a 26       	eor	r0, r26
    30f8:	61 f0       	breq	.+24     	; 0x3112 <__fp_cmp+0x46>
    30fa:	23 2b       	or	r18, r19
    30fc:	24 2b       	or	r18, r20
    30fe:	25 2b       	or	r18, r21
    3100:	21 f4       	brne	.+8      	; 0x310a <__fp_cmp+0x3e>
    3102:	08 95       	ret
    3104:	0a 26       	eor	r0, r26
    3106:	09 f4       	brne	.+2      	; 0x310a <__fp_cmp+0x3e>
    3108:	a1 40       	sbci	r26, 0x01	; 1
    310a:	a6 95       	lsr	r26
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	81 1d       	adc	r24, r1
    3110:	81 1d       	adc	r24, r1
    3112:	08 95       	ret

00003114 <__fp_inf>:
    3114:	97 f9       	bld	r25, 7
    3116:	9f 67       	ori	r25, 0x7F	; 127
    3118:	80 e8       	ldi	r24, 0x80	; 128
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	08 95       	ret

00003120 <__fp_nan>:
    3120:	9f ef       	ldi	r25, 0xFF	; 255
    3122:	80 ec       	ldi	r24, 0xC0	; 192
    3124:	08 95       	ret

00003126 <__fp_pscA>:
    3126:	00 24       	eor	r0, r0
    3128:	0a 94       	dec	r0
    312a:	16 16       	cp	r1, r22
    312c:	17 06       	cpc	r1, r23
    312e:	18 06       	cpc	r1, r24
    3130:	09 06       	cpc	r0, r25
    3132:	08 95       	ret

00003134 <__fp_pscB>:
    3134:	00 24       	eor	r0, r0
    3136:	0a 94       	dec	r0
    3138:	12 16       	cp	r1, r18
    313a:	13 06       	cpc	r1, r19
    313c:	14 06       	cpc	r1, r20
    313e:	05 06       	cpc	r0, r21
    3140:	08 95       	ret

00003142 <__fp_round>:
    3142:	09 2e       	mov	r0, r25
    3144:	03 94       	inc	r0
    3146:	00 0c       	add	r0, r0
    3148:	11 f4       	brne	.+4      	; 0x314e <__fp_round+0xc>
    314a:	88 23       	and	r24, r24
    314c:	52 f0       	brmi	.+20     	; 0x3162 <__fp_round+0x20>
    314e:	bb 0f       	add	r27, r27
    3150:	40 f4       	brcc	.+16     	; 0x3162 <__fp_round+0x20>
    3152:	bf 2b       	or	r27, r31
    3154:	11 f4       	brne	.+4      	; 0x315a <__fp_round+0x18>
    3156:	60 ff       	sbrs	r22, 0
    3158:	04 c0       	rjmp	.+8      	; 0x3162 <__fp_round+0x20>
    315a:	6f 5f       	subi	r22, 0xFF	; 255
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	8f 4f       	sbci	r24, 0xFF	; 255
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	08 95       	ret

00003164 <__fp_split3>:
    3164:	57 fd       	sbrc	r21, 7
    3166:	90 58       	subi	r25, 0x80	; 128
    3168:	44 0f       	add	r20, r20
    316a:	55 1f       	adc	r21, r21
    316c:	59 f0       	breq	.+22     	; 0x3184 <__fp_splitA+0x10>
    316e:	5f 3f       	cpi	r21, 0xFF	; 255
    3170:	71 f0       	breq	.+28     	; 0x318e <__fp_splitA+0x1a>
    3172:	47 95       	ror	r20

00003174 <__fp_splitA>:
    3174:	88 0f       	add	r24, r24
    3176:	97 fb       	bst	r25, 7
    3178:	99 1f       	adc	r25, r25
    317a:	61 f0       	breq	.+24     	; 0x3194 <__fp_splitA+0x20>
    317c:	9f 3f       	cpi	r25, 0xFF	; 255
    317e:	79 f0       	breq	.+30     	; 0x319e <__fp_splitA+0x2a>
    3180:	87 95       	ror	r24
    3182:	08 95       	ret
    3184:	12 16       	cp	r1, r18
    3186:	13 06       	cpc	r1, r19
    3188:	14 06       	cpc	r1, r20
    318a:	55 1f       	adc	r21, r21
    318c:	f2 cf       	rjmp	.-28     	; 0x3172 <__fp_split3+0xe>
    318e:	46 95       	lsr	r20
    3190:	f1 df       	rcall	.-30     	; 0x3174 <__fp_splitA>
    3192:	08 c0       	rjmp	.+16     	; 0x31a4 <__fp_splitA+0x30>
    3194:	16 16       	cp	r1, r22
    3196:	17 06       	cpc	r1, r23
    3198:	18 06       	cpc	r1, r24
    319a:	99 1f       	adc	r25, r25
    319c:	f1 cf       	rjmp	.-30     	; 0x3180 <__fp_splitA+0xc>
    319e:	86 95       	lsr	r24
    31a0:	71 05       	cpc	r23, r1
    31a2:	61 05       	cpc	r22, r1
    31a4:	08 94       	sec
    31a6:	08 95       	ret

000031a8 <__fp_zero>:
    31a8:	e8 94       	clt

000031aa <__fp_szero>:
    31aa:	bb 27       	eor	r27, r27
    31ac:	66 27       	eor	r22, r22
    31ae:	77 27       	eor	r23, r23
    31b0:	cb 01       	movw	r24, r22
    31b2:	97 f9       	bld	r25, 7
    31b4:	08 95       	ret

000031b6 <__gesf2>:
    31b6:	8a df       	rcall	.-236    	; 0x30cc <__fp_cmp>
    31b8:	08 f4       	brcc	.+2      	; 0x31bc <__gesf2+0x6>
    31ba:	8f ef       	ldi	r24, 0xFF	; 255
    31bc:	08 95       	ret

000031be <__mulsf3>:
    31be:	0b d0       	rcall	.+22     	; 0x31d6 <__mulsf3x>
    31c0:	c0 cf       	rjmp	.-128    	; 0x3142 <__fp_round>
    31c2:	b1 df       	rcall	.-158    	; 0x3126 <__fp_pscA>
    31c4:	28 f0       	brcs	.+10     	; 0x31d0 <__mulsf3+0x12>
    31c6:	b6 df       	rcall	.-148    	; 0x3134 <__fp_pscB>
    31c8:	18 f0       	brcs	.+6      	; 0x31d0 <__mulsf3+0x12>
    31ca:	95 23       	and	r25, r21
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <__mulsf3+0x12>
    31ce:	a2 cf       	rjmp	.-188    	; 0x3114 <__fp_inf>
    31d0:	a7 cf       	rjmp	.-178    	; 0x3120 <__fp_nan>
    31d2:	11 24       	eor	r1, r1
    31d4:	ea cf       	rjmp	.-44     	; 0x31aa <__fp_szero>

000031d6 <__mulsf3x>:
    31d6:	c6 df       	rcall	.-116    	; 0x3164 <__fp_split3>
    31d8:	a0 f3       	brcs	.-24     	; 0x31c2 <__mulsf3+0x4>

000031da <__mulsf3_pse>:
    31da:	95 9f       	mul	r25, r21
    31dc:	d1 f3       	breq	.-12     	; 0x31d2 <__mulsf3+0x14>
    31de:	95 0f       	add	r25, r21
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	55 1f       	adc	r21, r21
    31e4:	62 9f       	mul	r22, r18
    31e6:	f0 01       	movw	r30, r0
    31e8:	72 9f       	mul	r23, r18
    31ea:	bb 27       	eor	r27, r27
    31ec:	f0 0d       	add	r31, r0
    31ee:	b1 1d       	adc	r27, r1
    31f0:	63 9f       	mul	r22, r19
    31f2:	aa 27       	eor	r26, r26
    31f4:	f0 0d       	add	r31, r0
    31f6:	b1 1d       	adc	r27, r1
    31f8:	aa 1f       	adc	r26, r26
    31fa:	64 9f       	mul	r22, r20
    31fc:	66 27       	eor	r22, r22
    31fe:	b0 0d       	add	r27, r0
    3200:	a1 1d       	adc	r26, r1
    3202:	66 1f       	adc	r22, r22
    3204:	82 9f       	mul	r24, r18
    3206:	22 27       	eor	r18, r18
    3208:	b0 0d       	add	r27, r0
    320a:	a1 1d       	adc	r26, r1
    320c:	62 1f       	adc	r22, r18
    320e:	73 9f       	mul	r23, r19
    3210:	b0 0d       	add	r27, r0
    3212:	a1 1d       	adc	r26, r1
    3214:	62 1f       	adc	r22, r18
    3216:	83 9f       	mul	r24, r19
    3218:	a0 0d       	add	r26, r0
    321a:	61 1d       	adc	r22, r1
    321c:	22 1f       	adc	r18, r18
    321e:	74 9f       	mul	r23, r20
    3220:	33 27       	eor	r19, r19
    3222:	a0 0d       	add	r26, r0
    3224:	61 1d       	adc	r22, r1
    3226:	23 1f       	adc	r18, r19
    3228:	84 9f       	mul	r24, r20
    322a:	60 0d       	add	r22, r0
    322c:	21 1d       	adc	r18, r1
    322e:	82 2f       	mov	r24, r18
    3230:	76 2f       	mov	r23, r22
    3232:	6a 2f       	mov	r22, r26
    3234:	11 24       	eor	r1, r1
    3236:	9f 57       	subi	r25, 0x7F	; 127
    3238:	50 40       	sbci	r21, 0x00	; 0
    323a:	8a f0       	brmi	.+34     	; 0x325e <__mulsf3_pse+0x84>
    323c:	e1 f0       	breq	.+56     	; 0x3276 <__mulsf3_pse+0x9c>
    323e:	88 23       	and	r24, r24
    3240:	4a f0       	brmi	.+18     	; 0x3254 <__mulsf3_pse+0x7a>
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	bb 1f       	adc	r27, r27
    3248:	66 1f       	adc	r22, r22
    324a:	77 1f       	adc	r23, r23
    324c:	88 1f       	adc	r24, r24
    324e:	91 50       	subi	r25, 0x01	; 1
    3250:	50 40       	sbci	r21, 0x00	; 0
    3252:	a9 f7       	brne	.-22     	; 0x323e <__mulsf3_pse+0x64>
    3254:	9e 3f       	cpi	r25, 0xFE	; 254
    3256:	51 05       	cpc	r21, r1
    3258:	70 f0       	brcs	.+28     	; 0x3276 <__mulsf3_pse+0x9c>
    325a:	5c cf       	rjmp	.-328    	; 0x3114 <__fp_inf>
    325c:	a6 cf       	rjmp	.-180    	; 0x31aa <__fp_szero>
    325e:	5f 3f       	cpi	r21, 0xFF	; 255
    3260:	ec f3       	brlt	.-6      	; 0x325c <__mulsf3_pse+0x82>
    3262:	98 3e       	cpi	r25, 0xE8	; 232
    3264:	dc f3       	brlt	.-10     	; 0x325c <__mulsf3_pse+0x82>
    3266:	86 95       	lsr	r24
    3268:	77 95       	ror	r23
    326a:	67 95       	ror	r22
    326c:	b7 95       	ror	r27
    326e:	f7 95       	ror	r31
    3270:	e7 95       	ror	r30
    3272:	9f 5f       	subi	r25, 0xFF	; 255
    3274:	c1 f7       	brne	.-16     	; 0x3266 <__mulsf3_pse+0x8c>
    3276:	fe 2b       	or	r31, r30
    3278:	88 0f       	add	r24, r24
    327a:	91 1d       	adc	r25, r1
    327c:	96 95       	lsr	r25
    327e:	87 95       	ror	r24
    3280:	97 f9       	bld	r25, 7
    3282:	08 95       	ret

00003284 <calloc>:
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	68 9f       	mul	r22, r24
    328e:	80 01       	movw	r16, r0
    3290:	69 9f       	mul	r22, r25
    3292:	10 0d       	add	r17, r0
    3294:	78 9f       	mul	r23, r24
    3296:	10 0d       	add	r17, r0
    3298:	11 24       	eor	r1, r1
    329a:	c8 01       	movw	r24, r16
    329c:	0d d0       	rcall	.+26     	; 0x32b8 <malloc>
    329e:	ec 01       	movw	r28, r24
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	21 f0       	breq	.+8      	; 0x32ac <calloc+0x28>
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	a8 01       	movw	r20, r16
    32aa:	0b d1       	rcall	.+534    	; 0x34c2 <memset>
    32ac:	ce 01       	movw	r24, r28
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <malloc>:
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	bc 01       	movw	r22, r24
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	91 05       	cpc	r25, r1
    32c2:	10 f4       	brcc	.+4      	; 0x32c8 <malloc+0x10>
    32c4:	62 e0       	ldi	r22, 0x02	; 2
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	a0 91 9c 02 	lds	r26, 0x029C
    32cc:	b0 91 9d 02 	lds	r27, 0x029D
    32d0:	ed 01       	movw	r28, r26
    32d2:	e0 e0       	ldi	r30, 0x00	; 0
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	21 c0       	rjmp	.+66     	; 0x331e <malloc+0x66>
    32dc:	88 81       	ld	r24, Y
    32de:	99 81       	ldd	r25, Y+1	; 0x01
    32e0:	86 17       	cp	r24, r22
    32e2:	97 07       	cpc	r25, r23
    32e4:	69 f4       	brne	.+26     	; 0x3300 <malloc+0x48>
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	30 97       	sbiw	r30, 0x00	; 0
    32ec:	19 f0       	breq	.+6      	; 0x32f4 <malloc+0x3c>
    32ee:	93 83       	std	Z+3, r25	; 0x03
    32f0:	82 83       	std	Z+2, r24	; 0x02
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <malloc+0x44>
    32f4:	90 93 9d 02 	sts	0x029D, r25
    32f8:	80 93 9c 02 	sts	0x029C, r24
    32fc:	fe 01       	movw	r30, r28
    32fe:	34 c0       	rjmp	.+104    	; 0x3368 <malloc+0xb0>
    3300:	68 17       	cp	r22, r24
    3302:	79 07       	cpc	r23, r25
    3304:	38 f4       	brcc	.+14     	; 0x3314 <malloc+0x5c>
    3306:	41 15       	cp	r20, r1
    3308:	51 05       	cpc	r21, r1
    330a:	19 f0       	breq	.+6      	; 0x3312 <malloc+0x5a>
    330c:	84 17       	cp	r24, r20
    330e:	95 07       	cpc	r25, r21
    3310:	08 f4       	brcc	.+2      	; 0x3314 <malloc+0x5c>
    3312:	ac 01       	movw	r20, r24
    3314:	fe 01       	movw	r30, r28
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	9c 01       	movw	r18, r24
    331c:	e9 01       	movw	r28, r18
    331e:	20 97       	sbiw	r28, 0x00	; 0
    3320:	e9 f6       	brne	.-70     	; 0x32dc <malloc+0x24>
    3322:	41 15       	cp	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	a9 f1       	breq	.+106    	; 0x3392 <malloc+0xda>
    3328:	ca 01       	movw	r24, r20
    332a:	86 1b       	sub	r24, r22
    332c:	97 0b       	sbc	r25, r23
    332e:	04 97       	sbiw	r24, 0x04	; 4
    3330:	08 f4       	brcc	.+2      	; 0x3334 <malloc+0x7c>
    3332:	ba 01       	movw	r22, r20
    3334:	e0 e0       	ldi	r30, 0x00	; 0
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	2a c0       	rjmp	.+84     	; 0x338e <malloc+0xd6>
    333a:	8d 91       	ld	r24, X+
    333c:	9c 91       	ld	r25, X
    333e:	11 97       	sbiw	r26, 0x01	; 1
    3340:	84 17       	cp	r24, r20
    3342:	95 07       	cpc	r25, r21
    3344:	f9 f4       	brne	.+62     	; 0x3384 <malloc+0xcc>
    3346:	64 17       	cp	r22, r20
    3348:	75 07       	cpc	r23, r21
    334a:	81 f4       	brne	.+32     	; 0x336c <malloc+0xb4>
    334c:	12 96       	adiw	r26, 0x02	; 2
    334e:	8d 91       	ld	r24, X+
    3350:	9c 91       	ld	r25, X
    3352:	13 97       	sbiw	r26, 0x03	; 3
    3354:	30 97       	sbiw	r30, 0x00	; 0
    3356:	19 f0       	breq	.+6      	; 0x335e <malloc+0xa6>
    3358:	93 83       	std	Z+3, r25	; 0x03
    335a:	82 83       	std	Z+2, r24	; 0x02
    335c:	04 c0       	rjmp	.+8      	; 0x3366 <malloc+0xae>
    335e:	90 93 9d 02 	sts	0x029D, r25
    3362:	80 93 9c 02 	sts	0x029C, r24
    3366:	fd 01       	movw	r30, r26
    3368:	32 96       	adiw	r30, 0x02	; 2
    336a:	4f c0       	rjmp	.+158    	; 0x340a <malloc+0x152>
    336c:	ca 01       	movw	r24, r20
    336e:	86 1b       	sub	r24, r22
    3370:	97 0b       	sbc	r25, r23
    3372:	fd 01       	movw	r30, r26
    3374:	e8 0f       	add	r30, r24
    3376:	f9 1f       	adc	r31, r25
    3378:	61 93       	st	Z+, r22
    337a:	71 93       	st	Z+, r23
    337c:	02 97       	sbiw	r24, 0x02	; 2
    337e:	8d 93       	st	X+, r24
    3380:	9c 93       	st	X, r25
    3382:	43 c0       	rjmp	.+134    	; 0x340a <malloc+0x152>
    3384:	fd 01       	movw	r30, r26
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	9c 01       	movw	r18, r24
    338c:	d9 01       	movw	r26, r18
    338e:	10 97       	sbiw	r26, 0x00	; 0
    3390:	a1 f6       	brne	.-88     	; 0x333a <malloc+0x82>
    3392:	80 91 9a 02 	lds	r24, 0x029A
    3396:	90 91 9b 02 	lds	r25, 0x029B
    339a:	89 2b       	or	r24, r25
    339c:	41 f4       	brne	.+16     	; 0x33ae <malloc+0xf6>
    339e:	80 91 02 01 	lds	r24, 0x0102
    33a2:	90 91 03 01 	lds	r25, 0x0103
    33a6:	90 93 9b 02 	sts	0x029B, r25
    33aa:	80 93 9a 02 	sts	0x029A, r24
    33ae:	40 91 04 01 	lds	r20, 0x0104
    33b2:	50 91 05 01 	lds	r21, 0x0105
    33b6:	41 15       	cp	r20, r1
    33b8:	51 05       	cpc	r21, r1
    33ba:	41 f4       	brne	.+16     	; 0x33cc <malloc+0x114>
    33bc:	4d b7       	in	r20, 0x3d	; 61
    33be:	5e b7       	in	r21, 0x3e	; 62
    33c0:	80 91 00 01 	lds	r24, 0x0100
    33c4:	90 91 01 01 	lds	r25, 0x0101
    33c8:	48 1b       	sub	r20, r24
    33ca:	59 0b       	sbc	r21, r25
    33cc:	20 91 9a 02 	lds	r18, 0x029A
    33d0:	30 91 9b 02 	lds	r19, 0x029B
    33d4:	24 17       	cp	r18, r20
    33d6:	35 07       	cpc	r19, r21
    33d8:	b0 f4       	brcc	.+44     	; 0x3406 <malloc+0x14e>
    33da:	ca 01       	movw	r24, r20
    33dc:	82 1b       	sub	r24, r18
    33de:	93 0b       	sbc	r25, r19
    33e0:	86 17       	cp	r24, r22
    33e2:	97 07       	cpc	r25, r23
    33e4:	80 f0       	brcs	.+32     	; 0x3406 <malloc+0x14e>
    33e6:	ab 01       	movw	r20, r22
    33e8:	4e 5f       	subi	r20, 0xFE	; 254
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	84 17       	cp	r24, r20
    33ee:	95 07       	cpc	r25, r21
    33f0:	50 f0       	brcs	.+20     	; 0x3406 <malloc+0x14e>
    33f2:	42 0f       	add	r20, r18
    33f4:	53 1f       	adc	r21, r19
    33f6:	50 93 9b 02 	sts	0x029B, r21
    33fa:	40 93 9a 02 	sts	0x029A, r20
    33fe:	f9 01       	movw	r30, r18
    3400:	61 93       	st	Z+, r22
    3402:	71 93       	st	Z+, r23
    3404:	02 c0       	rjmp	.+4      	; 0x340a <malloc+0x152>
    3406:	e0 e0       	ldi	r30, 0x00	; 0
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	cf 01       	movw	r24, r30
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	08 95       	ret

00003412 <free>:
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	09 f4       	brne	.+2      	; 0x341c <free+0xa>
    341a:	50 c0       	rjmp	.+160    	; 0x34bc <free+0xaa>
    341c:	ec 01       	movw	r28, r24
    341e:	22 97       	sbiw	r28, 0x02	; 2
    3420:	1b 82       	std	Y+3, r1	; 0x03
    3422:	1a 82       	std	Y+2, r1	; 0x02
    3424:	a0 91 9c 02 	lds	r26, 0x029C
    3428:	b0 91 9d 02 	lds	r27, 0x029D
    342c:	10 97       	sbiw	r26, 0x00	; 0
    342e:	09 f1       	breq	.+66     	; 0x3472 <free+0x60>
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	ac 17       	cp	r26, r28
    3436:	bd 07       	cpc	r27, r29
    3438:	08 f1       	brcs	.+66     	; 0x347c <free+0x6a>
    343a:	bb 83       	std	Y+3, r27	; 0x03
    343c:	aa 83       	std	Y+2, r26	; 0x02
    343e:	fe 01       	movw	r30, r28
    3440:	21 91       	ld	r18, Z+
    3442:	31 91       	ld	r19, Z+
    3444:	e2 0f       	add	r30, r18
    3446:	f3 1f       	adc	r31, r19
    3448:	ae 17       	cp	r26, r30
    344a:	bf 07       	cpc	r27, r31
    344c:	79 f4       	brne	.+30     	; 0x346c <free+0x5a>
    344e:	8d 91       	ld	r24, X+
    3450:	9c 91       	ld	r25, X
    3452:	11 97       	sbiw	r26, 0x01	; 1
    3454:	28 0f       	add	r18, r24
    3456:	39 1f       	adc	r19, r25
    3458:	2e 5f       	subi	r18, 0xFE	; 254
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	39 83       	std	Y+1, r19	; 0x01
    345e:	28 83       	st	Y, r18
    3460:	12 96       	adiw	r26, 0x02	; 2
    3462:	8d 91       	ld	r24, X+
    3464:	9c 91       	ld	r25, X
    3466:	13 97       	sbiw	r26, 0x03	; 3
    3468:	9b 83       	std	Y+3, r25	; 0x03
    346a:	8a 83       	std	Y+2, r24	; 0x02
    346c:	41 15       	cp	r20, r1
    346e:	51 05       	cpc	r21, r1
    3470:	71 f4       	brne	.+28     	; 0x348e <free+0x7c>
    3472:	d0 93 9d 02 	sts	0x029D, r29
    3476:	c0 93 9c 02 	sts	0x029C, r28
    347a:	20 c0       	rjmp	.+64     	; 0x34bc <free+0xaa>
    347c:	12 96       	adiw	r26, 0x02	; 2
    347e:	8d 91       	ld	r24, X+
    3480:	9c 91       	ld	r25, X
    3482:	13 97       	sbiw	r26, 0x03	; 3
    3484:	ad 01       	movw	r20, r26
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	11 f0       	breq	.+4      	; 0x348e <free+0x7c>
    348a:	dc 01       	movw	r26, r24
    348c:	d3 cf       	rjmp	.-90     	; 0x3434 <free+0x22>
    348e:	fa 01       	movw	r30, r20
    3490:	d3 83       	std	Z+3, r29	; 0x03
    3492:	c2 83       	std	Z+2, r28	; 0x02
    3494:	21 91       	ld	r18, Z+
    3496:	31 91       	ld	r19, Z+
    3498:	e2 0f       	add	r30, r18
    349a:	f3 1f       	adc	r31, r19
    349c:	ce 17       	cp	r28, r30
    349e:	df 07       	cpc	r29, r31
    34a0:	69 f4       	brne	.+26     	; 0x34bc <free+0xaa>
    34a2:	88 81       	ld	r24, Y
    34a4:	99 81       	ldd	r25, Y+1	; 0x01
    34a6:	28 0f       	add	r18, r24
    34a8:	39 1f       	adc	r19, r25
    34aa:	2e 5f       	subi	r18, 0xFE	; 254
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	fa 01       	movw	r30, r20
    34b0:	31 83       	std	Z+1, r19	; 0x01
    34b2:	20 83       	st	Z, r18
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	93 83       	std	Z+3, r25	; 0x03
    34ba:	82 83       	std	Z+2, r24	; 0x02
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <memset>:
    34c2:	dc 01       	movw	r26, r24
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <memset+0x6>
    34c6:	6d 93       	st	X+, r22
    34c8:	41 50       	subi	r20, 0x01	; 1
    34ca:	50 40       	sbci	r21, 0x00	; 0
    34cc:	e0 f7       	brcc	.-8      	; 0x34c6 <memset+0x4>
    34ce:	08 95       	ret

000034d0 <_exit>:
    34d0:	f8 94       	cli

000034d2 <__stop_program>:
    34d2:	ff cf       	rjmp	.-2      	; 0x34d2 <__stop_program>
