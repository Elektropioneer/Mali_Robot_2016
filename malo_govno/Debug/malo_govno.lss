
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  000033ec  00003480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800300  00800300  00003680  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008bb  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027a2  00000000  00000000  0000429b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7c  00000000  00000000  00006a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e59  00000000  00000000  000075b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a0  00000000  00000000  0000a414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000afe  00000000  00000000  0000a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000318  00000000  00000000  0000b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static void led()
{
	PORTG = 0x00;
	_delay_ms(1000);
	PORTG = 0xff;
}
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       2:	00 00       	nop
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       6:	00 00       	nop
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       a:	00 00       	nop
{
    timer_callback = callback;
}

static int combination_check()
{
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c3       	rjmp	.+1784   	; 0x742 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec ee       	ldi	r30, 0xEC	; 236
      a8:	f3 e3       	ldi	r31, 0x33	; 51
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	14 e0       	ldi	r17, 0x04	; 4
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 34       	cpi	r26, 0x48	; 72
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	60 97       	sbiw	r28, 0x10	; 16
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int camera = 1;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	98 8b       	std	Y+16, r25	; 0x10
      ec:	8f 87       	std	Y+15, r24	; 0x0f


	system_init();
      ee:	0e 94 68 14 	call	0x28d0	; 0x28d0 <system_init>
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	a8 ec       	ldi	r26, 0xC8	; 200
      f8:	b2 e4       	ldi	r27, 0x42	; 66
      fa:	8b 87       	std	Y+11, r24	; 0x0b
      fc:	9c 87       	std	Y+12, r25	; 0x0c
      fe:	ad 87       	std	Y+13, r26	; 0x0d
     100:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     102:	6b 85       	ldd	r22, Y+11	; 0x0b
     104:	7c 85       	ldd	r23, Y+12	; 0x0c
     106:	8d 85       	ldd	r24, Y+13	; 0x0d
     108:	9e 85       	ldd	r25, Y+14	; 0x0e
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e4       	ldi	r19, 0x40	; 64
     10e:	4c e1       	ldi	r20, 0x1C	; 28
     110:	55 e4       	ldi	r21, 0x45	; 69
     112:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     116:	dc 01       	movw	r26, r24
     118:	cb 01       	movw	r24, r22
     11a:	8f 83       	std	Y+7, r24	; 0x07
     11c:	98 87       	std	Y+8, r25	; 0x08
     11e:	a9 87       	std	Y+9, r26	; 0x09
     120:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     122:	6f 81       	ldd	r22, Y+7	; 0x07
     124:	78 85       	ldd	r23, Y+8	; 0x08
     126:	89 85       	ldd	r24, Y+9	; 0x09
     128:	9a 85       	ldd	r25, Y+10	; 0x0a
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	5f e3       	ldi	r21, 0x3F	; 63
     132:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
     136:	88 23       	and	r24, r24
     138:	2c f4       	brge	.+10     	; 0x144 <main+0x72>
		__ticks = 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	9e 83       	std	Y+6, r25	; 0x06
     140:	8d 83       	std	Y+5, r24	; 0x05
     142:	3f c0       	rjmp	.+126    	; 0x1c2 <main+0xf0>
	else if (__tmp > 65535)
     144:	6f 81       	ldd	r22, Y+7	; 0x07
     146:	78 85       	ldd	r23, Y+8	; 0x08
     148:	89 85       	ldd	r24, Y+9	; 0x09
     14a:	9a 85       	ldd	r25, Y+10	; 0x0a
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	3f ef       	ldi	r19, 0xFF	; 255
     150:	4f e7       	ldi	r20, 0x7F	; 127
     152:	57 e4       	ldi	r21, 0x47	; 71
     154:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
     158:	18 16       	cp	r1, r24
     15a:	4c f5       	brge	.+82     	; 0x1ae <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15c:	6b 85       	ldd	r22, Y+11	; 0x0b
     15e:	7c 85       	ldd	r23, Y+12	; 0x0c
     160:	8d 85       	ldd	r24, Y+13	; 0x0d
     162:	9e 85       	ldd	r25, Y+14	; 0x0e
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e2       	ldi	r20, 0x20	; 32
     16a:	51 e4       	ldi	r21, 0x41	; 65
     16c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	bc 01       	movw	r22, r24
     176:	cd 01       	movw	r24, r26
     178:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     17c:	dc 01       	movw	r26, r24
     17e:	cb 01       	movw	r24, r22
     180:	9e 83       	std	Y+6, r25	; 0x06
     182:	8d 83       	std	Y+5, r24	; 0x05
     184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0xd2>
     186:	8a ef       	ldi	r24, 0xFA	; 250
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9c 83       	std	Y+4, r25	; 0x04
     18c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <main+0xc0>
     196:	9c 83       	std	Y+4, r25	; 0x04
     198:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	8d 81       	ldd	r24, Y+5	; 0x05
     19c:	9e 81       	ldd	r25, Y+6	; 0x06
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	9e 83       	std	Y+6, r25	; 0x06
     1a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	69 f7       	brne	.-38     	; 0x186 <main+0xb4>
     1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ae:	6f 81       	ldd	r22, Y+7	; 0x07
     1b0:	78 85       	ldd	r23, Y+8	; 0x08
     1b2:	89 85       	ldd	r24, Y+9	; 0x09
     1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	9e 83       	std	Y+6, r25	; 0x06
     1c0:	8d 83       	std	Y+5, r24	; 0x05
     1c2:	8d 81       	ldd	r24, Y+5	; 0x05
     1c4:	9e 81       	ldd	r25, Y+6	; 0x06
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0xfc>
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01
		{
			purple_camera();	
			camera = 0;
			_delay_ms(3000);
		}*/
		greenside();
     1d6:	fa d7       	rcall	.+4084   	; 0x11cc <greenside>
     1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x104>

000001da <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <servo_init+0xa>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1ec:	ad e2       	ldi	r26, 0x2D	; 45
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ed e2       	ldi	r30, 0x2D	; 45
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	88 63       	ori	r24, 0x38	; 56
     1f8:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1fa:	a4 e2       	ldi	r26, 0x24	; 36
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e4 e2       	ldi	r30, 0x24	; 36
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	80 68       	ori	r24, 0x80	; 128
     206:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     208:	e4 e9       	ldi	r30, 0x94	; 148
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	11 82       	std	Z+1, r1	; 0x01
     20e:	10 82       	st	Z, r1
	TCNT0 = 0;
     210:	e6 e4       	ldi	r30, 0x46	; 70
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	10 82       	st	Z, r1

	OCR3A = 0;
     216:	e8 e9       	ldi	r30, 0x98	; 152
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	11 82       	std	Z+1, r1	; 0x01
     21c:	10 82       	st	Z, r1
	OCR3B = 0;
     21e:	ea e9       	ldi	r30, 0x9A	; 154
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	11 82       	std	Z+1, r1	; 0x01
     224:	10 82       	st	Z, r1
	OCR3C = 0;
     226:	ec e9       	ldi	r30, 0x9C	; 156
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	11 82       	std	Z+1, r1	; 0x01
     22c:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     22e:	e0 e9       	ldi	r30, 0x90	; 144
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	8e eb       	ldi	r24, 0xBE	; 190
     234:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     236:	e1 e9       	ldi	r30, 0x91	; 145
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	8a e1       	ldi	r24, 0x1A	; 26
     23c:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     23e:	e4 e4       	ldi	r30, 0x44	; 68
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	8b e6       	ldi	r24, 0x6B	; 107
     244:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     246:	06 e9       	ldi	r16, 0x96	; 150
     248:	10 e0       	ldi	r17, 0x00	; 0
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	cc 01       	movw	r24, r24
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__floatunsisf>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	bc 01       	movw	r22, r24
     262:	cd 01       	movw	r24, r26
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	51 e4       	ldi	r21, 0x41	; 65
     26c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	9c 01       	movw	r18, r24
     276:	ad 01       	movw	r20, r26
     278:	60 e8       	ldi	r22, 0x80	; 128
     27a:	76 e9       	ldi	r23, 0x96	; 150
     27c:	88 e1       	ldi	r24, 0x18	; 24
     27e:	9b e4       	ldi	r25, 0x4B	; 75
     280:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__divsf3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	5f e3       	ldi	r21, 0x3F	; 63
     294:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__addsf3>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	bc 01       	movw	r22, r24
     29e:	cd 01       	movw	r24, r26
     2a0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	f8 01       	movw	r30, r16
     2aa:	91 83       	std	Z+1, r25	; 0x01
     2ac:	80 83       	st	Z, r24
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	df 93       	push	r29
     2c6:	cf 93       	push	r28
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <servo_set_duty_cycle_umbrella+0xe>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <servo_set_duty_cycle_umbrella+0x10>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9c 83       	std	Y+4, r25	; 0x04
     2d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2d4:	e6 e9       	ldi	r30, 0x96	; 150
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	cc 01       	movw	r24, r24
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	bc 01       	movw	r22, r24
     2e4:	cd 01       	movw	r24, r26
     2e6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__floatunsisf>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	bc 01       	movw	r22, r24
     2f0:	cd 01       	movw	r24, r26
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4f e7       	ldi	r20, 0x7F	; 127
     2f8:	53 e4       	ldi	r21, 0x43	; 67
     2fa:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__divsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	7c 01       	movw	r14, r24
     304:	8d 01       	movw	r16, r26
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	aa 27       	eor	r26, r26
     30c:	97 fd       	sbrc	r25, 7
     30e:	a0 95       	com	r26
     310:	ba 2f       	mov	r27, r26
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	c8 01       	movw	r24, r16
     320:	b7 01       	movw	r22, r14
     322:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__addsf3>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     34e:	e9 e9       	ldi	r30, 0x99	; 153
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	89 2f       	mov	r24, r25
     358:	99 27       	eor	r25, r25
     35a:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     35c:	e8 e9       	ldi	r30, 0x98	; 152
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	80 83       	st	Z, r24
}
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	cf 91       	pop	r28
     36e:	df 91       	pop	r29
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <servo_set_duty_cycle_door+0xe>
     388:	00 d0       	rcall	.+0      	; 0x38a <servo_set_duty_cycle_door+0x10>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     392:	e6 e9       	ldi	r30, 0x96	; 150
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	cc 01       	movw	r24, r24
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__floatunsisf>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4f e7       	ldi	r20, 0x7F	; 127
     3b6:	53 e4       	ldi	r21, 0x43	; 67
     3b8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__divsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	7c 01       	movw	r14, r24
     3c2:	8d 01       	movw	r16, r26
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	aa 27       	eor	r26, r26
     3ca:	97 fd       	sbrc	r25, 7
     3cc:	a0 95       	com	r26
     3ce:	ba 2f       	mov	r27, r26
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__floatsisf>
     3d8:	9b 01       	movw	r18, r22
     3da:	ac 01       	movw	r20, r24
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	5f e3       	ldi	r21, 0x3F	; 63
     3f4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__addsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	9a 83       	std	Y+2, r25	; 0x02
     40a:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     40c:	eb e9       	ldi	r30, 0x9B	; 155
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	89 2f       	mov	r24, r25
     416:	99 27       	eor	r25, r25
     418:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     41a:	ea e9       	ldi	r30, 0x9A	; 154
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	80 83       	st	Z, r24
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <servo_set_umbrella_position>:
	OCR3CL = temp & 0xFF;
}
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	0f 92       	push	r0
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	99 27       	eor	r25, r25
     448:	87 fd       	sbrc	r24, 7
     44a:	90 95       	com	r25
     44c:	a9 2f       	mov	r26, r25
     44e:	b9 2f       	mov	r27, r25
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__floatsisf>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	bc 01       	movw	r22, r24
     45e:	cd 01       	movw	r24, r26
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	44 eb       	ldi	r20, 0xB4	; 180
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__divsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	bc 01       	movw	r22, r24
     472:	cd 01       	movw	r24, r26
     474:	26 e6       	ldi	r18, 0x66	; 102
     476:	36 e6       	ldi	r19, 0x66	; 102
     478:	46 e3       	ldi	r20, 0x36	; 54
     47a:	51 ec       	ldi	r21, 0xC1	; 193
     47c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	4c e6       	ldi	r20, 0x6C	; 108
     48e:	53 e4       	ldi	r21, 0x43	; 67
     490:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__addsf3>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9c 01       	movw	r18, r24
     49a:	ad 01       	movw	r20, r26
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	8f e7       	ldi	r24, 0x7F	; 127
     4a2:	93 e4       	ldi	r25, 0x43	; 67
     4a4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__subsf3>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	bc 01       	movw	r22, r24
     4ae:	cd 01       	movw	r24, r26
     4b0:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__fixsfsi>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	01 df       	rcall	.-510    	; 0x2bc <servo_set_duty_cycle_umbrella>
}
     4ba:	0f 90       	pop	r0
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	99 27       	eor	r25, r25
     4d2:	87 fd       	sbrc	r24, 7
     4d4:	90 95       	com	r25
     4d6:	a9 2f       	mov	r26, r25
     4d8:	b9 2f       	mov	r27, r25
     4da:	bc 01       	movw	r22, r24
     4dc:	cd 01       	movw	r24, r26
     4de:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__floatsisf>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	44 eb       	ldi	r20, 0xB4	; 180
     4f0:	52 e4       	ldi	r21, 0x42	; 66
     4f2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__divsf3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	26 e6       	ldi	r18, 0x66	; 102
     500:	36 e6       	ldi	r19, 0x66	; 102
     502:	46 e3       	ldi	r20, 0x36	; 54
     504:	51 ec       	ldi	r21, 0xC1	; 193
     506:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     50a:	dc 01       	movw	r26, r24
     50c:	cb 01       	movw	r24, r22
     50e:	bc 01       	movw	r22, r24
     510:	cd 01       	movw	r24, r26
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	4c e6       	ldi	r20, 0x6C	; 108
     518:	53 e4       	ldi	r21, 0x43	; 67
     51a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__addsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	9c 01       	movw	r18, r24
     524:	ad 01       	movw	r20, r26
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	8f e7       	ldi	r24, 0x7F	; 127
     52c:	93 e4       	ldi	r25, 0x43	; 67
     52e:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__subsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	bc 01       	movw	r22, r24
     538:	cd 01       	movw	r24, r26
     53a:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__fixsfsi>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	1b df       	rcall	.-458    	; 0x37a <servo_set_duty_cycle_door>
}
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	6c 97       	sbiw	r28, 0x1c	; 28
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     560:	85 e5       	ldi	r24, 0x55	; 85
     562:	6a df       	rcall	.-300    	; 0x438 <servo_set_umbrella_position>
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	aa e7       	ldi	r26, 0x7A	; 122
     56a:	b4 e4       	ldi	r27, 0x44	; 68
     56c:	89 8f       	std	Y+25, r24	; 0x19
     56e:	9a 8f       	std	Y+26, r25	; 0x1a
     570:	ab 8f       	std	Y+27, r26	; 0x1b
     572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     574:	69 8d       	ldd	r22, Y+25	; 0x19
     576:	7a 8d       	ldd	r23, Y+26	; 0x1a
     578:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e4       	ldi	r19, 0x40	; 64
     580:	4c e1       	ldi	r20, 0x1C	; 28
     582:	55 e4       	ldi	r21, 0x45	; 69
     584:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	8d 8b       	std	Y+21, r24	; 0x15
     58e:	9e 8b       	std	Y+22, r25	; 0x16
     590:	af 8b       	std	Y+23, r26	; 0x17
     592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     594:	6d 89       	ldd	r22, Y+21	; 0x15
     596:	7e 89       	ldd	r23, Y+22	; 0x16
     598:	8f 89       	ldd	r24, Y+23	; 0x17
     59a:	98 8d       	ldd	r25, Y+24	; 0x18
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e8       	ldi	r20, 0x80	; 128
     5a2:	5f e3       	ldi	r21, 0x3F	; 63
     5a4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
     5a8:	88 23       	and	r24, r24
     5aa:	2c f4       	brge	.+10     	; 0x5b6 <actuators_umbrella+0x6a>
		__ticks = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9c 8b       	std	Y+20, r25	; 0x14
     5b2:	8b 8b       	std	Y+19, r24	; 0x13
     5b4:	3f c0       	rjmp	.+126    	; 0x634 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     5b6:	6d 89       	ldd	r22, Y+21	; 0x15
     5b8:	7e 89       	ldd	r23, Y+22	; 0x16
     5ba:	8f 89       	ldd	r24, Y+23	; 0x17
     5bc:	98 8d       	ldd	r25, Y+24	; 0x18
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	3f ef       	ldi	r19, 0xFF	; 255
     5c2:	4f e7       	ldi	r20, 0x7F	; 127
     5c4:	57 e4       	ldi	r21, 0x47	; 71
     5c6:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
     5ca:	18 16       	cp	r1, r24
     5cc:	4c f5       	brge	.+82     	; 0x620 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ce:	69 8d       	ldd	r22, Y+25	; 0x19
     5d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e2       	ldi	r20, 0x20	; 32
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	bc 01       	movw	r22, r24
     5e8:	cd 01       	movw	r24, r26
     5ea:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	9c 8b       	std	Y+20, r25	; 0x14
     5f4:	8b 8b       	std	Y+19, r24	; 0x13
     5f6:	0f c0       	rjmp	.+30     	; 0x616 <actuators_umbrella+0xca>
     5f8:	8a ef       	ldi	r24, 0xFA	; 250
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	9a 8b       	std	Y+18, r25	; 0x12
     5fe:	89 8b       	std	Y+17, r24	; 0x11
     600:	89 89       	ldd	r24, Y+17	; 0x11
     602:	9a 89       	ldd	r25, Y+18	; 0x12
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <actuators_umbrella+0xb8>
     608:	9a 8b       	std	Y+18, r25	; 0x12
     60a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     60c:	8b 89       	ldd	r24, Y+19	; 0x13
     60e:	9c 89       	ldd	r25, Y+20	; 0x14
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	9c 8b       	std	Y+20, r25	; 0x14
     614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     616:	8b 89       	ldd	r24, Y+19	; 0x13
     618:	9c 89       	ldd	r25, Y+20	; 0x14
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	69 f7       	brne	.-38     	; 0x5f8 <actuators_umbrella+0xac>
     61e:	14 c0       	rjmp	.+40     	; 0x648 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     620:	6d 89       	ldd	r22, Y+21	; 0x15
     622:	7e 89       	ldd	r23, Y+22	; 0x16
     624:	8f 89       	ldd	r24, Y+23	; 0x17
     626:	98 8d       	ldd	r25, Y+24	; 0x18
     628:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	9c 8b       	std	Y+20, r25	; 0x14
     632:	8b 8b       	std	Y+19, r24	; 0x13
     634:	8b 89       	ldd	r24, Y+19	; 0x13
     636:	9c 89       	ldd	r25, Y+20	; 0x14
     638:	98 8b       	std	Y+16, r25	; 0x10
     63a:	8f 87       	std	Y+15, r24	; 0x0f
     63c:	8f 85       	ldd	r24, Y+15	; 0x0f
     63e:	98 89       	ldd	r25, Y+16	; 0x10
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <actuators_umbrella+0xf4>
     644:	98 8b       	std	Y+16, r25	; 0x10
     646:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	3b df       	rcall	.-394    	; 0x4c2 <servo_set_door_position>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	aa e7       	ldi	r26, 0x7A	; 122
     652:	b4 e4       	ldi	r27, 0x44	; 68
     654:	8b 87       	std	Y+11, r24	; 0x0b
     656:	9c 87       	std	Y+12, r25	; 0x0c
     658:	ad 87       	std	Y+13, r26	; 0x0d
     65a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     65c:	6b 85       	ldd	r22, Y+11	; 0x0b
     65e:	7c 85       	ldd	r23, Y+12	; 0x0c
     660:	8d 85       	ldd	r24, Y+13	; 0x0d
     662:	9e 85       	ldd	r25, Y+14	; 0x0e
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e4       	ldi	r19, 0x40	; 64
     668:	4c e1       	ldi	r20, 0x1C	; 28
     66a:	55 e4       	ldi	r21, 0x45	; 69
     66c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	8f 83       	std	Y+7, r24	; 0x07
     676:	98 87       	std	Y+8, r25	; 0x08
     678:	a9 87       	std	Y+9, r26	; 0x09
     67a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     67c:	6f 81       	ldd	r22, Y+7	; 0x07
     67e:	78 85       	ldd	r23, Y+8	; 0x08
     680:	89 85       	ldd	r24, Y+9	; 0x09
     682:	9a 85       	ldd	r25, Y+10	; 0x0a
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	5f e3       	ldi	r21, 0x3F	; 63
     68c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
     690:	88 23       	and	r24, r24
     692:	2c f4       	brge	.+10     	; 0x69e <actuators_umbrella+0x152>
		__ticks = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	9e 83       	std	Y+6, r25	; 0x06
     69a:	8d 83       	std	Y+5, r24	; 0x05
     69c:	3f c0       	rjmp	.+126    	; 0x71c <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     69e:	6f 81       	ldd	r22, Y+7	; 0x07
     6a0:	78 85       	ldd	r23, Y+8	; 0x08
     6a2:	89 85       	ldd	r24, Y+9	; 0x09
     6a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	3f ef       	ldi	r19, 0xFF	; 255
     6aa:	4f e7       	ldi	r20, 0x7F	; 127
     6ac:	57 e4       	ldi	r21, 0x47	; 71
     6ae:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
     6b2:	18 16       	cp	r1, r24
     6b4:	4c f5       	brge	.+82     	; 0x708 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b6:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b8:	7c 85       	ldd	r23, Y+12	; 0x0c
     6ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     6bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	51 e4       	ldi	r21, 0x41	; 65
     6c6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
     6ca:	dc 01       	movw	r26, r24
     6cc:	cb 01       	movw	r24, r22
     6ce:	bc 01       	movw	r22, r24
     6d0:	cd 01       	movw	r24, r26
     6d2:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e 83       	std	Y+6, r25	; 0x06
     6dc:	8d 83       	std	Y+5, r24	; 0x05
     6de:	0f c0       	rjmp	.+30     	; 0x6fe <actuators_umbrella+0x1b2>
     6e0:	8a ef       	ldi	r24, 0xFA	; 250
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9c 83       	std	Y+4, r25	; 0x04
     6e6:	8b 83       	std	Y+3, r24	; 0x03
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <actuators_umbrella+0x1a0>
     6f0:	9c 83       	std	Y+4, r25	; 0x04
     6f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	9e 81       	ldd	r25, Y+6	; 0x06
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	9e 83       	std	Y+6, r25	; 0x06
     6fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	69 f7       	brne	.-38     	; 0x6e0 <actuators_umbrella+0x194>
     706:	14 c0       	rjmp	.+40     	; 0x730 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     708:	6f 81       	ldd	r22, Y+7	; 0x07
     70a:	78 85       	ldd	r23, Y+8	; 0x08
     70c:	89 85       	ldd	r24, Y+9	; 0x09
     70e:	9a 85       	ldd	r25, Y+10	; 0x0a
     710:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	8d 83       	std	Y+5, r24	; 0x05
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	9a 83       	std	Y+2, r25	; 0x02
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <actuators_umbrella+0x1dc>
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     730:	6c 96       	adiw	r28, 0x1c	; 28
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	00 90 5b 00 	lds	r0, 0x005B
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	2f 93       	push	r18
     754:	3f 93       	push	r19
     756:	4f 93       	push	r20
     758:	5f 93       	push	r21
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <__vector_18+0x2a>
     76c:	00 d0       	rcall	.+0      	; 0x76e <__vector_18+0x2c>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     772:	ed ee       	ldi	r30, 0xED	; 237
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     77a:	1b 82       	std	Y+3, r1	; 0x03
     77c:	9c c0       	rjmp	.+312    	; 0x8b6 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     77e:	ed ee       	ldi	r30, 0xED	; 237
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	82 95       	swap	r24
     786:	80 7f       	andi	r24, 0xF0	; 240
     788:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     78a:	ee ee       	ldi	r30, 0xEE	; 238
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	82 95       	swap	r24
     792:	86 95       	lsr	r24
     794:	87 70       	andi	r24, 0x07	; 7
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	81 70       	andi	r24, 0x01	; 1
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	88 23       	and	r24, r24
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <__vector_18+0x62>
     7a2:	6e c0       	rjmp	.+220    	; 0x880 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     7a4:	ef ee       	ldi	r30, 0xEF	; 239
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     7ac:	ae ee       	ldi	r26, 0xEE	; 238
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ee ee       	ldi	r30, 0xEE	; 238
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	8f 7d       	andi	r24, 0xDF	; 223
     7b8:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     7ba:	e2 ef       	ldi	r30, 0xF2	; 242
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	82 95       	swap	r24
     7c2:	86 95       	lsr	r24
     7c4:	87 70       	andi	r24, 0x07	; 7
     7c6:	28 2f       	mov	r18, r24
     7c8:	e3 ef       	ldi	r30, 0xF3	; 243
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	82 2b       	or	r24, r18
     7e0:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     7e2:	19 82       	std	Y+1, r1	; 0x01
     7e4:	2a c0       	rjmp	.+84     	; 0x83a <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	28 2f       	mov	r18, r24
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	82 1b       	sub	r24, r18
     7f2:	93 0b       	sbc	r25, r19
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	90 95       	com	r25
     7fa:	81 95       	neg	r24
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	fc 01       	movw	r30, r24
     800:	e0 50       	subi	r30, 0x00	; 0
     802:	fd 4f       	sbci	r31, 0xFD	; 253
     804:	40 81       	ld	r20, Z
     806:	51 81       	ldd	r21, Z+1	; 0x01
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	fc 01       	movw	r30, r24
     812:	ec 5e       	subi	r30, 0xEC	; 236
     814:	fc 4f       	sbci	r31, 0xFC	; 252
     816:	80 81       	ld	r24, Z
     818:	28 2f       	mov	r18, r24
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	da 01       	movw	r26, r20
     828:	a8 0f       	add	r26, r24
     82a:	b9 1f       	adc	r27, r25
     82c:	ea ef       	ldi	r30, 0xFA	; 250
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	88 30       	cpi	r24, 0x08	; 8
     83e:	98 f2       	brcs	.-90     	; 0x7e6 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	fc 01       	movw	r30, r24
     84a:	ec 5e       	subi	r30, 0xEC	; 236
     84c:	fc 4f       	sbci	r31, 0xFC	; 252
     84e:	80 81       	ld	r24, Z
     850:	8f 5f       	subi	r24, 0xFF	; 255
     852:	80 83       	st	Z, r24
     854:	80 81       	ld	r24, Z
     856:	85 30       	cpi	r24, 0x05	; 5
     858:	41 f4       	brne	.+16     	; 0x86a <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	fc 01       	movw	r30, r24
     864:	ec 5e       	subi	r30, 0xEC	; 236
     866:	fc 4f       	sbci	r31, 0xFC	; 252
     868:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	fc 01       	movw	r30, r24
     874:	e8 5d       	subi	r30, 0xD8	; 216
     876:	fc 4f       	sbci	r31, 0xFC	; 252
     878:	80 81       	ld	r24, Z
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 83       	st	Z, r24
     87e:	1f c0       	rjmp	.+62     	; 0x8be <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     880:	ee ee       	ldi	r30, 0xEE	; 238
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	82 95       	swap	r24
     888:	86 95       	lsr	r24
     88a:	86 95       	lsr	r24
     88c:	83 70       	andi	r24, 0x03	; 3
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	81 70       	andi	r24, 0x01	; 1
     894:	90 70       	andi	r25, 0x00	; 0
     896:	88 23       	and	r24, r24
     898:	59 f0       	breq	.+22     	; 0x8b0 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     89a:	ef ee       	ldi	r30, 0xEF	; 239
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     8a0:	ae ee       	ldi	r26, 0xEE	; 238
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	ee ee       	ldi	r30, 0xEE	; 238
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7b       	andi	r24, 0xBF	; 191
     8ac:	8c 93       	st	X, r24
     8ae:	07 c0       	rjmp	.+14     	; 0x8be <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	8f 30       	cpi	r24, 0x0F	; 15
     8ba:	08 f4       	brcc	.+2      	; 0x8be <__vector_18+0x17c>
     8bc:	60 cf       	rjmp	.-320    	; 0x77e <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     8be:	ed ee       	ldi	r30, 0xED	; 237
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     8c6:	aa ed       	ldi	r26, 0xDA	; 218
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	ea ed       	ldi	r30, 0xDA	; 218
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	8c 93       	st	X, r24
}
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	00 92 5b 00 	sts	0x005B, r0
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	00 d0       	rcall	.+0      	; 0x908 <CAN_InitModule+0x6>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     90c:	e8 ed       	ldi	r30, 0xD8	; 216
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     914:	1a 82       	std	Y+2, r1	; 0x02
     916:	32 c0       	rjmp	.+100    	; 0x97c <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     918:	ed ee       	ldi	r30, 0xED	; 237
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	82 95       	swap	r24
     920:	80 7f       	andi	r24, 0xF0	; 240
     922:	80 83       	st	Z, r24

		CANSTMOB = 0;
     924:	ee ee       	ldi	r30, 0xEE	; 238
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	10 82       	st	Z, r1
		CANCDMOB = 0;
     92a:	ef ee       	ldi	r30, 0xEF	; 239
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	10 82       	st	Z, r1

		CANIDT1 = 0;
     930:	e3 ef       	ldi	r30, 0xF3	; 243
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	10 82       	st	Z, r1
		CANIDT2 = 0;
     936:	e2 ef       	ldi	r30, 0xF2	; 242
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	10 82       	st	Z, r1
		CANIDT3 = 0;
     93c:	e1 ef       	ldi	r30, 0xF1	; 241
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	10 82       	st	Z, r1
		CANIDT4 = 0;
     942:	e0 ef       	ldi	r30, 0xF0	; 240
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	10 82       	st	Z, r1
		CANIDM1 = 0;
     948:	e7 ef       	ldi	r30, 0xF7	; 247
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	10 82       	st	Z, r1
		CANIDM2 = 0;
     94e:	e6 ef       	ldi	r30, 0xF6	; 246
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	10 82       	st	Z, r1
		CANIDM3 = 0;
     954:	e5 ef       	ldi	r30, 0xF5	; 245
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	10 82       	st	Z, r1
		CANIDM4 = 0;
     95a:	e4 ef       	ldi	r30, 0xF4	; 244
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     960:	19 82       	std	Y+1, r1	; 0x01
     962:	06 c0       	rjmp	.+12     	; 0x970 <CAN_InitModule+0x6e>
			CANMSG = 0;
     964:	ea ef       	ldi	r30, 0xFA	; 250
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	88 30       	cpi	r24, 0x08	; 8
     974:	b8 f3       	brcs	.-18     	; 0x964 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	8f 30       	cpi	r24, 0x0F	; 15
     980:	58 f2       	brcs	.-106    	; 0x918 <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     982:	e8 ed       	ldi	r30, 0xD8	; 216
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     98a:	e2 ee       	ldi	r30, 0xE2	; 226
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     992:	e3 ee       	ldi	r30, 0xE3	; 227
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	88 e0       	ldi	r24, 0x08	; 8
     998:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     99a:	e4 ee       	ldi	r30, 0xE4	; 228
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	8e e5       	ldi	r24, 0x5E	; 94
     9a0:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     9a2:	e5 ee       	ldi	r30, 0xE5	; 229
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     9a8:	eb ed       	ldi	r30, 0xDB	; 219
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 eb       	ldi	r24, 0xB0	; 176
     9ae:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     9b0:	ef ed       	ldi	r30, 0xDF	; 223
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	8f e7       	ldi	r24, 0x7F	; 127
     9b6:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     9b8:	ee ed       	ldi	r30, 0xDE	; 222
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	80 83       	st	Z, r24
	sei();
     9c0:	78 94       	sei
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	08 95       	ret

000009cc <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     9cc:	df 93       	push	r29
     9ce:	cf 93       	push	r28
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <CAN_InitRxMob+0x6>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <CAN_InitRxMob+0x8>
     9d4:	0f 92       	push	r0
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	9c 83       	std	Y+4, r25	; 0x04
     9dc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     9de:	ed ee       	ldi	r30, 0xED	; 237
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     9e6:	e9 ed       	ldi	r30, 0xD9	; 217
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	82 95       	swap	r24
     9ee:	8f 70       	andi	r24, 0x0F	; 15
     9f0:	88 2f       	mov	r24, r24
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	81 70       	andi	r24, 0x01	; 1
     9f6:	90 70       	andi	r25, 0x00	; 0
     9f8:	88 23       	and	r24, r24
     9fa:	a9 f7       	brne	.-22     	; 0x9e6 <CAN_InitRxMob+0x1a>
     9fc:	e9 ed       	ldi	r30, 0xD9	; 217
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	86 95       	lsr	r24
     a04:	86 95       	lsr	r24
     a06:	86 95       	lsr	r24
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	88 23       	and	r24, r24
     a12:	49 f7       	brne	.-46     	; 0x9e6 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a14:	1a 82       	std	Y+2, r1	; 0x02
     a16:	3f c0       	rjmp	.+126    	; 0xa96 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     a18:	ed ee       	ldi	r30, 0xED	; 237
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	8a 81       	ldd	r24, Y+2	; 0x02
     a1e:	82 95       	swap	r24
     a20:	80 7f       	andi	r24, 0xF0	; 240
     a22:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     a24:	ef ee       	ldi	r30, 0xEF	; 239
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	82 95       	swap	r24
     a2c:	86 95       	lsr	r24
     a2e:	86 95       	lsr	r24
     a30:	83 70       	andi	r24, 0x03	; 3
     a32:	88 23       	and	r24, r24
     a34:	69 f5       	brne	.+90     	; 0xa90 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     a36:	ef ee       	ldi	r30, 0xEF	; 239
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     a3e:	e3 ef       	ldi	r30, 0xF3	; 243
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	90 70       	andi	r25, 0x00	; 0
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     a56:	e2 ef       	ldi	r30, 0xF2	; 242
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	82 95       	swap	r24
     a5e:	88 0f       	add	r24, r24
     a60:	80 7e       	andi	r24, 0xE0	; 224
     a62:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     a64:	e6 ef       	ldi	r30, 0xF6	; 246
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 ee       	ldi	r24, 0xE0	; 224
     a6a:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     a6c:	e7 ef       	ldi	r30, 0xF7	; 247
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     a74:	af ee       	ldi	r26, 0xEF	; 239
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	ef ee       	ldi	r30, 0xEF	; 239
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     a82:	ed ee       	ldi	r30, 0xED	; 237
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	80 83       	st	Z, r24

		return 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	8d 83       	std	Y+5, r24	; 0x05
     a8e:	0c c0       	rjmp	.+24     	; 0xaa8 <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	8a 83       	std	Y+2, r24	; 0x02
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	8f 30       	cpi	r24, 0x0F	; 15
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <CAN_InitRxMob+0xd2>
     a9c:	bd cf       	rjmp	.-134    	; 0xa18 <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     a9e:	ed ee       	ldi	r30, 0xED	; 237
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	80 83       	st	Z, r24

	return 0;
     aa6:	1d 82       	std	Y+5, r1	; 0x05
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <CAN_Init+0xa>
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     aca:	1b df       	rcall	.-458    	; 0x902 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     acc:	19 82       	std	Y+1, r1	; 0x01
     ace:	36 c0       	rjmp	.+108    	; 0xb3c <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	79 df       	rcall	.-270    	; 0x9cc <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	8c 01       	movw	r16, r24
     ae6:	00 50       	subi	r16, 0x00	; 0
     ae8:	1d 4f       	sbci	r17, 0xFD	; 253
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	0e 94 ce 18 	call	0x319c	; 0x319c <calloc>
     af6:	f8 01       	movw	r30, r16
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	48 2f       	mov	r20, r24
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	88 2f       	mov	r24, r24
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	fc 01       	movw	r30, r24
     b10:	e8 5d       	subi	r30, 0xD8	; 216
     b12:	fc 4f       	sbci	r31, 0xFC	; 252
     b14:	10 82       	st	Z, r1
     b16:	fc 01       	movw	r30, r24
     b18:	e8 5d       	subi	r30, 0xD8	; 216
     b1a:	fc 4f       	sbci	r31, 0xFC	; 252
     b1c:	80 81       	ld	r24, Z
     b1e:	f9 01       	movw	r30, r18
     b20:	e2 5e       	subi	r30, 0xE2	; 226
     b22:	fc 4f       	sbci	r31, 0xFC	; 252
     b24:	80 83       	st	Z, r24
     b26:	f9 01       	movw	r30, r18
     b28:	e2 5e       	subi	r30, 0xE2	; 226
     b2a:	fc 4f       	sbci	r31, 0xFC	; 252
     b2c:	80 81       	ld	r24, Z
     b2e:	fa 01       	movw	r30, r20
     b30:	ec 5e       	subi	r30, 0xEC	; 236
     b32:	fc 4f       	sbci	r31, 0xFC	; 252
     b34:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	99 81       	ldd	r25, Y+1	; 0x01
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	98 17       	cp	r25, r24
     b42:	30 f2       	brcs	.-116    	; 0xad0 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	00 d0       	rcall	.+0      	; 0xb58 <CAN_Read+0x6>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <CAN_Read+0x8>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     b64:	e4 e3       	ldi	r30, 0x34	; 52
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	fc 01       	movw	r30, r24
     b76:	e8 5d       	subi	r30, 0xD8	; 216
     b78:	fc 4f       	sbci	r31, 0xFC	; 252
     b7a:	80 81       	ld	r24, Z
     b7c:	88 23       	and	r24, r24
     b7e:	b1 f3       	breq	.-20     	; 0xb6c <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     b80:	19 82       	std	Y+1, r1	; 0x01
     b82:	30 c0       	rjmp	.+96     	; 0xbe4 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	dc 01       	movw	r26, r24
     b90:	a2 0f       	add	r26, r18
     b92:	b3 1f       	adc	r27, r19
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	82 1b       	sub	r24, r18
     ba0:	93 0b       	sbc	r25, r19
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	90 95       	com	r25
     ba8:	81 95       	neg	r24
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	fc 01       	movw	r30, r24
     bae:	e0 50       	subi	r30, 0x00	; 0
     bb0:	fd 4f       	sbci	r31, 0xFD	; 253
     bb2:	40 81       	ld	r20, Z
     bb4:	51 81       	ldd	r21, Z+1	; 0x01
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 5e       	subi	r30, 0xE2	; 226
     bc2:	fc 4f       	sbci	r31, 0xFC	; 252
     bc4:	80 81       	ld	r24, Z
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	82 0f       	add	r24, r18
     bd2:	93 1f       	adc	r25, r19
     bd4:	fa 01       	movw	r30, r20
     bd6:	e8 0f       	add	r30, r24
     bd8:	f9 1f       	adc	r31, r25
     bda:	80 81       	ld	r24, Z
     bdc:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	68 f2       	brcs	.-102    	; 0xb84 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	fc 01       	movw	r30, r24
     bf4:	e2 5e       	subi	r30, 0xE2	; 226
     bf6:	fc 4f       	sbci	r31, 0xFC	; 252
     bf8:	80 81       	ld	r24, Z
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 83       	st	Z, r24
     bfe:	80 81       	ld	r24, Z
     c00:	85 30       	cpi	r24, 0x05	; 5
     c02:	41 f4       	brne	.+16     	; 0xc14 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	fc 01       	movw	r30, r24
     c0e:	e2 5e       	subi	r30, 0xE2	; 226
     c10:	fc 4f       	sbci	r31, 0xFC	; 252
     c12:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 01       	movw	r18, r24
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	30 40       	sbci	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	e8 5d       	subi	r30, 0xD8	; 216
     c24:	fc 4f       	sbci	r31, 0xFC	; 252
     c26:	80 81       	ld	r24, Z
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	f9 01       	movw	r30, r18
     c2c:	e8 5d       	subi	r30, 0xD8	; 216
     c2e:	fc 4f       	sbci	r31, 0xFC	; 252
     c30:	80 83       	st	Z, r24

	return 0;
     c32:	80 e0       	ldi	r24, 0x00	; 0
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	27 97       	sbiw	r28, 0x07	; 7
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	9d 83       	std	Y+5, r25	; 0x05
     c58:	8c 83       	std	Y+4, r24	; 0x04
     c5a:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c5c:	e9 ed       	ldi	r30, 0xD9	; 217
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	82 95       	swap	r24
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	81 70       	andi	r24, 0x01	; 1
     c6c:	90 70       	andi	r25, 0x00	; 0
     c6e:	88 23       	and	r24, r24
     c70:	a9 f7       	brne	.-22     	; 0xc5c <CAN_Write+0x1a>
     c72:	e9 ed       	ldi	r30, 0xD9	; 217
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	86 95       	lsr	r24
     c7a:	86 95       	lsr	r24
     c7c:	86 95       	lsr	r24
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	88 23       	and	r24, r24
     c88:	49 f7       	brne	.-46     	; 0xc5c <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c8a:	ed ee       	ldi	r30, 0xED	; 237
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c92:	1a 82       	std	Y+2, r1	; 0x02
     c94:	12 c0       	rjmp	.+36     	; 0xcba <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     c96:	ed ee       	ldi	r30, 0xED	; 237
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	82 95       	swap	r24
     c9e:	80 7f       	andi	r24, 0xF0	; 240
     ca0:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     ca2:	ef ee       	ldi	r30, 0xEF	; 239
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	82 95       	swap	r24
     caa:	86 95       	lsr	r24
     cac:	86 95       	lsr	r24
     cae:	83 70       	andi	r24, 0x03	; 3
     cb0:	88 23       	and	r24, r24
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	8a 83       	std	Y+2, r24	; 0x02
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	8f 30       	cpi	r24, 0x0F	; 15
     cbe:	58 f3       	brcs	.-42     	; 0xc96 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	8f 30       	cpi	r24, 0x0F	; 15
     cc4:	19 f4       	brne	.+6      	; 0xccc <CAN_Write+0x8a>
		return -1;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	8f 83       	std	Y+7, r24	; 0x07
     cca:	32 c0       	rjmp	.+100    	; 0xd30 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     ccc:	e2 ef       	ldi	r30, 0xF2	; 242
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	82 95       	swap	r24
     cd4:	88 0f       	add	r24, r24
     cd6:	80 7e       	andi	r24, 0xE0	; 224
     cd8:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     cda:	e3 ef       	ldi	r30, 0xF3	; 243
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	86 95       	lsr	r24
     ce2:	86 95       	lsr	r24
     ce4:	86 95       	lsr	r24
     ce6:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     ce8:	ef ee       	ldi	r30, 0xEF	; 239
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	88 e0       	ldi	r24, 0x08	; 8
     cee:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     cf0:	1b 82       	std	Y+3, r1	; 0x03
     cf2:	0f c0       	rjmp	.+30     	; 0xd12 <CAN_Write+0xd0>
		CANMSG = data[i];
     cf4:	aa ef       	ldi	r26, 0xFA	; 250
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	80 81       	ld	r24, Z
     d0a:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	88 30       	cpi	r24, 0x08	; 8
     d16:	70 f3       	brcs	.-36     	; 0xcf4 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     d18:	af ee       	ldi	r26, 0xEF	; 239
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ef ee       	ldi	r30, 0xEF	; 239
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     d26:	ed ee       	ldi	r30, 0xED	; 237
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	80 83       	st	Z, r24

	return 0;
     d2e:	1f 82       	std	Y+7, r1	; 0x07
     d30:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d32:	27 96       	adiw	r28, 0x07	; 7
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	2c 97       	sbiw	r28, 0x0c	; 12
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	89 87       	std	Y+9, r24	; 0x09
     d5a:	6a 87       	std	Y+10, r22	; 0x0a
     d5c:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d5e:	80 91 08 01 	lds	r24, 0x0108
     d62:	90 91 09 01 	lds	r25, 0x0109
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	06 97       	sbiw	r24, 0x06	; 6
     d70:	98 87       	std	Y+8, r25	; 0x08
     d72:	8f 83       	std	Y+7, r24	; 0x07
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     d76:	ef 81       	ldd	r30, Y+7	; 0x07
     d78:	f8 85       	ldd	r31, Y+8	; 0x08
     d7a:	90 81       	ld	r25, Z
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	98 17       	cp	r25, r24
     d80:	19 f4       	brne	.+6      	; 0xd88 <gpio_register_pin+0x44>
            return 1;
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	2c 87       	std	Y+12, r18	; 0x0c
     d86:	c9 c0       	rjmp	.+402    	; 0xf1a <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d88:	ef 81       	ldd	r30, Y+7	; 0x07
     d8a:	f8 85       	ldd	r31, Y+8	; 0x08
     d8c:	80 85       	ldd	r24, Z+8	; 0x08
     d8e:	91 85       	ldd	r25, Z+9	; 0x09
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	06 97       	sbiw	r24, 0x06	; 6
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	8f 83       	std	Y+7, r24	; 0x07
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	98 85       	ldd	r25, Y+8	; 0x08
     da2:	06 96       	adiw	r24, 0x06	; 6
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	86 30       	cpi	r24, 0x06	; 6
     da8:	92 07       	cpc	r25, r18
     daa:	29 f7       	brne	.-54     	; 0xd76 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	87 70       	andi	r24, 0x07	; 7
     dbc:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <gpio_register_pin+0x82>
     dc4:	48 c0       	rjmp	.+144    	; 0xe56 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     dc6:	8e 81       	ldd	r24, Y+6	; 0x06
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	c9 01       	movw	r24, r18
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	4e 96       	adiw	r24, 0x1e	; 30
     dd8:	dc 01       	movw	r26, r24
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	c9 01       	movw	r24, r18
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	4e 96       	adiw	r24, 0x1e	; 30
     dec:	fc 01       	movw	r30, r24
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <gpio_register_pin+0xbe>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	2a 95       	dec	r18
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <gpio_register_pin+0xba>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	c9 01       	movw	r24, r18
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	4f 96       	adiw	r24, 0x1f	; 31
     e1c:	dc 01       	movw	r26, r24
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	4f 96       	adiw	r24, 0x1f	; 31
     e30:	fc 01       	movw	r30, r24
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <gpio_register_pin+0x104>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <gpio_register_pin+0x100>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
        return 0;
     e52:	1c 86       	std	Y+12, r1	; 0x0c
     e54:	62 c0       	rjmp	.+196    	; 0xf1a <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	c9 01       	movw	r24, r18
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	4e 96       	adiw	r24, 0x1e	; 30
     e68:	dc 01       	movw	r26, r24
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	c9 01       	movw	r24, r18
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	4e 96       	adiw	r24, 0x1e	; 30
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <gpio_register_pin+0x14e>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	2a 95       	dec	r18
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <gpio_register_pin+0x14a>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	c9 01       	movw	r24, r18
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	4f 96       	adiw	r24, 0x1f	; 31
     eae:	dc 01       	movw	r26, r24
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	c9 01       	movw	r24, r18
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	4f 96       	adiw	r24, 0x1f	; 31
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <gpio_register_pin+0x194>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	2a 95       	dec	r18
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <gpio_register_pin+0x190>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <malloc>
     ee8:	98 87       	std	Y+8, r25	; 0x08
     eea:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	19 f4       	brne	.+6      	; 0xefa <gpio_register_pin+0x1b6>
        return 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8c 87       	std	Y+12, r24	; 0x0c
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <gpio_register_pin+0x1d6>

    input->pin       = pin;
     efa:	ef 81       	ldd	r30, Y+7	; 0x07
     efc:	f8 85       	ldd	r31, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     f02:	ef 81       	ldd	r30, Y+7	; 0x07
     f04:	f8 85       	ldd	r31, Y+8	; 0x08
     f06:	8b 85       	ldd	r24, Y+11	; 0x0b
     f08:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07
     f0c:	98 85       	ldd	r25, Y+8	; 0x08
     f0e:	06 96       	adiw	r24, 0x06	; 6
     f10:	26 e0       	ldi	r18, 0x06	; 6
     f12:	31 e0       	ldi	r19, 0x01	; 1
     f14:	b9 01       	movw	r22, r18
     f16:	0b d0       	rcall	.+22     	; 0xf2e <list_add>

    return 0;
     f18:	1c 86       	std	Y+12, r1	; 0x0c
     f1a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     f1c:	2c 96       	adiw	r28, 0x0c	; 12
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <list_add+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <list_add+0x8>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	7c 83       	std	Y+4, r23	; 0x04
     f40:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f42:	eb 81       	ldd	r30, Y+3	; 0x03
     f44:	fc 81       	ldd	r31, Y+4	; 0x04
     f46:	42 81       	ldd	r20, Z+2	; 0x02
     f48:	53 81       	ldd	r21, Z+3	; 0x03
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	2b 81       	ldd	r18, Y+3	; 0x03
     f50:	3c 81       	ldd	r19, Y+4	; 0x04
     f52:	b9 01       	movw	r22, r18
     f54:	07 d0       	rcall	.+14     	; 0xf64 <__list_add>
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <__list_add+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <__list_add+0x8>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <__list_add+0xa>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	7c 83       	std	Y+4, r23	; 0x04
     f78:	6b 83       	std	Y+3, r22	; 0x03
     f7a:	5e 83       	std	Y+6, r21	; 0x06
     f7c:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f7e:	ed 81       	ldd	r30, Y+5	; 0x05
     f80:	fe 81       	ldd	r31, Y+6	; 0x06
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
    new->next = next;
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	93 83       	std	Z+3, r25	; 0x03
     f94:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
    prev->next = new;
     fa2:	eb 81       	ldd	r30, Y+3	; 0x03
     fa4:	fc 81       	ldd	r31, Y+4	; 0x04
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	93 83       	std	Z+3, r25	; 0x03
     fac:	82 83       	std	Z+2, r24	; 0x02
}
     fae:	26 96       	adiw	r28, 0x06	; 6
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <__gpio_read_pin+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	86 95       	lsr	r24
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	87 70       	andi	r24, 0x07	; 7
     fde:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	c9 01       	movw	r24, r18
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	4d 96       	adiw	r24, 0x1d	; 29
     ff2:	fc 01       	movw	r30, r24
     ff4:	80 81       	ld	r24, Z
     ff6:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__gpio_read_pin+0x4c>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <__gpio_read_pin+0x48>
    1010:	ca 01       	movw	r24, r20
    1012:	81 70       	andi	r24, 0x01	; 1
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	2b 97       	sbiw	r28, 0x0b	; 11
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1036:	80 91 08 01 	lds	r24, 0x0108
    103a:	90 91 09 01 	lds	r25, 0x0109
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	06 97       	sbiw	r24, 0x06	; 6
    1048:	98 87       	std	Y+8, r25	; 0x08
    104a:	8f 83       	std	Y+7, r24	; 0x07
    104c:	55 c0       	rjmp	.+170    	; 0x10f8 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    104e:	ef 81       	ldd	r30, Y+7	; 0x07
    1050:	f8 85       	ldd	r31, Y+8	; 0x08
    1052:	90 81       	ld	r25, Z
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	98 17       	cp	r25, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <gpio_read_pin+0x3c>
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    105c:	1c 82       	std	Y+4, r1	; 0x04
    105e:	21 c0       	rjmp	.+66     	; 0x10a2 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8f 81       	ldd	r24, Y+7	; 0x07
    1068:	98 85       	ldd	r25, Y+8	; 0x08
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	fc 01       	movw	r30, r24
    1070:	32 96       	adiw	r30, 0x02	; 2
    1072:	40 81       	ld	r20, Z
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 01       	movw	r18, r24
    107c:	2f 5f       	subi	r18, 0xFF	; 255
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	fc 01       	movw	r30, r24
    108a:	32 96       	adiw	r30, 0x02	; 2
    108c:	80 81       	ld	r24, Z
    108e:	48 17       	cp	r20, r24
    1090:	29 f0       	breq	.+10     	; 0x109c <gpio_read_pin+0x7c>
                    return input->previous_state;
    1092:	ef 81       	ldd	r30, Y+7	; 0x07
    1094:	f8 85       	ldd	r31, Y+8	; 0x08
    1096:	25 81       	ldd	r18, Z+5	; 0x05
    1098:	2b 87       	std	Y+11, r18	; 0x0b
    109a:	38 c0       	rjmp	.+112    	; 0x110c <__stack+0xd>
                i++;
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	e0 f2       	brcs	.-72     	; 0x1060 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    10a8:	ef 81       	ldd	r30, Y+7	; 0x07
    10aa:	f8 85       	ldd	r31, Y+8	; 0x08
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 27       	eor	r24, r25
    10b2:	88 23       	and	r24, r24
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <gpio_read_pin+0xa0>
    10b6:	ef 81       	ldd	r30, Y+7	; 0x07
    10b8:	f8 85       	ldd	r31, Y+8	; 0x08
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	8a 87       	std	Y+10, r24	; 0x0a
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <gpio_read_pin+0xb0>
    10c0:	ef 81       	ldd	r30, Y+7	; 0x07
    10c2:	f8 85       	ldd	r31, Y+8	; 0x08
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	1a 86       	std	Y+10, r1	; 0x0a
    10c8:	88 23       	and	r24, r24
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <gpio_read_pin+0xb0>
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	2a 87       	std	Y+10, r18	; 0x0a
    10d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d2:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    10d4:	ef 81       	ldd	r30, Y+7	; 0x07
    10d6:	f8 85       	ldd	r31, Y+8	; 0x08
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	85 83       	std	Z+5, r24	; 0x05

            return state;
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	2b 87       	std	Y+11, r18	; 0x0b
    10e0:	15 c0       	rjmp	.+42     	; 0x110c <__stack+0xd>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10e2:	ef 81       	ldd	r30, Y+7	; 0x07
    10e4:	f8 85       	ldd	r31, Y+8	; 0x08
    10e6:	80 85       	ldd	r24, Z+8	; 0x08
    10e8:	91 85       	ldd	r25, Z+9	; 0x09
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	06 97       	sbiw	r24, 0x06	; 6
    10f4:	98 87       	std	Y+8, r25	; 0x08
    10f6:	8f 83       	std	Y+7, r24	; 0x07
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	06 96       	adiw	r24, 0x06	; 6
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    1100:	86 30       	cpi	r24, 0x06	; 6
    1102:	92 07       	cpc	r25, r18
    1104:	09 f0       	breq	.+2      	; 0x1108 <__stack+0x9>
    1106:	a3 cf       	rjmp	.-186    	; 0x104e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	8b 87       	std	Y+11, r24	; 0x0b
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    110e:	2b 96       	adiw	r28, 0x0b	; 11
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <gpio_debouncer+0xa>
    112a:	00 d0       	rcall	.+0      	; 0x112c <gpio_debouncer+0xc>
    112c:	00 d0       	rcall	.+0      	; 0x112e <gpio_debouncer+0xe>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1132:	80 91 08 01 	lds	r24, 0x0108
    1136:	90 91 09 01 	lds	r25, 0x0109
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	8b 83       	std	Y+3, r24	; 0x03
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	06 97       	sbiw	r24, 0x06	; 6
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	1b c0       	rjmp	.+54     	; 0x1180 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    114a:	00 91 32 03 	lds	r16, 0x0332
    114e:	10 91 33 03 	lds	r17, 0x0333
    1152:	ed 81       	ldd	r30, Y+5	; 0x05
    1154:	fe 81       	ldd	r31, Y+6	; 0x06
    1156:	80 81       	ld	r24, Z
    1158:	33 df       	rcall	.-410    	; 0xfc0 <__gpio_read_pin>
    115a:	28 2f       	mov	r18, r24
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	80 0f       	add	r24, r16
    1162:	91 1f       	adc	r25, r17
    1164:	fc 01       	movw	r30, r24
    1166:	32 96       	adiw	r30, 0x02	; 2
    1168:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    116a:	ed 81       	ldd	r30, Y+5	; 0x05
    116c:	fe 81       	ldd	r31, Y+6	; 0x06
    116e:	80 85       	ldd	r24, Z+8	; 0x08
    1170:	91 85       	ldd	r25, Z+9	; 0x09
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	06 97       	sbiw	r24, 0x06	; 6
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	06 96       	adiw	r24, 0x06	; 6
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	92 07       	cpc	r25, r18
    118c:	f1 f6       	brne	.-68     	; 0x114a <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    118e:	80 91 32 03 	lds	r24, 0x0332
    1192:	90 91 33 03 	lds	r25, 0x0333
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	90 93 33 03 	sts	0x0333, r25
    119c:	80 93 32 03 	sts	0x0332, r24
    11a0:	80 91 32 03 	lds	r24, 0x0332
    11a4:	90 91 33 03 	lds	r25, 0x0333
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <gpio_debouncer+0x96>
        count = 0;
    11ae:	10 92 33 03 	sts	0x0333, r1
    11b2:	10 92 32 03 	sts	0x0332, r1
	
}
    11b6:	26 96       	adiw	r28, 0x06	; 6
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <greenside>:
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}
};

void greenside(void)
{
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	c1 56       	subi	r28, 0x61	; 97
    11da:	d0 40       	sbci	r29, 0x00	; 0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    11e6:	fe 01       	movw	r30, r28
    11e8:	e8 5a       	subi	r30, 0xA8	; 168
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	10 82       	st	Z, r1
	uint8_t next_position = 0; 
    11ee:	fe 01       	movw	r30, r28
    11f0:	e9 5a       	subi	r30, 0xA9	; 169
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	10 82       	st	Z, r1
	uint8_t odometry_status;
	//uint8_t active_state;
	uint8_t active_state = ROBOT_STATE_TACTIC_THREE;
    11f6:	fe 01       	movw	r30, r28
    11f8:	eb 5a       	subi	r30, 0xAB	; 171
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	80 83       	st	Z, r24

	starting_position.x     = 185;
    1200:	fe 01       	movw	r30, r28
    1202:	e7 5a       	subi	r30, 0xA7	; 167
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	89 eb       	ldi	r24, 0xB9	; 185
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
	starting_position.y     = 990;
    120e:	fe 01       	movw	r30, r28
    1210:	e7 5a       	subi	r30, 0xA7	; 167
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	8e ed       	ldi	r24, 0xDE	; 222
    1216:	93 e0       	ldi	r25, 0x03	; 3
    1218:	93 83       	std	Z+3, r25	; 0x03
    121a:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = -90;
    121c:	fe 01       	movw	r30, r28
    121e:	e7 5a       	subi	r30, 0xA7	; 167
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	86 ea       	ldi	r24, 0xA6	; 166
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	95 83       	std	Z+5, r25	; 0x05
    1228:	84 83       	std	Z+4, r24	; 0x04
	 
	odometry_set_position(&starting_position);
    122a:	ce 01       	movw	r24, r28
    122c:	87 5a       	subi	r24, 0xA7	; 167
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	0e 94 14 12 	call	0x2428	; 0x2428 <odometry_set_position>
	 
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    1234:	de 01       	movw	r26, r28
    1236:	a8 5a       	subi	r26, 0xA8	; 168
    1238:	bf 4f       	sbci	r27, 0xFF	; 255
    123a:	fe 01       	movw	r30, r28
    123c:	e9 5a       	subi	r30, 0xA9	; 169
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 81       	ld	r24, Z
    1242:	8c 93       	st	X, r24
    1244:	32 c1       	rjmp	.+612    	; 0x14aa <greenside+0x2de>
	{
		odometry_status = odometry_move_to_position(&(green_camera[current_position].point), green_camera[current_position].speed,
    1246:	fe 01       	movw	r30, r28
    1248:	e8 5a       	subi	r30, 0xA8	; 168
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	ca 01       	movw	r24, r20
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	9c 01       	movw	r18, r24
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	84 0f       	add	r24, r20
    1268:	95 1f       	adc	r25, r21
    126a:	8f 5e       	subi	r24, 0xEF	; 239
    126c:	9e 4f       	sbci	r25, 0xFE	; 254
    126e:	bc 01       	movw	r22, r24
    1270:	fe 01       	movw	r30, r28
    1272:	e8 5a       	subi	r30, 0xA8	; 168
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	ca 01       	movw	r24, r20
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	9c 01       	movw	r18, r24
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	82 0f       	add	r24, r18
    128e:	93 1f       	adc	r25, r19
    1290:	84 0f       	add	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	fc 01       	movw	r30, r24
    1296:	e8 5e       	subi	r30, 0xE8	; 232
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	a0 81       	ld	r26, Z
    129c:	fe 01       	movw	r30, r28
    129e:	e8 5a       	subi	r30, 0xA8	; 168
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	ca 01       	movw	r24, r20
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	84 0f       	add	r24, r20
    12be:	95 1f       	adc	r25, r21
    12c0:	fc 01       	movw	r30, r24
    12c2:	e7 5e       	subi	r30, 0xE7	; 231
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	80 81       	ld	r24, Z
    12c8:	b8 2f       	mov	r27, r24
    12ca:	fe 01       	movw	r30, r28
    12cc:	e8 5a       	subi	r30, 0xA8	; 168
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	ca 01       	movw	r24, r20
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	84 0f       	add	r24, r20
    12ec:	95 1f       	adc	r25, r21
    12ee:	fc 01       	movw	r30, r24
    12f0:	e6 5e       	subi	r30, 0xE6	; 230
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	20 81       	ld	r18, Z
    12f6:	31 81       	ldd	r19, Z+1	; 0x01
    12f8:	cb 01       	movw	r24, r22
    12fa:	6a 2f       	mov	r22, r26
    12fc:	4b 2f       	mov	r20, r27
    12fe:	e1 d7       	rcall	.+4034   	; 0x22c2 <odometry_move_to_position>
    1300:	fe 01       	movw	r30, r28
    1302:	ea 5a       	subi	r30, 0xAA	; 170
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 83       	st	Z, r24
		green_camera[current_position].direction,green_camera[current_position].callback);
		if(odometry_status == ODOMETRY_FAIL)
    1308:	fe 01       	movw	r30, r28
    130a:	ea 5a       	subi	r30, 0xAA	; 170
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	80 81       	ld	r24, Z
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	09 f4       	brne	.+2      	; 0x1316 <greenside+0x14a>
    1314:	d1 c0       	rjmp	.+418    	; 0x14b8 <greenside+0x2ec>
		}
		else if(current_position == 0)
		{
			//_delay_ms(1000);
		}
		if(current_position == 3)
    1316:	fe 01       	movw	r30, r28
    1318:	e8 5a       	subi	r30, 0xA8	; 168
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 81       	ld	r24, Z
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	09 f0       	breq	.+2      	; 0x1324 <greenside+0x158>
    1322:	ba c0       	rjmp	.+372    	; 0x1498 <greenside+0x2cc>
		{
			odometry_rotate(-80,LOW_SPEED,NULL);                     //rotira se da dodje u poziciju za slikanje kamere
    1324:	80 eb       	ldi	r24, 0xB0	; 176
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	6e e1       	ldi	r22, 0x1E	; 30
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <odometry_rotate>
    1332:	fe 01       	movw	r30, r28
    1334:	ef 5a       	subi	r30, 0xAF	; 175
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	aa ef       	ldi	r26, 0xFA	; 250
    133e:	b4 e4       	ldi	r27, 0x44	; 68
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1348:	8e 01       	movw	r16, r28
    134a:	03 5b       	subi	r16, 0xB3	; 179
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	ef 5a       	subi	r30, 0xAF	; 175
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e4       	ldi	r19, 0x40	; 64
    1360:	4c e1       	ldi	r20, 0x1C	; 28
    1362:	55 e4       	ldi	r21, 0x45	; 69
    1364:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	80 83       	st	Z, r24
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	a2 83       	std	Z+2, r26	; 0x02
    1374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1376:	fe 01       	movw	r30, r28
    1378:	e3 5b       	subi	r30, 0xB3	; 179
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1390:	88 23       	and	r24, r24
    1392:	44 f4       	brge	.+16     	; 0x13a4 <greenside+0x1d8>
		__ticks = 1;
    1394:	fe 01       	movw	r30, r28
    1396:	e5 5b       	subi	r30, 0xB5	; 181
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	64 c0       	rjmp	.+200    	; 0x146c <greenside+0x2a0>
	else if (__tmp > 65535)
    13a4:	fe 01       	movw	r30, r28
    13a6:	e3 5b       	subi	r30, 0xB3	; 179
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    13be:	18 16       	cp	r1, r24
    13c0:	0c f0       	brlt	.+2      	; 0x13c4 <greenside+0x1f8>
    13c2:	43 c0       	rjmp	.+134    	; 0x144a <greenside+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 5a       	subi	r30, 0xAF	; 175
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8e 01       	movw	r16, r28
    13e4:	05 5b       	subi	r16, 0xB5	; 181
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	f8 01       	movw	r30, r16
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	80 83       	st	Z, r24
    13fa:	1f c0       	rjmp	.+62     	; 0x143a <greenside+0x26e>
    13fc:	fe 01       	movw	r30, r28
    13fe:	e7 5b       	subi	r30, 0xB7	; 183
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	8a ef       	ldi	r24, 0xFA	; 250
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5b       	subi	r30, 0xB7	; 183
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <greenside+0x248>
    1418:	fe 01       	movw	r30, r28
    141a:	e7 5b       	subi	r30, 0xB7	; 183
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	de 01       	movw	r26, r28
    1424:	a5 5b       	subi	r26, 0xB5	; 181
    1426:	bf 4f       	sbci	r27, 0xFF	; 255
    1428:	fe 01       	movw	r30, r28
    142a:	e5 5b       	subi	r30, 0xB5	; 181
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143a:	fe 01       	movw	r30, r28
    143c:	e5 5b       	subi	r30, 0xB5	; 181
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	d1 f6       	brne	.-76     	; 0x13fc <greenside+0x230>
    1448:	27 c0       	rjmp	.+78     	; 0x1498 <greenside+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	8e 01       	movw	r16, r28
    144c:	05 5b       	subi	r16, 0xB5	; 181
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	e3 5b       	subi	r30, 0xB3	; 179
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
    146c:	de 01       	movw	r26, r28
    146e:	a9 5b       	subi	r26, 0xB9	; 185
    1470:	bf 4f       	sbci	r27, 0xFF	; 255
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5b       	subi	r30, 0xB5	; 181
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	8d 93       	st	X+, r24
    147e:	9c 93       	st	X, r25
    1480:	fe 01       	movw	r30, r28
    1482:	e9 5b       	subi	r30, 0xB9	; 185
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <greenside+0x2be>
    148e:	fe 01       	movw	r30, r28
    1490:	e9 5b       	subi	r30, 0xB9	; 185
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
	starting_position.y     = 990;
	starting_position.angle = -90;
	 
	odometry_set_position(&starting_position);
	 
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    1498:	de 01       	movw	r26, r28
    149a:	a8 5a       	subi	r26, 0xA8	; 168
    149c:	bf 4f       	sbci	r27, 0xFF	; 255
    149e:	fe 01       	movw	r30, r28
    14a0:	e8 5a       	subi	r30, 0xA8	; 168
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	8c 93       	st	X, r24
    14aa:	fe 01       	movw	r30, r28
    14ac:	e8 5a       	subi	r30, 0xA8	; 168
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	84 30       	cpi	r24, 0x04	; 4
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <greenside+0x2ec>
    14b6:	c7 ce       	rjmp	.-626    	; 0x1246 <greenside+0x7a>
		}
	}//end for
	
	while(1)
	{
		switch(active_state)
    14b8:	fe 01       	movw	r30, r28
    14ba:	eb 5a       	subi	r30, 0xAB	; 171
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	a2 96       	adiw	r28, 0x22	; 34
    14c6:	3f af       	std	Y+63, r19	; 0x3f
    14c8:	2e af       	std	Y+62, r18	; 0x3e
    14ca:	a2 97       	sbiw	r28, 0x22	; 34
    14cc:	a2 96       	adiw	r28, 0x22	; 34
    14ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    14d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    14d2:	a2 97       	sbiw	r28, 0x22	; 34
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <greenside+0x310>
    14da:	36 c1       	rjmp	.+620    	; 0x1748 <greenside+0x57c>
    14dc:	a2 96       	adiw	r28, 0x22	; 34
    14de:	ee ad       	ldd	r30, Y+62	; 0x3e
    14e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    14e2:	a2 97       	sbiw	r28, 0x22	; 34
    14e4:	e5 30       	cpi	r30, 0x05	; 5
    14e6:	f1 05       	cpc	r31, r1
    14e8:	84 f4       	brge	.+32     	; 0x150a <greenside+0x33e>
    14ea:	a2 96       	adiw	r28, 0x22	; 34
    14ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    14ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    14f0:	a2 97       	sbiw	r28, 0x22	; 34
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	d1 f0       	breq	.+52     	; 0x152c <greenside+0x360>
    14f8:	a2 96       	adiw	r28, 0x22	; 34
    14fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    14fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    14fe:	a2 97       	sbiw	r28, 0x22	; 34
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <greenside+0x33c>
    1506:	99 c0       	rjmp	.+306    	; 0x163a <greenside+0x46e>
    1508:	d7 cf       	rjmp	.-82     	; 0x14b8 <greenside+0x2ec>
    150a:	a2 96       	adiw	r28, 0x22	; 34
    150c:	ee ad       	ldd	r30, Y+62	; 0x3e
    150e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1510:	a2 97       	sbiw	r28, 0x22	; 34
    1512:	e5 30       	cpi	r30, 0x05	; 5
    1514:	f1 05       	cpc	r31, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <greenside+0x34e>
    1518:	39 c3       	rjmp	.+1650   	; 0x1b8c <greenside+0x9c0>
    151a:	a2 96       	adiw	r28, 0x22	; 34
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	a2 97       	sbiw	r28, 0x22	; 34
    1522:	26 30       	cpi	r18, 0x06	; 6
    1524:	31 05       	cpc	r19, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <greenside+0x35e>
    1528:	b3 c4       	rjmp	.+2406   	; 0x1e90 <greenside+0xcc4>
    152a:	c6 cf       	rjmp	.-116    	; 0x14b8 <greenside+0x2ec>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    152c:	fe 01       	movw	r30, r28
    152e:	e8 5a       	subi	r30, 0xA8	; 168
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	de 01       	movw	r26, r28
    1534:	a9 5a       	subi	r26, 0xA9	; 169
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	8c 91       	ld	r24, X
    153a:	80 83       	st	Z, r24
    153c:	77 c0       	rjmp	.+238    	; 0x162c <greenside+0x460>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    153e:	fe 01       	movw	r30, r28
    1540:	e8 5a       	subi	r30, 0xA8	; 168
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	ca 01       	movw	r24, r20
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	9c 01       	movw	r18, r24
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	82 0f       	add	r24, r18
    155c:	93 1f       	adc	r25, r19
    155e:	84 0f       	add	r24, r20
    1560:	95 1f       	adc	r25, r21
    1562:	83 5c       	subi	r24, 0xC3	; 195
    1564:	9e 4f       	sbci	r25, 0xFE	; 254
    1566:	bc 01       	movw	r22, r24
    1568:	fe 01       	movw	r30, r28
    156a:	e8 5a       	subi	r30, 0xA8	; 168
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	ca 01       	movw	r24, r20
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	9c 01       	movw	r18, r24
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	82 0f       	add	r24, r18
    1586:	93 1f       	adc	r25, r19
    1588:	84 0f       	add	r24, r20
    158a:	95 1f       	adc	r25, r21
    158c:	fc 01       	movw	r30, r24
    158e:	ec 5b       	subi	r30, 0xBC	; 188
    1590:	fe 4f       	sbci	r31, 0xFE	; 254
    1592:	a0 81       	ld	r26, Z
    1594:	fe 01       	movw	r30, r28
    1596:	e8 5a       	subi	r30, 0xA8	; 168
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	ca 01       	movw	r24, r20
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	9c 01       	movw	r18, r24
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	84 0f       	add	r24, r20
    15b6:	95 1f       	adc	r25, r21
    15b8:	fc 01       	movw	r30, r24
    15ba:	eb 5b       	subi	r30, 0xBB	; 187
    15bc:	fe 4f       	sbci	r31, 0xFE	; 254
    15be:	80 81       	ld	r24, Z
    15c0:	b8 2f       	mov	r27, r24
    15c2:	fe 01       	movw	r30, r28
    15c4:	e8 5a       	subi	r30, 0xA8	; 168
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	ca 01       	movw	r24, r20
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	9c 01       	movw	r18, r24
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	84 0f       	add	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	fc 01       	movw	r30, r24
    15e8:	ea 5b       	subi	r30, 0xBA	; 186
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	20 81       	ld	r18, Z
    15ee:	31 81       	ldd	r19, Z+1	; 0x01
    15f0:	cb 01       	movw	r24, r22
    15f2:	6a 2f       	mov	r22, r26
    15f4:	4b 2f       	mov	r20, r27
    15f6:	65 d6       	rcall	.+3274   	; 0x22c2 <odometry_move_to_position>
    15f8:	fe 01       	movw	r30, r28
    15fa:	ea 5a       	subi	r30, 0xAA	; 170
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1600:	fe 01       	movw	r30, r28
    1602:	ea 5a       	subi	r30, 0xAA	; 170
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	b9 f0       	breq	.+46     	; 0x163a <greenside+0x46e>
					{
						break;
					}
					if(current_position == 0)
    160c:	fe 01       	movw	r30, r28
    160e:	e8 5a       	subi	r30, 0xA8	; 168
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <greenside+0x44e>
    1618:	ff cf       	rjmp	.-2      	; 0x1618 <greenside+0x44c>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    161a:	de 01       	movw	r26, r28
    161c:	a8 5a       	subi	r26, 0xA8	; 168
    161e:	bf 4f       	sbci	r27, 0xFF	; 255
    1620:	fe 01       	movw	r30, r28
    1622:	e8 5a       	subi	r30, 0xA8	; 168
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8c 93       	st	X, r24
    162c:	fe 01       	movw	r30, r28
    162e:	e8 5a       	subi	r30, 0xA8	; 168
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	88 23       	and	r24, r24
    1636:	09 f4       	brne	.+2      	; 0x163a <greenside+0x46e>
    1638:	82 cf       	rjmp	.-252    	; 0x153e <greenside+0x372>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    163a:	fe 01       	movw	r30, r28
    163c:	e8 5a       	subi	r30, 0xA8	; 168
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	de 01       	movw	r26, r28
    1642:	a9 5a       	subi	r26, 0xA9	; 169
    1644:	bf 4f       	sbci	r27, 0xFF	; 255
    1646:	8c 91       	ld	r24, X
    1648:	80 83       	st	Z, r24
    164a:	77 c0       	rjmp	.+238    	; 0x173a <greenside+0x56e>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_two_positions[current_position].point), green_tactic_two_positions[current_position].speed,
    164c:	fe 01       	movw	r30, r28
    164e:	e8 5a       	subi	r30, 0xA8	; 168
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	ca 01       	movw	r24, r20
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	9c 01       	movw	r18, r24
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
    1668:	82 0f       	add	r24, r18
    166a:	93 1f       	adc	r25, r19
    166c:	84 0f       	add	r24, r20
    166e:	95 1f       	adc	r25, r21
    1670:	88 5b       	subi	r24, 0xB8	; 184
    1672:	9e 4f       	sbci	r25, 0xFE	; 254
    1674:	bc 01       	movw	r22, r24
    1676:	fe 01       	movw	r30, r28
    1678:	e8 5a       	subi	r30, 0xA8	; 168
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	ca 01       	movw	r24, r20
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	9c 01       	movw	r18, r24
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	82 0f       	add	r24, r18
    1694:	93 1f       	adc	r25, r19
    1696:	84 0f       	add	r24, r20
    1698:	95 1f       	adc	r25, r21
    169a:	fc 01       	movw	r30, r24
    169c:	e1 5b       	subi	r30, 0xB1	; 177
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	a0 81       	ld	r26, Z
    16a2:	fe 01       	movw	r30, r28
    16a4:	e8 5a       	subi	r30, 0xA8	; 168
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	ca 01       	movw	r24, r20
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	9c 01       	movw	r18, r24
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	84 0f       	add	r24, r20
    16c4:	95 1f       	adc	r25, r21
    16c6:	fc 01       	movw	r30, r24
    16c8:	e0 5b       	subi	r30, 0xB0	; 176
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	80 81       	ld	r24, Z
    16ce:	b8 2f       	mov	r27, r24
    16d0:	fe 01       	movw	r30, r28
    16d2:	e8 5a       	subi	r30, 0xA8	; 168
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	ca 01       	movw	r24, r20
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	9c 01       	movw	r18, r24
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	84 0f       	add	r24, r20
    16f2:	95 1f       	adc	r25, r21
    16f4:	fc 01       	movw	r30, r24
    16f6:	ef 5a       	subi	r30, 0xAF	; 175
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	20 81       	ld	r18, Z
    16fc:	31 81       	ldd	r19, Z+1	; 0x01
    16fe:	cb 01       	movw	r24, r22
    1700:	6a 2f       	mov	r22, r26
    1702:	4b 2f       	mov	r20, r27
    1704:	de d5       	rcall	.+3004   	; 0x22c2 <odometry_move_to_position>
    1706:	fe 01       	movw	r30, r28
    1708:	ea 5a       	subi	r30, 0xAA	; 170
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 83       	st	Z, r24
					green_tactic_two_positions[current_position].direction,green_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    170e:	fe 01       	movw	r30, r28
    1710:	ea 5a       	subi	r30, 0xAA	; 170
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	b9 f0       	breq	.+46     	; 0x1748 <greenside+0x57c>
					{
						break;
					}
					if(current_position == 0)
    171a:	fe 01       	movw	r30, r28
    171c:	e8 5a       	subi	r30, 0xA8	; 168
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	88 23       	and	r24, r24
    1724:	09 f4       	brne	.+2      	; 0x1728 <greenside+0x55c>
    1726:	ff cf       	rjmp	.-2      	; 0x1726 <greenside+0x55a>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    1728:	de 01       	movw	r26, r28
    172a:	a8 5a       	subi	r26, 0xA8	; 168
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e8 5a       	subi	r30, 0xA8	; 168
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	8c 93       	st	X, r24
    173a:	fe 01       	movw	r30, r28
    173c:	e8 5a       	subi	r30, 0xA8	; 168
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <greenside+0x57c>
    1746:	82 cf       	rjmp	.-252    	; 0x164c <greenside+0x480>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    1748:	fe 01       	movw	r30, r28
    174a:	e8 5a       	subi	r30, 0xA8	; 168
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	de 01       	movw	r26, r28
    1750:	a9 5a       	subi	r26, 0xA9	; 169
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	8c 91       	ld	r24, X
    1756:	80 83       	st	Z, r24
    1758:	12 c2       	rjmp	.+1060   	; 0x1b7e <greenside+0x9b2>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_three_positions[current_position].point), green_tactic_three_positions[current_position].speed,
    175a:	fe 01       	movw	r30, r28
    175c:	e8 5a       	subi	r30, 0xA8	; 168
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	ca 01       	movw	r24, r20
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	9c 01       	movw	r18, r24
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	82 0f       	add	r24, r18
    1778:	93 1f       	adc	r25, r19
    177a:	84 0f       	add	r24, r20
    177c:	95 1f       	adc	r25, r21
    177e:	8d 5a       	subi	r24, 0xAD	; 173
    1780:	9e 4f       	sbci	r25, 0xFE	; 254
    1782:	bc 01       	movw	r22, r24
    1784:	fe 01       	movw	r30, r28
    1786:	e8 5a       	subi	r30, 0xA8	; 168
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	ca 01       	movw	r24, r20
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	9c 01       	movw	r18, r24
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	84 0f       	add	r24, r20
    17a6:	95 1f       	adc	r25, r21
    17a8:	fc 01       	movw	r30, r24
    17aa:	e6 5a       	subi	r30, 0xA6	; 166
    17ac:	fe 4f       	sbci	r31, 0xFE	; 254
    17ae:	a0 81       	ld	r26, Z
    17b0:	fe 01       	movw	r30, r28
    17b2:	e8 5a       	subi	r30, 0xA8	; 168
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	ca 01       	movw	r24, r20
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	9c 01       	movw	r18, r24
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	82 0f       	add	r24, r18
    17ce:	93 1f       	adc	r25, r19
    17d0:	84 0f       	add	r24, r20
    17d2:	95 1f       	adc	r25, r21
    17d4:	fc 01       	movw	r30, r24
    17d6:	e5 5a       	subi	r30, 0xA5	; 165
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	80 81       	ld	r24, Z
    17dc:	b8 2f       	mov	r27, r24
    17de:	fe 01       	movw	r30, r28
    17e0:	e8 5a       	subi	r30, 0xA8	; 168
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	ca 01       	movw	r24, r20
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	9c 01       	movw	r18, r24
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	82 0f       	add	r24, r18
    17fc:	93 1f       	adc	r25, r19
    17fe:	84 0f       	add	r24, r20
    1800:	95 1f       	adc	r25, r21
    1802:	fc 01       	movw	r30, r24
    1804:	e4 5a       	subi	r30, 0xA4	; 164
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	cb 01       	movw	r24, r22
    180e:	6a 2f       	mov	r22, r26
    1810:	4b 2f       	mov	r20, r27
    1812:	57 d5       	rcall	.+2734   	; 0x22c2 <odometry_move_to_position>
    1814:	fe 01       	movw	r30, r28
    1816:	ea 5a       	subi	r30, 0xAA	; 170
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 83       	st	Z, r24
					green_tactic_three_positions[current_position].direction,green_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    181c:	fe 01       	movw	r30, r28
    181e:	ea 5a       	subi	r30, 0xAA	; 170
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	09 f4       	brne	.+2      	; 0x182a <greenside+0x65e>
    1828:	b1 c1       	rjmp	.+866    	; 0x1b8c <greenside+0x9c0>
					{
						break;
					}
					else if(current_position == 15)
    182a:	fe 01       	movw	r30, r28
    182c:	e8 5a       	subi	r30, 0xA8	; 168
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	8f 30       	cpi	r24, 0x0F	; 15
    1834:	09 f0       	breq	.+2      	; 0x1838 <greenside+0x66c>
    1836:	86 c0       	rjmp	.+268    	; 0x1944 <greenside+0x778>
    1838:	fe 01       	movw	r30, r28
    183a:	ed 5b       	subi	r30, 0xBD	; 189
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	aa e7       	ldi	r26, 0x7A	; 122
    1844:	b4 e4       	ldi	r27, 0x44	; 68
    1846:	80 83       	st	Z, r24
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	a2 83       	std	Z+2, r26	; 0x02
    184c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	8e 01       	movw	r16, r28
    1850:	01 5c       	subi	r16, 0xC1	; 193
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	fe 01       	movw	r30, r28
    1856:	ed 5b       	subi	r30, 0xBD	; 189
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e4       	ldi	r19, 0x40	; 64
    1866:	4c e1       	ldi	r20, 0x1C	; 28
    1868:	55 e4       	ldi	r21, 0x45	; 69
    186a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	80 83       	st	Z, r24
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	a2 83       	std	Z+2, r26	; 0x02
    187a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    187c:	fe 01       	movw	r30, r28
    187e:	ff 96       	adiw	r30, 0x3f	; 63
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <greenside+0x6d6>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e af       	std	Y+62, r25	; 0x3e
    189e:	8d af       	std	Y+61, r24	; 0x3d
    18a0:	46 c0       	rjmp	.+140    	; 0x192e <greenside+0x762>
	else if (__tmp > 65535)
    18a2:	fe 01       	movw	r30, r28
    18a4:	ff 96       	adiw	r30, 0x3f	; 63
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	64 f5       	brge	.+88     	; 0x1916 <greenside+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 5b       	subi	r30, 0xBD	; 189
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9e af       	std	Y+62, r25	; 0x3e
    18ea:	8d af       	std	Y+61, r24	; 0x3d
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <greenside+0x740>
    18ee:	8a ef       	ldi	r24, 0xFA	; 250
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9c af       	std	Y+60, r25	; 0x3c
    18f4:	8b af       	std	Y+59, r24	; 0x3b
    18f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    18f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <greenside+0x72e>
    18fe:	9c af       	std	Y+60, r25	; 0x3c
    1900:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	8d ad       	ldd	r24, Y+61	; 0x3d
    1904:	9e ad       	ldd	r25, Y+62	; 0x3e
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	9e af       	std	Y+62, r25	; 0x3e
    190a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	8d ad       	ldd	r24, Y+61	; 0x3d
    190e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f7       	brne	.-38     	; 0x18ee <greenside+0x722>
    1914:	2b c1       	rjmp	.+598    	; 0x1b6c <greenside+0x9a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	fe 01       	movw	r30, r28
    1918:	ff 96       	adiw	r30, 0x3f	; 63
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e af       	std	Y+62, r25	; 0x3e
    192c:	8d af       	std	Y+61, r24	; 0x3d
    192e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1930:	9e ad       	ldd	r25, Y+62	; 0x3e
    1932:	9a af       	std	Y+58, r25	; 0x3a
    1934:	89 af       	std	Y+57, r24	; 0x39
    1936:	89 ad       	ldd	r24, Y+57	; 0x39
    1938:	9a ad       	ldd	r25, Y+58	; 0x3a
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <greenside+0x76e>
    193e:	9a af       	std	Y+58, r25	; 0x3a
    1940:	89 af       	std	Y+57, r24	; 0x39
    1942:	14 c1       	rjmp	.+552    	; 0x1b6c <greenside+0x9a0>
					{
						_delay_ms(1000);
					}
					else if(current_position == 4)
    1944:	fe 01       	movw	r30, r28
    1946:	e8 5a       	subi	r30, 0xA8	; 168
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	09 f4       	brne	.+2      	; 0x1952 <greenside+0x786>
    1950:	0d c1       	rjmp	.+538    	; 0x1b6c <greenside+0x9a0>
					{
						//servo left grabber up
					}
					else if(current_position == 4 || current_position == 12 || current_position == 14 || current_position == 16)
    1952:	fe 01       	movw	r30, r28
    1954:	e8 5a       	subi	r30, 0xA8	; 168
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	99 f0       	breq	.+38     	; 0x1984 <greenside+0x7b8>
    195e:	fe 01       	movw	r30, r28
    1960:	e8 5a       	subi	r30, 0xA8	; 168
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	8c 30       	cpi	r24, 0x0C	; 12
    1968:	69 f0       	breq	.+26     	; 0x1984 <greenside+0x7b8>
    196a:	fe 01       	movw	r30, r28
    196c:	e8 5a       	subi	r30, 0xA8	; 168
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	8e 30       	cpi	r24, 0x0E	; 14
    1974:	39 f0       	breq	.+14     	; 0x1984 <greenside+0x7b8>
    1976:	fe 01       	movw	r30, r28
    1978:	e8 5a       	subi	r30, 0xA8	; 168
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	80 31       	cpi	r24, 0x10	; 16
    1980:	09 f0       	breq	.+2      	; 0x1984 <greenside+0x7b8>
    1982:	73 c0       	rjmp	.+230    	; 0x1a6a <greenside+0x89e>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e8       	ldi	r25, 0x80	; 128
    1988:	ab eb       	ldi	r26, 0xBB	; 187
    198a:	b4 e4       	ldi	r27, 0x44	; 68
    198c:	8d ab       	std	Y+53, r24	; 0x35
    198e:	9e ab       	std	Y+54, r25	; 0x36
    1990:	af ab       	std	Y+55, r26	; 0x37
    1992:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	6d a9       	ldd	r22, Y+53	; 0x35
    1996:	7e a9       	ldd	r23, Y+54	; 0x36
    1998:	8f a9       	ldd	r24, Y+55	; 0x37
    199a:	98 ad       	ldd	r25, Y+56	; 0x38
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e4       	ldi	r19, 0x40	; 64
    19a0:	4c e1       	ldi	r20, 0x1C	; 28
    19a2:	55 e4       	ldi	r21, 0x45	; 69
    19a4:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	89 ab       	std	Y+49, r24	; 0x31
    19ae:	9a ab       	std	Y+50, r25	; 0x32
    19b0:	ab ab       	std	Y+51, r26	; 0x33
    19b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19b4:	69 a9       	ldd	r22, Y+49	; 0x31
    19b6:	7a a9       	ldd	r23, Y+50	; 0x32
    19b8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ba:	9c a9       	ldd	r25, Y+52	; 0x34
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <greenside+0x80a>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	98 ab       	std	Y+48, r25	; 0x30
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <greenside+0x888>
	else if (__tmp > 65535)
    19d6:	69 a9       	ldd	r22, Y+49	; 0x31
    19d8:	7a a9       	ldd	r23, Y+50	; 0x32
    19da:	8b a9       	ldd	r24, Y+51	; 0x33
    19dc:	9c a9       	ldd	r25, Y+52	; 0x34
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <greenside+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	6d a9       	ldd	r22, Y+53	; 0x35
    19f0:	7e a9       	ldd	r23, Y+54	; 0x36
    19f2:	8f a9       	ldd	r24, Y+55	; 0x37
    19f4:	98 ad       	ldd	r25, Y+56	; 0x38
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	98 ab       	std	Y+48, r25	; 0x30
    1a14:	8f a7       	std	Y+47, r24	; 0x2f
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <greenside+0x86a>
    1a18:	8a ef       	ldi	r24, 0xFA	; 250
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e a7       	std	Y+46, r25	; 0x2e
    1a1e:	8d a7       	std	Y+45, r24	; 0x2d
    1a20:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a22:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <greenside+0x858>
    1a28:	9e a7       	std	Y+46, r25	; 0x2e
    1a2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	98 ab       	std	Y+48, r25	; 0x30
    1a34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a38:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <greenside+0x84c>
    1a3e:	96 c0       	rjmp	.+300    	; 0x1b6c <greenside+0x9a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	69 a9       	ldd	r22, Y+49	; 0x31
    1a42:	7a a9       	ldd	r23, Y+50	; 0x32
    1a44:	8b a9       	ldd	r24, Y+51	; 0x33
    1a46:	9c a9       	ldd	r25, Y+52	; 0x34
    1a48:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	98 ab       	std	Y+48, r25	; 0x30
    1a52:	8f a7       	std	Y+47, r24	; 0x2f
    1a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a56:	98 a9       	ldd	r25, Y+48	; 0x30
    1a58:	9c a7       	std	Y+44, r25	; 0x2c
    1a5a:	8b a7       	std	Y+43, r24	; 0x2b
    1a5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <greenside+0x894>
    1a64:	9c a7       	std	Y+44, r25	; 0x2c
    1a66:	8b a7       	std	Y+43, r24	; 0x2b
    1a68:	81 c0       	rjmp	.+258    	; 0x1b6c <greenside+0x9a0>
					{
						_delay_ms(1500);
					}
					else if(current_position == 9)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e8 5a       	subi	r30, 0xA8	; 168
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	89 30       	cpi	r24, 0x09	; 9
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <greenside+0x8ac>
    1a76:	73 c0       	rjmp	.+230    	; 0x1b5e <greenside+0x992>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e4       	ldi	r25, 0x40	; 64
    1a7c:	ac e1       	ldi	r26, 0x1C	; 28
    1a7e:	b6 e4       	ldi	r27, 0x46	; 70
    1a80:	8f a3       	std	Y+39, r24	; 0x27
    1a82:	98 a7       	std	Y+40, r25	; 0x28
    1a84:	a9 a7       	std	Y+41, r26	; 0x29
    1a86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e4       	ldi	r19, 0x40	; 64
    1a94:	4c e1       	ldi	r20, 0x1C	; 28
    1a96:	55 e4       	ldi	r21, 0x45	; 69
    1a98:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8b a3       	std	Y+35, r24	; 0x23
    1aa2:	9c a3       	std	Y+36, r25	; 0x24
    1aa4:	ad a3       	std	Y+37, r26	; 0x25
    1aa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1aac:	8d a1       	ldd	r24, Y+37	; 0x25
    1aae:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <greenside+0x8fe>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <greenside+0x97c>
	else if (__tmp > 65535)
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <greenside+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9a a3       	std	Y+34, r25	; 0x22
    1b08:	89 a3       	std	Y+33, r24	; 0x21
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <greenside+0x95e>
    1b0c:	8a ef       	ldi	r24, 0xFA	; 250
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	8f 8f       	std	Y+31, r24	; 0x1f
    1b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b16:	98 a1       	ldd	r25, Y+32	; 0x20
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <greenside+0x94c>
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <greenside+0x940>
    1b32:	1c c0       	rjmp	.+56     	; 0x1b6c <greenside+0x9a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9a a3       	std	Y+34, r25	; 0x22
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <greenside+0x988>
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <greenside+0x9a0>
					{
						_delay_ms(10000);
					}
					else if(current_position == 18)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e8 5a       	subi	r30, 0xA8	; 168
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	82 31       	cpi	r24, 0x12	; 18
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <greenside+0x9a0>
    1b6a:	ff cf       	rjmp	.-2      	; 0x1b6a <greenside+0x99e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    1b6c:	de 01       	movw	r26, r28
    1b6e:	a8 5a       	subi	r26, 0xA8	; 168
    1b70:	bf 4f       	sbci	r27, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e8 5a       	subi	r30, 0xA8	; 168
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	8c 93       	st	X, r24
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e8 5a       	subi	r30, 0xA8	; 168
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	83 31       	cpi	r24, 0x13	; 19
    1b88:	08 f4       	brcc	.+2      	; 0x1b8c <greenside+0x9c0>
    1b8a:	e7 cd       	rjmp	.-1074   	; 0x175a <greenside+0x58e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e8 5a       	subi	r30, 0xA8	; 168
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	de 01       	movw	r26, r28
    1b94:	a9 5a       	subi	r26, 0xA9	; 169
    1b96:	bf 4f       	sbci	r27, 0xFF	; 255
    1b98:	8c 91       	ld	r24, X
    1b9a:	80 83       	st	Z, r24
    1b9c:	72 c1       	rjmp	.+740    	; 0x1e82 <greenside+0xcb6>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_four_positions[current_position].point), green_tactic_four_positions[current_position].speed,
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e8 5a       	subi	r30, 0xA8	; 168
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	ca 01       	movw	r24, r20
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	22 0f       	add	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	84 0f       	add	r24, r20
    1bc0:	95 1f       	adc	r25, r21
    1bc2:	8c 5d       	subi	r24, 0xDC	; 220
    1bc4:	9d 4f       	sbci	r25, 0xFD	; 253
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e8 5a       	subi	r30, 0xA8	; 168
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	9c 01       	movw	r18, r24
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	82 0f       	add	r24, r18
    1be6:	93 1f       	adc	r25, r19
    1be8:	84 0f       	add	r24, r20
    1bea:	95 1f       	adc	r25, r21
    1bec:	fc 01       	movw	r30, r24
    1bee:	e5 5d       	subi	r30, 0xD5	; 213
    1bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf2:	a0 81       	ld	r26, Z
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e8 5a       	subi	r30, 0xA8	; 168
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	ca 01       	movw	r24, r20
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	9c 01       	movw	r18, r24
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	22 0f       	add	r18, r18
    1c0e:	33 1f       	adc	r19, r19
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	84 0f       	add	r24, r20
    1c16:	95 1f       	adc	r25, r21
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e4 5d       	subi	r30, 0xD4	; 212
    1c1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c1e:	80 81       	ld	r24, Z
    1c20:	b8 2f       	mov	r27, r24
    1c22:	fe 01       	movw	r30, r28
    1c24:	e8 5a       	subi	r30, 0xA8	; 168
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	ca 01       	movw	r24, r20
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	9c 01       	movw	r18, r24
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	82 0f       	add	r24, r18
    1c40:	93 1f       	adc	r25, r19
    1c42:	84 0f       	add	r24, r20
    1c44:	95 1f       	adc	r25, r21
    1c46:	fc 01       	movw	r30, r24
    1c48:	e3 5d       	subi	r30, 0xD3	; 211
    1c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4c:	20 81       	ld	r18, Z
    1c4e:	31 81       	ldd	r19, Z+1	; 0x01
    1c50:	cb 01       	movw	r24, r22
    1c52:	6a 2f       	mov	r22, r26
    1c54:	4b 2f       	mov	r20, r27
    1c56:	35 d3       	rcall	.+1642   	; 0x22c2 <odometry_move_to_position>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ea 5a       	subi	r30, 0xAA	; 170
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 83       	st	Z, r24
					green_tactic_four_positions[current_position].direction,green_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1c60:	fe 01       	movw	r30, r28
    1c62:	ea 5a       	subi	r30, 0xAA	; 170
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <greenside+0xaa2>
    1c6c:	11 c1       	rjmp	.+546    	; 0x1e90 <greenside+0xcc4>
					{
						break;
					}
					if(current_position == 10)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e8 5a       	subi	r30, 0xA8	; 168
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	8a 30       	cpi	r24, 0x0A	; 10
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <greenside+0xab0>
    1c7a:	73 c0       	rjmp	.+230    	; 0x1d62 <greenside+0xb96>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e4       	ldi	r25, 0x40	; 64
    1c80:	ac e1       	ldi	r26, 0x1C	; 28
    1c82:	b6 e4       	ldi	r27, 0x46	; 70
    1c84:	89 8f       	std	Y+25, r24	; 0x19
    1c86:	9a 8f       	std	Y+26, r25	; 0x1a
    1c88:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e4       	ldi	r19, 0x40	; 64
    1c98:	4c e1       	ldi	r20, 0x1C	; 28
    1c9a:	55 e4       	ldi	r21, 0x45	; 69
    1c9c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 8b       	std	Y+21, r24	; 0x15
    1ca6:	9e 8b       	std	Y+22, r25	; 0x16
    1ca8:	af 8b       	std	Y+23, r26	; 0x17
    1caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <greenside+0xb02>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <greenside+0xb80>
	else if (__tmp > 65535)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <greenside+0xb6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <greenside+0xb62>
    1d10:	8a ef       	ldi	r24, 0xFA	; 250
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <greenside+0xb50>
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <greenside+0xb44>
    1d36:	9c c0       	rjmp	.+312    	; 0x1e70 <greenside+0xca4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <greenside+0xb8c>
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
    1d60:	87 c0       	rjmp	.+270    	; 0x1e70 <greenside+0xca4>
					{
						_delay_ms(10000);
					}
					else if(current_position == 11 || current_position ==  15)
    1d62:	fe 01       	movw	r30, r28
    1d64:	e8 5a       	subi	r30, 0xA8	; 168
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	8b 30       	cpi	r24, 0x0B	; 11
    1d6c:	39 f0       	breq	.+14     	; 0x1d7c <greenside+0xbb0>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e8 5a       	subi	r30, 0xA8	; 168
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 30       	cpi	r24, 0x0F	; 15
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <greenside+0xbb0>
    1d7a:	73 c0       	rjmp	.+230    	; 0x1e62 <greenside+0xc96>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	aa ef       	ldi	r26, 0xFA	; 250
    1d82:	b4 e4       	ldi	r27, 0x44	; 68
    1d84:	8b 87       	std	Y+11, r24	; 0x0b
    1d86:	9c 87       	std	Y+12, r25	; 0x0c
    1d88:	ad 87       	std	Y+13, r26	; 0x0d
    1d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e4       	ldi	r19, 0x40	; 64
    1d98:	4c e1       	ldi	r20, 0x1C	; 28
    1d9a:	55 e4       	ldi	r21, 0x45	; 69
    1d9c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8f 83       	std	Y+7, r24	; 0x07
    1da6:	98 87       	std	Y+8, r25	; 0x08
    1da8:	a9 87       	std	Y+9, r26	; 0x09
    1daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__cmpsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <greenside+0xc02>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <greenside+0xc80>
	else if (__tmp > 65535)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <greenside+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <greenside+0xc62>
    1e10:	8a ef       	ldi	r24, 0xFA	; 250
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <greenside+0xc50>
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <greenside+0xc44>
    1e36:	1c c0       	rjmp	.+56     	; 0x1e70 <greenside+0xca4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <greenside+0xc8c>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <greenside+0xca4>
					{
						_delay_ms(2000);
					}
					else if(current_position == 18)
    1e62:	fe 01       	movw	r30, r28
    1e64:	e8 5a       	subi	r30, 0xA8	; 168
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 31       	cpi	r24, 0x12	; 18
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <greenside+0xca4>
    1e6e:	ff cf       	rjmp	.-2      	; 0x1e6e <greenside+0xca2>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    1e70:	de 01       	movw	r26, r28
    1e72:	a8 5a       	subi	r26, 0xA8	; 168
    1e74:	bf 4f       	sbci	r27, 0xFF	; 255
    1e76:	fe 01       	movw	r30, r28
    1e78:	e8 5a       	subi	r30, 0xA8	; 168
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	8c 93       	st	X, r24
    1e82:	fe 01       	movw	r30, r28
    1e84:	e8 5a       	subi	r30, 0xA8	; 168
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	83 31       	cpi	r24, 0x13	; 19
    1e8c:	08 f4       	brcc	.+2      	; 0x1e90 <greenside+0xcc4>
    1e8e:	87 ce       	rjmp	.-754    	; 0x1b9e <greenside+0x9d2>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    1e90:	fe 01       	movw	r30, r28
    1e92:	e8 5a       	subi	r30, 0xA8	; 168
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	de 01       	movw	r26, r28
    1e98:	a9 5a       	subi	r26, 0xA9	; 169
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	8c 91       	ld	r24, X
    1e9e:	80 83       	st	Z, r24
    1ea0:	78 c0       	rjmp	.+240    	; 0x1f92 <greenside+0xdc6>
				{
					odometry_status = odometry_move_to_position(&(green_tactic_five_positions[current_position].point), green_tactic_five_positions[current_position].speed,
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e8 5a       	subi	r30, 0xA8	; 168
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	ca 01       	movw	r24, r20
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	9c 01       	movw	r18, r24
    1eb6:	22 0f       	add	r18, r18
    1eb8:	33 1f       	adc	r19, r19
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	84 0f       	add	r24, r20
    1ec4:	95 1f       	adc	r25, r21
    1ec6:	8b 50       	subi	r24, 0x0B	; 11
    1ec8:	9d 4f       	sbci	r25, 0xFD	; 253
    1eca:	bc 01       	movw	r22, r24
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e8 5a       	subi	r30, 0xA8	; 168
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	ca 01       	movw	r24, r20
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	9c 01       	movw	r18, r24
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	82 0f       	add	r24, r18
    1eea:	93 1f       	adc	r25, r19
    1eec:	84 0f       	add	r24, r20
    1eee:	95 1f       	adc	r25, r21
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e4 50       	subi	r30, 0x04	; 4
    1ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef6:	a0 81       	ld	r26, Z
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e8 5a       	subi	r30, 0xA8	; 168
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	ca 01       	movw	r24, r20
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	82 0f       	add	r24, r18
    1f16:	93 1f       	adc	r25, r19
    1f18:	84 0f       	add	r24, r20
    1f1a:	95 1f       	adc	r25, r21
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	e3 50       	subi	r30, 0x03	; 3
    1f20:	fd 4f       	sbci	r31, 0xFD	; 253
    1f22:	80 81       	ld	r24, Z
    1f24:	b8 2f       	mov	r27, r24
    1f26:	fe 01       	movw	r30, r28
    1f28:	e8 5a       	subi	r30, 0xA8	; 168
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	ca 01       	movw	r24, r20
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	9c 01       	movw	r18, r24
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	82 0f       	add	r24, r18
    1f44:	93 1f       	adc	r25, r19
    1f46:	84 0f       	add	r24, r20
    1f48:	95 1f       	adc	r25, r21
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e2 50       	subi	r30, 0x02	; 2
    1f4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f50:	20 81       	ld	r18, Z
    1f52:	31 81       	ldd	r19, Z+1	; 0x01
    1f54:	cb 01       	movw	r24, r22
    1f56:	6a 2f       	mov	r22, r26
    1f58:	4b 2f       	mov	r20, r27
    1f5a:	b3 d1       	rcall	.+870    	; 0x22c2 <odometry_move_to_position>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ea 5a       	subi	r30, 0xAA	; 170
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 83       	st	Z, r24
					green_tactic_five_positions[current_position].direction,green_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    1f64:	fe 01       	movw	r30, r28
    1f66:	ea 5a       	subi	r30, 0xAA	; 170
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <greenside+0xda6>
    1f70:	a3 ca       	rjmp	.-2746   	; 0x14b8 <greenside+0x2ec>
					{
						break;
					}
					if(current_position == 0)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e8 5a       	subi	r30, 0xA8	; 168
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 23       	and	r24, r24
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <greenside+0xdb4>
    1f7e:	ff cf       	rjmp	.-2      	; 0x1f7e <greenside+0xdb2>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    1f80:	de 01       	movw	r26, r28
    1f82:	a8 5a       	subi	r26, 0xA8	; 168
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e8 5a       	subi	r30, 0xA8	; 168
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	8c 93       	st	X, r24
    1f92:	fe 01       	movw	r30, r28
    1f94:	e8 5a       	subi	r30, 0xA8	; 168
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <greenside+0xdd4>
    1f9e:	81 cf       	rjmp	.-254    	; 0x1ea2 <greenside+0xcd6>
    1fa0:	8b ca       	rjmp	.-2794   	; 0x14b8 <greenside+0x2ec>

00001fa2 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	67 97       	sbiw	r28, 0x17	; 23
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1fb8:	90 91 34 03 	lds	r25, 0x0334
    1fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbe:	89 17       	cp	r24, r25
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <odometry_set_speed+0x22>
    1fc2:	7f c0       	rjmp	.+254    	; 0x20c2 <odometry_set_speed+0x120>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1fc4:	86 e5       	ldi	r24, 0x56	; 86
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	88 8b       	std	Y+16, r24	; 0x10
    1fcc:	6f c0       	rjmp	.+222    	; 0x20ac <odometry_set_speed+0x10a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a8 e4       	ldi	r26, 0x48	; 72
    1fd4:	b2 e4       	ldi	r27, 0x42	; 66
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e4       	ldi	r19, 0x40	; 64
    1fea:	4c e1       	ldi	r20, 0x1C	; 28
    1fec:	55 e4       	ldi	r21, 0x45	; 69
    1fee:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	10 d7       	rcall	.+3616   	; 0x2e30 <__cmpsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <odometry_set_speed+0x7c>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3d c0       	rjmp	.+122    	; 0x2098 <odometry_set_speed+0xf6>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 67 18 	call	0x30ce	; 0x30ce <__gesf2>
    2032:	18 16       	cp	r1, r24
    2034:	44 f5       	brge	.+80     	; 0x2086 <odometry_set_speed+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	5f d7       	rcall	.+3774   	; 0x2f12 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	0f c0       	rjmp	.+30     	; 0x207c <odometry_set_speed+0xda>
    205e:	8a ef       	ldi	r24, 0xFA	; 250
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <odometry_set_speed+0xc8>
    206e:	9c 83       	std	Y+4, r25	; 0x04
    2070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <odometry_set_speed+0xbc>
    2084:	13 c0       	rjmp	.+38     	; 0x20ac <odometry_set_speed+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	41 d7       	rcall	.+3714   	; 0x2f12 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <odometry_set_speed+0x102>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	ce 01       	movw	r24, r28
    20ae:	0f 96       	adiw	r24, 0x0f	; 15
    20b0:	63 ec       	ldi	r22, 0xC3	; 195
    20b2:	0e 94 21 06 	call	0xc42	; 0xc42 <CAN_Write>
    20b6:	88 23       	and	r24, r24
    20b8:	09 f0       	breq	.+2      	; 0x20bc <odometry_set_speed+0x11a>
    20ba:	89 cf       	rjmp	.-238    	; 0x1fce <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    20bc:	8f 89       	ldd	r24, Y+23	; 0x17
    20be:	80 93 34 03 	sts	0x0334, r24
}
    20c2:	67 96       	adiw	r28, 0x17	; 23
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <odometry_query_position>:

static void odometry_query_position(void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	66 97       	sbiw	r28, 0x16	; 22
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    20e8:	80 e5       	ldi	r24, 0x50	; 80
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
    20ec:	6c c0       	rjmp	.+216    	; 0x21c6 <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a8 e4       	ldi	r26, 0x48	; 72
    20f4:	b2 e4       	ldi	r27, 0x42	; 66
    20f6:	8b 87       	std	Y+11, r24	; 0x0b
    20f8:	9c 87       	std	Y+12, r25	; 0x0c
    20fa:	ad 87       	std	Y+13, r26	; 0x0d
    20fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e4       	ldi	r19, 0x40	; 64
    210a:	4c e1       	ldi	r20, 0x1C	; 28
    210c:	55 e4       	ldi	r21, 0x45	; 69
    210e:	e3 d7       	rcall	.+4038   	; 0x30d6 <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8f 83       	std	Y+7, r24	; 0x07
    2116:	98 87       	std	Y+8, r25	; 0x08
    2118:	a9 87       	std	Y+9, r26	; 0x09
    211a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	81 d6       	rcall	.+3330   	; 0x2e30 <__cmpsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <odometry_query_position+0x68>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	3b c0       	rjmp	.+118    	; 0x21b2 <odometry_query_position+0xde>
	else if (__tmp > 65535)
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	c0 d7       	rcall	.+3968   	; 0x30ce <__gesf2>
    214e:	18 16       	cp	r1, r24
    2150:	3c f5       	brge	.+78     	; 0x21a0 <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	6b 85       	ldd	r22, Y+11	; 0x0b
    2154:	7c 85       	ldd	r23, Y+12	; 0x0c
    2156:	8d 85       	ldd	r24, Y+13	; 0x0d
    2158:	9e 85       	ldd	r25, Y+14	; 0x0e
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	b9 d7       	rcall	.+3954   	; 0x30d6 <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	d2 d6       	rcall	.+3492   	; 0x2f12 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <odometry_query_position+0xc2>
    2178:	8a ef       	ldi	r24, 0xFA	; 250
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <odometry_query_position+0xb0>
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	9e 83       	std	Y+6, r25	; 0x06
    2194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	69 f7       	brne	.-38     	; 0x2178 <odometry_query_position+0xa4>
    219e:	13 c0       	rjmp	.+38     	; 0x21c6 <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	6f 81       	ldd	r22, Y+7	; 0x07
    21a2:	78 85       	ldd	r23, Y+8	; 0x08
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	b4 d6       	rcall	.+3432   	; 0x2f12 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <odometry_query_position+0xea>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	ce 01       	movw	r24, r28
    21c8:	0f 96       	adiw	r24, 0x0f	; 15
    21ca:	63 ec       	ldi	r22, 0xC3	; 195
    21cc:	0e 94 21 06 	call	0xc42	; 0xc42 <CAN_Write>
    21d0:	88 23       	and	r24, r24
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <odometry_query_position+0x102>
    21d4:	8c cf       	rjmp	.-232    	; 0x20ee <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    21d6:	ce 01       	movw	r24, r28
    21d8:	0f 96       	adiw	r24, 0x0f	; 15
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	0e 94 a9 05 	call	0xb52	; 0xb52 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    21e6:	88 89       	ldd	r24, Y+16	; 0x10
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	38 2f       	mov	r19, r24
    21ee:	22 27       	eor	r18, r18
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	82 2b       	or	r24, r18
    21f8:	93 2b       	or	r25, r19
    21fa:	90 93 0b 01 	sts	0x010B, r25
    21fe:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    2202:	8a 89       	ldd	r24, Y+18	; 0x12
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	38 2f       	mov	r19, r24
    220a:	22 27       	eor	r18, r18
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	82 2b       	or	r24, r18
    2214:	93 2b       	or	r25, r19
    2216:	90 93 0d 01 	sts	0x010D, r25
    221a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    221e:	8c 89       	ldd	r24, Y+20	; 0x14
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	38 2f       	mov	r19, r24
    2226:	22 27       	eor	r18, r18
    2228:	8d 89       	ldd	r24, Y+21	; 0x15
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	82 2b       	or	r24, r18
    2230:	93 2b       	or	r25, r19
    2232:	90 93 0f 01 	sts	0x010F, r25
    2236:	80 93 0e 01 	sts	0x010E, r24
}
    223a:	66 96       	adiw	r28, 0x16	; 22
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	27 97       	sbiw	r28, 0x07	; 7
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    2264:	24 d3       	rcall	.+1608   	; 0x28ae <system_get_system_time>
    2266:	aa 27       	eor	r26, r26
    2268:	97 fd       	sbrc	r25, 7
    226a:	a0 95       	com	r26
    226c:	ba 2f       	mov	r27, r26
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	ab 83       	std	Y+3, r26	; 0x03
    2274:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    2276:	2e df       	rcall	.-420    	; 0x20d4 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	71 f0       	breq	.+28     	; 0x229c <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	ab 81       	ldd	r26, Y+3	; 0x03
    2286:	bc 81       	ldd	r27, Y+4	; 0x04
    2288:	ed 81       	ldd	r30, Y+5	; 0x05
    228a:	fe 81       	ldd	r31, Y+6	; 0x06
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	09 95       	icall
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	19 f4       	brne	.+6      	; 0x229c <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    229c:	80 91 10 01 	lds	r24, 0x0110
    22a0:	8d 34       	cpi	r24, 0x4D	; 77
    22a2:	49 f3       	breq	.-46     	; 0x2276 <odometry_wait_until_done+0x2a>
    22a4:	80 91 10 01 	lds	r24, 0x0110
    22a8:	82 35       	cpi	r24, 0x52	; 82
    22aa:	29 f3       	breq	.-54     	; 0x2276 <odometry_wait_until_done+0x2a>
	
	return ODOMETRY_SUCCESS;
    22ac:	1f 82       	std	Y+7, r1	; 0x07
    22ae:	8f 81       	ldd	r24, Y+7	; 0x07
}
    22b0:	27 96       	adiw	r28, 0x07	; 7
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <odometry_move_to_position>:
		
	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	6c 97       	sbiw	r28, 0x1c	; 28
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	98 8f       	std	Y+24, r25	; 0x18
    22d8:	8f 8b       	std	Y+23, r24	; 0x17
    22da:	69 8f       	std	Y+25, r22	; 0x19
    22dc:	4a 8f       	std	Y+26, r20	; 0x1a
    22de:	3c 8f       	std	Y+28, r19	; 0x1c
    22e0:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    22e2:	89 8d       	ldd	r24, Y+25	; 0x19
    22e4:	5e de       	rcall	.-836    	; 0x1fa2 <odometry_set_speed>

	buffer[0] = 'G';
    22e6:	87 e4       	ldi	r24, 0x47	; 71
    22e8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    22ea:	ef 89       	ldd	r30, Y+23	; 0x17
    22ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	89 2f       	mov	r24, r25
    22f4:	99 0f       	add	r25, r25
    22f6:	99 0b       	sbc	r25, r25
    22f8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    22fa:	ef 89       	ldd	r30, Y+23	; 0x17
    22fc:	f8 8d       	ldd	r31, Y+24	; 0x18
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    2304:	ef 89       	ldd	r30, Y+23	; 0x17
    2306:	f8 8d       	ldd	r31, Y+24	; 0x18
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	89 2f       	mov	r24, r25
    230e:	99 0f       	add	r25, r25
    2310:	99 0b       	sbc	r25, r25
    2312:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2314:	ef 89       	ldd	r30, Y+23	; 0x17
    2316:	f8 8d       	ldd	r31, Y+24	; 0x18
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    231e:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    2320:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2322:	81 95       	neg	r24
    2324:	8d 8b       	std	Y+21, r24	; 0x15
    2326:	6c c0       	rjmp	.+216    	; 0x2400 <odometry_move_to_position+0x13e>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a8 e4       	ldi	r26, 0x48	; 72
    232e:	b2 e4       	ldi	r27, 0x42	; 66
    2330:	8b 87       	std	Y+11, r24	; 0x0b
    2332:	9c 87       	std	Y+12, r25	; 0x0c
    2334:	ad 87       	std	Y+13, r26	; 0x0d
    2336:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6b 85       	ldd	r22, Y+11	; 0x0b
    233a:	7c 85       	ldd	r23, Y+12	; 0x0c
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e4       	ldi	r19, 0x40	; 64
    2344:	4c e1       	ldi	r20, 0x1C	; 28
    2346:	55 e4       	ldi	r21, 0x45	; 69
    2348:	c6 d6       	rcall	.+3468   	; 0x30d6 <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8f 83       	std	Y+7, r24	; 0x07
    2350:	98 87       	std	Y+8, r25	; 0x08
    2352:	a9 87       	std	Y+9, r26	; 0x09
    2354:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2356:	6f 81       	ldd	r22, Y+7	; 0x07
    2358:	78 85       	ldd	r23, Y+8	; 0x08
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	9a 85       	ldd	r25, Y+10	; 0x0a
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e8       	ldi	r20, 0x80	; 128
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	64 d5       	rcall	.+2760   	; 0x2e30 <__cmpsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <odometry_move_to_position+0xb4>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3b c0       	rjmp	.+118    	; 0x23ec <odometry_move_to_position+0x12a>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	a3 d6       	rcall	.+3398   	; 0x30ce <__gesf2>
    2388:	18 16       	cp	r1, r24
    238a:	3c f5       	brge	.+78     	; 0x23da <odometry_move_to_position+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	9c d6       	rcall	.+3384   	; 0x30d6 <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	b5 d5       	rcall	.+2922   	; 0x2f12 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <odometry_move_to_position+0x10e>
    23b2:	8a ef       	ldi	r24, 0xFA	; 250
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <odometry_move_to_position+0xfc>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <odometry_move_to_position+0xf0>
    23d8:	13 c0       	rjmp	.+38     	; 0x2400 <odometry_move_to_position+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	97 d5       	rcall	.+2862   	; 0x2f12 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <odometry_move_to_position+0x136>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	ce 01       	movw	r24, r28
    2402:	0f 96       	adiw	r24, 0x0f	; 15
    2404:	63 ec       	ldi	r22, 0xC3	; 195
    2406:	0e 94 21 06 	call	0xc42	; 0xc42 <CAN_Write>
    240a:	88 23       	and	r24, r24
    240c:	09 f0       	breq	.+2      	; 0x2410 <odometry_move_to_position+0x14e>
    240e:	8c cf       	rjmp	.-232    	; 0x2328 <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2414:	1b df       	rcall	.-458    	; 0x224c <odometry_wait_until_done>
}
    2416:	6c 96       	adiw	r28, 0x1c	; 28
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	69 97       	sbiw	r28, 0x19	; 25
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	99 8f       	std	Y+25, r25	; 0x19
    243e:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    2440:	89 e4       	ldi	r24, 0x49	; 73
    2442:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    2444:	e8 8d       	ldd	r30, Y+24	; 0x18
    2446:	f9 8d       	ldd	r31, Y+25	; 0x19
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	89 2f       	mov	r24, r25
    244e:	99 0f       	add	r25, r25
    2450:	99 0b       	sbc	r25, r25
    2452:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    2454:	e8 8d       	ldd	r30, Y+24	; 0x18
    2456:	f9 8d       	ldd	r31, Y+25	; 0x19
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    245e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2460:	f9 8d       	ldd	r31, Y+25	; 0x19
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	89 2f       	mov	r24, r25
    2468:	99 0f       	add	r25, r25
    246a:	99 0b       	sbc	r25, r25
    246c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    246e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2470:	f9 8d       	ldd	r31, Y+25	; 0x19
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    2478:	e8 8d       	ldd	r30, Y+24	; 0x18
    247a:	f9 8d       	ldd	r31, Y+25	; 0x19
    247c:	84 81       	ldd	r24, Z+4	; 0x04
    247e:	95 81       	ldd	r25, Z+5	; 0x05
    2480:	81 95       	neg	r24
    2482:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	99 27       	eor	r25, r25
    2488:	87 fd       	sbrc	r24, 7
    248a:	90 95       	com	r25
    248c:	89 2f       	mov	r24, r25
    248e:	99 0f       	add	r25, r25
    2490:	99 0b       	sbc	r25, r25
    2492:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    2498:	e8 8d       	ldd	r30, Y+24	; 0x18
    249a:	f9 8d       	ldd	r31, Y+25	; 0x19
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	90 93 0b 01 	sts	0x010B, r25
    24a4:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    24a8:	e8 8d       	ldd	r30, Y+24	; 0x18
    24aa:	f9 8d       	ldd	r31, Y+25	; 0x19
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	90 93 0d 01 	sts	0x010D, r25
    24b4:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    24b8:	e8 8d       	ldd	r30, Y+24	; 0x18
    24ba:	f9 8d       	ldd	r31, Y+25	; 0x19
    24bc:	84 81       	ldd	r24, Z+4	; 0x04
    24be:	95 81       	ldd	r25, Z+5	; 0x05
    24c0:	90 95       	com	r25
    24c2:	81 95       	neg	r24
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	90 93 0f 01 	sts	0x010F, r25
    24ca:	80 93 0e 01 	sts	0x010E, r24
    24ce:	6c c0       	rjmp	.+216    	; 0x25a8 <odometry_set_position+0x180>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a8 e4       	ldi	r26, 0x48	; 72
    24d6:	b2 e4       	ldi	r27, 0x42	; 66
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	ad 87       	std	Y+13, r26	; 0x0d
    24de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e4       	ldi	r19, 0x40	; 64
    24ec:	4c e1       	ldi	r20, 0x1C	; 28
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	f2 d5       	rcall	.+3044   	; 0x30d6 <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8f 83       	std	Y+7, r24	; 0x07
    24f8:	98 87       	std	Y+8, r25	; 0x08
    24fa:	a9 87       	std	Y+9, r26	; 0x09
    24fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	90 d4       	rcall	.+2336   	; 0x2e30 <__cmpsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <odometry_set_position+0xf6>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	3b c0       	rjmp	.+118    	; 0x2594 <odometry_set_position+0x16c>
	else if (__tmp > 65535)
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	cf d5       	rcall	.+2974   	; 0x30ce <__gesf2>
    2530:	18 16       	cp	r1, r24
    2532:	3c f5       	brge	.+78     	; 0x2582 <odometry_set_position+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	c8 d5       	rcall	.+2960   	; 0x30d6 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	e1 d4       	rcall	.+2498   	; 0x2f12 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <odometry_set_position+0x150>
    255a:	8a ef       	ldi	r24, 0xFA	; 250
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <odometry_set_position+0x13e>
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <odometry_set_position+0x132>
    2580:	13 c0       	rjmp	.+38     	; 0x25a8 <odometry_set_position+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	c3 d4       	rcall	.+2438   	; 0x2f12 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <odometry_set_position+0x178>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	ce 01       	movw	r24, r28
    25aa:	40 96       	adiw	r24, 0x10	; 16
    25ac:	63 ec       	ldi	r22, 0xC3	; 195
    25ae:	0e 94 21 06 	call	0xc42	; 0xc42 <CAN_Write>
    25b2:	88 23       	and	r24, r24
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <odometry_set_position+0x190>
    25b6:	8c cf       	rjmp	.-232    	; 0x24d0 <odometry_set_position+0xa8>
		_delay_ms(50);
}
    25b8:	69 96       	adiw	r28, 0x19	; 25
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	6b 97       	sbiw	r28, 0x1b	; 27
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	98 8f       	std	Y+24, r25	; 0x18
    25e0:	8f 8b       	std	Y+23, r24	; 0x17
    25e2:	69 8f       	std	Y+25, r22	; 0x19
    25e4:	5b 8f       	std	Y+27, r21	; 0x1b
    25e6:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    25e8:	89 8d       	ldd	r24, Y+25	; 0x19
    25ea:	db dc       	rcall	.-1610   	; 0x1fa2 <odometry_set_speed>

	angle *= -1;
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	90 95       	com	r25
    25f2:	81 95       	neg	r24
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	98 8f       	std	Y+24, r25	; 0x18
    25f8:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    25fa:	84 e5       	ldi	r24, 0x54	; 84
    25fc:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	89 2f       	mov	r24, r25
    2604:	99 0f       	add	r25, r25
    2606:	99 0b       	sbc	r25, r25
    2608:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	89 8b       	std	Y+17, r24	; 0x11
    260e:	6c c0       	rjmp	.+216    	; 0x26e8 <odometry_rotate+0x11e>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a8 e4       	ldi	r26, 0x48	; 72
    2616:	b2 e4       	ldi	r27, 0x42	; 66
    2618:	8b 87       	std	Y+11, r24	; 0x0b
    261a:	9c 87       	std	Y+12, r25	; 0x0c
    261c:	ad 87       	std	Y+13, r26	; 0x0d
    261e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e4       	ldi	r19, 0x40	; 64
    262c:	4c e1       	ldi	r20, 0x1C	; 28
    262e:	55 e4       	ldi	r21, 0x45	; 69
    2630:	52 d5       	rcall	.+2724   	; 0x30d6 <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8f 83       	std	Y+7, r24	; 0x07
    2638:	98 87       	std	Y+8, r25	; 0x08
    263a:	a9 87       	std	Y+9, r26	; 0x09
    263c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	f0 d3       	rcall	.+2016   	; 0x2e30 <__cmpsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <odometry_rotate+0x94>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	3b c0       	rjmp	.+118    	; 0x26d4 <odometry_rotate+0x10a>
	else if (__tmp > 65535)
    265e:	6f 81       	ldd	r22, Y+7	; 0x07
    2660:	78 85       	ldd	r23, Y+8	; 0x08
    2662:	89 85       	ldd	r24, Y+9	; 0x09
    2664:	9a 85       	ldd	r25, Y+10	; 0x0a
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	2f d5       	rcall	.+2654   	; 0x30ce <__gesf2>
    2670:	18 16       	cp	r1, r24
    2672:	3c f5       	brge	.+78     	; 0x26c2 <odometry_rotate+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	28 d5       	rcall	.+2640   	; 0x30d6 <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	41 d4       	rcall	.+2178   	; 0x2f12 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <odometry_rotate+0xee>
    269a:	8a ef       	ldi	r24, 0xFA	; 250
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <odometry_rotate+0xdc>
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9e 83       	std	Y+6, r25	; 0x06
    26b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <odometry_rotate+0xd0>
    26c0:	13 c0       	rjmp	.+38     	; 0x26e8 <odometry_rotate+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	23 d4       	rcall	.+2118   	; 0x2f12 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <odometry_rotate+0x116>
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	ce 01       	movw	r24, r28
    26ea:	0f 96       	adiw	r24, 0x0f	; 15
    26ec:	63 ec       	ldi	r22, 0xC3	; 195
    26ee:	0e 94 21 06 	call	0xc42	; 0xc42 <CAN_Write>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <odometry_rotate+0x12e>
    26f6:	8c cf       	rjmp	.-232    	; 0x2610 <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    26f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26fc:	a7 dd       	rcall	.-1202   	; 0x224c <odometry_wait_until_done>

}
    26fe:	6b 96       	adiw	r28, 0x1b	; 27
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <timer_register_callback+0x6>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	90 93 36 03 	sts	0x0336, r25
    2726:	80 93 35 03 	sts	0x0335, r24
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <timer_init>:
	returned = combination_check();
}


void timer_init(unsigned int freq)
{
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <timer_init+0xa>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2746:	e0 e8       	ldi	r30, 0x80	; 128
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    274c:	e1 e8       	ldi	r30, 0x81	; 129
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	89 e0       	ldi	r24, 0x09	; 9
    2752:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2754:	08 e8       	ldi	r16, 0x88	; 136
    2756:	10 e0       	ldi	r17, 0x00	; 0
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	cc 01       	movw	r24, r24
    275e:	a0 e0       	ldi	r26, 0x00	; 0
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	01 d4       	rcall	.+2050   	; 0x2f6a <__floatunsisf>
    2768:	9b 01       	movw	r18, r22
    276a:	ac 01       	movw	r20, r24
    276c:	60 e8       	ldi	r22, 0x80	; 128
    276e:	76 e9       	ldi	r23, 0x96	; 150
    2770:	88 e1       	ldi	r24, 0x18	; 24
    2772:	9b e4       	ldi	r25, 0x4B	; 75
    2774:	61 d3       	rcall	.+1730   	; 0x2e38 <__divsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	f0 d2       	rcall	.+1504   	; 0x2d68 <__addsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	c0 d3       	rcall	.+1920   	; 0x2f12 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    279c:	ef e6       	ldi	r30, 0x6F	; 111
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	80 83       	st	Z, r24

	SREG |= 0x80;
    27a4:	af e5       	ldi	r26, 0x5F	; 95
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	ef e5       	ldi	r30, 0x5F	; 95
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	80 68       	ori	r24, 0x80	; 128
    27b0:	8c 93       	st	X, r24
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	08 95       	ret

000027c0 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	00 90 5b 00 	lds	r0, 0x005B
    27cc:	0f 92       	push	r0
    27ce:	11 24       	eor	r1, r1
    27d0:	2f 93       	push	r18
    27d2:	3f 93       	push	r19
    27d4:	4f 93       	push	r20
    27d6:	5f 93       	push	r21
    27d8:	6f 93       	push	r22
    27da:	7f 93       	push	r23
    27dc:	8f 93       	push	r24
    27de:	9f 93       	push	r25
    27e0:	af 93       	push	r26
    27e2:	bf 93       	push	r27
    27e4:	ef 93       	push	r30
    27e6:	ff 93       	push	r31
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    27f0:	80 91 35 03 	lds	r24, 0x0335
    27f4:	90 91 36 03 	lds	r25, 0x0336
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	29 f0       	breq	.+10     	; 0x2806 <__vector_12+0x46>
        timer_callback();
    27fc:	e0 91 35 03 	lds	r30, 0x0335
    2800:	f0 91 36 03 	lds	r31, 0x0336
    2804:	09 95       	icall
	if(sys_time >= 90000)
    2806:	80 91 37 03 	lds	r24, 0x0337
    280a:	90 91 38 03 	lds	r25, 0x0338
    280e:	a0 91 39 03 	lds	r26, 0x0339
    2812:	b0 91 3a 03 	lds	r27, 0x033A
    2816:	80 39       	cpi	r24, 0x90	; 144
    2818:	2f e5       	ldi	r18, 0x5F	; 95
    281a:	92 07       	cpc	r25, r18
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	a2 07       	cpc	r26, r18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	b2 07       	cpc	r27, r18
    2824:	10 f0       	brcs	.+4      	; 0x282a <__vector_12+0x6a>
		actuators_umbrella();
    2826:	0e 94 a6 02 	call	0x54c	; 0x54c <actuators_umbrella>
	sys_time++;
    282a:	80 91 37 03 	lds	r24, 0x0337
    282e:	90 91 38 03 	lds	r25, 0x0338
    2832:	a0 91 39 03 	lds	r26, 0x0339
    2836:	b0 91 3a 03 	lds	r27, 0x033A
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	a1 1d       	adc	r26, r1
    283e:	b1 1d       	adc	r27, r1
    2840:	80 93 37 03 	sts	0x0337, r24
    2844:	90 93 38 03 	sts	0x0338, r25
    2848:	a0 93 39 03 	sts	0x0339, r26
    284c:	b0 93 3a 03 	sts	0x033A, r27
}
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	ff 91       	pop	r31
    2856:	ef 91       	pop	r30
    2858:	bf 91       	pop	r27
    285a:	af 91       	pop	r26
    285c:	9f 91       	pop	r25
    285e:	8f 91       	pop	r24
    2860:	7f 91       	pop	r23
    2862:	6f 91       	pop	r22
    2864:	5f 91       	pop	r21
    2866:	4f 91       	pop	r20
    2868:	3f 91       	pop	r19
    286a:	2f 91       	pop	r18
    286c:	0f 90       	pop	r0
    286e:	00 92 5b 00 	sts	0x005B, r0
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <system_reset_system_time>:
void system_reset_system_time(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2884:	10 92 37 03 	sts	0x0337, r1
    2888:	10 92 38 03 	sts	0x0338, r1
    288c:	10 92 39 03 	sts	0x0339, r1
    2890:	10 92 3a 03 	sts	0x033A, r1
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <system_set_match_started>:
void system_set_match_started(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	80 93 3b 03 	sts	0x033B, r24
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    28b6:	80 91 37 03 	lds	r24, 0x0337
    28ba:	90 91 38 03 	lds	r25, 0x0338
    28be:	a0 91 39 03 	lds	r26, 0x0339
    28c2:	b0 91 3a 03 	lds	r27, 0x033A
}
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <system_init>:
/*uint8_t return_active_state(void)
{
	return active_state;
}*/
void system_init(void)
{	
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	6c 97       	sbiw	r28, 0x1c	; 28
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    28e4:	80 e9       	ldi	r24, 0x90	; 144
    28e6:	98 e0       	ldi	r25, 0x08	; 8
    28e8:	13 df       	rcall	.-474    	; 0x2710 <timer_register_callback>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a8 ec       	ldi	r26, 0xC8	; 200
    28f0:	b2 e4       	ldi	r27, 0x42	; 66
    28f2:	89 8f       	std	Y+25, r24	; 0x19
    28f4:	9a 8f       	std	Y+26, r25	; 0x1a
    28f6:	ab 8f       	std	Y+27, r26	; 0x1b
    28f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	69 8d       	ldd	r22, Y+25	; 0x19
    28fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e4       	ldi	r19, 0x40	; 64
    2906:	4c e1       	ldi	r20, 0x1C	; 28
    2908:	55 e4       	ldi	r21, 0x45	; 69
    290a:	e5 d3       	rcall	.+1994   	; 0x30d6 <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8d 8b       	std	Y+21, r24	; 0x15
    2912:	9e 8b       	std	Y+22, r25	; 0x16
    2914:	af 8b       	std	Y+23, r26	; 0x17
    2916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2918:	6d 89       	ldd	r22, Y+21	; 0x15
    291a:	7e 89       	ldd	r23, Y+22	; 0x16
    291c:	8f 89       	ldd	r24, Y+23	; 0x17
    291e:	98 8d       	ldd	r25, Y+24	; 0x18
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	83 d2       	rcall	.+1286   	; 0x2e30 <__cmpsf2>
    292a:	88 23       	and	r24, r24
    292c:	2c f4       	brge	.+10     	; 0x2938 <system_init+0x68>
		__ticks = 1;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9c 8b       	std	Y+20, r25	; 0x14
    2934:	8b 8b       	std	Y+19, r24	; 0x13
    2936:	3b c0       	rjmp	.+118    	; 0x29ae <system_init+0xde>
	else if (__tmp > 65535)
    2938:	6d 89       	ldd	r22, Y+21	; 0x15
    293a:	7e 89       	ldd	r23, Y+22	; 0x16
    293c:	8f 89       	ldd	r24, Y+23	; 0x17
    293e:	98 8d       	ldd	r25, Y+24	; 0x18
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	3f ef       	ldi	r19, 0xFF	; 255
    2944:	4f e7       	ldi	r20, 0x7F	; 127
    2946:	57 e4       	ldi	r21, 0x47	; 71
    2948:	c2 d3       	rcall	.+1924   	; 0x30ce <__gesf2>
    294a:	18 16       	cp	r1, r24
    294c:	3c f5       	brge	.+78     	; 0x299c <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	bb d3       	rcall	.+1910   	; 0x30d6 <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	d4 d2       	rcall	.+1448   	; 0x2f12 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <system_init+0xc2>
    2974:	8a ef       	ldi	r24, 0xFA	; 250
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9a 8b       	std	Y+18, r25	; 0x12
    297a:	89 8b       	std	Y+17, r24	; 0x11
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	9a 89       	ldd	r25, Y+18	; 0x12
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <system_init+0xb0>
    2984:	9a 8b       	std	Y+18, r25	; 0x12
    2986:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8b 89       	ldd	r24, Y+19	; 0x13
    298a:	9c 89       	ldd	r25, Y+20	; 0x14
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8b 89       	ldd	r24, Y+19	; 0x13
    2994:	9c 89       	ldd	r25, Y+20	; 0x14
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <system_init+0xa4>
    299a:	13 c0       	rjmp	.+38     	; 0x29c2 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6d 89       	ldd	r22, Y+21	; 0x15
    299e:	7e 89       	ldd	r23, Y+22	; 0x16
    29a0:	8f 89       	ldd	r24, Y+23	; 0x17
    29a2:	98 8d       	ldd	r25, Y+24	; 0x18
    29a4:	b6 d2       	rcall	.+1388   	; 0x2f12 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9c 8b       	std	Y+20, r25	; 0x14
    29ac:	8b 8b       	std	Y+19, r24	; 0x13
    29ae:	8b 89       	ldd	r24, Y+19	; 0x13
    29b0:	9c 89       	ldd	r25, Y+20	; 0x14
    29b2:	98 8b       	std	Y+16, r25	; 0x10
    29b4:	8f 87       	std	Y+15, r24	; 0x0f
    29b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b8:	98 89       	ldd	r25, Y+16	; 0x10
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <system_init+0xea>
    29be:	98 8b       	std	Y+16, r25	; 0x10
    29c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    29c2:	88 e2       	ldi	r24, 0x28	; 40
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    29cc:	89 e2       	ldi	r24, 0x29	; 41
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    29f4:	88 e0       	ldi	r24, 0x08	; 8
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    29fe:	8a e0       	ldi	r24, 0x0A	; 10
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    2a12:	8e e0       	ldi	r24, 0x0E	; 14
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	41 e0       	ldi	r20, 0x01	; 1
    2a18:	0e 94 a2 06 	call	0xd44	; 0xd44 <gpio_register_pin>
	
	
	DDRG = 0xff;
    2a1c:	e3 e3       	ldi	r30, 0x33	; 51
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	8f ef       	ldi	r24, 0xFF	; 255
    2a22:	80 83       	st	Z, r24
	PORTG = 0x00;
    2a24:	e4 e3       	ldi	r30, 0x34	; 52
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	10 82       	st	Z, r1
	servo_init(50);
    2a2a:	82 e3       	ldi	r24, 0x32	; 50
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 ed 00 	call	0x1da	; 0x1da <servo_init>
	timer_init(1000);
    2a32:	88 ee       	ldi	r24, 0xE8	; 232
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	7e de       	rcall	.-772    	; 0x2734 <timer_init>
	CAN_Init(1);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0e 94 5d 05 	call	0xaba	; 0xaba <CAN_Init>
    2a3e:	6c c0       	rjmp	.+216    	; 0x2b18 <system_init+0x248>

	//actuators_setup();
	
	while(gpio_read_pin(JUMPER_PIN))
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e2       	ldi	r26, 0x20	; 32
    2a46:	b1 e4       	ldi	r27, 0x41	; 65
    2a48:	8b 87       	std	Y+11, r24	; 0x0b
    2a4a:	9c 87       	std	Y+12, r25	; 0x0c
    2a4c:	ad 87       	std	Y+13, r26	; 0x0d
    2a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e4       	ldi	r19, 0x40	; 64
    2a5c:	4c e1       	ldi	r20, 0x1C	; 28
    2a5e:	55 e4       	ldi	r21, 0x45	; 69
    2a60:	3a d3       	rcall	.+1652   	; 0x30d6 <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8f 83       	std	Y+7, r24	; 0x07
    2a68:	98 87       	std	Y+8, r25	; 0x08
    2a6a:	a9 87       	std	Y+9, r26	; 0x09
    2a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	d8 d1       	rcall	.+944    	; 0x2e30 <__cmpsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <system_init+0x1be>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	3b c0       	rjmp	.+118    	; 0x2b04 <system_init+0x234>
	else if (__tmp > 65535)
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	17 d3       	rcall	.+1582   	; 0x30ce <__gesf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	3c f5       	brge	.+78     	; 0x2af2 <system_init+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	10 d3       	rcall	.+1568   	; 0x30d6 <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	29 d2       	rcall	.+1106   	; 0x2f12 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <system_init+0x218>
    2aca:	8a ef       	ldi	r24, 0xFA	; 250
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <system_init+0x206>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <system_init+0x1fa>
    2af0:	13 c0       	rjmp	.+38     	; 0x2b18 <system_init+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0b d2       	rcall	.+1046   	; 0x2f12 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <system_init+0x240>
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	88 e2       	ldi	r24, 0x28	; 40
    2b1a:	0e 94 10 08 	call	0x1020	; 0x1020 <gpio_read_pin>
    2b1e:	88 23       	and	r24, r24
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <system_init+0x254>
    2b22:	8e cf       	rjmp	.-228    	; 0x2a40 <system_init+0x170>
		_delay_ms(10);
	PORTG = 0xff;
    2b24:	e4 e3       	ldi	r30, 0x34	; 52
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	8f ef       	ldi	r24, 0xFF	; 255
    2b2a:	80 83       	st	Z, r24
	system_reset_system_time();
    2b2c:	a7 de       	rcall	.-690    	; 0x287c <system_reset_system_time>
	system_set_match_started();
    2b2e:	b5 de       	rcall	.-662    	; 0x289a <system_set_match_started>
	
}
    2b30:	6c 96       	adiw	r28, 0x1c	; 28
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2b42:	1f 92       	push	r1
    2b44:	0f 92       	push	r0
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	0f 92       	push	r0
    2b4a:	00 90 5b 00 	lds	r0, 0x005B
    2b4e:	0f 92       	push	r0
    2b50:	11 24       	eor	r1, r1
    2b52:	8f 93       	push	r24
    2b54:	9f 93       	push	r25
    2b56:	af 93       	push	r26
    2b58:	bf 93       	push	r27
    2b5a:	ef 93       	push	r30
    2b5c:	ff 93       	push	r31
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2b66:	80 91 3c 03 	lds	r24, 0x033C
    2b6a:	88 23       	and	r24, r24
    2b6c:	d9 f0       	breq	.+54     	; 0x2ba4 <__vector_23+0x62>
	{
		tx0_counter--;
    2b6e:	80 91 3c 03 	lds	r24, 0x033C
    2b72:	81 50       	subi	r24, 0x01	; 1
    2b74:	80 93 3c 03 	sts	0x033C, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2b78:	a6 ec       	ldi	r26, 0xC6	; 198
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	80 91 3d 03 	lds	r24, 0x033D
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	fc 01       	movw	r30, r24
    2b86:	ec 5b       	subi	r30, 0xBC	; 188
    2b88:	fc 4f       	sbci	r31, 0xFC	; 252
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2b8e:	80 91 3d 03 	lds	r24, 0x033D
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	80 93 3d 03 	sts	0x033D, r24
    2b98:	80 91 3d 03 	lds	r24, 0x033D
    2b9c:	80 34       	cpi	r24, 0x40	; 64
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <__vector_23+0x62>
			tx0_rd_index = 0;
    2ba0:	10 92 3d 03 	sts	0x033D, r1
	}
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	ff 91       	pop	r31
    2baa:	ef 91       	pop	r30
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	0f 90       	pop	r0
    2bb6:	00 92 5b 00 	sts	0x005B, r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	0f 90       	pop	r0
    2bc0:	1f 90       	pop	r1
    2bc2:	18 95       	reti

00002bc4 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2bc4:	1f 92       	push	r1
    2bc6:	0f 92       	push	r0
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	0f 92       	push	r0
    2bcc:	00 90 5b 00 	lds	r0, 0x005B
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	2f 93       	push	r18
    2bd6:	8f 93       	push	r24
    2bd8:	9f 93       	push	r25
    2bda:	ef 93       	push	r30
    2bdc:	ff 93       	push	r31
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2be8:	e0 ec       	ldi	r30, 0xC0	; 192
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	8c 71       	andi	r24, 0x1C	; 28
    2bf8:	90 70       	andi	r25, 0x00	; 0
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	d9 f4       	brne	.+54     	; 0x2c34 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2bfe:	80 91 3e 03 	lds	r24, 0x033E
    2c02:	88 2f       	mov	r24, r24
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	e6 ec       	ldi	r30, 0xC6	; 198
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	20 81       	ld	r18, Z
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	ec 57       	subi	r30, 0x7C	; 124
    2c10:	fc 4f       	sbci	r31, 0xFC	; 252
    2c12:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2c14:	80 91 3e 03 	lds	r24, 0x033E
    2c18:	8f 5f       	subi	r24, 0xFF	; 255
    2c1a:	80 93 3e 03 	sts	0x033E, r24
    2c1e:	80 91 3e 03 	lds	r24, 0x033E
    2c22:	80 34       	cpi	r24, 0x40	; 64
    2c24:	11 f4       	brne	.+4      	; 0x2c2a <__vector_21+0x66>
			rx0_wr_index = 0;
    2c26:	10 92 3e 03 	sts	0x033E, r1

		rx0_counter++;
    2c2a:	80 91 3f 03 	lds	r24, 0x033F
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	80 93 3f 03 	sts	0x033F, r24
	}
}
    2c34:	0f 90       	pop	r0
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	ff 91       	pop	r31
    2c3c:	ef 91       	pop	r30
    2c3e:	9f 91       	pop	r25
    2c40:	8f 91       	pop	r24
    2c42:	2f 91       	pop	r18
    2c44:	0f 90       	pop	r0
    2c46:	00 92 5b 00 	sts	0x005B, r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	00 90 5b 00 	lds	r0, 0x005B
    2c60:	0f 92       	push	r0
    2c62:	11 24       	eor	r1, r1
    2c64:	8f 93       	push	r24
    2c66:	9f 93       	push	r25
    2c68:	af 93       	push	r26
    2c6a:	bf 93       	push	r27
    2c6c:	ef 93       	push	r30
    2c6e:	ff 93       	push	r31
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2c78:	80 91 40 03 	lds	r24, 0x0340
    2c7c:	88 23       	and	r24, r24
    2c7e:	d9 f0       	breq	.+54     	; 0x2cb6 <__vector_34+0x62>
	{
		tx1_counter--;
    2c80:	80 91 40 03 	lds	r24, 0x0340
    2c84:	81 50       	subi	r24, 0x01	; 1
    2c86:	80 93 40 03 	sts	0x0340, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2c8a:	ae ec       	ldi	r26, 0xCE	; 206
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	80 91 41 03 	lds	r24, 0x0341
    2c92:	88 2f       	mov	r24, r24
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	fc 01       	movw	r30, r24
    2c98:	ec 53       	subi	r30, 0x3C	; 60
    2c9a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2ca0:	80 91 41 03 	lds	r24, 0x0341
    2ca4:	8f 5f       	subi	r24, 0xFF	; 255
    2ca6:	80 93 41 03 	sts	0x0341, r24
    2caa:	80 91 41 03 	lds	r24, 0x0341
    2cae:	80 34       	cpi	r24, 0x40	; 64
    2cb0:	11 f4       	brne	.+4      	; 0x2cb6 <__vector_34+0x62>
			tx1_rd_index = 0;
    2cb2:	10 92 41 03 	sts	0x0341, r1
	}
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	ff 91       	pop	r31
    2cbc:	ef 91       	pop	r30
    2cbe:	bf 91       	pop	r27
    2cc0:	af 91       	pop	r26
    2cc2:	9f 91       	pop	r25
    2cc4:	8f 91       	pop	r24
    2cc6:	0f 90       	pop	r0
    2cc8:	00 92 5b 00 	sts	0x005B, r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	0f 90       	pop	r0
    2cd2:	1f 90       	pop	r1
    2cd4:	18 95       	reti

00002cd6 <__vector_32>:

ISR(USART1_RX_vect)
{
    2cd6:	1f 92       	push	r1
    2cd8:	0f 92       	push	r0
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	0f 92       	push	r0
    2cde:	00 90 5b 00 	lds	r0, 0x005B
    2ce2:	0f 92       	push	r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	2f 93       	push	r18
    2ce8:	8f 93       	push	r24
    2cea:	9f 93       	push	r25
    2cec:	ef 93       	push	r30
    2cee:	ff 93       	push	r31
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2cfa:	e8 ec       	ldi	r30, 0xC8	; 200
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	8c 71       	andi	r24, 0x1C	; 28
    2d0a:	90 70       	andi	r25, 0x00	; 0
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	d9 f4       	brne	.+54     	; 0x2d46 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    2d10:	80 91 42 03 	lds	r24, 0x0342
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	ee ec       	ldi	r30, 0xCE	; 206
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	20 81       	ld	r18, Z
    2d1e:	fc 01       	movw	r30, r24
    2d20:	ec 5f       	subi	r30, 0xFC	; 252
    2d22:	fb 4f       	sbci	r31, 0xFB	; 251
    2d24:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    2d26:	80 91 42 03 	lds	r24, 0x0342
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	80 93 42 03 	sts	0x0342, r24
    2d30:	80 91 42 03 	lds	r24, 0x0342
    2d34:	80 34       	cpi	r24, 0x40	; 64
    2d36:	11 f4       	brne	.+4      	; 0x2d3c <__vector_32+0x66>
		rx1_wr_index = 0;
    2d38:	10 92 42 03 	sts	0x0342, r1

		rx1_counter++;
    2d3c:	80 91 43 03 	lds	r24, 0x0343
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	80 93 43 03 	sts	0x0343, r24
	}
}
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	ff 91       	pop	r31
    2d4e:	ef 91       	pop	r30
    2d50:	9f 91       	pop	r25
    2d52:	8f 91       	pop	r24
    2d54:	2f 91       	pop	r18
    2d56:	0f 90       	pop	r0
    2d58:	00 92 5b 00 	sts	0x005B, r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	0f 90       	pop	r0
    2d62:	1f 90       	pop	r1
    2d64:	18 95       	reti

00002d66 <__subsf3>:
    2d66:	50 58       	subi	r21, 0x80	; 128

00002d68 <__addsf3>:
    2d68:	bb 27       	eor	r27, r27
    2d6a:	aa 27       	eor	r26, r26
    2d6c:	0e d0       	rcall	.+28     	; 0x2d8a <__addsf3x>
    2d6e:	75 c1       	rjmp	.+746    	; 0x305a <__fp_round>
    2d70:	66 d1       	rcall	.+716    	; 0x303e <__fp_pscA>
    2d72:	30 f0       	brcs	.+12     	; 0x2d80 <__addsf3+0x18>
    2d74:	6b d1       	rcall	.+726    	; 0x304c <__fp_pscB>
    2d76:	20 f0       	brcs	.+8      	; 0x2d80 <__addsf3+0x18>
    2d78:	31 f4       	brne	.+12     	; 0x2d86 <__addsf3+0x1e>
    2d7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d7c:	11 f4       	brne	.+4      	; 0x2d82 <__addsf3+0x1a>
    2d7e:	1e f4       	brtc	.+6      	; 0x2d86 <__addsf3+0x1e>
    2d80:	5b c1       	rjmp	.+694    	; 0x3038 <__fp_nan>
    2d82:	0e f4       	brtc	.+2      	; 0x2d86 <__addsf3+0x1e>
    2d84:	e0 95       	com	r30
    2d86:	e7 fb       	bst	r30, 7
    2d88:	51 c1       	rjmp	.+674    	; 0x302c <__fp_inf>

00002d8a <__addsf3x>:
    2d8a:	e9 2f       	mov	r30, r25
    2d8c:	77 d1       	rcall	.+750    	; 0x307c <__fp_split3>
    2d8e:	80 f3       	brcs	.-32     	; 0x2d70 <__addsf3+0x8>
    2d90:	ba 17       	cp	r27, r26
    2d92:	62 07       	cpc	r22, r18
    2d94:	73 07       	cpc	r23, r19
    2d96:	84 07       	cpc	r24, r20
    2d98:	95 07       	cpc	r25, r21
    2d9a:	18 f0       	brcs	.+6      	; 0x2da2 <__addsf3x+0x18>
    2d9c:	71 f4       	brne	.+28     	; 0x2dba <__addsf3x+0x30>
    2d9e:	9e f5       	brtc	.+102    	; 0x2e06 <__addsf3x+0x7c>
    2da0:	8f c1       	rjmp	.+798    	; 0x30c0 <__fp_zero>
    2da2:	0e f4       	brtc	.+2      	; 0x2da6 <__addsf3x+0x1c>
    2da4:	e0 95       	com	r30
    2da6:	0b 2e       	mov	r0, r27
    2da8:	ba 2f       	mov	r27, r26
    2daa:	a0 2d       	mov	r26, r0
    2dac:	0b 01       	movw	r0, r22
    2dae:	b9 01       	movw	r22, r18
    2db0:	90 01       	movw	r18, r0
    2db2:	0c 01       	movw	r0, r24
    2db4:	ca 01       	movw	r24, r20
    2db6:	a0 01       	movw	r20, r0
    2db8:	11 24       	eor	r1, r1
    2dba:	ff 27       	eor	r31, r31
    2dbc:	59 1b       	sub	r21, r25
    2dbe:	99 f0       	breq	.+38     	; 0x2de6 <__addsf3x+0x5c>
    2dc0:	59 3f       	cpi	r21, 0xF9	; 249
    2dc2:	50 f4       	brcc	.+20     	; 0x2dd8 <__addsf3x+0x4e>
    2dc4:	50 3e       	cpi	r21, 0xE0	; 224
    2dc6:	68 f1       	brcs	.+90     	; 0x2e22 <__addsf3x+0x98>
    2dc8:	1a 16       	cp	r1, r26
    2dca:	f0 40       	sbci	r31, 0x00	; 0
    2dcc:	a2 2f       	mov	r26, r18
    2dce:	23 2f       	mov	r18, r19
    2dd0:	34 2f       	mov	r19, r20
    2dd2:	44 27       	eor	r20, r20
    2dd4:	58 5f       	subi	r21, 0xF8	; 248
    2dd6:	f3 cf       	rjmp	.-26     	; 0x2dbe <__addsf3x+0x34>
    2dd8:	46 95       	lsr	r20
    2dda:	37 95       	ror	r19
    2ddc:	27 95       	ror	r18
    2dde:	a7 95       	ror	r26
    2de0:	f0 40       	sbci	r31, 0x00	; 0
    2de2:	53 95       	inc	r21
    2de4:	c9 f7       	brne	.-14     	; 0x2dd8 <__addsf3x+0x4e>
    2de6:	7e f4       	brtc	.+30     	; 0x2e06 <__addsf3x+0x7c>
    2de8:	1f 16       	cp	r1, r31
    2dea:	ba 0b       	sbc	r27, r26
    2dec:	62 0b       	sbc	r22, r18
    2dee:	73 0b       	sbc	r23, r19
    2df0:	84 0b       	sbc	r24, r20
    2df2:	ba f0       	brmi	.+46     	; 0x2e22 <__addsf3x+0x98>
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	a1 f0       	breq	.+40     	; 0x2e20 <__addsf3x+0x96>
    2df8:	ff 0f       	add	r31, r31
    2dfa:	bb 1f       	adc	r27, r27
    2dfc:	66 1f       	adc	r22, r22
    2dfe:	77 1f       	adc	r23, r23
    2e00:	88 1f       	adc	r24, r24
    2e02:	c2 f7       	brpl	.-16     	; 0x2df4 <__addsf3x+0x6a>
    2e04:	0e c0       	rjmp	.+28     	; 0x2e22 <__addsf3x+0x98>
    2e06:	ba 0f       	add	r27, r26
    2e08:	62 1f       	adc	r22, r18
    2e0a:	73 1f       	adc	r23, r19
    2e0c:	84 1f       	adc	r24, r20
    2e0e:	48 f4       	brcc	.+18     	; 0x2e22 <__addsf3x+0x98>
    2e10:	87 95       	ror	r24
    2e12:	77 95       	ror	r23
    2e14:	67 95       	ror	r22
    2e16:	b7 95       	ror	r27
    2e18:	f7 95       	ror	r31
    2e1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <__addsf3x+0x96>
    2e1e:	b3 cf       	rjmp	.-154    	; 0x2d86 <__addsf3+0x1e>
    2e20:	93 95       	inc	r25
    2e22:	88 0f       	add	r24, r24
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <__addsf3x+0x9e>
    2e26:	99 27       	eor	r25, r25
    2e28:	ee 0f       	add	r30, r30
    2e2a:	97 95       	ror	r25
    2e2c:	87 95       	ror	r24
    2e2e:	08 95       	ret

00002e30 <__cmpsf2>:
    2e30:	d9 d0       	rcall	.+434    	; 0x2fe4 <__fp_cmp>
    2e32:	08 f4       	brcc	.+2      	; 0x2e36 <__cmpsf2+0x6>
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	08 95       	ret

00002e38 <__divsf3>:
    2e38:	0c d0       	rcall	.+24     	; 0x2e52 <__divsf3x>
    2e3a:	0f c1       	rjmp	.+542    	; 0x305a <__fp_round>
    2e3c:	07 d1       	rcall	.+526    	; 0x304c <__fp_pscB>
    2e3e:	40 f0       	brcs	.+16     	; 0x2e50 <__divsf3+0x18>
    2e40:	fe d0       	rcall	.+508    	; 0x303e <__fp_pscA>
    2e42:	30 f0       	brcs	.+12     	; 0x2e50 <__divsf3+0x18>
    2e44:	21 f4       	brne	.+8      	; 0x2e4e <__divsf3+0x16>
    2e46:	5f 3f       	cpi	r21, 0xFF	; 255
    2e48:	19 f0       	breq	.+6      	; 0x2e50 <__divsf3+0x18>
    2e4a:	f0 c0       	rjmp	.+480    	; 0x302c <__fp_inf>
    2e4c:	51 11       	cpse	r21, r1
    2e4e:	39 c1       	rjmp	.+626    	; 0x30c2 <__fp_szero>
    2e50:	f3 c0       	rjmp	.+486    	; 0x3038 <__fp_nan>

00002e52 <__divsf3x>:
    2e52:	14 d1       	rcall	.+552    	; 0x307c <__fp_split3>
    2e54:	98 f3       	brcs	.-26     	; 0x2e3c <__divsf3+0x4>

00002e56 <__divsf3_pse>:
    2e56:	99 23       	and	r25, r25
    2e58:	c9 f3       	breq	.-14     	; 0x2e4c <__divsf3+0x14>
    2e5a:	55 23       	and	r21, r21
    2e5c:	b1 f3       	breq	.-20     	; 0x2e4a <__divsf3+0x12>
    2e5e:	95 1b       	sub	r25, r21
    2e60:	55 0b       	sbc	r21, r21
    2e62:	bb 27       	eor	r27, r27
    2e64:	aa 27       	eor	r26, r26
    2e66:	62 17       	cp	r22, r18
    2e68:	73 07       	cpc	r23, r19
    2e6a:	84 07       	cpc	r24, r20
    2e6c:	38 f0       	brcs	.+14     	; 0x2e7c <__divsf3_pse+0x26>
    2e6e:	9f 5f       	subi	r25, 0xFF	; 255
    2e70:	5f 4f       	sbci	r21, 0xFF	; 255
    2e72:	22 0f       	add	r18, r18
    2e74:	33 1f       	adc	r19, r19
    2e76:	44 1f       	adc	r20, r20
    2e78:	aa 1f       	adc	r26, r26
    2e7a:	a9 f3       	breq	.-22     	; 0x2e66 <__divsf3_pse+0x10>
    2e7c:	33 d0       	rcall	.+102    	; 0x2ee4 <__divsf3_pse+0x8e>
    2e7e:	0e 2e       	mov	r0, r30
    2e80:	3a f0       	brmi	.+14     	; 0x2e90 <__divsf3_pse+0x3a>
    2e82:	e0 e8       	ldi	r30, 0x80	; 128
    2e84:	30 d0       	rcall	.+96     	; 0x2ee6 <__divsf3_pse+0x90>
    2e86:	91 50       	subi	r25, 0x01	; 1
    2e88:	50 40       	sbci	r21, 0x00	; 0
    2e8a:	e6 95       	lsr	r30
    2e8c:	00 1c       	adc	r0, r0
    2e8e:	ca f7       	brpl	.-14     	; 0x2e82 <__divsf3_pse+0x2c>
    2e90:	29 d0       	rcall	.+82     	; 0x2ee4 <__divsf3_pse+0x8e>
    2e92:	fe 2f       	mov	r31, r30
    2e94:	27 d0       	rcall	.+78     	; 0x2ee4 <__divsf3_pse+0x8e>
    2e96:	66 0f       	add	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	26 17       	cp	r18, r22
    2ea0:	37 07       	cpc	r19, r23
    2ea2:	48 07       	cpc	r20, r24
    2ea4:	ab 07       	cpc	r26, r27
    2ea6:	b0 e8       	ldi	r27, 0x80	; 128
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <__divsf3_pse+0x56>
    2eaa:	bb 0b       	sbc	r27, r27
    2eac:	80 2d       	mov	r24, r0
    2eae:	bf 01       	movw	r22, r30
    2eb0:	ff 27       	eor	r31, r31
    2eb2:	93 58       	subi	r25, 0x83	; 131
    2eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb6:	2a f0       	brmi	.+10     	; 0x2ec2 <__divsf3_pse+0x6c>
    2eb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2eba:	51 05       	cpc	r21, r1
    2ebc:	68 f0       	brcs	.+26     	; 0x2ed8 <__divsf3_pse+0x82>
    2ebe:	b6 c0       	rjmp	.+364    	; 0x302c <__fp_inf>
    2ec0:	00 c1       	rjmp	.+512    	; 0x30c2 <__fp_szero>
    2ec2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ec4:	ec f3       	brlt	.-6      	; 0x2ec0 <__divsf3_pse+0x6a>
    2ec6:	98 3e       	cpi	r25, 0xE8	; 232
    2ec8:	dc f3       	brlt	.-10     	; 0x2ec0 <__divsf3_pse+0x6a>
    2eca:	86 95       	lsr	r24
    2ecc:	77 95       	ror	r23
    2ece:	67 95       	ror	r22
    2ed0:	b7 95       	ror	r27
    2ed2:	f7 95       	ror	r31
    2ed4:	9f 5f       	subi	r25, 0xFF	; 255
    2ed6:	c9 f7       	brne	.-14     	; 0x2eca <__divsf3_pse+0x74>
    2ed8:	88 0f       	add	r24, r24
    2eda:	91 1d       	adc	r25, r1
    2edc:	96 95       	lsr	r25
    2ede:	87 95       	ror	r24
    2ee0:	97 f9       	bld	r25, 7
    2ee2:	08 95       	ret
    2ee4:	e1 e0       	ldi	r30, 0x01	; 1
    2ee6:	66 0f       	add	r22, r22
    2ee8:	77 1f       	adc	r23, r23
    2eea:	88 1f       	adc	r24, r24
    2eec:	bb 1f       	adc	r27, r27
    2eee:	62 17       	cp	r22, r18
    2ef0:	73 07       	cpc	r23, r19
    2ef2:	84 07       	cpc	r24, r20
    2ef4:	ba 07       	cpc	r27, r26
    2ef6:	20 f0       	brcs	.+8      	; 0x2f00 <__divsf3_pse+0xaa>
    2ef8:	62 1b       	sub	r22, r18
    2efa:	73 0b       	sbc	r23, r19
    2efc:	84 0b       	sbc	r24, r20
    2efe:	ba 0b       	sbc	r27, r26
    2f00:	ee 1f       	adc	r30, r30
    2f02:	88 f7       	brcc	.-30     	; 0x2ee6 <__divsf3_pse+0x90>
    2f04:	e0 95       	com	r30
    2f06:	08 95       	ret

00002f08 <__fixsfsi>:
    2f08:	04 d0       	rcall	.+8      	; 0x2f12 <__fixunssfsi>
    2f0a:	68 94       	set
    2f0c:	b1 11       	cpse	r27, r1
    2f0e:	d9 c0       	rjmp	.+434    	; 0x30c2 <__fp_szero>
    2f10:	08 95       	ret

00002f12 <__fixunssfsi>:
    2f12:	bc d0       	rcall	.+376    	; 0x308c <__fp_splitA>
    2f14:	88 f0       	brcs	.+34     	; 0x2f38 <__fixunssfsi+0x26>
    2f16:	9f 57       	subi	r25, 0x7F	; 127
    2f18:	90 f0       	brcs	.+36     	; 0x2f3e <__fixunssfsi+0x2c>
    2f1a:	b9 2f       	mov	r27, r25
    2f1c:	99 27       	eor	r25, r25
    2f1e:	b7 51       	subi	r27, 0x17	; 23
    2f20:	a0 f0       	brcs	.+40     	; 0x2f4a <__fixunssfsi+0x38>
    2f22:	d1 f0       	breq	.+52     	; 0x2f58 <__fixunssfsi+0x46>
    2f24:	66 0f       	add	r22, r22
    2f26:	77 1f       	adc	r23, r23
    2f28:	88 1f       	adc	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	1a f0       	brmi	.+6      	; 0x2f34 <__fixunssfsi+0x22>
    2f2e:	ba 95       	dec	r27
    2f30:	c9 f7       	brne	.-14     	; 0x2f24 <__fixunssfsi+0x12>
    2f32:	12 c0       	rjmp	.+36     	; 0x2f58 <__fixunssfsi+0x46>
    2f34:	b1 30       	cpi	r27, 0x01	; 1
    2f36:	81 f0       	breq	.+32     	; 0x2f58 <__fixunssfsi+0x46>
    2f38:	c3 d0       	rcall	.+390    	; 0x30c0 <__fp_zero>
    2f3a:	b1 e0       	ldi	r27, 0x01	; 1
    2f3c:	08 95       	ret
    2f3e:	c0 c0       	rjmp	.+384    	; 0x30c0 <__fp_zero>
    2f40:	67 2f       	mov	r22, r23
    2f42:	78 2f       	mov	r23, r24
    2f44:	88 27       	eor	r24, r24
    2f46:	b8 5f       	subi	r27, 0xF8	; 248
    2f48:	39 f0       	breq	.+14     	; 0x2f58 <__fixunssfsi+0x46>
    2f4a:	b9 3f       	cpi	r27, 0xF9	; 249
    2f4c:	cc f3       	brlt	.-14     	; 0x2f40 <__fixunssfsi+0x2e>
    2f4e:	86 95       	lsr	r24
    2f50:	77 95       	ror	r23
    2f52:	67 95       	ror	r22
    2f54:	b3 95       	inc	r27
    2f56:	d9 f7       	brne	.-10     	; 0x2f4e <__fixunssfsi+0x3c>
    2f58:	3e f4       	brtc	.+14     	; 0x2f68 <__fixunssfsi+0x56>
    2f5a:	90 95       	com	r25
    2f5c:	80 95       	com	r24
    2f5e:	70 95       	com	r23
    2f60:	61 95       	neg	r22
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255
    2f64:	8f 4f       	sbci	r24, 0xFF	; 255
    2f66:	9f 4f       	sbci	r25, 0xFF	; 255
    2f68:	08 95       	ret

00002f6a <__floatunsisf>:
    2f6a:	e8 94       	clt
    2f6c:	09 c0       	rjmp	.+18     	; 0x2f80 <__floatsisf+0x12>

00002f6e <__floatsisf>:
    2f6e:	97 fb       	bst	r25, 7
    2f70:	3e f4       	brtc	.+14     	; 0x2f80 <__floatsisf+0x12>
    2f72:	90 95       	com	r25
    2f74:	80 95       	com	r24
    2f76:	70 95       	com	r23
    2f78:	61 95       	neg	r22
    2f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f80:	99 23       	and	r25, r25
    2f82:	a9 f0       	breq	.+42     	; 0x2fae <__floatsisf+0x40>
    2f84:	f9 2f       	mov	r31, r25
    2f86:	96 e9       	ldi	r25, 0x96	; 150
    2f88:	bb 27       	eor	r27, r27
    2f8a:	93 95       	inc	r25
    2f8c:	f6 95       	lsr	r31
    2f8e:	87 95       	ror	r24
    2f90:	77 95       	ror	r23
    2f92:	67 95       	ror	r22
    2f94:	b7 95       	ror	r27
    2f96:	f1 11       	cpse	r31, r1
    2f98:	f8 cf       	rjmp	.-16     	; 0x2f8a <__floatsisf+0x1c>
    2f9a:	fa f4       	brpl	.+62     	; 0x2fda <__floatsisf+0x6c>
    2f9c:	bb 0f       	add	r27, r27
    2f9e:	11 f4       	brne	.+4      	; 0x2fa4 <__floatsisf+0x36>
    2fa0:	60 ff       	sbrs	r22, 0
    2fa2:	1b c0       	rjmp	.+54     	; 0x2fda <__floatsisf+0x6c>
    2fa4:	6f 5f       	subi	r22, 0xFF	; 255
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <__floatsisf+0x6c>
    2fae:	88 23       	and	r24, r24
    2fb0:	11 f0       	breq	.+4      	; 0x2fb6 <__floatsisf+0x48>
    2fb2:	96 e9       	ldi	r25, 0x96	; 150
    2fb4:	11 c0       	rjmp	.+34     	; 0x2fd8 <__floatsisf+0x6a>
    2fb6:	77 23       	and	r23, r23
    2fb8:	21 f0       	breq	.+8      	; 0x2fc2 <__floatsisf+0x54>
    2fba:	9e e8       	ldi	r25, 0x8E	; 142
    2fbc:	87 2f       	mov	r24, r23
    2fbe:	76 2f       	mov	r23, r22
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <__floatsisf+0x5e>
    2fc2:	66 23       	and	r22, r22
    2fc4:	71 f0       	breq	.+28     	; 0x2fe2 <__floatsisf+0x74>
    2fc6:	96 e8       	ldi	r25, 0x86	; 134
    2fc8:	86 2f       	mov	r24, r22
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	60 e0       	ldi	r22, 0x00	; 0
    2fce:	2a f0       	brmi	.+10     	; 0x2fda <__floatsisf+0x6c>
    2fd0:	9a 95       	dec	r25
    2fd2:	66 0f       	add	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	da f7       	brpl	.-10     	; 0x2fd0 <__floatsisf+0x62>
    2fda:	88 0f       	add	r24, r24
    2fdc:	96 95       	lsr	r25
    2fde:	87 95       	ror	r24
    2fe0:	97 f9       	bld	r25, 7
    2fe2:	08 95       	ret

00002fe4 <__fp_cmp>:
    2fe4:	99 0f       	add	r25, r25
    2fe6:	00 08       	sbc	r0, r0
    2fe8:	55 0f       	add	r21, r21
    2fea:	aa 0b       	sbc	r26, r26
    2fec:	e0 e8       	ldi	r30, 0x80	; 128
    2fee:	fe ef       	ldi	r31, 0xFE	; 254
    2ff0:	16 16       	cp	r1, r22
    2ff2:	17 06       	cpc	r1, r23
    2ff4:	e8 07       	cpc	r30, r24
    2ff6:	f9 07       	cpc	r31, r25
    2ff8:	c0 f0       	brcs	.+48     	; 0x302a <__fp_cmp+0x46>
    2ffa:	12 16       	cp	r1, r18
    2ffc:	13 06       	cpc	r1, r19
    2ffe:	e4 07       	cpc	r30, r20
    3000:	f5 07       	cpc	r31, r21
    3002:	98 f0       	brcs	.+38     	; 0x302a <__fp_cmp+0x46>
    3004:	62 1b       	sub	r22, r18
    3006:	73 0b       	sbc	r23, r19
    3008:	84 0b       	sbc	r24, r20
    300a:	95 0b       	sbc	r25, r21
    300c:	39 f4       	brne	.+14     	; 0x301c <__fp_cmp+0x38>
    300e:	0a 26       	eor	r0, r26
    3010:	61 f0       	breq	.+24     	; 0x302a <__fp_cmp+0x46>
    3012:	23 2b       	or	r18, r19
    3014:	24 2b       	or	r18, r20
    3016:	25 2b       	or	r18, r21
    3018:	21 f4       	brne	.+8      	; 0x3022 <__fp_cmp+0x3e>
    301a:	08 95       	ret
    301c:	0a 26       	eor	r0, r26
    301e:	09 f4       	brne	.+2      	; 0x3022 <__fp_cmp+0x3e>
    3020:	a1 40       	sbci	r26, 0x01	; 1
    3022:	a6 95       	lsr	r26
    3024:	8f ef       	ldi	r24, 0xFF	; 255
    3026:	81 1d       	adc	r24, r1
    3028:	81 1d       	adc	r24, r1
    302a:	08 95       	ret

0000302c <__fp_inf>:
    302c:	97 f9       	bld	r25, 7
    302e:	9f 67       	ori	r25, 0x7F	; 127
    3030:	80 e8       	ldi	r24, 0x80	; 128
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	08 95       	ret

00003038 <__fp_nan>:
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	80 ec       	ldi	r24, 0xC0	; 192
    303c:	08 95       	ret

0000303e <__fp_pscA>:
    303e:	00 24       	eor	r0, r0
    3040:	0a 94       	dec	r0
    3042:	16 16       	cp	r1, r22
    3044:	17 06       	cpc	r1, r23
    3046:	18 06       	cpc	r1, r24
    3048:	09 06       	cpc	r0, r25
    304a:	08 95       	ret

0000304c <__fp_pscB>:
    304c:	00 24       	eor	r0, r0
    304e:	0a 94       	dec	r0
    3050:	12 16       	cp	r1, r18
    3052:	13 06       	cpc	r1, r19
    3054:	14 06       	cpc	r1, r20
    3056:	05 06       	cpc	r0, r21
    3058:	08 95       	ret

0000305a <__fp_round>:
    305a:	09 2e       	mov	r0, r25
    305c:	03 94       	inc	r0
    305e:	00 0c       	add	r0, r0
    3060:	11 f4       	brne	.+4      	; 0x3066 <__fp_round+0xc>
    3062:	88 23       	and	r24, r24
    3064:	52 f0       	brmi	.+20     	; 0x307a <__fp_round+0x20>
    3066:	bb 0f       	add	r27, r27
    3068:	40 f4       	brcc	.+16     	; 0x307a <__fp_round+0x20>
    306a:	bf 2b       	or	r27, r31
    306c:	11 f4       	brne	.+4      	; 0x3072 <__fp_round+0x18>
    306e:	60 ff       	sbrs	r22, 0
    3070:	04 c0       	rjmp	.+8      	; 0x307a <__fp_round+0x20>
    3072:	6f 5f       	subi	r22, 0xFF	; 255
    3074:	7f 4f       	sbci	r23, 0xFF	; 255
    3076:	8f 4f       	sbci	r24, 0xFF	; 255
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	08 95       	ret

0000307c <__fp_split3>:
    307c:	57 fd       	sbrc	r21, 7
    307e:	90 58       	subi	r25, 0x80	; 128
    3080:	44 0f       	add	r20, r20
    3082:	55 1f       	adc	r21, r21
    3084:	59 f0       	breq	.+22     	; 0x309c <__fp_splitA+0x10>
    3086:	5f 3f       	cpi	r21, 0xFF	; 255
    3088:	71 f0       	breq	.+28     	; 0x30a6 <__fp_splitA+0x1a>
    308a:	47 95       	ror	r20

0000308c <__fp_splitA>:
    308c:	88 0f       	add	r24, r24
    308e:	97 fb       	bst	r25, 7
    3090:	99 1f       	adc	r25, r25
    3092:	61 f0       	breq	.+24     	; 0x30ac <__fp_splitA+0x20>
    3094:	9f 3f       	cpi	r25, 0xFF	; 255
    3096:	79 f0       	breq	.+30     	; 0x30b6 <__fp_splitA+0x2a>
    3098:	87 95       	ror	r24
    309a:	08 95       	ret
    309c:	12 16       	cp	r1, r18
    309e:	13 06       	cpc	r1, r19
    30a0:	14 06       	cpc	r1, r20
    30a2:	55 1f       	adc	r21, r21
    30a4:	f2 cf       	rjmp	.-28     	; 0x308a <__fp_split3+0xe>
    30a6:	46 95       	lsr	r20
    30a8:	f1 df       	rcall	.-30     	; 0x308c <__fp_splitA>
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <__fp_splitA+0x30>
    30ac:	16 16       	cp	r1, r22
    30ae:	17 06       	cpc	r1, r23
    30b0:	18 06       	cpc	r1, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	f1 cf       	rjmp	.-30     	; 0x3098 <__fp_splitA+0xc>
    30b6:	86 95       	lsr	r24
    30b8:	71 05       	cpc	r23, r1
    30ba:	61 05       	cpc	r22, r1
    30bc:	08 94       	sec
    30be:	08 95       	ret

000030c0 <__fp_zero>:
    30c0:	e8 94       	clt

000030c2 <__fp_szero>:
    30c2:	bb 27       	eor	r27, r27
    30c4:	66 27       	eor	r22, r22
    30c6:	77 27       	eor	r23, r23
    30c8:	cb 01       	movw	r24, r22
    30ca:	97 f9       	bld	r25, 7
    30cc:	08 95       	ret

000030ce <__gesf2>:
    30ce:	8a df       	rcall	.-236    	; 0x2fe4 <__fp_cmp>
    30d0:	08 f4       	brcc	.+2      	; 0x30d4 <__gesf2+0x6>
    30d2:	8f ef       	ldi	r24, 0xFF	; 255
    30d4:	08 95       	ret

000030d6 <__mulsf3>:
    30d6:	0b d0       	rcall	.+22     	; 0x30ee <__mulsf3x>
    30d8:	c0 cf       	rjmp	.-128    	; 0x305a <__fp_round>
    30da:	b1 df       	rcall	.-158    	; 0x303e <__fp_pscA>
    30dc:	28 f0       	brcs	.+10     	; 0x30e8 <__mulsf3+0x12>
    30de:	b6 df       	rcall	.-148    	; 0x304c <__fp_pscB>
    30e0:	18 f0       	brcs	.+6      	; 0x30e8 <__mulsf3+0x12>
    30e2:	95 23       	and	r25, r21
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <__mulsf3+0x12>
    30e6:	a2 cf       	rjmp	.-188    	; 0x302c <__fp_inf>
    30e8:	a7 cf       	rjmp	.-178    	; 0x3038 <__fp_nan>
    30ea:	11 24       	eor	r1, r1
    30ec:	ea cf       	rjmp	.-44     	; 0x30c2 <__fp_szero>

000030ee <__mulsf3x>:
    30ee:	c6 df       	rcall	.-116    	; 0x307c <__fp_split3>
    30f0:	a0 f3       	brcs	.-24     	; 0x30da <__mulsf3+0x4>

000030f2 <__mulsf3_pse>:
    30f2:	95 9f       	mul	r25, r21
    30f4:	d1 f3       	breq	.-12     	; 0x30ea <__mulsf3+0x14>
    30f6:	95 0f       	add	r25, r21
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	55 1f       	adc	r21, r21
    30fc:	62 9f       	mul	r22, r18
    30fe:	f0 01       	movw	r30, r0
    3100:	72 9f       	mul	r23, r18
    3102:	bb 27       	eor	r27, r27
    3104:	f0 0d       	add	r31, r0
    3106:	b1 1d       	adc	r27, r1
    3108:	63 9f       	mul	r22, r19
    310a:	aa 27       	eor	r26, r26
    310c:	f0 0d       	add	r31, r0
    310e:	b1 1d       	adc	r27, r1
    3110:	aa 1f       	adc	r26, r26
    3112:	64 9f       	mul	r22, r20
    3114:	66 27       	eor	r22, r22
    3116:	b0 0d       	add	r27, r0
    3118:	a1 1d       	adc	r26, r1
    311a:	66 1f       	adc	r22, r22
    311c:	82 9f       	mul	r24, r18
    311e:	22 27       	eor	r18, r18
    3120:	b0 0d       	add	r27, r0
    3122:	a1 1d       	adc	r26, r1
    3124:	62 1f       	adc	r22, r18
    3126:	73 9f       	mul	r23, r19
    3128:	b0 0d       	add	r27, r0
    312a:	a1 1d       	adc	r26, r1
    312c:	62 1f       	adc	r22, r18
    312e:	83 9f       	mul	r24, r19
    3130:	a0 0d       	add	r26, r0
    3132:	61 1d       	adc	r22, r1
    3134:	22 1f       	adc	r18, r18
    3136:	74 9f       	mul	r23, r20
    3138:	33 27       	eor	r19, r19
    313a:	a0 0d       	add	r26, r0
    313c:	61 1d       	adc	r22, r1
    313e:	23 1f       	adc	r18, r19
    3140:	84 9f       	mul	r24, r20
    3142:	60 0d       	add	r22, r0
    3144:	21 1d       	adc	r18, r1
    3146:	82 2f       	mov	r24, r18
    3148:	76 2f       	mov	r23, r22
    314a:	6a 2f       	mov	r22, r26
    314c:	11 24       	eor	r1, r1
    314e:	9f 57       	subi	r25, 0x7F	; 127
    3150:	50 40       	sbci	r21, 0x00	; 0
    3152:	8a f0       	brmi	.+34     	; 0x3176 <__mulsf3_pse+0x84>
    3154:	e1 f0       	breq	.+56     	; 0x318e <__mulsf3_pse+0x9c>
    3156:	88 23       	and	r24, r24
    3158:	4a f0       	brmi	.+18     	; 0x316c <__mulsf3_pse+0x7a>
    315a:	ee 0f       	add	r30, r30
    315c:	ff 1f       	adc	r31, r31
    315e:	bb 1f       	adc	r27, r27
    3160:	66 1f       	adc	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	88 1f       	adc	r24, r24
    3166:	91 50       	subi	r25, 0x01	; 1
    3168:	50 40       	sbci	r21, 0x00	; 0
    316a:	a9 f7       	brne	.-22     	; 0x3156 <__mulsf3_pse+0x64>
    316c:	9e 3f       	cpi	r25, 0xFE	; 254
    316e:	51 05       	cpc	r21, r1
    3170:	70 f0       	brcs	.+28     	; 0x318e <__mulsf3_pse+0x9c>
    3172:	5c cf       	rjmp	.-328    	; 0x302c <__fp_inf>
    3174:	a6 cf       	rjmp	.-180    	; 0x30c2 <__fp_szero>
    3176:	5f 3f       	cpi	r21, 0xFF	; 255
    3178:	ec f3       	brlt	.-6      	; 0x3174 <__mulsf3_pse+0x82>
    317a:	98 3e       	cpi	r25, 0xE8	; 232
    317c:	dc f3       	brlt	.-10     	; 0x3174 <__mulsf3_pse+0x82>
    317e:	86 95       	lsr	r24
    3180:	77 95       	ror	r23
    3182:	67 95       	ror	r22
    3184:	b7 95       	ror	r27
    3186:	f7 95       	ror	r31
    3188:	e7 95       	ror	r30
    318a:	9f 5f       	subi	r25, 0xFF	; 255
    318c:	c1 f7       	brne	.-16     	; 0x317e <__mulsf3_pse+0x8c>
    318e:	fe 2b       	or	r31, r30
    3190:	88 0f       	add	r24, r24
    3192:	91 1d       	adc	r25, r1
    3194:	96 95       	lsr	r25
    3196:	87 95       	ror	r24
    3198:	97 f9       	bld	r25, 7
    319a:	08 95       	ret

0000319c <calloc>:
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	68 9f       	mul	r22, r24
    31a6:	80 01       	movw	r16, r0
    31a8:	69 9f       	mul	r22, r25
    31aa:	10 0d       	add	r17, r0
    31ac:	78 9f       	mul	r23, r24
    31ae:	10 0d       	add	r17, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	c8 01       	movw	r24, r16
    31b4:	0d d0       	rcall	.+26     	; 0x31d0 <malloc>
    31b6:	ec 01       	movw	r28, r24
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	21 f0       	breq	.+8      	; 0x31c4 <calloc+0x28>
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	a8 01       	movw	r20, r16
    31c2:	0b d1       	rcall	.+534    	; 0x33da <memset>
    31c4:	ce 01       	movw	r24, r28
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	08 95       	ret

000031d0 <malloc>:
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	bc 01       	movw	r22, r24
    31d6:	82 30       	cpi	r24, 0x02	; 2
    31d8:	91 05       	cpc	r25, r1
    31da:	10 f4       	brcc	.+4      	; 0x31e0 <malloc+0x10>
    31dc:	62 e0       	ldi	r22, 0x02	; 2
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	a0 91 46 04 	lds	r26, 0x0446
    31e4:	b0 91 47 04 	lds	r27, 0x0447
    31e8:	ed 01       	movw	r28, r26
    31ea:	e0 e0       	ldi	r30, 0x00	; 0
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	21 c0       	rjmp	.+66     	; 0x3236 <malloc+0x66>
    31f4:	88 81       	ld	r24, Y
    31f6:	99 81       	ldd	r25, Y+1	; 0x01
    31f8:	86 17       	cp	r24, r22
    31fa:	97 07       	cpc	r25, r23
    31fc:	69 f4       	brne	.+26     	; 0x3218 <malloc+0x48>
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	9b 81       	ldd	r25, Y+3	; 0x03
    3202:	30 97       	sbiw	r30, 0x00	; 0
    3204:	19 f0       	breq	.+6      	; 0x320c <malloc+0x3c>
    3206:	93 83       	std	Z+3, r25	; 0x03
    3208:	82 83       	std	Z+2, r24	; 0x02
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <malloc+0x44>
    320c:	90 93 47 04 	sts	0x0447, r25
    3210:	80 93 46 04 	sts	0x0446, r24
    3214:	fe 01       	movw	r30, r28
    3216:	34 c0       	rjmp	.+104    	; 0x3280 <malloc+0xb0>
    3218:	68 17       	cp	r22, r24
    321a:	79 07       	cpc	r23, r25
    321c:	38 f4       	brcc	.+14     	; 0x322c <malloc+0x5c>
    321e:	41 15       	cp	r20, r1
    3220:	51 05       	cpc	r21, r1
    3222:	19 f0       	breq	.+6      	; 0x322a <malloc+0x5a>
    3224:	84 17       	cp	r24, r20
    3226:	95 07       	cpc	r25, r21
    3228:	08 f4       	brcc	.+2      	; 0x322c <malloc+0x5c>
    322a:	ac 01       	movw	r20, r24
    322c:	fe 01       	movw	r30, r28
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	9c 01       	movw	r18, r24
    3234:	e9 01       	movw	r28, r18
    3236:	20 97       	sbiw	r28, 0x00	; 0
    3238:	e9 f6       	brne	.-70     	; 0x31f4 <malloc+0x24>
    323a:	41 15       	cp	r20, r1
    323c:	51 05       	cpc	r21, r1
    323e:	a9 f1       	breq	.+106    	; 0x32aa <malloc+0xda>
    3240:	ca 01       	movw	r24, r20
    3242:	86 1b       	sub	r24, r22
    3244:	97 0b       	sbc	r25, r23
    3246:	04 97       	sbiw	r24, 0x04	; 4
    3248:	08 f4       	brcc	.+2      	; 0x324c <malloc+0x7c>
    324a:	ba 01       	movw	r22, r20
    324c:	e0 e0       	ldi	r30, 0x00	; 0
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	2a c0       	rjmp	.+84     	; 0x32a6 <malloc+0xd6>
    3252:	8d 91       	ld	r24, X+
    3254:	9c 91       	ld	r25, X
    3256:	11 97       	sbiw	r26, 0x01	; 1
    3258:	84 17       	cp	r24, r20
    325a:	95 07       	cpc	r25, r21
    325c:	f9 f4       	brne	.+62     	; 0x329c <malloc+0xcc>
    325e:	64 17       	cp	r22, r20
    3260:	75 07       	cpc	r23, r21
    3262:	81 f4       	brne	.+32     	; 0x3284 <malloc+0xb4>
    3264:	12 96       	adiw	r26, 0x02	; 2
    3266:	8d 91       	ld	r24, X+
    3268:	9c 91       	ld	r25, X
    326a:	13 97       	sbiw	r26, 0x03	; 3
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	19 f0       	breq	.+6      	; 0x3276 <malloc+0xa6>
    3270:	93 83       	std	Z+3, r25	; 0x03
    3272:	82 83       	std	Z+2, r24	; 0x02
    3274:	04 c0       	rjmp	.+8      	; 0x327e <malloc+0xae>
    3276:	90 93 47 04 	sts	0x0447, r25
    327a:	80 93 46 04 	sts	0x0446, r24
    327e:	fd 01       	movw	r30, r26
    3280:	32 96       	adiw	r30, 0x02	; 2
    3282:	4f c0       	rjmp	.+158    	; 0x3322 <malloc+0x152>
    3284:	ca 01       	movw	r24, r20
    3286:	86 1b       	sub	r24, r22
    3288:	97 0b       	sbc	r25, r23
    328a:	fd 01       	movw	r30, r26
    328c:	e8 0f       	add	r30, r24
    328e:	f9 1f       	adc	r31, r25
    3290:	61 93       	st	Z+, r22
    3292:	71 93       	st	Z+, r23
    3294:	02 97       	sbiw	r24, 0x02	; 2
    3296:	8d 93       	st	X+, r24
    3298:	9c 93       	st	X, r25
    329a:	43 c0       	rjmp	.+134    	; 0x3322 <malloc+0x152>
    329c:	fd 01       	movw	r30, r26
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	9c 01       	movw	r18, r24
    32a4:	d9 01       	movw	r26, r18
    32a6:	10 97       	sbiw	r26, 0x00	; 0
    32a8:	a1 f6       	brne	.-88     	; 0x3252 <malloc+0x82>
    32aa:	80 91 44 04 	lds	r24, 0x0444
    32ae:	90 91 45 04 	lds	r25, 0x0445
    32b2:	89 2b       	or	r24, r25
    32b4:	41 f4       	brne	.+16     	; 0x32c6 <malloc+0xf6>
    32b6:	80 91 02 01 	lds	r24, 0x0102
    32ba:	90 91 03 01 	lds	r25, 0x0103
    32be:	90 93 45 04 	sts	0x0445, r25
    32c2:	80 93 44 04 	sts	0x0444, r24
    32c6:	40 91 04 01 	lds	r20, 0x0104
    32ca:	50 91 05 01 	lds	r21, 0x0105
    32ce:	41 15       	cp	r20, r1
    32d0:	51 05       	cpc	r21, r1
    32d2:	41 f4       	brne	.+16     	; 0x32e4 <malloc+0x114>
    32d4:	4d b7       	in	r20, 0x3d	; 61
    32d6:	5e b7       	in	r21, 0x3e	; 62
    32d8:	80 91 00 01 	lds	r24, 0x0100
    32dc:	90 91 01 01 	lds	r25, 0x0101
    32e0:	48 1b       	sub	r20, r24
    32e2:	59 0b       	sbc	r21, r25
    32e4:	20 91 44 04 	lds	r18, 0x0444
    32e8:	30 91 45 04 	lds	r19, 0x0445
    32ec:	24 17       	cp	r18, r20
    32ee:	35 07       	cpc	r19, r21
    32f0:	b0 f4       	brcc	.+44     	; 0x331e <malloc+0x14e>
    32f2:	ca 01       	movw	r24, r20
    32f4:	82 1b       	sub	r24, r18
    32f6:	93 0b       	sbc	r25, r19
    32f8:	86 17       	cp	r24, r22
    32fa:	97 07       	cpc	r25, r23
    32fc:	80 f0       	brcs	.+32     	; 0x331e <malloc+0x14e>
    32fe:	ab 01       	movw	r20, r22
    3300:	4e 5f       	subi	r20, 0xFE	; 254
    3302:	5f 4f       	sbci	r21, 0xFF	; 255
    3304:	84 17       	cp	r24, r20
    3306:	95 07       	cpc	r25, r21
    3308:	50 f0       	brcs	.+20     	; 0x331e <malloc+0x14e>
    330a:	42 0f       	add	r20, r18
    330c:	53 1f       	adc	r21, r19
    330e:	50 93 45 04 	sts	0x0445, r21
    3312:	40 93 44 04 	sts	0x0444, r20
    3316:	f9 01       	movw	r30, r18
    3318:	61 93       	st	Z+, r22
    331a:	71 93       	st	Z+, r23
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <malloc+0x152>
    331e:	e0 e0       	ldi	r30, 0x00	; 0
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	cf 01       	movw	r24, r30
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	08 95       	ret

0000332a <free>:
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	09 f4       	brne	.+2      	; 0x3334 <free+0xa>
    3332:	50 c0       	rjmp	.+160    	; 0x33d4 <free+0xaa>
    3334:	ec 01       	movw	r28, r24
    3336:	22 97       	sbiw	r28, 0x02	; 2
    3338:	1b 82       	std	Y+3, r1	; 0x03
    333a:	1a 82       	std	Y+2, r1	; 0x02
    333c:	a0 91 46 04 	lds	r26, 0x0446
    3340:	b0 91 47 04 	lds	r27, 0x0447
    3344:	10 97       	sbiw	r26, 0x00	; 0
    3346:	09 f1       	breq	.+66     	; 0x338a <free+0x60>
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	ac 17       	cp	r26, r28
    334e:	bd 07       	cpc	r27, r29
    3350:	08 f1       	brcs	.+66     	; 0x3394 <free+0x6a>
    3352:	bb 83       	std	Y+3, r27	; 0x03
    3354:	aa 83       	std	Y+2, r26	; 0x02
    3356:	fe 01       	movw	r30, r28
    3358:	21 91       	ld	r18, Z+
    335a:	31 91       	ld	r19, Z+
    335c:	e2 0f       	add	r30, r18
    335e:	f3 1f       	adc	r31, r19
    3360:	ae 17       	cp	r26, r30
    3362:	bf 07       	cpc	r27, r31
    3364:	79 f4       	brne	.+30     	; 0x3384 <free+0x5a>
    3366:	8d 91       	ld	r24, X+
    3368:	9c 91       	ld	r25, X
    336a:	11 97       	sbiw	r26, 0x01	; 1
    336c:	28 0f       	add	r18, r24
    336e:	39 1f       	adc	r19, r25
    3370:	2e 5f       	subi	r18, 0xFE	; 254
    3372:	3f 4f       	sbci	r19, 0xFF	; 255
    3374:	39 83       	std	Y+1, r19	; 0x01
    3376:	28 83       	st	Y, r18
    3378:	12 96       	adiw	r26, 0x02	; 2
    337a:	8d 91       	ld	r24, X+
    337c:	9c 91       	ld	r25, X
    337e:	13 97       	sbiw	r26, 0x03	; 3
    3380:	9b 83       	std	Y+3, r25	; 0x03
    3382:	8a 83       	std	Y+2, r24	; 0x02
    3384:	41 15       	cp	r20, r1
    3386:	51 05       	cpc	r21, r1
    3388:	71 f4       	brne	.+28     	; 0x33a6 <free+0x7c>
    338a:	d0 93 47 04 	sts	0x0447, r29
    338e:	c0 93 46 04 	sts	0x0446, r28
    3392:	20 c0       	rjmp	.+64     	; 0x33d4 <free+0xaa>
    3394:	12 96       	adiw	r26, 0x02	; 2
    3396:	8d 91       	ld	r24, X+
    3398:	9c 91       	ld	r25, X
    339a:	13 97       	sbiw	r26, 0x03	; 3
    339c:	ad 01       	movw	r20, r26
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <free+0x7c>
    33a2:	dc 01       	movw	r26, r24
    33a4:	d3 cf       	rjmp	.-90     	; 0x334c <free+0x22>
    33a6:	fa 01       	movw	r30, r20
    33a8:	d3 83       	std	Z+3, r29	; 0x03
    33aa:	c2 83       	std	Z+2, r28	; 0x02
    33ac:	21 91       	ld	r18, Z+
    33ae:	31 91       	ld	r19, Z+
    33b0:	e2 0f       	add	r30, r18
    33b2:	f3 1f       	adc	r31, r19
    33b4:	ce 17       	cp	r28, r30
    33b6:	df 07       	cpc	r29, r31
    33b8:	69 f4       	brne	.+26     	; 0x33d4 <free+0xaa>
    33ba:	88 81       	ld	r24, Y
    33bc:	99 81       	ldd	r25, Y+1	; 0x01
    33be:	28 0f       	add	r18, r24
    33c0:	39 1f       	adc	r19, r25
    33c2:	2e 5f       	subi	r18, 0xFE	; 254
    33c4:	3f 4f       	sbci	r19, 0xFF	; 255
    33c6:	fa 01       	movw	r30, r20
    33c8:	31 83       	std	Z+1, r19	; 0x01
    33ca:	20 83       	st	Z, r18
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	93 83       	std	Z+3, r25	; 0x03
    33d2:	82 83       	std	Z+2, r24	; 0x02
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

000033da <memset>:
    33da:	dc 01       	movw	r26, r24
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <memset+0x6>
    33de:	6d 93       	st	X+, r22
    33e0:	41 50       	subi	r20, 0x01	; 1
    33e2:	50 40       	sbci	r21, 0x00	; 0
    33e4:	e0 f7       	brcc	.-8      	; 0x33de <memset+0x4>
    33e6:	08 95       	ret

000033e8 <_exit>:
    33e8:	f8 94       	cli

000033ea <__stop_program>:
    33ea:	ff cf       	rjmp	.-2      	; 0x33ea <__stop_program>
