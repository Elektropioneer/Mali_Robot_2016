
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000035e6  0000367a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000151  00800154  00800154  000036ce  2**0
                  ALLOC
  3 .debug_aranges 000002e8  00000000  00000000  000036ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000706  00000000  00000000  000039b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f68  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a11  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022c9  00000000  00000000  00006a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  00008d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000977  00000000  00000000  000091b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  00009b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	if(sys_time >= 80000)
		actuators_umbrella();
	sys_time++;
}
uint8_t system_jumper_check(void)
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c5       	rjmp	.+2960   	; 0xbda <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 ee       	ldi	r30, 0xE6	; 230
      a8:	f5 e3       	ldi	r31, 0x35	; 53
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 35       	cpi	r26, 0x54	; 84
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a4 e5       	ldi	r26, 0x54	; 84
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 3a       	cpi	r26, 0xA5	; 165
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	32 d1       	rcall	.+612    	; 0x330 <main>
      cc:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <beginning_move>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

void beginning_move(int side)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	64 97       	sbiw	r28, 0x14	; 20
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	9a 8b       	std	Y+18, r25	; 0x12
      e8:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	
	odometry_move_straight(160,LOW_SPEED,NULL);
      ea:	80 ea       	ldi	r24, 0xA0	; 160
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	6e e1       	ldi	r22, 0x1E	; 30
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <odometry_move_straight>
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	a8 ec       	ldi	r26, 0xC8	; 200
      fe:	b2 e4       	ldi	r27, 0x42	; 66
     100:	8b 87       	std	Y+11, r24	; 0x0b
     102:	9c 87       	std	Y+12, r25	; 0x0c
     104:	ad 87       	std	Y+13, r26	; 0x0d
     106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     108:	6b 85       	ldd	r22, Y+11	; 0x0b
     10a:	7c 85       	ldd	r23, Y+12	; 0x0c
     10c:	8d 85       	ldd	r24, Y+13	; 0x0d
     10e:	9e 85       	ldd	r25, Y+14	; 0x0e
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e4       	ldi	r19, 0x40	; 64
     114:	4c e1       	ldi	r20, 0x1C	; 28
     116:	55 e4       	ldi	r21, 0x45	; 69
     118:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	8f 83       	std	Y+7, r24	; 0x07
     122:	98 87       	std	Y+8, r25	; 0x08
     124:	a9 87       	std	Y+9, r26	; 0x09
     126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     128:	6f 81       	ldd	r22, Y+7	; 0x07
     12a:	78 85       	ldd	r23, Y+8	; 0x08
     12c:	89 85       	ldd	r24, Y+9	; 0x09
     12e:	9a 85       	ldd	r25, Y+10	; 0x0a
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	40 e8       	ldi	r20, 0x80	; 128
     136:	5f e3       	ldi	r21, 0x3F	; 63
     138:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     13c:	88 23       	and	r24, r24
     13e:	2c f4       	brge	.+10     	; 0x14a <beginning_move+0x78>
		__ticks = 1;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9e 83       	std	Y+6, r25	; 0x06
     146:	8d 83       	std	Y+5, r24	; 0x05
     148:	3f c0       	rjmp	.+126    	; 0x1c8 <beginning_move+0xf6>
	else if (__tmp > 65535)
     14a:	6f 81       	ldd	r22, Y+7	; 0x07
     14c:	78 85       	ldd	r23, Y+8	; 0x08
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	9a 85       	ldd	r25, Y+10	; 0x0a
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	3f ef       	ldi	r19, 0xFF	; 255
     156:	4f e7       	ldi	r20, 0x7F	; 127
     158:	57 e4       	ldi	r21, 0x47	; 71
     15a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     15e:	18 16       	cp	r1, r24
     160:	4c f5       	brge	.+82     	; 0x1b4 <beginning_move+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     162:	6b 85       	ldd	r22, Y+11	; 0x0b
     164:	7c 85       	ldd	r23, Y+12	; 0x0c
     166:	8d 85       	ldd	r24, Y+13	; 0x0d
     168:	9e 85       	ldd	r25, Y+14	; 0x0e
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e2       	ldi	r20, 0x20	; 32
     170:	51 e4       	ldi	r21, 0x41	; 65
     172:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	bc 01       	movw	r22, r24
     17c:	cd 01       	movw	r24, r26
     17e:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	9e 83       	std	Y+6, r25	; 0x06
     188:	8d 83       	std	Y+5, r24	; 0x05
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <beginning_move+0xd8>
     18c:	8a ef       	ldi	r24, 0xFA	; 250
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9c 83       	std	Y+4, r25	; 0x04
     192:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     194:	8b 81       	ldd	r24, Y+3	; 0x03
     196:	9c 81       	ldd	r25, Y+4	; 0x04
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <beginning_move+0xc6>
     19c:	9c 83       	std	Y+4, r25	; 0x04
     19e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	9e 83       	std	Y+6, r25	; 0x06
     1a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1aa:	8d 81       	ldd	r24, Y+5	; 0x05
     1ac:	9e 81       	ldd	r25, Y+6	; 0x06
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	69 f7       	brne	.-38     	; 0x18c <beginning_move+0xba>
     1b2:	14 c0       	rjmp	.+40     	; 0x1dc <beginning_move+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b4:	6f 81       	ldd	r22, Y+7	; 0x07
     1b6:	78 85       	ldd	r23, Y+8	; 0x08
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	9e 83       	std	Y+6, r25	; 0x06
     1c6:	8d 83       	std	Y+5, r24	; 0x05
     1c8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ca:	9e 81       	ldd	r25, Y+6	; 0x06
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <beginning_move+0x102>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	odometry_move_straight(-300,LOW_SPEED,NULL);
     1dc:	84 ed       	ldi	r24, 0xD4	; 212
     1de:	9e ef       	ldi	r25, 0xFE	; 254
     1e0:	6e e1       	ldi	r22, 0x1E	; 30
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <odometry_move_straight>
	if(side == PURPLE_SIDE)
     1ea:	89 89       	ldd	r24, Y+17	; 0x11
     1ec:	9a 89       	ldd	r25, Y+18	; 0x12
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	41 f4       	brne	.+16     	; 0x202 <beginning_move+0x130>
		odometry_rotate_for(-90,LOW_SPEED,NULL);
     1f2:	86 ea       	ldi	r24, 0xA6	; 166
     1f4:	9f ef       	ldi	r25, 0xFF	; 255
     1f6:	6e e1       	ldi	r22, 0x1E	; 30
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <odometry_rotate_for>
     200:	07 c0       	rjmp	.+14     	; 0x210 <beginning_move+0x13e>
	else
		odometry_rotate_for(90,LOW_SPEED,NULL);
     202:	8a e5       	ldi	r24, 0x5A	; 90
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	6e e1       	ldi	r22, 0x1E	; 30
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <odometry_rotate_for>
	//actuators set the left and right one
	servo_set_grabbers(down);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	69 d2       	rcall	.+1234   	; 0x6e8 <servo_set_grabbers>
	odometry_move_straight(1015,NORMAL_SPEED,NULL);
     216:	87 ef       	ldi	r24, 0xF7	; 247
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	61 e4       	ldi	r22, 0x41	; 65
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <odometry_move_straight>
	odometry_move_straight(-100,NORMAL_SPEED,NULL);
     224:	8c e9       	ldi	r24, 0x9C	; 156
     226:	9f ef       	ldi	r25, 0xFF	; 255
     228:	61 e4       	ldi	r22, 0x41	; 65
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <odometry_move_straight>
	odometry_rotate_for(55,NORMAL_SPEED,NULL);
     232:	87 e3       	ldi	r24, 0x37	; 55
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	61 e4       	ldi	r22, 0x41	; 65
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <odometry_rotate_for>
	i = camera();
     240:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <camera>
     244:	98 8b       	std	Y+16, r25	; 0x10
     246:	8f 87       	std	Y+15, r24	; 0x0f
	
	switch(i)
     248:	8f 85       	ldd	r24, Y+15	; 0x0f
     24a:	98 89       	ldd	r25, Y+16	; 0x10
     24c:	9c 8b       	std	Y+20, r25	; 0x14
     24e:	8b 8b       	std	Y+19, r24	; 0x13
     250:	8b 89       	ldd	r24, Y+19	; 0x13
     252:	9c 89       	ldd	r25, Y+20	; 0x14
     254:	82 30       	cpi	r24, 0x02	; 2
     256:	91 05       	cpc	r25, r1
     258:	99 f1       	breq	.+102    	; 0x2c0 <beginning_move+0x1ee>
     25a:	8b 89       	ldd	r24, Y+19	; 0x13
     25c:	9c 89       	ldd	r25, Y+20	; 0x14
     25e:	83 30       	cpi	r24, 0x03	; 3
     260:	91 05       	cpc	r25, r1
     262:	54 f4       	brge	.+20     	; 0x278 <beginning_move+0x1a6>
     264:	8b 89       	ldd	r24, Y+19	; 0x13
     266:	9c 89       	ldd	r25, Y+20	; 0x14
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	b1 f0       	breq	.+44     	; 0x298 <beginning_move+0x1c6>
     26c:	8b 89       	ldd	r24, Y+19	; 0x13
     26e:	9c 89       	ldd	r25, Y+20	; 0x14
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	91 05       	cpc	r25, r1
     274:	d1 f0       	breq	.+52     	; 0x2aa <beginning_move+0x1d8>
     276:	53 c0       	rjmp	.+166    	; 0x31e <beginning_move+0x24c>
     278:	8b 89       	ldd	r24, Y+19	; 0x13
     27a:	9c 89       	ldd	r25, Y+20	; 0x14
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	91 05       	cpc	r25, r1
     280:	a9 f1       	breq	.+106    	; 0x2ec <beginning_move+0x21a>
     282:	8b 89       	ldd	r24, Y+19	; 0x13
     284:	9c 89       	ldd	r25, Y+20	; 0x14
     286:	84 30       	cpi	r24, 0x04	; 4
     288:	91 05       	cpc	r25, r1
     28a:	2c f1       	brlt	.+74     	; 0x2d6 <beginning_move+0x204>
     28c:	8b 89       	ldd	r24, Y+19	; 0x13
     28e:	9c 89       	ldd	r25, Y+20	; 0x14
     290:	85 30       	cpi	r24, 0x05	; 5
     292:	91 05       	cpc	r25, r1
     294:	b1 f1       	breq	.+108    	; 0x302 <beginning_move+0x230>
     296:	43 c0       	rjmp	.+134    	; 0x31e <beginning_move+0x24c>
	{
		case 0:
			active_state = 0;
     298:	10 92 9f 02 	sts	0x029F, r1
     29c:	10 92 9e 02 	sts	0x029E, r1
			gpio_write_pin(0,1);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
     2a8:	3a c0       	rjmp	.+116    	; 0x31e <beginning_move+0x24c>
			break;	
		case 1:
			active_state = 1;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 9f 02 	sts	0x029F, r25
     2b2:	80 93 9e 02 	sts	0x029E, r24
			gpio_write_pin(1,1);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
     2be:	2f c0       	rjmp	.+94     	; 0x31e <beginning_move+0x24c>
			break;
		case 2:
			active_state = 2;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 9f 02 	sts	0x029F, r25
     2c8:	80 93 9e 02 	sts	0x029E, r24
			gpio_write_pin(2,1);
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
     2d4:	24 c0       	rjmp	.+72     	; 0x31e <beginning_move+0x24c>
			break;
		case 3:
			active_state = 3;
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 9f 02 	sts	0x029F, r25
     2de:	80 93 9e 02 	sts	0x029E, r24
			gpio_write_pin(3,1);
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
     2ea:	19 c0       	rjmp	.+50     	; 0x31e <beginning_move+0x24c>
			break;		
		case 4:
			active_state = 4;
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 9f 02 	sts	0x029F, r25
     2f4:	80 93 9e 02 	sts	0x029E, r24
			gpio_write_pin(4,1);
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
     300:	0e c0       	rjmp	.+28     	; 0x31e <beginning_move+0x24c>
			break;
		case 5:	
			active_state = 5;
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 9f 02 	sts	0x029F, r25
     30a:	80 93 9e 02 	sts	0x029E, r24
			gpio_write_pin(0,1);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	61 e0       	ldi	r22, 0x01	; 1
     312:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
			gpio_write_pin(4,1);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	0e 94 28 0a 	call	0x1450	; 0x1450 <gpio_write_pin>
			break;
	}
}
     31e:	64 96       	adiw	r28, 0x14	; 20
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <main>:

int main()
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
	static bool done_camera = false;

	system_init();
     338:	0e 94 5e 15 	call	0x2abc	; 0x2abc <system_init>

	while(1)
	{
		if(gpio_read_pin(9) == 1)
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <gpio_read_pin>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	99 f4       	brne	.+38     	; 0x36c <main+0x3c>
		{
			if(!done_camera)
     346:	80 91 54 01 	lds	r24, 0x0154
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	89 27       	eor	r24, r25
     34e:	88 23       	and	r24, r24
     350:	31 f0       	breq	.+12     	; 0x35e <main+0x2e>
			{
				beginning_move(GREEN_SIDE);
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	bd de       	rcall	.-646    	; 0xd2 <beginning_move>
				done_camera = true;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 54 01 	sts	0x0154, r24
			}	
			PORTG = 0xff;
     35e:	e4 e3       	ldi	r30, 0x34	; 52
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	80 83       	st	Z, r24
			greenside();	
     366:	0e 94 a0 0b 	call	0x1740	; 0x1740 <greenside>
     36a:	e8 cf       	rjmp	.-48     	; 0x33c <main+0xc>
		}
		else
		{	
			if(!done_camera)
     36c:	80 91 54 01 	lds	r24, 0x0154
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	89 27       	eor	r24, r25
     374:	88 23       	and	r24, r24
     376:	31 f0       	breq	.+12     	; 0x384 <main+0x54>
			{
				beginning_move(PURPLE_SIDE);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	aa de       	rcall	.-684    	; 0xd2 <beginning_move>
				done_camera = true;	
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 54 01 	sts	0x0154, r24
			}
			PORTG = 0xff;
     384:	e4 e3       	ldi	r30, 0x34	; 52
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	80 83       	st	Z, r24
			purpleside();
     38c:	0e 94 85 10 	call	0x210a	; 0x210a <purpleside>
     390:	d5 cf       	rjmp	.-86     	; 0x33c <main+0xc>

00000392 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	00 d0       	rcall	.+0      	; 0x39c <servo_init+0xa>
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	9a 83       	std	Y+2, r25	; 0x02
     3a2:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     3a4:	ad e2       	ldi	r26, 0x2D	; 45
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	ed e2       	ldi	r30, 0x2D	; 45
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 63       	ori	r24, 0x38	; 56
     3b0:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     3b2:	e4 e9       	ldi	r30, 0x94	; 148
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	11 82       	std	Z+1, r1	; 0x01
     3b8:	10 82       	st	Z, r1
	
	OCR3A = 0;
     3ba:	e8 e9       	ldi	r30, 0x98	; 152
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	11 82       	std	Z+1, r1	; 0x01
     3c0:	10 82       	st	Z, r1
	OCR3B = 0;
     3c2:	ea e9       	ldi	r30, 0x9A	; 154
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	11 82       	std	Z+1, r1	; 0x01
     3c8:	10 82       	st	Z, r1
	OCR3C = 0;
     3ca:	ec e9       	ldi	r30, 0x9C	; 156
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	11 82       	std	Z+1, r1	; 0x01
     3d0:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     3d2:	e0 e9       	ldi	r30, 0x90	; 144
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	8e eb       	ldi	r24, 0xBE	; 190
     3d8:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     3da:	e1 e9       	ldi	r30, 0x91	; 145
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	8a e1       	ldi	r24, 0x1A	; 26
     3e0:	80 83       	st	Z, r24
	
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     3e2:	06 e9       	ldi	r16, 0x96	; 150
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ea:	cc 01       	movw	r24, r24
     3ec:	a0 e0       	ldi	r26, 0x00	; 0
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	bc 01       	movw	r22, r24
     3f2:	cd 01       	movw	r24, r26
     3f4:	0e 94 b2 18 	call	0x3164	; 0x3164 <__floatunsisf>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	51 e4       	ldi	r21, 0x41	; 65
     408:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9c 01       	movw	r18, r24
     412:	ad 01       	movw	r20, r26
     414:	60 e8       	ldi	r22, 0x80	; 128
     416:	76 e9       	ldi	r23, 0x96	; 150
     418:	88 e1       	ldi	r24, 0x18	; 24
     41a:	9b e4       	ldi	r25, 0x4B	; 75
     41c:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	5f e3       	ldi	r21, 0x3F	; 63
     430:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__addsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	bc 01       	movw	r22, r24
     43a:	cd 01       	movw	r24, r26
     43c:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	f8 01       	movw	r30, r16
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	80 83       	st	Z, r24
}//END OF servo_init
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <servo_set_duty_cycle_umbrella>:


static void servo_set_duty_cycle_umbrella(int16_t value)
{
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	00 d0       	rcall	.+0      	; 0x466 <servo_set_duty_cycle_umbrella+0xe>
     466:	00 d0       	rcall	.+0      	; 0x468 <servo_set_duty_cycle_umbrella+0x10>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     470:	e6 e9       	ldi	r30, 0x96	; 150
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	cc 01       	movw	r24, r24
     47a:	a0 e0       	ldi	r26, 0x00	; 0
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	0e 94 b2 18 	call	0x3164	; 0x3164 <__floatunsisf>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	53 e4       	ldi	r21, 0x43	; 67
     496:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	7c 01       	movw	r14, r24
     4a0:	8d 01       	movw	r16, r26
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	9c 81       	ldd	r25, Y+4	; 0x04
     4a6:	aa 27       	eor	r26, r26
     4a8:	97 fd       	sbrc	r25, 7
     4aa:	a0 95       	com	r26
     4ac:	ba 2f       	mov	r27, r26
     4ae:	bc 01       	movw	r22, r24
     4b0:	cd 01       	movw	r24, r26
     4b2:	0e 94 b4 18 	call	0x3168	; 0x3168 <__floatsisf>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	c8 01       	movw	r24, r16
     4bc:	b7 01       	movw	r22, r14
     4be:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__addsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	bc 01       	movw	r22, r24
     4dc:	cd 01       	movw	r24, r26
     4de:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	9a 83       	std	Y+2, r25	; 0x02
     4e8:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     4ea:	e9 e9       	ldi	r30, 0x99	; 153
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	89 2f       	mov	r24, r25
     4f4:	99 27       	eor	r25, r25
     4f6:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     4f8:	e8 e9       	ldi	r30, 0x98	; 152
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	80 83       	st	Z, r24
}
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	df 93       	push	r29
     520:	cf 93       	push	r28
     522:	00 d0       	rcall	.+0      	; 0x524 <servo_set_duty_cycle_door+0xe>
     524:	00 d0       	rcall	.+0      	; 0x526 <servo_set_duty_cycle_door+0x10>
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	9c 83       	std	Y+4, r25	; 0x04
     52c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     52e:	e6 e9       	ldi	r30, 0x96	; 150
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	cc 01       	movw	r24, r24
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	0e 94 b2 18 	call	0x3164	; 0x3164 <__floatunsisf>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	bc 01       	movw	r22, r24
     54a:	cd 01       	movw	r24, r26
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	53 e4       	ldi	r21, 0x43	; 67
     554:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	7c 01       	movw	r14, r24
     55e:	8d 01       	movw	r16, r26
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	aa 27       	eor	r26, r26
     566:	97 fd       	sbrc	r25, 7
     568:	a0 95       	com	r26
     56a:	ba 2f       	mov	r27, r26
     56c:	bc 01       	movw	r22, r24
     56e:	cd 01       	movw	r24, r26
     570:	0e 94 b4 18 	call	0x3168	; 0x3168 <__floatsisf>
     574:	9b 01       	movw	r18, r22
     576:	ac 01       	movw	r20, r24
     578:	c8 01       	movw	r24, r16
     57a:	b7 01       	movw	r22, r14
     57c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__addsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	9a 83       	std	Y+2, r25	; 0x02
     5a6:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     5a8:	eb e9       	ldi	r30, 0x9B	; 155
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	89 2f       	mov	r24, r25
     5b2:	99 27       	eor	r25, r25
     5b4:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     5b6:	ea e9       	ldi	r30, 0x9A	; 154
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	80 83       	st	Z, r24
}
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	cf 91       	pop	r28
     5c8:	df 91       	pop	r29
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	08 95       	ret

000005d4 <servo_set_umbrella_position>:

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     5d4:	df 93       	push	r29
     5d6:	cf 93       	push	r28
     5d8:	0f 92       	push	r0
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	99 27       	eor	r25, r25
     5e4:	87 fd       	sbrc	r24, 7
     5e6:	90 95       	com	r25
     5e8:	a9 2f       	mov	r26, r25
     5ea:	b9 2f       	mov	r27, r25
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	0e 94 b4 18 	call	0x3168	; 0x3168 <__floatsisf>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	44 eb       	ldi	r20, 0xB4	; 180
     602:	52 e4       	ldi	r21, 0x42	; 66
     604:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	26 e6       	ldi	r18, 0x66	; 102
     612:	36 e6       	ldi	r19, 0x66	; 102
     614:	46 e3       	ldi	r20, 0x36	; 54
     616:	51 ec       	ldi	r21, 0xC1	; 193
     618:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	4c e6       	ldi	r20, 0x6C	; 108
     62a:	53 e4       	ldi	r21, 0x43	; 67
     62c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__addsf3>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	9c 01       	movw	r18, r24
     636:	ad 01       	movw	r20, r26
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8f e7       	ldi	r24, 0x7F	; 127
     63e:	93 e4       	ldi	r25, 0x43	; 67
     640:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__subsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 81 18 	call	0x3102	; 0x3102 <__fixsfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	01 df       	rcall	.-510    	; 0x458 <servo_set_duty_cycle_umbrella>
}
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	99 27       	eor	r25, r25
     66e:	87 fd       	sbrc	r24, 7
     670:	90 95       	com	r25
     672:	a9 2f       	mov	r26, r25
     674:	b9 2f       	mov	r27, r25
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 b4 18 	call	0x3168	; 0x3168 <__floatsisf>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	44 eb       	ldi	r20, 0xB4	; 180
     68c:	52 e4       	ldi	r21, 0x42	; 66
     68e:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	26 e6       	ldi	r18, 0x66	; 102
     69c:	36 e6       	ldi	r19, 0x66	; 102
     69e:	46 e3       	ldi	r20, 0x36	; 54
     6a0:	51 ec       	ldi	r21, 0xC1	; 193
     6a2:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	4c e6       	ldi	r20, 0x6C	; 108
     6b4:	53 e4       	ldi	r21, 0x43	; 67
     6b6:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <__addsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	9c 01       	movw	r18, r24
     6c0:	ad 01       	movw	r20, r26
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8f e7       	ldi	r24, 0x7F	; 127
     6c8:	93 e4       	ldi	r25, 0x43	; 67
     6ca:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__subsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	cd 01       	movw	r24, r26
     6d6:	0e 94 81 18 	call	0x3102	; 0x3102 <__fixsfsi>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	1b df       	rcall	.-458    	; 0x516 <servo_set_duty_cycle_door>
}
     6e0:	0f 90       	pop	r0
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <servo_set_grabbers>:
void servo_set_right_grabber_position(int8_t angle)
{
	
}
void servo_set_grabbers(int state)
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <servo_set_grabbers+0x6>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	9a 83       	std	Y+2, r25	; 0x02
     6f4:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//set the grabbers to down
	}
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <actuators_umbrella>:
void actuators_umbrella(void)
{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	6c 97       	sbiw	r28, 0x1c	; 28
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     714:	8a ea       	ldi	r24, 0xAA	; 170
     716:	5e df       	rcall	.-324    	; 0x5d4 <servo_set_umbrella_position>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	aa e7       	ldi	r26, 0x7A	; 122
     71e:	b4 e4       	ldi	r27, 0x44	; 68
     720:	89 8f       	std	Y+25, r24	; 0x19
     722:	9a 8f       	std	Y+26, r25	; 0x1a
     724:	ab 8f       	std	Y+27, r26	; 0x1b
     726:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     728:	69 8d       	ldd	r22, Y+25	; 0x19
     72a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     72c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     72e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e4       	ldi	r19, 0x40	; 64
     734:	4c e1       	ldi	r20, 0x1C	; 28
     736:	55 e4       	ldi	r21, 0x45	; 69
     738:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	8d 8b       	std	Y+21, r24	; 0x15
     742:	9e 8b       	std	Y+22, r25	; 0x16
     744:	af 8b       	std	Y+23, r26	; 0x17
     746:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     748:	6d 89       	ldd	r22, Y+21	; 0x15
     74a:	7e 89       	ldd	r23, Y+22	; 0x16
     74c:	8f 89       	ldd	r24, Y+23	; 0x17
     74e:	98 8d       	ldd	r25, Y+24	; 0x18
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     75c:	88 23       	and	r24, r24
     75e:	2c f4       	brge	.+10     	; 0x76a <actuators_umbrella+0x6a>
		__ticks = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9c 8b       	std	Y+20, r25	; 0x14
     766:	8b 8b       	std	Y+19, r24	; 0x13
     768:	3f c0       	rjmp	.+126    	; 0x7e8 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     76a:	6d 89       	ldd	r22, Y+21	; 0x15
     76c:	7e 89       	ldd	r23, Y+22	; 0x16
     76e:	8f 89       	ldd	r24, Y+23	; 0x17
     770:	98 8d       	ldd	r25, Y+24	; 0x18
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	3f ef       	ldi	r19, 0xFF	; 255
     776:	4f e7       	ldi	r20, 0x7F	; 127
     778:	57 e4       	ldi	r21, 0x47	; 71
     77a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	4c f5       	brge	.+82     	; 0x7d4 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     782:	69 8d       	ldd	r22, Y+25	; 0x19
     784:	7a 8d       	ldd	r23, Y+26	; 0x1a
     786:	8b 8d       	ldd	r24, Y+27	; 0x1b
     788:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	9c 8b       	std	Y+20, r25	; 0x14
     7a8:	8b 8b       	std	Y+19, r24	; 0x13
     7aa:	0f c0       	rjmp	.+30     	; 0x7ca <actuators_umbrella+0xca>
     7ac:	8a ef       	ldi	r24, 0xFA	; 250
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9a 8b       	std	Y+18, r25	; 0x12
     7b2:	89 8b       	std	Y+17, r24	; 0x11
     7b4:	89 89       	ldd	r24, Y+17	; 0x11
     7b6:	9a 89       	ldd	r25, Y+18	; 0x12
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <actuators_umbrella+0xb8>
     7bc:	9a 8b       	std	Y+18, r25	; 0x12
     7be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	9c 8b       	std	Y+20, r25	; 0x14
     7c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ca:	8b 89       	ldd	r24, Y+19	; 0x13
     7cc:	9c 89       	ldd	r25, Y+20	; 0x14
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	69 f7       	brne	.-38     	; 0x7ac <actuators_umbrella+0xac>
     7d2:	14 c0       	rjmp	.+40     	; 0x7fc <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d4:	6d 89       	ldd	r22, Y+21	; 0x15
     7d6:	7e 89       	ldd	r23, Y+22	; 0x16
     7d8:	8f 89       	ldd	r24, Y+23	; 0x17
     7da:	98 8d       	ldd	r25, Y+24	; 0x18
     7dc:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	9c 8b       	std	Y+20, r25	; 0x14
     7e6:	8b 8b       	std	Y+19, r24	; 0x13
     7e8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ea:	9c 89       	ldd	r25, Y+20	; 0x14
     7ec:	98 8b       	std	Y+16, r25	; 0x10
     7ee:	8f 87       	std	Y+15, r24	; 0x0f
     7f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f2:	98 89       	ldd	r25, Y+16	; 0x10
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <actuators_umbrella+0xf4>
     7f8:	98 8b       	std	Y+16, r25	; 0x10
     7fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	2f df       	rcall	.-418    	; 0x65e <servo_set_door_position>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	aa e7       	ldi	r26, 0x7A	; 122
     806:	b4 e4       	ldi	r27, 0x44	; 68
     808:	8b 87       	std	Y+11, r24	; 0x0b
     80a:	9c 87       	std	Y+12, r25	; 0x0c
     80c:	ad 87       	std	Y+13, r26	; 0x0d
     80e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     810:	6b 85       	ldd	r22, Y+11	; 0x0b
     812:	7c 85       	ldd	r23, Y+12	; 0x0c
     814:	8d 85       	ldd	r24, Y+13	; 0x0d
     816:	9e 85       	ldd	r25, Y+14	; 0x0e
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e4       	ldi	r19, 0x40	; 64
     81c:	4c e1       	ldi	r20, 0x1C	; 28
     81e:	55 e4       	ldi	r21, 0x45	; 69
     820:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	8f 83       	std	Y+7, r24	; 0x07
     82a:	98 87       	std	Y+8, r25	; 0x08
     82c:	a9 87       	std	Y+9, r26	; 0x09
     82e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     830:	6f 81       	ldd	r22, Y+7	; 0x07
     832:	78 85       	ldd	r23, Y+8	; 0x08
     834:	89 85       	ldd	r24, Y+9	; 0x09
     836:	9a 85       	ldd	r25, Y+10	; 0x0a
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	2c f4       	brge	.+10     	; 0x852 <actuators_umbrella+0x152>
		__ticks = 1;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9e 83       	std	Y+6, r25	; 0x06
     84e:	8d 83       	std	Y+5, r24	; 0x05
     850:	3f c0       	rjmp	.+126    	; 0x8d0 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     852:	6f 81       	ldd	r22, Y+7	; 0x07
     854:	78 85       	ldd	r23, Y+8	; 0x08
     856:	89 85       	ldd	r24, Y+9	; 0x09
     858:	9a 85       	ldd	r25, Y+10	; 0x0a
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	3f ef       	ldi	r19, 0xFF	; 255
     85e:	4f e7       	ldi	r20, 0x7F	; 127
     860:	57 e4       	ldi	r21, 0x47	; 71
     862:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	4c f5       	brge	.+82     	; 0x8bc <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86a:	6b 85       	ldd	r22, Y+11	; 0x0b
     86c:	7c 85       	ldd	r23, Y+12	; 0x0c
     86e:	8d 85       	ldd	r24, Y+13	; 0x0d
     870:	9e 85       	ldd	r25, Y+14	; 0x0e
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e2       	ldi	r20, 0x20	; 32
     878:	51 e4       	ldi	r21, 0x41	; 65
     87a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	9e 83       	std	Y+6, r25	; 0x06
     890:	8d 83       	std	Y+5, r24	; 0x05
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <actuators_umbrella+0x1b2>
     894:	8a ef       	ldi	r24, 0xFA	; 250
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	8b 83       	std	Y+3, r24	; 0x03
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	9c 81       	ldd	r25, Y+4	; 0x04
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <actuators_umbrella+0x1a0>
     8a4:	9c 83       	std	Y+4, r25	; 0x04
     8a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	9e 83       	std	Y+6, r25	; 0x06
     8b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b2:	8d 81       	ldd	r24, Y+5	; 0x05
     8b4:	9e 81       	ldd	r25, Y+6	; 0x06
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	69 f7       	brne	.-38     	; 0x894 <actuators_umbrella+0x194>
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8bc:	6f 81       	ldd	r22, Y+7	; 0x07
     8be:	78 85       	ldd	r23, Y+8	; 0x08
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c4:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9e 83       	std	Y+6, r25	; 0x06
     8ce:	8d 83       	std	Y+5, r24	; 0x05
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	9e 81       	ldd	r25, Y+6	; 0x06
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <actuators_umbrella+0x1dc>
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8e4:	6c 96       	adiw	r28, 0x1c	; 28
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <actuators_setup>:
void actuators_setup(void)
{
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	aa 97       	sbiw	r28, 0x2a	; 42
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     90a:	8a e5       	ldi	r24, 0x5A	; 90
     90c:	a8 de       	rcall	.-688    	; 0x65e <servo_set_door_position>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	aa e7       	ldi	r26, 0x7A	; 122
     914:	b4 e4       	ldi	r27, 0x44	; 68
     916:	8f a3       	std	Y+39, r24	; 0x27
     918:	98 a7       	std	Y+40, r25	; 0x28
     91a:	a9 a7       	std	Y+41, r26	; 0x29
     91c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     91e:	6f a1       	ldd	r22, Y+39	; 0x27
     920:	78 a5       	ldd	r23, Y+40	; 0x28
     922:	89 a5       	ldd	r24, Y+41	; 0x29
     924:	9a a5       	ldd	r25, Y+42	; 0x2a
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e4       	ldi	r19, 0x40	; 64
     92a:	4c e1       	ldi	r20, 0x1C	; 28
     92c:	55 e4       	ldi	r21, 0x45	; 69
     92e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	8b a3       	std	Y+35, r24	; 0x23
     938:	9c a3       	std	Y+36, r25	; 0x24
     93a:	ad a3       	std	Y+37, r26	; 0x25
     93c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     93e:	6b a1       	ldd	r22, Y+35	; 0x23
     940:	7c a1       	ldd	r23, Y+36	; 0x24
     942:	8d a1       	ldd	r24, Y+37	; 0x25
     944:	9e a1       	ldd	r25, Y+38	; 0x26
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e8       	ldi	r20, 0x80	; 128
     94c:	5f e3       	ldi	r21, 0x3F	; 63
     94e:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	2c f4       	brge	.+10     	; 0x960 <actuators_setup+0x6a>
		__ticks = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9a a3       	std	Y+34, r25	; 0x22
     95c:	89 a3       	std	Y+33, r24	; 0x21
     95e:	3f c0       	rjmp	.+126    	; 0x9de <actuators_setup+0xe8>
	else if (__tmp > 65535)
     960:	6b a1       	ldd	r22, Y+35	; 0x23
     962:	7c a1       	ldd	r23, Y+36	; 0x24
     964:	8d a1       	ldd	r24, Y+37	; 0x25
     966:	9e a1       	ldd	r25, Y+38	; 0x26
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	3f ef       	ldi	r19, 0xFF	; 255
     96c:	4f e7       	ldi	r20, 0x7F	; 127
     96e:	57 e4       	ldi	r21, 0x47	; 71
     970:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     974:	18 16       	cp	r1, r24
     976:	4c f5       	brge	.+82     	; 0x9ca <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     978:	6f a1       	ldd	r22, Y+39	; 0x27
     97a:	78 a5       	ldd	r23, Y+40	; 0x28
     97c:	89 a5       	ldd	r24, Y+41	; 0x29
     97e:	9a a5       	ldd	r25, Y+42	; 0x2a
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 e4       	ldi	r21, 0x41	; 65
     988:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	bc 01       	movw	r22, r24
     992:	cd 01       	movw	r24, r26
     994:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	9a a3       	std	Y+34, r25	; 0x22
     99e:	89 a3       	std	Y+33, r24	; 0x21
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <actuators_setup+0xca>
     9a2:	8a ef       	ldi	r24, 0xFA	; 250
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	98 a3       	std	Y+32, r25	; 0x20
     9a8:	8f 8f       	std	Y+31, r24	; 0x1f
     9aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9ac:	98 a1       	ldd	r25, Y+32	; 0x20
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <actuators_setup+0xb8>
     9b2:	98 a3       	std	Y+32, r25	; 0x20
     9b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b6:	89 a1       	ldd	r24, Y+33	; 0x21
     9b8:	9a a1       	ldd	r25, Y+34	; 0x22
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	9a a3       	std	Y+34, r25	; 0x22
     9be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c0:	89 a1       	ldd	r24, Y+33	; 0x21
     9c2:	9a a1       	ldd	r25, Y+34	; 0x22
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	69 f7       	brne	.-38     	; 0x9a2 <actuators_setup+0xac>
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ca:	6b a1       	ldd	r22, Y+35	; 0x23
     9cc:	7c a1       	ldd	r23, Y+36	; 0x24
     9ce:	8d a1       	ldd	r24, Y+37	; 0x25
     9d0:	9e a1       	ldd	r25, Y+38	; 0x26
     9d2:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	9a a3       	std	Y+34, r25	; 0x22
     9dc:	89 a3       	std	Y+33, r24	; 0x21
     9de:	89 a1       	ldd	r24, Y+33	; 0x21
     9e0:	9a a1       	ldd	r25, Y+34	; 0x22
     9e2:	9e 8f       	std	Y+30, r25	; 0x1e
     9e4:	8d 8f       	std	Y+29, r24	; 0x1d
     9e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <actuators_setup+0xf4>
     9ee:	9e 8f       	std	Y+30, r25	; 0x1e
     9f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     9f2:	85 e5       	ldi	r24, 0x55	; 85
     9f4:	ef dd       	rcall	.-1058   	; 0x5d4 <servo_set_umbrella_position>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	aa e7       	ldi	r26, 0x7A	; 122
     9fc:	b4 e4       	ldi	r27, 0x44	; 68
     9fe:	89 8f       	std	Y+25, r24	; 0x19
     a00:	9a 8f       	std	Y+26, r25	; 0x1a
     a02:	ab 8f       	std	Y+27, r26	; 0x1b
     a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a06:	69 8d       	ldd	r22, Y+25	; 0x19
     a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e4       	ldi	r19, 0x40	; 64
     a12:	4c e1       	ldi	r20, 0x1C	; 28
     a14:	55 e4       	ldi	r21, 0x45	; 69
     a16:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	8d 8b       	std	Y+21, r24	; 0x15
     a20:	9e 8b       	std	Y+22, r25	; 0x16
     a22:	af 8b       	std	Y+23, r26	; 0x17
     a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a26:	6d 89       	ldd	r22, Y+21	; 0x15
     a28:	7e 89       	ldd	r23, Y+22	; 0x16
     a2a:	8f 89       	ldd	r24, Y+23	; 0x17
     a2c:	98 8d       	ldd	r25, Y+24	; 0x18
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e8       	ldi	r20, 0x80	; 128
     a34:	5f e3       	ldi	r21, 0x3F	; 63
     a36:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	2c f4       	brge	.+10     	; 0xa48 <actuators_setup+0x152>
		__ticks = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9c 8b       	std	Y+20, r25	; 0x14
     a44:	8b 8b       	std	Y+19, r24	; 0x13
     a46:	3f c0       	rjmp	.+126    	; 0xac6 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a48:	6d 89       	ldd	r22, Y+21	; 0x15
     a4a:	7e 89       	ldd	r23, Y+22	; 0x16
     a4c:	8f 89       	ldd	r24, Y+23	; 0x17
     a4e:	98 8d       	ldd	r25, Y+24	; 0x18
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	4c f5       	brge	.+82     	; 0xab2 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a60:	69 8d       	ldd	r22, Y+25	; 0x19
     a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e2       	ldi	r20, 0x20	; 32
     a6e:	51 e4       	ldi	r21, 0x41	; 65
     a70:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	9c 8b       	std	Y+20, r25	; 0x14
     a86:	8b 8b       	std	Y+19, r24	; 0x13
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <actuators_setup+0x1b2>
     a8a:	8a ef       	ldi	r24, 0xFA	; 250
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	9a 8b       	std	Y+18, r25	; 0x12
     a90:	89 8b       	std	Y+17, r24	; 0x11
     a92:	89 89       	ldd	r24, Y+17	; 0x11
     a94:	9a 89       	ldd	r25, Y+18	; 0x12
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <actuators_setup+0x1a0>
     a9a:	9a 8b       	std	Y+18, r25	; 0x12
     a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a9e:	8b 89       	ldd	r24, Y+19	; 0x13
     aa0:	9c 89       	ldd	r25, Y+20	; 0x14
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 8b       	std	Y+20, r25	; 0x14
     aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa8:	8b 89       	ldd	r24, Y+19	; 0x13
     aaa:	9c 89       	ldd	r25, Y+20	; 0x14
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	69 f7       	brne	.-38     	; 0xa8a <actuators_setup+0x194>
     ab0:	14 c0       	rjmp	.+40     	; 0xada <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab2:	6d 89       	ldd	r22, Y+21	; 0x15
     ab4:	7e 89       	ldd	r23, Y+22	; 0x16
     ab6:	8f 89       	ldd	r24, Y+23	; 0x17
     ab8:	98 8d       	ldd	r25, Y+24	; 0x18
     aba:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	9c 8b       	std	Y+20, r25	; 0x14
     ac4:	8b 8b       	std	Y+19, r24	; 0x13
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	9c 89       	ldd	r25, Y+20	; 0x14
     aca:	98 8b       	std	Y+16, r25	; 0x10
     acc:	8f 87       	std	Y+15, r24	; 0x0f
     ace:	8f 85       	ldd	r24, Y+15	; 0x0f
     ad0:	98 89       	ldd	r25, Y+16	; 0x10
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <actuators_setup+0x1dc>
     ad6:	98 8b       	std	Y+16, r25	; 0x10
     ad8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	c0 dd       	rcall	.-1152   	; 0x65e <servo_set_door_position>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	aa ef       	ldi	r26, 0xFA	; 250
     ae4:	b3 e4       	ldi	r27, 0x43	; 67
     ae6:	8b 87       	std	Y+11, r24	; 0x0b
     ae8:	9c 87       	std	Y+12, r25	; 0x0c
     aea:	ad 87       	std	Y+13, r26	; 0x0d
     aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aee:	6b 85       	ldd	r22, Y+11	; 0x0b
     af0:	7c 85       	ldd	r23, Y+12	; 0x0c
     af2:	8d 85       	ldd	r24, Y+13	; 0x0d
     af4:	9e 85       	ldd	r25, Y+14	; 0x0e
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e4       	ldi	r19, 0x40	; 64
     afa:	4c e1       	ldi	r20, 0x1C	; 28
     afc:	55 e4       	ldi	r21, 0x45	; 69
     afe:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	8f 83       	std	Y+7, r24	; 0x07
     b08:	98 87       	std	Y+8, r25	; 0x08
     b0a:	a9 87       	std	Y+9, r26	; 0x09
     b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b0e:	6f 81       	ldd	r22, Y+7	; 0x07
     b10:	78 85       	ldd	r23, Y+8	; 0x08
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <actuators_setup+0x23a>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9e 83       	std	Y+6, r25	; 0x06
     b2c:	8d 83       	std	Y+5, r24	; 0x05
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     b30:	6f 81       	ldd	r22, Y+7	; 0x07
     b32:	78 85       	ldd	r23, Y+8	; 0x08
     b34:	89 85       	ldd	r24, Y+9	; 0x09
     b36:	9a 85       	ldd	r25, Y+10	; 0x0a
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	4c f5       	brge	.+82     	; 0xb9a <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <actuators_setup+0x29a>
     b72:	8a ef       	ldi	r24, 0xFA	; 250
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	8b 83       	std	Y+3, r24	; 0x03
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <actuators_setup+0x288>
     b82:	9c 83       	std	Y+4, r25	; 0x04
     b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	9e 83       	std	Y+6, r25	; 0x06
     b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f7       	brne	.-38     	; 0xb72 <actuators_setup+0x27c>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	9e 81       	ldd	r25, Y+6	; 0x06
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <actuators_setup+0x2c4>
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers(up);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	90 dd       	rcall	.-1248   	; 0x6e8 <servo_set_grabbers>
}
     bc8:	aa 96       	adiw	r28, 0x2a	; 42
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <__vector_18>:
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	00 90 5b 00 	lds	r0, 0x005B
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <__vector_18+0x2a>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <__vector_18+0x2c>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	ed ee       	ldi	r30, 0xED	; 237
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8c 83       	std	Y+4, r24	; 0x04
     c12:	1b 82       	std	Y+3, r1	; 0x03
     c14:	9c c0       	rjmp	.+312    	; 0xd4e <__vector_18+0x174>
     c16:	ed ee       	ldi	r30, 0xED	; 237
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	82 95       	swap	r24
     c1e:	80 7f       	andi	r24, 0xF0	; 240
     c20:	80 83       	st	Z, r24
     c22:	ee ee       	ldi	r30, 0xEE	; 238
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	82 95       	swap	r24
     c2a:	86 95       	lsr	r24
     c2c:	87 70       	andi	r24, 0x07	; 7
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	90 70       	andi	r25, 0x00	; 0
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <__vector_18+0x62>
     c3a:	6e c0       	rjmp	.+220    	; 0xd18 <__vector_18+0x13e>
     c3c:	ef ee       	ldi	r30, 0xEF	; 239
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 e8       	ldi	r24, 0x80	; 128
     c42:	80 83       	st	Z, r24
     c44:	ae ee       	ldi	r26, 0xEE	; 238
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ee ee       	ldi	r30, 0xEE	; 238
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 7d       	andi	r24, 0xDF	; 223
     c50:	8c 93       	st	X, r24
     c52:	e2 ef       	ldi	r30, 0xF2	; 242
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 95       	swap	r24
     c5a:	86 95       	lsr	r24
     c5c:	87 70       	andi	r24, 0x07	; 7
     c5e:	28 2f       	mov	r18, r24
     c60:	e3 ef       	ldi	r30, 0xF3	; 243
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	82 2b       	or	r24, r18
     c78:	8a 83       	std	Y+2, r24	; 0x02
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	2a c0       	rjmp	.+84     	; 0xcd2 <__vector_18+0xf8>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	82 1b       	sub	r24, r18
     c8a:	93 0b       	sbc	r25, r19
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	90 95       	com	r25
     c92:	81 95       	neg	r24
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	fc 01       	movw	r30, r24
     c98:	eb 5a       	subi	r30, 0xAB	; 171
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	40 81       	ld	r20, Z
     c9e:	51 81       	ldd	r21, Z+1	; 0x01
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	fc 01       	movw	r30, r24
     caa:	e7 59       	subi	r30, 0x97	; 151
     cac:	fe 4f       	sbci	r31, 0xFE	; 254
     cae:	80 81       	ld	r24, Z
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	82 0f       	add	r24, r18
     cbc:	93 1f       	adc	r25, r19
     cbe:	da 01       	movw	r26, r20
     cc0:	a8 0f       	add	r26, r24
     cc2:	b9 1f       	adc	r27, r25
     cc4:	ea ef       	ldi	r30, 0xFA	; 250
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8c 93       	st	X, r24
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	88 30       	cpi	r24, 0x08	; 8
     cd6:	98 f2       	brcs	.-90     	; 0xc7e <__vector_18+0xa4>
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	fc 01       	movw	r30, r24
     ce2:	e7 59       	subi	r30, 0x97	; 151
     ce4:	fe 4f       	sbci	r31, 0xFE	; 254
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	80 83       	st	Z, r24
     cec:	80 81       	ld	r24, Z
     cee:	85 30       	cpi	r24, 0x05	; 5
     cf0:	41 f4       	brne	.+16     	; 0xd02 <__vector_18+0x128>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	fc 01       	movw	r30, r24
     cfc:	e7 59       	subi	r30, 0x97	; 151
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	10 82       	st	Z, r1
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	fc 01       	movw	r30, r24
     d0c:	e3 58       	subi	r30, 0x83	; 131
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 81       	ld	r24, Z
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 83       	st	Z, r24
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <__vector_18+0x17c>
     d18:	ee ee       	ldi	r30, 0xEE	; 238
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 95       	swap	r24
     d20:	86 95       	lsr	r24
     d22:	86 95       	lsr	r24
     d24:	83 70       	andi	r24, 0x03	; 3
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	88 23       	and	r24, r24
     d30:	59 f0       	breq	.+22     	; 0xd48 <__vector_18+0x16e>
     d32:	ef ee       	ldi	r30, 0xEF	; 239
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	10 82       	st	Z, r1
     d38:	ae ee       	ldi	r26, 0xEE	; 238
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ee ee       	ldi	r30, 0xEE	; 238
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8f 7b       	andi	r24, 0xBF	; 191
     d44:	8c 93       	st	X, r24
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <__vector_18+0x17c>
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	8f 30       	cpi	r24, 0x0F	; 15
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__vector_18+0x17c>
     d54:	60 cf       	rjmp	.-320    	; 0xc16 <__vector_18+0x3c>
     d56:	ed ee       	ldi	r30, 0xED	; 237
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	80 83       	st	Z, r24
     d5e:	aa ed       	ldi	r26, 0xDA	; 218
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ea ed       	ldi	r30, 0xDA	; 218
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8c 93       	st	X, r24
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	5f 91       	pop	r21
     d84:	4f 91       	pop	r20
     d86:	3f 91       	pop	r19
     d88:	2f 91       	pop	r18
     d8a:	0f 90       	pop	r0
     d8c:	00 92 5b 00 	sts	0x005B, r0
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <CAN_InitModule>:
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <CAN_InitModule+0x6>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	e8 ed       	ldi	r30, 0xD8	; 216
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 83       	st	Z, r24
     dac:	1a 82       	std	Y+2, r1	; 0x02
     dae:	32 c0       	rjmp	.+100    	; 0xe14 <CAN_InitModule+0x7a>
     db0:	ed ee       	ldi	r30, 0xED	; 237
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	82 95       	swap	r24
     db8:	80 7f       	andi	r24, 0xF0	; 240
     dba:	80 83       	st	Z, r24
     dbc:	ee ee       	ldi	r30, 0xEE	; 238
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	10 82       	st	Z, r1
     dc2:	ef ee       	ldi	r30, 0xEF	; 239
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	10 82       	st	Z, r1
     dc8:	e3 ef       	ldi	r30, 0xF3	; 243
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	10 82       	st	Z, r1
     dce:	e2 ef       	ldi	r30, 0xF2	; 242
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	10 82       	st	Z, r1
     dd4:	e1 ef       	ldi	r30, 0xF1	; 241
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	10 82       	st	Z, r1
     dda:	e0 ef       	ldi	r30, 0xF0	; 240
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	10 82       	st	Z, r1
     de0:	e7 ef       	ldi	r30, 0xF7	; 247
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	10 82       	st	Z, r1
     de6:	e6 ef       	ldi	r30, 0xF6	; 246
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	10 82       	st	Z, r1
     dec:	e5 ef       	ldi	r30, 0xF5	; 245
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	10 82       	st	Z, r1
     df2:	e4 ef       	ldi	r30, 0xF4	; 244
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	10 82       	st	Z, r1
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <CAN_InitModule+0x6e>
     dfc:	ea ef       	ldi	r30, 0xFA	; 250
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	b8 f3       	brcs	.-18     	; 0xdfc <CAN_InitModule+0x62>
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	8a 83       	std	Y+2, r24	; 0x02
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	8f 30       	cpi	r24, 0x0F	; 15
     e18:	58 f2       	brcs	.-106    	; 0xdb0 <CAN_InitModule+0x16>
     e1a:	e8 ed       	ldi	r30, 0xD8	; 216
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	80 83       	st	Z, r24
     e22:	e2 ee       	ldi	r30, 0xE2	; 226
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 83       	st	Z, r24
     e2a:	e3 ee       	ldi	r30, 0xE3	; 227
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	88 e0       	ldi	r24, 0x08	; 8
     e30:	80 83       	st	Z, r24
     e32:	e4 ee       	ldi	r30, 0xE4	; 228
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8e e5       	ldi	r24, 0x5E	; 94
     e38:	80 83       	st	Z, r24
     e3a:	e5 ee       	ldi	r30, 0xE5	; 229
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
     e40:	eb ed       	ldi	r30, 0xDB	; 219
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 eb       	ldi	r24, 0xB0	; 176
     e46:	80 83       	st	Z, r24
     e48:	ef ed       	ldi	r30, 0xDF	; 223
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	8f e7       	ldi	r24, 0x7F	; 127
     e4e:	80 83       	st	Z, r24
     e50:	ee ed       	ldi	r30, 0xDE	; 222
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 83       	st	Z, r24
     e58:	78 94       	sei
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CAN_InitRxMob>:
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CAN_InitRxMob+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CAN_InitRxMob+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	ed ee       	ldi	r30, 0xED	; 237
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	e9 ed       	ldi	r30, 0xD9	; 217
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	82 95       	swap	r24
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	90 70       	andi	r25, 0x00	; 0
     e90:	88 23       	and	r24, r24
     e92:	a9 f7       	brne	.-22     	; 0xe7e <CAN_InitRxMob+0x1a>
     e94:	e9 ed       	ldi	r30, 0xD9	; 217
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	86 95       	lsr	r24
     e9c:	86 95       	lsr	r24
     e9e:	86 95       	lsr	r24
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	81 70       	andi	r24, 0x01	; 1
     ea6:	90 70       	andi	r25, 0x00	; 0
     ea8:	88 23       	and	r24, r24
     eaa:	49 f7       	brne	.-46     	; 0xe7e <CAN_InitRxMob+0x1a>
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	3f c0       	rjmp	.+126    	; 0xf2e <CAN_InitRxMob+0xca>
     eb0:	ed ee       	ldi	r30, 0xED	; 237
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	82 95       	swap	r24
     eb8:	80 7f       	andi	r24, 0xF0	; 240
     eba:	80 83       	st	Z, r24
     ebc:	ef ee       	ldi	r30, 0xEF	; 239
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 95       	swap	r24
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
     ec8:	83 70       	andi	r24, 0x03	; 3
     eca:	88 23       	and	r24, r24
     ecc:	69 f5       	brne	.+90     	; 0xf28 <CAN_InitRxMob+0xc4>
     ece:	ef ee       	ldi	r30, 0xEF	; 239
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8f e0       	ldi	r24, 0x0F	; 15
     ed4:	80 83       	st	Z, r24
     ed6:	e3 ef       	ldi	r30, 0xF3	; 243
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	96 95       	lsr	r25
     eea:	87 95       	ror	r24
     eec:	80 83       	st	Z, r24
     eee:	e2 ef       	ldi	r30, 0xF2	; 242
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	82 95       	swap	r24
     ef6:	88 0f       	add	r24, r24
     ef8:	80 7e       	andi	r24, 0xE0	; 224
     efa:	80 83       	st	Z, r24
     efc:	e6 ef       	ldi	r30, 0xF6	; 246
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 ee       	ldi	r24, 0xE0	; 224
     f02:	80 83       	st	Z, r24
     f04:	e7 ef       	ldi	r30, 0xF7	; 247
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	80 83       	st	Z, r24
     f0c:	af ee       	ldi	r26, 0xEF	; 239
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef ee       	ldi	r30, 0xEF	; 239
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24
     f1a:	ed ee       	ldi	r30, 0xED	; 237
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	0c c0       	rjmp	.+24     	; 0xf40 <CAN_InitRxMob+0xdc>
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	8f 30       	cpi	r24, 0x0F	; 15
     f32:	08 f4       	brcc	.+2      	; 0xf36 <CAN_InitRxMob+0xd2>
     f34:	bd cf       	rjmp	.-134    	; 0xeb0 <CAN_InitRxMob+0x4c>
     f36:	ed ee       	ldi	r30, 0xED	; 237
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 83       	st	Z, r24
     f3e:	1d 82       	std	Y+5, r1	; 0x05
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CAN_Init>:
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <CAN_Init+0xa>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	1b df       	rcall	.-458    	; 0xd9a <CAN_InitModule>
     f64:	19 82       	std	Y+1, r1	; 0x01
     f66:	36 c0       	rjmp	.+108    	; 0xfd4 <CAN_Init+0x82>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	79 df       	rcall	.-270    	; 0xe64 <CAN_InitRxMob>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	8c 01       	movw	r16, r24
     f7e:	0b 5a       	subi	r16, 0xAB	; 171
     f80:	1e 4f       	sbci	r17, 0xFE	; 254
     f82:	85 e0       	ldi	r24, 0x05	; 5
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 cb 19 	call	0x3396	; 0x3396 <calloc>
     f8e:	f8 01       	movw	r30, r16
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	48 2f       	mov	r20, r24
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	e3 58       	subi	r30, 0x83	; 131
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	10 82       	st	Z, r1
     fae:	fc 01       	movw	r30, r24
     fb0:	e3 58       	subi	r30, 0x83	; 131
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	80 81       	ld	r24, Z
     fb6:	f9 01       	movw	r30, r18
     fb8:	ed 58       	subi	r30, 0x8D	; 141
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	80 83       	st	Z, r24
     fbe:	f9 01       	movw	r30, r18
     fc0:	ed 58       	subi	r30, 0x8D	; 141
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	80 81       	ld	r24, Z
     fc6:	fa 01       	movw	r30, r20
     fc8:	e7 59       	subi	r30, 0x97	; 151
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	80 83       	st	Z, r24
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	99 81       	ldd	r25, Y+1	; 0x01
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	98 17       	cp	r25, r24
     fda:	30 f2       	brcs	.-116    	; 0xf68 <CAN_Init+0x16>
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <CAN_Read>:
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <CAN_Read+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <CAN_Read+0x8>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9b 83       	std	Y+3, r25	; 0x03
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	6c 83       	std	Y+4, r22	; 0x04
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	fc 01       	movw	r30, r24
    1006:	e3 58       	subi	r30, 0x83	; 131
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	b1 f3       	breq	.-20     	; 0xffc <CAN_Read+0x12>
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	30 c0       	rjmp	.+96     	; 0x1074 <CAN_Read+0x8a>
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	dc 01       	movw	r26, r24
    1020:	a2 0f       	add	r26, r18
    1022:	b3 1f       	adc	r27, r19
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	82 1b       	sub	r24, r18
    1030:	93 0b       	sbc	r25, r19
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	90 95       	com	r25
    1038:	81 95       	neg	r24
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	fc 01       	movw	r30, r24
    103e:	eb 5a       	subi	r30, 0xAB	; 171
    1040:	fe 4f       	sbci	r31, 0xFE	; 254
    1042:	40 81       	ld	r20, Z
    1044:	51 81       	ldd	r21, Z+1	; 0x01
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	fc 01       	movw	r30, r24
    1050:	ed 58       	subi	r30, 0x8D	; 141
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	80 81       	ld	r24, Z
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	fa 01       	movw	r30, r20
    1066:	e8 0f       	add	r30, r24
    1068:	f9 1f       	adc	r31, r25
    106a:	80 81       	ld	r24, Z
    106c:	8c 93       	st	X, r24
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 30       	cpi	r24, 0x08	; 8
    1078:	68 f2       	brcs	.-102    	; 0x1014 <CAN_Read+0x2a>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	fc 01       	movw	r30, r24
    1084:	ed 58       	subi	r30, 0x8D	; 141
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 81       	ld	r24, Z
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 83       	st	Z, r24
    108e:	80 81       	ld	r24, Z
    1090:	85 30       	cpi	r24, 0x05	; 5
    1092:	41 f4       	brne	.+16     	; 0x10a4 <CAN_Read+0xba>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	fc 01       	movw	r30, r24
    109e:	ed 58       	subi	r30, 0x8D	; 141
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	10 82       	st	Z, r1
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9c 01       	movw	r18, r24
    10ac:	21 50       	subi	r18, 0x01	; 1
    10ae:	30 40       	sbci	r19, 0x00	; 0
    10b0:	f9 01       	movw	r30, r18
    10b2:	e3 58       	subi	r30, 0x83	; 131
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	80 81       	ld	r24, Z
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	f9 01       	movw	r30, r18
    10bc:	e3 58       	subi	r30, 0x83	; 131
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	80 83       	st	Z, r24
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <CAN_Write>:
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	27 97       	sbiw	r28, 0x07	; 7
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	9d 83       	std	Y+5, r25	; 0x05
    10e8:	8c 83       	std	Y+4, r24	; 0x04
    10ea:	6e 83       	std	Y+6, r22	; 0x06
    10ec:	e9 ed       	ldi	r30, 0xD9	; 217
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	82 95       	swap	r24
    10f4:	8f 70       	andi	r24, 0x0F	; 15
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	88 23       	and	r24, r24
    1100:	a9 f7       	brne	.-22     	; 0x10ec <CAN_Write+0x1a>
    1102:	e9 ed       	ldi	r30, 0xD9	; 217
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	86 95       	lsr	r24
    110a:	86 95       	lsr	r24
    110c:	86 95       	lsr	r24
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	90 70       	andi	r25, 0x00	; 0
    1116:	88 23       	and	r24, r24
    1118:	49 f7       	brne	.-46     	; 0x10ec <CAN_Write+0x1a>
    111a:	ed ee       	ldi	r30, 0xED	; 237
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	1a 82       	std	Y+2, r1	; 0x02
    1124:	12 c0       	rjmp	.+36     	; 0x114a <__stack+0x4b>
    1126:	ed ee       	ldi	r30, 0xED	; 237
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	82 95       	swap	r24
    112e:	80 7f       	andi	r24, 0xF0	; 240
    1130:	80 83       	st	Z, r24
    1132:	ef ee       	ldi	r30, 0xEF	; 239
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	82 95       	swap	r24
    113a:	86 95       	lsr	r24
    113c:	86 95       	lsr	r24
    113e:	83 70       	andi	r24, 0x03	; 3
    1140:	88 23       	and	r24, r24
    1142:	31 f0       	breq	.+12     	; 0x1150 <__stack+0x51>
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	8f 30       	cpi	r24, 0x0F	; 15
    114e:	58 f3       	brcs	.-42     	; 0x1126 <__stack+0x27>
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	8f 30       	cpi	r24, 0x0F	; 15
    1154:	19 f4       	brne	.+6      	; 0x115c <__stack+0x5d>
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	8f 83       	std	Y+7, r24	; 0x07
    115a:	32 c0       	rjmp	.+100    	; 0x11c0 <__stack+0xc1>
    115c:	e2 ef       	ldi	r30, 0xF2	; 242
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	82 95       	swap	r24
    1164:	88 0f       	add	r24, r24
    1166:	80 7e       	andi	r24, 0xE0	; 224
    1168:	80 83       	st	Z, r24
    116a:	e3 ef       	ldi	r30, 0xF3	; 243
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	86 95       	lsr	r24
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	80 83       	st	Z, r24
    1178:	ef ee       	ldi	r30, 0xEF	; 239
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	80 83       	st	Z, r24
    1180:	1b 82       	std	Y+3, r1	; 0x03
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <__stack+0xa3>
    1184:	aa ef       	ldi	r26, 0xFA	; 250
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	fc 01       	movw	r30, r24
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	80 81       	ld	r24, Z
    119a:	8c 93       	st	X, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	70 f3       	brcs	.-36     	; 0x1184 <__stack+0x85>
    11a8:	af ee       	ldi	r26, 0xEF	; 239
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ef ee       	ldi	r30, 0xEF	; 239
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	8c 93       	st	X, r24
    11b6:	ed ee       	ldi	r30, 0xED	; 237
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 83       	st	Z, r24
    11be:	1f 82       	std	Y+7, r1	; 0x07
    11c0:	8f 81       	ldd	r24, Y+7	; 0x07
    11c2:	27 96       	adiw	r28, 0x07	; 7
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	2c 97       	sbiw	r28, 0x0c	; 12
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	89 87       	std	Y+9, r24	; 0x09
    11ea:	6a 87       	std	Y+10, r22	; 0x0a
    11ec:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11ee:	80 91 08 01 	lds	r24, 0x0108
    11f2:	90 91 09 01 	lds	r25, 0x0109
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	06 97       	sbiw	r24, 0x06	; 6
    1200:	98 87       	std	Y+8, r25	; 0x08
    1202:	8f 83       	std	Y+7, r24	; 0x07
    1204:	14 c0       	rjmp	.+40     	; 0x122e <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    1206:	ef 81       	ldd	r30, Y+7	; 0x07
    1208:	f8 85       	ldd	r31, Y+8	; 0x08
    120a:	90 81       	ld	r25, Z
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	98 17       	cp	r25, r24
    1210:	19 f4       	brne	.+6      	; 0x1218 <gpio_register_pin+0x44>
            return 1;
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	2c 87       	std	Y+12, r18	; 0x0c
    1216:	c9 c0       	rjmp	.+402    	; 0x13aa <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1218:	ef 81       	ldd	r30, Y+7	; 0x07
    121a:	f8 85       	ldd	r31, Y+8	; 0x08
    121c:	80 85       	ldd	r24, Z+8	; 0x08
    121e:	91 85       	ldd	r25, Z+9	; 0x09
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	06 97       	sbiw	r24, 0x06	; 6
    122a:	98 87       	std	Y+8, r25	; 0x08
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	06 96       	adiw	r24, 0x06	; 6
    1234:	21 e0       	ldi	r18, 0x01	; 1
    1236:	86 30       	cpi	r24, 0x06	; 6
    1238:	92 07       	cpc	r25, r18
    123a:	29 f7       	brne	.-54     	; 0x1206 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	86 95       	lsr	r24
    1240:	86 95       	lsr	r24
    1242:	86 95       	lsr	r24
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	87 70       	andi	r24, 0x07	; 7
    124c:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    124e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	09 f0       	breq	.+2      	; 0x1256 <gpio_register_pin+0x82>
    1254:	48 c0       	rjmp	.+144    	; 0x12e6 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	c9 01       	movw	r24, r18
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	4e 96       	adiw	r24, 0x1e	; 30
    1268:	dc 01       	movw	r26, r24
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	c9 01       	movw	r24, r18
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	4e 96       	adiw	r24, 0x1e	; 30
    127c:	fc 01       	movw	r30, r24
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <gpio_register_pin+0xbe>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	2a 95       	dec	r18
    1294:	e2 f7       	brpl	.-8      	; 0x128e <gpio_register_pin+0xba>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    129a:	8e 81       	ldd	r24, Y+6	; 0x06
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	c9 01       	movw	r24, r18
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	82 0f       	add	r24, r18
    12a8:	93 1f       	adc	r25, r19
    12aa:	4f 96       	adiw	r24, 0x1f	; 31
    12ac:	dc 01       	movw	r26, r24
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	c9 01       	movw	r24, r18
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	4f 96       	adiw	r24, 0x1f	; 31
    12c0:	fc 01       	movw	r30, r24
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <gpio_register_pin+0x104>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <gpio_register_pin+0x100>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
        return 0;
    12e2:	1c 86       	std	Y+12, r1	; 0x0c
    12e4:	62 c0       	rjmp	.+196    	; 0x13aa <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	c9 01       	movw	r24, r18
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	4e 96       	adiw	r24, 0x1e	; 30
    12f8:	dc 01       	movw	r26, r24
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	c9 01       	movw	r24, r18
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	4e 96       	adiw	r24, 0x1e	; 30
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <gpio_register_pin+0x14e>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	2a 95       	dec	r18
    1324:	e2 f7       	brpl	.-8      	; 0x131e <gpio_register_pin+0x14a>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    132c:	8e 81       	ldd	r24, Y+6	; 0x06
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	4f 96       	adiw	r24, 0x1f	; 31
    133e:	dc 01       	movw	r26, r24
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	c9 01       	movw	r24, r18
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	4f 96       	adiw	r24, 0x1f	; 31
    1352:	fc 01       	movw	r30, r24
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <gpio_register_pin+0x194>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	2a 95       	dec	r18
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <gpio_register_pin+0x190>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 e5 19 	call	0x33ca	; 0x33ca <malloc>
    1378:	98 87       	std	Y+8, r25	; 0x08
    137a:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    137c:	8f 81       	ldd	r24, Y+7	; 0x07
    137e:	98 85       	ldd	r25, Y+8	; 0x08
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	19 f4       	brne	.+6      	; 0x138a <gpio_register_pin+0x1b6>
        return 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	8c 87       	std	Y+12, r24	; 0x0c
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <gpio_register_pin+0x1d6>

    input->pin       = pin;
    138a:	ef 81       	ldd	r30, Y+7	; 0x07
    138c:	f8 85       	ldd	r31, Y+8	; 0x08
    138e:	89 85       	ldd	r24, Y+9	; 0x09
    1390:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1392:	ef 81       	ldd	r30, Y+7	; 0x07
    1394:	f8 85       	ldd	r31, Y+8	; 0x08
    1396:	8b 85       	ldd	r24, Y+11	; 0x0b
    1398:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    139a:	8f 81       	ldd	r24, Y+7	; 0x07
    139c:	98 85       	ldd	r25, Y+8	; 0x08
    139e:	06 96       	adiw	r24, 0x06	; 6
    13a0:	26 e0       	ldi	r18, 0x06	; 6
    13a2:	31 e0       	ldi	r19, 0x01	; 1
    13a4:	b9 01       	movw	r22, r18
    13a6:	0b d0       	rcall	.+22     	; 0x13be <list_add>

    return 0;
    13a8:	1c 86       	std	Y+12, r1	; 0x0c
    13aa:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    13ac:	2c 96       	adiw	r28, 0x0c	; 12
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <list_add+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <list_add+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	7c 83       	std	Y+4, r23	; 0x04
    13d0:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    13d2:	eb 81       	ldd	r30, Y+3	; 0x03
    13d4:	fc 81       	ldd	r31, Y+4	; 0x04
    13d6:	42 81       	ldd	r20, Z+2	; 0x02
    13d8:	53 81       	ldd	r21, Z+3	; 0x03
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
    13e2:	b9 01       	movw	r22, r18
    13e4:	07 d0       	rcall	.+14     	; 0x13f4 <__list_add>
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <__list_add+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <__list_add+0x8>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <__list_add+0xa>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	7c 83       	std	Y+4, r23	; 0x04
    1408:	6b 83       	std	Y+3, r22	; 0x03
    140a:	5e 83       	std	Y+6, r21	; 0x06
    140c:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    140e:	ed 81       	ldd	r30, Y+5	; 0x05
    1410:	fe 81       	ldd	r31, Y+6	; 0x06
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    new->next = next;
    141a:	e9 81       	ldd	r30, Y+1	; 0x01
    141c:	fa 81       	ldd	r31, Y+2	; 0x02
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	93 83       	std	Z+3, r25	; 0x03
    1424:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
    prev->next = new;
    1432:	eb 81       	ldd	r30, Y+3	; 0x03
    1434:	fc 81       	ldd	r31, Y+4	; 0x04
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	93 83       	std	Z+3, r25	; 0x03
    143c:	82 83       	std	Z+2, r24	; 0x02
}
    143e:	26 96       	adiw	r28, 0x06	; 6
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <gpio_write_pin+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <gpio_write_pin+0x8>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	86 95       	lsr	r24
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	8a 83       	std	Y+2, r24	; 0x02
	pin = pin % 8;
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	87 70       	andi	r24, 0x07	; 7
    1470:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	c9 01       	movw	r24, r18
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	4f 96       	adiw	r24, 0x1f	; 31
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	a2 81       	ldd	r26, Z+2	; 0x02
    148c:	b3 81       	ldd	r27, Z+3	; 0x03
    148e:	89 83       	std	Y+1, r24	; 0x01
	if(value != 0)
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	88 23       	and	r24, r24
    1494:	19 f1       	breq	.+70     	; 0x14dc <gpio_write_pin+0x8c>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	c9 01       	movw	r24, r18
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	4f 96       	adiw	r24, 0x1f	; 31
    14a8:	fc 01       	movw	r30, r24
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	48 2f       	mov	r20, r24
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <gpio_write_pin+0x72>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <gpio_write_pin+0x6e>
    14c6:	84 2b       	or	r24, r20
    14c8:	95 2b       	or	r25, r21
    14ca:	aa 27       	eor	r26, r26
    14cc:	97 fd       	sbrc	r25, 7
    14ce:	a0 95       	com	r26
    14d0:	ba 2f       	mov	r27, r26
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	a2 83       	std	Z+2, r26	; 0x02
    14d8:	b3 83       	std	Z+3, r27	; 0x03
    14da:	24 c0       	rjmp	.+72     	; 0x1524 <gpio_write_pin+0xd4>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	c9 01       	movw	r24, r18
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	82 0f       	add	r24, r18
    14ea:	93 1f       	adc	r25, r19
    14ec:	4f 96       	adiw	r24, 0x1f	; 31
    14ee:	fc 01       	movw	r30, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	48 2f       	mov	r20, r24
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <gpio_write_pin+0xb8>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <gpio_write_pin+0xb4>
    150c:	80 95       	com	r24
    150e:	90 95       	com	r25
    1510:	84 23       	and	r24, r20
    1512:	95 23       	and	r25, r21
    1514:	aa 27       	eor	r26, r26
    1516:	97 fd       	sbrc	r25, 7
    1518:	a0 95       	com	r26
    151a:	ba 2f       	mov	r27, r26
    151c:	80 83       	st	Z, r24
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	a2 83       	std	Z+2, r26	; 0x02
    1522:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1524:	80 e0       	ldi	r24, 0x00	; 0
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <__gpio_read_pin+0x6>
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	86 95       	lsr	r24
    1546:	86 95       	lsr	r24
    1548:	86 95       	lsr	r24
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	87 70       	andi	r24, 0x07	; 7
    1552:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	c9 01       	movw	r24, r18
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	4d 96       	adiw	r24, 0x1d	; 29
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <__gpio_read_pin+0x4c>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <__gpio_read_pin+0x48>
    1584:	ca 01       	movw	r24, r20
    1586:	81 70       	andi	r24, 0x01	; 1
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	2b 97       	sbiw	r28, 0x0b	; 11
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15aa:	80 91 08 01 	lds	r24, 0x0108
    15ae:	90 91 09 01 	lds	r25, 0x0109
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	06 97       	sbiw	r24, 0x06	; 6
    15bc:	98 87       	std	Y+8, r25	; 0x08
    15be:	8f 83       	std	Y+7, r24	; 0x07
    15c0:	55 c0       	rjmp	.+170    	; 0x166c <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    15c2:	ef 81       	ldd	r30, Y+7	; 0x07
    15c4:	f8 85       	ldd	r31, Y+8	; 0x08
    15c6:	90 81       	ld	r25, Z
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	98 17       	cp	r25, r24
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <gpio_read_pin+0x3c>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    15d0:	1c 82       	std	Y+4, r1	; 0x04
    15d2:	21 c0       	rjmp	.+66     	; 0x1616 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8f 81       	ldd	r24, Y+7	; 0x07
    15dc:	98 85       	ldd	r25, Y+8	; 0x08
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	fc 01       	movw	r30, r24
    15e4:	32 96       	adiw	r30, 0x02	; 2
    15e6:	40 81       	ld	r20, Z
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 01       	movw	r18, r24
    15f0:	2f 5f       	subi	r18, 0xFF	; 255
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	fc 01       	movw	r30, r24
    15fe:	32 96       	adiw	r30, 0x02	; 2
    1600:	80 81       	ld	r24, Z
    1602:	48 17       	cp	r20, r24
    1604:	29 f0       	breq	.+10     	; 0x1610 <gpio_read_pin+0x7c>
                    return input->previous_state;
    1606:	ef 81       	ldd	r30, Y+7	; 0x07
    1608:	f8 85       	ldd	r31, Y+8	; 0x08
    160a:	25 81       	ldd	r18, Z+5	; 0x05
    160c:	2b 87       	std	Y+11, r18	; 0x0b
    160e:	38 c0       	rjmp	.+112    	; 0x1680 <gpio_read_pin+0xec>
                i++;
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	e0 f2       	brcs	.-72     	; 0x15d4 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    161c:	ef 81       	ldd	r30, Y+7	; 0x07
    161e:	f8 85       	ldd	r31, Y+8	; 0x08
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	89 27       	eor	r24, r25
    1626:	88 23       	and	r24, r24
    1628:	29 f0       	breq	.+10     	; 0x1634 <gpio_read_pin+0xa0>
    162a:	ef 81       	ldd	r30, Y+7	; 0x07
    162c:	f8 85       	ldd	r31, Y+8	; 0x08
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	8a 87       	std	Y+10, r24	; 0x0a
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <gpio_read_pin+0xb0>
    1634:	ef 81       	ldd	r30, Y+7	; 0x07
    1636:	f8 85       	ldd	r31, Y+8	; 0x08
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	1a 86       	std	Y+10, r1	; 0x0a
    163c:	88 23       	and	r24, r24
    163e:	11 f4       	brne	.+4      	; 0x1644 <gpio_read_pin+0xb0>
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	2a 87       	std	Y+10, r18	; 0x0a
    1644:	8a 85       	ldd	r24, Y+10	; 0x0a
    1646:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1648:	ef 81       	ldd	r30, Y+7	; 0x07
    164a:	f8 85       	ldd	r31, Y+8	; 0x08
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	2b 87       	std	Y+11, r18	; 0x0b
    1654:	15 c0       	rjmp	.+42     	; 0x1680 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1656:	ef 81       	ldd	r30, Y+7	; 0x07
    1658:	f8 85       	ldd	r31, Y+8	; 0x08
    165a:	80 85       	ldd	r24, Z+8	; 0x08
    165c:	91 85       	ldd	r25, Z+9	; 0x09
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	06 97       	sbiw	r24, 0x06	; 6
    1668:	98 87       	std	Y+8, r25	; 0x08
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	8f 81       	ldd	r24, Y+7	; 0x07
    166e:	98 85       	ldd	r25, Y+8	; 0x08
    1670:	06 96       	adiw	r24, 0x06	; 6
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	86 30       	cpi	r24, 0x06	; 6
    1676:	92 07       	cpc	r25, r18
    1678:	09 f0       	breq	.+2      	; 0x167c <gpio_read_pin+0xe8>
    167a:	a3 cf       	rjmp	.-186    	; 0x15c2 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1682:	2b 96       	adiw	r28, 0x0b	; 11
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <gpio_debouncer+0xa>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <gpio_debouncer+0xc>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <gpio_debouncer+0xe>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    16a6:	80 91 08 01 	lds	r24, 0x0108
    16aa:	90 91 09 01 	lds	r25, 0x0109
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	06 97       	sbiw	r24, 0x06	; 6
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	1b c0       	rjmp	.+54     	; 0x16f4 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    16be:	00 91 87 01 	lds	r16, 0x0187
    16c2:	10 91 88 01 	lds	r17, 0x0188
    16c6:	ed 81       	ldd	r30, Y+5	; 0x05
    16c8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ca:	80 81       	ld	r24, Z
    16cc:	33 df       	rcall	.-410    	; 0x1534 <__gpio_read_pin>
    16ce:	28 2f       	mov	r18, r24
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	80 0f       	add	r24, r16
    16d6:	91 1f       	adc	r25, r17
    16d8:	fc 01       	movw	r30, r24
    16da:	32 96       	adiw	r30, 0x02	; 2
    16dc:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    16de:	ed 81       	ldd	r30, Y+5	; 0x05
    16e0:	fe 81       	ldd	r31, Y+6	; 0x06
    16e2:	80 85       	ldd	r24, Z+8	; 0x08
    16e4:	91 85       	ldd	r25, Z+9	; 0x09
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	06 97       	sbiw	r24, 0x06	; 6
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	06 96       	adiw	r24, 0x06	; 6
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	86 30       	cpi	r24, 0x06	; 6
    16fe:	92 07       	cpc	r25, r18
    1700:	f1 f6       	brne	.-68     	; 0x16be <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1702:	80 91 87 01 	lds	r24, 0x0187
    1706:	90 91 88 01 	lds	r25, 0x0188
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	90 93 88 01 	sts	0x0188, r25
    1710:	80 93 87 01 	sts	0x0187, r24
    1714:	80 91 87 01 	lds	r24, 0x0187
    1718:	90 91 88 01 	lds	r25, 0x0188
    171c:	83 30       	cpi	r24, 0x03	; 3
    171e:	91 05       	cpc	r25, r1
    1720:	21 f4       	brne	.+8      	; 0x172a <gpio_debouncer+0x96>
        count = 0;
    1722:	10 92 88 01 	sts	0x0188, r1
    1726:	10 92 87 01 	sts	0x0187, r1
	
}
    172a:	26 96       	adiw	r28, 0x06	; 6
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <greenside>:
{
	{{85,500}, 110, FORWARD, NULL}
};

void greenside(void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2b 97       	sbiw	r28, 0x0b	; 11
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    1754:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
    1756:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 85;
    175c:	85 e5       	ldi	r24, 0x55	; 85
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 670;
    1764:	8e e9       	ldi	r24, 0x9E	; 158
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	98 87       	std	Y+8, r25	; 0x08
    176a:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
    176c:	86 ea       	ldi	r24, 0xA6	; 166
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	9a 87       	std	Y+10, r25	; 0x0a
    1772:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
    1774:	ce 01       	movw	r24, r28
    1776:	05 96       	adiw	r24, 0x05	; 5
    1778:	58 d3       	rcall	.+1712   	; 0x1e2a <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	d1 f7       	brne	.-12     	; 0x177a <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	8c 83       	std	Y+4, r24	; 0x04
    178a:	5c c0       	rjmp	.+184    	; 0x1844 <greenside+0x104>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	48 2f       	mov	r20, r24
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	ca 01       	movw	r24, r20
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	9c 01       	movw	r18, r24
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	84 0f       	add	r24, r20
    17a8:	95 1f       	adc	r25, r21
    17aa:	8f 5e       	subi	r24, 0xEF	; 239
    17ac:	9e 4f       	sbci	r25, 0xFE	; 254
    17ae:	bc 01       	movw	r22, r24
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	48 2f       	mov	r20, r24
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	ca 01       	movw	r24, r20
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	9c 01       	movw	r18, r24
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	84 0f       	add	r24, r20
    17cc:	95 1f       	adc	r25, r21
    17ce:	fc 01       	movw	r30, r24
    17d0:	e8 5e       	subi	r30, 0xE8	; 232
    17d2:	fe 4f       	sbci	r31, 0xFE	; 254
    17d4:	a0 81       	ld	r26, Z
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	48 2f       	mov	r20, r24
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	ca 01       	movw	r24, r20
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	9c 01       	movw	r18, r24
    17e4:	22 0f       	add	r18, r18
    17e6:	33 1f       	adc	r19, r19
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	84 0f       	add	r24, r20
    17f2:	95 1f       	adc	r25, r21
    17f4:	fc 01       	movw	r30, r24
    17f6:	e7 5e       	subi	r30, 0xE7	; 231
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	b0 81       	ld	r27, Z
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	48 2f       	mov	r20, r24
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	ca 01       	movw	r24, r20
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	9c 01       	movw	r18, r24
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	84 0f       	add	r24, r20
    1818:	95 1f       	adc	r25, r21
    181a:	fc 01       	movw	r30, r24
    181c:	e6 5e       	subi	r30, 0xE6	; 230
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	20 81       	ld	r18, Z
    1822:	31 81       	ldd	r19, Z+1	; 0x01
    1824:	cb 01       	movw	r24, r22
    1826:	6a 2f       	mov	r22, r26
    1828:	4b 2f       	mov	r20, r27
    182a:	48 d2       	rcall	.+1168   	; 0x1cbc <odometry_move_to_position>
    182c:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	09 f4       	brne	.+2      	; 0x1836 <greenside+0xf6>
    1834:	a2 cf       	rjmp	.-188    	; 0x177a <greenside+0x3a>
					{
						break;
					}
					if(current_position == 0)
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	88 23       	and	r24, r24
    183a:	09 f4       	brne	.+2      	; 0x183e <greenside+0xfe>
    183c:	ff cf       	rjmp	.-2      	; 0x183c <greenside+0xfc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	8c 83       	std	Y+4, r24	; 0x04
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	88 23       	and	r24, r24
    1848:	09 f4       	brne	.+2      	; 0x184c <greenside+0x10c>
    184a:	a0 cf       	rjmp	.-192    	; 0x178c <greenside+0x4c>
    184c:	96 cf       	rjmp	.-212    	; 0x177a <greenside+0x3a>

0000184e <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	67 97       	sbiw	r28, 0x17	; 23
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1864:	90 91 89 01 	lds	r25, 0x0189
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	89 17       	cp	r24, r25
    186c:	09 f4       	brne	.+2      	; 0x1870 <odometry_set_speed+0x22>
    186e:	81 c0       	rjmp	.+258    	; 0x1972 <odometry_set_speed+0x124>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1870:	86 e5       	ldi	r24, 0x56	; 86
    1872:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1874:	8f 89       	ldd	r24, Y+23	; 0x17
    1876:	88 8b       	std	Y+16, r24	; 0x10
    1878:	72 c0       	rjmp	.+228    	; 0x195e <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a8 e4       	ldi	r26, 0x48	; 72
    1880:	b2 e4       	ldi	r27, 0x42	; 66
    1882:	8b 87       	std	Y+11, r24	; 0x0b
    1884:	9c 87       	std	Y+12, r25	; 0x0c
    1886:	ad 87       	std	Y+13, r26	; 0x0d
    1888:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	6b 85       	ldd	r22, Y+11	; 0x0b
    188c:	7c 85       	ldd	r23, Y+12	; 0x0c
    188e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1890:	9e 85       	ldd	r25, Y+14	; 0x0e
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e4       	ldi	r19, 0x40	; 64
    1896:	4c e1       	ldi	r20, 0x1C	; 28
    1898:	55 e4       	ldi	r21, 0x45	; 69
    189a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8f 83       	std	Y+7, r24	; 0x07
    18a4:	98 87       	std	Y+8, r25	; 0x08
    18a6:	a9 87       	std	Y+9, r26	; 0x09
    18a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <odometry_set_speed+0x7e>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    18cc:	6f 81       	ldd	r22, Y+7	; 0x07
    18ce:	78 85       	ldd	r23, Y+8	; 0x08
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	0f c0       	rjmp	.+30     	; 0x192c <odometry_set_speed+0xde>
    190e:	8a ef       	ldi	r24, 0xFA	; 250
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9c 83       	std	Y+4, r25	; 0x04
    1914:	8b 83       	std	Y+3, r24	; 0x03
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <odometry_set_speed+0xcc>
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	9e 81       	ldd	r25, Y+6	; 0x06
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <odometry_set_speed+0xc0>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <odometry_set_speed+0x108>
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	ce 01       	movw	r24, r28
    1960:	0f 96       	adiw	r24, 0x0f	; 15
    1962:	63 ec       	ldi	r22, 0xC3	; 195
    1964:	b6 db       	rcall	.-2196   	; 0x10d2 <CAN_Write>
    1966:	88 23       	and	r24, r24
    1968:	09 f0       	breq	.+2      	; 0x196c <odometry_set_speed+0x11e>
    196a:	87 cf       	rjmp	.-242    	; 0x187a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    196c:	8f 89       	ldd	r24, Y+23	; 0x17
    196e:	80 93 89 01 	sts	0x0189, r24
}
    1972:	67 96       	adiw	r28, 0x17	; 23
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <odometry_query_position>:

static void odometry_query_position(void)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	66 97       	sbiw	r28, 0x16	; 22
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1998:	80 e5       	ldi	r24, 0x50	; 80
    199a:	8f 87       	std	Y+15, r24	; 0x0f
    199c:	72 c0       	rjmp	.+228    	; 0x1a82 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a8 e4       	ldi	r26, 0x48	; 72
    19a4:	b2 e4       	ldi	r27, 0x42	; 66
    19a6:	8b 87       	std	Y+11, r24	; 0x0b
    19a8:	9c 87       	std	Y+12, r25	; 0x0c
    19aa:	ad 87       	std	Y+13, r26	; 0x0d
    19ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e4       	ldi	r19, 0x40	; 64
    19ba:	4c e1       	ldi	r20, 0x1C	; 28
    19bc:	55 e4       	ldi	r21, 0x45	; 69
    19be:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8f 83       	std	Y+7, r24	; 0x07
    19c8:	98 87       	std	Y+8, r25	; 0x08
    19ca:	a9 87       	std	Y+9, r26	; 0x09
    19cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <odometry_query_position+0x6c>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <odometry_query_position+0xea>
	else if (__tmp > 65535)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <odometry_query_position+0xcc>
    1a32:	8a ef       	ldi	r24, 0xFA	; 250
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <odometry_query_position+0xba>
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <odometry_query_position+0xae>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <odometry_query_position+0xf6>
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	ce 01       	movw	r24, r28
    1a84:	0f 96       	adiw	r24, 0x0f	; 15
    1a86:	63 ec       	ldi	r22, 0xC3	; 195
    1a88:	24 db       	rcall	.-2488   	; 0x10d2 <CAN_Write>
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <odometry_query_position+0x10c>
    1a8e:	87 cf       	rjmp	.-242    	; 0x199e <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1a90:	ce 01       	movw	r24, r28
    1a92:	0f 96       	adiw	r24, 0x0f	; 15
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	a9 da       	rcall	.-2734   	; 0xfea <CAN_Read>

	position.state = buffer[0];
    1a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9a:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1a9e:	88 89       	ldd	r24, Y+16	; 0x10
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	38 2f       	mov	r19, r24
    1aa6:	22 27       	eor	r18, r18
    1aa8:	89 89       	ldd	r24, Y+17	; 0x11
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	82 2b       	or	r24, r18
    1ab0:	93 2b       	or	r25, r19
    1ab2:	90 93 0b 01 	sts	0x010B, r25
    1ab6:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1aba:	8a 89       	ldd	r24, Y+18	; 0x12
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	38 2f       	mov	r19, r24
    1ac2:	22 27       	eor	r18, r18
    1ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	82 2b       	or	r24, r18
    1acc:	93 2b       	or	r25, r19
    1ace:	90 93 0d 01 	sts	0x010D, r25
    1ad2:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1ad6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	38 2f       	mov	r19, r24
    1ade:	22 27       	eor	r18, r18
    1ae0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	82 2b       	or	r24, r18
    1ae8:	93 2b       	or	r25, r19
    1aea:	90 93 0f 01 	sts	0x010F, r25
    1aee:	80 93 0e 01 	sts	0x010E, r24
}
    1af2:	66 96       	adiw	r28, 0x16	; 22
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	27 97       	sbiw	r28, 0x07	; 7
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1b1c:	b3 d7       	rcall	.+3942   	; 0x2a84 <system_get_system_time>
    1b1e:	aa 27       	eor	r26, r26
    1b20:	97 fd       	sbrc	r25, 7
    1b22:	a0 95       	com	r26
    1b24:	ba 2f       	mov	r27, r26
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	ab 83       	std	Y+3, r26	; 0x03
    1b2c:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1b2e:	2a df       	rcall	.-428    	; 0x1984 <odometry_query_position>
		if(callback != NULL)
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	71 f0       	breq	.+28     	; 0x1b54 <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b40:	ed 81       	ldd	r30, Y+5	; 0x05
    1b42:	fe 81       	ldd	r31, Y+6	; 0x06
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	09 95       	icall
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	19 f4       	brne	.+6      	; 0x1b54 <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1b54:	80 91 10 01 	lds	r24, 0x0110
    1b58:	8d 34       	cpi	r24, 0x4D	; 77
    1b5a:	49 f3       	breq	.-46     	; 0x1b2e <odometry_wait_until_done+0x2a>
    1b5c:	80 91 10 01 	lds	r24, 0x0110
    1b60:	82 35       	cpi	r24, 0x52	; 82
    1b62:	29 f3       	breq	.-54     	; 0x1b2e <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    1b64:	1f 82       	std	Y+7, r1	; 0x07
    1b66:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1b68:	27 96       	adiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	6b 97       	sbiw	r28, 0x1b	; 27
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	98 8f       	std	Y+24, r25	; 0x18
    1b90:	8f 8b       	std	Y+23, r24	; 0x17
    1b92:	69 8f       	std	Y+25, r22	; 0x19
    1b94:	5b 8f       	std	Y+27, r21	; 0x1b
    1b96:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1b98:	89 8d       	ldd	r24, Y+25	; 0x19
    1b9a:	59 de       	rcall	.-846    	; 0x184e <odometry_set_speed>
	buffer[0] = 'D';
    1b9c:	84 e4       	ldi	r24, 0x44	; 68
    1b9e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	89 2f       	mov	r24, r25
    1ba6:	99 0f       	add	r25, r25
    1ba8:	99 0b       	sbc	r25, r25
    1baa:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	89 8b       	std	Y+17, r24	; 0x11
    1bb0:	72 c0       	rjmp	.+228    	; 0x1c96 <odometry_move_straight+0x11c>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a8 e4       	ldi	r26, 0x48	; 72
    1bb8:	b2 e4       	ldi	r27, 0x42	; 66
    1bba:	8b 87       	std	Y+11, r24	; 0x0b
    1bbc:	9c 87       	std	Y+12, r25	; 0x0c
    1bbe:	ad 87       	std	Y+13, r26	; 0x0d
    1bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e4       	ldi	r19, 0x40	; 64
    1bce:	4c e1       	ldi	r20, 0x1C	; 28
    1bd0:	55 e4       	ldi	r21, 0x45	; 69
    1bd2:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8f 83       	std	Y+7, r24	; 0x07
    1bdc:	98 87       	std	Y+8, r25	; 0x08
    1bde:	a9 87       	std	Y+9, r26	; 0x09
    1be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <odometry_move_straight+0x8a>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <odometry_move_straight+0x108>
	else if (__tmp > 65535)
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	4f e7       	ldi	r20, 0x7F	; 127
    1c12:	57 e4       	ldi	r21, 0x47	; 71
    1c14:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    1c18:	18 16       	cp	r1, r24
    1c1a:	4c f5       	brge	.+82     	; 0x1c6e <odometry_move_straight+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <odometry_move_straight+0xea>
    1c46:	8a ef       	ldi	r24, 0xFA	; 250
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <odometry_move_straight+0xd8>
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <odometry_move_straight+0xcc>
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <odometry_move_straight+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <odometry_move_straight+0x114>
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	ce 01       	movw	r24, r28
    1c98:	0f 96       	adiw	r24, 0x0f	; 15
    1c9a:	63 ec       	ldi	r22, 0xC3	; 195
    1c9c:	1a da       	rcall	.-3020   	; 0x10d2 <CAN_Write>
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <odometry_move_straight+0x12a>
    1ca2:	87 cf       	rjmp	.-242    	; 0x1bb2 <odometry_move_straight+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1ca4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ca6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ca8:	2d df       	rcall	.-422    	; 0x1b04 <odometry_wait_until_done>
}
    1caa:	6b 96       	adiw	r28, 0x1b	; 27
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	6c 97       	sbiw	r28, 0x1c	; 28
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	98 8f       	std	Y+24, r25	; 0x18
    1cd2:	8f 8b       	std	Y+23, r24	; 0x17
    1cd4:	69 8f       	std	Y+25, r22	; 0x19
    1cd6:	4a 8f       	std	Y+26, r20	; 0x1a
    1cd8:	3c 8f       	std	Y+28, r19	; 0x1c
    1cda:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1cdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1cde:	b7 dd       	rcall	.-1170   	; 0x184e <odometry_set_speed>

	buffer[0] = 'G';
    1ce0:	87 e4       	ldi	r24, 0x47	; 71
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1ce4:	ef 89       	ldd	r30, Y+23	; 0x17
    1ce6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	89 2f       	mov	r24, r25
    1cee:	99 0f       	add	r25, r25
    1cf0:	99 0b       	sbc	r25, r25
    1cf2:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1cf4:	ef 89       	ldd	r30, Y+23	; 0x17
    1cf6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1cfe:	ef 89       	ldd	r30, Y+23	; 0x17
    1d00:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	89 2f       	mov	r24, r25
    1d08:	99 0f       	add	r25, r25
    1d0a:	99 0b       	sbc	r25, r25
    1d0c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1d0e:	ef 89       	ldd	r30, Y+23	; 0x17
    1d10:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    1d18:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1d1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d1c:	8d 8b       	std	Y+21, r24	; 0x15
    1d1e:	72 c0       	rjmp	.+228    	; 0x1e04 <odometry_move_to_position+0x148>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a8 e4       	ldi	r26, 0x48	; 72
    1d26:	b2 e4       	ldi	r27, 0x42	; 66
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
    1d2a:	9c 87       	std	Y+12, r25	; 0x0c
    1d2c:	ad 87       	std	Y+13, r26	; 0x0d
    1d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e4       	ldi	r19, 0x40	; 64
    1d3c:	4c e1       	ldi	r20, 0x1C	; 28
    1d3e:	55 e4       	ldi	r21, 0x45	; 69
    1d40:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    1d4c:	a9 87       	std	Y+9, r26	; 0x09
    1d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <odometry_move_to_position+0xb6>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <odometry_move_to_position+0x134>
	else if (__tmp > 65535)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <odometry_move_to_position+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <odometry_move_to_position+0x116>
    1db4:	8a ef       	ldi	r24, 0xFA	; 250
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <odometry_move_to_position+0x104>
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <odometry_move_to_position+0xf8>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <odometry_move_to_position+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <odometry_move_to_position+0x140>
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	ce 01       	movw	r24, r28
    1e06:	0f 96       	adiw	r24, 0x0f	; 15
    1e08:	63 ec       	ldi	r22, 0xC3	; 195
    1e0a:	63 d9       	rcall	.-3386   	; 0x10d2 <CAN_Write>
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <odometry_move_to_position+0x156>
    1e10:	87 cf       	rjmp	.-242    	; 0x1d20 <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e16:	76 de       	rcall	.-788    	; 0x1b04 <odometry_wait_until_done>
}
    1e18:	6c 96       	adiw	r28, 0x1c	; 28
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	68 97       	sbiw	r28, 0x18	; 24
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	98 8f       	std	Y+24, r25	; 0x18
    1e40:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1e42:	89 e4       	ldi	r24, 0x49	; 73
    1e44:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1e46:	ef 89       	ldd	r30, Y+23	; 0x17
    1e48:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	89 2f       	mov	r24, r25
    1e50:	99 0f       	add	r25, r25
    1e52:	99 0b       	sbc	r25, r25
    1e54:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1e56:	ef 89       	ldd	r30, Y+23	; 0x17
    1e58:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1e60:	ef 89       	ldd	r30, Y+23	; 0x17
    1e62:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	89 2f       	mov	r24, r25
    1e6a:	99 0f       	add	r25, r25
    1e6c:	99 0b       	sbc	r25, r25
    1e6e:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1e70:	ef 89       	ldd	r30, Y+23	; 0x17
    1e72:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1e7a:	ef 89       	ldd	r30, Y+23	; 0x17
    1e7c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e7e:	84 81       	ldd	r24, Z+4	; 0x04
    1e80:	95 81       	ldd	r25, Z+5	; 0x05
    1e82:	89 2f       	mov	r24, r25
    1e84:	99 0f       	add	r25, r25
    1e86:	99 0b       	sbc	r25, r25
    1e88:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1e8a:	ef 89       	ldd	r30, Y+23	; 0x17
    1e8c:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e8e:	84 81       	ldd	r24, Z+4	; 0x04
    1e90:	95 81       	ldd	r25, Z+5	; 0x05
    1e92:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1e94:	ef 89       	ldd	r30, Y+23	; 0x17
    1e96:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	90 93 0b 01 	sts	0x010B, r25
    1ea0:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1ea4:	ef 89       	ldd	r30, Y+23	; 0x17
    1ea6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	90 93 0d 01 	sts	0x010D, r25
    1eb0:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1eb4:	ef 89       	ldd	r30, Y+23	; 0x17
    1eb6:	f8 8d       	ldd	r31, Y+24	; 0x18
    1eb8:	84 81       	ldd	r24, Z+4	; 0x04
    1eba:	95 81       	ldd	r25, Z+5	; 0x05
    1ebc:	90 93 0f 01 	sts	0x010F, r25
    1ec0:	80 93 0e 01 	sts	0x010E, r24
    1ec4:	72 c0       	rjmp	.+228    	; 0x1faa <odometry_set_position+0x180>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a8 e4       	ldi	r26, 0x48	; 72
    1ecc:	b2 e4       	ldi	r27, 0x42	; 66
    1ece:	8b 87       	std	Y+11, r24	; 0x0b
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	ad 87       	std	Y+13, r26	; 0x0d
    1ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e4       	ldi	r19, 0x40	; 64
    1ee2:	4c e1       	ldi	r20, 0x1C	; 28
    1ee4:	55 e4       	ldi	r21, 0x45	; 69
    1ee6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8f 83       	std	Y+7, r24	; 0x07
    1ef0:	98 87       	std	Y+8, r25	; 0x08
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
    1ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 15 18 	call	0x302a	; 0x302a <__cmpsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <odometry_set_position+0xee>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <odometry_set_position+0x16c>
	else if (__tmp > 65535)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <odometry_set_position+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <odometry_set_position+0x14e>
    1f5a:	8a ef       	ldi	r24, 0xFA	; 250
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <odometry_set_position+0x13c>
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <odometry_set_position+0x130>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <odometry_set_position+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <odometry_set_position+0x178>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	ce 01       	movw	r24, r28
    1fac:	0f 96       	adiw	r24, 0x0f	; 15
    1fae:	63 ec       	ldi	r22, 0xC3	; 195
    1fb0:	90 d8       	rcall	.-3808   	; 0x10d2 <CAN_Write>
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <odometry_set_position+0x18e>
    1fb6:	87 cf       	rjmp	.-242    	; 0x1ec6 <odometry_set_position+0x9c>
		_delay_ms(50);
}
    1fb8:	68 96       	adiw	r28, 0x18	; 24
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <odometry_rotate_for>:

uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	6b 97       	sbiw	r28, 0x1b	; 27
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	98 8f       	std	Y+24, r25	; 0x18
    1fe0:	8f 8b       	std	Y+23, r24	; 0x17
    1fe2:	69 8f       	std	Y+25, r22	; 0x19
    1fe4:	5b 8f       	std	Y+27, r21	; 0x1b
    1fe6:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1fe8:	89 8d       	ldd	r24, Y+25	; 0x19
    1fea:	31 dc       	rcall	.-1950   	; 0x184e <odometry_set_speed>

	buffer[0] = 'T';
    1fec:	84 e5       	ldi	r24, 0x54	; 84
    1fee:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	89 2f       	mov	r24, r25
    1ff6:	99 27       	eor	r25, r25
    1ff8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	89 8b       	std	Y+17, r24	; 0x11
    1ffe:	71 c0       	rjmp	.+226    	; 0x20e2 <odometry_rotate_for+0x118>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a8 e4       	ldi	r26, 0x48	; 72
    2006:	b2 e4       	ldi	r27, 0x42	; 66
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	ad 87       	std	Y+13, r26	; 0x0d
    200e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e4       	ldi	r19, 0x40	; 64
    201c:	4c e1       	ldi	r20, 0x1C	; 28
    201e:	55 e4       	ldi	r21, 0x45	; 69
    2020:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	98 87       	std	Y+8, r25	; 0x08
    202c:	a9 87       	std	Y+9, r26	; 0x09
    202e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	f4 d7       	rcall	.+4072   	; 0x302a <__cmpsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <odometry_rotate_for+0x86>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <odometry_rotate_for+0x104>
	else if (__tmp > 65535)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__gesf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <odometry_rotate_for+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <odometry_rotate_for+0xe6>
    2092:	8a ef       	ldi	r24, 0xFA	; 250
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <odometry_rotate_for+0xd4>
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <odometry_rotate_for+0xc8>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <odometry_rotate_for+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	0e 94 86 18 	call	0x310c	; 0x310c <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <odometry_rotate_for+0x110>
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	ce 01       	movw	r24, r28
    20e4:	0f 96       	adiw	r24, 0x0f	; 15
    20e6:	63 ec       	ldi	r22, 0xC3	; 195
    20e8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CAN_Write>
    20ec:	88 23       	and	r24, r24
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <odometry_rotate_for+0x128>
    20f0:	87 cf       	rjmp	.-242    	; 0x2000 <odometry_rotate_for+0x36>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20f6:	06 dd       	rcall	.-1524   	; 0x1b04 <odometry_wait_until_done>

}
    20f8:	6b 96       	adiw	r28, 0x1b	; 27
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <purpleside>:
const struct goto_fields purple_tactic_five_positions[TACTIC_FIVE_POSITION_COUNT] =
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}	
};
void purpleside(void)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	2d 97       	sbiw	r28, 0x0d	; 13
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    211e:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position	 = 0;
    2120:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = return_active_state();
    2122:	c1 d4       	rcall	.+2434   	; 0x2aa6 <return_active_state>
    2124:	89 83       	std	Y+1, r24	; 0x01
	
	starting_position.x		= 85;
    2126:	85 e5       	ldi	r24, 0x55	; 85
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y		= 1020;
    212e:	8c ef       	ldi	r24, 0xFC	; 252
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	98 87       	std	Y+8, r25	; 0x08
    2134:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = 90;
    2136:	8a e5       	ldi	r24, 0x5A	; 90
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9a 87       	std	Y+10, r25	; 0x0a
    213c:	89 87       	std	Y+9, r24	; 0x09
	
	odometry_set_position(&starting_position);
    213e:	ce 01       	movw	r24, r28
    2140:	05 96       	adiw	r24, 0x05	; 5
    2142:	73 de       	rcall	.-794    	; 0x1e2a <odometry_set_position>

	while(1)
	{
		switch(active_state)
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	3d 87       	std	Y+13, r19	; 0x0d
    214c:	2c 87       	std	Y+12, r18	; 0x0c
    214e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2150:	9d 85       	ldd	r25, Y+13	; 0x0d
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	91 05       	cpc	r25, r1
    2156:	09 f4       	brne	.+2      	; 0x215a <purpleside+0x50>
    2158:	e2 c0       	rjmp	.+452    	; 0x231e <purpleside+0x214>
    215a:	2c 85       	ldd	r18, Y+12	; 0x0c
    215c:	3d 85       	ldd	r19, Y+13	; 0x0d
    215e:	24 30       	cpi	r18, 0x04	; 4
    2160:	31 05       	cpc	r19, r1
    2162:	64 f4       	brge	.+24     	; 0x217c <purpleside+0x72>
    2164:	8c 85       	ldd	r24, Y+12	; 0x0c
    2166:	9d 85       	ldd	r25, Y+13	; 0x0d
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	91 05       	cpc	r25, r1
    216c:	a1 f0       	breq	.+40     	; 0x2196 <purpleside+0x8c>
    216e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2170:	3d 85       	ldd	r19, Y+13	; 0x0d
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <purpleside+0x70>
    2178:	70 c0       	rjmp	.+224    	; 0x225a <purpleside+0x150>
    217a:	e4 cf       	rjmp	.-56     	; 0x2144 <purpleside+0x3a>
    217c:	8c 85       	ldd	r24, Y+12	; 0x0c
    217e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <purpleside+0x7e>
    2186:	2d c1       	rjmp	.+602    	; 0x23e2 <purpleside+0x2d8>
    2188:	2c 85       	ldd	r18, Y+12	; 0x0c
    218a:	3d 85       	ldd	r19, Y+13	; 0x0d
    218c:	25 30       	cpi	r18, 0x05	; 5
    218e:	31 05       	cpc	r19, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <purpleside+0x8a>
    2192:	89 c1       	rjmp	.+786    	; 0x24a6 <purpleside+0x39c>
    2194:	d7 cf       	rjmp	.-82     	; 0x2144 <purpleside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	8c 83       	std	Y+4, r24	; 0x04
    219a:	5b c0       	rjmp	.+182    	; 0x2252 <purpleside+0x148>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	48 2f       	mov	r20, r24
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	ca 01       	movw	r24, r20
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	9c 01       	movw	r18, r24
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	84 0f       	add	r24, r20
    21b8:	95 1f       	adc	r25, r21
    21ba:	84 5e       	subi	r24, 0xE4	; 228
    21bc:	9e 4f       	sbci	r25, 0xFE	; 254
    21be:	bc 01       	movw	r22, r24
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	48 2f       	mov	r20, r24
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	ca 01       	movw	r24, r20
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	9c 01       	movw	r18, r24
    21ce:	22 0f       	add	r18, r18
    21d0:	33 1f       	adc	r19, r19
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	82 0f       	add	r24, r18
    21d8:	93 1f       	adc	r25, r19
    21da:	84 0f       	add	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	fc 01       	movw	r30, r24
    21e0:	ed 5d       	subi	r30, 0xDD	; 221
    21e2:	fe 4f       	sbci	r31, 0xFE	; 254
    21e4:	a0 81       	ld	r26, Z
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	48 2f       	mov	r20, r24
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	ca 01       	movw	r24, r20
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	9c 01       	movw	r18, r24
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	22 0f       	add	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	82 0f       	add	r24, r18
    21fe:	93 1f       	adc	r25, r19
    2200:	84 0f       	add	r24, r20
    2202:	95 1f       	adc	r25, r21
    2204:	fc 01       	movw	r30, r24
    2206:	ec 5d       	subi	r30, 0xDC	; 220
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	b0 81       	ld	r27, Z
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	48 2f       	mov	r20, r24
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	ca 01       	movw	r24, r20
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	9c 01       	movw	r18, r24
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	84 0f       	add	r24, r20
    2228:	95 1f       	adc	r25, r21
    222a:	fc 01       	movw	r30, r24
    222c:	eb 5d       	subi	r30, 0xDB	; 219
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	20 81       	ld	r18, Z
    2232:	31 81       	ldd	r19, Z+1	; 0x01
    2234:	cb 01       	movw	r24, r22
    2236:	6a 2f       	mov	r22, r26
    2238:	4b 2f       	mov	r20, r27
    223a:	40 dd       	rcall	.-1408   	; 0x1cbc <odometry_move_to_position>
    223c:	8a 83       	std	Y+2, r24	; 0x02
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	59 f0       	breq	.+22     	; 0x225a <purpleside+0x150>
					{
						break;
					}
					if(current_position == 0)
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	88 23       	and	r24, r24
    2248:	09 f4       	brne	.+2      	; 0x224c <purpleside+0x142>
    224a:	ff cf       	rjmp	.-2      	; 0x224a <purpleside+0x140>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	8c 83       	std	Y+4, r24	; 0x04
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <purpleside+0x150>
    2258:	a1 cf       	rjmp	.-190    	; 0x219c <purpleside+0x92>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	8c 83       	std	Y+4, r24	; 0x04
    225e:	5b c0       	rjmp	.+182    	; 0x2316 <purpleside+0x20c>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_two_positions[current_position].point), purple_tactic_two_positions[current_position].speed,
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	48 2f       	mov	r20, r24
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	ca 01       	movw	r24, r20
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	9c 01       	movw	r18, r24
    226e:	22 0f       	add	r18, r18
    2270:	33 1f       	adc	r19, r19
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	84 0f       	add	r24, r20
    227c:	95 1f       	adc	r25, r21
    227e:	89 5d       	subi	r24, 0xD9	; 217
    2280:	9e 4f       	sbci	r25, 0xFE	; 254
    2282:	bc 01       	movw	r22, r24
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	48 2f       	mov	r20, r24
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	ca 01       	movw	r24, r20
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	9c 01       	movw	r18, r24
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	82 0f       	add	r24, r18
    229c:	93 1f       	adc	r25, r19
    229e:	84 0f       	add	r24, r20
    22a0:	95 1f       	adc	r25, r21
    22a2:	fc 01       	movw	r30, r24
    22a4:	e2 5d       	subi	r30, 0xD2	; 210
    22a6:	fe 4f       	sbci	r31, 0xFE	; 254
    22a8:	a0 81       	ld	r26, Z
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	48 2f       	mov	r20, r24
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	ca 01       	movw	r24, r20
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	9c 01       	movw	r18, r24
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	82 0f       	add	r24, r18
    22c2:	93 1f       	adc	r25, r19
    22c4:	84 0f       	add	r24, r20
    22c6:	95 1f       	adc	r25, r21
    22c8:	fc 01       	movw	r30, r24
    22ca:	e1 5d       	subi	r30, 0xD1	; 209
    22cc:	fe 4f       	sbci	r31, 0xFE	; 254
    22ce:	b0 81       	ld	r27, Z
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	48 2f       	mov	r20, r24
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	ca 01       	movw	r24, r20
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	9c 01       	movw	r18, r24
    22de:	22 0f       	add	r18, r18
    22e0:	33 1f       	adc	r19, r19
    22e2:	22 0f       	add	r18, r18
    22e4:	33 1f       	adc	r19, r19
    22e6:	82 0f       	add	r24, r18
    22e8:	93 1f       	adc	r25, r19
    22ea:	84 0f       	add	r24, r20
    22ec:	95 1f       	adc	r25, r21
    22ee:	fc 01       	movw	r30, r24
    22f0:	e0 5d       	subi	r30, 0xD0	; 208
    22f2:	fe 4f       	sbci	r31, 0xFE	; 254
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
    22f8:	cb 01       	movw	r24, r22
    22fa:	6a 2f       	mov	r22, r26
    22fc:	4b 2f       	mov	r20, r27
    22fe:	de dc       	rcall	.-1604   	; 0x1cbc <odometry_move_to_position>
    2300:	8a 83       	std	Y+2, r24	; 0x02
					purple_tactic_two_positions[current_position].direction,purple_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	59 f0       	breq	.+22     	; 0x231e <purpleside+0x214>
					{
						break;
					}
					if(current_position == 0)
    2308:	8c 81       	ldd	r24, Y+4	; 0x04
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <purpleside+0x206>
    230e:	ff cf       	rjmp	.-2      	; 0x230e <purpleside+0x204>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	8f 5f       	subi	r24, 0xFF	; 255
    2314:	8c 83       	std	Y+4, r24	; 0x04
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	88 23       	and	r24, r24
    231a:	09 f4       	brne	.+2      	; 0x231e <purpleside+0x214>
    231c:	a1 cf       	rjmp	.-190    	; 0x2260 <purpleside+0x156>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	8c 83       	std	Y+4, r24	; 0x04
    2322:	5b c0       	rjmp	.+182    	; 0x23da <purpleside+0x2d0>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_three_positions[current_position].point), purple_tactic_three_positions[current_position].speed,
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	48 2f       	mov	r20, r24
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	ca 01       	movw	r24, r20
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	9c 01       	movw	r18, r24
    2332:	22 0f       	add	r18, r18
    2334:	33 1f       	adc	r19, r19
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	82 0f       	add	r24, r18
    233c:	93 1f       	adc	r25, r19
    233e:	84 0f       	add	r24, r20
    2340:	95 1f       	adc	r25, r21
    2342:	8e 5c       	subi	r24, 0xCE	; 206
    2344:	9e 4f       	sbci	r25, 0xFE	; 254
    2346:	bc 01       	movw	r22, r24
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	48 2f       	mov	r20, r24
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	ca 01       	movw	r24, r20
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	9c 01       	movw	r18, r24
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	84 0f       	add	r24, r20
    2364:	95 1f       	adc	r25, r21
    2366:	fc 01       	movw	r30, r24
    2368:	e7 5c       	subi	r30, 0xC7	; 199
    236a:	fe 4f       	sbci	r31, 0xFE	; 254
    236c:	a0 81       	ld	r26, Z
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	48 2f       	mov	r20, r24
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	ca 01       	movw	r24, r20
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	9c 01       	movw	r18, r24
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	22 0f       	add	r18, r18
    2382:	33 1f       	adc	r19, r19
    2384:	82 0f       	add	r24, r18
    2386:	93 1f       	adc	r25, r19
    2388:	84 0f       	add	r24, r20
    238a:	95 1f       	adc	r25, r21
    238c:	fc 01       	movw	r30, r24
    238e:	e6 5c       	subi	r30, 0xC6	; 198
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	b0 81       	ld	r27, Z
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	48 2f       	mov	r20, r24
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	ca 01       	movw	r24, r20
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	9c 01       	movw	r18, r24
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	84 0f       	add	r24, r20
    23b0:	95 1f       	adc	r25, r21
    23b2:	fc 01       	movw	r30, r24
    23b4:	e5 5c       	subi	r30, 0xC5	; 197
    23b6:	fe 4f       	sbci	r31, 0xFE	; 254
    23b8:	20 81       	ld	r18, Z
    23ba:	31 81       	ldd	r19, Z+1	; 0x01
    23bc:	cb 01       	movw	r24, r22
    23be:	6a 2f       	mov	r22, r26
    23c0:	4b 2f       	mov	r20, r27
    23c2:	7c dc       	rcall	.-1800   	; 0x1cbc <odometry_move_to_position>
    23c4:	8a 83       	std	Y+2, r24	; 0x02
					purple_tactic_three_positions[current_position].direction,purple_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	59 f0       	breq	.+22     	; 0x23e2 <purpleside+0x2d8>
					{
						break;
					}
					if(current_position == 0)
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	88 23       	and	r24, r24
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <purpleside+0x2ca>
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <purpleside+0x2c8>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8c 83       	std	Y+4, r24	; 0x04
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	88 23       	and	r24, r24
    23de:	09 f4       	brne	.+2      	; 0x23e2 <purpleside+0x2d8>
    23e0:	a1 cf       	rjmp	.-190    	; 0x2324 <purpleside+0x21a>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	8c 83       	std	Y+4, r24	; 0x04
    23e6:	5b c0       	rjmp	.+182    	; 0x249e <purpleside+0x394>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_four_positions[current_position].point), purple_tactic_four_positions[current_position].speed,
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	48 2f       	mov	r20, r24
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	ca 01       	movw	r24, r20
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	9c 01       	movw	r18, r24
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	82 0f       	add	r24, r18
    2400:	93 1f       	adc	r25, r19
    2402:	84 0f       	add	r24, r20
    2404:	95 1f       	adc	r25, r21
    2406:	83 5c       	subi	r24, 0xC3	; 195
    2408:	9e 4f       	sbci	r25, 0xFE	; 254
    240a:	bc 01       	movw	r22, r24
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	48 2f       	mov	r20, r24
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	ca 01       	movw	r24, r20
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	9c 01       	movw	r18, r24
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	22 0f       	add	r18, r18
    2420:	33 1f       	adc	r19, r19
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	84 0f       	add	r24, r20
    2428:	95 1f       	adc	r25, r21
    242a:	fc 01       	movw	r30, r24
    242c:	ec 5b       	subi	r30, 0xBC	; 188
    242e:	fe 4f       	sbci	r31, 0xFE	; 254
    2430:	a0 81       	ld	r26, Z
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	48 2f       	mov	r20, r24
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	ca 01       	movw	r24, r20
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	9c 01       	movw	r18, r24
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	84 0f       	add	r24, r20
    244e:	95 1f       	adc	r25, r21
    2450:	fc 01       	movw	r30, r24
    2452:	eb 5b       	subi	r30, 0xBB	; 187
    2454:	fe 4f       	sbci	r31, 0xFE	; 254
    2456:	b0 81       	ld	r27, Z
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	48 2f       	mov	r20, r24
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	ca 01       	movw	r24, r20
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	9c 01       	movw	r18, r24
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	82 0f       	add	r24, r18
    2470:	93 1f       	adc	r25, r19
    2472:	84 0f       	add	r24, r20
    2474:	95 1f       	adc	r25, r21
    2476:	fc 01       	movw	r30, r24
    2478:	ea 5b       	subi	r30, 0xBA	; 186
    247a:	fe 4f       	sbci	r31, 0xFE	; 254
    247c:	20 81       	ld	r18, Z
    247e:	31 81       	ldd	r19, Z+1	; 0x01
    2480:	cb 01       	movw	r24, r22
    2482:	6a 2f       	mov	r22, r26
    2484:	4b 2f       	mov	r20, r27
    2486:	1a dc       	rcall	.-1996   	; 0x1cbc <odometry_move_to_position>
    2488:	8a 83       	std	Y+2, r24	; 0x02
					purple_tactic_four_positions[current_position].direction,purple_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	59 f0       	breq	.+22     	; 0x24a6 <purpleside+0x39c>
					{
						break;
					}
					if(current_position == 0)
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <purpleside+0x38e>
    2496:	ff cf       	rjmp	.-2      	; 0x2496 <purpleside+0x38c>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8c 83       	std	Y+4, r24	; 0x04
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	88 23       	and	r24, r24
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <purpleside+0x39c>
    24a4:	a1 cf       	rjmp	.-190    	; 0x23e8 <purpleside+0x2de>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	8c 83       	std	Y+4, r24	; 0x04
    24aa:	5c c0       	rjmp	.+184    	; 0x2564 <purpleside+0x45a>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_five_positions[current_position].point), purple_tactic_five_positions[current_position].speed,
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	48 2f       	mov	r20, r24
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	ca 01       	movw	r24, r20
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	9c 01       	movw	r18, r24
    24ba:	22 0f       	add	r18, r18
    24bc:	33 1f       	adc	r19, r19
    24be:	22 0f       	add	r18, r18
    24c0:	33 1f       	adc	r19, r19
    24c2:	82 0f       	add	r24, r18
    24c4:	93 1f       	adc	r25, r19
    24c6:	84 0f       	add	r24, r20
    24c8:	95 1f       	adc	r25, r21
    24ca:	88 5b       	subi	r24, 0xB8	; 184
    24cc:	9e 4f       	sbci	r25, 0xFE	; 254
    24ce:	bc 01       	movw	r22, r24
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	48 2f       	mov	r20, r24
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	ca 01       	movw	r24, r20
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	9c 01       	movw	r18, r24
    24de:	22 0f       	add	r18, r18
    24e0:	33 1f       	adc	r19, r19
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	82 0f       	add	r24, r18
    24e8:	93 1f       	adc	r25, r19
    24ea:	84 0f       	add	r24, r20
    24ec:	95 1f       	adc	r25, r21
    24ee:	fc 01       	movw	r30, r24
    24f0:	e1 5b       	subi	r30, 0xB1	; 177
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	a0 81       	ld	r26, Z
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	48 2f       	mov	r20, r24
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	ca 01       	movw	r24, r20
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	9c 01       	movw	r18, r24
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	84 0f       	add	r24, r20
    2512:	95 1f       	adc	r25, r21
    2514:	fc 01       	movw	r30, r24
    2516:	e0 5b       	subi	r30, 0xB0	; 176
    2518:	fe 4f       	sbci	r31, 0xFE	; 254
    251a:	b0 81       	ld	r27, Z
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	48 2f       	mov	r20, r24
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	ca 01       	movw	r24, r20
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	9c 01       	movw	r18, r24
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	22 0f       	add	r18, r18
    2530:	33 1f       	adc	r19, r19
    2532:	82 0f       	add	r24, r18
    2534:	93 1f       	adc	r25, r19
    2536:	84 0f       	add	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	fc 01       	movw	r30, r24
    253c:	ef 5a       	subi	r30, 0xAF	; 175
    253e:	fe 4f       	sbci	r31, 0xFE	; 254
    2540:	20 81       	ld	r18, Z
    2542:	31 81       	ldd	r19, Z+1	; 0x01
    2544:	cb 01       	movw	r24, r22
    2546:	6a 2f       	mov	r22, r26
    2548:	4b 2f       	mov	r20, r27
    254a:	b8 db       	rcall	.-2192   	; 0x1cbc <odometry_move_to_position>
    254c:	8a 83       	std	Y+2, r24	; 0x02
					purple_tactic_five_positions[current_position].direction,purple_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	09 f4       	brne	.+2      	; 0x2556 <purpleside+0x44c>
    2554:	f7 cd       	rjmp	.-1042   	; 0x2144 <purpleside+0x3a>
					{
						break;
					}
					if(current_position == 0)
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <purpleside+0x454>
    255c:	ff cf       	rjmp	.-2      	; 0x255c <purpleside+0x452>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8c 83       	std	Y+4, r24	; 0x04
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <purpleside+0x462>
    256a:	a0 cf       	rjmp	.-192    	; 0x24ac <purpleside+0x3a2>
    256c:	eb cd       	rjmp	.-1066   	; 0x2144 <purpleside+0x3a>

0000256e <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <timer_register_callback+0x6>
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	90 93 8b 01 	sts	0x018B, r25
    2584:	80 93 8a 01 	sts	0x018A, r24
}
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <combination_check>:
static int combination_check()
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <combination_check+0x6>
    2598:	00 d0       	rcall	.+0      	; 0x259a <combination_check+0x8>
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	if(combination[0] == 1 && combination[1] == 0 && combination[2] == 0)//first combination
    259e:	80 91 91 01 	lds	r24, 0x0191
    25a2:	90 91 92 01 	lds	r25, 0x0192
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	89 f4       	brne	.+34     	; 0x25ce <combination_check+0x3c>
    25ac:	80 91 93 01 	lds	r24, 0x0193
    25b0:	90 91 94 01 	lds	r25, 0x0194
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	59 f4       	brne	.+22     	; 0x25ce <combination_check+0x3c>
    25b8:	80 91 95 01 	lds	r24, 0x0195
    25bc:	90 91 96 01 	lds	r25, 0x0196
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	29 f4       	brne	.+10     	; 0x25ce <combination_check+0x3c>
		return 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	78 c0       	rjmp	.+240    	; 0x26be <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 0)//second combination
    25ce:	80 91 91 01 	lds	r24, 0x0191
    25d2:	90 91 92 01 	lds	r25, 0x0192
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	91 f4       	brne	.+36     	; 0x25fe <combination_check+0x6c>
    25da:	80 91 93 01 	lds	r24, 0x0193
    25de:	90 91 94 01 	lds	r25, 0x0194
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	91 05       	cpc	r25, r1
    25e6:	59 f4       	brne	.+22     	; 0x25fe <combination_check+0x6c>
    25e8:	80 91 95 01 	lds	r24, 0x0195
    25ec:	90 91 96 01 	lds	r25, 0x0196
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	29 f4       	brne	.+10     	; 0x25fe <combination_check+0x6c>
		return 2;
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	60 c0       	rjmp	.+192    	; 0x26be <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 1)//third combination
    25fe:	80 91 91 01 	lds	r24, 0x0191
    2602:	90 91 92 01 	lds	r25, 0x0192
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	91 f4       	brne	.+36     	; 0x262e <combination_check+0x9c>
    260a:	80 91 93 01 	lds	r24, 0x0193
    260e:	90 91 94 01 	lds	r25, 0x0194
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	61 f4       	brne	.+24     	; 0x262e <combination_check+0x9c>
    2616:	80 91 95 01 	lds	r24, 0x0195
    261a:	90 91 96 01 	lds	r25, 0x0196
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	91 05       	cpc	r25, r1
    2622:	29 f4       	brne	.+10     	; 0x262e <combination_check+0x9c>
		return 3;
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	48 c0       	rjmp	.+144    	; 0x26be <combination_check+0x12c>
	else if(combination[0] == 1 && combination[1] == 1 && combination[2] == 0)//fourth combination
    262e:	80 91 91 01 	lds	r24, 0x0191
    2632:	90 91 92 01 	lds	r25, 0x0192
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	91 f4       	brne	.+36     	; 0x2660 <combination_check+0xce>
    263c:	80 91 93 01 	lds	r24, 0x0193
    2640:	90 91 94 01 	lds	r25, 0x0194
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	91 05       	cpc	r25, r1
    2648:	59 f4       	brne	.+22     	; 0x2660 <combination_check+0xce>
    264a:	80 91 95 01 	lds	r24, 0x0195
    264e:	90 91 96 01 	lds	r25, 0x0196
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	29 f4       	brne	.+10     	; 0x2660 <combination_check+0xce>
		return 4;
    2656:	84 e0       	ldi	r24, 0x04	; 4
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	2f c0       	rjmp	.+94     	; 0x26be <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 1 && combination[2] == 1)//five combination
    2660:	80 91 91 01 	lds	r24, 0x0191
    2664:	90 91 92 01 	lds	r25, 0x0192
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	99 f4       	brne	.+38     	; 0x2692 <combination_check+0x100>
    266c:	80 91 93 01 	lds	r24, 0x0193
    2670:	90 91 94 01 	lds	r25, 0x0194
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	91 05       	cpc	r25, r1
    2678:	61 f4       	brne	.+24     	; 0x2692 <combination_check+0x100>
    267a:	80 91 95 01 	lds	r24, 0x0195
    267e:	90 91 96 01 	lds	r25, 0x0196
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	91 05       	cpc	r25, r1
    2686:	29 f4       	brne	.+10     	; 0x2692 <combination_check+0x100>
		return 5;
    2688:	85 e0       	ldi	r24, 0x05	; 5
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	16 c0       	rjmp	.+44     	; 0x26be <combination_check+0x12c>
	else if(combination[0] == 0 && combination[1] == 0 && combination[2] == 0)//error combination
    2692:	80 91 91 01 	lds	r24, 0x0191
    2696:	90 91 92 01 	lds	r25, 0x0192
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	79 f4       	brne	.+30     	; 0x26bc <combination_check+0x12a>
    269e:	80 91 93 01 	lds	r24, 0x0193
    26a2:	90 91 94 01 	lds	r25, 0x0194
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	49 f4       	brne	.+18     	; 0x26bc <combination_check+0x12a>
    26aa:	80 91 95 01 	lds	r24, 0x0195
    26ae:	90 91 96 01 	lds	r25, 0x0196
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	19 f4       	brne	.+6      	; 0x26bc <combination_check+0x12a>
		return 0;
    26b6:	1a 82       	std	Y+2, r1	; 0x02
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <combination_check+0x12c>
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <combination_check+0x134>
}
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	9c 83       	std	Y+4, r25	; 0x04
    26c4:	8b 83       	std	Y+3, r24	; 0x03
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <camera>:
int camera(void)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	a0 97       	sbiw	r28, 0x20	; 32
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a8 ec       	ldi	r26, 0xC8	; 200
    26f2:	b2 e4       	ldi	r27, 0x42	; 66
    26f4:	89 8f       	std	Y+25, r24	; 0x19
    26f6:	9a 8f       	std	Y+26, r25	; 0x1a
    26f8:	ab 8f       	std	Y+27, r26	; 0x1b
    26fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	69 8d       	ldd	r22, Y+25	; 0x19
    26fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e4       	ldi	r19, 0x40	; 64
    2708:	4c e1       	ldi	r20, 0x1C	; 28
    270a:	55 e4       	ldi	r21, 0x45	; 69
    270c:	e1 d5       	rcall	.+3010   	; 0x32d0 <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8d 8b       	std	Y+21, r24	; 0x15
    2714:	9e 8b       	std	Y+22, r25	; 0x16
    2716:	af 8b       	std	Y+23, r26	; 0x17
    2718:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    271a:	6d 89       	ldd	r22, Y+21	; 0x15
    271c:	7e 89       	ldd	r23, Y+22	; 0x16
    271e:	8f 89       	ldd	r24, Y+23	; 0x17
    2720:	98 8d       	ldd	r25, Y+24	; 0x18
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	7f d4       	rcall	.+2302   	; 0x302a <__cmpsf2>
    272c:	88 23       	and	r24, r24
    272e:	2c f4       	brge	.+10     	; 0x273a <camera+0x62>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	3b c0       	rjmp	.+118    	; 0x27b0 <camera+0xd8>
	else if (__tmp > 65535)
    273a:	6d 89       	ldd	r22, Y+21	; 0x15
    273c:	7e 89       	ldd	r23, Y+22	; 0x16
    273e:	8f 89       	ldd	r24, Y+23	; 0x17
    2740:	98 8d       	ldd	r25, Y+24	; 0x18
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	be d5       	rcall	.+2940   	; 0x32c8 <__gesf2>
    274c:	18 16       	cp	r1, r24
    274e:	3c f5       	brge	.+78     	; 0x279e <camera+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2750:	69 8d       	ldd	r22, Y+25	; 0x19
    2752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	b7 d5       	rcall	.+2926   	; 0x32d0 <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	d0 d4       	rcall	.+2464   	; 0x310c <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <camera+0xbc>
    2776:	8a ef       	ldi	r24, 0xFA	; 250
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
    277e:	89 89       	ldd	r24, Y+17	; 0x11
    2780:	9a 89       	ldd	r25, Y+18	; 0x12
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <camera+0xaa>
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <camera+0x9e>
    279c:	13 c0       	rjmp	.+38     	; 0x27c4 <camera+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	b2 d4       	rcall	.+2404   	; 0x310c <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	98 8b       	std	Y+16, r25	; 0x10
    27b6:	8f 87       	std	Y+15, r24	; 0x0f
    27b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ba:	98 89       	ldd	r25, Y+16	; 0x10
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <camera+0xe4>
    27c0:	98 8b       	std	Y+16, r25	; 0x10
    27c2:	8f 87       	std	Y+15, r24	; 0x0f
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    27c4:	1e 8e       	std	Y+30, r1	; 0x1e
    27c6:	1d 8e       	std	Y+29, r1	; 0x1d
    27c8:	8f c0       	rjmp	.+286    	; 0x28e8 <camera+0x210>
	{
		combination[0] = gpio_read_pin(9);
    27ca:	89 e0       	ldi	r24, 0x09	; 9
    27cc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <gpio_read_pin>
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	90 93 92 01 	sts	0x0192, r25
    27d8:	80 93 91 01 	sts	0x0191, r24
		combination[1] = gpio_read_pin(10);
    27dc:	8a e0       	ldi	r24, 0x0A	; 10
    27de:	0e 94 ca 0a 	call	0x1594	; 0x1594 <gpio_read_pin>
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	90 93 94 01 	sts	0x0194, r25
    27ea:	80 93 93 01 	sts	0x0193, r24
		combination[2] = gpio_read_pin(11);
    27ee:	8b e0       	ldi	r24, 0x0B	; 11
    27f0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <gpio_read_pin>
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	90 93 96 01 	sts	0x0196, r25
    27fc:	80 93 95 01 	sts	0x0195, r24
		
		comb = combination_check();
    2800:	c8 de       	rcall	.-624    	; 0x2592 <combination_check>
    2802:	98 a3       	std	Y+32, r25	; 0x20
    2804:	8f 8f       	std	Y+31, r24	; 0x1f
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a8 ec       	ldi	r26, 0xC8	; 200
    280c:	b2 e4       	ldi	r27, 0x42	; 66
    280e:	8b 87       	std	Y+11, r24	; 0x0b
    2810:	9c 87       	std	Y+12, r25	; 0x0c
    2812:	ad 87       	std	Y+13, r26	; 0x0d
    2814:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	6b 85       	ldd	r22, Y+11	; 0x0b
    2818:	7c 85       	ldd	r23, Y+12	; 0x0c
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e4       	ldi	r19, 0x40	; 64
    2822:	4c e1       	ldi	r20, 0x1C	; 28
    2824:	55 e4       	ldi	r21, 0x45	; 69
    2826:	54 d5       	rcall	.+2728   	; 0x32d0 <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8f 83       	std	Y+7, r24	; 0x07
    282e:	98 87       	std	Y+8, r25	; 0x08
    2830:	a9 87       	std	Y+9, r26	; 0x09
    2832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	f2 d3       	rcall	.+2020   	; 0x302a <__cmpsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <camera+0x17c>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	3b c0       	rjmp	.+118    	; 0x28ca <camera+0x1f2>
	else if (__tmp > 65535)
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	31 d5       	rcall	.+2658   	; 0x32c8 <__gesf2>
    2866:	18 16       	cp	r1, r24
    2868:	3c f5       	brge	.+78     	; 0x28b8 <camera+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	6b 85       	ldd	r22, Y+11	; 0x0b
    286c:	7c 85       	ldd	r23, Y+12	; 0x0c
    286e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2870:	9e 85       	ldd	r25, Y+14	; 0x0e
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	2a d5       	rcall	.+2644   	; 0x32d0 <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	43 d4       	rcall	.+2182   	; 0x310c <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <camera+0x1d6>
    2890:	8a ef       	ldi	r24, 0xFA	; 250
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <camera+0x1c4>
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <camera+0x1b8>
    28b6:	13 c0       	rjmp	.+38     	; 0x28de <camera+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	25 d4       	rcall	.+2122   	; 0x310c <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <camera+0x1fe>
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
}
int camera(void)
{
	int comb,i;
	_delay_ms(100);
	for(i=0;i<5;i++)
    28de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	9e 8f       	std	Y+30, r25	; 0x1e
    28e6:	8d 8f       	std	Y+29, r24	; 0x1d
    28e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ec:	85 30       	cpi	r24, 0x05	; 5
    28ee:	91 05       	cpc	r25, r1
    28f0:	0c f4       	brge	.+2      	; 0x28f4 <camera+0x21c>
    28f2:	6b cf       	rjmp	.-298    	; 0x27ca <camera+0xf2>
		combination[2] = gpio_read_pin(11);
		
		comb = combination_check();
		_delay_ms(100);	
	}
	return comb;
    28f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f6:	98 a1       	ldd	r25, Y+32	; 0x20
}
    28f8:	a0 96       	adiw	r28, 0x20	; 32
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <timer_init>:


void timer_init(unsigned int freq)
{
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <timer_init+0xa>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    291c:	e0 e8       	ldi	r30, 0x80	; 128
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2922:	e1 e8       	ldi	r30, 0x81	; 129
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	89 e0       	ldi	r24, 0x09	; 9
    2928:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    292a:	08 e8       	ldi	r16, 0x88	; 136
    292c:	10 e0       	ldi	r17, 0x00	; 0
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	cc 01       	movw	r24, r24
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	13 d4       	rcall	.+2086   	; 0x3164 <__floatunsisf>
    293e:	9b 01       	movw	r18, r22
    2940:	ac 01       	movw	r20, r24
    2942:	60 e8       	ldi	r22, 0x80	; 128
    2944:	76 e9       	ldi	r23, 0x96	; 150
    2946:	88 e1       	ldi	r24, 0x18	; 24
    2948:	9b e4       	ldi	r25, 0x4B	; 75
    294a:	73 d3       	rcall	.+1766   	; 0x3032 <__divsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	02 d3       	rcall	.+1540   	; 0x2f62 <__addsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	d2 d3       	rcall	.+1956   	; 0x310c <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	f8 01       	movw	r30, r16
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2972:	ef e6       	ldi	r30, 0x6F	; 111
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	80 83       	st	Z, r24

	SREG |= 0x80;
    297a:	af e5       	ldi	r26, 0x5F	; 95
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	ef e5       	ldi	r30, 0x5F	; 95
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	80 68       	ori	r24, 0x80	; 128
    2986:	8c 93       	st	X, r24
}
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2996:	1f 92       	push	r1
    2998:	0f 92       	push	r0
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	0f 92       	push	r0
    299e:	00 90 5b 00 	lds	r0, 0x005B
    29a2:	0f 92       	push	r0
    29a4:	11 24       	eor	r1, r1
    29a6:	2f 93       	push	r18
    29a8:	3f 93       	push	r19
    29aa:	4f 93       	push	r20
    29ac:	5f 93       	push	r21
    29ae:	6f 93       	push	r22
    29b0:	7f 93       	push	r23
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    29c6:	80 91 8a 01 	lds	r24, 0x018A
    29ca:	90 91 8b 01 	lds	r25, 0x018B
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	29 f0       	breq	.+10     	; 0x29dc <__vector_12+0x46>
        timer_callback();
    29d2:	e0 91 8a 01 	lds	r30, 0x018A
    29d6:	f0 91 8b 01 	lds	r31, 0x018B
    29da:	09 95       	icall
	if(sys_time >= 80000)
    29dc:	80 91 8c 01 	lds	r24, 0x018C
    29e0:	90 91 8d 01 	lds	r25, 0x018D
    29e4:	a0 91 8e 01 	lds	r26, 0x018E
    29e8:	b0 91 8f 01 	lds	r27, 0x018F
    29ec:	80 38       	cpi	r24, 0x80	; 128
    29ee:	28 e3       	ldi	r18, 0x38	; 56
    29f0:	92 07       	cpc	r25, r18
    29f2:	21 e0       	ldi	r18, 0x01	; 1
    29f4:	a2 07       	cpc	r26, r18
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	b2 07       	cpc	r27, r18
    29fa:	10 f0       	brcs	.+4      	; 0x2a00 <__vector_12+0x6a>
		actuators_umbrella();
    29fc:	0e 94 80 03 	call	0x700	; 0x700 <actuators_umbrella>
	sys_time++;
    2a00:	80 91 8c 01 	lds	r24, 0x018C
    2a04:	90 91 8d 01 	lds	r25, 0x018D
    2a08:	a0 91 8e 01 	lds	r26, 0x018E
    2a0c:	b0 91 8f 01 	lds	r27, 0x018F
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	a1 1d       	adc	r26, r1
    2a14:	b1 1d       	adc	r27, r1
    2a16:	80 93 8c 01 	sts	0x018C, r24
    2a1a:	90 93 8d 01 	sts	0x018D, r25
    2a1e:	a0 93 8e 01 	sts	0x018E, r26
    2a22:	b0 93 8f 01 	sts	0x018F, r27
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	00 92 5b 00 	sts	0x005B, r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	0f 90       	pop	r0
    2a4e:	1f 90       	pop	r1
    2a50:	18 95       	reti

00002a52 <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2a5a:	10 92 8c 01 	sts	0x018C, r1
    2a5e:	10 92 8d 01 	sts	0x018D, r1
    2a62:	10 92 8e 01 	sts	0x018E, r1
    2a66:	10 92 8f 01 	sts	0x018F, r1
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <system_set_match_started>:
void system_set_match_started(void)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 90 01 	sts	0x0190, r24
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2a8c:	80 91 8c 01 	lds	r24, 0x018C
    2a90:	90 91 8d 01 	lds	r25, 0x018D
    2a94:	a0 91 8e 01 	lds	r26, 0x018E
    2a98:	b0 91 8f 01 	lds	r27, 0x018F
}
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <return_active_state>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
uint8_t return_active_state(void)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	return active_state;
    2aae:	80 91 9e 02 	lds	r24, 0x029E
    2ab2:	90 91 9f 02 	lds	r25, 0x029F
}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <system_init>:
void system_init(void)
{	
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	6c 97       	sbiw	r28, 0x1c	; 28
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    2ad0:	8a e4       	ldi	r24, 0x4A	; 74
    2ad2:	9b e0       	ldi	r25, 0x0B	; 11
    2ad4:	4c dd       	rcall	.-1384   	; 0x256e <timer_register_callback>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a8 ec       	ldi	r26, 0xC8	; 200
    2adc:	b2 e4       	ldi	r27, 0x42	; 66
    2ade:	89 8f       	std	Y+25, r24	; 0x19
    2ae0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e4       	ldi	r19, 0x40	; 64
    2af2:	4c e1       	ldi	r20, 0x1C	; 28
    2af4:	55 e4       	ldi	r21, 0x45	; 69
    2af6:	ec d3       	rcall	.+2008   	; 0x32d0 <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	9e 8b       	std	Y+22, r25	; 0x16
    2b00:	af 8b       	std	Y+23, r26	; 0x17
    2b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	8a d2       	rcall	.+1300   	; 0x302a <__cmpsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <system_init+0x68>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 8b       	std	Y+20, r25	; 0x14
    2b20:	8b 8b       	std	Y+19, r24	; 0x13
    2b22:	3b c0       	rjmp	.+118    	; 0x2b9a <system_init+0xde>
	else if (__tmp > 65535)
    2b24:	6d 89       	ldd	r22, Y+21	; 0x15
    2b26:	7e 89       	ldd	r23, Y+22	; 0x16
    2b28:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	c9 d3       	rcall	.+1938   	; 0x32c8 <__gesf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	3c f5       	brge	.+78     	; 0x2b88 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	c2 d3       	rcall	.+1924   	; 0x32d0 <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	db d2       	rcall	.+1462   	; 0x310c <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9c 8b       	std	Y+20, r25	; 0x14
    2b5c:	8b 8b       	std	Y+19, r24	; 0x13
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <system_init+0xc2>
    2b60:	8a ef       	ldi	r24, 0xFA	; 250
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9a 8b       	std	Y+18, r25	; 0x12
    2b66:	89 8b       	std	Y+17, r24	; 0x11
    2b68:	89 89       	ldd	r24, Y+17	; 0x11
    2b6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <system_init+0xb0>
    2b70:	9a 8b       	std	Y+18, r25	; 0x12
    2b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	9c 89       	ldd	r25, Y+20	; 0x14
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b80:	9c 89       	ldd	r25, Y+20	; 0x14
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	69 f7       	brne	.-38     	; 0x2b60 <system_init+0xa4>
    2b86:	13 c0       	rjmp	.+38     	; 0x2bae <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b90:	bd d2       	rcall	.+1402   	; 0x310c <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9c 8b       	std	Y+20, r25	; 0x14
    2b98:	8b 8b       	std	Y+19, r24	; 0x13
    2b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9e:	98 8b       	std	Y+16, r25	; 0x10
    2ba0:	8f 87       	std	Y+15, r24	; 0x0f
    2ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba4:	98 89       	ldd	r25, Y+16	; 0x10
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <system_init+0xea>
    2baa:	98 8b       	std	Y+16, r25	; 0x10
    2bac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);							//jumper
    2bae:	88 e0       	ldi	r24, 0x08	; 8
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(9,GPIO_DIRECTION_INPUT,true);							//prekidac za stranu
    2bb8:	89 e0       	ldi	r24, 0x09	; 9
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(10,GPIO_DIRECTION_INPUT,true);						//camera 0 position
    2bc2:	8a e0       	ldi	r24, 0x0A	; 10
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(11,GPIO_DIRECTION_INPUT,true);						//camera 1 position
    2bcc:	8b e0       	ldi	r24, 0x0B	; 11
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(12,GPIO_DIRECTION_INPUT,true);						//camera 2 position
    2bd6:	8c e0       	ldi	r24, 0x0C	; 12
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	//oc2a

	//testing for leds
	gpio_register_pin(0,GPIO_DIRECTION_OUTPUT,false);						//led tactic 1
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(1,GPIO_DIRECTION_OUTPUT,false);						//led tactic 2
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(2,GPIO_DIRECTION_OUTPUT,false);						//led tactic 3
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(3,GPIO_DIRECTION_OUTPUT,false);						//led tactic 4
    2bfe:	83 e0       	ldi	r24, 0x03	; 3
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	gpio_register_pin(4,GPIO_DIRECTION_OUTPUT,false);						//led tactic 5
    2c08:	84 e0       	ldi	r24, 0x04	; 4
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <gpio_register_pin>
	
	DDRG = 0xff;
    2c12:	e3 e3       	ldi	r30, 0x33	; 51
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	8f ef       	ldi	r24, 0xFF	; 255
    2c18:	80 83       	st	Z, r24
	PORTG = 0xff;
    2c1a:	e4 e3       	ldi	r30, 0x34	; 52
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
	servo_init(50);
    2c22:	82 e3       	ldi	r24, 0x32	; 50
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 c9 01 	call	0x392	; 0x392 <servo_init>
	timer_init(1000);
    2c2a:	88 ee       	ldi	r24, 0xE8	; 232
    2c2c:	93 e0       	ldi	r25, 0x03	; 3
    2c2e:	6d de       	rcall	.-806    	; 0x290a <timer_init>
	CAN_Init(1);
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 a9 07 	call	0xf52	; 0xf52 <CAN_Init>

	actuators_setup();
    2c36:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <actuators_setup>
    2c3a:	6c c0       	rjmp	.+216    	; 0x2d14 <system_init+0x258>
	
	while(gpio_read_pin(8))
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e2       	ldi	r26, 0x20	; 32
    2c42:	b1 e4       	ldi	r27, 0x41	; 65
    2c44:	8b 87       	std	Y+11, r24	; 0x0b
    2c46:	9c 87       	std	Y+12, r25	; 0x0c
    2c48:	ad 87       	std	Y+13, r26	; 0x0d
    2c4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e4       	ldi	r19, 0x40	; 64
    2c58:	4c e1       	ldi	r20, 0x1C	; 28
    2c5a:	55 e4       	ldi	r21, 0x45	; 69
    2c5c:	39 d3       	rcall	.+1650   	; 0x32d0 <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8f 83       	std	Y+7, r24	; 0x07
    2c64:	98 87       	std	Y+8, r25	; 0x08
    2c66:	a9 87       	std	Y+9, r26	; 0x09
    2c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6c:	78 85       	ldd	r23, Y+8	; 0x08
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	d7 d1       	rcall	.+942    	; 0x302a <__cmpsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <system_init+0x1ce>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	3b c0       	rjmp	.+118    	; 0x2d00 <system_init+0x244>
	else if (__tmp > 65535)
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	16 d3       	rcall	.+1580   	; 0x32c8 <__gesf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	3c f5       	brge	.+78     	; 0x2cee <system_init+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0f d3       	rcall	.+1566   	; 0x32d0 <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	28 d2       	rcall	.+1104   	; 0x310c <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8d 83       	std	Y+5, r24	; 0x05
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <system_init+0x228>
    2cc6:	8a ef       	ldi	r24, 0xFA	; 250
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <system_init+0x216>
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <system_init+0x20a>
    2cec:	13 c0       	rjmp	.+38     	; 0x2d14 <system_init+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf0:	78 85       	ldd	r23, Y+8	; 0x08
    2cf2:	89 85       	ldd	r24, Y+9	; 0x09
    2cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf6:	0a d2       	rcall	.+1044   	; 0x310c <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <system_init+0x250>
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	88 e0       	ldi	r24, 0x08	; 8
    2d16:	0e 94 ca 0a 	call	0x1594	; 0x1594 <gpio_read_pin>
    2d1a:	88 23       	and	r24, r24
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <system_init+0x264>
    2d1e:	8e cf       	rjmp	.-228    	; 0x2c3c <system_init+0x180>
		_delay_ms(10);
	PORTG = 0x00;
    2d20:	e4 e3       	ldi	r30, 0x34	; 52
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	10 82       	st	Z, r1
	system_reset_system_time();
    2d26:	95 de       	rcall	.-726    	; 0x2a52 <system_reset_system_time>
	system_set_match_started();
    2d28:	a3 de       	rcall	.-698    	; 0x2a70 <system_set_match_started>
    2d2a:	6c 96       	adiw	r28, 0x1c	; 28
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <__vector_23>:
    2d3c:	1f 92       	push	r1
    2d3e:	0f 92       	push	r0
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	0f 92       	push	r0
    2d44:	00 90 5b 00 	lds	r0, 0x005B
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	80 91 95 01 	lds	r24, 0x0195
    2d64:	88 23       	and	r24, r24
    2d66:	d9 f0       	breq	.+54     	; 0x2d9e <__vector_23+0x62>
    2d68:	80 91 95 01 	lds	r24, 0x0195
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	80 93 95 01 	sts	0x0195, r24
    2d72:	a6 ec       	ldi	r26, 0xC6	; 198
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	80 91 96 01 	lds	r24, 0x0196
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e3 56       	subi	r30, 0x63	; 99
    2d82:	fe 4f       	sbci	r31, 0xFE	; 254
    2d84:	80 81       	ld	r24, Z
    2d86:	8c 93       	st	X, r24
    2d88:	80 91 96 01 	lds	r24, 0x0196
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	80 93 96 01 	sts	0x0196, r24
    2d92:	80 91 96 01 	lds	r24, 0x0196
    2d96:	80 34       	cpi	r24, 0x40	; 64
    2d98:	11 f4       	brne	.+4      	; 0x2d9e <__vector_23+0x62>
    2d9a:	10 92 96 01 	sts	0x0196, r1
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	0f 90       	pop	r0
    2db0:	00 92 5b 00 	sts	0x005B, r0
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <__vector_21>:
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	00 90 5b 00 	lds	r0, 0x005B
    2dca:	0f 92       	push	r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	2f 93       	push	r18
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	ef 93       	push	r30
    2dd6:	ff 93       	push	r31
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	e0 ec       	ldi	r30, 0xC0	; 192
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	8c 71       	andi	r24, 0x1C	; 28
    2df2:	90 70       	andi	r25, 0x00	; 0
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	d9 f4       	brne	.+54     	; 0x2e2e <__vector_21+0x70>
    2df8:	80 91 97 01 	lds	r24, 0x0197
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	e6 ec       	ldi	r30, 0xC6	; 198
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	20 81       	ld	r18, Z
    2e06:	fc 01       	movw	r30, r24
    2e08:	e3 52       	subi	r30, 0x23	; 35
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	20 83       	st	Z, r18
    2e0e:	80 91 97 01 	lds	r24, 0x0197
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	80 93 97 01 	sts	0x0197, r24
    2e18:	80 91 97 01 	lds	r24, 0x0197
    2e1c:	80 34       	cpi	r24, 0x40	; 64
    2e1e:	11 f4       	brne	.+4      	; 0x2e24 <__vector_21+0x66>
    2e20:	10 92 97 01 	sts	0x0197, r1
    2e24:	80 91 98 01 	lds	r24, 0x0198
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	80 93 98 01 	sts	0x0198, r24
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	ff 91       	pop	r31
    2e36:	ef 91       	pop	r30
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	2f 91       	pop	r18
    2e3e:	0f 90       	pop	r0
    2e40:	00 92 5b 00 	sts	0x005B, r0
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <__vector_34>:
    2e4e:	1f 92       	push	r1
    2e50:	0f 92       	push	r0
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	0f 92       	push	r0
    2e56:	00 90 5b 00 	lds	r0, 0x005B
    2e5a:	0f 92       	push	r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	80 91 99 01 	lds	r24, 0x0199
    2e76:	88 23       	and	r24, r24
    2e78:	d9 f0       	breq	.+54     	; 0x2eb0 <__vector_34+0x62>
    2e7a:	80 91 99 01 	lds	r24, 0x0199
    2e7e:	81 50       	subi	r24, 0x01	; 1
    2e80:	80 93 99 01 	sts	0x0199, r24
    2e84:	ae ec       	ldi	r26, 0xCE	; 206
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	80 91 9a 01 	lds	r24, 0x019A
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	fc 01       	movw	r30, r24
    2e92:	e3 5e       	subi	r30, 0xE3	; 227
    2e94:	fd 4f       	sbci	r31, 0xFD	; 253
    2e96:	80 81       	ld	r24, Z
    2e98:	8c 93       	st	X, r24
    2e9a:	80 91 9a 01 	lds	r24, 0x019A
    2e9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ea0:	80 93 9a 01 	sts	0x019A, r24
    2ea4:	80 91 9a 01 	lds	r24, 0x019A
    2ea8:	80 34       	cpi	r24, 0x40	; 64
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <__vector_34+0x62>
    2eac:	10 92 9a 01 	sts	0x019A, r1
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	ff 91       	pop	r31
    2eb6:	ef 91       	pop	r30
    2eb8:	bf 91       	pop	r27
    2eba:	af 91       	pop	r26
    2ebc:	9f 91       	pop	r25
    2ebe:	8f 91       	pop	r24
    2ec0:	0f 90       	pop	r0
    2ec2:	00 92 5b 00 	sts	0x005B, r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	0f 90       	pop	r0
    2ecc:	1f 90       	pop	r1
    2ece:	18 95       	reti

00002ed0 <__vector_32>:
    2ed0:	1f 92       	push	r1
    2ed2:	0f 92       	push	r0
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	0f 92       	push	r0
    2ed8:	00 90 5b 00 	lds	r0, 0x005B
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	2f 93       	push	r18
    2ee2:	8f 93       	push	r24
    2ee4:	9f 93       	push	r25
    2ee6:	ef 93       	push	r30
    2ee8:	ff 93       	push	r31
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	0f 92       	push	r0
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	e8 ec       	ldi	r30, 0xC8	; 200
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	8c 71       	andi	r24, 0x1C	; 28
    2f04:	90 70       	andi	r25, 0x00	; 0
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	d9 f4       	brne	.+54     	; 0x2f40 <__vector_32+0x70>
    2f0a:	80 91 9b 01 	lds	r24, 0x019B
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	ee ec       	ldi	r30, 0xCE	; 206
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	20 81       	ld	r18, Z
    2f18:	fc 01       	movw	r30, r24
    2f1a:	e3 5a       	subi	r30, 0xA3	; 163
    2f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f1e:	20 83       	st	Z, r18
    2f20:	80 91 9b 01 	lds	r24, 0x019B
    2f24:	8f 5f       	subi	r24, 0xFF	; 255
    2f26:	80 93 9b 01 	sts	0x019B, r24
    2f2a:	80 91 9b 01 	lds	r24, 0x019B
    2f2e:	80 34       	cpi	r24, 0x40	; 64
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <__vector_32+0x66>
    2f32:	10 92 9b 01 	sts	0x019B, r1
    2f36:	80 91 9c 01 	lds	r24, 0x019C
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	80 93 9c 01 	sts	0x019C, r24
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	ff 91       	pop	r31
    2f48:	ef 91       	pop	r30
    2f4a:	9f 91       	pop	r25
    2f4c:	8f 91       	pop	r24
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	00 92 5b 00 	sts	0x005B, r0
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__subsf3>:
    2f60:	50 58       	subi	r21, 0x80	; 128

00002f62 <__addsf3>:
    2f62:	bb 27       	eor	r27, r27
    2f64:	aa 27       	eor	r26, r26
    2f66:	0e d0       	rcall	.+28     	; 0x2f84 <__addsf3x>
    2f68:	75 c1       	rjmp	.+746    	; 0x3254 <__fp_round>
    2f6a:	66 d1       	rcall	.+716    	; 0x3238 <__fp_pscA>
    2f6c:	30 f0       	brcs	.+12     	; 0x2f7a <__addsf3+0x18>
    2f6e:	6b d1       	rcall	.+726    	; 0x3246 <__fp_pscB>
    2f70:	20 f0       	brcs	.+8      	; 0x2f7a <__addsf3+0x18>
    2f72:	31 f4       	brne	.+12     	; 0x2f80 <__addsf3+0x1e>
    2f74:	9f 3f       	cpi	r25, 0xFF	; 255
    2f76:	11 f4       	brne	.+4      	; 0x2f7c <__addsf3+0x1a>
    2f78:	1e f4       	brtc	.+6      	; 0x2f80 <__addsf3+0x1e>
    2f7a:	5b c1       	rjmp	.+694    	; 0x3232 <__fp_nan>
    2f7c:	0e f4       	brtc	.+2      	; 0x2f80 <__addsf3+0x1e>
    2f7e:	e0 95       	com	r30
    2f80:	e7 fb       	bst	r30, 7
    2f82:	51 c1       	rjmp	.+674    	; 0x3226 <__fp_inf>

00002f84 <__addsf3x>:
    2f84:	e9 2f       	mov	r30, r25
    2f86:	77 d1       	rcall	.+750    	; 0x3276 <__fp_split3>
    2f88:	80 f3       	brcs	.-32     	; 0x2f6a <__addsf3+0x8>
    2f8a:	ba 17       	cp	r27, r26
    2f8c:	62 07       	cpc	r22, r18
    2f8e:	73 07       	cpc	r23, r19
    2f90:	84 07       	cpc	r24, r20
    2f92:	95 07       	cpc	r25, r21
    2f94:	18 f0       	brcs	.+6      	; 0x2f9c <__addsf3x+0x18>
    2f96:	71 f4       	brne	.+28     	; 0x2fb4 <__addsf3x+0x30>
    2f98:	9e f5       	brtc	.+102    	; 0x3000 <__addsf3x+0x7c>
    2f9a:	8f c1       	rjmp	.+798    	; 0x32ba <__fp_zero>
    2f9c:	0e f4       	brtc	.+2      	; 0x2fa0 <__addsf3x+0x1c>
    2f9e:	e0 95       	com	r30
    2fa0:	0b 2e       	mov	r0, r27
    2fa2:	ba 2f       	mov	r27, r26
    2fa4:	a0 2d       	mov	r26, r0
    2fa6:	0b 01       	movw	r0, r22
    2fa8:	b9 01       	movw	r22, r18
    2faa:	90 01       	movw	r18, r0
    2fac:	0c 01       	movw	r0, r24
    2fae:	ca 01       	movw	r24, r20
    2fb0:	a0 01       	movw	r20, r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	ff 27       	eor	r31, r31
    2fb6:	59 1b       	sub	r21, r25
    2fb8:	99 f0       	breq	.+38     	; 0x2fe0 <__addsf3x+0x5c>
    2fba:	59 3f       	cpi	r21, 0xF9	; 249
    2fbc:	50 f4       	brcc	.+20     	; 0x2fd2 <__addsf3x+0x4e>
    2fbe:	50 3e       	cpi	r21, 0xE0	; 224
    2fc0:	68 f1       	brcs	.+90     	; 0x301c <__addsf3x+0x98>
    2fc2:	1a 16       	cp	r1, r26
    2fc4:	f0 40       	sbci	r31, 0x00	; 0
    2fc6:	a2 2f       	mov	r26, r18
    2fc8:	23 2f       	mov	r18, r19
    2fca:	34 2f       	mov	r19, r20
    2fcc:	44 27       	eor	r20, r20
    2fce:	58 5f       	subi	r21, 0xF8	; 248
    2fd0:	f3 cf       	rjmp	.-26     	; 0x2fb8 <__addsf3x+0x34>
    2fd2:	46 95       	lsr	r20
    2fd4:	37 95       	ror	r19
    2fd6:	27 95       	ror	r18
    2fd8:	a7 95       	ror	r26
    2fda:	f0 40       	sbci	r31, 0x00	; 0
    2fdc:	53 95       	inc	r21
    2fde:	c9 f7       	brne	.-14     	; 0x2fd2 <__addsf3x+0x4e>
    2fe0:	7e f4       	brtc	.+30     	; 0x3000 <__addsf3x+0x7c>
    2fe2:	1f 16       	cp	r1, r31
    2fe4:	ba 0b       	sbc	r27, r26
    2fe6:	62 0b       	sbc	r22, r18
    2fe8:	73 0b       	sbc	r23, r19
    2fea:	84 0b       	sbc	r24, r20
    2fec:	ba f0       	brmi	.+46     	; 0x301c <__addsf3x+0x98>
    2fee:	91 50       	subi	r25, 0x01	; 1
    2ff0:	a1 f0       	breq	.+40     	; 0x301a <__addsf3x+0x96>
    2ff2:	ff 0f       	add	r31, r31
    2ff4:	bb 1f       	adc	r27, r27
    2ff6:	66 1f       	adc	r22, r22
    2ff8:	77 1f       	adc	r23, r23
    2ffa:	88 1f       	adc	r24, r24
    2ffc:	c2 f7       	brpl	.-16     	; 0x2fee <__addsf3x+0x6a>
    2ffe:	0e c0       	rjmp	.+28     	; 0x301c <__addsf3x+0x98>
    3000:	ba 0f       	add	r27, r26
    3002:	62 1f       	adc	r22, r18
    3004:	73 1f       	adc	r23, r19
    3006:	84 1f       	adc	r24, r20
    3008:	48 f4       	brcc	.+18     	; 0x301c <__addsf3x+0x98>
    300a:	87 95       	ror	r24
    300c:	77 95       	ror	r23
    300e:	67 95       	ror	r22
    3010:	b7 95       	ror	r27
    3012:	f7 95       	ror	r31
    3014:	9e 3f       	cpi	r25, 0xFE	; 254
    3016:	08 f0       	brcs	.+2      	; 0x301a <__addsf3x+0x96>
    3018:	b3 cf       	rjmp	.-154    	; 0x2f80 <__addsf3+0x1e>
    301a:	93 95       	inc	r25
    301c:	88 0f       	add	r24, r24
    301e:	08 f0       	brcs	.+2      	; 0x3022 <__addsf3x+0x9e>
    3020:	99 27       	eor	r25, r25
    3022:	ee 0f       	add	r30, r30
    3024:	97 95       	ror	r25
    3026:	87 95       	ror	r24
    3028:	08 95       	ret

0000302a <__cmpsf2>:
    302a:	d9 d0       	rcall	.+434    	; 0x31de <__fp_cmp>
    302c:	08 f4       	brcc	.+2      	; 0x3030 <__cmpsf2+0x6>
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	08 95       	ret

00003032 <__divsf3>:
    3032:	0c d0       	rcall	.+24     	; 0x304c <__divsf3x>
    3034:	0f c1       	rjmp	.+542    	; 0x3254 <__fp_round>
    3036:	07 d1       	rcall	.+526    	; 0x3246 <__fp_pscB>
    3038:	40 f0       	brcs	.+16     	; 0x304a <__divsf3+0x18>
    303a:	fe d0       	rcall	.+508    	; 0x3238 <__fp_pscA>
    303c:	30 f0       	brcs	.+12     	; 0x304a <__divsf3+0x18>
    303e:	21 f4       	brne	.+8      	; 0x3048 <__divsf3+0x16>
    3040:	5f 3f       	cpi	r21, 0xFF	; 255
    3042:	19 f0       	breq	.+6      	; 0x304a <__divsf3+0x18>
    3044:	f0 c0       	rjmp	.+480    	; 0x3226 <__fp_inf>
    3046:	51 11       	cpse	r21, r1
    3048:	39 c1       	rjmp	.+626    	; 0x32bc <__fp_szero>
    304a:	f3 c0       	rjmp	.+486    	; 0x3232 <__fp_nan>

0000304c <__divsf3x>:
    304c:	14 d1       	rcall	.+552    	; 0x3276 <__fp_split3>
    304e:	98 f3       	brcs	.-26     	; 0x3036 <__divsf3+0x4>

00003050 <__divsf3_pse>:
    3050:	99 23       	and	r25, r25
    3052:	c9 f3       	breq	.-14     	; 0x3046 <__divsf3+0x14>
    3054:	55 23       	and	r21, r21
    3056:	b1 f3       	breq	.-20     	; 0x3044 <__divsf3+0x12>
    3058:	95 1b       	sub	r25, r21
    305a:	55 0b       	sbc	r21, r21
    305c:	bb 27       	eor	r27, r27
    305e:	aa 27       	eor	r26, r26
    3060:	62 17       	cp	r22, r18
    3062:	73 07       	cpc	r23, r19
    3064:	84 07       	cpc	r24, r20
    3066:	38 f0       	brcs	.+14     	; 0x3076 <__divsf3_pse+0x26>
    3068:	9f 5f       	subi	r25, 0xFF	; 255
    306a:	5f 4f       	sbci	r21, 0xFF	; 255
    306c:	22 0f       	add	r18, r18
    306e:	33 1f       	adc	r19, r19
    3070:	44 1f       	adc	r20, r20
    3072:	aa 1f       	adc	r26, r26
    3074:	a9 f3       	breq	.-22     	; 0x3060 <__divsf3_pse+0x10>
    3076:	33 d0       	rcall	.+102    	; 0x30de <__divsf3_pse+0x8e>
    3078:	0e 2e       	mov	r0, r30
    307a:	3a f0       	brmi	.+14     	; 0x308a <__divsf3_pse+0x3a>
    307c:	e0 e8       	ldi	r30, 0x80	; 128
    307e:	30 d0       	rcall	.+96     	; 0x30e0 <__divsf3_pse+0x90>
    3080:	91 50       	subi	r25, 0x01	; 1
    3082:	50 40       	sbci	r21, 0x00	; 0
    3084:	e6 95       	lsr	r30
    3086:	00 1c       	adc	r0, r0
    3088:	ca f7       	brpl	.-14     	; 0x307c <__divsf3_pse+0x2c>
    308a:	29 d0       	rcall	.+82     	; 0x30de <__divsf3_pse+0x8e>
    308c:	fe 2f       	mov	r31, r30
    308e:	27 d0       	rcall	.+78     	; 0x30de <__divsf3_pse+0x8e>
    3090:	66 0f       	add	r22, r22
    3092:	77 1f       	adc	r23, r23
    3094:	88 1f       	adc	r24, r24
    3096:	bb 1f       	adc	r27, r27
    3098:	26 17       	cp	r18, r22
    309a:	37 07       	cpc	r19, r23
    309c:	48 07       	cpc	r20, r24
    309e:	ab 07       	cpc	r26, r27
    30a0:	b0 e8       	ldi	r27, 0x80	; 128
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <__divsf3_pse+0x56>
    30a4:	bb 0b       	sbc	r27, r27
    30a6:	80 2d       	mov	r24, r0
    30a8:	bf 01       	movw	r22, r30
    30aa:	ff 27       	eor	r31, r31
    30ac:	93 58       	subi	r25, 0x83	; 131
    30ae:	5f 4f       	sbci	r21, 0xFF	; 255
    30b0:	2a f0       	brmi	.+10     	; 0x30bc <__divsf3_pse+0x6c>
    30b2:	9e 3f       	cpi	r25, 0xFE	; 254
    30b4:	51 05       	cpc	r21, r1
    30b6:	68 f0       	brcs	.+26     	; 0x30d2 <__divsf3_pse+0x82>
    30b8:	b6 c0       	rjmp	.+364    	; 0x3226 <__fp_inf>
    30ba:	00 c1       	rjmp	.+512    	; 0x32bc <__fp_szero>
    30bc:	5f 3f       	cpi	r21, 0xFF	; 255
    30be:	ec f3       	brlt	.-6      	; 0x30ba <__divsf3_pse+0x6a>
    30c0:	98 3e       	cpi	r25, 0xE8	; 232
    30c2:	dc f3       	brlt	.-10     	; 0x30ba <__divsf3_pse+0x6a>
    30c4:	86 95       	lsr	r24
    30c6:	77 95       	ror	r23
    30c8:	67 95       	ror	r22
    30ca:	b7 95       	ror	r27
    30cc:	f7 95       	ror	r31
    30ce:	9f 5f       	subi	r25, 0xFF	; 255
    30d0:	c9 f7       	brne	.-14     	; 0x30c4 <__divsf3_pse+0x74>
    30d2:	88 0f       	add	r24, r24
    30d4:	91 1d       	adc	r25, r1
    30d6:	96 95       	lsr	r25
    30d8:	87 95       	ror	r24
    30da:	97 f9       	bld	r25, 7
    30dc:	08 95       	ret
    30de:	e1 e0       	ldi	r30, 0x01	; 1
    30e0:	66 0f       	add	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	bb 1f       	adc	r27, r27
    30e8:	62 17       	cp	r22, r18
    30ea:	73 07       	cpc	r23, r19
    30ec:	84 07       	cpc	r24, r20
    30ee:	ba 07       	cpc	r27, r26
    30f0:	20 f0       	brcs	.+8      	; 0x30fa <__divsf3_pse+0xaa>
    30f2:	62 1b       	sub	r22, r18
    30f4:	73 0b       	sbc	r23, r19
    30f6:	84 0b       	sbc	r24, r20
    30f8:	ba 0b       	sbc	r27, r26
    30fa:	ee 1f       	adc	r30, r30
    30fc:	88 f7       	brcc	.-30     	; 0x30e0 <__divsf3_pse+0x90>
    30fe:	e0 95       	com	r30
    3100:	08 95       	ret

00003102 <__fixsfsi>:
    3102:	04 d0       	rcall	.+8      	; 0x310c <__fixunssfsi>
    3104:	68 94       	set
    3106:	b1 11       	cpse	r27, r1
    3108:	d9 c0       	rjmp	.+434    	; 0x32bc <__fp_szero>
    310a:	08 95       	ret

0000310c <__fixunssfsi>:
    310c:	bc d0       	rcall	.+376    	; 0x3286 <__fp_splitA>
    310e:	88 f0       	brcs	.+34     	; 0x3132 <__fixunssfsi+0x26>
    3110:	9f 57       	subi	r25, 0x7F	; 127
    3112:	90 f0       	brcs	.+36     	; 0x3138 <__fixunssfsi+0x2c>
    3114:	b9 2f       	mov	r27, r25
    3116:	99 27       	eor	r25, r25
    3118:	b7 51       	subi	r27, 0x17	; 23
    311a:	a0 f0       	brcs	.+40     	; 0x3144 <__fixunssfsi+0x38>
    311c:	d1 f0       	breq	.+52     	; 0x3152 <__fixunssfsi+0x46>
    311e:	66 0f       	add	r22, r22
    3120:	77 1f       	adc	r23, r23
    3122:	88 1f       	adc	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	1a f0       	brmi	.+6      	; 0x312e <__fixunssfsi+0x22>
    3128:	ba 95       	dec	r27
    312a:	c9 f7       	brne	.-14     	; 0x311e <__fixunssfsi+0x12>
    312c:	12 c0       	rjmp	.+36     	; 0x3152 <__fixunssfsi+0x46>
    312e:	b1 30       	cpi	r27, 0x01	; 1
    3130:	81 f0       	breq	.+32     	; 0x3152 <__fixunssfsi+0x46>
    3132:	c3 d0       	rcall	.+390    	; 0x32ba <__fp_zero>
    3134:	b1 e0       	ldi	r27, 0x01	; 1
    3136:	08 95       	ret
    3138:	c0 c0       	rjmp	.+384    	; 0x32ba <__fp_zero>
    313a:	67 2f       	mov	r22, r23
    313c:	78 2f       	mov	r23, r24
    313e:	88 27       	eor	r24, r24
    3140:	b8 5f       	subi	r27, 0xF8	; 248
    3142:	39 f0       	breq	.+14     	; 0x3152 <__fixunssfsi+0x46>
    3144:	b9 3f       	cpi	r27, 0xF9	; 249
    3146:	cc f3       	brlt	.-14     	; 0x313a <__fixunssfsi+0x2e>
    3148:	86 95       	lsr	r24
    314a:	77 95       	ror	r23
    314c:	67 95       	ror	r22
    314e:	b3 95       	inc	r27
    3150:	d9 f7       	brne	.-10     	; 0x3148 <__fixunssfsi+0x3c>
    3152:	3e f4       	brtc	.+14     	; 0x3162 <__fixunssfsi+0x56>
    3154:	90 95       	com	r25
    3156:	80 95       	com	r24
    3158:	70 95       	com	r23
    315a:	61 95       	neg	r22
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	8f 4f       	sbci	r24, 0xFF	; 255
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	08 95       	ret

00003164 <__floatunsisf>:
    3164:	e8 94       	clt
    3166:	09 c0       	rjmp	.+18     	; 0x317a <__floatsisf+0x12>

00003168 <__floatsisf>:
    3168:	97 fb       	bst	r25, 7
    316a:	3e f4       	brtc	.+14     	; 0x317a <__floatsisf+0x12>
    316c:	90 95       	com	r25
    316e:	80 95       	com	r24
    3170:	70 95       	com	r23
    3172:	61 95       	neg	r22
    3174:	7f 4f       	sbci	r23, 0xFF	; 255
    3176:	8f 4f       	sbci	r24, 0xFF	; 255
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	99 23       	and	r25, r25
    317c:	a9 f0       	breq	.+42     	; 0x31a8 <__floatsisf+0x40>
    317e:	f9 2f       	mov	r31, r25
    3180:	96 e9       	ldi	r25, 0x96	; 150
    3182:	bb 27       	eor	r27, r27
    3184:	93 95       	inc	r25
    3186:	f6 95       	lsr	r31
    3188:	87 95       	ror	r24
    318a:	77 95       	ror	r23
    318c:	67 95       	ror	r22
    318e:	b7 95       	ror	r27
    3190:	f1 11       	cpse	r31, r1
    3192:	f8 cf       	rjmp	.-16     	; 0x3184 <__floatsisf+0x1c>
    3194:	fa f4       	brpl	.+62     	; 0x31d4 <__floatsisf+0x6c>
    3196:	bb 0f       	add	r27, r27
    3198:	11 f4       	brne	.+4      	; 0x319e <__floatsisf+0x36>
    319a:	60 ff       	sbrs	r22, 0
    319c:	1b c0       	rjmp	.+54     	; 0x31d4 <__floatsisf+0x6c>
    319e:	6f 5f       	subi	r22, 0xFF	; 255
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	8f 4f       	sbci	r24, 0xFF	; 255
    31a4:	9f 4f       	sbci	r25, 0xFF	; 255
    31a6:	16 c0       	rjmp	.+44     	; 0x31d4 <__floatsisf+0x6c>
    31a8:	88 23       	and	r24, r24
    31aa:	11 f0       	breq	.+4      	; 0x31b0 <__floatsisf+0x48>
    31ac:	96 e9       	ldi	r25, 0x96	; 150
    31ae:	11 c0       	rjmp	.+34     	; 0x31d2 <__floatsisf+0x6a>
    31b0:	77 23       	and	r23, r23
    31b2:	21 f0       	breq	.+8      	; 0x31bc <__floatsisf+0x54>
    31b4:	9e e8       	ldi	r25, 0x8E	; 142
    31b6:	87 2f       	mov	r24, r23
    31b8:	76 2f       	mov	r23, r22
    31ba:	05 c0       	rjmp	.+10     	; 0x31c6 <__floatsisf+0x5e>
    31bc:	66 23       	and	r22, r22
    31be:	71 f0       	breq	.+28     	; 0x31dc <__floatsisf+0x74>
    31c0:	96 e8       	ldi	r25, 0x86	; 134
    31c2:	86 2f       	mov	r24, r22
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	2a f0       	brmi	.+10     	; 0x31d4 <__floatsisf+0x6c>
    31ca:	9a 95       	dec	r25
    31cc:	66 0f       	add	r22, r22
    31ce:	77 1f       	adc	r23, r23
    31d0:	88 1f       	adc	r24, r24
    31d2:	da f7       	brpl	.-10     	; 0x31ca <__floatsisf+0x62>
    31d4:	88 0f       	add	r24, r24
    31d6:	96 95       	lsr	r25
    31d8:	87 95       	ror	r24
    31da:	97 f9       	bld	r25, 7
    31dc:	08 95       	ret

000031de <__fp_cmp>:
    31de:	99 0f       	add	r25, r25
    31e0:	00 08       	sbc	r0, r0
    31e2:	55 0f       	add	r21, r21
    31e4:	aa 0b       	sbc	r26, r26
    31e6:	e0 e8       	ldi	r30, 0x80	; 128
    31e8:	fe ef       	ldi	r31, 0xFE	; 254
    31ea:	16 16       	cp	r1, r22
    31ec:	17 06       	cpc	r1, r23
    31ee:	e8 07       	cpc	r30, r24
    31f0:	f9 07       	cpc	r31, r25
    31f2:	c0 f0       	brcs	.+48     	; 0x3224 <__fp_cmp+0x46>
    31f4:	12 16       	cp	r1, r18
    31f6:	13 06       	cpc	r1, r19
    31f8:	e4 07       	cpc	r30, r20
    31fa:	f5 07       	cpc	r31, r21
    31fc:	98 f0       	brcs	.+38     	; 0x3224 <__fp_cmp+0x46>
    31fe:	62 1b       	sub	r22, r18
    3200:	73 0b       	sbc	r23, r19
    3202:	84 0b       	sbc	r24, r20
    3204:	95 0b       	sbc	r25, r21
    3206:	39 f4       	brne	.+14     	; 0x3216 <__fp_cmp+0x38>
    3208:	0a 26       	eor	r0, r26
    320a:	61 f0       	breq	.+24     	; 0x3224 <__fp_cmp+0x46>
    320c:	23 2b       	or	r18, r19
    320e:	24 2b       	or	r18, r20
    3210:	25 2b       	or	r18, r21
    3212:	21 f4       	brne	.+8      	; 0x321c <__fp_cmp+0x3e>
    3214:	08 95       	ret
    3216:	0a 26       	eor	r0, r26
    3218:	09 f4       	brne	.+2      	; 0x321c <__fp_cmp+0x3e>
    321a:	a1 40       	sbci	r26, 0x01	; 1
    321c:	a6 95       	lsr	r26
    321e:	8f ef       	ldi	r24, 0xFF	; 255
    3220:	81 1d       	adc	r24, r1
    3222:	81 1d       	adc	r24, r1
    3224:	08 95       	ret

00003226 <__fp_inf>:
    3226:	97 f9       	bld	r25, 7
    3228:	9f 67       	ori	r25, 0x7F	; 127
    322a:	80 e8       	ldi	r24, 0x80	; 128
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	08 95       	ret

00003232 <__fp_nan>:
    3232:	9f ef       	ldi	r25, 0xFF	; 255
    3234:	80 ec       	ldi	r24, 0xC0	; 192
    3236:	08 95       	ret

00003238 <__fp_pscA>:
    3238:	00 24       	eor	r0, r0
    323a:	0a 94       	dec	r0
    323c:	16 16       	cp	r1, r22
    323e:	17 06       	cpc	r1, r23
    3240:	18 06       	cpc	r1, r24
    3242:	09 06       	cpc	r0, r25
    3244:	08 95       	ret

00003246 <__fp_pscB>:
    3246:	00 24       	eor	r0, r0
    3248:	0a 94       	dec	r0
    324a:	12 16       	cp	r1, r18
    324c:	13 06       	cpc	r1, r19
    324e:	14 06       	cpc	r1, r20
    3250:	05 06       	cpc	r0, r21
    3252:	08 95       	ret

00003254 <__fp_round>:
    3254:	09 2e       	mov	r0, r25
    3256:	03 94       	inc	r0
    3258:	00 0c       	add	r0, r0
    325a:	11 f4       	brne	.+4      	; 0x3260 <__fp_round+0xc>
    325c:	88 23       	and	r24, r24
    325e:	52 f0       	brmi	.+20     	; 0x3274 <__fp_round+0x20>
    3260:	bb 0f       	add	r27, r27
    3262:	40 f4       	brcc	.+16     	; 0x3274 <__fp_round+0x20>
    3264:	bf 2b       	or	r27, r31
    3266:	11 f4       	brne	.+4      	; 0x326c <__fp_round+0x18>
    3268:	60 ff       	sbrs	r22, 0
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <__fp_round+0x20>
    326c:	6f 5f       	subi	r22, 0xFF	; 255
    326e:	7f 4f       	sbci	r23, 0xFF	; 255
    3270:	8f 4f       	sbci	r24, 0xFF	; 255
    3272:	9f 4f       	sbci	r25, 0xFF	; 255
    3274:	08 95       	ret

00003276 <__fp_split3>:
    3276:	57 fd       	sbrc	r21, 7
    3278:	90 58       	subi	r25, 0x80	; 128
    327a:	44 0f       	add	r20, r20
    327c:	55 1f       	adc	r21, r21
    327e:	59 f0       	breq	.+22     	; 0x3296 <__fp_splitA+0x10>
    3280:	5f 3f       	cpi	r21, 0xFF	; 255
    3282:	71 f0       	breq	.+28     	; 0x32a0 <__fp_splitA+0x1a>
    3284:	47 95       	ror	r20

00003286 <__fp_splitA>:
    3286:	88 0f       	add	r24, r24
    3288:	97 fb       	bst	r25, 7
    328a:	99 1f       	adc	r25, r25
    328c:	61 f0       	breq	.+24     	; 0x32a6 <__fp_splitA+0x20>
    328e:	9f 3f       	cpi	r25, 0xFF	; 255
    3290:	79 f0       	breq	.+30     	; 0x32b0 <__fp_splitA+0x2a>
    3292:	87 95       	ror	r24
    3294:	08 95       	ret
    3296:	12 16       	cp	r1, r18
    3298:	13 06       	cpc	r1, r19
    329a:	14 06       	cpc	r1, r20
    329c:	55 1f       	adc	r21, r21
    329e:	f2 cf       	rjmp	.-28     	; 0x3284 <__fp_split3+0xe>
    32a0:	46 95       	lsr	r20
    32a2:	f1 df       	rcall	.-30     	; 0x3286 <__fp_splitA>
    32a4:	08 c0       	rjmp	.+16     	; 0x32b6 <__fp_splitA+0x30>
    32a6:	16 16       	cp	r1, r22
    32a8:	17 06       	cpc	r1, r23
    32aa:	18 06       	cpc	r1, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	f1 cf       	rjmp	.-30     	; 0x3292 <__fp_splitA+0xc>
    32b0:	86 95       	lsr	r24
    32b2:	71 05       	cpc	r23, r1
    32b4:	61 05       	cpc	r22, r1
    32b6:	08 94       	sec
    32b8:	08 95       	ret

000032ba <__fp_zero>:
    32ba:	e8 94       	clt

000032bc <__fp_szero>:
    32bc:	bb 27       	eor	r27, r27
    32be:	66 27       	eor	r22, r22
    32c0:	77 27       	eor	r23, r23
    32c2:	cb 01       	movw	r24, r22
    32c4:	97 f9       	bld	r25, 7
    32c6:	08 95       	ret

000032c8 <__gesf2>:
    32c8:	8a df       	rcall	.-236    	; 0x31de <__fp_cmp>
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <__gesf2+0x6>
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	08 95       	ret

000032d0 <__mulsf3>:
    32d0:	0b d0       	rcall	.+22     	; 0x32e8 <__mulsf3x>
    32d2:	c0 cf       	rjmp	.-128    	; 0x3254 <__fp_round>
    32d4:	b1 df       	rcall	.-158    	; 0x3238 <__fp_pscA>
    32d6:	28 f0       	brcs	.+10     	; 0x32e2 <__mulsf3+0x12>
    32d8:	b6 df       	rcall	.-148    	; 0x3246 <__fp_pscB>
    32da:	18 f0       	brcs	.+6      	; 0x32e2 <__mulsf3+0x12>
    32dc:	95 23       	and	r25, r21
    32de:	09 f0       	breq	.+2      	; 0x32e2 <__mulsf3+0x12>
    32e0:	a2 cf       	rjmp	.-188    	; 0x3226 <__fp_inf>
    32e2:	a7 cf       	rjmp	.-178    	; 0x3232 <__fp_nan>
    32e4:	11 24       	eor	r1, r1
    32e6:	ea cf       	rjmp	.-44     	; 0x32bc <__fp_szero>

000032e8 <__mulsf3x>:
    32e8:	c6 df       	rcall	.-116    	; 0x3276 <__fp_split3>
    32ea:	a0 f3       	brcs	.-24     	; 0x32d4 <__mulsf3+0x4>

000032ec <__mulsf3_pse>:
    32ec:	95 9f       	mul	r25, r21
    32ee:	d1 f3       	breq	.-12     	; 0x32e4 <__mulsf3+0x14>
    32f0:	95 0f       	add	r25, r21
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	55 1f       	adc	r21, r21
    32f6:	62 9f       	mul	r22, r18
    32f8:	f0 01       	movw	r30, r0
    32fa:	72 9f       	mul	r23, r18
    32fc:	bb 27       	eor	r27, r27
    32fe:	f0 0d       	add	r31, r0
    3300:	b1 1d       	adc	r27, r1
    3302:	63 9f       	mul	r22, r19
    3304:	aa 27       	eor	r26, r26
    3306:	f0 0d       	add	r31, r0
    3308:	b1 1d       	adc	r27, r1
    330a:	aa 1f       	adc	r26, r26
    330c:	64 9f       	mul	r22, r20
    330e:	66 27       	eor	r22, r22
    3310:	b0 0d       	add	r27, r0
    3312:	a1 1d       	adc	r26, r1
    3314:	66 1f       	adc	r22, r22
    3316:	82 9f       	mul	r24, r18
    3318:	22 27       	eor	r18, r18
    331a:	b0 0d       	add	r27, r0
    331c:	a1 1d       	adc	r26, r1
    331e:	62 1f       	adc	r22, r18
    3320:	73 9f       	mul	r23, r19
    3322:	b0 0d       	add	r27, r0
    3324:	a1 1d       	adc	r26, r1
    3326:	62 1f       	adc	r22, r18
    3328:	83 9f       	mul	r24, r19
    332a:	a0 0d       	add	r26, r0
    332c:	61 1d       	adc	r22, r1
    332e:	22 1f       	adc	r18, r18
    3330:	74 9f       	mul	r23, r20
    3332:	33 27       	eor	r19, r19
    3334:	a0 0d       	add	r26, r0
    3336:	61 1d       	adc	r22, r1
    3338:	23 1f       	adc	r18, r19
    333a:	84 9f       	mul	r24, r20
    333c:	60 0d       	add	r22, r0
    333e:	21 1d       	adc	r18, r1
    3340:	82 2f       	mov	r24, r18
    3342:	76 2f       	mov	r23, r22
    3344:	6a 2f       	mov	r22, r26
    3346:	11 24       	eor	r1, r1
    3348:	9f 57       	subi	r25, 0x7F	; 127
    334a:	50 40       	sbci	r21, 0x00	; 0
    334c:	8a f0       	brmi	.+34     	; 0x3370 <__mulsf3_pse+0x84>
    334e:	e1 f0       	breq	.+56     	; 0x3388 <__mulsf3_pse+0x9c>
    3350:	88 23       	and	r24, r24
    3352:	4a f0       	brmi	.+18     	; 0x3366 <__mulsf3_pse+0x7a>
    3354:	ee 0f       	add	r30, r30
    3356:	ff 1f       	adc	r31, r31
    3358:	bb 1f       	adc	r27, r27
    335a:	66 1f       	adc	r22, r22
    335c:	77 1f       	adc	r23, r23
    335e:	88 1f       	adc	r24, r24
    3360:	91 50       	subi	r25, 0x01	; 1
    3362:	50 40       	sbci	r21, 0x00	; 0
    3364:	a9 f7       	brne	.-22     	; 0x3350 <__mulsf3_pse+0x64>
    3366:	9e 3f       	cpi	r25, 0xFE	; 254
    3368:	51 05       	cpc	r21, r1
    336a:	70 f0       	brcs	.+28     	; 0x3388 <__mulsf3_pse+0x9c>
    336c:	5c cf       	rjmp	.-328    	; 0x3226 <__fp_inf>
    336e:	a6 cf       	rjmp	.-180    	; 0x32bc <__fp_szero>
    3370:	5f 3f       	cpi	r21, 0xFF	; 255
    3372:	ec f3       	brlt	.-6      	; 0x336e <__mulsf3_pse+0x82>
    3374:	98 3e       	cpi	r25, 0xE8	; 232
    3376:	dc f3       	brlt	.-10     	; 0x336e <__mulsf3_pse+0x82>
    3378:	86 95       	lsr	r24
    337a:	77 95       	ror	r23
    337c:	67 95       	ror	r22
    337e:	b7 95       	ror	r27
    3380:	f7 95       	ror	r31
    3382:	e7 95       	ror	r30
    3384:	9f 5f       	subi	r25, 0xFF	; 255
    3386:	c1 f7       	brne	.-16     	; 0x3378 <__mulsf3_pse+0x8c>
    3388:	fe 2b       	or	r31, r30
    338a:	88 0f       	add	r24, r24
    338c:	91 1d       	adc	r25, r1
    338e:	96 95       	lsr	r25
    3390:	87 95       	ror	r24
    3392:	97 f9       	bld	r25, 7
    3394:	08 95       	ret

00003396 <calloc>:
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	68 9f       	mul	r22, r24
    33a0:	80 01       	movw	r16, r0
    33a2:	69 9f       	mul	r22, r25
    33a4:	10 0d       	add	r17, r0
    33a6:	78 9f       	mul	r23, r24
    33a8:	10 0d       	add	r17, r0
    33aa:	11 24       	eor	r1, r1
    33ac:	c8 01       	movw	r24, r16
    33ae:	0d d0       	rcall	.+26     	; 0x33ca <malloc>
    33b0:	ec 01       	movw	r28, r24
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	21 f0       	breq	.+8      	; 0x33be <calloc+0x28>
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	a8 01       	movw	r20, r16
    33bc:	0b d1       	rcall	.+534    	; 0x35d4 <memset>
    33be:	ce 01       	movw	r24, r28
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	08 95       	ret

000033ca <malloc>:
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	bc 01       	movw	r22, r24
    33d0:	82 30       	cpi	r24, 0x02	; 2
    33d2:	91 05       	cpc	r25, r1
    33d4:	10 f4       	brcc	.+4      	; 0x33da <malloc+0x10>
    33d6:	62 e0       	ldi	r22, 0x02	; 2
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	a0 91 a3 02 	lds	r26, 0x02A3
    33de:	b0 91 a4 02 	lds	r27, 0x02A4
    33e2:	ed 01       	movw	r28, r26
    33e4:	e0 e0       	ldi	r30, 0x00	; 0
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	21 c0       	rjmp	.+66     	; 0x3430 <malloc+0x66>
    33ee:	88 81       	ld	r24, Y
    33f0:	99 81       	ldd	r25, Y+1	; 0x01
    33f2:	86 17       	cp	r24, r22
    33f4:	97 07       	cpc	r25, r23
    33f6:	69 f4       	brne	.+26     	; 0x3412 <malloc+0x48>
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	9b 81       	ldd	r25, Y+3	; 0x03
    33fc:	30 97       	sbiw	r30, 0x00	; 0
    33fe:	19 f0       	breq	.+6      	; 0x3406 <malloc+0x3c>
    3400:	93 83       	std	Z+3, r25	; 0x03
    3402:	82 83       	std	Z+2, r24	; 0x02
    3404:	04 c0       	rjmp	.+8      	; 0x340e <malloc+0x44>
    3406:	90 93 a4 02 	sts	0x02A4, r25
    340a:	80 93 a3 02 	sts	0x02A3, r24
    340e:	fe 01       	movw	r30, r28
    3410:	34 c0       	rjmp	.+104    	; 0x347a <malloc+0xb0>
    3412:	68 17       	cp	r22, r24
    3414:	79 07       	cpc	r23, r25
    3416:	38 f4       	brcc	.+14     	; 0x3426 <malloc+0x5c>
    3418:	41 15       	cp	r20, r1
    341a:	51 05       	cpc	r21, r1
    341c:	19 f0       	breq	.+6      	; 0x3424 <malloc+0x5a>
    341e:	84 17       	cp	r24, r20
    3420:	95 07       	cpc	r25, r21
    3422:	08 f4       	brcc	.+2      	; 0x3426 <malloc+0x5c>
    3424:	ac 01       	movw	r20, r24
    3426:	fe 01       	movw	r30, r28
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	9b 81       	ldd	r25, Y+3	; 0x03
    342c:	9c 01       	movw	r18, r24
    342e:	e9 01       	movw	r28, r18
    3430:	20 97       	sbiw	r28, 0x00	; 0
    3432:	e9 f6       	brne	.-70     	; 0x33ee <malloc+0x24>
    3434:	41 15       	cp	r20, r1
    3436:	51 05       	cpc	r21, r1
    3438:	a9 f1       	breq	.+106    	; 0x34a4 <malloc+0xda>
    343a:	ca 01       	movw	r24, r20
    343c:	86 1b       	sub	r24, r22
    343e:	97 0b       	sbc	r25, r23
    3440:	04 97       	sbiw	r24, 0x04	; 4
    3442:	08 f4       	brcc	.+2      	; 0x3446 <malloc+0x7c>
    3444:	ba 01       	movw	r22, r20
    3446:	e0 e0       	ldi	r30, 0x00	; 0
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	2a c0       	rjmp	.+84     	; 0x34a0 <malloc+0xd6>
    344c:	8d 91       	ld	r24, X+
    344e:	9c 91       	ld	r25, X
    3450:	11 97       	sbiw	r26, 0x01	; 1
    3452:	84 17       	cp	r24, r20
    3454:	95 07       	cpc	r25, r21
    3456:	f9 f4       	brne	.+62     	; 0x3496 <malloc+0xcc>
    3458:	64 17       	cp	r22, r20
    345a:	75 07       	cpc	r23, r21
    345c:	81 f4       	brne	.+32     	; 0x347e <malloc+0xb4>
    345e:	12 96       	adiw	r26, 0x02	; 2
    3460:	8d 91       	ld	r24, X+
    3462:	9c 91       	ld	r25, X
    3464:	13 97       	sbiw	r26, 0x03	; 3
    3466:	30 97       	sbiw	r30, 0x00	; 0
    3468:	19 f0       	breq	.+6      	; 0x3470 <malloc+0xa6>
    346a:	93 83       	std	Z+3, r25	; 0x03
    346c:	82 83       	std	Z+2, r24	; 0x02
    346e:	04 c0       	rjmp	.+8      	; 0x3478 <malloc+0xae>
    3470:	90 93 a4 02 	sts	0x02A4, r25
    3474:	80 93 a3 02 	sts	0x02A3, r24
    3478:	fd 01       	movw	r30, r26
    347a:	32 96       	adiw	r30, 0x02	; 2
    347c:	4f c0       	rjmp	.+158    	; 0x351c <malloc+0x152>
    347e:	ca 01       	movw	r24, r20
    3480:	86 1b       	sub	r24, r22
    3482:	97 0b       	sbc	r25, r23
    3484:	fd 01       	movw	r30, r26
    3486:	e8 0f       	add	r30, r24
    3488:	f9 1f       	adc	r31, r25
    348a:	61 93       	st	Z+, r22
    348c:	71 93       	st	Z+, r23
    348e:	02 97       	sbiw	r24, 0x02	; 2
    3490:	8d 93       	st	X+, r24
    3492:	9c 93       	st	X, r25
    3494:	43 c0       	rjmp	.+134    	; 0x351c <malloc+0x152>
    3496:	fd 01       	movw	r30, r26
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	9c 01       	movw	r18, r24
    349e:	d9 01       	movw	r26, r18
    34a0:	10 97       	sbiw	r26, 0x00	; 0
    34a2:	a1 f6       	brne	.-88     	; 0x344c <malloc+0x82>
    34a4:	80 91 a1 02 	lds	r24, 0x02A1
    34a8:	90 91 a2 02 	lds	r25, 0x02A2
    34ac:	89 2b       	or	r24, r25
    34ae:	41 f4       	brne	.+16     	; 0x34c0 <malloc+0xf6>
    34b0:	80 91 02 01 	lds	r24, 0x0102
    34b4:	90 91 03 01 	lds	r25, 0x0103
    34b8:	90 93 a2 02 	sts	0x02A2, r25
    34bc:	80 93 a1 02 	sts	0x02A1, r24
    34c0:	40 91 04 01 	lds	r20, 0x0104
    34c4:	50 91 05 01 	lds	r21, 0x0105
    34c8:	41 15       	cp	r20, r1
    34ca:	51 05       	cpc	r21, r1
    34cc:	41 f4       	brne	.+16     	; 0x34de <malloc+0x114>
    34ce:	4d b7       	in	r20, 0x3d	; 61
    34d0:	5e b7       	in	r21, 0x3e	; 62
    34d2:	80 91 00 01 	lds	r24, 0x0100
    34d6:	90 91 01 01 	lds	r25, 0x0101
    34da:	48 1b       	sub	r20, r24
    34dc:	59 0b       	sbc	r21, r25
    34de:	20 91 a1 02 	lds	r18, 0x02A1
    34e2:	30 91 a2 02 	lds	r19, 0x02A2
    34e6:	24 17       	cp	r18, r20
    34e8:	35 07       	cpc	r19, r21
    34ea:	b0 f4       	brcc	.+44     	; 0x3518 <malloc+0x14e>
    34ec:	ca 01       	movw	r24, r20
    34ee:	82 1b       	sub	r24, r18
    34f0:	93 0b       	sbc	r25, r19
    34f2:	86 17       	cp	r24, r22
    34f4:	97 07       	cpc	r25, r23
    34f6:	80 f0       	brcs	.+32     	; 0x3518 <malloc+0x14e>
    34f8:	ab 01       	movw	r20, r22
    34fa:	4e 5f       	subi	r20, 0xFE	; 254
    34fc:	5f 4f       	sbci	r21, 0xFF	; 255
    34fe:	84 17       	cp	r24, r20
    3500:	95 07       	cpc	r25, r21
    3502:	50 f0       	brcs	.+20     	; 0x3518 <malloc+0x14e>
    3504:	42 0f       	add	r20, r18
    3506:	53 1f       	adc	r21, r19
    3508:	50 93 a2 02 	sts	0x02A2, r21
    350c:	40 93 a1 02 	sts	0x02A1, r20
    3510:	f9 01       	movw	r30, r18
    3512:	61 93       	st	Z+, r22
    3514:	71 93       	st	Z+, r23
    3516:	02 c0       	rjmp	.+4      	; 0x351c <malloc+0x152>
    3518:	e0 e0       	ldi	r30, 0x00	; 0
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	cf 01       	movw	r24, r30
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	08 95       	ret

00003524 <free>:
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	09 f4       	brne	.+2      	; 0x352e <free+0xa>
    352c:	50 c0       	rjmp	.+160    	; 0x35ce <free+0xaa>
    352e:	ec 01       	movw	r28, r24
    3530:	22 97       	sbiw	r28, 0x02	; 2
    3532:	1b 82       	std	Y+3, r1	; 0x03
    3534:	1a 82       	std	Y+2, r1	; 0x02
    3536:	a0 91 a3 02 	lds	r26, 0x02A3
    353a:	b0 91 a4 02 	lds	r27, 0x02A4
    353e:	10 97       	sbiw	r26, 0x00	; 0
    3540:	09 f1       	breq	.+66     	; 0x3584 <free+0x60>
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	ac 17       	cp	r26, r28
    3548:	bd 07       	cpc	r27, r29
    354a:	08 f1       	brcs	.+66     	; 0x358e <free+0x6a>
    354c:	bb 83       	std	Y+3, r27	; 0x03
    354e:	aa 83       	std	Y+2, r26	; 0x02
    3550:	fe 01       	movw	r30, r28
    3552:	21 91       	ld	r18, Z+
    3554:	31 91       	ld	r19, Z+
    3556:	e2 0f       	add	r30, r18
    3558:	f3 1f       	adc	r31, r19
    355a:	ae 17       	cp	r26, r30
    355c:	bf 07       	cpc	r27, r31
    355e:	79 f4       	brne	.+30     	; 0x357e <free+0x5a>
    3560:	8d 91       	ld	r24, X+
    3562:	9c 91       	ld	r25, X
    3564:	11 97       	sbiw	r26, 0x01	; 1
    3566:	28 0f       	add	r18, r24
    3568:	39 1f       	adc	r19, r25
    356a:	2e 5f       	subi	r18, 0xFE	; 254
    356c:	3f 4f       	sbci	r19, 0xFF	; 255
    356e:	39 83       	std	Y+1, r19	; 0x01
    3570:	28 83       	st	Y, r18
    3572:	12 96       	adiw	r26, 0x02	; 2
    3574:	8d 91       	ld	r24, X+
    3576:	9c 91       	ld	r25, X
    3578:	13 97       	sbiw	r26, 0x03	; 3
    357a:	9b 83       	std	Y+3, r25	; 0x03
    357c:	8a 83       	std	Y+2, r24	; 0x02
    357e:	41 15       	cp	r20, r1
    3580:	51 05       	cpc	r21, r1
    3582:	71 f4       	brne	.+28     	; 0x35a0 <free+0x7c>
    3584:	d0 93 a4 02 	sts	0x02A4, r29
    3588:	c0 93 a3 02 	sts	0x02A3, r28
    358c:	20 c0       	rjmp	.+64     	; 0x35ce <free+0xaa>
    358e:	12 96       	adiw	r26, 0x02	; 2
    3590:	8d 91       	ld	r24, X+
    3592:	9c 91       	ld	r25, X
    3594:	13 97       	sbiw	r26, 0x03	; 3
    3596:	ad 01       	movw	r20, r26
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	11 f0       	breq	.+4      	; 0x35a0 <free+0x7c>
    359c:	dc 01       	movw	r26, r24
    359e:	d3 cf       	rjmp	.-90     	; 0x3546 <free+0x22>
    35a0:	fa 01       	movw	r30, r20
    35a2:	d3 83       	std	Z+3, r29	; 0x03
    35a4:	c2 83       	std	Z+2, r28	; 0x02
    35a6:	21 91       	ld	r18, Z+
    35a8:	31 91       	ld	r19, Z+
    35aa:	e2 0f       	add	r30, r18
    35ac:	f3 1f       	adc	r31, r19
    35ae:	ce 17       	cp	r28, r30
    35b0:	df 07       	cpc	r29, r31
    35b2:	69 f4       	brne	.+26     	; 0x35ce <free+0xaa>
    35b4:	88 81       	ld	r24, Y
    35b6:	99 81       	ldd	r25, Y+1	; 0x01
    35b8:	28 0f       	add	r18, r24
    35ba:	39 1f       	adc	r19, r25
    35bc:	2e 5f       	subi	r18, 0xFE	; 254
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	fa 01       	movw	r30, r20
    35c2:	31 83       	std	Z+1, r19	; 0x01
    35c4:	20 83       	st	Z, r18
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ca:	93 83       	std	Z+3, r25	; 0x03
    35cc:	82 83       	std	Z+2, r24	; 0x02
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <memset>:
    35d4:	dc 01       	movw	r26, r24
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <memset+0x6>
    35d8:	6d 93       	st	X+, r22
    35da:	41 50       	subi	r20, 0x01	; 1
    35dc:	50 40       	sbci	r21, 0x00	; 0
    35de:	e0 f7       	brcc	.-8      	; 0x35d8 <memset+0x4>
    35e0:	08 95       	ret

000035e2 <_exit>:
    35e2:	f8 94       	cli

000035e4 <__stop_program>:
    35e4:	ff cf       	rjmp	.-2      	; 0x35e4 <__stop_program>
