
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001636  000016ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800106  00800106  000016d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ced  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e3  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da7  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00003d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  0000424e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2b c5       	rjmp	.+2646   	; 0xa88 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	a6 c2       	rjmp	.+1356   	; 0x596 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c6       	rjmp	.+3414   	; 0xdac <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c6       	rjmp	.+3274   	; 0xd28 <__vector_23>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c7       	rjmp	.+3654   	; 0xec8 <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c6       	rjmp	.+3514   	; 0xe44 <__vector_34>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e3       	ldi	r30, 0x36	; 54
      a8:	f6 e1       	ldi	r31, 0x16	; 22
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 30       	cpi	r26, 0x06	; 6
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 34       	cpi	r26, 0x4A	; 74
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"
#include "actuators.h"

int main()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	aa 97       	sbiw	r28, 0x2a	; 42
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	system_init();
      e6:	1f d5       	rcall	.+2622   	; 0xb26 <system_init>
	PORTG = 0xff;
      e8:	84 e3       	ldi	r24, 0x34	; 52
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	2f ef       	ldi	r18, 0xFF	; 255
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e8       	ldi	r25, 0x80	; 128
      f6:	ab eb       	ldi	r26, 0xBB	; 187
      f8:	b4 e4       	ldi	r27, 0x44	; 68
      fa:	89 83       	std	Y+1, r24	; 0x01
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	ab 83       	std	Y+3, r26	; 0x03
     100:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	69 81       	ldd	r22, Y+1	; 0x01
     10c:	7a 81       	ldd	r23, Y+2	; 0x02
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	9c 81       	ldd	r25, Y+4	; 0x04
     112:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     116:	dc 01       	movw	r26, r24
     118:	cb 01       	movw	r24, r22
     11a:	8d 83       	std	Y+5, r24	; 0x05
     11c:	9e 83       	std	Y+6, r25	; 0x06
     11e:	af 83       	std	Y+7, r26	; 0x07
     120:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	6d 81       	ldd	r22, Y+5	; 0x05
     12c:	7e 81       	ldd	r23, Y+6	; 0x06
     12e:	8f 81       	ldd	r24, Y+7	; 0x07
     130:	98 85       	ldd	r25, Y+8	; 0x08
     132:	7b d7       	rcall	.+3830   	; 0x102a <__cmpsf2>
     134:	88 23       	and	r24, r24
     136:	2c f4       	brge	.+10     	; 0x142 <main+0x70>
		__ticks = 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	9a 87       	std	Y+10, r25	; 0x0a
     13e:	89 87       	std	Y+9, r24	; 0x09
     140:	3d c0       	rjmp	.+122    	; 0x1bc <main+0xea>
	else if (__tmp > 65535)
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	3f ef       	ldi	r19, 0xFF	; 255
     146:	4f e7       	ldi	r20, 0x7F	; 127
     148:	57 e4       	ldi	r21, 0x47	; 71
     14a:	6d 81       	ldd	r22, Y+5	; 0x05
     14c:	7e 81       	ldd	r23, Y+6	; 0x06
     14e:	8f 81       	ldd	r24, Y+7	; 0x07
     150:	98 85       	ldd	r25, Y+8	; 0x08
     152:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     156:	18 16       	cp	r1, r24
     158:	44 f5       	brge	.+80     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e2       	ldi	r20, 0x20	; 32
     160:	51 e4       	ldi	r21, 0x41	; 65
     162:	69 81       	ldd	r22, Y+1	; 0x01
     164:	7a 81       	ldd	r23, Y+2	; 0x02
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     16e:	dc 01       	movw	r26, r24
     170:	cb 01       	movw	r24, r22
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	ca d7       	rcall	.+3988   	; 0x110c <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9c 87       	std	Y+12, r25	; 0x0c
     188:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18a:	8b 85       	ldd	r24, Y+11	; 0x0b
     18c:	9c 85       	ldd	r25, Y+12	; 0x0c
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9c 87       	std	Y+12, r25	; 0x0c
     194:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     196:	89 85       	ldd	r24, Y+9	; 0x09
     198:	9a 85       	ldd	r25, Y+10	; 0x0a
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9a 87       	std	Y+10, r25	; 0x0a
     19e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a0:	89 85       	ldd	r24, Y+9	; 0x09
     1a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a4:	89 2b       	or	r24, r25
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <main+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	6d 81       	ldd	r22, Y+5	; 0x05
     1ac:	7e 81       	ldd	r23, Y+6	; 0x06
     1ae:	8f 81       	ldd	r24, Y+7	; 0x07
     1b0:	98 85       	ldd	r25, Y+8	; 0x08
     1b2:	ac d7       	rcall	.+3928   	; 0x110c <__fixunssfsi>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9a 87       	std	Y+10, r25	; 0x0a
     1ba:	89 87       	std	Y+9, r24	; 0x09
     1bc:	89 85       	ldd	r24, Y+9	; 0x09
     1be:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c0:	9e 87       	std	Y+14, r25	; 0x0e
     1c2:	8d 87       	std	Y+13, r24	; 0x0d
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xf6>
     1cc:	9e 87       	std	Y+14, r25	; 0x0e
     1ce:	8d 87       	std	Y+13, r24	; 0x0d
	while(1)
	{
		_delay_ms(1500);
		servo_set_position(-40);
     1d0:	88 ed       	ldi	r24, 0xD8	; 216
     1d2:	a2 d1       	rcall	.+836    	; 0x518 <servo_set_position>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e8       	ldi	r25, 0x80	; 128
     1d8:	ab eb       	ldi	r26, 0xBB	; 187
     1da:	b4 e4       	ldi	r27, 0x44	; 68
     1dc:	8f 87       	std	Y+15, r24	; 0x0f
     1de:	98 8b       	std	Y+16, r25	; 0x10
     1e0:	a9 8b       	std	Y+17, r26	; 0x11
     1e2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e4       	ldi	r19, 0x40	; 64
     1e8:	4c e1       	ldi	r20, 0x1C	; 28
     1ea:	55 e4       	ldi	r21, 0x45	; 69
     1ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ee:	78 89       	ldd	r23, Y+16	; 0x10
     1f0:	89 89       	ldd	r24, Y+17	; 0x11
     1f2:	9a 89       	ldd	r25, Y+18	; 0x12
     1f4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	8b 8b       	std	Y+19, r24	; 0x13
     1fe:	9c 8b       	std	Y+20, r25	; 0x14
     200:	ad 8b       	std	Y+21, r26	; 0x15
     202:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e8       	ldi	r20, 0x80	; 128
     20a:	5f e3       	ldi	r21, 0x3F	; 63
     20c:	6b 89       	ldd	r22, Y+19	; 0x13
     20e:	7c 89       	ldd	r23, Y+20	; 0x14
     210:	8d 89       	ldd	r24, Y+21	; 0x15
     212:	9e 89       	ldd	r25, Y+22	; 0x16
     214:	0a d7       	rcall	.+3604   	; 0x102a <__cmpsf2>
     216:	88 23       	and	r24, r24
     218:	2c f4       	brge	.+10     	; 0x224 <main+0x152>
		__ticks = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	98 8f       	std	Y+24, r25	; 0x18
     220:	8f 8b       	std	Y+23, r24	; 0x17
     222:	3d c0       	rjmp	.+122    	; 0x29e <main+0x1cc>
	else if (__tmp > 65535)
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	3f ef       	ldi	r19, 0xFF	; 255
     228:	4f e7       	ldi	r20, 0x7F	; 127
     22a:	57 e4       	ldi	r21, 0x47	; 71
     22c:	6b 89       	ldd	r22, Y+19	; 0x13
     22e:	7c 89       	ldd	r23, Y+20	; 0x14
     230:	8d 89       	ldd	r24, Y+21	; 0x15
     232:	9e 89       	ldd	r25, Y+22	; 0x16
     234:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     238:	18 16       	cp	r1, r24
     23a:	44 f5       	brge	.+80     	; 0x28c <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 e2       	ldi	r20, 0x20	; 32
     242:	51 e4       	ldi	r21, 0x41	; 65
     244:	6f 85       	ldd	r22, Y+15	; 0x0f
     246:	78 89       	ldd	r23, Y+16	; 0x10
     248:	89 89       	ldd	r24, Y+17	; 0x11
     24a:	9a 89       	ldd	r25, Y+18	; 0x12
     24c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     250:	dc 01       	movw	r26, r24
     252:	cb 01       	movw	r24, r22
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	59 d7       	rcall	.+3762   	; 0x110c <__fixunssfsi>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
     25e:	98 8f       	std	Y+24, r25	; 0x18
     260:	8f 8b       	std	Y+23, r24	; 0x17
     262:	0f c0       	rjmp	.+30     	; 0x282 <main+0x1b0>
     264:	8a ef       	ldi	r24, 0xFA	; 250
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9a 8f       	std	Y+26, r25	; 0x1a
     26a:	89 8f       	std	Y+25, r24	; 0x19
     26c:	89 8d       	ldd	r24, Y+25	; 0x19
     26e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <main+0x19e>
     274:	9a 8f       	std	Y+26, r25	; 0x1a
     276:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     278:	8f 89       	ldd	r24, Y+23	; 0x17
     27a:	98 8d       	ldd	r25, Y+24	; 0x18
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	98 8f       	std	Y+24, r25	; 0x18
     280:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     282:	8f 89       	ldd	r24, Y+23	; 0x17
     284:	98 8d       	ldd	r25, Y+24	; 0x18
     286:	89 2b       	or	r24, r25
     288:	69 f7       	brne	.-38     	; 0x264 <main+0x192>
     28a:	13 c0       	rjmp	.+38     	; 0x2b2 <main+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     28c:	6b 89       	ldd	r22, Y+19	; 0x13
     28e:	7c 89       	ldd	r23, Y+20	; 0x14
     290:	8d 89       	ldd	r24, Y+21	; 0x15
     292:	9e 89       	ldd	r25, Y+22	; 0x16
     294:	3b d7       	rcall	.+3702   	; 0x110c <__fixunssfsi>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	98 8f       	std	Y+24, r25	; 0x18
     29c:	8f 8b       	std	Y+23, r24	; 0x17
     29e:	8f 89       	ldd	r24, Y+23	; 0x17
     2a0:	98 8d       	ldd	r25, Y+24	; 0x18
     2a2:	9c 8f       	std	Y+28, r25	; 0x1c
     2a4:	8b 8f       	std	Y+27, r24	; 0x1b
     2a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x1d8>
     2ae:	9c 8f       	std	Y+28, r25	; 0x1c
     2b0:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1500);
		servo_set_position(40);
     2b2:	88 e2       	ldi	r24, 0x28	; 40
     2b4:	31 d1       	rcall	.+610    	; 0x518 <servo_set_position>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e8       	ldi	r25, 0x80	; 128
     2ba:	ab eb       	ldi	r26, 0xBB	; 187
     2bc:	b4 e4       	ldi	r27, 0x44	; 68
     2be:	8d 8f       	std	Y+29, r24	; 0x1d
     2c0:	9e 8f       	std	Y+30, r25	; 0x1e
     2c2:	af 8f       	std	Y+31, r26	; 0x1f
     2c4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e4       	ldi	r19, 0x40	; 64
     2ca:	4c e1       	ldi	r20, 0x1C	; 28
     2cc:	55 e4       	ldi	r21, 0x45	; 69
     2ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2d4:	98 a1       	ldd	r25, Y+32	; 0x20
     2d6:	fc d7       	rcall	.+4088   	; 0x12d0 <__mulsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	89 a3       	std	Y+33, r24	; 0x21
     2de:	9a a3       	std	Y+34, r25	; 0x22
     2e0:	ab a3       	std	Y+35, r26	; 0x23
     2e2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e8       	ldi	r20, 0x80	; 128
     2ea:	5f e3       	ldi	r21, 0x3F	; 63
     2ec:	69 a1       	ldd	r22, Y+33	; 0x21
     2ee:	7a a1       	ldd	r23, Y+34	; 0x22
     2f0:	8b a1       	ldd	r24, Y+35	; 0x23
     2f2:	9c a1       	ldd	r25, Y+36	; 0x24
     2f4:	9a d6       	rcall	.+3380   	; 0x102a <__cmpsf2>
     2f6:	88 23       	and	r24, r24
     2f8:	2c f4       	brge	.+10     	; 0x304 <main+0x232>
		__ticks = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	9e a3       	std	Y+38, r25	; 0x26
     300:	8d a3       	std	Y+37, r24	; 0x25
     302:	3b c0       	rjmp	.+118    	; 0x37a <main+0x2a8>
	else if (__tmp > 65535)
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	3f ef       	ldi	r19, 0xFF	; 255
     308:	4f e7       	ldi	r20, 0x7F	; 127
     30a:	57 e4       	ldi	r21, 0x47	; 71
     30c:	69 a1       	ldd	r22, Y+33	; 0x21
     30e:	7a a1       	ldd	r23, Y+34	; 0x22
     310:	8b a1       	ldd	r24, Y+35	; 0x23
     312:	9c a1       	ldd	r25, Y+36	; 0x24
     314:	d9 d7       	rcall	.+4018   	; 0x12c8 <__gesf2>
     316:	18 16       	cp	r1, r24
     318:	3c f5       	brge	.+78     	; 0x368 <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e2       	ldi	r20, 0x20	; 32
     320:	51 e4       	ldi	r21, 0x41	; 65
     322:	6d 8d       	ldd	r22, Y+29	; 0x1d
     324:	7e 8d       	ldd	r23, Y+30	; 0x1e
     326:	8f 8d       	ldd	r24, Y+31	; 0x1f
     328:	98 a1       	ldd	r25, Y+32	; 0x20
     32a:	d2 d7       	rcall	.+4004   	; 0x12d0 <__mulsf3>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	bc 01       	movw	r22, r24
     332:	cd 01       	movw	r24, r26
     334:	eb d6       	rcall	.+3542   	; 0x110c <__fixunssfsi>
     336:	dc 01       	movw	r26, r24
     338:	cb 01       	movw	r24, r22
     33a:	9e a3       	std	Y+38, r25	; 0x26
     33c:	8d a3       	std	Y+37, r24	; 0x25
     33e:	0f c0       	rjmp	.+30     	; 0x35e <main+0x28c>
     340:	8a ef       	ldi	r24, 0xFA	; 250
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	98 a7       	std	Y+40, r25	; 0x28
     346:	8f a3       	std	Y+39, r24	; 0x27
     348:	8f a1       	ldd	r24, Y+39	; 0x27
     34a:	98 a5       	ldd	r25, Y+40	; 0x28
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x27a>
     350:	98 a7       	std	Y+40, r25	; 0x28
     352:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     354:	8d a1       	ldd	r24, Y+37	; 0x25
     356:	9e a1       	ldd	r25, Y+38	; 0x26
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	9e a3       	std	Y+38, r25	; 0x26
     35c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35e:	8d a1       	ldd	r24, Y+37	; 0x25
     360:	9e a1       	ldd	r25, Y+38	; 0x26
     362:	89 2b       	or	r24, r25
     364:	69 f7       	brne	.-38     	; 0x340 <main+0x26e>
     366:	13 c0       	rjmp	.+38     	; 0x38e <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     368:	69 a1       	ldd	r22, Y+33	; 0x21
     36a:	7a a1       	ldd	r23, Y+34	; 0x22
     36c:	8b a1       	ldd	r24, Y+35	; 0x23
     36e:	9c a1       	ldd	r25, Y+36	; 0x24
     370:	cd d6       	rcall	.+3482   	; 0x110c <__fixunssfsi>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	9e a3       	std	Y+38, r25	; 0x26
     378:	8d a3       	std	Y+37, r24	; 0x25
     37a:	8d a1       	ldd	r24, Y+37	; 0x25
     37c:	9e a1       	ldd	r25, Y+38	; 0x26
     37e:	9a a7       	std	Y+42, r25	; 0x2a
     380:	89 a7       	std	Y+41, r24	; 0x29
     382:	89 a5       	ldd	r24, Y+41	; 0x29
     384:	9a a5       	ldd	r25, Y+42	; 0x2a
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <main+0x2b4>
     38a:	9a a7       	std	Y+42, r25	; 0x2a
     38c:	89 a7       	std	Y+41, r24	; 0x29
				
				servo_set_position(20);
				_delay_ms(2000);
			}
		}*/
	}
     38e:	b1 ce       	rjmp	.-670    	; 0xf2 <main+0x20>

00000390 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <servo_init+0xa>
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     3a2:	8d e2       	ldi	r24, 0x2D	; 45
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	2d e2       	ldi	r18, 0x2D	; 45
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	28 63       	ori	r18, 0x38	; 56
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     3b4:	84 e9       	ldi	r24, 0x94	; 148
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	11 82       	std	Z+1, r1	; 0x01
     3bc:	10 82       	st	Z, r1
	OCR3A = 0;
     3be:	88 e9       	ldi	r24, 0x98	; 152
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	fc 01       	movw	r30, r24
     3c4:	11 82       	std	Z+1, r1	; 0x01
     3c6:	10 82       	st	Z, r1
	OCR3B = 0;
     3c8:	8a e9       	ldi	r24, 0x9A	; 154
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	11 82       	std	Z+1, r1	; 0x01
     3d0:	10 82       	st	Z, r1
	OCR3C = 0;
     3d2:	8c e9       	ldi	r24, 0x9C	; 156
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	11 82       	std	Z+1, r1	; 0x01
     3da:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     3dc:	80 e9       	ldi	r24, 0x90	; 144
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	2e eb       	ldi	r18, 0xBE	; 190
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     3e6:	81 e9       	ldi	r24, 0x91	; 145
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	2a e1       	ldi	r18, 0x1A	; 26
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5; 
     3f0:	06 e9       	ldi	r16, 0x96	; 150
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	cc 01       	movw	r24, r24
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	b0 d6       	rcall	.+3424   	; 0x1164 <__floatunsisf>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	bc 01       	movw	r22, r24
     412:	cd 01       	movw	r24, r26
     414:	5d d7       	rcall	.+3770   	; 0x12d0 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	9c 01       	movw	r18, r24
     41c:	ad 01       	movw	r20, r26
     41e:	60 e8       	ldi	r22, 0x80	; 128
     420:	76 e9       	ldi	r23, 0x96	; 150
     422:	88 e1       	ldi	r24, 0x18	; 24
     424:	9b e4       	ldi	r25, 0x4B	; 75
     426:	05 d6       	rcall	.+3082   	; 0x1032 <__divsf3>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	5f e3       	ldi	r21, 0x3F	; 63
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	94 d5       	rcall	.+2856   	; 0xf62 <__addsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	64 d6       	rcall	.+3272   	; 0x110c <__fixunssfsi>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	f8 01       	movw	r30, r16
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
}//END OF servo_init
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <servo_set_duty_cycle>:


static void servo_set_duty_cycle(int16_t value)
{
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <servo_set_duty_cycle+0xe>
     46a:	00 d0       	rcall	.+0      	; 0x46c <servo_set_duty_cycle+0x10>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9c 83       	std	Y+4, r25	; 0x04
     472:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     474:	86 e9       	ldi	r24, 0x96	; 150
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	91 81       	ldd	r25, Z+1	; 0x01
     47e:	cc 01       	movw	r24, r24
     480:	a0 e0       	ldi	r26, 0x00	; 0
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	6d d6       	rcall	.+3290   	; 0x1164 <__floatunsisf>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	53 e4       	ldi	r21, 0x43	; 67
     496:	bc 01       	movw	r22, r24
     498:	cd 01       	movw	r24, r26
     49a:	cb d5       	rcall	.+2966   	; 0x1032 <__divsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	6c 01       	movw	r12, r24
     4a2:	7d 01       	movw	r14, r26
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	09 2e       	mov	r0, r25
     4aa:	00 0c       	add	r0, r0
     4ac:	aa 0b       	sbc	r26, r26
     4ae:	bb 0b       	sbc	r27, r27
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	59 d6       	rcall	.+3250   	; 0x1168 <__floatsisf>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	9c 01       	movw	r18, r24
     4bc:	ad 01       	movw	r20, r26
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	06 d7       	rcall	.+3596   	; 0x12d0 <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	bc 01       	movw	r22, r24
     4d2:	cd 01       	movw	r24, r26
     4d4:	46 d5       	rcall	.+2700   	; 0xf62 <__addsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	bc 01       	movw	r22, r24
     4dc:	cd 01       	movw	r24, r26
     4de:	16 d6       	rcall	.+3116   	; 0x110c <__fixunssfsi>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     4e8:	89 e9       	ldi	r24, 0x99	; 153
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	29 81       	ldd	r18, Y+1	; 0x01
     4ee:	3a 81       	ldd	r19, Y+2	; 0x02
     4f0:	23 2f       	mov	r18, r19
     4f2:	33 27       	eor	r19, r19
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     4f8:	88 e9       	ldi	r24, 0x98	; 152
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
	
}//END OF servo_position
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <servo_set_position>:

void servo_set_position(int8_t angle)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	1f 92       	push	r1
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	08 2e       	mov	r0, r24
     528:	00 0c       	add	r0, r0
     52a:	99 0b       	sbc	r25, r25
     52c:	aa 0b       	sbc	r26, r26
     52e:	bb 0b       	sbc	r27, r27
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	19 d6       	rcall	.+3122   	; 0x1168 <__floatsisf>
     536:	dc 01       	movw	r26, r24
     538:	cb 01       	movw	r24, r22
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	44 eb       	ldi	r20, 0xB4	; 180
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	75 d5       	rcall	.+2794   	; 0x1032 <__divsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	26 e6       	ldi	r18, 0x66	; 102
     54e:	36 e6       	ldi	r19, 0x66	; 102
     550:	46 e3       	ldi	r20, 0x36	; 54
     552:	51 e4       	ldi	r21, 0x41	; 65
     554:	bc 01       	movw	r22, r24
     556:	cd 01       	movw	r24, r26
     558:	bb d6       	rcall	.+3446   	; 0x12d0 <__mulsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	9c 01       	movw	r18, r24
     560:	ad 01       	movw	r20, r26
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	8c e6       	ldi	r24, 0x6C	; 108
     568:	93 e4       	ldi	r25, 0x43	; 67
     56a:	fa d4       	rcall	.+2548   	; 0xf60 <__subsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9c 01       	movw	r18, r24
     572:	ad 01       	movw	r20, r26
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	8f e7       	ldi	r24, 0x7F	; 127
     57a:	93 e4       	ldi	r25, 0x43	; 67
     57c:	f1 d4       	rcall	.+2530   	; 0xf60 <__subsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	bd d5       	rcall	.+2938   	; 0x1102 <__fixsfsi>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	67 df       	rcall	.-306    	; 0x45c <servo_set_duty_cycle>

     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	00 90 5f 00 	lds	r0, 0x005F
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	00 90 5b 00 	lds	r0, 0x005B
     5a6:	0f 92       	push	r0
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	00 d0       	rcall	.+0      	; 0x5be <__vector_18+0x28>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <__vector_18+0x2a>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     5c4:	8d ee       	ldi	r24, 0xED	; 237
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     5ce:	19 82       	std	Y+1, r1	; 0x01
     5d0:	a4 c0       	rjmp	.+328    	; 0x71a <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     5d2:	8d ee       	ldi	r24, 0xED	; 237
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	22 95       	swap	r18
     5da:	20 7f       	andi	r18, 0xF0	; 240
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     5e0:	8e ee       	ldi	r24, 0xEE	; 238
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	82 95       	swap	r24
     5ea:	86 95       	lsr	r24
     5ec:	87 70       	andi	r24, 0x07	; 7
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	81 70       	andi	r24, 0x01	; 1
     5f4:	99 27       	eor	r25, r25
     5f6:	89 2b       	or	r24, r25
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_18+0x66>
     5fa:	70 c0       	rjmp	.+224    	; 0x6dc <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     5fc:	8f ee       	ldi	r24, 0xEF	; 239
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	20 e8       	ldi	r18, 0x80	; 128
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     606:	8e ee       	ldi	r24, 0xEE	; 238
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2e ee       	ldi	r18, 0xEE	; 238
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	2f 7d       	andi	r18, 0xDF	; 223
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     618:	82 ef       	ldi	r24, 0xF2	; 242
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	82 95       	swap	r24
     622:	86 95       	lsr	r24
     624:	87 70       	andi	r24, 0x07	; 7
     626:	28 2f       	mov	r18, r24
     628:	83 ef       	ldi	r24, 0xF3	; 243
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	fc 01       	movw	r30, r24
     62e:	80 81       	ld	r24, Z
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	82 2b       	or	r24, r18
     642:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	26 c0       	rjmp	.+76     	; 0x694 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	90 48       	sbci	r25, 0x80	; 128
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	8a 5f       	subi	r24, 0xFA	; 250
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	20 81       	ld	r18, Z
     65e:	31 81       	ldd	r19, Z+1	; 0x01
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	86 5e       	subi	r24, 0xE6	; 230
     66a:	9e 4f       	sbci	r25, 0xFE	; 254
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	48 2f       	mov	r20, r24
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	84 0f       	add	r24, r20
     67c:	95 1f       	adc	r25, r21
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	2a ef       	ldi	r18, 0xFA	; 250
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	8a 83       	std	Y+2, r24	; 0x02
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	b8 f2       	brcs	.-82     	; 0x648 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	86 5e       	subi	r24, 0xE6	; 230
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
     6b0:	25 30       	cpi	r18, 0x05	; 5
     6b2:	41 f4       	brne	.+16     	; 0x6c4 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	86 5e       	subi	r24, 0xE6	; 230
     6be:	9e 4f       	sbci	r25, 0xFE	; 254
     6c0:	fc 01       	movw	r30, r24
     6c2:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     6c4:	8c 81       	ldd	r24, Y+4	; 0x04
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	82 5d       	subi	r24, 0xD2	; 210
     6ce:	9e 4f       	sbci	r25, 0xFE	; 254
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 81       	ld	r18, Z
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18

			break;
     6da:	23 c0       	rjmp	.+70     	; 0x722 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     6dc:	8e ee       	ldi	r24, 0xEE	; 238
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	82 95       	swap	r24
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	83 70       	andi	r24, 0x03	; 3
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	81 70       	andi	r24, 0x01	; 1
     6f2:	99 27       	eor	r25, r25
     6f4:	89 2b       	or	r24, r25
     6f6:	71 f0       	breq	.+28     	; 0x714 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     6f8:	8f ee       	ldi	r24, 0xEF	; 239
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	2e ee       	ldi	r18, 0xEE	; 238
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	2f 7b       	andi	r18, 0xBF	; 191
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18

			break;
     712:	07 c0       	rjmp	.+14     	; 0x722 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	8f 30       	cpi	r24, 0x0F	; 15
     71e:	08 f4       	brcc	.+2      	; 0x722 <__vector_18+0x18c>
     720:	58 cf       	rjmp	.-336    	; 0x5d2 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     722:	8d ee       	ldi	r24, 0xED	; 237
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	CANGIT = CANGIT; // zato sto tako treba.
     72c:	8a ed       	ldi	r24, 0xDA	; 218
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2a ed       	ldi	r18, 0xDA	; 218
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
}
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	00 92 5b 00 	sts	0x005B, r0
     75e:	0f 90       	pop	r0
     760:	00 92 5f 00 	sts	0x005F, r0
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <CAN_InitModule>:


static void CAN_InitModule(void)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <CAN_InitModule+0x6>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     774:	88 ed       	ldi	r24, 0xD8	; 216
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     77e:	19 82       	std	Y+1, r1	; 0x01
     780:	3e c0       	rjmp	.+124    	; 0x7fe <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     782:	8d ee       	ldi	r24, 0xED	; 237
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	22 95       	swap	r18
     78a:	20 7f       	andi	r18, 0xF0	; 240
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18

		CANSTMOB = 0;
     790:	8e ee       	ldi	r24, 0xEE	; 238
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fc 01       	movw	r30, r24
     796:	10 82       	st	Z, r1
		CANCDMOB = 0;
     798:	8f ee       	ldi	r24, 0xEF	; 239
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	10 82       	st	Z, r1

		CANIDT1 = 0;
     7a0:	83 ef       	ldi	r24, 0xF3	; 243
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	10 82       	st	Z, r1
		CANIDT2 = 0;
     7a8:	82 ef       	ldi	r24, 0xF2	; 242
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 82       	st	Z, r1
		CANIDT3 = 0;
     7b0:	81 ef       	ldi	r24, 0xF1	; 241
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	10 82       	st	Z, r1
		CANIDT4 = 0;
     7b8:	80 ef       	ldi	r24, 0xF0	; 240
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	10 82       	st	Z, r1
		CANIDM1 = 0;
     7c0:	87 ef       	ldi	r24, 0xF7	; 247
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
		CANIDM2 = 0;
     7c8:	86 ef       	ldi	r24, 0xF6	; 246
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	10 82       	st	Z, r1
		CANIDM3 = 0;
     7d0:	85 ef       	ldi	r24, 0xF5	; 245
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	10 82       	st	Z, r1
		CANIDM4 = 0;
     7d8:	84 ef       	ldi	r24, 0xF4	; 244
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     7e0:	1a 82       	std	Y+2, r1	; 0x02
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <CAN_InitModule+0x88>
			CANMSG = 0;
     7e4:	8a ef       	ldi	r24, 0xFA	; 250
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	8a 83       	std	Y+2, r24	; 0x02
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	88 30       	cpi	r24, 0x08	; 8
     7f6:	b0 f3       	brcs	.-20     	; 0x7e4 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	8f 30       	cpi	r24, 0x0F	; 15
     802:	08 f4       	brcc	.+2      	; 0x806 <CAN_InitModule+0x9c>
     804:	be cf       	rjmp	.-132    	; 0x782 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     806:	88 ed       	ldi	r24, 0xD8	; 216
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	22 e0       	ldi	r18, 0x02	; 2
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     810:	82 ee       	ldi	r24, 0xE2	; 226
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     81a:	83 ee       	ldi	r24, 0xE3	; 227
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	28 e0       	ldi	r18, 0x08	; 8
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     824:	84 ee       	ldi	r24, 0xE4	; 228
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2e e5       	ldi	r18, 0x5E	; 94
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     82e:	85 ee       	ldi	r24, 0xE5	; 229
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	fc 01       	movw	r30, r24
     834:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     836:	8b ed       	ldi	r24, 0xDB	; 219
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	20 eb       	ldi	r18, 0xB0	; 176
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     840:	8f ed       	ldi	r24, 0xDF	; 223
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2f e7       	ldi	r18, 0x7F	; 127
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     84a:	8e ed       	ldi	r24, 0xDE	; 222
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	2f ef       	ldi	r18, 0xFF	; 255
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
	sei();
     854:	78 94       	sei
}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <CAN_InitRxMob+0x6>
     866:	00 d0       	rcall	.+0      	; 0x868 <CAN_InitRxMob+0x8>
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	9c 83       	std	Y+4, r25	; 0x04
     86e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     870:	8d ee       	ldi	r24, 0xED	; 237
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     87a:	00 00       	nop
     87c:	89 ed       	ldi	r24, 0xD9	; 217
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	82 95       	swap	r24
     886:	8f 70       	andi	r24, 0x0F	; 15
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	99 27       	eor	r25, r25
     890:	89 2b       	or	r24, r25
     892:	a1 f7       	brne	.-24     	; 0x87c <CAN_InitRxMob+0x1c>
     894:	89 ed       	ldi	r24, 0xD9	; 217
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	86 95       	lsr	r24
     89e:	86 95       	lsr	r24
     8a0:	86 95       	lsr	r24
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	81 70       	andi	r24, 0x01	; 1
     8a8:	99 27       	eor	r25, r25
     8aa:	89 2b       	or	r24, r25
     8ac:	39 f7       	brne	.-50     	; 0x87c <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	49 c0       	rjmp	.+146    	; 0x944 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     8b2:	8d ee       	ldi	r24, 0xED	; 237
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	29 81       	ldd	r18, Y+1	; 0x01
     8b8:	22 95       	swap	r18
     8ba:	20 7f       	andi	r18, 0xF0	; 240
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     8c0:	8f ee       	ldi	r24, 0xEF	; 239
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	82 95       	swap	r24
     8ca:	86 95       	lsr	r24
     8cc:	86 95       	lsr	r24
     8ce:	83 70       	andi	r24, 0x03	; 3
     8d0:	88 23       	and	r24, r24
     8d2:	21 f0       	breq	.+8      	; 0x8dc <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	34 c0       	rjmp	.+104    	; 0x944 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     8dc:	8f ee       	ldi	r24, 0xEF	; 239
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2f e0       	ldi	r18, 0x0F	; 15
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     8e6:	83 ef       	ldi	r24, 0xF3	; 243
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2b 81       	ldd	r18, Y+3	; 0x03
     8ec:	3c 81       	ldd	r19, Y+4	; 0x04
     8ee:	33 27       	eor	r19, r19
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	36 95       	lsr	r19
     8f6:	27 95       	ror	r18
     8f8:	36 95       	lsr	r19
     8fa:	27 95       	ror	r18
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     900:	82 ef       	ldi	r24, 0xF2	; 242
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2b 81       	ldd	r18, Y+3	; 0x03
     906:	22 95       	swap	r18
     908:	22 0f       	add	r18, r18
     90a:	20 7e       	andi	r18, 0xE0	; 224
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     910:	86 ef       	ldi	r24, 0xF6	; 246
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	20 ee       	ldi	r18, 0xE0	; 224
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     91a:	87 ef       	ldi	r24, 0xF7	; 247
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     924:	8f ee       	ldi	r24, 0xEF	; 239
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2f ee       	ldi	r18, 0xEF	; 239
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	20 68       	ori	r18, 0x80	; 128
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     936:	8d ee       	ldi	r24, 0xED	; 237
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	2a 81       	ldd	r18, Y+2	; 0x02
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18

		return 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0a c0       	rjmp	.+20     	; 0x958 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	8f 30       	cpi	r24, 0x0F	; 15
     948:	08 f4       	brcc	.+2      	; 0x94c <CAN_InitRxMob+0xec>
     94a:	b3 cf       	rjmp	.-154    	; 0x8b2 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     94c:	8d ee       	ldi	r24, 0xED	; 237
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2a 81       	ldd	r18, Y+2	; 0x02
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18

	return 0;
     956:	80 e0       	ldi	r24, 0x00	; 0
}
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	00 d0       	rcall	.+0      	; 0x970 <CAN_Init+0xa>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     976:	f9 de       	rcall	.-526    	; 0x76a <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     978:	19 82       	std	Y+1, r1	; 0x01
     97a:	2e c0       	rjmp	.+92     	; 0x9d8 <CAN_Init+0x72>
	{
		CAN_InitRxMob(i + 1);
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	6d df       	rcall	.-294    	; 0x860 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	8c 01       	movw	r16, r24
     992:	0a 5f       	subi	r16, 0xFA	; 250
     994:	1e 4f       	sbci	r17, 0xFE	; 254
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fb d4       	rcall	.+2550   	; 0x1396 <calloc>
     9a0:	f8 01       	movw	r30, r16
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	29 81       	ldd	r18, Y+1	; 0x01
     9ae:	22 2f       	mov	r18, r18
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	49 81       	ldd	r20, Y+1	; 0x01
     9b4:	44 2f       	mov	r20, r20
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	42 5d       	subi	r20, 0xD2	; 210
     9bc:	5e 4f       	sbci	r21, 0xFE	; 254
     9be:	fa 01       	movw	r30, r20
     9c0:	60 83       	st	Z, r22
     9c2:	2c 5d       	subi	r18, 0xDC	; 220
     9c4:	3e 4f       	sbci	r19, 0xFE	; 254
     9c6:	f9 01       	movw	r30, r18
     9c8:	60 83       	st	Z, r22
     9ca:	86 5e       	subi	r24, 0xE6	; 230
     9cc:	9e 4f       	sbci	r25, 0xFE	; 254
     9ce:	fc 01       	movw	r30, r24
     9d0:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	99 81       	ldd	r25, Y+1	; 0x01
     9da:	8a 81       	ldd	r24, Y+2	; 0x02
     9dc:	98 17       	cp	r25, r24
     9de:	70 f2       	brcs	.-100    	; 0x97c <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <timer_init>:
    timer_callback = callback;
}


void timer_init(unsigned int freq)
{
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <timer_init+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     a08:	81 e8       	ldi	r24, 0x81	; 129
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	29 e0       	ldi	r18, 0x09	; 9
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     a12:	08 e8       	ldi	r16, 0x88	; 136
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	cc 01       	movw	r24, r24
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	9f d3       	rcall	.+1854   	; 0x1164 <__floatunsisf>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	9c 01       	movw	r18, r24
     a2c:	ad 01       	movw	r20, r26
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	76 e9       	ldi	r23, 0x96	; 150
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	9b e4       	ldi	r25, 0x4B	; 75
     a36:	fd d2       	rcall	.+1530   	; 0x1032 <__divsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	bc 01       	movw	r22, r24
     a46:	cd 01       	movw	r24, r26
     a48:	8c d2       	rcall	.+1304   	; 0xf62 <__addsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	5c d3       	rcall	.+1720   	; 0x110c <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	f8 01       	movw	r30, r16
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     a5e:	8f e6       	ldi	r24, 0x6F	; 111
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	22 e0       	ldi	r18, 0x02	; 2
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18

	SREG |= 0x80;
     a68:	8f e5       	ldi	r24, 0x5F	; 95
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2f e5       	ldi	r18, 0x5F	; 95
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	20 68       	ori	r18, 0x80	; 128
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	00 90 5f 00 	lds	r0, 0x005F
     a90:	0f 92       	push	r0
     a92:	11 24       	eor	r1, r1
     a94:	00 90 5b 00 	lds	r0, 0x005B
     a98:	0f 92       	push	r0
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     aba:	80 91 3c 01 	lds	r24, 0x013C
     abe:	90 91 3d 01 	lds	r25, 0x013D
     ac2:	89 2b       	or	r24, r25
     ac4:	31 f0       	breq	.+12     	; 0xad2 <__vector_12+0x4a>
        timer_callback();
     ac6:	80 91 3c 01 	lds	r24, 0x013C
     aca:	90 91 3d 01 	lds	r25, 0x013D
     ace:	fc 01       	movw	r30, r24
     ad0:	09 95       	icall
	sys_time++;
     ad2:	80 91 38 01 	lds	r24, 0x0138
     ad6:	90 91 39 01 	lds	r25, 0x0139
     ada:	a0 91 3a 01 	lds	r26, 0x013A
     ade:	b0 91 3b 01 	lds	r27, 0x013B
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	a1 1d       	adc	r26, r1
     ae6:	b1 1d       	adc	r27, r1
     ae8:	80 93 38 01 	sts	0x0138, r24
     aec:	90 93 39 01 	sts	0x0139, r25
     af0:	a0 93 3a 01 	sts	0x013A, r26
     af4:	b0 93 3b 01 	sts	0x013B, r27
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	00 92 5b 00 	sts	0x005B, r0
     b1a:	0f 90       	pop	r0
     b1c:	00 92 5f 00 	sts	0x005F, r0
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <system_init>:

void system_init(void)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	6c 97       	sbiw	r28, 0x1c	; 28
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	aa e7       	ldi	r26, 0x7A	; 122
     b40:	b4 e4       	ldi	r27, 0x44	; 68
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e4       	ldi	r19, 0x40	; 64
     b4e:	4c e1       	ldi	r20, 0x1C	; 28
     b50:	55 e4       	ldi	r21, 0x45	; 69
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	ba d3       	rcall	.+1908   	; 0x12d0 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	8d 83       	std	Y+5, r24	; 0x05
     b62:	9e 83       	std	Y+6, r25	; 0x06
     b64:	af 83       	std	Y+7, r26	; 0x07
     b66:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e8       	ldi	r20, 0x80	; 128
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	6d 81       	ldd	r22, Y+5	; 0x05
     b72:	7e 81       	ldd	r23, Y+6	; 0x06
     b74:	8f 81       	ldd	r24, Y+7	; 0x07
     b76:	98 85       	ldd	r25, Y+8	; 0x08
     b78:	58 d2       	rcall	.+1200   	; 0x102a <__cmpsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	2c f4       	brge	.+10     	; 0xb88 <system_init+0x62>
		__ticks = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9a 87       	std	Y+10, r25	; 0x0a
     b84:	89 87       	std	Y+9, r24	; 0x09
     b86:	3b c0       	rjmp	.+118    	; 0xbfe <system_init+0xd8>
	else if (__tmp > 65535)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	3f ef       	ldi	r19, 0xFF	; 255
     b8c:	4f e7       	ldi	r20, 0x7F	; 127
     b8e:	57 e4       	ldi	r21, 0x47	; 71
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	97 d3       	rcall	.+1838   	; 0x12c8 <__gesf2>
     b9a:	18 16       	cp	r1, r24
     b9c:	3c f5       	brge	.+78     	; 0xbec <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e2       	ldi	r20, 0x20	; 32
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	7a 81       	ldd	r23, Y+2	; 0x02
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	90 d3       	rcall	.+1824   	; 0x12d0 <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	a9 d2       	rcall	.+1362   	; 0x110c <__fixunssfsi>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	9a 87       	std	Y+10, r25	; 0x0a
     bc0:	89 87       	std	Y+9, r24	; 0x09
     bc2:	0f c0       	rjmp	.+30     	; 0xbe2 <system_init+0xbc>
     bc4:	8a ef       	ldi	r24, 0xFA	; 250
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	8b 87       	std	Y+11, r24	; 0x0b
     bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bce:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <system_init+0xaa>
     bd4:	9c 87       	std	Y+12, r25	; 0x0c
     bd6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	89 2b       	or	r24, r25
     be8:	69 f7       	brne	.-38     	; 0xbc4 <system_init+0x9e>
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	7e 81       	ldd	r23, Y+6	; 0x06
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	8b d2       	rcall	.+1302   	; 0x110c <__fixunssfsi>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	9a 87       	std	Y+10, r25	; 0x0a
     bfc:	89 87       	std	Y+9, r24	; 0x09
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	9e 87       	std	Y+14, r25	; 0x0e
     c04:	8d 87       	std	Y+13, r24	; 0x0d
     c06:	8d 85       	ldd	r24, Y+13	; 0x0d
     c08:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <system_init+0xe4>
     c0e:	9e 87       	std	Y+14, r25	; 0x0e
     c10:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
     c12:	83 e3       	ldi	r24, 0x33	; 51
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
	PORTG = 0xFF;
     c1c:	84 e3       	ldi	r24, 0x34	; 52
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	aa e7       	ldi	r26, 0x7A	; 122
     c2c:	b4 e4       	ldi	r27, 0x44	; 68
     c2e:	8f 87       	std	Y+15, r24	; 0x0f
     c30:	98 8b       	std	Y+16, r25	; 0x10
     c32:	a9 8b       	std	Y+17, r26	; 0x11
     c34:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e4       	ldi	r19, 0x40	; 64
     c3a:	4c e1       	ldi	r20, 0x1C	; 28
     c3c:	55 e4       	ldi	r21, 0x45	; 69
     c3e:	6f 85       	ldd	r22, Y+15	; 0x0f
     c40:	78 89       	ldd	r23, Y+16	; 0x10
     c42:	89 89       	ldd	r24, Y+17	; 0x11
     c44:	9a 89       	ldd	r25, Y+18	; 0x12
     c46:	44 d3       	rcall	.+1672   	; 0x12d0 <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	ad 8b       	std	Y+21, r26	; 0x15
     c52:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	6b 89       	ldd	r22, Y+19	; 0x13
     c5e:	7c 89       	ldd	r23, Y+20	; 0x14
     c60:	8d 89       	ldd	r24, Y+21	; 0x15
     c62:	9e 89       	ldd	r25, Y+22	; 0x16
     c64:	e2 d1       	rcall	.+964    	; 0x102a <__cmpsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <system_init+0x14e>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	98 8f       	std	Y+24, r25	; 0x18
     c70:	8f 8b       	std	Y+23, r24	; 0x17
     c72:	3b c0       	rjmp	.+118    	; 0xcea <system_init+0x1c4>
	else if (__tmp > 65535)
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	3f ef       	ldi	r19, 0xFF	; 255
     c78:	4f e7       	ldi	r20, 0x7F	; 127
     c7a:	57 e4       	ldi	r21, 0x47	; 71
     c7c:	6b 89       	ldd	r22, Y+19	; 0x13
     c7e:	7c 89       	ldd	r23, Y+20	; 0x14
     c80:	8d 89       	ldd	r24, Y+21	; 0x15
     c82:	9e 89       	ldd	r25, Y+22	; 0x16
     c84:	21 d3       	rcall	.+1602   	; 0x12c8 <__gesf2>
     c86:	18 16       	cp	r1, r24
     c88:	3c f5       	brge	.+78     	; 0xcd8 <system_init+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e2       	ldi	r20, 0x20	; 32
     c90:	51 e4       	ldi	r21, 0x41	; 65
     c92:	6f 85       	ldd	r22, Y+15	; 0x0f
     c94:	78 89       	ldd	r23, Y+16	; 0x10
     c96:	89 89       	ldd	r24, Y+17	; 0x11
     c98:	9a 89       	ldd	r25, Y+18	; 0x12
     c9a:	1a d3       	rcall	.+1588   	; 0x12d0 <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	33 d2       	rcall	.+1126   	; 0x110c <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	98 8f       	std	Y+24, r25	; 0x18
     cac:	8f 8b       	std	Y+23, r24	; 0x17
     cae:	0f c0       	rjmp	.+30     	; 0xcce <system_init+0x1a8>
     cb0:	8a ef       	ldi	r24, 0xFA	; 250
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9a 8f       	std	Y+26, r25	; 0x1a
     cb6:	89 8f       	std	Y+25, r24	; 0x19
     cb8:	89 8d       	ldd	r24, Y+25	; 0x19
     cba:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <system_init+0x196>
     cc0:	9a 8f       	std	Y+26, r25	; 0x1a
     cc2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	8f 89       	ldd	r24, Y+23	; 0x17
     cc6:	98 8d       	ldd	r25, Y+24	; 0x18
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	98 8f       	std	Y+24, r25	; 0x18
     ccc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	89 2b       	or	r24, r25
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <system_init+0x18a>
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <system_init+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd8:	6b 89       	ldd	r22, Y+19	; 0x13
     cda:	7c 89       	ldd	r23, Y+20	; 0x14
     cdc:	8d 89       	ldd	r24, Y+21	; 0x15
     cde:	9e 89       	ldd	r25, Y+22	; 0x16
     ce0:	15 d2       	rcall	.+1066   	; 0x110c <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	98 8f       	std	Y+24, r25	; 0x18
     ce8:	8f 8b       	std	Y+23, r24	; 0x17
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	9c 8f       	std	Y+28, r25	; 0x1c
     cf0:	8b 8f       	std	Y+27, r24	; 0x1b
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <system_init+0x1d0>
     cfa:	9c 8f       	std	Y+28, r25	; 0x1c
     cfc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
     cfe:	84 e3       	ldi	r24, 0x34	; 52
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	10 82       	st	Z, r1
	servo_init(50);
     d06:	82 e3       	ldi	r24, 0x32	; 50
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	42 db       	rcall	.-2428   	; 0x390 <servo_init>
	timer_init(1000);
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	6e de       	rcall	.-804    	; 0x9ee <timer_init>
	CAN_Init(1);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	28 de       	rcall	.-944    	; 0x966 <CAN_Init>
}
     d16:	6c 96       	adiw	r28, 0x1c	; 28
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	00 90 5f 00 	lds	r0, 0x005F
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	00 90 5b 00 	lds	r0, 0x005B
     d38:	0f 92       	push	r0
     d3a:	2f 93       	push	r18
     d3c:	3f 93       	push	r19
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	80 91 7e 01 	lds	r24, 0x017E
     d52:	88 23       	and	r24, r24
     d54:	d1 f0       	breq	.+52     	; 0xd8a <__vector_23+0x62>
     d56:	80 91 7e 01 	lds	r24, 0x017E
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	80 93 7e 01 	sts	0x017E, r24
     d60:	86 ec       	ldi	r24, 0xC6	; 198
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	20 91 7f 01 	lds	r18, 0x017F
     d68:	22 2f       	mov	r18, r18
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	22 5c       	subi	r18, 0xC2	; 194
     d6e:	3e 4f       	sbci	r19, 0xFE	; 254
     d70:	f9 01       	movw	r30, r18
     d72:	20 81       	ld	r18, Z
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
     d78:	80 91 7f 01 	lds	r24, 0x017F
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 7f 01 	sts	0x017F, r24
     d82:	80 34       	cpi	r24, 0x40	; 64
     d84:	11 f4       	brne	.+4      	; 0xd8a <__vector_23+0x62>
     d86:	10 92 7f 01 	sts	0x017F, r1
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	00 92 5b 00 	sts	0x005B, r0
     da0:	0f 90       	pop	r0
     da2:	00 92 5f 00 	sts	0x005F, r0
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <__vector_21>:
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	00 90 5f 00 	lds	r0, 0x005F
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	00 90 5b 00 	lds	r0, 0x005B
     dbc:	0f 92       	push	r0
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	1f 92       	push	r1
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	80 ec       	ldi	r24, 0xC0	; 192
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8c 71       	andi	r24, 0x1C	; 28
     de6:	99 27       	eor	r25, r25
     de8:	89 2b       	or	r24, r25
     dea:	d1 f4       	brne	.+52     	; 0xe20 <__vector_21+0x74>
     dec:	80 91 c0 01 	lds	r24, 0x01C0
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	26 ec       	ldi	r18, 0xC6	; 198
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	f9 01       	movw	r30, r18
     dfa:	20 81       	ld	r18, Z
     dfc:	80 58       	subi	r24, 0x80	; 128
     dfe:	9e 4f       	sbci	r25, 0xFE	; 254
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
     e04:	80 91 c0 01 	lds	r24, 0x01C0
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	80 93 c0 01 	sts	0x01C0, r24
     e0e:	80 34       	cpi	r24, 0x40	; 64
     e10:	11 f4       	brne	.+4      	; 0xe16 <__vector_21+0x6a>
     e12:	10 92 c0 01 	sts	0x01C0, r1
     e16:	80 91 c1 01 	lds	r24, 0x01C1
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 c1 01 	sts	0x01C1, r24
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	00 92 5b 00 	sts	0x005B, r0
     e38:	0f 90       	pop	r0
     e3a:	00 92 5f 00 	sts	0x005F, r0
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	00 90 5f 00 	lds	r0, 0x005F
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	00 90 5b 00 	lds	r0, 0x005B
     e54:	0f 92       	push	r0
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     e6a:	80 91 02 02 	lds	r24, 0x0202
     e6e:	88 23       	and	r24, r24
     e70:	d1 f0       	breq	.+52     	; 0xea6 <__vector_34+0x62>
	{
		tx1_counter--;
     e72:	80 91 02 02 	lds	r24, 0x0202
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	80 93 02 02 	sts	0x0202, r24
		UDR1=tx1_buffer[tx1_rd_index];
     e7c:	8e ec       	ldi	r24, 0xCE	; 206
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	20 91 03 02 	lds	r18, 0x0203
     e84:	22 2f       	mov	r18, r18
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	2e 53       	subi	r18, 0x3E	; 62
     e8a:	3e 4f       	sbci	r19, 0xFE	; 254
     e8c:	f9 01       	movw	r30, r18
     e8e:	20 81       	ld	r18, Z
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     e94:	80 91 03 02 	lds	r24, 0x0203
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	80 93 03 02 	sts	0x0203, r24
     e9e:	80 34       	cpi	r24, 0x40	; 64
     ea0:	11 f4       	brne	.+4      	; 0xea6 <__vector_34+0x62>
			tx1_rd_index = 0;
     ea2:	10 92 03 02 	sts	0x0203, r1
	}
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	00 92 5b 00 	sts	0x005B, r0
     ebc:	0f 90       	pop	r0
     ebe:	00 92 5f 00 	sts	0x005F, r0
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_32>:

ISR(USART1_RX_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	00 90 5f 00 	lds	r0, 0x005F
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	00 90 5b 00 	lds	r0, 0x005B
     ed8:	0f 92       	push	r0
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	1f 92       	push	r1
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     ef0:	88 ec       	ldi	r24, 0xC8	; 200
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8c 71       	andi	r24, 0x1C	; 28
     f02:	99 27       	eor	r25, r25
     f04:	89 2b       	or	r24, r25
     f06:	d1 f4       	brne	.+52     	; 0xf3c <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     f08:	80 91 44 02 	lds	r24, 0x0244
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	2e ec       	ldi	r18, 0xCE	; 206
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	8c 5f       	subi	r24, 0xFC	; 252
     f1a:	9d 4f       	sbci	r25, 0xFD	; 253
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     f20:	80 91 44 02 	lds	r24, 0x0244
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 44 02 	sts	0x0244, r24
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__vector_32+0x6a>
		rx1_wr_index = 0;
     f2e:	10 92 44 02 	sts	0x0244, r1

		rx1_counter++;
     f32:	80 91 45 02 	lds	r24, 0x0245
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 45 02 	sts	0x0245, r24
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	00 92 5b 00 	sts	0x005B, r0
     f54:	0f 90       	pop	r0
     f56:	00 92 5f 00 	sts	0x005F, r0
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__subsf3>:
     f60:	50 58       	subi	r21, 0x80	; 128

00000f62 <__addsf3>:
     f62:	bb 27       	eor	r27, r27
     f64:	aa 27       	eor	r26, r26
     f66:	0e d0       	rcall	.+28     	; 0xf84 <__addsf3x>
     f68:	75 c1       	rjmp	.+746    	; 0x1254 <__fp_round>
     f6a:	66 d1       	rcall	.+716    	; 0x1238 <__fp_pscA>
     f6c:	30 f0       	brcs	.+12     	; 0xf7a <__addsf3+0x18>
     f6e:	6b d1       	rcall	.+726    	; 0x1246 <__fp_pscB>
     f70:	20 f0       	brcs	.+8      	; 0xf7a <__addsf3+0x18>
     f72:	31 f4       	brne	.+12     	; 0xf80 <__addsf3+0x1e>
     f74:	9f 3f       	cpi	r25, 0xFF	; 255
     f76:	11 f4       	brne	.+4      	; 0xf7c <__addsf3+0x1a>
     f78:	1e f4       	brtc	.+6      	; 0xf80 <__addsf3+0x1e>
     f7a:	5b c1       	rjmp	.+694    	; 0x1232 <__fp_nan>
     f7c:	0e f4       	brtc	.+2      	; 0xf80 <__addsf3+0x1e>
     f7e:	e0 95       	com	r30
     f80:	e7 fb       	bst	r30, 7
     f82:	51 c1       	rjmp	.+674    	; 0x1226 <__fp_inf>

00000f84 <__addsf3x>:
     f84:	e9 2f       	mov	r30, r25
     f86:	77 d1       	rcall	.+750    	; 0x1276 <__fp_split3>
     f88:	80 f3       	brcs	.-32     	; 0xf6a <__addsf3+0x8>
     f8a:	ba 17       	cp	r27, r26
     f8c:	62 07       	cpc	r22, r18
     f8e:	73 07       	cpc	r23, r19
     f90:	84 07       	cpc	r24, r20
     f92:	95 07       	cpc	r25, r21
     f94:	18 f0       	brcs	.+6      	; 0xf9c <__addsf3x+0x18>
     f96:	71 f4       	brne	.+28     	; 0xfb4 <__addsf3x+0x30>
     f98:	9e f5       	brtc	.+102    	; 0x1000 <__addsf3x+0x7c>
     f9a:	8f c1       	rjmp	.+798    	; 0x12ba <__fp_zero>
     f9c:	0e f4       	brtc	.+2      	; 0xfa0 <__addsf3x+0x1c>
     f9e:	e0 95       	com	r30
     fa0:	0b 2e       	mov	r0, r27
     fa2:	ba 2f       	mov	r27, r26
     fa4:	a0 2d       	mov	r26, r0
     fa6:	0b 01       	movw	r0, r22
     fa8:	b9 01       	movw	r22, r18
     faa:	90 01       	movw	r18, r0
     fac:	0c 01       	movw	r0, r24
     fae:	ca 01       	movw	r24, r20
     fb0:	a0 01       	movw	r20, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	ff 27       	eor	r31, r31
     fb6:	59 1b       	sub	r21, r25
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <__addsf3x+0x5c>
     fba:	59 3f       	cpi	r21, 0xF9	; 249
     fbc:	50 f4       	brcc	.+20     	; 0xfd2 <__addsf3x+0x4e>
     fbe:	50 3e       	cpi	r21, 0xE0	; 224
     fc0:	68 f1       	brcs	.+90     	; 0x101c <__addsf3x+0x98>
     fc2:	1a 16       	cp	r1, r26
     fc4:	f0 40       	sbci	r31, 0x00	; 0
     fc6:	a2 2f       	mov	r26, r18
     fc8:	23 2f       	mov	r18, r19
     fca:	34 2f       	mov	r19, r20
     fcc:	44 27       	eor	r20, r20
     fce:	58 5f       	subi	r21, 0xF8	; 248
     fd0:	f3 cf       	rjmp	.-26     	; 0xfb8 <__addsf3x+0x34>
     fd2:	46 95       	lsr	r20
     fd4:	37 95       	ror	r19
     fd6:	27 95       	ror	r18
     fd8:	a7 95       	ror	r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	53 95       	inc	r21
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__addsf3x+0x4e>
     fe0:	7e f4       	brtc	.+30     	; 0x1000 <__addsf3x+0x7c>
     fe2:	1f 16       	cp	r1, r31
     fe4:	ba 0b       	sbc	r27, r26
     fe6:	62 0b       	sbc	r22, r18
     fe8:	73 0b       	sbc	r23, r19
     fea:	84 0b       	sbc	r24, r20
     fec:	ba f0       	brmi	.+46     	; 0x101c <__addsf3x+0x98>
     fee:	91 50       	subi	r25, 0x01	; 1
     ff0:	a1 f0       	breq	.+40     	; 0x101a <__addsf3x+0x96>
     ff2:	ff 0f       	add	r31, r31
     ff4:	bb 1f       	adc	r27, r27
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	c2 f7       	brpl	.-16     	; 0xfee <__addsf3x+0x6a>
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <__addsf3x+0x98>
    1000:	ba 0f       	add	r27, r26
    1002:	62 1f       	adc	r22, r18
    1004:	73 1f       	adc	r23, r19
    1006:	84 1f       	adc	r24, r20
    1008:	48 f4       	brcc	.+18     	; 0x101c <__addsf3x+0x98>
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f7 95       	ror	r31
    1014:	9e 3f       	cpi	r25, 0xFE	; 254
    1016:	08 f0       	brcs	.+2      	; 0x101a <__addsf3x+0x96>
    1018:	b3 cf       	rjmp	.-154    	; 0xf80 <__addsf3+0x1e>
    101a:	93 95       	inc	r25
    101c:	88 0f       	add	r24, r24
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0x9e>
    1020:	99 27       	eor	r25, r25
    1022:	ee 0f       	add	r30, r30
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	08 95       	ret

0000102a <__cmpsf2>:
    102a:	d9 d0       	rcall	.+434    	; 0x11de <__fp_cmp>
    102c:	08 f4       	brcc	.+2      	; 0x1030 <__cmpsf2+0x6>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	08 95       	ret

00001032 <__divsf3>:
    1032:	0c d0       	rcall	.+24     	; 0x104c <__divsf3x>
    1034:	0f c1       	rjmp	.+542    	; 0x1254 <__fp_round>
    1036:	07 d1       	rcall	.+526    	; 0x1246 <__fp_pscB>
    1038:	40 f0       	brcs	.+16     	; 0x104a <__divsf3+0x18>
    103a:	fe d0       	rcall	.+508    	; 0x1238 <__fp_pscA>
    103c:	30 f0       	brcs	.+12     	; 0x104a <__divsf3+0x18>
    103e:	21 f4       	brne	.+8      	; 0x1048 <__divsf3+0x16>
    1040:	5f 3f       	cpi	r21, 0xFF	; 255
    1042:	19 f0       	breq	.+6      	; 0x104a <__divsf3+0x18>
    1044:	f0 c0       	rjmp	.+480    	; 0x1226 <__fp_inf>
    1046:	51 11       	cpse	r21, r1
    1048:	39 c1       	rjmp	.+626    	; 0x12bc <__fp_szero>
    104a:	f3 c0       	rjmp	.+486    	; 0x1232 <__fp_nan>

0000104c <__divsf3x>:
    104c:	14 d1       	rcall	.+552    	; 0x1276 <__fp_split3>
    104e:	98 f3       	brcs	.-26     	; 0x1036 <__divsf3+0x4>

00001050 <__divsf3_pse>:
    1050:	99 23       	and	r25, r25
    1052:	c9 f3       	breq	.-14     	; 0x1046 <__divsf3+0x14>
    1054:	55 23       	and	r21, r21
    1056:	b1 f3       	breq	.-20     	; 0x1044 <__divsf3+0x12>
    1058:	95 1b       	sub	r25, r21
    105a:	55 0b       	sbc	r21, r21
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	62 17       	cp	r22, r18
    1062:	73 07       	cpc	r23, r19
    1064:	84 07       	cpc	r24, r20
    1066:	38 f0       	brcs	.+14     	; 0x1076 <__divsf3_pse+0x26>
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	44 1f       	adc	r20, r20
    1072:	aa 1f       	adc	r26, r26
    1074:	a9 f3       	breq	.-22     	; 0x1060 <__divsf3_pse+0x10>
    1076:	33 d0       	rcall	.+102    	; 0x10de <__divsf3_pse+0x8e>
    1078:	0e 2e       	mov	r0, r30
    107a:	3a f0       	brmi	.+14     	; 0x108a <__divsf3_pse+0x3a>
    107c:	e0 e8       	ldi	r30, 0x80	; 128
    107e:	30 d0       	rcall	.+96     	; 0x10e0 <__divsf3_pse+0x90>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	e6 95       	lsr	r30
    1086:	00 1c       	adc	r0, r0
    1088:	ca f7       	brpl	.-14     	; 0x107c <__divsf3_pse+0x2c>
    108a:	29 d0       	rcall	.+82     	; 0x10de <__divsf3_pse+0x8e>
    108c:	fe 2f       	mov	r31, r30
    108e:	27 d0       	rcall	.+78     	; 0x10de <__divsf3_pse+0x8e>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	bb 1f       	adc	r27, r27
    1098:	26 17       	cp	r18, r22
    109a:	37 07       	cpc	r19, r23
    109c:	48 07       	cpc	r20, r24
    109e:	ab 07       	cpc	r26, r27
    10a0:	b0 e8       	ldi	r27, 0x80	; 128
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__divsf3_pse+0x56>
    10a4:	bb 0b       	sbc	r27, r27
    10a6:	80 2d       	mov	r24, r0
    10a8:	bf 01       	movw	r22, r30
    10aa:	ff 27       	eor	r31, r31
    10ac:	93 58       	subi	r25, 0x83	; 131
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	2a f0       	brmi	.+10     	; 0x10bc <__divsf3_pse+0x6c>
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	51 05       	cpc	r21, r1
    10b6:	68 f0       	brcs	.+26     	; 0x10d2 <__divsf3_pse+0x82>
    10b8:	b6 c0       	rjmp	.+364    	; 0x1226 <__fp_inf>
    10ba:	00 c1       	rjmp	.+512    	; 0x12bc <__fp_szero>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	ec f3       	brlt	.-6      	; 0x10ba <__divsf3_pse+0x6a>
    10c0:	98 3e       	cpi	r25, 0xE8	; 232
    10c2:	dc f3       	brlt	.-10     	; 0x10ba <__divsf3_pse+0x6a>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	9f 5f       	subi	r25, 0xFF	; 255
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <__divsf3_pse+0x74>
    10d2:	88 0f       	add	r24, r24
    10d4:	91 1d       	adc	r25, r1
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	97 f9       	bld	r25, 7
    10dc:	08 95       	ret
    10de:	e1 e0       	ldi	r30, 0x01	; 1
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	bb 1f       	adc	r27, r27
    10e8:	62 17       	cp	r22, r18
    10ea:	73 07       	cpc	r23, r19
    10ec:	84 07       	cpc	r24, r20
    10ee:	ba 07       	cpc	r27, r26
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <__divsf3_pse+0xaa>
    10f2:	62 1b       	sub	r22, r18
    10f4:	73 0b       	sbc	r23, r19
    10f6:	84 0b       	sbc	r24, r20
    10f8:	ba 0b       	sbc	r27, r26
    10fa:	ee 1f       	adc	r30, r30
    10fc:	88 f7       	brcc	.-30     	; 0x10e0 <__divsf3_pse+0x90>
    10fe:	e0 95       	com	r30
    1100:	08 95       	ret

00001102 <__fixsfsi>:
    1102:	04 d0       	rcall	.+8      	; 0x110c <__fixunssfsi>
    1104:	68 94       	set
    1106:	b1 11       	cpse	r27, r1
    1108:	d9 c0       	rjmp	.+434    	; 0x12bc <__fp_szero>
    110a:	08 95       	ret

0000110c <__fixunssfsi>:
    110c:	bc d0       	rcall	.+376    	; 0x1286 <__fp_splitA>
    110e:	88 f0       	brcs	.+34     	; 0x1132 <__fixunssfsi+0x26>
    1110:	9f 57       	subi	r25, 0x7F	; 127
    1112:	90 f0       	brcs	.+36     	; 0x1138 <__fixunssfsi+0x2c>
    1114:	b9 2f       	mov	r27, r25
    1116:	99 27       	eor	r25, r25
    1118:	b7 51       	subi	r27, 0x17	; 23
    111a:	a0 f0       	brcs	.+40     	; 0x1144 <__fixunssfsi+0x38>
    111c:	d1 f0       	breq	.+52     	; 0x1152 <__fixunssfsi+0x46>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	1a f0       	brmi	.+6      	; 0x112e <__fixunssfsi+0x22>
    1128:	ba 95       	dec	r27
    112a:	c9 f7       	brne	.-14     	; 0x111e <__fixunssfsi+0x12>
    112c:	12 c0       	rjmp	.+36     	; 0x1152 <__fixunssfsi+0x46>
    112e:	b1 30       	cpi	r27, 0x01	; 1
    1130:	81 f0       	breq	.+32     	; 0x1152 <__fixunssfsi+0x46>
    1132:	c3 d0       	rcall	.+390    	; 0x12ba <__fp_zero>
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	08 95       	ret
    1138:	c0 c0       	rjmp	.+384    	; 0x12ba <__fp_zero>
    113a:	67 2f       	mov	r22, r23
    113c:	78 2f       	mov	r23, r24
    113e:	88 27       	eor	r24, r24
    1140:	b8 5f       	subi	r27, 0xF8	; 248
    1142:	39 f0       	breq	.+14     	; 0x1152 <__fixunssfsi+0x46>
    1144:	b9 3f       	cpi	r27, 0xF9	; 249
    1146:	cc f3       	brlt	.-14     	; 0x113a <__fixunssfsi+0x2e>
    1148:	86 95       	lsr	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b3 95       	inc	r27
    1150:	d9 f7       	brne	.-10     	; 0x1148 <__fixunssfsi+0x3c>
    1152:	3e f4       	brtc	.+14     	; 0x1162 <__fixunssfsi+0x56>
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__floatunsisf>:
    1164:	e8 94       	clt
    1166:	09 c0       	rjmp	.+18     	; 0x117a <__floatsisf+0x12>

00001168 <__floatsisf>:
    1168:	97 fb       	bst	r25, 7
    116a:	3e f4       	brtc	.+14     	; 0x117a <__floatsisf+0x12>
    116c:	90 95       	com	r25
    116e:	80 95       	com	r24
    1170:	70 95       	com	r23
    1172:	61 95       	neg	r22
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	99 23       	and	r25, r25
    117c:	a9 f0       	breq	.+42     	; 0x11a8 <__floatsisf+0x40>
    117e:	f9 2f       	mov	r31, r25
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	bb 27       	eor	r27, r27
    1184:	93 95       	inc	r25
    1186:	f6 95       	lsr	r31
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f1 11       	cpse	r31, r1
    1192:	f8 cf       	rjmp	.-16     	; 0x1184 <__floatsisf+0x1c>
    1194:	fa f4       	brpl	.+62     	; 0x11d4 <__floatsisf+0x6c>
    1196:	bb 0f       	add	r27, r27
    1198:	11 f4       	brne	.+4      	; 0x119e <__floatsisf+0x36>
    119a:	60 ff       	sbrs	r22, 0
    119c:	1b c0       	rjmp	.+54     	; 0x11d4 <__floatsisf+0x6c>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <__floatsisf+0x6c>
    11a8:	88 23       	and	r24, r24
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <__floatsisf+0x48>
    11ac:	96 e9       	ldi	r25, 0x96	; 150
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <__floatsisf+0x6a>
    11b0:	77 23       	and	r23, r23
    11b2:	21 f0       	breq	.+8      	; 0x11bc <__floatsisf+0x54>
    11b4:	9e e8       	ldi	r25, 0x8E	; 142
    11b6:	87 2f       	mov	r24, r23
    11b8:	76 2f       	mov	r23, r22
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__floatsisf+0x5e>
    11bc:	66 23       	and	r22, r22
    11be:	71 f0       	breq	.+28     	; 0x11dc <__floatsisf+0x74>
    11c0:	96 e8       	ldi	r25, 0x86	; 134
    11c2:	86 2f       	mov	r24, r22
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	2a f0       	brmi	.+10     	; 0x11d4 <__floatsisf+0x6c>
    11ca:	9a 95       	dec	r25
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	da f7       	brpl	.-10     	; 0x11ca <__floatsisf+0x62>
    11d4:	88 0f       	add	r24, r24
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <__fp_cmp>:
    11de:	99 0f       	add	r25, r25
    11e0:	00 08       	sbc	r0, r0
    11e2:	55 0f       	add	r21, r21
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	e0 e8       	ldi	r30, 0x80	; 128
    11e8:	fe ef       	ldi	r31, 0xFE	; 254
    11ea:	16 16       	cp	r1, r22
    11ec:	17 06       	cpc	r1, r23
    11ee:	e8 07       	cpc	r30, r24
    11f0:	f9 07       	cpc	r31, r25
    11f2:	c0 f0       	brcs	.+48     	; 0x1224 <__fp_cmp+0x46>
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	e4 07       	cpc	r30, r20
    11fa:	f5 07       	cpc	r31, r21
    11fc:	98 f0       	brcs	.+38     	; 0x1224 <__fp_cmp+0x46>
    11fe:	62 1b       	sub	r22, r18
    1200:	73 0b       	sbc	r23, r19
    1202:	84 0b       	sbc	r24, r20
    1204:	95 0b       	sbc	r25, r21
    1206:	39 f4       	brne	.+14     	; 0x1216 <__fp_cmp+0x38>
    1208:	0a 26       	eor	r0, r26
    120a:	61 f0       	breq	.+24     	; 0x1224 <__fp_cmp+0x46>
    120c:	23 2b       	or	r18, r19
    120e:	24 2b       	or	r18, r20
    1210:	25 2b       	or	r18, r21
    1212:	21 f4       	brne	.+8      	; 0x121c <__fp_cmp+0x3e>
    1214:	08 95       	ret
    1216:	0a 26       	eor	r0, r26
    1218:	09 f4       	brne	.+2      	; 0x121c <__fp_cmp+0x3e>
    121a:	a1 40       	sbci	r26, 0x01	; 1
    121c:	a6 95       	lsr	r26
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	81 1d       	adc	r24, r1
    1222:	81 1d       	adc	r24, r1
    1224:	08 95       	ret

00001226 <__fp_inf>:
    1226:	97 f9       	bld	r25, 7
    1228:	9f 67       	ori	r25, 0x7F	; 127
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	08 95       	ret

00001232 <__fp_nan>:
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	80 ec       	ldi	r24, 0xC0	; 192
    1236:	08 95       	ret

00001238 <__fp_pscA>:
    1238:	00 24       	eor	r0, r0
    123a:	0a 94       	dec	r0
    123c:	16 16       	cp	r1, r22
    123e:	17 06       	cpc	r1, r23
    1240:	18 06       	cpc	r1, r24
    1242:	09 06       	cpc	r0, r25
    1244:	08 95       	ret

00001246 <__fp_pscB>:
    1246:	00 24       	eor	r0, r0
    1248:	0a 94       	dec	r0
    124a:	12 16       	cp	r1, r18
    124c:	13 06       	cpc	r1, r19
    124e:	14 06       	cpc	r1, r20
    1250:	05 06       	cpc	r0, r21
    1252:	08 95       	ret

00001254 <__fp_round>:
    1254:	09 2e       	mov	r0, r25
    1256:	03 94       	inc	r0
    1258:	00 0c       	add	r0, r0
    125a:	11 f4       	brne	.+4      	; 0x1260 <__fp_round+0xc>
    125c:	88 23       	and	r24, r24
    125e:	52 f0       	brmi	.+20     	; 0x1274 <__fp_round+0x20>
    1260:	bb 0f       	add	r27, r27
    1262:	40 f4       	brcc	.+16     	; 0x1274 <__fp_round+0x20>
    1264:	bf 2b       	or	r27, r31
    1266:	11 f4       	brne	.+4      	; 0x126c <__fp_round+0x18>
    1268:	60 ff       	sbrs	r22, 0
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <__fp_round+0x20>
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__fp_split3>:
    1276:	57 fd       	sbrc	r21, 7
    1278:	90 58       	subi	r25, 0x80	; 128
    127a:	44 0f       	add	r20, r20
    127c:	55 1f       	adc	r21, r21
    127e:	59 f0       	breq	.+22     	; 0x1296 <__fp_splitA+0x10>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	71 f0       	breq	.+28     	; 0x12a0 <__fp_splitA+0x1a>
    1284:	47 95       	ror	r20

00001286 <__fp_splitA>:
    1286:	88 0f       	add	r24, r24
    1288:	97 fb       	bst	r25, 7
    128a:	99 1f       	adc	r25, r25
    128c:	61 f0       	breq	.+24     	; 0x12a6 <__fp_splitA+0x20>
    128e:	9f 3f       	cpi	r25, 0xFF	; 255
    1290:	79 f0       	breq	.+30     	; 0x12b0 <__fp_splitA+0x2a>
    1292:	87 95       	ror	r24
    1294:	08 95       	ret
    1296:	12 16       	cp	r1, r18
    1298:	13 06       	cpc	r1, r19
    129a:	14 06       	cpc	r1, r20
    129c:	55 1f       	adc	r21, r21
    129e:	f2 cf       	rjmp	.-28     	; 0x1284 <__fp_split3+0xe>
    12a0:	46 95       	lsr	r20
    12a2:	f1 df       	rcall	.-30     	; 0x1286 <__fp_splitA>
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <__fp_splitA+0x30>
    12a6:	16 16       	cp	r1, r22
    12a8:	17 06       	cpc	r1, r23
    12aa:	18 06       	cpc	r1, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	f1 cf       	rjmp	.-30     	; 0x1292 <__fp_splitA+0xc>
    12b0:	86 95       	lsr	r24
    12b2:	71 05       	cpc	r23, r1
    12b4:	61 05       	cpc	r22, r1
    12b6:	08 94       	sec
    12b8:	08 95       	ret

000012ba <__fp_zero>:
    12ba:	e8 94       	clt

000012bc <__fp_szero>:
    12bc:	bb 27       	eor	r27, r27
    12be:	66 27       	eor	r22, r22
    12c0:	77 27       	eor	r23, r23
    12c2:	cb 01       	movw	r24, r22
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__gesf2>:
    12c8:	8a df       	rcall	.-236    	; 0x11de <__fp_cmp>
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <__gesf2+0x6>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__mulsf3>:
    12d0:	0b d0       	rcall	.+22     	; 0x12e8 <__mulsf3x>
    12d2:	c0 cf       	rjmp	.-128    	; 0x1254 <__fp_round>
    12d4:	b1 df       	rcall	.-158    	; 0x1238 <__fp_pscA>
    12d6:	28 f0       	brcs	.+10     	; 0x12e2 <__mulsf3+0x12>
    12d8:	b6 df       	rcall	.-148    	; 0x1246 <__fp_pscB>
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <__mulsf3+0x12>
    12dc:	95 23       	and	r25, r21
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__mulsf3+0x12>
    12e0:	a2 cf       	rjmp	.-188    	; 0x1226 <__fp_inf>
    12e2:	a7 cf       	rjmp	.-178    	; 0x1232 <__fp_nan>
    12e4:	11 24       	eor	r1, r1
    12e6:	ea cf       	rjmp	.-44     	; 0x12bc <__fp_szero>

000012e8 <__mulsf3x>:
    12e8:	c6 df       	rcall	.-116    	; 0x1276 <__fp_split3>
    12ea:	a0 f3       	brcs	.-24     	; 0x12d4 <__mulsf3+0x4>

000012ec <__mulsf3_pse>:
    12ec:	95 9f       	mul	r25, r21
    12ee:	d1 f3       	breq	.-12     	; 0x12e4 <__mulsf3+0x14>
    12f0:	95 0f       	add	r25, r21
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	55 1f       	adc	r21, r21
    12f6:	62 9f       	mul	r22, r18
    12f8:	f0 01       	movw	r30, r0
    12fa:	72 9f       	mul	r23, r18
    12fc:	bb 27       	eor	r27, r27
    12fe:	f0 0d       	add	r31, r0
    1300:	b1 1d       	adc	r27, r1
    1302:	63 9f       	mul	r22, r19
    1304:	aa 27       	eor	r26, r26
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	aa 1f       	adc	r26, r26
    130c:	64 9f       	mul	r22, r20
    130e:	66 27       	eor	r22, r22
    1310:	b0 0d       	add	r27, r0
    1312:	a1 1d       	adc	r26, r1
    1314:	66 1f       	adc	r22, r22
    1316:	82 9f       	mul	r24, r18
    1318:	22 27       	eor	r18, r18
    131a:	b0 0d       	add	r27, r0
    131c:	a1 1d       	adc	r26, r1
    131e:	62 1f       	adc	r22, r18
    1320:	73 9f       	mul	r23, r19
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	83 9f       	mul	r24, r19
    132a:	a0 0d       	add	r26, r0
    132c:	61 1d       	adc	r22, r1
    132e:	22 1f       	adc	r18, r18
    1330:	74 9f       	mul	r23, r20
    1332:	33 27       	eor	r19, r19
    1334:	a0 0d       	add	r26, r0
    1336:	61 1d       	adc	r22, r1
    1338:	23 1f       	adc	r18, r19
    133a:	84 9f       	mul	r24, r20
    133c:	60 0d       	add	r22, r0
    133e:	21 1d       	adc	r18, r1
    1340:	82 2f       	mov	r24, r18
    1342:	76 2f       	mov	r23, r22
    1344:	6a 2f       	mov	r22, r26
    1346:	11 24       	eor	r1, r1
    1348:	9f 57       	subi	r25, 0x7F	; 127
    134a:	50 40       	sbci	r21, 0x00	; 0
    134c:	8a f0       	brmi	.+34     	; 0x1370 <__mulsf3_pse+0x84>
    134e:	e1 f0       	breq	.+56     	; 0x1388 <__mulsf3_pse+0x9c>
    1350:	88 23       	and	r24, r24
    1352:	4a f0       	brmi	.+18     	; 0x1366 <__mulsf3_pse+0x7a>
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	91 50       	subi	r25, 0x01	; 1
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__mulsf3_pse+0x64>
    1366:	9e 3f       	cpi	r25, 0xFE	; 254
    1368:	51 05       	cpc	r21, r1
    136a:	70 f0       	brcs	.+28     	; 0x1388 <__mulsf3_pse+0x9c>
    136c:	5c cf       	rjmp	.-328    	; 0x1226 <__fp_inf>
    136e:	a6 cf       	rjmp	.-180    	; 0x12bc <__fp_szero>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	ec f3       	brlt	.-6      	; 0x136e <__mulsf3_pse+0x82>
    1374:	98 3e       	cpi	r25, 0xE8	; 232
    1376:	dc f3       	brlt	.-10     	; 0x136e <__mulsf3_pse+0x82>
    1378:	86 95       	lsr	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	f7 95       	ror	r31
    1382:	e7 95       	ror	r30
    1384:	9f 5f       	subi	r25, 0xFF	; 255
    1386:	c1 f7       	brne	.-16     	; 0x1378 <__mulsf3_pse+0x8c>
    1388:	fe 2b       	or	r31, r30
    138a:	88 0f       	add	r24, r24
    138c:	91 1d       	adc	r25, r1
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	97 f9       	bld	r25, 7
    1394:	08 95       	ret

00001396 <calloc>:
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	86 9f       	mul	r24, r22
    13a0:	80 01       	movw	r16, r0
    13a2:	87 9f       	mul	r24, r23
    13a4:	10 0d       	add	r17, r0
    13a6:	96 9f       	mul	r25, r22
    13a8:	10 0d       	add	r17, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	c8 01       	movw	r24, r16
    13ae:	0d d0       	rcall	.+26     	; 0x13ca <malloc>
    13b0:	ec 01       	movw	r28, r24
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	21 f0       	breq	.+8      	; 0x13be <calloc+0x28>
    13b6:	a8 01       	movw	r20, r16
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	33 d1       	rcall	.+614    	; 0x1624 <memset>
    13be:	ce 01       	movw	r24, r28
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <malloc>:
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	10 f4       	brcc	.+4      	; 0x13d8 <malloc+0xe>
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	e0 91 48 02 	lds	r30, 0x0248
    13dc:	f0 91 49 02 	lds	r31, 0x0249
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	c0 e0       	ldi	r28, 0x00	; 0
    13e6:	d0 e0       	ldi	r29, 0x00	; 0
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	11 f1       	breq	.+68     	; 0x1430 <malloc+0x66>
    13ec:	40 81       	ld	r20, Z
    13ee:	51 81       	ldd	r21, Z+1	; 0x01
    13f0:	48 17       	cp	r20, r24
    13f2:	59 07       	cpc	r21, r25
    13f4:	c0 f0       	brcs	.+48     	; 0x1426 <malloc+0x5c>
    13f6:	48 17       	cp	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	61 f4       	brne	.+24     	; 0x1414 <malloc+0x4a>
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 97       	sbiw	r28, 0x00	; 0
    1402:	19 f0       	breq	.+6      	; 0x140a <malloc+0x40>
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	2b c0       	rjmp	.+86     	; 0x1460 <malloc+0x96>
    140a:	90 93 49 02 	sts	0x0249, r25
    140e:	80 93 48 02 	sts	0x0248, r24
    1412:	26 c0       	rjmp	.+76     	; 0x1460 <malloc+0x96>
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	19 f0       	breq	.+6      	; 0x1420 <malloc+0x56>
    141a:	42 17       	cp	r20, r18
    141c:	53 07       	cpc	r21, r19
    141e:	18 f4       	brcc	.+6      	; 0x1426 <malloc+0x5c>
    1420:	9a 01       	movw	r18, r20
    1422:	be 01       	movw	r22, r28
    1424:	df 01       	movw	r26, r30
    1426:	ef 01       	movw	r28, r30
    1428:	02 80       	ldd	r0, Z+2	; 0x02
    142a:	f3 81       	ldd	r31, Z+3	; 0x03
    142c:	e0 2d       	mov	r30, r0
    142e:	dc cf       	rjmp	.-72     	; 0x13e8 <malloc+0x1e>
    1430:	21 15       	cp	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	09 f1       	breq	.+66     	; 0x1478 <malloc+0xae>
    1436:	28 1b       	sub	r18, r24
    1438:	39 0b       	sbc	r19, r25
    143a:	24 30       	cpi	r18, 0x04	; 4
    143c:	31 05       	cpc	r19, r1
    143e:	90 f4       	brcc	.+36     	; 0x1464 <malloc+0x9a>
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	8d 91       	ld	r24, X+
    1444:	9c 91       	ld	r25, X
    1446:	13 97       	sbiw	r26, 0x03	; 3
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	21 f0       	breq	.+8      	; 0x1456 <malloc+0x8c>
    144e:	fb 01       	movw	r30, r22
    1450:	93 83       	std	Z+3, r25	; 0x03
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	04 c0       	rjmp	.+8      	; 0x145e <malloc+0x94>
    1456:	90 93 49 02 	sts	0x0249, r25
    145a:	80 93 48 02 	sts	0x0248, r24
    145e:	fd 01       	movw	r30, r26
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	44 c0       	rjmp	.+136    	; 0x14ec <malloc+0x122>
    1464:	fd 01       	movw	r30, r26
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	81 93       	st	Z+, r24
    146c:	91 93       	st	Z+, r25
    146e:	22 50       	subi	r18, 0x02	; 2
    1470:	31 09       	sbc	r19, r1
    1472:	2d 93       	st	X+, r18
    1474:	3c 93       	st	X, r19
    1476:	3a c0       	rjmp	.+116    	; 0x14ec <malloc+0x122>
    1478:	20 91 46 02 	lds	r18, 0x0246
    147c:	30 91 47 02 	lds	r19, 0x0247
    1480:	23 2b       	or	r18, r19
    1482:	41 f4       	brne	.+16     	; 0x1494 <malloc+0xca>
    1484:	20 91 02 01 	lds	r18, 0x0102
    1488:	30 91 03 01 	lds	r19, 0x0103
    148c:	30 93 47 02 	sts	0x0247, r19
    1490:	20 93 46 02 	sts	0x0246, r18
    1494:	20 91 00 01 	lds	r18, 0x0100
    1498:	30 91 01 01 	lds	r19, 0x0101
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	41 f4       	brne	.+16     	; 0x14b2 <malloc+0xe8>
    14a2:	2d b7       	in	r18, 0x3d	; 61
    14a4:	3e b7       	in	r19, 0x3e	; 62
    14a6:	40 91 04 01 	lds	r20, 0x0104
    14aa:	50 91 05 01 	lds	r21, 0x0105
    14ae:	24 1b       	sub	r18, r20
    14b0:	35 0b       	sbc	r19, r21
    14b2:	e0 91 46 02 	lds	r30, 0x0246
    14b6:	f0 91 47 02 	lds	r31, 0x0247
    14ba:	e2 17       	cp	r30, r18
    14bc:	f3 07       	cpc	r31, r19
    14be:	a0 f4       	brcc	.+40     	; 0x14e8 <malloc+0x11e>
    14c0:	2e 1b       	sub	r18, r30
    14c2:	3f 0b       	sbc	r19, r31
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	78 f0       	brcs	.+30     	; 0x14e8 <malloc+0x11e>
    14ca:	ac 01       	movw	r20, r24
    14cc:	4e 5f       	subi	r20, 0xFE	; 254
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	24 17       	cp	r18, r20
    14d2:	35 07       	cpc	r19, r21
    14d4:	48 f0       	brcs	.+18     	; 0x14e8 <malloc+0x11e>
    14d6:	4e 0f       	add	r20, r30
    14d8:	5f 1f       	adc	r21, r31
    14da:	50 93 47 02 	sts	0x0247, r21
    14de:	40 93 46 02 	sts	0x0246, r20
    14e2:	81 93       	st	Z+, r24
    14e4:	91 93       	st	Z+, r25
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <malloc+0x122>
    14e8:	e0 e0       	ldi	r30, 0x00	; 0
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	cf 01       	movw	r24, r30
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <free>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <free+0xe>
    1500:	8c c0       	rjmp	.+280    	; 0x161a <free+0x126>
    1502:	fc 01       	movw	r30, r24
    1504:	32 97       	sbiw	r30, 0x02	; 2
    1506:	13 82       	std	Z+3, r1	; 0x03
    1508:	12 82       	std	Z+2, r1	; 0x02
    150a:	00 91 48 02 	lds	r16, 0x0248
    150e:	10 91 49 02 	lds	r17, 0x0249
    1512:	01 15       	cp	r16, r1
    1514:	11 05       	cpc	r17, r1
    1516:	81 f4       	brne	.+32     	; 0x1538 <free+0x44>
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	20 91 46 02 	lds	r18, 0x0246
    1524:	30 91 47 02 	lds	r19, 0x0247
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	79 f5       	brne	.+94     	; 0x158c <free+0x98>
    152e:	f0 93 47 02 	sts	0x0247, r31
    1532:	e0 93 46 02 	sts	0x0246, r30
    1536:	71 c0       	rjmp	.+226    	; 0x161a <free+0x126>
    1538:	d8 01       	movw	r26, r16
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	ae 17       	cp	r26, r30
    1540:	bf 07       	cpc	r27, r31
    1542:	50 f4       	brcc	.+20     	; 0x1558 <free+0x64>
    1544:	12 96       	adiw	r26, 0x02	; 2
    1546:	2d 91       	ld	r18, X+
    1548:	3c 91       	ld	r19, X
    154a:	13 97       	sbiw	r26, 0x03	; 3
    154c:	ad 01       	movw	r20, r26
    154e:	21 15       	cp	r18, r1
    1550:	31 05       	cpc	r19, r1
    1552:	09 f1       	breq	.+66     	; 0x1596 <free+0xa2>
    1554:	d9 01       	movw	r26, r18
    1556:	f3 cf       	rjmp	.-26     	; 0x153e <free+0x4a>
    1558:	9d 01       	movw	r18, r26
    155a:	da 01       	movw	r26, r20
    155c:	33 83       	std	Z+3, r19	; 0x03
    155e:	22 83       	std	Z+2, r18	; 0x02
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	86 0f       	add	r24, r22
    1566:	97 1f       	adc	r25, r23
    1568:	82 17       	cp	r24, r18
    156a:	93 07       	cpc	r25, r19
    156c:	69 f4       	brne	.+26     	; 0x1588 <free+0x94>
    156e:	ec 01       	movw	r28, r24
    1570:	28 81       	ld	r18, Y
    1572:	39 81       	ldd	r19, Y+1	; 0x01
    1574:	26 0f       	add	r18, r22
    1576:	37 1f       	adc	r19, r23
    1578:	2e 5f       	subi	r18, 0xFE	; 254
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	93 83       	std	Z+3, r25	; 0x03
    1586:	82 83       	std	Z+2, r24	; 0x02
    1588:	45 2b       	or	r20, r21
    158a:	29 f4       	brne	.+10     	; 0x1596 <free+0xa2>
    158c:	f0 93 49 02 	sts	0x0249, r31
    1590:	e0 93 48 02 	sts	0x0248, r30
    1594:	42 c0       	rjmp	.+132    	; 0x161a <free+0x126>
    1596:	13 96       	adiw	r26, 0x03	; 3
    1598:	fc 93       	st	X, r31
    159a:	ee 93       	st	-X, r30
    159c:	12 97       	sbiw	r26, 0x02	; 2
    159e:	ed 01       	movw	r28, r26
    15a0:	49 91       	ld	r20, Y+
    15a2:	59 91       	ld	r21, Y+
    15a4:	9e 01       	movw	r18, r28
    15a6:	24 0f       	add	r18, r20
    15a8:	35 1f       	adc	r19, r21
    15aa:	e2 17       	cp	r30, r18
    15ac:	f3 07       	cpc	r31, r19
    15ae:	71 f4       	brne	.+28     	; 0x15cc <free+0xd8>
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	84 0f       	add	r24, r20
    15b6:	95 1f       	adc	r25, r21
    15b8:	02 96       	adiw	r24, 0x02	; 2
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	13 96       	adiw	r26, 0x03	; 3
    15c6:	9c 93       	st	X, r25
    15c8:	8e 93       	st	-X, r24
    15ca:	12 97       	sbiw	r26, 0x02	; 2
    15cc:	e0 e0       	ldi	r30, 0x00	; 0
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	d8 01       	movw	r26, r16
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	8d 91       	ld	r24, X+
    15d6:	9c 91       	ld	r25, X
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <free+0xf0>
    15de:	f8 01       	movw	r30, r16
    15e0:	8c 01       	movw	r16, r24
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <free+0xdc>
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	98 01       	movw	r18, r16
    15ea:	2e 5f       	subi	r18, 0xFE	; 254
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	20 91 46 02 	lds	r18, 0x0246
    15f6:	30 91 47 02 	lds	r19, 0x0247
    15fa:	28 17       	cp	r18, r24
    15fc:	39 07       	cpc	r19, r25
    15fe:	69 f4       	brne	.+26     	; 0x161a <free+0x126>
    1600:	30 97       	sbiw	r30, 0x00	; 0
    1602:	29 f4       	brne	.+10     	; 0x160e <free+0x11a>
    1604:	10 92 49 02 	sts	0x0249, r1
    1608:	10 92 48 02 	sts	0x0248, r1
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <free+0x11e>
    160e:	13 82       	std	Z+3, r1	; 0x03
    1610:	12 82       	std	Z+2, r1	; 0x02
    1612:	10 93 47 02 	sts	0x0247, r17
    1616:	00 93 46 02 	sts	0x0246, r16
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <memset>:
    1624:	dc 01       	movw	r26, r24
    1626:	01 c0       	rjmp	.+2      	; 0x162a <memset+0x6>
    1628:	6d 93       	st	X+, r22
    162a:	41 50       	subi	r20, 0x01	; 1
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	e0 f7       	brcc	.-8      	; 0x1628 <memset+0x4>
    1630:	08 95       	ret

00001632 <_exit>:
    1632:	f8 94       	cli

00001634 <__stop_program>:
    1634:	ff cf       	rjmp	.-2      	; 0x1634 <__stop_program>
