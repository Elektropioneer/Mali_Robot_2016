
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
<<<<<<< HEAD
  0 .data         00000028  00800100  00001fe4  00002078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800128  00800128  000020a0  2**0
                  ALLOC
  3 .debug_aranges 000002a8  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000590  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b50  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fc  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c89  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  000069b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f2  00000000  00000000  00006de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000260  00000000  00000000  000075d2  2**0
=======
  0 .data         00000006  00800100  00001636  000016ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800106  00800106  000016d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ced  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e3  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da7  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00003d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  0000424e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004d8b  2**0
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
  0 .data         0000001c  00800100  000021ae  00002242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080011c  0080011c  0000225e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a70  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000943  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c1  00000000  00000000  000048cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  0000618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a3  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d2  00000000  00000000  00007157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008229  2**0
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
<<<<<<< HEAD
<<<<<<< HEAD
void servo_set_vrata_position(int8_t angle)
{
	servo_set_duty_cycle_vrata( 255-(236.0 - ((double)angle / 90.0) * 11.4));
}
void actuators_setup_kisobran(void)
{
=======
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
<<<<<<< HEAD
	if(value != 0)
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}
=======
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
<<<<<<< HEAD
	if(sys_time >= 80000)
		actuators_kisobran();
	sys_time++;
}
uint8_t system_jumper_check(void)
{
=======
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      30:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_12>
=======
      30:	2b c5       	rjmp	.+2646   	; 0xa88 <__vector_12>
      32:	00 00       	nop
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      30:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_12>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      48:	f4 c2       	rjmp	.+1512   	; 0x632 <__vector_18>
=======
      48:	a6 c2       	rjmp	.+1356   	; 0x596 <__vector_18>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      48:	c1 c1       	rjmp	.+898    	; 0x3cc <__vector_18>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      54:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_23>
=======
      54:	ab c6       	rjmp	.+3414   	; 0xdac <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c6       	rjmp	.+3274   	; 0xd28 <__vector_23>
      5e:	00 00       	nop
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      54:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_23>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
<<<<<<< HEAD
<<<<<<< HEAD
      80:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_34>
=======
      80:	23 c7       	rjmp	.+3654   	; 0xec8 <__vector_32>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c6       	rjmp	.+3514   	; 0xe44 <__vector_34>
      8a:	00 00       	nop
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      80:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_34>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
<<<<<<< HEAD
      a6:	e4 ee       	ldi	r30, 0xE4	; 228
      a8:	ff e1       	ldi	r31, 0x1F	; 31
=======
      a6:	e6 e3       	ldi	r30, 0x36	; 54
      a8:	f6 e1       	ldi	r31, 0x16	; 22
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      a6:	ee ea       	ldi	r30, 0xAE	; 174
      a8:	f1 e2       	ldi	r31, 0x21	; 33
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
<<<<<<< HEAD
<<<<<<< HEAD
      b4:	a8 32       	cpi	r26, 0x28	; 40
=======
      b4:	a6 30       	cpi	r26, 0x06	; 6
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      b4:	ac 31       	cpi	r26, 0x1C	; 28
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
<<<<<<< HEAD
<<<<<<< HEAD
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a8 e2       	ldi	r26, 0x28	; 40
=======
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	a6 e0       	ldi	r26, 0x06	; 6
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
<<<<<<< HEAD
<<<<<<< HEAD
      c4:	a0 37       	cpi	r26, 0x70	; 112
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <_exit>
=======
      c4:	aa 34       	cpi	r26, 0x4A	; 74
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_exit>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      c4:	a3 36       	cpi	r26, 0x63	; 99
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <_exit>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
<<<<<<< HEAD
#include "sides.h"
#include "actuators.h"

=======
#include <stdio.h>
#include "odometry.h"
#include "actuators.h"
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

int main()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
<<<<<<< HEAD
<<<<<<< HEAD

	system_init();
      da:	0e 94 08 0b 	call	0x1610	; 0x1610 <system_init>
	//90
	
	while(1)
	{
		greenside();
      de:	2c d6       	rcall	.+3160   	; 0xd38 <greenside>
      e0:	fe cf       	rjmp	.-4      	; 0xde <main+0xc>

000000e2 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	df 93       	push	r29
      e8:	cf 93       	push	r28
      ea:	00 d0       	rcall	.+0      	; 0xec <servo_init+0xa>
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	9a 83       	std	Y+2, r25	; 0x02
      f2:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
      f4:	ad e2       	ldi	r26, 0x2D	; 45
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	ed e2       	ldi	r30, 0x2D	; 45
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	88 63       	ori	r24, 0x38	; 56
     100:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     102:	e4 e9       	ldi	r30, 0x94	; 148
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	11 82       	std	Z+1, r1	; 0x01
     108:	10 82       	st	Z, r1
	OCR3A = 0;
     10a:	e8 e9       	ldi	r30, 0x98	; 152
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	11 82       	std	Z+1, r1	; 0x01
     110:	10 82       	st	Z, r1
	OCR3B = 0;
     112:	ea e9       	ldi	r30, 0x9A	; 154
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	11 82       	std	Z+1, r1	; 0x01
     118:	10 82       	st	Z, r1
	OCR3C = 0;
     11a:	ec e9       	ldi	r30, 0x9C	; 156
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	11 82       	std	Z+1, r1	; 0x01
     120:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     122:	e0 e9       	ldi	r30, 0x90	; 144
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	8e eb       	ldi	r24, 0xBE	; 190
     128:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     12a:	e1 e9       	ldi	r30, 0x91	; 145
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	8a e1       	ldi	r24, 0x1A	; 26
     130:	80 83       	st	Z, r24
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     132:	06 e9       	ldi	r16, 0x96	; 150
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	9a 81       	ldd	r25, Y+2	; 0x02
     13a:	cc 01       	movw	r24, r24
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	bc 01       	movw	r22, r24
     142:	cd 01       	movw	r24, r26
     144:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__floatunsisf>
     148:	dc 01       	movw	r26, r24
     14a:	cb 01       	movw	r24, r22
     14c:	bc 01       	movw	r22, r24
     14e:	cd 01       	movw	r24, r26
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	51 e4       	ldi	r21, 0x41	; 65
     158:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     15c:	dc 01       	movw	r26, r24
     15e:	cb 01       	movw	r24, r22
     160:	9c 01       	movw	r18, r24
     162:	ad 01       	movw	r20, r26
     164:	60 e8       	ldi	r22, 0x80	; 128
     166:	76 e9       	ldi	r23, 0x96	; 150
     168:	88 e1       	ldi	r24, 0x18	; 24
     16a:	9b e4       	ldi	r25, 0x4B	; 75
     16c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	bc 01       	movw	r22, r24
     176:	cd 01       	movw	r24, r26
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e0       	ldi	r20, 0x00	; 0
     17e:	5f e3       	ldi	r21, 0x3F	; 63
     180:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	bc 01       	movw	r22, r24
     18a:	cd 01       	movw	r24, r26
     18c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     190:	dc 01       	movw	r26, r24
     192:	cb 01       	movw	r24, r22
     194:	f8 01       	movw	r30, r16
     196:	91 83       	std	Z+1, r25	; 0x01
     198:	80 83       	st	Z, r24
}//END OF servo_init
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	cf 91       	pop	r28
     1a0:	df 91       	pop	r29
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	08 95       	ret

000001a8 <servo_set_duty_cycle_kisobran>:


static void servo_set_duty_cycle_kisobran(int16_t value)
{
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <servo_set_duty_cycle_kisobran+0xe>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <servo_set_duty_cycle_kisobran+0x10>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     1c0:	e6 e9       	ldi	r30, 0x96	; 150
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	91 81       	ldd	r25, Z+1	; 0x01
     1c8:	cc 01       	movw	r24, r24
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	bc 01       	movw	r22, r24
     1d0:	cd 01       	movw	r24, r26
     1d2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__floatunsisf>
     1d6:	dc 01       	movw	r26, r24
     1d8:	cb 01       	movw	r24, r22
     1da:	bc 01       	movw	r22, r24
     1dc:	cd 01       	movw	r24, r26
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	4f e7       	ldi	r20, 0x7F	; 127
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	7c 01       	movw	r14, r24
     1f0:	8d 01       	movw	r16, r26
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	aa 27       	eor	r26, r26
     1f8:	97 fd       	sbrc	r25, 7
     1fa:	a0 95       	com	r26
     1fc:	ba 2f       	mov	r27, r26
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatsisf>
     206:	9b 01       	movw	r18, r22
     208:	ac 01       	movw	r20, r24
     20a:	c8 01       	movw	r24, r16
     20c:	b7 01       	movw	r22, r14
     20e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     212:	dc 01       	movw	r26, r24
     214:	cb 01       	movw	r24, r22
     216:	bc 01       	movw	r22, r24
     218:	cd 01       	movw	r24, r26
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	5f e3       	ldi	r21, 0x3F	; 63
     222:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	bc 01       	movw	r22, r24
     22c:	cd 01       	movw	r24, r26
     22e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     232:	dc 01       	movw	r26, r24
     234:	cb 01       	movw	r24, r22
     236:	9a 83       	std	Y+2, r25	; 0x02
     238:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     23a:	e9 e9       	ldi	r30, 0x99	; 153
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	89 2f       	mov	r24, r25
     244:	99 27       	eor	r25, r25
     246:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     248:	e8 e9       	ldi	r30, 0x98	; 152
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	80 83       	st	Z, r24
	
}//END OF servo_position
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	cf 91       	pop	r28
     25a:	df 91       	pop	r29
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	08 95       	ret

00000266 <servo_set_kisobran_position>:

void servo_set_kisobran_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	0f 92       	push	r0
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_kisobran( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	99 27       	eor	r25, r25
     276:	87 fd       	sbrc	r24, 7
     278:	90 95       	com	r25
     27a:	a9 2f       	mov	r26, r25
     27c:	b9 2f       	mov	r27, r25
     27e:	bc 01       	movw	r22, r24
     280:	cd 01       	movw	r24, r26
     282:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatsisf>
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	44 eb       	ldi	r20, 0xB4	; 180
     294:	52 e4       	ldi	r21, 0x42	; 66
     296:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	26 e6       	ldi	r18, 0x66	; 102
     2a4:	36 e6       	ldi	r19, 0x66	; 102
     2a6:	46 e3       	ldi	r20, 0x36	; 54
     2a8:	51 ec       	ldi	r21, 0xC1	; 193
     2aa:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	4c e6       	ldi	r20, 0x6C	; 108
     2bc:	53 e4       	ldi	r21, 0x43	; 67
     2be:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     2c2:	dc 01       	movw	r26, r24
     2c4:	cb 01       	movw	r24, r22
     2c6:	9c 01       	movw	r18, r24
     2c8:	ad 01       	movw	r20, r26
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	8f e7       	ldi	r24, 0x7F	; 127
     2d0:	93 e4       	ldi	r25, 0x43	; 67
     2d2:	0e 94 af 0c 	call	0x195e	; 0x195e <__subsf3>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__fixsfsi>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	60 df       	rcall	.-320    	; 0x1a8 <servo_set_duty_cycle_kisobran>

}
     2e8:	0f 90       	pop	r0
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	08 95       	ret

000002f0 <servo_set_duty_cycle_vrata>:

static void servo_set_duty_cycle_vrata(int16_t value)
{
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <servo_set_duty_cycle_vrata+0xe>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <servo_set_duty_cycle_vrata+0x10>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9c 83       	std	Y+4, r25	; 0x04
     306:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     308:	e6 e9       	ldi	r30, 0x96	; 150
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	cc 01       	movw	r24, r24
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__floatunsisf>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	4f e7       	ldi	r20, 0x7F	; 127
     32c:	53 e4       	ldi	r21, 0x43	; 67
     32e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	7c 01       	movw	r14, r24
     338:	8d 01       	movw	r16, r26
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatsisf>
     34e:	9b 01       	movw	r18, r22
     350:	ac 01       	movw	r20, r24
     352:	c8 01       	movw	r24, r16
     354:	b7 01       	movw	r22, r14
     356:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	5f e3       	ldi	r21, 0x3F	; 63
     36a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	9a 83       	std	Y+2, r25	; 0x02
     380:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     382:	eb e9       	ldi	r30, 0x9B	; 155
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	89 2f       	mov	r24, r25
     38c:	99 27       	eor	r25, r25
     38e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     390:	ea e9       	ldi	r30, 0x9A	; 154
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	80 83       	st	Z, r24
	
}//END OF servo_position
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <servo_set_vrata_position>:
void servo_set_vrata_position(int8_t angle)
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	0f 92       	push	r0
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_vrata( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	99 27       	eor	r25, r25
     3be:	87 fd       	sbrc	r24, 7
     3c0:	90 95       	com	r25
     3c2:	a9 2f       	mov	r26, r25
     3c4:	b9 2f       	mov	r27, r25
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatsisf>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	44 eb       	ldi	r20, 0xB4	; 180
     3dc:	52 e4       	ldi	r21, 0x42	; 66
     3de:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	26 e6       	ldi	r18, 0x66	; 102
     3ec:	36 e6       	ldi	r19, 0x66	; 102
     3ee:	46 e3       	ldi	r20, 0x36	; 54
     3f0:	51 ec       	ldi	r21, 0xC1	; 193
     3f2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	bc 01       	movw	r22, r24
     3fc:	cd 01       	movw	r24, r26
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	4c e6       	ldi	r20, 0x6C	; 108
     404:	53 e4       	ldi	r21, 0x43	; 67
     406:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	9c 01       	movw	r18, r24
     410:	ad 01       	movw	r20, r26
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	93 e4       	ldi	r25, 0x43	; 67
     41a:	0e 94 af 0c 	call	0x195e	; 0x195e <__subsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	bc 01       	movw	r22, r24
     424:	cd 01       	movw	r24, r26
     426:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__fixsfsi>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	60 df       	rcall	.-320    	; 0x2f0 <servo_set_duty_cycle_vrata>
}
     430:	0f 90       	pop	r0
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	08 95       	ret

00000438 <actuators_kisobran>:
	_delay_ms(1000);
	servo_set_vrata_position(0);
	_delay_ms(1000);
}
void actuators_kisobran(void)
{
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	6c 97       	sbiw	r28, 0x1c	; 28
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
	servo_set_vrata_position(90);
     44c:	8a e5       	ldi	r24, 0x5A	; 90
     44e:	af df       	rcall	.-162    	; 0x3ae <servo_set_vrata_position>
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	aa e7       	ldi	r26, 0x7A	; 122
     456:	b4 e4       	ldi	r27, 0x44	; 68
     458:	89 8f       	std	Y+25, r24	; 0x19
     45a:	9a 8f       	std	Y+26, r25	; 0x1a
     45c:	ab 8f       	std	Y+27, r26	; 0x1b
     45e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     460:	69 8d       	ldd	r22, Y+25	; 0x19
     462:	7a 8d       	ldd	r23, Y+26	; 0x1a
     464:	8b 8d       	ldd	r24, Y+27	; 0x1b
     466:	9c 8d       	ldd	r25, Y+28	; 0x1c
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e4       	ldi	r19, 0x40	; 64
     46c:	4c e1       	ldi	r20, 0x1C	; 28
     46e:	55 e4       	ldi	r21, 0x45	; 69
     470:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	8d 8b       	std	Y+21, r24	; 0x15
     47a:	9e 8b       	std	Y+22, r25	; 0x16
     47c:	af 8b       	std	Y+23, r26	; 0x17
     47e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     480:	6d 89       	ldd	r22, Y+21	; 0x15
     482:	7e 89       	ldd	r23, Y+22	; 0x16
     484:	8f 89       	ldd	r24, Y+23	; 0x17
     486:	98 8d       	ldd	r25, Y+24	; 0x18
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e8       	ldi	r20, 0x80	; 128
     48e:	5f e3       	ldi	r21, 0x3F	; 63
     490:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__cmpsf2>
     494:	88 23       	and	r24, r24
     496:	2c f4       	brge	.+10     	; 0x4a2 <actuators_kisobran+0x6a>
		__ticks = 1;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9c 8b       	std	Y+20, r25	; 0x14
     49e:	8b 8b       	std	Y+19, r24	; 0x13
     4a0:	3f c0       	rjmp	.+126    	; 0x520 <actuators_kisobran+0xe8>
	else if (__tmp > 65535)
     4a2:	6d 89       	ldd	r22, Y+21	; 0x15
     4a4:	7e 89       	ldd	r23, Y+22	; 0x16
     4a6:	8f 89       	ldd	r24, Y+23	; 0x17
     4a8:	98 8d       	ldd	r25, Y+24	; 0x18
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	3f ef       	ldi	r19, 0xFF	; 255
     4ae:	4f e7       	ldi	r20, 0x7F	; 127
     4b0:	57 e4       	ldi	r21, 0x47	; 71
     4b2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__gesf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	4c f5       	brge	.+82     	; 0x50c <actuators_kisobran+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ba:	69 8d       	ldd	r22, Y+25	; 0x19
     4bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4be:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e2       	ldi	r20, 0x20	; 32
     4c8:	51 e4       	ldi	r21, 0x41	; 65
     4ca:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	9c 8b       	std	Y+20, r25	; 0x14
     4e0:	8b 8b       	std	Y+19, r24	; 0x13
     4e2:	0f c0       	rjmp	.+30     	; 0x502 <actuators_kisobran+0xca>
     4e4:	8a ef       	ldi	r24, 0xFA	; 250
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	9a 8b       	std	Y+18, r25	; 0x12
     4ea:	89 8b       	std	Y+17, r24	; 0x11
=======
      da:	aa 97       	sbiw	r28, 0x2a	; 42
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	system_init();
      e6:	1f d5       	rcall	.+2622   	; 0xb26 <system_init>
	PORTG = 0xff;
      e8:	84 e3       	ldi	r24, 0x34	; 52
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	2f ef       	ldi	r18, 0xFF	; 255
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e8       	ldi	r25, 0x80	; 128
      f6:	ab eb       	ldi	r26, 0xBB	; 187
      f8:	b4 e4       	ldi	r27, 0x44	; 68
      fa:	89 83       	std	Y+1, r24	; 0x01
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	ab 83       	std	Y+3, r26	; 0x03
     100:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	69 81       	ldd	r22, Y+1	; 0x01
     10c:	7a 81       	ldd	r23, Y+2	; 0x02
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	9c 81       	ldd	r25, Y+4	; 0x04
     112:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     116:	dc 01       	movw	r26, r24
     118:	cb 01       	movw	r24, r22
     11a:	8d 83       	std	Y+5, r24	; 0x05
     11c:	9e 83       	std	Y+6, r25	; 0x06
     11e:	af 83       	std	Y+7, r26	; 0x07
     120:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	6d 81       	ldd	r22, Y+5	; 0x05
     12c:	7e 81       	ldd	r23, Y+6	; 0x06
     12e:	8f 81       	ldd	r24, Y+7	; 0x07
     130:	98 85       	ldd	r25, Y+8	; 0x08
     132:	7b d7       	rcall	.+3830   	; 0x102a <__cmpsf2>
     134:	88 23       	and	r24, r24
     136:	2c f4       	brge	.+10     	; 0x142 <main+0x70>
		__ticks = 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	9a 87       	std	Y+10, r25	; 0x0a
     13e:	89 87       	std	Y+9, r24	; 0x09
     140:	3d c0       	rjmp	.+122    	; 0x1bc <main+0xea>
	else if (__tmp > 65535)
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	3f ef       	ldi	r19, 0xFF	; 255
     146:	4f e7       	ldi	r20, 0x7F	; 127
     148:	57 e4       	ldi	r21, 0x47	; 71
     14a:	6d 81       	ldd	r22, Y+5	; 0x05
     14c:	7e 81       	ldd	r23, Y+6	; 0x06
     14e:	8f 81       	ldd	r24, Y+7	; 0x07
     150:	98 85       	ldd	r25, Y+8	; 0x08
     152:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     156:	18 16       	cp	r1, r24
     158:	44 f5       	brge	.+80     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e2       	ldi	r20, 0x20	; 32
     160:	51 e4       	ldi	r21, 0x41	; 65
     162:	69 81       	ldd	r22, Y+1	; 0x01
     164:	7a 81       	ldd	r23, Y+2	; 0x02
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     16e:	dc 01       	movw	r26, r24
     170:	cb 01       	movw	r24, r22
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	ca d7       	rcall	.+3988   	; 0x110c <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9c 87       	std	Y+12, r25	; 0x0c
     188:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
      da:	6e 97       	sbiw	r28, 0x1e	; 30
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;	
      e6:	1a 82       	std	Y+2, r1	; 0x02
      e8:	19 82       	std	Y+1, r1	; 0x01
	
	system_init();
      ea:	0e 94 41 0b 	call	0x1682	; 0x1682 <system_init>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	aa e7       	ldi	r26, 0x7A	; 122
      f4:	b4 e4       	ldi	r27, 0x44	; 68
      f6:	8b 83       	std	Y+3, r24	; 0x03
      f8:	9c 83       	std	Y+4, r25	; 0x04
      fa:	ad 83       	std	Y+5, r26	; 0x05
      fc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e4       	ldi	r19, 0x40	; 64
     102:	4c e1       	ldi	r20, 0x1C	; 28
     104:	55 e4       	ldi	r21, 0x45	; 69
     106:	6b 81       	ldd	r22, Y+3	; 0x03
     108:	7c 81       	ldd	r23, Y+4	; 0x04
     10a:	8d 81       	ldd	r24, Y+5	; 0x05
     10c:	9e 81       	ldd	r25, Y+6	; 0x06
     10e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     112:	dc 01       	movw	r26, r24
     114:	cb 01       	movw	r24, r22
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	a9 87       	std	Y+9, r26	; 0x09
     11c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	5f e3       	ldi	r21, 0x3F	; 63
     126:	6f 81       	ldd	r22, Y+7	; 0x07
     128:	78 85       	ldd	r23, Y+8	; 0x08
     12a:	89 85       	ldd	r24, Y+9	; 0x09
     12c:	9a 85       	ldd	r25, Y+10	; 0x0a
     12e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     132:	88 23       	and	r24, r24
     134:	2c f4       	brge	.+10     	; 0x140 <main+0x6e>
		__ticks = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9c 87       	std	Y+12, r25	; 0x0c
     13c:	8b 87       	std	Y+11, r24	; 0x0b
     13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0xec>
	else if (__tmp > 65535)
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	3f ef       	ldi	r19, 0xFF	; 255
     144:	4f e7       	ldi	r20, 0x7F	; 127
     146:	57 e4       	ldi	r21, 0x47	; 71
     148:	6f 81       	ldd	r22, Y+7	; 0x07
     14a:	78 85       	ldd	r23, Y+8	; 0x08
     14c:	89 85       	ldd	r24, Y+9	; 0x09
     14e:	9a 85       	ldd	r25, Y+10	; 0x0a
     150:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	4c f5       	brge	.+82     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	6b 81       	ldd	r22, Y+3	; 0x03
     162:	7c 81       	ldd	r23, Y+4	; 0x04
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	9e 81       	ldd	r25, Y+6	; 0x06
     168:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9c 87       	std	Y+12, r25	; 0x0c
     17e:	8b 87       	std	Y+11, r24	; 0x0b
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9e 87       	std	Y+14, r25	; 0x0e
     188:	8d 87       	std	Y+13, r24	; 0x0d
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< HEAD
<<<<<<< HEAD
     4ec:	89 89       	ldd	r24, Y+17	; 0x11
     4ee:	9a 89       	ldd	r25, Y+18	; 0x12
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <actuators_kisobran+0xb8>
     4f4:	9a 8b       	std	Y+18, r25	; 0x12
     4f6:	89 8b       	std	Y+17, r24	; 0x11
=======
     18a:	8b 85       	ldd	r24, Y+11	; 0x0b
     18c:	9c 85       	ldd	r25, Y+12	; 0x0c
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9c 87       	std	Y+12, r25	; 0x0c
     194:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     18a:	8d 85       	ldd	r24, Y+13	; 0x0d
     18c:	9e 85       	ldd	r25, Y+14	; 0x0e
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9e 87       	std	Y+14, r25	; 0x0e
     194:	8d 87       	std	Y+13, r24	; 0x0d
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
<<<<<<< HEAD
     4f8:	8b 89       	ldd	r24, Y+19	; 0x13
     4fa:	9c 89       	ldd	r25, Y+20	; 0x14
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	9c 8b       	std	Y+20, r25	; 0x14
     500:	8b 8b       	std	Y+19, r24	; 0x13
=======
     196:	89 85       	ldd	r24, Y+9	; 0x09
     198:	9a 85       	ldd	r25, Y+10	; 0x0a
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9a 87       	std	Y+10, r25	; 0x0a
     19e:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     196:	8b 85       	ldd	r24, Y+11	; 0x0b
     198:	9c 85       	ldd	r25, Y+12	; 0x0c
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9c 87       	std	Y+12, r25	; 0x0c
     19e:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
<<<<<<< HEAD
     502:	8b 89       	ldd	r24, Y+19	; 0x13
     504:	9c 89       	ldd	r25, Y+20	; 0x14
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	69 f7       	brne	.-38     	; 0x4e4 <actuators_kisobran+0xac>
     50a:	14 c0       	rjmp	.+40     	; 0x534 <actuators_kisobran+0xfc>
=======
     1a0:	89 85       	ldd	r24, Y+9	; 0x09
     1a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a4:	89 2b       	or	r24, r25
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <main+0xfe>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a4:	89 2b       	or	r24, r25
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x100>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
<<<<<<< HEAD
     50c:	6d 89       	ldd	r22, Y+21	; 0x15
     50e:	7e 89       	ldd	r23, Y+22	; 0x16
     510:	8f 89       	ldd	r24, Y+23	; 0x17
     512:	98 8d       	ldd	r25, Y+24	; 0x18
     514:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	9c 8b       	std	Y+20, r25	; 0x14
     51e:	8b 8b       	std	Y+19, r24	; 0x13
     520:	8b 89       	ldd	r24, Y+19	; 0x13
     522:	9c 89       	ldd	r25, Y+20	; 0x14
     524:	98 8b       	std	Y+16, r25	; 0x10
     526:	8f 87       	std	Y+15, r24	; 0x0f
     528:	8f 85       	ldd	r24, Y+15	; 0x0f
     52a:	98 89       	ldd	r25, Y+16	; 0x10
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <actuators_kisobran+0xf4>
     530:	98 8b       	std	Y+16, r25	; 0x10
     532:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_kisobran_position(85);
     534:	85 e5       	ldi	r24, 0x55	; 85
     536:	97 de       	rcall	.-722    	; 0x266 <servo_set_kisobran_position>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	aa e7       	ldi	r26, 0x7A	; 122
     53e:	b4 e4       	ldi	r27, 0x44	; 68
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	ad 87       	std	Y+13, r26	; 0x0d
     546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     548:	6b 85       	ldd	r22, Y+11	; 0x0b
     54a:	7c 85       	ldd	r23, Y+12	; 0x0c
     54c:	8d 85       	ldd	r24, Y+13	; 0x0d
     54e:	9e 85       	ldd	r25, Y+14	; 0x0e
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e4       	ldi	r19, 0x40	; 64
     554:	4c e1       	ldi	r20, 0x1C	; 28
     556:	55 e4       	ldi	r21, 0x45	; 69
     558:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	8f 83       	std	Y+7, r24	; 0x07
     562:	98 87       	std	Y+8, r25	; 0x08
     564:	a9 87       	std	Y+9, r26	; 0x09
     566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     568:	6f 81       	ldd	r22, Y+7	; 0x07
     56a:	78 85       	ldd	r23, Y+8	; 0x08
     56c:	89 85       	ldd	r24, Y+9	; 0x09
     56e:	9a 85       	ldd	r25, Y+10	; 0x0a
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__cmpsf2>
     57c:	88 23       	and	r24, r24
     57e:	2c f4       	brge	.+10     	; 0x58a <actuators_kisobran+0x152>
		__ticks = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9e 83       	std	Y+6, r25	; 0x06
     586:	8d 83       	std	Y+5, r24	; 0x05
     588:	3f c0       	rjmp	.+126    	; 0x608 <actuators_kisobran+0x1d0>
	else if (__tmp > 65535)
     58a:	6f 81       	ldd	r22, Y+7	; 0x07
     58c:	78 85       	ldd	r23, Y+8	; 0x08
     58e:	89 85       	ldd	r24, Y+9	; 0x09
     590:	9a 85       	ldd	r25, Y+10	; 0x0a
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	3f ef       	ldi	r19, 0xFF	; 255
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	57 e4       	ldi	r21, 0x47	; 71
     59a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__gesf2>
     59e:	18 16       	cp	r1, r24
     5a0:	4c f5       	brge	.+82     	; 0x5f4 <actuators_kisobran+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a2:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a4:	7c 85       	ldd	r23, Y+12	; 0x0c
     5a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	51 e4       	ldi	r21, 0x41	; 65
     5b2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__mulsf3>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	bc 01       	movw	r22, r24
     5bc:	cd 01       	movw	r24, r26
     5be:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	9e 83       	std	Y+6, r25	; 0x06
     5c8:	8d 83       	std	Y+5, r24	; 0x05
     5ca:	0f c0       	rjmp	.+30     	; 0x5ea <actuators_kisobran+0x1b2>
     5cc:	8a ef       	ldi	r24, 0xFA	; 250
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	9c 83       	std	Y+4, r25	; 0x04
     5d2:	8b 83       	std	Y+3, r24	; 0x03
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <actuators_kisobran+0x1a0>
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
=======
     1aa:	6d 81       	ldd	r22, Y+5	; 0x05
     1ac:	7e 81       	ldd	r23, Y+6	; 0x06
     1ae:	8f 81       	ldd	r24, Y+7	; 0x07
     1b0:	98 85       	ldd	r25, Y+8	; 0x08
     1b2:	ac d7       	rcall	.+3928   	; 0x110c <__fixunssfsi>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9a 87       	std	Y+10, r25	; 0x0a
     1ba:	89 87       	std	Y+9, r24	; 0x09
     1bc:	89 85       	ldd	r24, Y+9	; 0x09
     1be:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c0:	9e 87       	std	Y+14, r25	; 0x0e
     1c2:	8d 87       	std	Y+13, r24	; 0x0d
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xf6>
     1cc:	9e 87       	std	Y+14, r25	; 0x0e
     1ce:	8d 87       	std	Y+13, r24	; 0x0d
	while(1)
	{
		_delay_ms(1500);
		servo_set_position(-40);
     1d0:	88 ed       	ldi	r24, 0xD8	; 216
     1d2:	a2 d1       	rcall	.+836    	; 0x518 <servo_set_position>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e8       	ldi	r25, 0x80	; 128
     1d8:	ab eb       	ldi	r26, 0xBB	; 187
     1da:	b4 e4       	ldi	r27, 0x44	; 68
     1dc:	8f 87       	std	Y+15, r24	; 0x0f
     1de:	98 8b       	std	Y+16, r25	; 0x10
     1e0:	a9 8b       	std	Y+17, r26	; 0x11
     1e2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e4       	ldi	r19, 0x40	; 64
     1e8:	4c e1       	ldi	r20, 0x1C	; 28
     1ea:	55 e4       	ldi	r21, 0x45	; 69
     1ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ee:	78 89       	ldd	r23, Y+16	; 0x10
     1f0:	89 89       	ldd	r24, Y+17	; 0x11
     1f2:	9a 89       	ldd	r25, Y+18	; 0x12
     1f4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	8b 8b       	std	Y+19, r24	; 0x13
     1fe:	9c 8b       	std	Y+20, r25	; 0x14
     200:	ad 8b       	std	Y+21, r26	; 0x15
     202:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e8       	ldi	r20, 0x80	; 128
     20a:	5f e3       	ldi	r21, 0x3F	; 63
     20c:	6b 89       	ldd	r22, Y+19	; 0x13
     20e:	7c 89       	ldd	r23, Y+20	; 0x14
     210:	8d 89       	ldd	r24, Y+21	; 0x15
     212:	9e 89       	ldd	r25, Y+22	; 0x16
     214:	0a d7       	rcall	.+3604   	; 0x102a <__cmpsf2>
     216:	88 23       	and	r24, r24
     218:	2c f4       	brge	.+10     	; 0x224 <main+0x152>
		__ticks = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	98 8f       	std	Y+24, r25	; 0x18
     220:	8f 8b       	std	Y+23, r24	; 0x17
     222:	3d c0       	rjmp	.+122    	; 0x29e <main+0x1cc>
	else if (__tmp > 65535)
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	3f ef       	ldi	r19, 0xFF	; 255
     228:	4f e7       	ldi	r20, 0x7F	; 127
     22a:	57 e4       	ldi	r21, 0x47	; 71
     22c:	6b 89       	ldd	r22, Y+19	; 0x13
     22e:	7c 89       	ldd	r23, Y+20	; 0x14
     230:	8d 89       	ldd	r24, Y+21	; 0x15
     232:	9e 89       	ldd	r25, Y+22	; 0x16
     234:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__gesf2>
     238:	18 16       	cp	r1, r24
     23a:	44 f5       	brge	.+80     	; 0x28c <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 e2       	ldi	r20, 0x20	; 32
     242:	51 e4       	ldi	r21, 0x41	; 65
     244:	6f 85       	ldd	r22, Y+15	; 0x0f
     246:	78 89       	ldd	r23, Y+16	; 0x10
     248:	89 89       	ldd	r24, Y+17	; 0x11
     24a:	9a 89       	ldd	r25, Y+18	; 0x12
     24c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__mulsf3>
     250:	dc 01       	movw	r26, r24
     252:	cb 01       	movw	r24, r22
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	59 d7       	rcall	.+3762   	; 0x110c <__fixunssfsi>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
     25e:	98 8f       	std	Y+24, r25	; 0x18
     260:	8f 8b       	std	Y+23, r24	; 0x17
     262:	0f c0       	rjmp	.+30     	; 0x282 <main+0x1b0>
     264:	8a ef       	ldi	r24, 0xFA	; 250
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9a 8f       	std	Y+26, r25	; 0x1a
     26a:	89 8f       	std	Y+25, r24	; 0x19
     26c:	89 8d       	ldd	r24, Y+25	; 0x19
     26e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <main+0x19e>
     274:	9a 8f       	std	Y+26, r25	; 0x1a
     276:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     1aa:	6f 81       	ldd	r22, Y+7	; 0x07
     1ac:	78 85       	ldd	r23, Y+8	; 0x08
     1ae:	89 85       	ldd	r24, Y+9	; 0x09
     1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9c 87       	std	Y+12, r25	; 0x0c
     1bc:	8b 87       	std	Y+11, r24	; 0x0b
     1be:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c2:	98 8b       	std	Y+16, r25	; 0x10
     1c4:	8f 87       	std	Y+15, r24	; 0x0f
     1c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c8:	98 89       	ldd	r25, Y+16	; 0x10
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xf8>
     1ce:	98 8b       	std	Y+16, r25	; 0x10
     1d0:	8f 87       	std	Y+15, r24	; 0x0f
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     1d2:	83 c0       	rjmp	.+262    	; 0x2da <main+0x208>
		{
			gpio_register_pin(31,GPIO_DIRECTION_INPUT,true);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	8f e1       	ldi	r24, 0x1F	; 31
     1da:	6d d4       	rcall	.+2266   	; 0xab6 <gpio_register_pin>
			gpio_debouncer();
     1dc:	00 d6       	rcall	.+3072   	; 0xdde <gpio_debouncer>
			if(gpio_read_pin(31) == 1)
     1de:	8f e1       	ldi	r24, 0x1F	; 31
     1e0:	81 d5       	rcall	.+2818   	; 0xce4 <gpio_read_pin>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x116>
     1e6:	77 c0       	rjmp	.+238    	; 0x2d6 <main+0x204>
			{
				i = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	89 83       	std	Y+1, r24	; 0x01
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	aa e7       	ldi	r26, 0x7A	; 122
     1f6:	b4 e4       	ldi	r27, 0x44	; 68
     1f8:	89 8b       	std	Y+17, r24	; 0x11
     1fa:	9a 8b       	std	Y+18, r25	; 0x12
     1fc:	ab 8b       	std	Y+19, r26	; 0x13
     1fe:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e4       	ldi	r19, 0x40	; 64
     204:	4c e1       	ldi	r20, 0x1C	; 28
     206:	55 e4       	ldi	r21, 0x45	; 69
     208:	69 89       	ldd	r22, Y+17	; 0x11
     20a:	7a 89       	ldd	r23, Y+18	; 0x12
     20c:	8b 89       	ldd	r24, Y+19	; 0x13
     20e:	9c 89       	ldd	r25, Y+20	; 0x14
     210:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8d 8b       	std	Y+21, r24	; 0x15
     21a:	9e 8b       	std	Y+22, r25	; 0x16
     21c:	af 8b       	std	Y+23, r26	; 0x17
     21e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e8       	ldi	r20, 0x80	; 128
     226:	5f e3       	ldi	r21, 0x3F	; 63
     228:	6d 89       	ldd	r22, Y+21	; 0x15
     22a:	7e 89       	ldd	r23, Y+22	; 0x16
     22c:	8f 89       	ldd	r24, Y+23	; 0x17
     22e:	98 8d       	ldd	r25, Y+24	; 0x18
     230:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	2c f4       	brge	.+10     	; 0x242 <main+0x170>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9a 8f       	std	Y+26, r25	; 0x1a
     23e:	89 8f       	std	Y+25, r24	; 0x19
     240:	3f c0       	rjmp	.+126    	; 0x2c0 <main+0x1ee>
	else if (__tmp > 65535)
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	3f ef       	ldi	r19, 0xFF	; 255
     246:	4f e7       	ldi	r20, 0x7F	; 127
     248:	57 e4       	ldi	r21, 0x47	; 71
     24a:	6d 89       	ldd	r22, Y+21	; 0x15
     24c:	7e 89       	ldd	r23, Y+22	; 0x16
     24e:	8f 89       	ldd	r24, Y+23	; 0x17
     250:	98 8d       	ldd	r25, Y+24	; 0x18
     252:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	4c f5       	brge	.+82     	; 0x2ac <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e2       	ldi	r20, 0x20	; 32
     260:	51 e4       	ldi	r21, 0x41	; 65
     262:	69 89       	ldd	r22, Y+17	; 0x11
     264:	7a 89       	ldd	r23, Y+18	; 0x12
     266:	8b 89       	ldd	r24, Y+19	; 0x13
     268:	9c 89       	ldd	r25, Y+20	; 0x14
     26a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	bc 01       	movw	r22, r24
     274:	cd 01       	movw	r24, r26
     276:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	9a 8f       	std	Y+26, r25	; 0x1a
     280:	89 8f       	std	Y+25, r24	; 0x19
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <main+0x1d0>
     284:	8a ef       	ldi	r24, 0xFA	; 250
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9c 8f       	std	Y+28, r25	; 0x1c
     28a:	8b 8f       	std	Y+27, r24	; 0x1b
     28c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     28e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <main+0x1be>
     294:	9c 8f       	std	Y+28, r25	; 0x1c
     296:	8b 8f       	std	Y+27, r24	; 0x1b
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
<<<<<<< HEAD
     5e0:	8d 81       	ldd	r24, Y+5	; 0x05
     5e2:	9e 81       	ldd	r25, Y+6	; 0x06
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	9e 83       	std	Y+6, r25	; 0x06
     5e8:	8d 83       	std	Y+5, r24	; 0x05
=======
     278:	8f 89       	ldd	r24, Y+23	; 0x17
     27a:	98 8d       	ldd	r25, Y+24	; 0x18
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	98 8f       	std	Y+24, r25	; 0x18
     280:	8f 8b       	std	Y+23, r24	; 0x17
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     298:	89 8d       	ldd	r24, Y+25	; 0x19
     29a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	9a 8f       	std	Y+26, r25	; 0x1a
     2a0:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
<<<<<<< HEAD
     5ea:	8d 81       	ldd	r24, Y+5	; 0x05
     5ec:	9e 81       	ldd	r25, Y+6	; 0x06
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	69 f7       	brne	.-38     	; 0x5cc <actuators_kisobran+0x194>
     5f2:	14 c0       	rjmp	.+40     	; 0x61c <actuators_kisobran+0x1e4>
=======
     282:	8f 89       	ldd	r24, Y+23	; 0x17
     284:	98 8d       	ldd	r25, Y+24	; 0x18
     286:	89 2b       	or	r24, r25
     288:	69 f7       	brne	.-38     	; 0x264 <main+0x192>
     28a:	13 c0       	rjmp	.+38     	; 0x2b2 <main+0x1e0>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
     2a2:	89 8d       	ldd	r24, Y+25	; 0x19
     2a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2a6:	89 2b       	or	r24, r25
     2a8:	69 f7       	brne	.-38     	; 0x284 <main+0x1b2>
     2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <main+0x202>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
<<<<<<< HEAD
     5f4:	6f 81       	ldd	r22, Y+7	; 0x07
     5f6:	78 85       	ldd	r23, Y+8	; 0x08
     5f8:	89 85       	ldd	r24, Y+9	; 0x09
     5fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixunssfsi>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	9e 83       	std	Y+6, r25	; 0x06
     606:	8d 83       	std	Y+5, r24	; 0x05
     608:	8d 81       	ldd	r24, Y+5	; 0x05
     60a:	9e 81       	ldd	r25, Y+6	; 0x06
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <actuators_kisobran+0x1dc>
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	servo_set_vrata_position(0);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	c7 de       	rcall	.-626    	; 0x3ae <servo_set_vrata_position>
}
     620:	6c 96       	adiw	r28, 0x1c	; 28
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	08 95       	ret

00000632 <__vector_18>:
=======
     28c:	6b 89       	ldd	r22, Y+19	; 0x13
     28e:	7c 89       	ldd	r23, Y+20	; 0x14
     290:	8d 89       	ldd	r24, Y+21	; 0x15
     292:	9e 89       	ldd	r25, Y+22	; 0x16
     294:	3b d7       	rcall	.+3702   	; 0x110c <__fixunssfsi>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	98 8f       	std	Y+24, r25	; 0x18
     29c:	8f 8b       	std	Y+23, r24	; 0x17
     29e:	8f 89       	ldd	r24, Y+23	; 0x17
     2a0:	98 8d       	ldd	r25, Y+24	; 0x18
     2a2:	9c 8f       	std	Y+28, r25	; 0x1c
     2a4:	8b 8f       	std	Y+27, r24	; 0x1b
     2a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x1d8>
     2ae:	9c 8f       	std	Y+28, r25	; 0x1c
     2b0:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1500);
		servo_set_position(40);
     2b2:	88 e2       	ldi	r24, 0x28	; 40
     2b4:	31 d1       	rcall	.+610    	; 0x518 <servo_set_position>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e8       	ldi	r25, 0x80	; 128
     2ba:	ab eb       	ldi	r26, 0xBB	; 187
     2bc:	b4 e4       	ldi	r27, 0x44	; 68
     2be:	8d 8f       	std	Y+29, r24	; 0x1d
     2c0:	9e 8f       	std	Y+30, r25	; 0x1e
     2c2:	af 8f       	std	Y+31, r26	; 0x1f
     2c4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e4       	ldi	r19, 0x40	; 64
     2ca:	4c e1       	ldi	r20, 0x1C	; 28
     2cc:	55 e4       	ldi	r21, 0x45	; 69
     2ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2d4:	98 a1       	ldd	r25, Y+32	; 0x20
     2d6:	fc d7       	rcall	.+4088   	; 0x12d0 <__mulsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	89 a3       	std	Y+33, r24	; 0x21
     2de:	9a a3       	std	Y+34, r25	; 0x22
     2e0:	ab a3       	std	Y+35, r26	; 0x23
     2e2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e8       	ldi	r20, 0x80	; 128
     2ea:	5f e3       	ldi	r21, 0x3F	; 63
     2ec:	69 a1       	ldd	r22, Y+33	; 0x21
     2ee:	7a a1       	ldd	r23, Y+34	; 0x22
     2f0:	8b a1       	ldd	r24, Y+35	; 0x23
     2f2:	9c a1       	ldd	r25, Y+36	; 0x24
     2f4:	9a d6       	rcall	.+3380   	; 0x102a <__cmpsf2>
     2f6:	88 23       	and	r24, r24
     2f8:	2c f4       	brge	.+10     	; 0x304 <main+0x232>
		__ticks = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	9e a3       	std	Y+38, r25	; 0x26
     300:	8d a3       	std	Y+37, r24	; 0x25
     302:	3b c0       	rjmp	.+118    	; 0x37a <main+0x2a8>
	else if (__tmp > 65535)
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	3f ef       	ldi	r19, 0xFF	; 255
     308:	4f e7       	ldi	r20, 0x7F	; 127
     30a:	57 e4       	ldi	r21, 0x47	; 71
     30c:	69 a1       	ldd	r22, Y+33	; 0x21
     30e:	7a a1       	ldd	r23, Y+34	; 0x22
     310:	8b a1       	ldd	r24, Y+35	; 0x23
     312:	9c a1       	ldd	r25, Y+36	; 0x24
     314:	d9 d7       	rcall	.+4018   	; 0x12c8 <__gesf2>
     316:	18 16       	cp	r1, r24
     318:	3c f5       	brge	.+78     	; 0x368 <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e2       	ldi	r20, 0x20	; 32
     320:	51 e4       	ldi	r21, 0x41	; 65
     322:	6d 8d       	ldd	r22, Y+29	; 0x1d
     324:	7e 8d       	ldd	r23, Y+30	; 0x1e
     326:	8f 8d       	ldd	r24, Y+31	; 0x1f
     328:	98 a1       	ldd	r25, Y+32	; 0x20
     32a:	d2 d7       	rcall	.+4004   	; 0x12d0 <__mulsf3>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	bc 01       	movw	r22, r24
     332:	cd 01       	movw	r24, r26
     334:	eb d6       	rcall	.+3542   	; 0x110c <__fixunssfsi>
     336:	dc 01       	movw	r26, r24
     338:	cb 01       	movw	r24, r22
     33a:	9e a3       	std	Y+38, r25	; 0x26
     33c:	8d a3       	std	Y+37, r24	; 0x25
     33e:	0f c0       	rjmp	.+30     	; 0x35e <main+0x28c>
     340:	8a ef       	ldi	r24, 0xFA	; 250
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	98 a7       	std	Y+40, r25	; 0x28
     346:	8f a3       	std	Y+39, r24	; 0x27
     348:	8f a1       	ldd	r24, Y+39	; 0x27
     34a:	98 a5       	ldd	r25, Y+40	; 0x28
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x27a>
     350:	98 a7       	std	Y+40, r25	; 0x28
     352:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     354:	8d a1       	ldd	r24, Y+37	; 0x25
     356:	9e a1       	ldd	r25, Y+38	; 0x26
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	9e a3       	std	Y+38, r25	; 0x26
     35c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35e:	8d a1       	ldd	r24, Y+37	; 0x25
     360:	9e a1       	ldd	r25, Y+38	; 0x26
     362:	89 2b       	or	r24, r25
     364:	69 f7       	brne	.-38     	; 0x340 <main+0x26e>
     366:	13 c0       	rjmp	.+38     	; 0x38e <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     368:	69 a1       	ldd	r22, Y+33	; 0x21
     36a:	7a a1       	ldd	r23, Y+34	; 0x22
     36c:	8b a1       	ldd	r24, Y+35	; 0x23
     36e:	9c a1       	ldd	r25, Y+36	; 0x24
     370:	cd d6       	rcall	.+3482   	; 0x110c <__fixunssfsi>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	9e a3       	std	Y+38, r25	; 0x26
     378:	8d a3       	std	Y+37, r24	; 0x25
     37a:	8d a1       	ldd	r24, Y+37	; 0x25
     37c:	9e a1       	ldd	r25, Y+38	; 0x26
     37e:	9a a7       	std	Y+42, r25	; 0x2a
     380:	89 a7       	std	Y+41, r24	; 0x29
     382:	89 a5       	ldd	r24, Y+41	; 0x29
     384:	9a a5       	ldd	r25, Y+42	; 0x2a
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <main+0x2b4>
     38a:	9a a7       	std	Y+42, r25	; 0x2a
     38c:	89 a7       	std	Y+41, r24	; 0x29
				
				servo_set_position(20);
				_delay_ms(2000);
			}
		}*/
	}
     38e:	b1 ce       	rjmp	.-670    	; 0xf2 <main+0x20>

00000390 <servo_init>:
=======
     2ac:	6d 89       	ldd	r22, Y+21	; 0x15
     2ae:	7e 89       	ldd	r23, Y+22	; 0x16
     2b0:	8f 89       	ldd	r24, Y+23	; 0x17
     2b2:	98 8d       	ldd	r25, Y+24	; 0x18
     2b4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	9a 8f       	std	Y+26, r25	; 0x1a
     2be:	89 8f       	std	Y+25, r24	; 0x19
     2c0:	89 8d       	ldd	r24, Y+25	; 0x19
     2c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2c4:	9e 8f       	std	Y+30, r25	; 0x1e
     2c6:	8d 8f       	std	Y+29, r24	; 0x1d
     2c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x1fa>
     2d0:	9e 8f       	std	Y+30, r25	; 0x1e
     2d2:	8d 8f       	std	Y+29, r24	; 0x1d
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <main+0x208>
				_delay_ms(1000);
			}
			else
			{
				i = 0;
     2d6:	1a 82       	std	Y+2, r1	; 0x02
     2d8:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	89 2b       	or	r24, r25
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0x212>
     2e2:	78 cf       	rjmp	.-272    	; 0x1d4 <main+0x102>
			else
			{
				i = 0;
			}
		}	
		if(i == 1)
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	41 f4       	brne	.+16     	; 0x2fc <main+0x22a>
		{
			while(1)
			{
				PORTG = 0xff;
     2ec:	84 e3       	ldi	r24, 0x34	; 52
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
				purpleside();
     2f6:	0e 94 47 0a 	call	0x148e	; 0x148e <purpleside>
			}
     2fa:	f8 cf       	rjmp	.-16     	; 0x2ec <main+0x21a>
		}
	}
     2fc:	f8 ce       	rjmp	.-528    	; 0xee <main+0x1c>

000002fe <servo_init>:
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
<<<<<<< HEAD
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <servo_init+0xa>
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     3a2:	8d e2       	ldi	r24, 0x2D	; 45
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	2d e2       	ldi	r18, 0x2D	; 45
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	28 63       	ori	r18, 0x38	; 56
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     3b4:	84 e9       	ldi	r24, 0x94	; 148
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	11 82       	std	Z+1, r1	; 0x01
     3bc:	10 82       	st	Z, r1
	OCR3A = 0;
     3be:	88 e9       	ldi	r24, 0x98	; 152
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	fc 01       	movw	r30, r24
     3c4:	11 82       	std	Z+1, r1	; 0x01
     3c6:	10 82       	st	Z, r1
	OCR3B = 0;
     3c8:	8a e9       	ldi	r24, 0x9A	; 154
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	11 82       	std	Z+1, r1	; 0x01
     3d0:	10 82       	st	Z, r1
	OCR3C = 0;
     3d2:	8c e9       	ldi	r24, 0x9C	; 156
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	11 82       	std	Z+1, r1	; 0x01
     3da:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     3dc:	80 e9       	ldi	r24, 0x90	; 144
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	2e eb       	ldi	r18, 0xBE	; 190
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     3e6:	81 e9       	ldi	r24, 0x91	; 145
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	2a e1       	ldi	r18, 0x1A	; 26
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5; 
     3f0:	06 e9       	ldi	r16, 0x96	; 150
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	cc 01       	movw	r24, r24
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	bc 01       	movw	r22, r24
     400:	cd 01       	movw	r24, r26
     402:	b0 d6       	rcall	.+3424   	; 0x1164 <__floatunsisf>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	bc 01       	movw	r22, r24
     412:	cd 01       	movw	r24, r26
     414:	5d d7       	rcall	.+3770   	; 0x12d0 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	9c 01       	movw	r18, r24
     41c:	ad 01       	movw	r20, r26
     41e:	60 e8       	ldi	r22, 0x80	; 128
     420:	76 e9       	ldi	r23, 0x96	; 150
     422:	88 e1       	ldi	r24, 0x18	; 24
     424:	9b e4       	ldi	r25, 0x4B	; 75
     426:	05 d6       	rcall	.+3082   	; 0x1032 <__divsf3>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	5f e3       	ldi	r21, 0x3F	; 63
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	94 d5       	rcall	.+2856   	; 0xf62 <__addsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	64 d6       	rcall	.+3272   	; 0x110c <__fixunssfsi>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	f8 01       	movw	r30, r16
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
}//END OF servo_init
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <servo_set_duty_cycle>:


static void servo_set_duty_cycle(int16_t value)
{
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <servo_set_duty_cycle+0xe>
     46a:	00 d0       	rcall	.+0      	; 0x46c <servo_set_duty_cycle+0x10>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9c 83       	std	Y+4, r25	; 0x04
     472:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     474:	86 e9       	ldi	r24, 0x96	; 150
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	91 81       	ldd	r25, Z+1	; 0x01
     47e:	cc 01       	movw	r24, r24
     480:	a0 e0       	ldi	r26, 0x00	; 0
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	6d d6       	rcall	.+3290   	; 0x1164 <__floatunsisf>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	53 e4       	ldi	r21, 0x43	; 67
     496:	bc 01       	movw	r22, r24
     498:	cd 01       	movw	r24, r26
     49a:	cb d5       	rcall	.+2966   	; 0x1032 <__divsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	6c 01       	movw	r12, r24
     4a2:	7d 01       	movw	r14, r26
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	09 2e       	mov	r0, r25
     4aa:	00 0c       	add	r0, r0
     4ac:	aa 0b       	sbc	r26, r26
     4ae:	bb 0b       	sbc	r27, r27
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	59 d6       	rcall	.+3250   	; 0x1168 <__floatsisf>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	9c 01       	movw	r18, r24
     4bc:	ad 01       	movw	r20, r26
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	06 d7       	rcall	.+3596   	; 0x12d0 <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	bc 01       	movw	r22, r24
     4d2:	cd 01       	movw	r24, r26
     4d4:	46 d5       	rcall	.+2700   	; 0xf62 <__addsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	bc 01       	movw	r22, r24
     4dc:	cd 01       	movw	r24, r26
     4de:	16 d6       	rcall	.+3116   	; 0x110c <__fixunssfsi>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     4e8:	89 e9       	ldi	r24, 0x99	; 153
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	29 81       	ldd	r18, Y+1	; 0x01
     4ee:	3a 81       	ldd	r19, Y+2	; 0x02
     4f0:	23 2f       	mov	r18, r19
     4f2:	33 27       	eor	r19, r19
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     4f8:	88 e9       	ldi	r24, 0x98	; 152
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
	
}//END OF servo_position
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <servo_set_position>:

void servo_set_position(int8_t angle)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	1f 92       	push	r1
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	08 2e       	mov	r0, r24
     528:	00 0c       	add	r0, r0
     52a:	99 0b       	sbc	r25, r25
     52c:	aa 0b       	sbc	r26, r26
     52e:	bb 0b       	sbc	r27, r27
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	19 d6       	rcall	.+3122   	; 0x1168 <__floatsisf>
     536:	dc 01       	movw	r26, r24
     538:	cb 01       	movw	r24, r22
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	44 eb       	ldi	r20, 0xB4	; 180
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	75 d5       	rcall	.+2794   	; 0x1032 <__divsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	26 e6       	ldi	r18, 0x66	; 102
     54e:	36 e6       	ldi	r19, 0x66	; 102
     550:	46 e3       	ldi	r20, 0x36	; 54
     552:	51 e4       	ldi	r21, 0x41	; 65
     554:	bc 01       	movw	r22, r24
     556:	cd 01       	movw	r24, r26
     558:	bb d6       	rcall	.+3446   	; 0x12d0 <__mulsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	9c 01       	movw	r18, r24
     560:	ad 01       	movw	r20, r26
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	8c e6       	ldi	r24, 0x6C	; 108
     568:	93 e4       	ldi	r25, 0x43	; 67
     56a:	fa d4       	rcall	.+2548   	; 0xf60 <__subsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9c 01       	movw	r18, r24
     572:	ad 01       	movw	r20, r26
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	8f e7       	ldi	r24, 0x7F	; 127
     57a:	93 e4       	ldi	r25, 0x43	; 67
     57c:	f1 d4       	rcall	.+2530   	; 0xf60 <__subsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	bd d5       	rcall	.+2938   	; 0x1102 <__fixsfsi>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	67 df       	rcall	.-306    	; 0x45c <servo_set_duty_cycle>

     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <__vector_18>:
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
<<<<<<< HEAD
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	00 90 5b 00 	lds	r0, 0x005B
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <__vector_18+0x2a>
     65c:	00 d0       	rcall	.+0      	; 0x65e <__vector_18+0x2c>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     662:	ed ee       	ldi	r30, 0xED	; 237
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	8c 83       	std	Y+4, r24	; 0x04
=======
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	00 90 5f 00 	lds	r0, 0x005F
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	00 90 5b 00 	lds	r0, 0x005B
     5a6:	0f 92       	push	r0
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	00 d0       	rcall	.+0      	; 0x5be <__vector_18+0x28>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <__vector_18+0x2a>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     5c4:	8d ee       	ldi	r24, 0xED	; 237
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	8b 83       	std	Y+3, r24	; 0x03
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
<<<<<<< HEAD
     66a:	1b 82       	std	Y+3, r1	; 0x03
     66c:	9c c0       	rjmp	.+312    	; 0x7a6 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     66e:	ed ee       	ldi	r30, 0xED	; 237
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	82 95       	swap	r24
     676:	80 7f       	andi	r24, 0xF0	; 240
     678:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     67a:	ee ee       	ldi	r30, 0xEE	; 238
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	82 95       	swap	r24
     682:	86 95       	lsr	r24
     684:	87 70       	andi	r24, 0x07	; 7
     686:	88 2f       	mov	r24, r24
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	88 23       	and	r24, r24
     690:	09 f4       	brne	.+2      	; 0x694 <__vector_18+0x62>
     692:	6e c0       	rjmp	.+220    	; 0x770 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     694:	ef ee       	ldi	r30, 0xEF	; 239
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     69c:	ae ee       	ldi	r26, 0xEE	; 238
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	ee ee       	ldi	r30, 0xEE	; 238
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	8f 7d       	andi	r24, 0xDF	; 223
     6a8:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     6aa:	e2 ef       	ldi	r30, 0xF2	; 242
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	82 95       	swap	r24
     6b2:	86 95       	lsr	r24
     6b4:	87 70       	andi	r24, 0x07	; 7
     6b6:	28 2f       	mov	r18, r24
     6b8:	e3 ef       	ldi	r30, 0xF3	; 243
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	82 2b       	or	r24, r18
     6d0:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     6d2:	19 82       	std	Y+1, r1	; 0x01
     6d4:	2a c0       	rjmp	.+84     	; 0x72a <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	82 1b       	sub	r24, r18
     6e2:	93 0b       	sbc	r25, r19
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	90 95       	com	r25
     6ea:	81 95       	neg	r24
     6ec:	9f 4f       	sbci	r25, 0xFF	; 255
     6ee:	fc 01       	movw	r30, r24
     6f0:	e8 5d       	subi	r30, 0xD8	; 216
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	40 81       	ld	r20, Z
     6f6:	51 81       	ldd	r21, Z+1	; 0x01
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	fc 01       	movw	r30, r24
     702:	e4 5c       	subi	r30, 0xC4	; 196
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	80 81       	ld	r24, Z
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	da 01       	movw	r26, r20
     718:	a8 0f       	add	r26, r24
     71a:	b9 1f       	adc	r27, r25
     71c:	ea ef       	ldi	r30, 0xFA	; 250
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	8c 93       	st	X, r24
=======
     5ce:	19 82       	std	Y+1, r1	; 0x01
     5d0:	a4 c0       	rjmp	.+328    	; 0x71a <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     5d2:	8d ee       	ldi	r24, 0xED	; 237
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	22 95       	swap	r18
     5da:	20 7f       	andi	r18, 0xF0	; 240
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     5e0:	8e ee       	ldi	r24, 0xEE	; 238
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	82 95       	swap	r24
     5ea:	86 95       	lsr	r24
     5ec:	87 70       	andi	r24, 0x07	; 7
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	81 70       	andi	r24, 0x01	; 1
     5f4:	99 27       	eor	r25, r25
     5f6:	89 2b       	or	r24, r25
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_18+0x66>
     5fa:	70 c0       	rjmp	.+224    	; 0x6dc <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     5fc:	8f ee       	ldi	r24, 0xEF	; 239
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	20 e8       	ldi	r18, 0x80	; 128
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     606:	8e ee       	ldi	r24, 0xEE	; 238
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2e ee       	ldi	r18, 0xEE	; 238
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	2f 7d       	andi	r18, 0xDF	; 223
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     618:	82 ef       	ldi	r24, 0xF2	; 242
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	82 95       	swap	r24
     622:	86 95       	lsr	r24
     624:	87 70       	andi	r24, 0x07	; 7
     626:	28 2f       	mov	r18, r24
     628:	83 ef       	ldi	r24, 0xF3	; 243
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	fc 01       	movw	r30, r24
     62e:	80 81       	ld	r24, Z
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	82 2b       	or	r24, r18
     642:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	26 c0       	rjmp	.+76     	; 0x694 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	90 48       	sbci	r25, 0x80	; 128
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	8a 5f       	subi	r24, 0xFA	; 250
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	20 81       	ld	r18, Z
     65e:	31 81       	ldd	r19, Z+1	; 0x01
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	86 5e       	subi	r24, 0xE6	; 230
     66a:	9e 4f       	sbci	r25, 0xFE	; 254
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	48 2f       	mov	r20, r24
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	84 0f       	add	r24, r20
     67c:	95 1f       	adc	r25, r21
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	2a ef       	ldi	r18, 0xFA	; 250
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
<<<<<<< HEAD
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	89 83       	std	Y+1, r24	; 0x01
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	88 30       	cpi	r24, 0x08	; 8
     72e:	98 f2       	brcs	.-90     	; 0x6d6 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	fc 01       	movw	r30, r24
     73a:	e4 5c       	subi	r30, 0xC4	; 196
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	80 81       	ld	r24, Z
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	80 83       	st	Z, r24
     744:	80 81       	ld	r24, Z
     746:	85 30       	cpi	r24, 0x05	; 5
     748:	41 f4       	brne	.+16     	; 0x75a <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	fc 01       	movw	r30, r24
     754:	e4 5c       	subi	r30, 0xC4	; 196
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	88 2f       	mov	r24, r24
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	fc 01       	movw	r30, r24
     764:	e0 5b       	subi	r30, 0xB0	; 176
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	80 81       	ld	r24, Z
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 83       	st	Z, r24
     76e:	1f c0       	rjmp	.+62     	; 0x7ae <__vector_18+0x17c>
=======
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	8a 83       	std	Y+2, r24	; 0x02
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	b8 f2       	brcs	.-82     	; 0x648 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	86 5e       	subi	r24, 0xE6	; 230
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
     6b0:	25 30       	cpi	r18, 0x05	; 5
     6b2:	41 f4       	brne	.+16     	; 0x6c4 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	86 5e       	subi	r24, 0xE6	; 230
     6be:	9e 4f       	sbci	r25, 0xFE	; 254
     6c0:	fc 01       	movw	r30, r24
     6c2:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     6c4:	8c 81       	ldd	r24, Y+4	; 0x04
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	82 5d       	subi	r24, 0xD2	; 210
     6ce:	9e 4f       	sbci	r25, 0xFE	; 254
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 81       	ld	r18, Z
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

			break;
     6da:	23 c0       	rjmp	.+70     	; 0x722 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
<<<<<<< HEAD
     770:	ee ee       	ldi	r30, 0xEE	; 238
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	82 95       	swap	r24
     778:	86 95       	lsr	r24
     77a:	86 95       	lsr	r24
     77c:	83 70       	andi	r24, 0x03	; 3
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	81 70       	andi	r24, 0x01	; 1
     784:	90 70       	andi	r25, 0x00	; 0
     786:	88 23       	and	r24, r24
     788:	59 f0       	breq	.+22     	; 0x7a0 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     78a:	ef ee       	ldi	r30, 0xEF	; 239
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     790:	ae ee       	ldi	r26, 0xEE	; 238
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	ee ee       	ldi	r30, 0xEE	; 238
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8f 7b       	andi	r24, 0xBF	; 191
     79c:	8c 93       	st	X, r24
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <__vector_18+0x17c>
=======
     6dc:	8e ee       	ldi	r24, 0xEE	; 238
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	82 95       	swap	r24
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	83 70       	andi	r24, 0x03	; 3
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	81 70       	andi	r24, 0x01	; 1
     6f2:	99 27       	eor	r25, r25
     6f4:	89 2b       	or	r24, r25
     6f6:	71 f0       	breq	.+28     	; 0x714 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     6f8:	8f ee       	ldi	r24, 0xEF	; 239
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	2e ee       	ldi	r18, 0xEE	; 238
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	2f 7b       	andi	r18, 0xBF	; 191
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18

			break;
     712:	07 c0       	rjmp	.+14     	; 0x722 <__vector_18+0x18c>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
<<<<<<< HEAD
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	8f 30       	cpi	r24, 0x0F	; 15
     7aa:	08 f4       	brcc	.+2      	; 0x7ae <__vector_18+0x17c>
     7ac:	60 cf       	rjmp	.-320    	; 0x66e <__vector_18+0x3c>
=======
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	8f 30       	cpi	r24, 0x0F	; 15
     71e:	08 f4       	brcc	.+2      	; 0x722 <__vector_18+0x18c>
     720:	58 cf       	rjmp	.-336    	; 0x5d2 <__vector_18+0x3c>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

			break;
		}
	}

	CANPAGE = tempPage;
<<<<<<< HEAD
     7ae:	ed ee       	ldi	r30, 0xED	; 237
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	8c 81       	ldd	r24, Y+4	; 0x04
     7b4:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     7b6:	aa ed       	ldi	r26, 0xDA	; 218
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	ea ed       	ldi	r30, 0xDA	; 218
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8c 93       	st	X, r24
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	00 92 5b 00 	sts	0x005B, r0
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <CAN_InitModule>:
=======
     722:	8d ee       	ldi	r24, 0xED	; 237
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	CANGIT = CANGIT; // zato sto tako treba.
     72c:	8a ed       	ldi	r24, 0xDA	; 218
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2a ed       	ldi	r18, 0xDA	; 218
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
}
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	00 92 5b 00 	sts	0x005B, r0
     75e:	0f 90       	pop	r0
     760:	00 92 5f 00 	sts	0x005F, r0
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <CAN_InitModule>:
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe


static void CAN_InitModule(void)
{
<<<<<<< HEAD
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <CAN_InitModule+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
=======
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <CAN_InitModule+0x6>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
<<<<<<< HEAD
     7fc:	e8 ed       	ldi	r30, 0xD8	; 216
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     804:	1a 82       	std	Y+2, r1	; 0x02
     806:	32 c0       	rjmp	.+100    	; 0x86c <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     808:	ed ee       	ldi	r30, 0xED	; 237
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	82 95       	swap	r24
     810:	80 7f       	andi	r24, 0xF0	; 240
     812:	80 83       	st	Z, r24

		CANSTMOB = 0;
     814:	ee ee       	ldi	r30, 0xEE	; 238
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	10 82       	st	Z, r1
		CANCDMOB = 0;
     81a:	ef ee       	ldi	r30, 0xEF	; 239
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	10 82       	st	Z, r1

		CANIDT1 = 0;
     820:	e3 ef       	ldi	r30, 0xF3	; 243
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	10 82       	st	Z, r1
		CANIDT2 = 0;
     826:	e2 ef       	ldi	r30, 0xF2	; 242
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	10 82       	st	Z, r1
		CANIDT3 = 0;
     82c:	e1 ef       	ldi	r30, 0xF1	; 241
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	10 82       	st	Z, r1
		CANIDT4 = 0;
     832:	e0 ef       	ldi	r30, 0xF0	; 240
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	10 82       	st	Z, r1
		CANIDM1 = 0;
     838:	e7 ef       	ldi	r30, 0xF7	; 247
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	10 82       	st	Z, r1
		CANIDM2 = 0;
     83e:	e6 ef       	ldi	r30, 0xF6	; 246
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	10 82       	st	Z, r1
		CANIDM3 = 0;
     844:	e5 ef       	ldi	r30, 0xF5	; 245
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	10 82       	st	Z, r1
		CANIDM4 = 0;
     84a:	e4 ef       	ldi	r30, 0xF4	; 244
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	10 82       	st	Z, r1
=======
     774:	88 ed       	ldi	r24, 0xD8	; 216
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     77e:	19 82       	std	Y+1, r1	; 0x01
     780:	3e c0       	rjmp	.+124    	; 0x7fe <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     782:	8d ee       	ldi	r24, 0xED	; 237
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	22 95       	swap	r18
     78a:	20 7f       	andi	r18, 0xF0	; 240
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18

		CANSTMOB = 0;
     790:	8e ee       	ldi	r24, 0xEE	; 238
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	fc 01       	movw	r30, r24
     796:	10 82       	st	Z, r1
		CANCDMOB = 0;
     798:	8f ee       	ldi	r24, 0xEF	; 239
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	10 82       	st	Z, r1

		CANIDT1 = 0;
     7a0:	83 ef       	ldi	r24, 0xF3	; 243
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	10 82       	st	Z, r1
		CANIDT2 = 0;
     7a8:	82 ef       	ldi	r24, 0xF2	; 242
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 82       	st	Z, r1
		CANIDT3 = 0;
     7b0:	81 ef       	ldi	r24, 0xF1	; 241
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	10 82       	st	Z, r1
		CANIDT4 = 0;
     7b8:	80 ef       	ldi	r24, 0xF0	; 240
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	10 82       	st	Z, r1
		CANIDM1 = 0;
     7c0:	87 ef       	ldi	r24, 0xF7	; 247
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
		CANIDM2 = 0;
     7c8:	86 ef       	ldi	r24, 0xF6	; 246
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	10 82       	st	Z, r1
		CANIDM3 = 0;
     7d0:	85 ef       	ldi	r24, 0xF5	; 245
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	10 82       	st	Z, r1
		CANIDM4 = 0;
     7d8:	84 ef       	ldi	r24, 0xF4	; 244
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	10 82       	st	Z, r1
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
<<<<<<< HEAD
     850:	19 82       	std	Y+1, r1	; 0x01
     852:	06 c0       	rjmp	.+12     	; 0x860 <CAN_InitModule+0x6e>
			CANMSG = 0;
     854:	ea ef       	ldi	r30, 0xFA	; 250
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	10 82       	st	Z, r1
=======
     7e0:	1a 82       	std	Y+2, r1	; 0x02
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <CAN_InitModule+0x88>
			CANMSG = 0;
     7e4:	8a ef       	ldi	r24, 0xFA	; 250
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	10 82       	st	Z, r1
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
<<<<<<< HEAD
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	88 30       	cpi	r24, 0x08	; 8
     864:	b8 f3       	brcs	.-18     	; 0x854 <CAN_InitModule+0x62>
=======
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	8a 83       	std	Y+2, r24	; 0x02
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	88 30       	cpi	r24, 0x08	; 8
     7f6:	b0 f3       	brcs	.-20     	; 0x7e4 <CAN_InitModule+0x7a>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
<<<<<<< HEAD
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	8f 30       	cpi	r24, 0x0F	; 15
     870:	58 f2       	brcs	.-106    	; 0x808 <CAN_InitModule+0x16>
=======
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	8f 30       	cpi	r24, 0x0F	; 15
     802:	08 f4       	brcc	.+2      	; 0x806 <CAN_InitModule+0x9c>
     804:	be cf       	rjmp	.-132    	; 0x782 <CAN_InitModule+0x18>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
<<<<<<< HEAD
     872:	e8 ed       	ldi	r30, 0xD8	; 216
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 83       	st	Z, r24
=======
     806:	88 ed       	ldi	r24, 0xD8	; 216
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	22 e0       	ldi	r18, 0x02	; 2
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
<<<<<<< HEAD
     87a:	e2 ee       	ldi	r30, 0xE2	; 226
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     882:	e3 ee       	ldi	r30, 0xE3	; 227
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     88a:	e4 ee       	ldi	r30, 0xE4	; 228
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	8e e5       	ldi	r24, 0x5E	; 94
     890:	80 83       	st	Z, r24
=======
     810:	82 ee       	ldi	r24, 0xE2	; 226
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     81a:	83 ee       	ldi	r24, 0xE3	; 227
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	28 e0       	ldi	r18, 0x08	; 8
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     824:	84 ee       	ldi	r24, 0xE4	; 228
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2e e5       	ldi	r18, 0x5E	; 94
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
<<<<<<< HEAD
     892:	e5 ee       	ldi	r30, 0xE5	; 229
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	10 82       	st	Z, r1
=======
     82e:	85 ee       	ldi	r24, 0xE5	; 229
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	fc 01       	movw	r30, r24
     834:	10 82       	st	Z, r1
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
<<<<<<< HEAD
     898:	eb ed       	ldi	r30, 0xDB	; 219
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 eb       	ldi	r24, 0xB0	; 176
     89e:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     8a0:	ef ed       	ldi	r30, 0xDF	; 223
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	8f e7       	ldi	r24, 0x7F	; 127
     8a6:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     8a8:	ee ed       	ldi	r30, 0xDE	; 222
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	80 83       	st	Z, r24
	sei();
     8b0:	78 94       	sei
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <CAN_InitRxMob>:
=======
     836:	8b ed       	ldi	r24, 0xDB	; 219
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	20 eb       	ldi	r18, 0xB0	; 176
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     840:	8f ed       	ldi	r24, 0xDF	; 223
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2f e7       	ldi	r18, 0x7F	; 127
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     84a:	8e ed       	ldi	r24, 0xDE	; 222
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	2f ef       	ldi	r18, 0xFF	; 255
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
	sei();
     854:	78 94       	sei
}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <CAN_InitRxMob>:
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe


static char CAN_InitRxMob(unsigned int ide)
{
<<<<<<< HEAD
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <CAN_InitRxMob+0x6>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <CAN_InitRxMob+0x8>
     8c4:	0f 92       	push	r0
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9c 83       	std	Y+4, r25	; 0x04
     8cc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     8ce:	ed ee       	ldi	r30, 0xED	; 237
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     8d6:	e9 ed       	ldi	r30, 0xD9	; 217
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	82 95       	swap	r24
     8de:	8f 70       	andi	r24, 0x0F	; 15
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	81 70       	andi	r24, 0x01	; 1
     8e6:	90 70       	andi	r25, 0x00	; 0
     8e8:	88 23       	and	r24, r24
     8ea:	a9 f7       	brne	.-22     	; 0x8d6 <CAN_InitRxMob+0x1a>
     8ec:	e9 ed       	ldi	r30, 0xD9	; 217
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	86 95       	lsr	r24
     8f4:	86 95       	lsr	r24
     8f6:	86 95       	lsr	r24
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	81 70       	andi	r24, 0x01	; 1
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	88 23       	and	r24, r24
     902:	49 f7       	brne	.-46     	; 0x8d6 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     904:	1a 82       	std	Y+2, r1	; 0x02
     906:	3f c0       	rjmp	.+126    	; 0x986 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     908:	ed ee       	ldi	r30, 0xED	; 237
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	82 95       	swap	r24
     910:	80 7f       	andi	r24, 0xF0	; 240
     912:	80 83       	st	Z, r24
=======
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <CAN_InitRxMob+0x6>
     866:	00 d0       	rcall	.+0      	; 0x868 <CAN_InitRxMob+0x8>
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	9c 83       	std	Y+4, r25	; 0x04
     86e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     870:	8d ee       	ldi	r24, 0xED	; 237
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     87a:	00 00       	nop
     87c:	89 ed       	ldi	r24, 0xD9	; 217
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	82 95       	swap	r24
     886:	8f 70       	andi	r24, 0x0F	; 15
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	99 27       	eor	r25, r25
     890:	89 2b       	or	r24, r25
     892:	a1 f7       	brne	.-24     	; 0x87c <CAN_InitRxMob+0x1c>
     894:	89 ed       	ldi	r24, 0xD9	; 217
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	86 95       	lsr	r24
     89e:	86 95       	lsr	r24
     8a0:	86 95       	lsr	r24
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	81 70       	andi	r24, 0x01	; 1
     8a8:	99 27       	eor	r25, r25
     8aa:	89 2b       	or	r24, r25
     8ac:	39 f7       	brne	.-50     	; 0x87c <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	49 c0       	rjmp	.+146    	; 0x944 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     8b2:	8d ee       	ldi	r24, 0xED	; 237
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	29 81       	ldd	r18, Y+1	; 0x01
     8b8:	22 95       	swap	r18
     8ba:	20 7f       	andi	r18, 0xF0	; 240
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     8c0:	8f ee       	ldi	r24, 0xEF	; 239
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	82 95       	swap	r24
     8ca:	86 95       	lsr	r24
     8cc:	86 95       	lsr	r24
     8ce:	83 70       	andi	r24, 0x03	; 3
     8d0:	88 23       	and	r24, r24
     8d2:	21 f0       	breq	.+8      	; 0x8dc <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	34 c0       	rjmp	.+104    	; 0x944 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
<<<<<<< HEAD
     914:	ef ee       	ldi	r30, 0xEF	; 239
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	82 95       	swap	r24
     91c:	86 95       	lsr	r24
     91e:	86 95       	lsr	r24
     920:	83 70       	andi	r24, 0x03	; 3
     922:	88 23       	and	r24, r24
     924:	69 f5       	brne	.+90     	; 0x980 <CAN_InitRxMob+0xc4>
=======
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
<<<<<<< HEAD
     926:	ef ee       	ldi	r30, 0xEF	; 239
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	8f e0       	ldi	r24, 0x0F	; 15
     92c:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     92e:	e3 ef       	ldi	r30, 0xF3	; 243
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	90 70       	andi	r25, 0x00	; 0
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     946:	e2 ef       	ldi	r30, 0xF2	; 242
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	82 95       	swap	r24
     94e:	88 0f       	add	r24, r24
     950:	80 7e       	andi	r24, 0xE0	; 224
     952:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     954:	e6 ef       	ldi	r30, 0xF6	; 246
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 ee       	ldi	r24, 0xE0	; 224
     95a:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     95c:	e7 ef       	ldi	r30, 0xF7	; 247
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     964:	af ee       	ldi	r26, 0xEF	; 239
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	ef ee       	ldi	r30, 0xEF	; 239
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	80 68       	ori	r24, 0x80	; 128
     970:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     972:	ed ee       	ldi	r30, 0xED	; 237
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	80 83       	st	Z, r24

		return 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	8d 83       	std	Y+5, r24	; 0x05
     97e:	0c c0       	rjmp	.+24     	; 0x998 <CAN_InitRxMob+0xdc>
=======
     8dc:	8f ee       	ldi	r24, 0xEF	; 239
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2f e0       	ldi	r18, 0x0F	; 15
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     8e6:	83 ef       	ldi	r24, 0xF3	; 243
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	2b 81       	ldd	r18, Y+3	; 0x03
     8ec:	3c 81       	ldd	r19, Y+4	; 0x04
     8ee:	33 27       	eor	r19, r19
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	36 95       	lsr	r19
     8f6:	27 95       	ror	r18
     8f8:	36 95       	lsr	r19
     8fa:	27 95       	ror	r18
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     900:	82 ef       	ldi	r24, 0xF2	; 242
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2b 81       	ldd	r18, Y+3	; 0x03
     906:	22 95       	swap	r18
     908:	22 0f       	add	r18, r18
     90a:	20 7e       	andi	r18, 0xE0	; 224
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     910:	86 ef       	ldi	r24, 0xF6	; 246
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	20 ee       	ldi	r18, 0xE0	; 224
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     91a:	87 ef       	ldi	r24, 0xF7	; 247
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     924:	8f ee       	ldi	r24, 0xEF	; 239
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2f ee       	ldi	r18, 0xEF	; 239
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	20 68       	ori	r18, 0x80	; 128
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     936:	8d ee       	ldi	r24, 0xED	; 237
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	2a 81       	ldd	r18, Y+2	; 0x02
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18

		return 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0a c0       	rjmp	.+20     	; 0x958 <CAN_InitRxMob+0xf8>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
<<<<<<< HEAD
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	8f 30       	cpi	r24, 0x0F	; 15
     98a:	08 f4       	brcc	.+2      	; 0x98e <CAN_InitRxMob+0xd2>
     98c:	bd cf       	rjmp	.-134    	; 0x908 <CAN_InitRxMob+0x4c>
=======
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	8f 30       	cpi	r24, 0x0F	; 15
     948:	08 f4       	brcc	.+2      	; 0x94c <CAN_InitRxMob+0xec>
     94a:	b3 cf       	rjmp	.-154    	; 0x8b2 <CAN_InitRxMob+0x52>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
<<<<<<< HEAD
     98e:	ed ee       	ldi	r30, 0xED	; 237
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	80 83       	st	Z, r24

	return 0;
     996:	1d 82       	std	Y+5, r1	; 0x05
     998:	8d 81       	ldd	r24, Y+5	; 0x05
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	08 95       	ret

000009aa <CAN_Init>:
=======
     94c:	8d ee       	ldi	r24, 0xED	; 237
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2a 81       	ldd	r18, Y+2	; 0x02
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18

	return 0;
     956:	80 e0       	ldi	r24, 0x00	; 0
}
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <CAN_Init>:
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe


void CAN_Init(unsigned char numOfNodes)
{
<<<<<<< HEAD
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <CAN_Init+0xa>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     9ba:	1b df       	rcall	.-458    	; 0x7f2 <CAN_InitModule>
=======
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	00 d0       	rcall	.+0      	; 0x970 <CAN_Init+0xa>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     976:	f9 de       	rcall	.-526    	; 0x76a <CAN_InitModule>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
<<<<<<< HEAD
     9bc:	19 82       	std	Y+1, r1	; 0x01
     9be:	36 c0       	rjmp	.+108    	; 0xa2c <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	79 df       	rcall	.-270    	; 0x8bc <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	8c 01       	movw	r16, r24
     9d6:	08 5d       	subi	r16, 0xD8	; 216
     9d8:	1e 4f       	sbci	r17, 0xFE	; 254
     9da:	85 e0       	ldi	r24, 0x05	; 5
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <calloc>
     9e6:	f8 01       	movw	r30, r16
     9e8:	91 83       	std	Z+1, r25	; 0x01
     9ea:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	48 2f       	mov	r20, r24
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	28 2f       	mov	r18, r24
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	fc 01       	movw	r30, r24
     a00:	e0 5b       	subi	r30, 0xB0	; 176
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	10 82       	st	Z, r1
     a06:	fc 01       	movw	r30, r24
     a08:	e0 5b       	subi	r30, 0xB0	; 176
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	f9 01       	movw	r30, r18
     a10:	ea 5b       	subi	r30, 0xBA	; 186
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	80 83       	st	Z, r24
     a16:	f9 01       	movw	r30, r18
     a18:	ea 5b       	subi	r30, 0xBA	; 186
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
     a1c:	80 81       	ld	r24, Z
     a1e:	fa 01       	movw	r30, r20
     a20:	e4 5c       	subi	r30, 0xC4	; 196
     a22:	fe 4f       	sbci	r31, 0xFE	; 254
     a24:	80 83       	st	Z, r24
=======
     978:	19 82       	std	Y+1, r1	; 0x01
     97a:	2e c0       	rjmp	.+92     	; 0x9d8 <CAN_Init+0x72>
	{
		CAN_InitRxMob(i + 1);
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	6d df       	rcall	.-294    	; 0x860 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	8c 01       	movw	r16, r24
     992:	0a 5f       	subi	r16, 0xFA	; 250
     994:	1e 4f       	sbci	r17, 0xFE	; 254
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fb d4       	rcall	.+2550   	; 0x1396 <calloc>
     9a0:	f8 01       	movw	r30, r16
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	29 81       	ldd	r18, Y+1	; 0x01
     9ae:	22 2f       	mov	r18, r18
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	49 81       	ldd	r20, Y+1	; 0x01
     9b4:	44 2f       	mov	r20, r20
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	42 5d       	subi	r20, 0xD2	; 210
     9bc:	5e 4f       	sbci	r21, 0xFE	; 254
     9be:	fa 01       	movw	r30, r20
     9c0:	60 83       	st	Z, r22
     9c2:	2c 5d       	subi	r18, 0xDC	; 220
     9c4:	3e 4f       	sbci	r19, 0xFE	; 254
     9c6:	f9 01       	movw	r30, r18
     9c8:	60 83       	st	Z, r22
     9ca:	86 5e       	subi	r24, 0xE6	; 230
     9cc:	9e 4f       	sbci	r25, 0xFE	; 254
     9ce:	fc 01       	movw	r30, r24
     9d0:	60 83       	st	Z, r22
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
<<<<<<< HEAD
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	99 81       	ldd	r25, Y+1	; 0x01
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	98 17       	cp	r25, r24
     a32:	30 f2       	brcs	.-116    	; 0x9c0 <CAN_Init+0x16>
=======
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	99 81       	ldd	r25, Y+1	; 0x01
     9da:	8a 81       	ldd	r24, Y+2	; 0x02
     9dc:	98 17       	cp	r25, r24
     9de:	70 f2       	brcs	.-100    	; 0x97c <CAN_Init+0x16>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
<<<<<<< HEAD
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <CAN_Read>:
	return rxCounter[nodeID - 1];
}
=======
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	00 d0       	rcall	.+0      	; 0x308 <servo_init+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     310:	8d e2       	ldi	r24, 0x2D	; 45
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2d e2       	ldi	r18, 0x2D	; 45
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	20 81       	ld	r18, Z
     31c:	28 63       	ori	r18, 0x38	; 56
     31e:	fc 01       	movw	r30, r24
     320:	20 83       	st	Z, r18
	
	TCNT3 = 0;
     322:	84 e9       	ldi	r24, 0x94	; 148
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	11 82       	std	Z+1, r1	; 0x01
     32a:	10 82       	st	Z, r1
	OCR3A = 0;
     32c:	88 e9       	ldi	r24, 0x98	; 152
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
	OCR3B = 0;
     336:	8a e9       	ldi	r24, 0x9A	; 154
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	11 82       	std	Z+1, r1	; 0x01
     33e:	10 82       	st	Z, r1
	OCR3C = 0;
     340:	8c e9       	ldi	r24, 0x9C	; 156
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	fc 01       	movw	r30, r24
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     34a:	80 e9       	ldi	r24, 0x90	; 144
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	2e ef       	ldi	r18, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     354:	81 e9       	ldi	r24, 0x91	; 145
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	2a e1       	ldi	r18, 0x1A	; 26
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     35e:	06 e9       	ldi	r16, 0x96	; 150
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	cc 01       	movw	r24, r24
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	bc 01       	movw	r22, r24
     37a:	cd 01       	movw	r24, r26
     37c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__floatunsisf>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	9c 01       	movw	r18, r24
     386:	ad 01       	movw	r20, r26
     388:	60 e8       	ldi	r22, 0x80	; 128
     38a:	76 e9       	ldi	r23, 0x96	; 150
     38c:	88 e1       	ldi	r24, 0x18	; 24
     38e:	9b e4       	ldi	r25, 0x4B	; 75
     390:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__divsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	5f e3       	ldi	r21, 0x3F	; 63
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__subsf3>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	f8 01       	movw	r30, r16
     3ba:	91 83       	std	Z+1, r25	; 0x01
     3bc:	80 83       	st	Z, r24
}//END OF servo_init
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <__vector_18>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
	return rxCounter[nodeID - 1];
}
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	00 90 5f 00 	lds	r0, 0x005F
     3d4:	0f 92       	push	r0
     3d6:	11 24       	eor	r1, r1
     3d8:	00 90 5b 00 	lds	r0, 0x005B
     3dc:	0f 92       	push	r0
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <__vector_18+0x28>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <__vector_18+0x2a>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	8d ee       	ldi	r24, 0xED	; 237
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	19 82       	std	Y+1, r1	; 0x01
     406:	a4 c0       	rjmp	.+328    	; 0x550 <__vector_18+0x184>
     408:	8d ee       	ldi	r24, 0xED	; 237
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	22 95       	swap	r18
     410:	20 7f       	andi	r18, 0xF0	; 240
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
     416:	8e ee       	ldi	r24, 0xEE	; 238
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	82 95       	swap	r24
     420:	86 95       	lsr	r24
     422:	87 70       	andi	r24, 0x07	; 7
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	99 27       	eor	r25, r25
     42c:	89 2b       	or	r24, r25
     42e:	09 f4       	brne	.+2      	; 0x432 <__vector_18+0x66>
     430:	70 c0       	rjmp	.+224    	; 0x512 <__vector_18+0x146>
     432:	8f ee       	ldi	r24, 0xEF	; 239
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 e8       	ldi	r18, 0x80	; 128
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
     43c:	8e ee       	ldi	r24, 0xEE	; 238
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	2e ee       	ldi	r18, 0xEE	; 238
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	2f 7d       	andi	r18, 0xDF	; 223
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
     44e:	82 ef       	ldi	r24, 0xF2	; 242
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	82 95       	swap	r24
     458:	86 95       	lsr	r24
     45a:	87 70       	andi	r24, 0x07	; 7
     45c:	28 2f       	mov	r18, r24
     45e:	83 ef       	ldi	r24, 0xF3	; 243
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	fc 01       	movw	r30, r24
     464:	80 81       	ld	r24, Z
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	82 2b       	or	r24, r18
     478:	8c 83       	std	Y+4, r24	; 0x04
     47a:	1a 82       	std	Y+2, r1	; 0x02
     47c:	26 c0       	rjmp	.+76     	; 0x4ca <__vector_18+0xfe>
     47e:	8c 81       	ldd	r24, Y+4	; 0x04
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	81 50       	subi	r24, 0x01	; 1
     486:	90 48       	sbci	r25, 0x80	; 128
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	84 5e       	subi	r24, 0xE4	; 228
     48e:	9e 4f       	sbci	r25, 0xFE	; 254
     490:	fc 01       	movw	r30, r24
     492:	20 81       	ld	r18, Z
     494:	31 81       	ldd	r19, Z+1	; 0x01
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	80 5d       	subi	r24, 0xD0	; 208
     4a0:	9e 4f       	sbci	r25, 0xFE	; 254
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	48 2f       	mov	r20, r24
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	84 0f       	add	r24, r20
     4b2:	95 1f       	adc	r25, r21
     4b4:	82 0f       	add	r24, r18
     4b6:	93 1f       	adc	r25, r19
     4b8:	2a ef       	ldi	r18, 0xFA	; 250
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	8a 81       	ldd	r24, Y+2	; 0x02
     4cc:	88 30       	cpi	r24, 0x08	; 8
     4ce:	b8 f2       	brcs	.-82     	; 0x47e <__vector_18+0xb2>
     4d0:	8c 81       	ldd	r24, Y+4	; 0x04
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	80 5d       	subi	r24, 0xD0	; 208
     4da:	9e 4f       	sbci	r25, 0xFE	; 254
     4dc:	fc 01       	movw	r30, r24
     4de:	20 81       	ld	r18, Z
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
     4e6:	25 30       	cpi	r18, 0x05	; 5
     4e8:	41 f4       	brne	.+16     	; 0x4fa <__vector_18+0x12e>
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	80 5d       	subi	r24, 0xD0	; 208
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	fc 01       	movw	r30, r24
     4f8:	10 82       	st	Z, r1
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	8c 5b       	subi	r24, 0xBC	; 188
     504:	9e 4f       	sbci	r25, 0xFE	; 254
     506:	fc 01       	movw	r30, r24
     508:	20 81       	ld	r18, Z
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
     510:	23 c0       	rjmp	.+70     	; 0x558 <__vector_18+0x18c>
     512:	8e ee       	ldi	r24, 0xEE	; 238
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	82 95       	swap	r24
     51c:	86 95       	lsr	r24
     51e:	86 95       	lsr	r24
     520:	83 70       	andi	r24, 0x03	; 3
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	81 70       	andi	r24, 0x01	; 1
     528:	99 27       	eor	r25, r25
     52a:	89 2b       	or	r24, r25
     52c:	71 f0       	breq	.+28     	; 0x54a <__vector_18+0x17e>
     52e:	8f ee       	ldi	r24, 0xEF	; 239
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	fc 01       	movw	r30, r24
     534:	10 82       	st	Z, r1
     536:	8e ee       	ldi	r24, 0xEE	; 238
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2e ee       	ldi	r18, 0xEE	; 238
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	2f 7b       	andi	r18, 0xBF	; 191
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	07 c0       	rjmp	.+14     	; 0x558 <__vector_18+0x18c>
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	8f 30       	cpi	r24, 0x0F	; 15
     554:	08 f4       	brcc	.+2      	; 0x558 <__vector_18+0x18c>
     556:	58 cf       	rjmp	.-336    	; 0x408 <__vector_18+0x3c>
     558:	8d ee       	ldi	r24, 0xED	; 237
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	2b 81       	ldd	r18, Y+3	; 0x03
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
     562:	8a ed       	ldi	r24, 0xDA	; 218
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	2a ed       	ldi	r18, 0xDA	; 218
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	00 92 5b 00 	sts	0x005B, r0
     594:	0f 90       	pop	r0
     596:	00 92 5f 00 	sts	0x005F, r0
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <CAN_InitModule>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <CAN_InitModule+0x6>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	88 ed       	ldi	r24, 0xD8	; 216
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
     5b4:	19 82       	std	Y+1, r1	; 0x01
     5b6:	3e c0       	rjmp	.+124    	; 0x634 <CAN_InitModule+0x94>
     5b8:	8d ee       	ldi	r24, 0xED	; 237
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	29 81       	ldd	r18, Y+1	; 0x01
     5be:	22 95       	swap	r18
     5c0:	20 7f       	andi	r18, 0xF0	; 240
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
     5c6:	8e ee       	ldi	r24, 0xEE	; 238
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	10 82       	st	Z, r1
     5ce:	8f ee       	ldi	r24, 0xEF	; 239
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	fc 01       	movw	r30, r24
     5d4:	10 82       	st	Z, r1
     5d6:	83 ef       	ldi	r24, 0xF3	; 243
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	10 82       	st	Z, r1
     5de:	82 ef       	ldi	r24, 0xF2	; 242
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	fc 01       	movw	r30, r24
     5e4:	10 82       	st	Z, r1
     5e6:	81 ef       	ldi	r24, 0xF1	; 241
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	fc 01       	movw	r30, r24
     5ec:	10 82       	st	Z, r1
     5ee:	80 ef       	ldi	r24, 0xF0	; 240
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	fc 01       	movw	r30, r24
     5f4:	10 82       	st	Z, r1
     5f6:	87 ef       	ldi	r24, 0xF7	; 247
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	10 82       	st	Z, r1
     5fe:	86 ef       	ldi	r24, 0xF6	; 246
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	10 82       	st	Z, r1
     606:	85 ef       	ldi	r24, 0xF5	; 245
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	10 82       	st	Z, r1
     60e:	84 ef       	ldi	r24, 0xF4	; 244
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	10 82       	st	Z, r1
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	07 c0       	rjmp	.+14     	; 0x628 <CAN_InitModule+0x88>
     61a:	8a ef       	ldi	r24, 0xFA	; 250
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	10 82       	st	Z, r1
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	8a 83       	std	Y+2, r24	; 0x02
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	88 30       	cpi	r24, 0x08	; 8
     62c:	b0 f3       	brcs	.-20     	; 0x61a <CAN_InitModule+0x7a>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	8f 30       	cpi	r24, 0x0F	; 15
     638:	08 f4       	brcc	.+2      	; 0x63c <CAN_InitModule+0x9c>
     63a:	be cf       	rjmp	.-132    	; 0x5b8 <CAN_InitModule+0x18>
     63c:	88 ed       	ldi	r24, 0xD8	; 216
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	22 e0       	ldi	r18, 0x02	; 2
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
     646:	82 ee       	ldi	r24, 0xE2	; 226
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
     650:	83 ee       	ldi	r24, 0xE3	; 227
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	28 e0       	ldi	r18, 0x08	; 8
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	84 ee       	ldi	r24, 0xE4	; 228
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2e e5       	ldi	r18, 0x5E	; 94
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
     664:	85 ee       	ldi	r24, 0xE5	; 229
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	fc 01       	movw	r30, r24
     66a:	10 82       	st	Z, r1
     66c:	8b ed       	ldi	r24, 0xDB	; 219
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	20 eb       	ldi	r18, 0xB0	; 176
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
     676:	8f ed       	ldi	r24, 0xDF	; 223
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	2f e7       	ldi	r18, 0x7F	; 127
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	8e ed       	ldi	r24, 0xDE	; 222
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
     68a:	78 94       	sei
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <CAN_InitRxMob>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <CAN_InitRxMob+0x6>
     69c:	00 d0       	rcall	.+0      	; 0x69e <CAN_InitRxMob+0x8>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	8b 83       	std	Y+3, r24	; 0x03
     6a6:	8d ee       	ldi	r24, 0xED	; 237
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	8a 83       	std	Y+2, r24	; 0x02
     6b0:	00 00       	nop
     6b2:	89 ed       	ldi	r24, 0xD9	; 217
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	fc 01       	movw	r30, r24
     6b8:	80 81       	ld	r24, Z
     6ba:	82 95       	swap	r24
     6bc:	8f 70       	andi	r24, 0x0F	; 15
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	81 70       	andi	r24, 0x01	; 1
     6c4:	99 27       	eor	r25, r25
     6c6:	89 2b       	or	r24, r25
     6c8:	a1 f7       	brne	.-24     	; 0x6b2 <CAN_InitRxMob+0x1c>
     6ca:	89 ed       	ldi	r24, 0xD9	; 217
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	86 95       	lsr	r24
     6d4:	86 95       	lsr	r24
     6d6:	86 95       	lsr	r24
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	99 27       	eor	r25, r25
     6e0:	89 2b       	or	r24, r25
     6e2:	39 f7       	brne	.-50     	; 0x6b2 <CAN_InitRxMob+0x1c>
     6e4:	19 82       	std	Y+1, r1	; 0x01
     6e6:	49 c0       	rjmp	.+146    	; 0x77a <CAN_InitRxMob+0xe4>
     6e8:	8d ee       	ldi	r24, 0xED	; 237
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	29 81       	ldd	r18, Y+1	; 0x01
     6ee:	22 95       	swap	r18
     6f0:	20 7f       	andi	r18, 0xF0	; 240
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	8f ee       	ldi	r24, 0xEF	; 239
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	82 95       	swap	r24
     700:	86 95       	lsr	r24
     702:	86 95       	lsr	r24
     704:	83 70       	andi	r24, 0x03	; 3
     706:	88 23       	and	r24, r24
     708:	21 f0       	breq	.+8      	; 0x712 <CAN_InitRxMob+0x7c>
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	34 c0       	rjmp	.+104    	; 0x77a <CAN_InitRxMob+0xe4>
     712:	8f ee       	ldi	r24, 0xEF	; 239
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	2f e0       	ldi	r18, 0x0F	; 15
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
     71c:	83 ef       	ldi	r24, 0xF3	; 243
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b 81       	ldd	r18, Y+3	; 0x03
     722:	3c 81       	ldd	r19, Y+4	; 0x04
     724:	33 27       	eor	r19, r19
     726:	36 95       	lsr	r19
     728:	27 95       	ror	r18
     72a:	36 95       	lsr	r19
     72c:	27 95       	ror	r18
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
     736:	82 ef       	ldi	r24, 0xF2	; 242
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	22 95       	swap	r18
     73e:	22 0f       	add	r18, r18
     740:	20 7e       	andi	r18, 0xE0	; 224
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
     746:	86 ef       	ldi	r24, 0xF6	; 246
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	20 ee       	ldi	r18, 0xE0	; 224
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
     750:	87 ef       	ldi	r24, 0xF7	; 247
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
     75a:	8f ee       	ldi	r24, 0xEF	; 239
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	2f ee       	ldi	r18, 0xEF	; 239
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	20 68       	ori	r18, 0x80	; 128
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
     76c:	8d ee       	ldi	r24, 0xED	; 237
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0a c0       	rjmp	.+20     	; 0x78e <CAN_InitRxMob+0xf8>
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	8f 30       	cpi	r24, 0x0F	; 15
     77e:	08 f4       	brcc	.+2      	; 0x782 <CAN_InitRxMob+0xec>
     780:	b3 cf       	rjmp	.-154    	; 0x6e8 <CAN_InitRxMob+0x52>
     782:	8d ee       	ldi	r24, 0xED	; 237
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	2a 81       	ldd	r18, Y+2	; 0x02
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <CAN_Init>:
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <CAN_Init+0xa>
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	8a 83       	std	Y+2, r24	; 0x02
     7ac:	f9 de       	rcall	.-526    	; 0x5a0 <CAN_InitModule>
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	2f c0       	rjmp	.+94     	; 0x810 <CAN_Init+0x74>
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	6d df       	rcall	.-294    	; 0x696 <CAN_InitRxMob>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	8c 01       	movw	r16, r24
     7c8:	04 5e       	subi	r16, 0xE4	; 228
     7ca:	1e 4f       	sbci	r17, 0xFE	; 254
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <calloc>
     7d8:	f8 01       	movw	r30, r16
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	80 83       	st	Z, r24
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	29 81       	ldd	r18, Y+1	; 0x01
     7e6:	22 2f       	mov	r18, r18
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	49 81       	ldd	r20, Y+1	; 0x01
     7ec:	44 2f       	mov	r20, r20
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	4c 5b       	subi	r20, 0xBC	; 188
     7f4:	5e 4f       	sbci	r21, 0xFE	; 254
     7f6:	fa 01       	movw	r30, r20
     7f8:	60 83       	st	Z, r22
     7fa:	26 5c       	subi	r18, 0xC6	; 198
     7fc:	3e 4f       	sbci	r19, 0xFE	; 254
     7fe:	f9 01       	movw	r30, r18
     800:	60 83       	st	Z, r22
     802:	80 5d       	subi	r24, 0xD0	; 208
     804:	9e 4f       	sbci	r25, 0xFE	; 254
     806:	fc 01       	movw	r30, r24
     808:	60 83       	st	Z, r22
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	99 81       	ldd	r25, Y+1	; 0x01
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	98 17       	cp	r25, r24
     816:	68 f2       	brcs	.-102    	; 0x7b2 <CAN_Init+0x16>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <CAN_Read>:
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
<<<<<<< HEAD
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	00 d0       	rcall	.+0      	; 0xa48 <CAN_Read+0x6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <CAN_Read+0x8>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9b 83       	std	Y+3, r25	; 0x03
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	fc 01       	movw	r30, r24
     a5e:	e0 5b       	subi	r30, 0xB0	; 176
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	80 81       	ld	r24, Z
     a64:	88 23       	and	r24, r24
     a66:	b1 f3       	breq	.-20     	; 0xa54 <CAN_Read+0x12>

	for(i = 0; i < 8; ++i)
     a68:	19 82       	std	Y+1, r1	; 0x01
     a6a:	30 c0       	rjmp	.+96     	; 0xacc <CAN_Read+0x8a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	9b 81       	ldd	r25, Y+3	; 0x03
     a76:	dc 01       	movw	r26, r24
     a78:	a2 0f       	add	r26, r18
     a7a:	b3 1f       	adc	r27, r19
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	82 1b       	sub	r24, r18
     a88:	93 0b       	sbc	r25, r19
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	90 95       	com	r25
     a90:	81 95       	neg	r24
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	fc 01       	movw	r30, r24
     a96:	e8 5d       	subi	r30, 0xD8	; 216
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	40 81       	ld	r20, Z
     a9c:	51 81       	ldd	r21, Z+1	; 0x01
     a9e:	8c 81       	ldd	r24, Y+4	; 0x04
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	fc 01       	movw	r30, r24
     aa8:	ea 5b       	subi	r30, 0xBA	; 186
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 81       	ld	r24, Z
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	fa 01       	movw	r30, r20
     abe:	e8 0f       	add	r30, r24
     ac0:	f9 1f       	adc	r31, r25
     ac2:	80 81       	ld	r24, Z
     ac4:	8c 93       	st	X, r24
=======
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <CAN_Read+0x6>
     82c:	00 d0       	rcall	.+0      	; 0x82e <CAN_Read+0x8>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9b 83       	std	Y+3, r25	; 0x03
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     838:	00 00       	nop
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	8c 5b       	subi	r24, 0xBC	; 188
     844:	9e 4f       	sbci	r25, 0xFE	; 254
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	b1 f3       	breq	.-20     	; 0x83a <CAN_Read+0x14>

	for(i = 0; i < 8; ++i)
     84e:	19 82       	std	Y+1, r1	; 0x01
     850:	2c c0       	rjmp	.+88     	; 0x8aa <CAN_Read+0x84>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	3b 81       	ldd	r19, Y+3	; 0x03
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	2c 81       	ldd	r18, Y+4	; 0x04
     862:	22 2f       	mov	r18, r18
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	21 50       	subi	r18, 0x01	; 1
     868:	30 48       	sbci	r19, 0x80	; 128
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	24 5e       	subi	r18, 0xE4	; 228
     870:	3e 4f       	sbci	r19, 0xFE	; 254
     872:	f9 01       	movw	r30, r18
     874:	40 81       	ld	r20, Z
     876:	51 81       	ldd	r21, Z+1	; 0x01
     878:	2c 81       	ldd	r18, Y+4	; 0x04
     87a:	22 2f       	mov	r18, r18
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	31 09       	sbc	r19, r1
     882:	26 5c       	subi	r18, 0xC6	; 198
     884:	3e 4f       	sbci	r19, 0xFE	; 254
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	62 2f       	mov	r22, r18
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	29 81       	ldd	r18, Y+1	; 0x01
     890:	22 2f       	mov	r18, r18
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	26 0f       	add	r18, r22
     896:	37 1f       	adc	r19, r23
     898:	24 0f       	add	r18, r20
     89a:	35 1f       	adc	r19, r21
     89c:	f9 01       	movw	r30, r18
     89e:	20 81       	ld	r18, Z
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
<<<<<<< HEAD
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	88 30       	cpi	r24, 0x08	; 8
     ad0:	68 f2       	brcs	.-102    	; 0xa6c <CAN_Read+0x2a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	fc 01       	movw	r30, r24
     adc:	ea 5b       	subi	r30, 0xBA	; 186
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	80 81       	ld	r24, Z
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	80 83       	st	Z, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	41 f4       	brne	.+16     	; 0xafc <CAN_Read+0xba>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     aec:	8c 81       	ldd	r24, Y+4	; 0x04
     aee:	88 2f       	mov	r24, r24
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	ea 5b       	subi	r30, 0xBA	; 186
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	88 2f       	mov	r24, r24
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	9c 01       	movw	r18, r24
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	30 40       	sbci	r19, 0x00	; 0
     b08:	f9 01       	movw	r30, r18
     b0a:	e0 5b       	subi	r30, 0xB0	; 176
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	81 50       	subi	r24, 0x01	; 1
     b12:	f9 01       	movw	r30, r18
     b14:	e0 5b       	subi	r30, 0xB0	; 176
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	80 83       	st	Z, r24

	return 0;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
}
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <CAN_Write>:
=======
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	88 f2       	brcs	.-94     	; 0x852 <CAN_Read+0x2c>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	86 5c       	subi	r24, 0xC6	; 198
     8ba:	9e 4f       	sbci	r25, 0xFE	; 254
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	25 30       	cpi	r18, 0x05	; 5
     8c8:	41 f4       	brne	.+16     	; 0x8da <CAN_Read+0xb4>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     8ca:	8c 81       	ldd	r24, Y+4	; 0x04
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	86 5c       	subi	r24, 0xC6	; 198
     8d4:	9e 4f       	sbci	r25, 0xFE	; 254
     8d6:	fc 01       	movw	r30, r24
     8d8:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     8da:	8c 81       	ldd	r24, Y+4	; 0x04
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	9c 01       	movw	r18, r24
     8e4:	2c 5b       	subi	r18, 0xBC	; 188
     8e6:	3e 4f       	sbci	r19, 0xFE	; 254
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	8c 5b       	subi	r24, 0xBC	; 188
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18

	return 0;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
}
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <CAN_Write>:
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
<<<<<<< HEAD
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	27 97       	sbiw	r28, 0x07	; 7
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	9d 83       	std	Y+5, r25	; 0x05
     b40:	8c 83       	std	Y+4, r24	; 0x04
     b42:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     b44:	e9 ed       	ldi	r30, 0xD9	; 217
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	82 95       	swap	r24
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	81 70       	andi	r24, 0x01	; 1
     b54:	90 70       	andi	r25, 0x00	; 0
     b56:	88 23       	and	r24, r24
     b58:	a9 f7       	brne	.-22     	; 0xb44 <CAN_Write+0x1a>
     b5a:	e9 ed       	ldi	r30, 0xD9	; 217
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	86 95       	lsr	r24
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	81 70       	andi	r24, 0x01	; 1
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	88 23       	and	r24, r24
     b70:	49 f7       	brne	.-46     	; 0xb44 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     b72:	ed ee       	ldi	r30, 0xED	; 237
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b7a:	1a 82       	std	Y+2, r1	; 0x02
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     b7e:	ed ee       	ldi	r30, 0xED	; 237
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	82 95       	swap	r24
     b86:	80 7f       	andi	r24, 0xF0	; 240
     b88:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     b8a:	ef ee       	ldi	r30, 0xEF	; 239
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 95       	swap	r24
     b92:	86 95       	lsr	r24
     b94:	86 95       	lsr	r24
     b96:	83 70       	andi	r24, 0x03	; 3
     b98:	88 23       	and	r24, r24
     b9a:	31 f0       	breq	.+12     	; 0xba8 <CAN_Write+0x7e>
=======
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <CAN_Write+0x6>
     90c:	00 d0       	rcall	.+0      	; 0x90e <CAN_Write+0x8>
     90e:	00 d0       	rcall	.+0      	; 0x910 <CAN_Write+0xa>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	9d 83       	std	Y+5, r25	; 0x05
     916:	8c 83       	std	Y+4, r24	; 0x04
     918:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     91a:	00 00       	nop
     91c:	89 ed       	ldi	r24, 0xD9	; 217
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	82 95       	swap	r24
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	81 70       	andi	r24, 0x01	; 1
     92e:	99 27       	eor	r25, r25
     930:	89 2b       	or	r24, r25
     932:	a1 f7       	brne	.-24     	; 0x91c <CAN_Write+0x16>
     934:	89 ed       	ldi	r24, 0xD9	; 217
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	86 95       	lsr	r24
     93e:	86 95       	lsr	r24
     940:	86 95       	lsr	r24
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	81 70       	andi	r24, 0x01	; 1
     948:	99 27       	eor	r25, r25
     94a:	89 2b       	or	r24, r25
     94c:	39 f7       	brne	.-50     	; 0x91c <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     94e:	8d ee       	ldi	r24, 0xED	; 237
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     958:	1a 82       	std	Y+2, r1	; 0x02
     95a:	15 c0       	rjmp	.+42     	; 0x986 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     95c:	8d ee       	ldi	r24, 0xED	; 237
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2a 81       	ldd	r18, Y+2	; 0x02
     962:	22 95       	swap	r18
     964:	20 7f       	andi	r18, 0xF0	; 240
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     96a:	8f ee       	ldi	r24, 0xEF	; 239
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	82 95       	swap	r24
     974:	86 95       	lsr	r24
     976:	86 95       	lsr	r24
     978:	83 70       	andi	r24, 0x03	; 3
     97a:	88 23       	and	r24, r24
     97c:	09 f4       	brne	.+2      	; 0x980 <CAN_Write+0x7a>
			break;
     97e:	06 c0       	rjmp	.+12     	; 0x98c <CAN_Write+0x86>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
<<<<<<< HEAD
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	8f 30       	cpi	r24, 0x0F	; 15
     ba6:	58 f3       	brcs	.-42     	; 0xb7e <CAN_Write+0x54>
=======
     980:	8a 81       	ldd	r24, Y+2	; 0x02
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	8f 30       	cpi	r24, 0x0F	; 15
     98a:	40 f3       	brcs	.-48     	; 0x95c <CAN_Write+0x56>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
<<<<<<< HEAD
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	8f 30       	cpi	r24, 0x0F	; 15
     bac:	19 f4       	brne	.+6      	; 0xbb4 <CAN_Write+0x8a>
		return -1;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	8f 83       	std	Y+7, r24	; 0x07
     bb2:	32 c0       	rjmp	.+100    	; 0xc18 <CAN_Write+0xee>
=======
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	8f 30       	cpi	r24, 0x0F	; 15
     990:	11 f4       	brne	.+4      	; 0x996 <CAN_Write+0x90>
		return -1;
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	39 c0       	rjmp	.+114    	; 0xa08 <CAN_Write+0x102>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
<<<<<<< HEAD
     bb4:	e2 ef       	ldi	r30, 0xF2	; 242
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	8e 81       	ldd	r24, Y+6	; 0x06
     bba:	82 95       	swap	r24
     bbc:	88 0f       	add	r24, r24
     bbe:	80 7e       	andi	r24, 0xE0	; 224
     bc0:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     bc2:	e3 ef       	ldi	r30, 0xF3	; 243
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8e 81       	ldd	r24, Y+6	; 0x06
     bc8:	86 95       	lsr	r24
     bca:	86 95       	lsr	r24
     bcc:	86 95       	lsr	r24
     bce:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     bd0:	ef ee       	ldi	r30, 0xEF	; 239
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     bd8:	1b 82       	std	Y+3, r1	; 0x03
     bda:	0f c0       	rjmp	.+30     	; 0xbfa <CAN_Write+0xd0>
		CANMSG = data[i];
     bdc:	aa ef       	ldi	r26, 0xFA	; 250
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	9d 81       	ldd	r25, Y+5	; 0x05
     bea:	fc 01       	movw	r30, r24
     bec:	e2 0f       	add	r30, r18
     bee:	f3 1f       	adc	r31, r19
     bf0:	80 81       	ld	r24, Z
     bf2:	8c 93       	st	X, r24
=======
     996:	82 ef       	ldi	r24, 0xF2	; 242
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2e 81       	ldd	r18, Y+6	; 0x06
     99c:	22 95       	swap	r18
     99e:	22 0f       	add	r18, r18
     9a0:	20 7e       	andi	r18, 0xE0	; 224
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     9a6:	83 ef       	ldi	r24, 0xF3	; 243
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	2e 81       	ldd	r18, Y+6	; 0x06
     9ac:	26 95       	lsr	r18
     9ae:	26 95       	lsr	r18
     9b0:	26 95       	lsr	r18
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     9b6:	8f ee       	ldi	r24, 0xEF	; 239
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	28 e0       	ldi	r18, 0x08	; 8
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     9c0:	19 82       	std	Y+1, r1	; 0x01
     9c2:	10 c0       	rjmp	.+32     	; 0x9e4 <CAN_Write+0xde>
		CANMSG = data[i];
     9c4:	8a ef       	ldi	r24, 0xFA	; 250
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	29 81       	ldd	r18, Y+1	; 0x01
     9ca:	22 2f       	mov	r18, r18
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	4c 81       	ldd	r20, Y+4	; 0x04
     9d0:	5d 81       	ldd	r21, Y+5	; 0x05
     9d2:	24 0f       	add	r18, r20
     9d4:	35 1f       	adc	r19, r21
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
<<<<<<< HEAD
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	70 f3       	brcs	.-36     	; 0xbdc <CAN_Write+0xb2>
=======
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 30       	cpi	r24, 0x08	; 8
     9e8:	68 f3       	brcs	.-38     	; 0x9c4 <CAN_Write+0xbe>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
<<<<<<< HEAD
     c00:	af ee       	ldi	r26, 0xEF	; 239
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ef ee       	ldi	r30, 0xEF	; 239
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     c0e:	ed ee       	ldi	r30, 0xED	; 237
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	80 83       	st	Z, r24

=======
     9ea:	8f ee       	ldi	r24, 0xEF	; 239
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2f ee       	ldi	r18, 0xEF	; 239
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	20 64       	ori	r18, 0x40	; 64
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     9fc:	8d ee       	ldi	r24, 0xED	; 237
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2b 81       	ldd	r18, Y+3	; 0x03
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18

	return 0;
     a06:	80 e0       	ldi	r24, 0x00	; 0
}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <__list_add>:
	if(value != 0)
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
	return 0;
     c16:	1f 82       	std	Y+7, r1	; 0x07
     c18:	8f 81       	ldd	r24, Y+7	; 0x07
}
<<<<<<< HEAD
     c1a:	27 96       	adiw	r28, 0x07	; 7
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	00 d0       	rcall	.+0      	; 0xc32 <__gpio_read_pin+0x6>
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	86 95       	lsr	r24
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	87 70       	andi	r24, 0x07	; 7
     c4a:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	4d 96       	adiw	r24, 0x1d	; 29
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a9 01       	movw	r20, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <__gpio_read_pin+0x4c>
     c74:	55 95       	asr	r21
     c76:	47 95       	ror	r20
     c78:	8a 95       	dec	r24
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <__gpio_read_pin+0x48>
     c7c:	ca 01       	movw	r24, r20
     c7e:	81 70       	andi	r24, 0x01	; 1
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <gpio_debouncer>:

    return 1;
}
uint16_t test = 0;
void gpio_debouncer(void)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <gpio_debouncer+0xa>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <gpio_debouncer+0xc>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <gpio_debouncer+0xe>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     c9e:	80 91 08 01 	lds	r24, 0x0108
     ca2:	90 91 09 01 	lds	r25, 0x0109
     ca6:	9c 83       	std	Y+4, r25	; 0x04
     ca8:	8b 83       	std	Y+3, r24	; 0x03
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	06 97       	sbiw	r24, 0x06	; 6
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	1b c0       	rjmp	.+54     	; 0xcec <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     cb6:	00 91 5a 01 	lds	r16, 0x015A
     cba:	10 91 5b 01 	lds	r17, 0x015B
     cbe:	ed 81       	ldd	r30, Y+5	; 0x05
     cc0:	fe 81       	ldd	r31, Y+6	; 0x06
     cc2:	80 81       	ld	r24, Z
     cc4:	b3 df       	rcall	.-154    	; 0xc2c <__gpio_read_pin>
     cc6:	28 2f       	mov	r18, r24
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	80 0f       	add	r24, r16
     cce:	91 1f       	adc	r25, r17
     cd0:	fc 01       	movw	r30, r24
     cd2:	32 96       	adiw	r30, 0x02	; 2
     cd4:	20 83       	st	Z, r18
=======
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <__list_add+0x6>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <__list_add+0x8>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <__list_add+0xa>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	7c 83       	std	Y+4, r23	; 0x04
     a2e:	6b 83       	std	Y+3, r22	; 0x03
     a30:	5e 83       	std	Y+6, r21	; 0x06
     a32:	4d 83       	std	Y+5, r20	; 0x05
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	9e 81       	ldd	r25, Y+6	; 0x06
     a38:	29 81       	ldd	r18, Y+1	; 0x01
     a3a:	3a 81       	ldd	r19, Y+2	; 0x02
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 83       	std	Z+1, r19	; 0x01
     a40:	20 83       	st	Z, r18
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	2d 81       	ldd	r18, Y+5	; 0x05
     a48:	3e 81       	ldd	r19, Y+6	; 0x06
     a4a:	fc 01       	movw	r30, r24
     a4c:	33 83       	std	Z+3, r19	; 0x03
     a4e:	22 83       	std	Z+2, r18	; 0x02
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	2b 81       	ldd	r18, Y+3	; 0x03
     a56:	3c 81       	ldd	r19, Y+4	; 0x04
     a58:	fc 01       	movw	r30, r24
     a5a:	31 83       	std	Z+1, r19	; 0x01
     a5c:	20 83       	st	Z, r18
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	29 81       	ldd	r18, Y+1	; 0x01
     a64:	3a 81       	ldd	r19, Y+2	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	33 83       	std	Z+3, r19	; 0x03
     a6a:	22 83       	std	Z+2, r18	; 0x02
     a6c:	26 96       	adiw	r28, 0x06	; 6
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <list_add>:
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <list_add+0x6>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <list_add+0x8>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	7c 83       	std	Y+4, r23	; 0x04
     a90:	6b 83       	std	Y+3, r22	; 0x03
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	fc 01       	movw	r30, r24
     a98:	42 81       	ldd	r20, Z+2	; 0x02
     a9a:	53 81       	ldd	r21, Z+3	; 0x03
     a9c:	2b 81       	ldd	r18, Y+3	; 0x03
     a9e:	3c 81       	ldd	r19, Y+4	; 0x04
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	b9 01       	movw	r22, r18
     aa6:	b9 df       	rcall	.-142    	; 0xa1a <__list_add>
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <gpio_register_pin>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	2b 97       	sbiw	r28, 0x0b	; 11
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	89 87       	std	Y+9, r24	; 0x09
     acc:	6a 87       	std	Y+10, r22	; 0x0a
     ace:	4b 87       	std	Y+11, r20	; 0x0b
     ad0:	80 91 08 01 	lds	r24, 0x0108
     ad4:	90 91 09 01 	lds	r25, 0x0109
     ad8:	9c 83       	std	Y+4, r25	; 0x04
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	06 97       	sbiw	r24, 0x06	; 6
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	15 c0       	rjmp	.+42     	; 0xb12 <gpio_register_pin+0x5c>
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	fc 01       	movw	r30, r24
     aee:	90 81       	ld	r25, Z
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	98 17       	cp	r25, r24
     af4:	11 f4       	brne	.+4      	; 0xafa <gpio_register_pin+0x44>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	bb c0       	rjmp	.+374    	; 0xc70 <gpio_register_pin+0x1ba>
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	80 85       	ldd	r24, Z+8	; 0x08
     b02:	91 85       	ldd	r25, Z+9	; 0x09
     b04:	9e 83       	std	Y+6, r25	; 0x06
     b06:	8d 83       	std	Y+5, r24	; 0x05
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	06 97       	sbiw	r24, 0x06	; 6
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	06 96       	adiw	r24, 0x06	; 6
     b18:	86 50       	subi	r24, 0x06	; 6
     b1a:	91 40       	sbci	r25, 0x01	; 1
     b1c:	29 f7       	brne	.-54     	; 0xae8 <gpio_register_pin+0x32>
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	86 95       	lsr	r24
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	8f 83       	std	Y+7, r24	; 0x07
     b2a:	89 85       	ldd	r24, Y+9	; 0x09
     b2c:	87 70       	andi	r24, 0x07	; 7
     b2e:	88 87       	std	Y+8, r24	; 0x08
     b30:	8a 85       	ldd	r24, Y+10	; 0x0a
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <gpio_register_pin+0x82>
     b36:	55 c0       	rjmp	.+170    	; 0xbe2 <gpio_register_pin+0x12c>
     b38:	8f 81       	ldd	r24, Y+7	; 0x07
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9c 01       	movw	r18, r24
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	31 09       	sbc	r19, r1
     b44:	c9 01       	movw	r24, r18
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
     b4e:	81 96       	adiw	r24, 0x21	; 33
     b50:	ac 01       	movw	r20, r24
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c 01       	movw	r18, r24
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	31 09       	sbc	r19, r1
     b5e:	c9 01       	movw	r24, r18
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	81 96       	adiw	r24, 0x21	; 33
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	68 2f       	mov	r22, r24
     b70:	88 85       	ldd	r24, Y+8	; 0x08
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <gpio_register_pin+0xca>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	2a 95       	dec	r18
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <gpio_register_pin+0xc6>
     b84:	86 2b       	or	r24, r22
     b86:	fa 01       	movw	r30, r20
     b88:	80 83       	st	Z, r24
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9c 01       	movw	r18, r24
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	31 09       	sbc	r19, r1
     b96:	c9 01       	movw	r24, r18
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	82 96       	adiw	r24, 0x22	; 34
     ba2:	ac 01       	movw	r20, r24
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9c 01       	movw	r18, r24
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	31 09       	sbc	r19, r1
     bb0:	c9 01       	movw	r24, r18
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	82 96       	adiw	r24, 0x22	; 34
     bbc:	fc 01       	movw	r30, r24
     bbe:	80 81       	ld	r24, Z
     bc0:	68 2f       	mov	r22, r24
     bc2:	88 85       	ldd	r24, Y+8	; 0x08
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <gpio_register_pin+0x11c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	2a 95       	dec	r18
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <gpio_register_pin+0x118>
     bd6:	80 95       	com	r24
     bd8:	86 23       	and	r24, r22
     bda:	fa 01       	movw	r30, r20
     bdc:	80 83       	st	Z, r24
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	47 c0       	rjmp	.+142    	; 0xc70 <gpio_register_pin+0x1ba>
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 01       	movw	r18, r24
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	31 09       	sbc	r19, r1
     bee:	c9 01       	movw	r24, r18
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	81 96       	adiw	r24, 0x21	; 33
     bfa:	ac 01       	movw	r20, r24
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9c 01       	movw	r18, r24
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	31 09       	sbc	r19, r1
     c08:	c9 01       	movw	r24, r18
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	81 96       	adiw	r24, 0x21	; 33
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	68 2f       	mov	r22, r24
     c1a:	88 85       	ldd	r24, Y+8	; 0x08
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <gpio_register_pin+0x174>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <gpio_register_pin+0x170>
     c2e:	80 95       	com	r24
     c30:	86 23       	and	r24, r22
     c32:	fa 01       	movw	r30, r20
     c34:	80 83       	st	Z, r24
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <malloc>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	89 2b       	or	r24, r25
     c48:	11 f4       	brne	.+4      	; 0xc4e <gpio_register_pin+0x198>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <gpio_register_pin+0x1ba>
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	29 85       	ldd	r18, Y+9	; 0x09
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c5e:	fc 01       	movw	r30, r24
     c60:	21 83       	std	Z+1, r18	; 0x01
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	06 96       	adiw	r24, 0x06	; 6
     c68:	66 e0       	ldi	r22, 0x06	; 6
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	08 df       	rcall	.-496    	; 0xa7e <list_add>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	2b 96       	adiw	r28, 0x0b	; 11
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <__gpio_read_pin+0x6>
     c88:	1f 92       	push	r1
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	86 95       	lsr	r24
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	87 70       	andi	r24, 0x07	; 7
     ca0:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9c 01       	movw	r18, r24
     caa:	21 50       	subi	r18, 0x01	; 1
     cac:	31 09       	sbc	r19, r1
     cae:	c9 01       	movw	r24, r18
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	80 96       	adiw	r24, 0x20	; 32
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	2b 81       	ldd	r18, Y+3	; 0x03
     cc8:	22 2f       	mov	r18, r18
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <__gpio_read_pin+0x50>
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	2a 95       	dec	r18
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <__gpio_read_pin+0x4c>
     cd6:	81 70       	andi	r24, 0x01	; 1
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	29 97       	sbiw	r28, 0x09	; 9
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     cfa:	80 91 08 01 	lds	r24, 0x0108
     cfe:	90 91 09 01 	lds	r25, 0x0109
     d02:	9d 83       	std	Y+5, r25	; 0x05
     d04:	8c 83       	std	Y+4, r24	; 0x04
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	06 97       	sbiw	r24, 0x06	; 6
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	55 c0       	rjmp	.+170    	; 0xdbc <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	90 81       	ld	r25, Z
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	98 17       	cp	r25, r24
     d1e:	09 f0       	breq	.+2      	; 0xd22 <gpio_read_pin+0x3e>
     d20:	41 c0       	rjmp	.+130    	; 0xda4 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
     d22:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     d24:	1f c0       	rjmp	.+62     	; 0xd64 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	29 81       	ldd	r18, Y+1	; 0x01
     d2e:	3a 81       	ldd	r19, Y+2	; 0x02
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	02 96       	adiw	r24, 0x02	; 2
     d36:	fc 01       	movw	r30, r24
     d38:	40 81       	ld	r20, Z
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	02 96       	adiw	r24, 0x02	; 2
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	48 17       	cp	r20, r24
     d52:	29 f0       	breq	.+10     	; 0xd5e <gpio_read_pin+0x7a>
                    return input->previous_state;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	fc 01       	movw	r30, r24
     d5a:	85 81       	ldd	r24, Z+5	; 0x05
     d5c:	37 c0       	rjmp	.+110    	; 0xdcc <gpio_read_pin+0xe8>
                i++;
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	f0 f2       	brcs	.-68     	; 0xd26 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	fc 01       	movw	r30, r24
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	89 27       	eor	r24, r25
     d76:	88 23       	and	r24, r24
     d78:	29 f0       	breq	.+10     	; 0xd84 <gpio_read_pin+0xa0>
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <gpio_read_pin+0xb0>
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	fc 01       	movw	r30, r24
     d8a:	92 81       	ldd	r25, Z+2	; 0x02
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	99 23       	and	r25, r25
     d90:	09 f0       	breq	.+2      	; 0xd94 <gpio_read_pin+0xb0>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	28 85       	ldd	r18, Y+8	; 0x08
     d9c:	fc 01       	movw	r30, r24
     d9e:	25 83       	std	Z+5, r18	; 0x05

            return state;
     da0:	88 85       	ldd	r24, Y+8	; 0x08
     da2:	14 c0       	rjmp	.+40     	; 0xdcc <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	fc 01       	movw	r30, r24
     daa:	80 85       	ldd	r24, Z+8	; 0x08
     dac:	91 85       	ldd	r25, Z+9	; 0x09
     dae:	9f 83       	std	Y+7, r25	; 0x07
     db0:	8e 83       	std	Y+6, r24	; 0x06
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	9f 81       	ldd	r25, Y+7	; 0x07
     db6:	06 97       	sbiw	r24, 0x06	; 6
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	06 96       	adiw	r24, 0x06	; 6
     dc2:	86 50       	subi	r24, 0x06	; 6
     dc4:	91 40       	sbci	r25, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <gpio_read_pin+0xe6>
     dc8:	a4 cf       	rjmp	.-184    	; 0xd12 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
}
     dcc:	29 96       	adiw	r28, 0x09	; 9
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <gpio_debouncer+0xa>
     de8:	00 d0       	rcall	.+0      	; 0xdea <gpio_debouncer+0xc>
     dea:	00 d0       	rcall	.+0      	; 0xdec <gpio_debouncer+0xe>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     df0:	80 91 08 01 	lds	r24, 0x0108
     df4:	90 91 09 01 	lds	r25, 0x0109
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	06 97       	sbiw	r24, 0x06	; 6
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	1d c0       	rjmp	.+58     	; 0xe42 <gpio_debouncer+0x64>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     e08:	00 91 4e 01 	lds	r16, 0x014E
     e0c:	10 91 4f 01 	lds	r17, 0x014F
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	34 df       	rcall	.-408    	; 0xc82 <__gpio_read_pin>
     e1a:	28 2f       	mov	r18, r24
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	80 0f       	add	r24, r16
     e22:	91 1f       	adc	r25, r17
     e24:	02 96       	adiw	r24, 0x02	; 2
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
<<<<<<< HEAD
     cd6:	ed 81       	ldd	r30, Y+5	; 0x05
     cd8:	fe 81       	ldd	r31, Y+6	; 0x06
     cda:	80 85       	ldd	r24, Z+8	; 0x08
     cdc:	91 85       	ldd	r25, Z+9	; 0x09
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	06 97       	sbiw	r24, 0x06	; 6
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	06 96       	adiw	r24, 0x06	; 6
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	92 07       	cpc	r25, r18
     cf8:	f1 f6       	brne	.-68     	; 0xcb6 <gpio_debouncer+0x2a>
=======
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	fc 01       	movw	r30, r24
     e30:	80 85       	ldd	r24, Z+8	; 0x08
     e32:	91 85       	ldd	r25, Z+9	; 0x09
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	06 97       	sbiw	r24, 0x06	; 6
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	06 96       	adiw	r24, 0x06	; 6
     e48:	86 50       	subi	r24, 0x06	; 6
     e4a:	91 40       	sbci	r25, 0x01	; 1
     e4c:	e9 f6       	brne	.-70     	; 0xe08 <gpio_debouncer+0x2a>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
<<<<<<< HEAD
     cfa:	80 91 5a 01 	lds	r24, 0x015A
     cfe:	90 91 5b 01 	lds	r25, 0x015B
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	90 93 5b 01 	sts	0x015B, r25
     d08:	80 93 5a 01 	sts	0x015A, r24
     d0c:	80 91 5a 01 	lds	r24, 0x015A
     d10:	90 91 5b 01 	lds	r25, 0x015B
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	21 f4       	brne	.+8      	; 0xd22 <gpio_debouncer+0x96>
        count = 0;
     d1a:	10 92 5b 01 	sts	0x015B, r1
     d1e:	10 92 5a 01 	sts	0x015A, r1
	
}
     d22:	26 96       	adiw	r28, 0x06	; 6
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <greenside>:
	{{85,500}, 110, FORWARD, NULL},
	{{85,770}, 90, BACKWARD, NULL}	
};

void greenside(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	2b 97       	sbiw	r28, 0x0b	; 11
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
     d4c:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
     d4e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 85;
     d54:	85 e5       	ldi	r24, 0x55	; 85
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 670;
     d5c:	8e e9       	ldi	r24, 0x9E	; 158
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	98 87       	std	Y+8, r25	; 0x08
     d62:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
     d64:	86 ea       	ldi	r24, 0xA6	; 166
     d66:	9f ef       	ldi	r25, 0xFF	; 255
     d68:	9a 87       	std	Y+10, r25	; 0x0a
     d6a:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
     d6c:	ce 01       	movw	r24, r28
     d6e:	05 96       	adiw	r24, 0x05	; 5
     d70:	a5 d2       	rcall	.+1354   	; 0x12bc <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	8c 83       	std	Y+4, r24	; 0x04
     d82:	5c c0       	rjmp	.+184    	; 0xe3c <greenside+0x104>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	48 2f       	mov	r20, r24
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	ca 01       	movw	r24, r20
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	9c 01       	movw	r18, r24
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	82 0f       	add	r24, r18
     d9c:	93 1f       	adc	r25, r19
     d9e:	84 0f       	add	r24, r20
     da0:	95 1f       	adc	r25, r21
     da2:	8f 5e       	subi	r24, 0xEF	; 239
     da4:	9e 4f       	sbci	r25, 0xFE	; 254
     da6:	bc 01       	movw	r22, r24
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	48 2f       	mov	r20, r24
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	ca 01       	movw	r24, r20
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	9c 01       	movw	r18, r24
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	84 0f       	add	r24, r20
     dc4:	95 1f       	adc	r25, r21
     dc6:	fc 01       	movw	r30, r24
     dc8:	e8 5e       	subi	r30, 0xE8	; 232
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	a0 81       	ld	r26, Z
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	48 2f       	mov	r20, r24
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	ca 01       	movw	r24, r20
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	9c 01       	movw	r18, r24
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	84 0f       	add	r24, r20
     dea:	95 1f       	adc	r25, r21
     dec:	fc 01       	movw	r30, r24
     dee:	e7 5e       	subi	r30, 0xE7	; 231
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	b0 81       	ld	r27, Z
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	48 2f       	mov	r20, r24
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	ca 01       	movw	r24, r20
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	9c 01       	movw	r18, r24
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	84 0f       	add	r24, r20
     e10:	95 1f       	adc	r25, r21
     e12:	fc 01       	movw	r30, r24
     e14:	e6 5e       	subi	r30, 0xE6	; 230
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	20 81       	ld	r18, Z
     e1a:	31 81       	ldd	r19, Z+1	; 0x01
     e1c:	cb 01       	movw	r24, r22
     e1e:	6a 2f       	mov	r22, r26
     e20:	4b 2f       	mov	r20, r27
     e22:	9b d1       	rcall	.+822    	; 0x115a <odometry_move_to_position>
     e24:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <greenside+0xf6>
     e2c:	a2 cf       	rjmp	.-188    	; 0xd72 <greenside+0x3a>
					{
						break;
					}
					if(current_position == 0)
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <greenside+0xfe>
     e34:	ff cf       	rjmp	.-2      	; 0xe34 <greenside+0xfc>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	8c 83       	std	Y+4, r24	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	08 f4       	brcc	.+2      	; 0xe44 <greenside+0x10c>
     e42:	a0 cf       	rjmp	.-192    	; 0xd84 <greenside+0x4c>
     e44:	96 cf       	rjmp	.-212    	; 0xd72 <greenside+0x3a>

00000e46 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};
=======
     e4e:	80 91 4e 01 	lds	r24, 0x014E
     e52:	90 91 4f 01 	lds	r25, 0x014F
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	90 93 4f 01 	sts	0x014F, r25
     e5c:	80 93 4e 01 	sts	0x014E, r24
     e60:	03 97       	sbiw	r24, 0x03	; 3
     e62:	21 f4       	brne	.+8      	; 0xe6c <gpio_debouncer+0x8e>
        count = 0;
     e64:	10 92 4f 01 	sts	0x014F, r1
     e68:	10 92 4e 01 	sts	0x014E, r1
	
}
     e6c:	26 96       	adiw	r28, 0x06	; 6
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <odometry_set_speed>:
	buffer[2] = distance & 0xFF;
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
		_delay_ms(50);
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3

	return odometry_wait_until_done(callback);
}
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	67 97       	sbiw	r28, 0x17	; 23
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	8f 8b       	std	Y+23, r24	; 0x17
     e98:	80 91 50 01 	lds	r24, 0x0150
     e9c:	9f 89       	ldd	r25, Y+23	; 0x17
     e9e:	98 17       	cp	r25, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <odometry_set_speed+0x22>
     ea2:	7b c0       	rjmp	.+246    	; 0xf9a <odometry_set_speed+0x118>
     ea4:	86 e5       	ldi	r24, 0x56	; 86
     ea6:	8f 87       	std	Y+15, r24	; 0x0f
     ea8:	8f 89       	ldd	r24, Y+23	; 0x17
     eaa:	88 8b       	std	Y+16, r24	; 0x10
     eac:	6c c0       	rjmp	.+216    	; 0xf86 <odometry_set_speed+0x104>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a8 e4       	ldi	r26, 0x48	; 72
     eb4:	b2 e4       	ldi	r27, 0x42	; 66
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	ab 83       	std	Y+3, r26	; 0x03
     ebc:	bc 83       	std	Y+4, r27	; 0x04
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e4       	ldi	r19, 0x40	; 64
     ec2:	4c e1       	ldi	r20, 0x1C	; 28
     ec4:	55 e4       	ldi	r21, 0x45	; 69
     ec6:	69 81       	ldd	r22, Y+1	; 0x01
     ec8:	7a 81       	ldd	r23, Y+2	; 0x02
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	bc d7       	rcall	.+3960   	; 0x1e48 <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	af 83       	std	Y+7, r26	; 0x07
     eda:	b8 87       	std	Y+8, r27	; 0x08
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	6d 81       	ldd	r22, Y+5	; 0x05
     ee6:	7e 81       	ldd	r23, Y+6	; 0x06
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	5f d6       	rcall	.+3262   	; 0x1bac <__cmpsf2>
     eee:	88 23       	and	r24, r24
     ef0:	2c f4       	brge	.+10     	; 0xefc <odometry_set_speed+0x7a>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9a 87       	std	Y+10, r25	; 0x0a
     ef8:	89 87       	std	Y+9, r24	; 0x09
     efa:	3b c0       	rjmp	.+118    	; 0xf72 <odometry_set_speed+0xf0>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	4f e7       	ldi	r20, 0x7F	; 127
     f02:	57 e4       	ldi	r21, 0x47	; 71
     f04:	6d 81       	ldd	r22, Y+5	; 0x05
     f06:	7e 81       	ldd	r23, Y+6	; 0x06
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	98 85       	ldd	r25, Y+8	; 0x08
     f0c:	99 d7       	rcall	.+3890   	; 0x1e40 <__gesf2>
     f0e:	18 16       	cp	r1, r24
     f10:	3c f5       	brge	.+78     	; 0xf60 <odometry_set_speed+0xde>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	7a 81       	ldd	r23, Y+2	; 0x02
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	92 d7       	rcall	.+3876   	; 0x1e48 <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	ab d6       	rcall	.+3414   	; 0x1c84 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9a 87       	std	Y+10, r25	; 0x0a
     f34:	89 87       	std	Y+9, r24	; 0x09
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <odometry_set_speed+0xd4>
     f38:	8a ef       	ldi	r24, 0xFA	; 250
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9c 87       	std	Y+12, r25	; 0x0c
     f3e:	8b 87       	std	Y+11, r24	; 0x0b
     f40:	8b 85       	ldd	r24, Y+11	; 0x0b
     f42:	9c 85       	ldd	r25, Y+12	; 0x0c
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <odometry_set_speed+0xc2>
     f48:	9c 87       	std	Y+12, r25	; 0x0c
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	89 2b       	or	r24, r25
     f5c:	69 f7       	brne	.-38     	; 0xf38 <odometry_set_speed+0xb6>
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <odometry_set_speed+0x104>
     f60:	6d 81       	ldd	r22, Y+5	; 0x05
     f62:	7e 81       	ldd	r23, Y+6	; 0x06
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	8d d6       	rcall	.+3354   	; 0x1c84 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9a 87       	std	Y+10, r25	; 0x0a
     f70:	89 87       	std	Y+9, r24	; 0x09
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	9e 87       	std	Y+14, r25	; 0x0e
     f78:	8d 87       	std	Y+13, r24	; 0x0d
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <odometry_set_speed+0xfc>
     f82:	9e 87       	std	Y+14, r25	; 0x0e
     f84:	8d 87       	std	Y+13, r24	; 0x0d
     f86:	ce 01       	movw	r24, r28
     f88:	0f 96       	adiw	r24, 0x0f	; 15
     f8a:	63 ec       	ldi	r22, 0xC3	; 195
     f8c:	bc dc       	rcall	.-1672   	; 0x906 <CAN_Write>
     f8e:	88 23       	and	r24, r24
     f90:	09 f0       	breq	.+2      	; 0xf94 <odometry_set_speed+0x112>
     f92:	8d cf       	rjmp	.-230    	; 0xeae <odometry_set_speed+0x2c>
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	80 93 50 01 	sts	0x0150, r24
     f9a:	67 96       	adiw	r28, 0x17	; 23
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <odometry_query_position>:
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	66 97       	sbiw	r28, 0x16	; 22
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	80 e5       	ldi	r24, 0x50	; 80
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	6c c0       	rjmp	.+216    	; 0x109e <odometry_query_position+0xf2>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a8 e4       	ldi	r26, 0x48	; 72
     fcc:	b2 e4       	ldi	r27, 0x42	; 66
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	ab 83       	std	Y+3, r26	; 0x03
     fd4:	bc 83       	std	Y+4, r27	; 0x04
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e4       	ldi	r19, 0x40	; 64
     fda:	4c e1       	ldi	r20, 0x1C	; 28
     fdc:	55 e4       	ldi	r21, 0x45	; 69
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	7a 81       	ldd	r23, Y+2	; 0x02
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	30 d7       	rcall	.+3680   	; 0x1e48 <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	af 83       	std	Y+7, r26	; 0x07
     ff2:	b8 87       	std	Y+8, r27	; 0x08
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	6d 81       	ldd	r22, Y+5	; 0x05
     ffe:	7e 81       	ldd	r23, Y+6	; 0x06
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	d3 d5       	rcall	.+2982   	; 0x1bac <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	2c f4       	brge	.+10     	; 0x1014 <odometry_query_position+0x68>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9a 87       	std	Y+10, r25	; 0x0a
    1010:	89 87       	std	Y+9, r24	; 0x09
    1012:	3b c0       	rjmp	.+118    	; 0x108a <odometry_query_position+0xde>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	6d 81       	ldd	r22, Y+5	; 0x05
    101e:	7e 81       	ldd	r23, Y+6	; 0x06
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	0d d7       	rcall	.+3610   	; 0x1e40 <__gesf2>
    1026:	18 16       	cp	r1, r24
    1028:	3c f5       	brge	.+78     	; 0x1078 <odometry_query_position+0xcc>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	69 81       	ldd	r22, Y+1	; 0x01
    1034:	7a 81       	ldd	r23, Y+2	; 0x02
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	06 d7       	rcall	.+3596   	; 0x1e48 <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	1f d6       	rcall	.+3134   	; 0x1c84 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9a 87       	std	Y+10, r25	; 0x0a
    104c:	89 87       	std	Y+9, r24	; 0x09
    104e:	0f c0       	rjmp	.+30     	; 0x106e <odometry_query_position+0xc2>
    1050:	8a ef       	ldi	r24, 0xFA	; 250
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	8b 87       	std	Y+11, r24	; 0x0b
    1058:	8b 85       	ldd	r24, Y+11	; 0x0b
    105a:	9c 85       	ldd	r25, Y+12	; 0x0c
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <odometry_query_position+0xb0>
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	8b 87       	std	Y+11, r24	; 0x0b
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	9a 87       	std	Y+10, r25	; 0x0a
    106c:	89 87       	std	Y+9, r24	; 0x09
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	89 2b       	or	r24, r25
    1074:	69 f7       	brne	.-38     	; 0x1050 <odometry_query_position+0xa4>
    1076:	13 c0       	rjmp	.+38     	; 0x109e <odometry_query_position+0xf2>
    1078:	6d 81       	ldd	r22, Y+5	; 0x05
    107a:	7e 81       	ldd	r23, Y+6	; 0x06
    107c:	8f 81       	ldd	r24, Y+7	; 0x07
    107e:	98 85       	ldd	r25, Y+8	; 0x08
    1080:	01 d6       	rcall	.+3074   	; 0x1c84 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9a 87       	std	Y+10, r25	; 0x0a
    1088:	89 87       	std	Y+9, r24	; 0x09
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	9e 87       	std	Y+14, r25	; 0x0e
    1090:	8d 87       	std	Y+13, r24	; 0x0d
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	9e 85       	ldd	r25, Y+14	; 0x0e
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <odometry_query_position+0xea>
    109a:	9e 87       	std	Y+14, r25	; 0x0e
    109c:	8d 87       	std	Y+13, r24	; 0x0d
    109e:	ce 01       	movw	r24, r28
    10a0:	0f 96       	adiw	r24, 0x0f	; 15
    10a2:	63 ec       	ldi	r22, 0xC3	; 195
    10a4:	30 dc       	rcall	.-1952   	; 0x906 <CAN_Write>
    10a6:	88 23       	and	r24, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <odometry_query_position+0x100>
    10aa:	8d cf       	rjmp	.-230    	; 0xfc6 <odometry_query_position+0x1a>
    10ac:	ce 01       	movw	r24, r28
    10ae:	0f 96       	adiw	r24, 0x0f	; 15
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	b9 db       	rcall	.-2190   	; 0x826 <CAN_Read>
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	80 93 10 01 	sts	0x0110, r24
    10ba:	88 89       	ldd	r24, Y+16	; 0x10
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	38 2f       	mov	r19, r24
    10c2:	22 27       	eor	r18, r18
    10c4:	89 89       	ldd	r24, Y+17	; 0x11
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	82 2b       	or	r24, r18
    10cc:	93 2b       	or	r25, r19
    10ce:	90 93 0b 01 	sts	0x010B, r25
    10d2:	80 93 0a 01 	sts	0x010A, r24
    10d6:	8a 89       	ldd	r24, Y+18	; 0x12
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	38 2f       	mov	r19, r24
    10de:	22 27       	eor	r18, r18
    10e0:	8b 89       	ldd	r24, Y+19	; 0x13
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	82 2b       	or	r24, r18
    10e8:	93 2b       	or	r25, r19
    10ea:	90 93 0d 01 	sts	0x010D, r25
    10ee:	80 93 0c 01 	sts	0x010C, r24
    10f2:	8c 89       	ldd	r24, Y+20	; 0x14
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	38 2f       	mov	r19, r24
    10fa:	22 27       	eor	r18, r18
    10fc:	8d 89       	ldd	r24, Y+21	; 0x15
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	82 2b       	or	r24, r18
    1104:	93 2b       	or	r25, r19
    1106:	90 93 0f 01 	sts	0x010F, r25
    110a:	80 93 0e 01 	sts	0x010E, r24
    110e:	66 96       	adiw	r28, 0x16	; 22
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <odometry_wait_until_done>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	00 d0       	rcall	.+0      	; 0x1126 <odometry_wait_until_done+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <odometry_wait_until_done+0x8>
    1128:	00 d0       	rcall	.+0      	; 0x112a <odometry_wait_until_done+0xa>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	aa d3       	rcall	.+1876   	; 0x1888 <system_get_system_time>
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	ab 83       	std	Y+3, r26	; 0x03
    1142:	bc 83       	std	Y+4, r27	; 0x04
    1144:	33 df       	rcall	.-410    	; 0xfac <odometry_query_position>
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	89 2b       	or	r24, r25
    114c:	71 f0       	breq	.+28     	; 0x116a <odometry_wait_until_done+0x4a>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	ab 81       	ldd	r26, Y+3	; 0x03
    1154:	bc 81       	ldd	r27, Y+4	; 0x04
    1156:	2d 81       	ldd	r18, Y+5	; 0x05
    1158:	3e 81       	ldd	r19, Y+6	; 0x06
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	f9 01       	movw	r30, r18
    1160:	09 95       	icall
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	11 f4       	brne	.+4      	; 0x116a <odometry_wait_until_done+0x4a>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	09 c0       	rjmp	.+18     	; 0x117c <odometry_wait_until_done+0x5c>
    116a:	80 91 10 01 	lds	r24, 0x0110
    116e:	8d 34       	cpi	r24, 0x4D	; 77
    1170:	49 f3       	breq	.-46     	; 0x1144 <odometry_wait_until_done+0x24>
    1172:	80 91 10 01 	lds	r24, 0x0110
    1176:	82 35       	cpi	r24, 0x52	; 82
    1178:	29 f3       	breq	.-54     	; 0x1144 <odometry_wait_until_done+0x24>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
<<<<<<< HEAD
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	67 97       	sbiw	r28, 0x17	; 23
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
     e5c:	90 91 5c 01 	lds	r25, 0x015C
     e60:	8f 89       	ldd	r24, Y+23	; 0x17
     e62:	89 17       	cp	r24, r25
     e64:	09 f4       	brne	.+2      	; 0xe68 <odometry_set_speed+0x22>
     e66:	7b c0       	rjmp	.+246    	; 0xf5e <odometry_set_speed+0x118>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
     e68:	86 e5       	ldi	r24, 0x56	; 86
     e6a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	88 8b       	std	Y+16, r24	; 0x10
     e70:	6c c0       	rjmp	.+216    	; 0xf4a <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a8 e4       	ldi	r26, 0x48	; 72
     e78:	b2 e4       	ldi	r27, 0x42	; 66
     e7a:	8b 87       	std	Y+11, r24	; 0x0b
     e7c:	9c 87       	std	Y+12, r25	; 0x0c
     e7e:	ad 87       	std	Y+13, r26	; 0x0d
     e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e82:	6b 85       	ldd	r22, Y+11	; 0x0b
     e84:	7c 85       	ldd	r23, Y+12	; 0x0c
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e4       	ldi	r19, 0x40	; 64
     e8e:	4c e1       	ldi	r20, 0x1C	; 28
     e90:	55 e4       	ldi	r21, 0x45	; 69
     e92:	1d d7       	rcall	.+3642   	; 0x1cce <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8f 83       	std	Y+7, r24	; 0x07
     e9a:	98 87       	std	Y+8, r25	; 0x08
     e9c:	a9 87       	std	Y+9, r26	; 0x09
     e9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	bb d5       	rcall	.+2934   	; 0x1a28 <__cmpsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <odometry_set_speed+0x7a>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	3b c0       	rjmp	.+118    	; 0xf36 <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	fa d6       	rcall	.+3572   	; 0x1cc6 <__gesf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	3c f5       	brge	.+78     	; 0xf24 <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eda:	8d 85       	ldd	r24, Y+13	; 0x0d
     edc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	f3 d6       	rcall	.+3558   	; 0x1cce <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0c d6       	rcall	.+3096   	; 0x1b0a <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <odometry_set_speed+0xd4>
     efc:	8a ef       	ldi	r24, 0xFA	; 250
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <odometry_set_speed+0xc2>
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
=======
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	6c 97       	sbiw	r28, 0x1c	; 28
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	98 8f       	std	Y+24, r25	; 0x18
    11a4:	8f 8b       	std	Y+23, r24	; 0x17
    11a6:	69 8f       	std	Y+25, r22	; 0x19
    11a8:	4a 8f       	std	Y+26, r20	; 0x1a
    11aa:	3c 8f       	std	Y+28, r19	; 0x1c
    11ac:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    11ae:	89 8d       	ldd	r24, Y+25	; 0x19
    11b0:	68 de       	rcall	.-816    	; 0xe82 <odometry_set_speed>

	buffer[0] = 'G';
    11b2:	87 e4       	ldi	r24, 0x47	; 71
    11b4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    11b6:	8f 89       	ldd	r24, Y+23	; 0x17
    11b8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	89 2f       	mov	r24, r25
    11c2:	99 0f       	add	r25, r25
    11c4:	99 0b       	sbc	r25, r25
    11c6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	fc 01       	movw	r30, r24
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	fc 01       	movw	r30, r24
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	89 2f       	mov	r24, r25
    11e0:	99 0f       	add	r25, r25
    11e2:	99 0b       	sbc	r25, r25
    11e4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	fc 01       	movw	r30, r24
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    11f2:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    11f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11f6:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    11f8:	6c c0       	rjmp	.+216    	; 0x12d2 <odometry_move_to_position+0x144>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a8 e4       	ldi	r26, 0x48	; 72
    1200:	b2 e4       	ldi	r27, 0x42	; 66
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	ab 83       	std	Y+3, r26	; 0x03
    1208:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e4       	ldi	r19, 0x40	; 64
    120e:	4c e1       	ldi	r20, 0x1C	; 28
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	69 81       	ldd	r22, Y+1	; 0x01
    1214:	7a 81       	ldd	r23, Y+2	; 0x02
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	16 d6       	rcall	.+3116   	; 0x1e48 <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	af 83       	std	Y+7, r26	; 0x07
    1226:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	6d 81       	ldd	r22, Y+5	; 0x05
    1232:	7e 81       	ldd	r23, Y+6	; 0x06
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	b9 d4       	rcall	.+2418   	; 0x1bac <__cmpsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <odometry_move_to_position+0xba>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9a 87       	std	Y+10, r25	; 0x0a
    1244:	89 87       	std	Y+9, r24	; 0x09
    1246:	3b c0       	rjmp	.+118    	; 0x12be <odometry_move_to_position+0x130>
	else if (__tmp > 65535)
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	3f ef       	ldi	r19, 0xFF	; 255
    124c:	4f e7       	ldi	r20, 0x7F	; 127
    124e:	57 e4       	ldi	r21, 0x47	; 71
    1250:	6d 81       	ldd	r22, Y+5	; 0x05
    1252:	7e 81       	ldd	r23, Y+6	; 0x06
    1254:	8f 81       	ldd	r24, Y+7	; 0x07
    1256:	98 85       	ldd	r25, Y+8	; 0x08
    1258:	f3 d5       	rcall	.+3046   	; 0x1e40 <__gesf2>
    125a:	18 16       	cp	r1, r24
    125c:	3c f5       	brge	.+78     	; 0x12ac <odometry_move_to_position+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	7a 81       	ldd	r23, Y+2	; 0x02
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	ec d5       	rcall	.+3032   	; 0x1e48 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	05 d5       	rcall	.+2570   	; 0x1c84 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9a 87       	std	Y+10, r25	; 0x0a
    1280:	89 87       	std	Y+9, r24	; 0x09
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <odometry_move_to_position+0x114>
    1284:	8a ef       	ldi	r24, 0xFA	; 250
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	8b 85       	ldd	r24, Y+11	; 0x0b
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <odometry_move_to_position+0x102>
    1294:	9c 87       	std	Y+12, r25	; 0x0c
    1296:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
=======
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	9a 87       	std	Y+10, r25	; 0x0a
    12a0:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f7       	brne	.-38     	; 0xefc <odometry_set_speed+0xb6>
     f22:	13 c0       	rjmp	.+38     	; 0xf4a <odometry_set_speed+0x104>
=======
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	89 2b       	or	r24, r25
    12a8:	69 f7       	brne	.-38     	; 0x1284 <odometry_move_to_position+0xf6>
    12aa:	13 c0       	rjmp	.+38     	; 0x12d2 <odometry_move_to_position+0x144>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	ee d5       	rcall	.+3036   	; 0x1b0a <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <odometry_set_speed+0xfc>
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	ce 01       	movw	r24, r28
     f4c:	0f 96       	adiw	r24, 0x0f	; 15
     f4e:	63 ec       	ldi	r22, 0xC3	; 195
     f50:	ec dd       	rcall	.-1064   	; 0xb2a <CAN_Write>
     f52:	88 23       	and	r24, r24
     f54:	09 f0       	breq	.+2      	; 0xf58 <odometry_set_speed+0x112>
     f56:	8d cf       	rjmp	.-230    	; 0xe72 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
     f58:	8f 89       	ldd	r24, Y+23	; 0x17
     f5a:	80 93 5c 01 	sts	0x015C, r24
}
     f5e:	67 96       	adiw	r28, 0x17	; 23
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <odometry_query_position>:

static void odometry_query_position(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	66 97       	sbiw	r28, 0x16	; 22
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
     f84:	80 e5       	ldi	r24, 0x50	; 80
     f86:	8f 87       	std	Y+15, r24	; 0x0f
     f88:	6c c0       	rjmp	.+216    	; 0x1062 <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a8 e4       	ldi	r26, 0x48	; 72
     f90:	b2 e4       	ldi	r27, 0x42	; 66
     f92:	8b 87       	std	Y+11, r24	; 0x0b
     f94:	9c 87       	std	Y+12, r25	; 0x0c
     f96:	ad 87       	std	Y+13, r26	; 0x0d
     f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e4       	ldi	r19, 0x40	; 64
     fa6:	4c e1       	ldi	r20, 0x1C	; 28
     fa8:	55 e4       	ldi	r21, 0x45	; 69
     faa:	91 d6       	rcall	.+3362   	; 0x1cce <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8f 83       	std	Y+7, r24	; 0x07
     fb2:	98 87       	std	Y+8, r25	; 0x08
     fb4:	a9 87       	std	Y+9, r26	; 0x09
     fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	2f d5       	rcall	.+2654   	; 0x1a28 <__cmpsf2>
     fca:	88 23       	and	r24, r24
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <odometry_query_position+0x68>
		__ticks = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	3b c0       	rjmp	.+118    	; 0x104e <odometry_query_position+0xde>
	else if (__tmp > 65535)
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	4f e7       	ldi	r20, 0x7F	; 127
     fe6:	57 e4       	ldi	r21, 0x47	; 71
     fe8:	6e d6       	rcall	.+3292   	; 0x1cc6 <__gesf2>
     fea:	18 16       	cp	r1, r24
     fec:	3c f5       	brge	.+78     	; 0x103c <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e2       	ldi	r20, 0x20	; 32
     ffc:	51 e4       	ldi	r21, 0x41	; 65
     ffe:	67 d6       	rcall	.+3278   	; 0x1cce <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	80 d5       	rcall	.+2816   	; 0x1b0a <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <odometry_query_position+0xc2>
    1014:	8a ef       	ldi	r24, 0xFA	; 250
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	8b 83       	std	Y+3, r24	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <odometry_query_position+0xb0>
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
=======
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	e7 d4       	rcall	.+2510   	; 0x1c84 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9a 87       	std	Y+10, r25	; 0x0a
    12bc:	89 87       	std	Y+9, r24	; 0x09
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	9e 87       	std	Y+14, r25	; 0x0e
    12c4:	8d 87       	std	Y+13, r24	; 0x0d
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <odometry_move_to_position+0x13c>
    12ce:	9e 87       	std	Y+14, r25	; 0x0e
    12d0:	8d 87       	std	Y+13, r24	; 0x0d
    12d2:	ce 01       	movw	r24, r28
    12d4:	0f 96       	adiw	r24, 0x0f	; 15
    12d6:	63 ec       	ldi	r22, 0xC3	; 195
    12d8:	16 db       	rcall	.-2516   	; 0x906 <CAN_Write>
    12da:	88 23       	and	r24, r24
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <odometry_move_to_position+0x152>
    12de:	8d cf       	rjmp	.-230    	; 0x11fa <odometry_move_to_position+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	1d df       	rcall	.-454    	; 0x1120 <odometry_wait_until_done>
}
    12e6:	6c 96       	adiw	r28, 0x1c	; 28
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	68 97       	sbiw	r28, 0x18	; 24
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	98 8f       	std	Y+24, r25	; 0x18
    130e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1310:	89 e4       	ldi	r24, 0x49	; 73
    1312:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1314:	8f 89       	ldd	r24, Y+23	; 0x17
    1316:	98 8d       	ldd	r25, Y+24	; 0x18
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	89 2f       	mov	r24, r25
    1320:	99 0f       	add	r25, r25
    1322:	99 0b       	sbc	r25, r25
    1324:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	fc 01       	movw	r30, r24
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	89 2f       	mov	r24, r25
    133e:	99 0f       	add	r25, r25
    1340:	99 0b       	sbc	r25, r25
    1342:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	fc 01       	movw	r30, r24
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    1350:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1352:	8f 89       	ldd	r24, Y+23	; 0x17
    1354:	98 8d       	ldd	r25, Y+24	; 0x18
    1356:	fc 01       	movw	r30, r24
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	95 81       	ldd	r25, Z+5	; 0x05
    135c:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    135e:	8f 89       	ldd	r24, Y+23	; 0x17
    1360:	98 8d       	ldd	r25, Y+24	; 0x18
    1362:	fc 01       	movw	r30, r24
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	90 93 0b 01 	sts	0x010B, r25
    136c:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1370:	8f 89       	ldd	r24, Y+23	; 0x17
    1372:	98 8d       	ldd	r25, Y+24	; 0x18
    1374:	fc 01       	movw	r30, r24
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	90 93 0d 01 	sts	0x010D, r25
    137e:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	fc 01       	movw	r30, r24
    1388:	84 81       	ldd	r24, Z+4	; 0x04
    138a:	95 81       	ldd	r25, Z+5	; 0x05
    138c:	90 93 0f 01 	sts	0x010F, r25
    1390:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1394:	6c c0       	rjmp	.+216    	; 0x146e <odometry_set_position+0x176>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a8 e4       	ldi	r26, 0x48	; 72
    139c:	b2 e4       	ldi	r27, 0x42	; 66
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	ab 83       	std	Y+3, r26	; 0x03
    13a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e4       	ldi	r19, 0x40	; 64
    13aa:	4c e1       	ldi	r20, 0x1C	; 28
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	69 81       	ldd	r22, Y+1	; 0x01
    13b0:	7a 81       	ldd	r23, Y+2	; 0x02
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	48 d5       	rcall	.+2704   	; 0x1e48 <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	af 83       	std	Y+7, r26	; 0x07
    13c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e8       	ldi	r20, 0x80	; 128
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	6d 81       	ldd	r22, Y+5	; 0x05
    13ce:	7e 81       	ldd	r23, Y+6	; 0x06
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	eb d3       	rcall	.+2006   	; 0x1bac <__cmpsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <odometry_set_position+0xec>
		__ticks = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9a 87       	std	Y+10, r25	; 0x0a
    13e0:	89 87       	std	Y+9, r24	; 0x09
    13e2:	3b c0       	rjmp	.+118    	; 0x145a <odometry_set_position+0x162>
	else if (__tmp > 65535)
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	6d 81       	ldd	r22, Y+5	; 0x05
    13ee:	7e 81       	ldd	r23, Y+6	; 0x06
    13f0:	8f 81       	ldd	r24, Y+7	; 0x07
    13f2:	98 85       	ldd	r25, Y+8	; 0x08
    13f4:	25 d5       	rcall	.+2634   	; 0x1e40 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	3c f5       	brge	.+78     	; 0x1448 <odometry_set_position+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	51 e4       	ldi	r21, 0x41	; 65
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	7a 81       	ldd	r23, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	1e d5       	rcall	.+2620   	; 0x1e48 <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	37 d4       	rcall	.+2158   	; 0x1c84 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9a 87       	std	Y+10, r25	; 0x0a
    141c:	89 87       	std	Y+9, r24	; 0x09
    141e:	0f c0       	rjmp	.+30     	; 0x143e <odometry_set_position+0x146>
    1420:	8a ef       	ldi	r24, 0xFA	; 250
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 87       	std	Y+12, r25	; 0x0c
    1426:	8b 87       	std	Y+11, r24	; 0x0b
    1428:	8b 85       	ldd	r24, Y+11	; 0x0b
    142a:	9c 85       	ldd	r25, Y+12	; 0x0c
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <odometry_set_position+0x134>
    1430:	9c 87       	std	Y+12, r25	; 0x0c
    1432:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
=======
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	9a 87       	std	Y+10, r25	; 0x0a
    143c:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <odometry_query_position+0xa4>
    103a:	13 c0       	rjmp	.+38     	; 0x1062 <odometry_query_position+0xf2>
=======
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	89 2b       	or	r24, r25
    1444:	69 f7       	brne	.-38     	; 0x1420 <odometry_set_position+0x128>
    1446:	13 c0       	rjmp	.+38     	; 0x146e <odometry_set_position+0x176>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	62 d5       	rcall	.+2756   	; 0x1b0a <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <odometry_query_position+0xea>
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	ce 01       	movw	r24, r28
    1064:	0f 96       	adiw	r24, 0x0f	; 15
    1066:	63 ec       	ldi	r22, 0xC3	; 195
    1068:	60 dd       	rcall	.-1344   	; 0xb2a <CAN_Write>
    106a:	88 23       	and	r24, r24
    106c:	09 f0       	breq	.+2      	; 0x1070 <odometry_query_position+0x100>
    106e:	8d cf       	rjmp	.-230    	; 0xf8a <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1070:	ce 01       	movw	r24, r28
    1072:	0f 96       	adiw	r24, 0x0f	; 15
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	e5 dc       	rcall	.-1590   	; 0xa42 <CAN_Read>

	position.state = buffer[0];
    1078:	8f 85       	ldd	r24, Y+15	; 0x0f
    107a:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    107e:	88 89       	ldd	r24, Y+16	; 0x10
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	38 2f       	mov	r19, r24
    1086:	22 27       	eor	r18, r18
    1088:	89 89       	ldd	r24, Y+17	; 0x11
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	82 2b       	or	r24, r18
    1090:	93 2b       	or	r25, r19
    1092:	90 93 0b 01 	sts	0x010B, r25
    1096:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    109a:	8a 89       	ldd	r24, Y+18	; 0x12
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	38 2f       	mov	r19, r24
    10a2:	22 27       	eor	r18, r18
    10a4:	8b 89       	ldd	r24, Y+19	; 0x13
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	82 2b       	or	r24, r18
    10ac:	93 2b       	or	r25, r19
    10ae:	90 93 0d 01 	sts	0x010D, r25
    10b2:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    10b6:	8c 89       	ldd	r24, Y+20	; 0x14
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	38 2f       	mov	r19, r24
    10be:	22 27       	eor	r18, r18
    10c0:	8d 89       	ldd	r24, Y+21	; 0x15
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	82 2b       	or	r24, r18
    10c8:	93 2b       	or	r25, r19
    10ca:	90 93 0f 01 	sts	0x010F, r25
    10ce:	80 93 0e 01 	sts	0x010E, r24
}
    10d2:	66 96       	adiw	r28, 0x16	; 22
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	27 97       	sbiw	r28, 0x07	; 7
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    10fc:	78 d2       	rcall	.+1264   	; 0x15ee <system_get_system_time>
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	ab 83       	std	Y+3, r26	; 0x03
    110c:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    110e:	30 df       	rcall	.-416    	; 0xf70 <odometry_query_position>
		if(callback != NULL)
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	71 f0       	breq	.+28     	; 0x1134 <__stack+0x35>
		{
			if(callback(time) == 1)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	ab 81       	ldd	r26, Y+3	; 0x03
    111e:	bc 81       	ldd	r27, Y+4	; 0x04
    1120:	ed 81       	ldd	r30, Y+5	; 0x05
    1122:	fe 81       	ldd	r31, Y+6	; 0x06
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	09 95       	icall
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	19 f4       	brne	.+6      	; 0x1134 <__stack+0x35>
				return ODOMETRY_FAIL;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <__stack+0x47>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1134:	80 91 10 01 	lds	r24, 0x0110
    1138:	8d 34       	cpi	r24, 0x4D	; 77
    113a:	49 f3       	breq	.-46     	; 0x110e <__stack+0xf>
    113c:	80 91 10 01 	lds	r24, 0x0110
    1140:	82 35       	cpi	r24, 0x52	; 82
    1142:	29 f3       	breq	.-54     	; 0x110e <__stack+0xf>

	return ODOMETRY_SUCCESS;
    1144:	1f 82       	std	Y+7, r1	; 0x07
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1148:	27 96       	adiw	r28, 0x07	; 7
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <odometry_move_to_position>:

	return odometry_wait_until_done(callback);
=======
    1448:	6d 81       	ldd	r22, Y+5	; 0x05
    144a:	7e 81       	ldd	r23, Y+6	; 0x06
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	19 d4       	rcall	.+2098   	; 0x1c84 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9a 87       	std	Y+10, r25	; 0x0a
    1458:	89 87       	std	Y+9, r24	; 0x09
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	9e 87       	std	Y+14, r25	; 0x0e
    1460:	8d 87       	std	Y+13, r24	; 0x0d
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <odometry_set_position+0x16e>
    146a:	9e 87       	std	Y+14, r25	; 0x0e
    146c:	8d 87       	std	Y+13, r24	; 0x0d
    146e:	ce 01       	movw	r24, r28
    1470:	0f 96       	adiw	r24, 0x0f	; 15
    1472:	63 ec       	ldi	r22, 0xC3	; 195
    1474:	48 da       	rcall	.-2928   	; 0x906 <CAN_Write>
    1476:	88 23       	and	r24, r24
    1478:	09 f0       	breq	.+2      	; 0x147c <odometry_set_position+0x184>
    147a:	8d cf       	rjmp	.-230    	; 0x1396 <odometry_set_position+0x9e>
		_delay_ms(50);
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
}
    147c:	68 96       	adiw	r28, 0x18	; 24
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <purpleside>:
	{{100,100},NORMAL_SPEED,FORWARD,NULL},
	{{200,100},NORMAL_SPEED,FORWARD,NULL}
};

<<<<<<< HEAD
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	6c 97       	sbiw	r28, 0x1c	; 28
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	98 8f       	std	Y+24, r25	; 0x18
    1170:	8f 8b       	std	Y+23, r24	; 0x17
    1172:	69 8f       	std	Y+25, r22	; 0x19
    1174:	4a 8f       	std	Y+26, r20	; 0x1a
    1176:	3c 8f       	std	Y+28, r19	; 0x1c
    1178:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    117a:	89 8d       	ldd	r24, Y+25	; 0x19
    117c:	64 de       	rcall	.-824    	; 0xe46 <odometry_set_speed>

	buffer[0] = 'G';
    117e:	87 e4       	ldi	r24, 0x47	; 71
    1180:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1182:	ef 89       	ldd	r30, Y+23	; 0x17
    1184:	f8 8d       	ldd	r31, Y+24	; 0x18
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	89 2f       	mov	r24, r25
    118c:	99 0f       	add	r25, r25
    118e:	99 0b       	sbc	r25, r25
    1190:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1192:	ef 89       	ldd	r30, Y+23	; 0x17
    1194:	f8 8d       	ldd	r31, Y+24	; 0x18
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    119c:	ef 89       	ldd	r30, Y+23	; 0x17
    119e:	f8 8d       	ldd	r31, Y+24	; 0x18
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	89 2f       	mov	r24, r25
    11a6:	99 0f       	add	r25, r25
    11a8:	99 0b       	sbc	r25, r25
    11aa:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    11ac:	ef 89       	ldd	r30, Y+23	; 0x17
    11ae:	f8 8d       	ldd	r31, Y+24	; 0x18
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    11b6:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    11b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ba:	8d 8b       	std	Y+21, r24	; 0x15
    11bc:	6c c0       	rjmp	.+216    	; 0x1296 <odometry_move_to_position+0x13c>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a8 e4       	ldi	r26, 0x48	; 72
    11c4:	b2 e4       	ldi	r27, 0x42	; 66
    11c6:	8b 87       	std	Y+11, r24	; 0x0b
    11c8:	9c 87       	std	Y+12, r25	; 0x0c
    11ca:	ad 87       	std	Y+13, r26	; 0x0d
    11cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e4       	ldi	r19, 0x40	; 64
    11da:	4c e1       	ldi	r20, 0x1C	; 28
    11dc:	55 e4       	ldi	r21, 0x45	; 69
    11de:	77 d5       	rcall	.+2798   	; 0x1cce <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	15 d4       	rcall	.+2090   	; 0x1a28 <__cmpsf2>
    11fe:	88 23       	and	r24, r24
    1200:	2c f4       	brge	.+10     	; 0x120c <odometry_move_to_position+0xb2>
		__ticks = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	3b c0       	rjmp	.+118    	; 0x1282 <odometry_move_to_position+0x128>
	else if (__tmp > 65535)
    120c:	6f 81       	ldd	r22, Y+7	; 0x07
    120e:	78 85       	ldd	r23, Y+8	; 0x08
    1210:	89 85       	ldd	r24, Y+9	; 0x09
    1212:	9a 85       	ldd	r25, Y+10	; 0x0a
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	54 d5       	rcall	.+2728   	; 0x1cc6 <__gesf2>
    121e:	18 16       	cp	r1, r24
    1220:	3c f5       	brge	.+78     	; 0x1270 <odometry_move_to_position+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6b 85       	ldd	r22, Y+11	; 0x0b
    1224:	7c 85       	ldd	r23, Y+12	; 0x0c
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	4d d5       	rcall	.+2714   	; 0x1cce <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	66 d4       	rcall	.+2252   	; 0x1b0a <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <odometry_move_to_position+0x10c>
    1248:	8a ef       	ldi	r24, 0xFA	; 250
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <odometry_move_to_position+0xfa>
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f7       	brne	.-38     	; 0x1248 <odometry_move_to_position+0xee>
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <odometry_move_to_position+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	48 d4       	rcall	.+2192   	; 0x1b0a <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <odometry_move_to_position+0x134>
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	ce 01       	movw	r24, r28
    1298:	0f 96       	adiw	r24, 0x0f	; 15
    129a:	63 ec       	ldi	r22, 0xC3	; 195
    129c:	46 dc       	rcall	.-1908   	; 0xb2a <CAN_Write>
    129e:	88 23       	and	r24, r24
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <odometry_move_to_position+0x14a>
    12a2:	8d cf       	rjmp	.-230    	; 0x11be <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    12a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a8:	1d df       	rcall	.-454    	; 0x10e4 <odometry_wait_until_done>
}
    12aa:	6c 96       	adiw	r28, 0x1c	; 28
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	68 97       	sbiw	r28, 0x18	; 24
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	98 8f       	std	Y+24, r25	; 0x18
    12d2:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    12d4:	89 e4       	ldi	r24, 0x49	; 73
    12d6:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    12d8:	ef 89       	ldd	r30, Y+23	; 0x17
    12da:	f8 8d       	ldd	r31, Y+24	; 0x18
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	89 2f       	mov	r24, r25
    12e2:	99 0f       	add	r25, r25
    12e4:	99 0b       	sbc	r25, r25
    12e6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    12e8:	ef 89       	ldd	r30, Y+23	; 0x17
    12ea:	f8 8d       	ldd	r31, Y+24	; 0x18
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    12f2:	ef 89       	ldd	r30, Y+23	; 0x17
    12f4:	f8 8d       	ldd	r31, Y+24	; 0x18
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	89 2f       	mov	r24, r25
    12fc:	99 0f       	add	r25, r25
    12fe:	99 0b       	sbc	r25, r25
    1300:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1302:	ef 89       	ldd	r30, Y+23	; 0x17
    1304:	f8 8d       	ldd	r31, Y+24	; 0x18
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    130c:	ef 89       	ldd	r30, Y+23	; 0x17
    130e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1310:	84 81       	ldd	r24, Z+4	; 0x04
    1312:	95 81       	ldd	r25, Z+5	; 0x05
    1314:	89 2f       	mov	r24, r25
    1316:	99 0f       	add	r25, r25
    1318:	99 0b       	sbc	r25, r25
    131a:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    131c:	ef 89       	ldd	r30, Y+23	; 0x17
    131e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1320:	84 81       	ldd	r24, Z+4	; 0x04
    1322:	95 81       	ldd	r25, Z+5	; 0x05
    1324:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1326:	ef 89       	ldd	r30, Y+23	; 0x17
    1328:	f8 8d       	ldd	r31, Y+24	; 0x18
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	90 93 0b 01 	sts	0x010B, r25
    1332:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1336:	ef 89       	ldd	r30, Y+23	; 0x17
    1338:	f8 8d       	ldd	r31, Y+24	; 0x18
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	90 93 0d 01 	sts	0x010D, r25
    1342:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    1346:	ef 89       	ldd	r30, Y+23	; 0x17
    1348:	f8 8d       	ldd	r31, Y+24	; 0x18
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	95 81       	ldd	r25, Z+5	; 0x05
    134e:	90 93 0f 01 	sts	0x010F, r25
    1352:	80 93 0e 01 	sts	0x010E, r24
    1356:	6c c0       	rjmp	.+216    	; 0x1430 <odometry_set_position+0x174>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a8 e4       	ldi	r26, 0x48	; 72
    135e:	b2 e4       	ldi	r27, 0x42	; 66
    1360:	8b 87       	std	Y+11, r24	; 0x0b
    1362:	9c 87       	std	Y+12, r25	; 0x0c
    1364:	ad 87       	std	Y+13, r26	; 0x0d
    1366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	6b 85       	ldd	r22, Y+11	; 0x0b
    136a:	7c 85       	ldd	r23, Y+12	; 0x0c
    136c:	8d 85       	ldd	r24, Y+13	; 0x0d
    136e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e4       	ldi	r19, 0x40	; 64
    1374:	4c e1       	ldi	r20, 0x1C	; 28
    1376:	55 e4       	ldi	r21, 0x45	; 69
    1378:	aa d4       	rcall	.+2388   	; 0x1cce <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8f 83       	std	Y+7, r24	; 0x07
    1380:	98 87       	std	Y+8, r25	; 0x08
    1382:	a9 87       	std	Y+9, r26	; 0x09
    1384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	48 d3       	rcall	.+1680   	; 0x1a28 <__cmpsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <odometry_set_position+0xea>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	3b c0       	rjmp	.+118    	; 0x141c <odometry_set_position+0x160>
	else if (__tmp > 65535)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	87 d4       	rcall	.+2318   	; 0x1cc6 <__gesf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	3c f5       	brge	.+78     	; 0x140a <odometry_set_position+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	80 d4       	rcall	.+2304   	; 0x1cce <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	99 d3       	rcall	.+1842   	; 0x1b0a <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <odometry_set_position+0x144>
    13e2:	8a ef       	ldi	r24, 0xFA	; 250
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <odometry_set_position+0x132>
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
=======
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <timer_init>:
    timer_callback = callback;
}
=======
void purpleside(void)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	2b 97       	sbiw	r28, 0x0b	; 11
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    14a2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t next_position	 = 0;
    14a4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	8b 83       	std	Y+3, r24	; 0x03
	
	starting_position.x		= 0;
    14aa:	1e 82       	std	Y+6, r1	; 0x06
    14ac:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    14ae:	18 86       	std	Y+8, r1	; 0x08
    14b0:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    14b2:	1a 86       	std	Y+10, r1	; 0x0a
    14b4:	19 86       	std	Y+9, r1	; 0x09
	
	odometry_set_position(&starting_position);
    14b6:	ce 01       	movw	r24, r28
    14b8:	05 96       	adiw	r24, 0x05	; 5
    14ba:	1e df       	rcall	.-452    	; 0x12f8 <odometry_set_position>

	while(1)
	{
		switch(active_state)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <purpleside+0x3a>
    14c6:	40 c0       	rjmp	.+128    	; 0x1548 <purpleside+0xba>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	3a c0       	rjmp	.+116    	; 0x1542 <purpleside+0xb4>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	6b e0       	ldi	r22, 0x0B	; 11
    14da:	62 9f       	mul	r22, r18
    14dc:	c0 01       	movw	r24, r0
    14de:	63 9f       	mul	r22, r19
    14e0:	90 0d       	add	r25, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	87 5e       	subi	r24, 0xE7	; 231
    14e6:	9e 4f       	sbci	r25, 0xFE	; 254
    14e8:	dc 01       	movw	r26, r24
    14ea:	ec 91       	ld	r30, X
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	6b e0       	ldi	r22, 0x0B	; 11
    14f4:	62 9f       	mul	r22, r18
    14f6:	c0 01       	movw	r24, r0
    14f8:	63 9f       	mul	r22, r19
    14fa:	90 0d       	add	r25, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	88 5e       	subi	r24, 0xE8	; 232
    1500:	9e 4f       	sbci	r25, 0xFE	; 254
    1502:	dc 01       	movw	r26, r24
    1504:	7c 91       	ld	r23, X
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	6b e0       	ldi	r22, 0x0B	; 11
    150e:	62 9f       	mul	r22, r18
    1510:	c0 01       	movw	r24, r0
    1512:	63 9f       	mul	r22, r19
    1514:	90 0d       	add	r25, r0
    1516:	11 24       	eor	r1, r1
    1518:	8f 5e       	subi	r24, 0xEF	; 239
    151a:	9e 4f       	sbci	r25, 0xFE	; 254
    151c:	9a 01       	movw	r18, r20
    151e:	4e 2f       	mov	r20, r30
    1520:	67 2f       	mov	r22, r23
    1522:	35 de       	rcall	.-918    	; 0x118e <odometry_move_to_position>
    1524:	8c 83       	std	Y+4, r24	; 0x04
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	09 f4       	brne	.+2      	; 0x152e <purpleside+0xa0>
					{
						break;
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <purpleside+0xba>
					}
					if(current_position == 0)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	21 f0       	breq	.+8      	; 0x153c <purpleside+0xae>
					{
						
					}
					else if(current_position == 1)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	09 f4       	brne	.+2      	; 0x153c <purpleside+0xae>
					{
						while(1);
    153a:	ff cf       	rjmp	.-2      	; 0x153a <purpleside+0xac>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	88 23       	and	r24, r24
    1546:	19 f2       	breq	.-122    	; 0x14ce <purpleside+0x40>
					{
						while(1);
					}
				}//end for
		}//end switch
	}//end while
    1548:	b9 cf       	rjmp	.-142    	; 0x14bc <purpleside+0x2e>

0000154a <timer_init>:
    timer_callback = callback;
}
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3


void timer_init(unsigned int freq)
{
<<<<<<< HEAD
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <timer_init+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
     a08:	81 e8       	ldi	r24, 0x81	; 129
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	29 e0       	ldi	r18, 0x09	; 9
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     a12:	08 e8       	ldi	r16, 0x88	; 136
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	cc 01       	movw	r24, r24
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	9f d3       	rcall	.+1854   	; 0x1164 <__floatunsisf>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	9c 01       	movw	r18, r24
     a2c:	ad 01       	movw	r20, r26
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	76 e9       	ldi	r23, 0x96	; 150
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	9b e4       	ldi	r25, 0x4B	; 75
     a36:	fd d2       	rcall	.+1530   	; 0x1032 <__divsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	bc 01       	movw	r22, r24
     a46:	cd 01       	movw	r24, r26
     a48:	8c d2       	rcall	.+1304   	; 0xf62 <__addsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	5c d3       	rcall	.+1720   	; 0x110c <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	f8 01       	movw	r30, r16
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
     a5e:	8f e6       	ldi	r24, 0x6F	; 111
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	22 e0       	ldi	r18, 0x02	; 2
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18

	SREG |= 0x80;
     a68:	8f e5       	ldi	r24, 0x5F	; 95
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2f e5       	ldi	r18, 0x5F	; 95
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	20 68       	ori	r18, 0x80	; 128
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <__vector_12>:
=======
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	00 d0       	rcall	.+0      	; 0x1554 <timer_init+0xa>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	fc 01       	movw	r30, r24
    1562:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1564:	81 e8       	ldi	r24, 0x81	; 129
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	29 e0       	ldi	r18, 0x09	; 9
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    156e:	08 e8       	ldi	r16, 0x88	; 136
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	cc 01       	movw	r24, r24
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	ad d3       	rcall	.+1882   	; 0x1cdc <__floatunsisf>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9c 01       	movw	r18, r24
    1588:	ad 01       	movw	r20, r26
    158a:	60 e8       	ldi	r22, 0x80	; 128
    158c:	76 e9       	ldi	r23, 0x96	; 150
    158e:	88 e1       	ldi	r24, 0x18	; 24
    1590:	9b e4       	ldi	r25, 0x4B	; 75
    1592:	10 d3       	rcall	.+1568   	; 0x1bb4 <__divsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	9f d2       	rcall	.+1342   	; 0x1ae4 <__addsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	6a d3       	rcall	.+1748   	; 0x1c84 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	f8 01       	movw	r30, r16
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    15ba:	8f e6       	ldi	r24, 0x6F	; 111
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	22 e0       	ldi	r18, 0x02	; 2
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 83       	st	Z, r18

	SREG |= 0x80;
    15c4:	8f e5       	ldi	r24, 0x5F	; 95
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2f e5       	ldi	r18, 0x5F	; 95
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	20 68       	ori	r18, 0x80	; 128
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <__vector_12>:
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3


ISR(TIMER1_COMPA_vect)
{
<<<<<<< HEAD
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	00 90 5f 00 	lds	r0, 0x005F
     a90:	0f 92       	push	r0
     a92:	11 24       	eor	r1, r1
     a94:	00 90 5b 00 	lds	r0, 0x005B
     a98:	0f 92       	push	r0
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
     aba:	80 91 3c 01 	lds	r24, 0x013C
     abe:	90 91 3d 01 	lds	r25, 0x013D
     ac2:	89 2b       	or	r24, r25
     ac4:	31 f0       	breq	.+12     	; 0xad2 <__vector_12+0x4a>
        timer_callback();
     ac6:	80 91 3c 01 	lds	r24, 0x013C
     aca:	90 91 3d 01 	lds	r25, 0x013D
     ace:	fc 01       	movw	r30, r24
     ad0:	09 95       	icall
	sys_time++;
     ad2:	80 91 38 01 	lds	r24, 0x0138
     ad6:	90 91 39 01 	lds	r25, 0x0139
     ada:	a0 91 3a 01 	lds	r26, 0x013A
     ade:	b0 91 3b 01 	lds	r27, 0x013B
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	a1 1d       	adc	r26, r1
     ae6:	b1 1d       	adc	r27, r1
     ae8:	80 93 38 01 	sts	0x0138, r24
     aec:	90 93 39 01 	sts	0x0139, r25
     af0:	a0 93 3a 01 	sts	0x013A, r26
     af4:	b0 93 3b 01 	sts	0x013B, r27
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	00 92 5b 00 	sts	0x005B, r0
     b1a:	0f 90       	pop	r0
     b1c:	00 92 5f 00 	sts	0x005F, r0
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <system_init>:

void system_init(void)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	6c 97       	sbiw	r28, 0x1c	; 28
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	aa e7       	ldi	r26, 0x7A	; 122
     b40:	b4 e4       	ldi	r27, 0x44	; 68
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
=======
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	00 90 5f 00 	lds	r0, 0x005F
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	00 90 5b 00 	lds	r0, 0x005B
    15f4:	0f 92       	push	r0
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1616:	80 91 55 01 	lds	r24, 0x0155
    161a:	90 91 56 01 	lds	r25, 0x0156
    161e:	89 2b       	or	r24, r25
    1620:	31 f0       	breq	.+12     	; 0x162e <__vector_12+0x4a>
        timer_callback();
    1622:	80 91 55 01 	lds	r24, 0x0155
    1626:	90 91 56 01 	lds	r25, 0x0156
    162a:	fc 01       	movw	r30, r24
    162c:	09 95       	icall
	sys_time++;
    162e:	80 91 51 01 	lds	r24, 0x0151
    1632:	90 91 52 01 	lds	r25, 0x0152
    1636:	a0 91 53 01 	lds	r26, 0x0153
    163a:	b0 91 54 01 	lds	r27, 0x0154
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	a1 1d       	adc	r26, r1
    1642:	b1 1d       	adc	r27, r1
    1644:	80 93 51 01 	sts	0x0151, r24
    1648:	90 93 52 01 	sts	0x0152, r25
    164c:	a0 93 53 01 	sts	0x0153, r26
    1650:	b0 93 54 01 	sts	0x0154, r27
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	00 92 5b 00 	sts	0x005B, r0
    1676:	0f 90       	pop	r0
    1678:	00 92 5f 00 	sts	0x005F, r0
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <system_init>:

void system_init(void)
{
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	6c 97       	sbiw	r28, 0x1c	; 28
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	aa e7       	ldi	r26, 0x7A	; 122
    169c:	b4 e4       	ldi	r27, 0x44	; 68
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	ab 83       	std	Y+3, r26	; 0x03
    16a4:	bc 83       	std	Y+4, r27	; 0x04
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< HEAD
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e4       	ldi	r19, 0x40	; 64
     b4e:	4c e1       	ldi	r20, 0x1C	; 28
     b50:	55 e4       	ldi	r21, 0x45	; 69
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	ba d3       	rcall	.+1908   	; 0x12d0 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	8d 83       	std	Y+5, r24	; 0x05
     b62:	9e 83       	std	Y+6, r25	; 0x06
     b64:	af 83       	std	Y+7, r26	; 0x07
     b66:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e8       	ldi	r20, 0x80	; 128
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	6d 81       	ldd	r22, Y+5	; 0x05
     b72:	7e 81       	ldd	r23, Y+6	; 0x06
     b74:	8f 81       	ldd	r24, Y+7	; 0x07
     b76:	98 85       	ldd	r25, Y+8	; 0x08
     b78:	58 d2       	rcall	.+1200   	; 0x102a <__cmpsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	2c f4       	brge	.+10     	; 0xb88 <system_init+0x62>
		__ticks = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9a 87       	std	Y+10, r25	; 0x0a
     b84:	89 87       	std	Y+9, r24	; 0x09
     b86:	3b c0       	rjmp	.+118    	; 0xbfe <system_init+0xd8>
	else if (__tmp > 65535)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	3f ef       	ldi	r19, 0xFF	; 255
     b8c:	4f e7       	ldi	r20, 0x7F	; 127
     b8e:	57 e4       	ldi	r21, 0x47	; 71
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	97 d3       	rcall	.+1838   	; 0x12c8 <__gesf2>
     b9a:	18 16       	cp	r1, r24
     b9c:	3c f5       	brge	.+78     	; 0xbec <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e2       	ldi	r20, 0x20	; 32
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	7a 81       	ldd	r23, Y+2	; 0x02
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	90 d3       	rcall	.+1824   	; 0x12d0 <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	a9 d2       	rcall	.+1362   	; 0x110c <__fixunssfsi>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	9a 87       	std	Y+10, r25	; 0x0a
     bc0:	89 87       	std	Y+9, r24	; 0x09
     bc2:	0f c0       	rjmp	.+30     	; 0xbe2 <system_init+0xbc>
     bc4:	8a ef       	ldi	r24, 0xFA	; 250
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	8b 87       	std	Y+11, r24	; 0x0b
     bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bce:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <system_init+0xaa>
     bd4:	9c 87       	std	Y+12, r25	; 0x0c
     bd6:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e4       	ldi	r19, 0x40	; 64
    16aa:	4c e1       	ldi	r20, 0x1C	; 28
    16ac:	55 e4       	ldi	r21, 0x45	; 69
    16ae:	69 81       	ldd	r22, Y+1	; 0x01
    16b0:	7a 81       	ldd	r23, Y+2	; 0x02
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	c8 d3       	rcall	.+1936   	; 0x1e48 <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	af 83       	std	Y+7, r26	; 0x07
    16c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	6d 81       	ldd	r22, Y+5	; 0x05
    16ce:	7e 81       	ldd	r23, Y+6	; 0x06
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	98 85       	ldd	r25, Y+8	; 0x08
    16d4:	6b d2       	rcall	.+1238   	; 0x1bac <__cmpsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <system_init+0x62>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9a 87       	std	Y+10, r25	; 0x0a
    16e0:	89 87       	std	Y+9, r24	; 0x09
    16e2:	3b c0       	rjmp	.+118    	; 0x175a <system_init+0xd8>
	else if (__tmp > 65535)
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	6d 81       	ldd	r22, Y+5	; 0x05
    16ee:	7e 81       	ldd	r23, Y+6	; 0x06
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	a5 d3       	rcall	.+1866   	; 0x1e40 <__gesf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	3c f5       	brge	.+78     	; 0x1748 <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	69 81       	ldd	r22, Y+1	; 0x01
    1704:	7a 81       	ldd	r23, Y+2	; 0x02
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	9e d3       	rcall	.+1852   	; 0x1e48 <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	b7 d2       	rcall	.+1390   	; 0x1c84 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9a 87       	std	Y+10, r25	; 0x0a
    171c:	89 87       	std	Y+9, r24	; 0x09
    171e:	0f c0       	rjmp	.+30     	; 0x173e <system_init+0xbc>
    1720:	8a ef       	ldi	r24, 0xFA	; 250
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	8b 87       	std	Y+11, r24	; 0x0b
    1728:	8b 85       	ldd	r24, Y+11	; 0x0b
    172a:	9c 85       	ldd	r25, Y+12	; 0x0c
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <system_init+0xaa>
    1730:	9c 87       	std	Y+12, r25	; 0x0c
    1732:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
<<<<<<< HEAD
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
=======
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9a 87       	std	Y+10, r25	; 0x0a
    173c:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
<<<<<<< HEAD
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	69 f7       	brne	.-38     	; 0x13e2 <odometry_set_position+0x126>
    1408:	13 c0       	rjmp	.+38     	; 0x1430 <odometry_set_position+0x174>
=======
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	89 2b       	or	r24, r25
     be8:	69 f7       	brne	.-38     	; 0xbc4 <system_init+0x9e>
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <system_init+0xec>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	89 2b       	or	r24, r25
    1744:	69 f7       	brne	.-38     	; 0x1720 <system_init+0x9e>
    1746:	13 c0       	rjmp	.+38     	; 0x176e <system_init+0xec>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
<<<<<<< HEAD
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	7b d3       	rcall	.+1782   	; 0x1b0a <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <odometry_set_position+0x16c>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	ce 01       	movw	r24, r28
    1432:	0f 96       	adiw	r24, 0x0f	; 15
    1434:	63 ec       	ldi	r22, 0xC3	; 195
    1436:	79 db       	rcall	.-2318   	; 0xb2a <CAN_Write>
    1438:	88 23       	and	r24, r24
    143a:	09 f0       	breq	.+2      	; 0x143e <odometry_set_position+0x182>
    143c:	8d cf       	rjmp	.-230    	; 0x1358 <odometry_set_position+0x9c>
		_delay_ms(50);
}
    143e:	68 96       	adiw	r28, 0x18	; 24
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <timer_register_callback>:
static void (*timer_callback)(void) = NULL;

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <timer_register_callback+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	90 93 5e 01 	sts	0x015E, r25
    1466:	80 93 5d 01 	sts	0x015D, r24
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <timer_init>:


void timer_init(unsigned int freq)
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <timer_init+0xa>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1486:	e0 e8       	ldi	r30, 0x80	; 128
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    148c:	e1 e8       	ldi	r30, 0x81	; 129
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	89 e0       	ldi	r24, 0x09	; 9
    1492:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1494:	08 e8       	ldi	r16, 0x88	; 136
    1496:	10 e0       	ldi	r17, 0x00	; 0
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	cc 01       	movw	r24, r24
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	5d d3       	rcall	.+1722   	; 0x1b62 <__floatunsisf>
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	60 e8       	ldi	r22, 0x80	; 128
    14ae:	76 e9       	ldi	r23, 0x96	; 150
    14b0:	88 e1       	ldi	r24, 0x18	; 24
    14b2:	9b e4       	ldi	r25, 0x4B	; 75
    14b4:	bd d2       	rcall	.+1402   	; 0x1a30 <__divsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	4c d2       	rcall	.+1176   	; 0x1960 <__addsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	1c d3       	rcall	.+1592   	; 0x1b0a <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    14dc:	ef e6       	ldi	r30, 0x6F	; 111
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	80 83       	st	Z, r24

	SREG |= 0x80;
    14e4:	af e5       	ldi	r26, 0x5F	; 95
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ef e5       	ldi	r30, 0x5F	; 95
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8c 93       	st	X, r24
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	00 90 5b 00 	lds	r0, 0x005B
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1530:	80 91 5d 01 	lds	r24, 0x015D
    1534:	90 91 5e 01 	lds	r25, 0x015E
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_12+0x46>
        timer_callback();
    153c:	e0 91 5d 01 	lds	r30, 0x015D
    1540:	f0 91 5e 01 	lds	r31, 0x015E
    1544:	09 95       	icall
	if(sys_time >= 80000)
    1546:	80 91 5f 01 	lds	r24, 0x015F
    154a:	90 91 60 01 	lds	r25, 0x0160
    154e:	a0 91 61 01 	lds	r26, 0x0161
    1552:	b0 91 62 01 	lds	r27, 0x0162
    1556:	80 38       	cpi	r24, 0x80	; 128
    1558:	28 e3       	ldi	r18, 0x38	; 56
    155a:	92 07       	cpc	r25, r18
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	a2 07       	cpc	r26, r18
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	b2 07       	cpc	r27, r18
    1564:	10 f0       	brcs	.+4      	; 0x156a <__vector_12+0x6a>
		actuators_kisobran();
    1566:	0e 94 1c 02 	call	0x438	; 0x438 <actuators_kisobran>
	sys_time++;
    156a:	80 91 5f 01 	lds	r24, 0x015F
    156e:	90 91 60 01 	lds	r25, 0x0160
    1572:	a0 91 61 01 	lds	r26, 0x0161
    1576:	b0 91 62 01 	lds	r27, 0x0162
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	a1 1d       	adc	r26, r1
    157e:	b1 1d       	adc	r27, r1
    1580:	80 93 5f 01 	sts	0x015F, r24
    1584:	90 93 60 01 	sts	0x0160, r25
    1588:	a0 93 61 01 	sts	0x0161, r26
    158c:	b0 93 62 01 	sts	0x0162, r27
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	00 92 5b 00 	sts	0x005B, r0
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0
    15b8:	1f 90       	pop	r1
    15ba:	18 95       	reti

000015bc <system_reset_system_time>:
		return 1;
	}
	return 0;
}
void system_reset_system_time(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    15c4:	10 92 5f 01 	sts	0x015F, r1
    15c8:	10 92 60 01 	sts	0x0160, r1
    15cc:	10 92 61 01 	sts	0x0161, r1
    15d0:	10 92 62 01 	sts	0x0162, r1
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <system_set_match_started>:
void system_set_match_started(void)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	80 93 63 01 	sts	0x0163, r24
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    15f6:	80 91 5f 01 	lds	r24, 0x015F
    15fa:	90 91 60 01 	lds	r25, 0x0160
    15fe:	a0 91 61 01 	lds	r26, 0x0161
    1602:	b0 91 62 01 	lds	r27, 0x0162
}
    1606:	bc 01       	movw	r22, r24
    1608:	cd 01       	movw	r24, r26
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <system_init>:
uint8_t system_get_match_started(void)
{
	return match_started;
}
void system_init(void)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	2e 97       	sbiw	r28, 0x0e	; 14
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
	timer_register_callback(gpio_debouncer);
    1624:	86 e4       	ldi	r24, 0x46	; 70
    1626:	96 e0       	ldi	r25, 0x06	; 6
    1628:	13 df       	rcall	.-474    	; 0x1450 <timer_register_callback>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a8 ec       	ldi	r26, 0xC8	; 200
    1630:	b2 e4       	ldi	r27, 0x42	; 66
    1632:	8b 87       	std	Y+11, r24	; 0x0b
    1634:	9c 87       	std	Y+12, r25	; 0x0c
    1636:	ad 87       	std	Y+13, r26	; 0x0d
    1638:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	6b 85       	ldd	r22, Y+11	; 0x0b
    163c:	7c 85       	ldd	r23, Y+12	; 0x0c
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e4       	ldi	r19, 0x40	; 64
    1646:	4c e1       	ldi	r20, 0x1C	; 28
    1648:	55 e4       	ldi	r21, 0x45	; 69
    164a:	41 d3       	rcall	.+1666   	; 0x1cce <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8f 83       	std	Y+7, r24	; 0x07
    1652:	98 87       	std	Y+8, r25	; 0x08
    1654:	a9 87       	std	Y+9, r26	; 0x09
    1656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	df d1       	rcall	.+958    	; 0x1a28 <__cmpsf2>
    166a:	88 23       	and	r24, r24
    166c:	2c f4       	brge	.+10     	; 0x1678 <system_init+0x68>
		__ticks = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	3b c0       	rjmp	.+118    	; 0x16ee <system_init+0xde>
	else if (__tmp > 65535)
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	57 e4       	ldi	r21, 0x47	; 71
    1688:	1e d3       	rcall	.+1596   	; 0x1cc6 <__gesf2>
    168a:	18 16       	cp	r1, r24
    168c:	3c f5       	brge	.+78     	; 0x16dc <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	17 d3       	rcall	.+1582   	; 0x1cce <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	30 d2       	rcall	.+1120   	; 0x1b0a <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <system_init+0xc2>
    16b4:	8a ef       	ldi	r24, 0xFA	; 250
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <system_init+0xb0>
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
=======
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	7e 81       	ldd	r23, Y+6	; 0x06
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	8b d2       	rcall	.+1302   	; 0x110c <__fixunssfsi>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	9a 87       	std	Y+10, r25	; 0x0a
     bfc:	89 87       	std	Y+9, r24	; 0x09
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	9e 87       	std	Y+14, r25	; 0x0e
     c04:	8d 87       	std	Y+13, r24	; 0x0d
     c06:	8d 85       	ldd	r24, Y+13	; 0x0d
     c08:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <system_init+0xe4>
     c0e:	9e 87       	std	Y+14, r25	; 0x0e
     c10:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
     c12:	83 e3       	ldi	r24, 0x33	; 51
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
	PORTG = 0xFF;
     c1c:	84 e3       	ldi	r24, 0x34	; 52
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	aa e7       	ldi	r26, 0x7A	; 122
     c2c:	b4 e4       	ldi	r27, 0x44	; 68
     c2e:	8f 87       	std	Y+15, r24	; 0x0f
     c30:	98 8b       	std	Y+16, r25	; 0x10
     c32:	a9 8b       	std	Y+17, r26	; 0x11
     c34:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e4       	ldi	r19, 0x40	; 64
     c3a:	4c e1       	ldi	r20, 0x1C	; 28
     c3c:	55 e4       	ldi	r21, 0x45	; 69
     c3e:	6f 85       	ldd	r22, Y+15	; 0x0f
     c40:	78 89       	ldd	r23, Y+16	; 0x10
     c42:	89 89       	ldd	r24, Y+17	; 0x11
     c44:	9a 89       	ldd	r25, Y+18	; 0x12
     c46:	44 d3       	rcall	.+1672   	; 0x12d0 <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	ad 8b       	std	Y+21, r26	; 0x15
     c52:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	6b 89       	ldd	r22, Y+19	; 0x13
     c5e:	7c 89       	ldd	r23, Y+20	; 0x14
     c60:	8d 89       	ldd	r24, Y+21	; 0x15
     c62:	9e 89       	ldd	r25, Y+22	; 0x16
     c64:	e2 d1       	rcall	.+964    	; 0x102a <__cmpsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <system_init+0x14e>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	98 8f       	std	Y+24, r25	; 0x18
     c70:	8f 8b       	std	Y+23, r24	; 0x17
     c72:	3b c0       	rjmp	.+118    	; 0xcea <system_init+0x1c4>
	else if (__tmp > 65535)
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	3f ef       	ldi	r19, 0xFF	; 255
     c78:	4f e7       	ldi	r20, 0x7F	; 127
     c7a:	57 e4       	ldi	r21, 0x47	; 71
     c7c:	6b 89       	ldd	r22, Y+19	; 0x13
     c7e:	7c 89       	ldd	r23, Y+20	; 0x14
     c80:	8d 89       	ldd	r24, Y+21	; 0x15
     c82:	9e 89       	ldd	r25, Y+22	; 0x16
     c84:	21 d3       	rcall	.+1602   	; 0x12c8 <__gesf2>
     c86:	18 16       	cp	r1, r24
     c88:	3c f5       	brge	.+78     	; 0xcd8 <system_init+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e2       	ldi	r20, 0x20	; 32
     c90:	51 e4       	ldi	r21, 0x41	; 65
     c92:	6f 85       	ldd	r22, Y+15	; 0x0f
     c94:	78 89       	ldd	r23, Y+16	; 0x10
     c96:	89 89       	ldd	r24, Y+17	; 0x11
     c98:	9a 89       	ldd	r25, Y+18	; 0x12
     c9a:	1a d3       	rcall	.+1588   	; 0x12d0 <__mulsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	33 d2       	rcall	.+1126   	; 0x110c <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	98 8f       	std	Y+24, r25	; 0x18
     cac:	8f 8b       	std	Y+23, r24	; 0x17
     cae:	0f c0       	rjmp	.+30     	; 0xcce <system_init+0x1a8>
     cb0:	8a ef       	ldi	r24, 0xFA	; 250
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9a 8f       	std	Y+26, r25	; 0x1a
     cb6:	89 8f       	std	Y+25, r24	; 0x19
     cb8:	89 8d       	ldd	r24, Y+25	; 0x19
     cba:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <system_init+0x196>
     cc0:	9a 8f       	std	Y+26, r25	; 0x1a
     cc2:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    1748:	6d 81       	ldd	r22, Y+5	; 0x05
    174a:	7e 81       	ldd	r23, Y+6	; 0x06
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	99 d2       	rcall	.+1330   	; 0x1c84 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9a 87       	std	Y+10, r25	; 0x0a
    1758:	89 87       	std	Y+9, r24	; 0x09
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	9e 87       	std	Y+14, r25	; 0x0e
    1760:	8d 87       	std	Y+13, r24	; 0x0d
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <system_init+0xe4>
    176a:	9e 87       	std	Y+14, r25	; 0x0e
    176c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DDRG = 0xff;
    176e:	83 e3       	ldi	r24, 0x33	; 51
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	2f ef       	ldi	r18, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
	PORTG = 0xFF;
    1778:	84 e3       	ldi	r24, 0x34	; 52
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	aa e7       	ldi	r26, 0x7A	; 122
    1788:	b4 e4       	ldi	r27, 0x44	; 68
    178a:	8f 87       	std	Y+15, r24	; 0x0f
    178c:	98 8b       	std	Y+16, r25	; 0x10
    178e:	a9 8b       	std	Y+17, r26	; 0x11
    1790:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e4       	ldi	r19, 0x40	; 64
    1796:	4c e1       	ldi	r20, 0x1C	; 28
    1798:	55 e4       	ldi	r21, 0x45	; 69
    179a:	6f 85       	ldd	r22, Y+15	; 0x0f
    179c:	78 89       	ldd	r23, Y+16	; 0x10
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	9a 89       	ldd	r25, Y+18	; 0x12
    17a2:	52 d3       	rcall	.+1700   	; 0x1e48 <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8b 8b       	std	Y+19, r24	; 0x13
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	ad 8b       	std	Y+21, r26	; 0x15
    17ae:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	6b 89       	ldd	r22, Y+19	; 0x13
    17ba:	7c 89       	ldd	r23, Y+20	; 0x14
    17bc:	8d 89       	ldd	r24, Y+21	; 0x15
    17be:	9e 89       	ldd	r25, Y+22	; 0x16
    17c0:	f5 d1       	rcall	.+1002   	; 0x1bac <__cmpsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <system_init+0x14e>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	98 8f       	std	Y+24, r25	; 0x18
    17cc:	8f 8b       	std	Y+23, r24	; 0x17
    17ce:	3b c0       	rjmp	.+118    	; 0x1846 <system_init+0x1c4>
	else if (__tmp > 65535)
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	6b 89       	ldd	r22, Y+19	; 0x13
    17da:	7c 89       	ldd	r23, Y+20	; 0x14
    17dc:	8d 89       	ldd	r24, Y+21	; 0x15
    17de:	9e 89       	ldd	r25, Y+22	; 0x16
    17e0:	2f d3       	rcall	.+1630   	; 0x1e40 <__gesf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	3c f5       	brge	.+78     	; 0x1834 <system_init+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    17f0:	78 89       	ldd	r23, Y+16	; 0x10
    17f2:	89 89       	ldd	r24, Y+17	; 0x11
    17f4:	9a 89       	ldd	r25, Y+18	; 0x12
    17f6:	28 d3       	rcall	.+1616   	; 0x1e48 <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	41 d2       	rcall	.+1154   	; 0x1c84 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	98 8f       	std	Y+24, r25	; 0x18
    1808:	8f 8b       	std	Y+23, r24	; 0x17
    180a:	0f c0       	rjmp	.+30     	; 0x182a <system_init+0x1a8>
    180c:	8a ef       	ldi	r24, 0xFA	; 250
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9a 8f       	std	Y+26, r25	; 0x1a
    1812:	89 8f       	std	Y+25, r24	; 0x19
    1814:	89 8d       	ldd	r24, Y+25	; 0x19
    1816:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <system_init+0x196>
    181c:	9a 8f       	std	Y+26, r25	; 0x1a
    181e:	89 8f       	std	Y+25, r24	; 0x19
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
<<<<<<< HEAD
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
=======
     cc4:	8f 89       	ldd	r24, Y+23	; 0x17
     cc6:	98 8d       	ldd	r25, Y+24	; 0x18
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	98 8f       	std	Y+24, r25	; 0x18
     ccc:	8f 8b       	std	Y+23, r24	; 0x17
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	98 8f       	std	Y+24, r25	; 0x18
    1828:	8f 8b       	std	Y+23, r24	; 0x17
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
<<<<<<< HEAD
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <system_init+0xa4>
    16da:	13 c0       	rjmp	.+38     	; 0x1702 <system_init+0xf2>
=======
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	89 2b       	or	r24, r25
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <system_init+0x18a>
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <system_init+0x1d8>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	89 2b       	or	r24, r25
    1830:	69 f7       	brne	.-38     	; 0x180c <system_init+0x18a>
    1832:	13 c0       	rjmp	.+38     	; 0x185a <system_init+0x1d8>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
<<<<<<< HEAD
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	12 d2       	rcall	.+1060   	; 0x1b0a <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <system_init+0xea>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	//gpio_register_pin(39,GPIO_DIRECTION_INPUT,true);
	
	
	DDRG = 0xff;
    1702:	e3 e3       	ldi	r30, 0x33	; 51
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	80 83       	st	Z, r24
	PORTG = 0xff;
    170a:	e4 e3       	ldi	r30, 0x34	; 52
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	80 83       	st	Z, r24
	servo_init(50);
    1712:	82 e3       	ldi	r24, 0x32	; 50
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 71 00 	call	0xe2	; 0xe2 <servo_init>
	timer_init(1000);
    171a:	88 ee       	ldi	r24, 0xE8	; 232
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	aa de       	rcall	.-684    	; 0x1474 <timer_init>
	CAN_Init(1);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	43 d9       	rcall	.-3450   	; 0x9aa <CAN_Init>

	//actuators_setup_kisobran();
	
	//while(gpio_read_pin(39) == 0);
	system_reset_system_time();
    1724:	4b df       	rcall	.-362    	; 0x15bc <system_reset_system_time>
	system_set_match_started();
    1726:	59 df       	rcall	.-334    	; 0x15da <system_set_match_started>
    1728:	2e 96       	adiw	r28, 0x0e	; 14
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	00 90 5b 00 	lds	r0, 0x005B
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    175e:	80 91 64 01 	lds	r24, 0x0164
    1762:	88 23       	and	r24, r24
    1764:	d9 f0       	breq	.+54     	; 0x179c <__vector_23+0x62>
	{
		tx0_counter--;
    1766:	80 91 64 01 	lds	r24, 0x0164
    176a:	81 50       	subi	r24, 0x01	; 1
    176c:	80 93 64 01 	sts	0x0164, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1770:	a6 ec       	ldi	r26, 0xC6	; 198
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	80 91 65 01 	lds	r24, 0x0165
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	fc 01       	movw	r30, r24
    177e:	e4 59       	subi	r30, 0x94	; 148
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	80 81       	ld	r24, Z
    1784:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    1786:	80 91 65 01 	lds	r24, 0x0165
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	80 93 65 01 	sts	0x0165, r24
    1790:	80 91 65 01 	lds	r24, 0x0165
    1794:	80 34       	cpi	r24, 0x40	; 64
    1796:	11 f4       	brne	.+4      	; 0x179c <__vector_23+0x62>
			tx0_rd_index = 0;
    1798:	10 92 65 01 	sts	0x0165, r1
	}
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	0f 90       	pop	r0
    17ae:	00 92 5b 00 	sts	0x005B, r0
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	00 90 5b 00 	lds	r0, 0x005B
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    17e0:	e0 ec       	ldi	r30, 0xC0	; 192
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	8c 71       	andi	r24, 0x1C	; 28
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	d9 f4       	brne	.+54     	; 0x182c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    17f6:	80 91 66 01 	lds	r24, 0x0166
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	e6 ec       	ldi	r30, 0xC6	; 198
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	20 81       	ld	r18, Z
    1804:	fc 01       	movw	r30, r24
    1806:	e4 55       	subi	r30, 0x54	; 84
    1808:	fe 4f       	sbci	r31, 0xFE	; 254
    180a:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    180c:	80 91 66 01 	lds	r24, 0x0166
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 93 66 01 	sts	0x0166, r24
    1816:	80 91 66 01 	lds	r24, 0x0166
    181a:	80 34       	cpi	r24, 0x40	; 64
    181c:	11 f4       	brne	.+4      	; 0x1822 <__vector_21+0x66>
			rx0_wr_index = 0;
    181e:	10 92 66 01 	sts	0x0166, r1

		rx0_counter++;
    1822:	80 91 67 01 	lds	r24, 0x0167
    1826:	8f 5f       	subi	r24, 0xFF	; 255
    1828:	80 93 67 01 	sts	0x0167, r24
	}
}
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	2f 91       	pop	r18
    183c:	0f 90       	pop	r0
    183e:	00 92 5b 00 	sts	0x005B, r0
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_34>:
=======
     cd8:	6b 89       	ldd	r22, Y+19	; 0x13
     cda:	7c 89       	ldd	r23, Y+20	; 0x14
     cdc:	8d 89       	ldd	r24, Y+21	; 0x15
     cde:	9e 89       	ldd	r25, Y+22	; 0x16
     ce0:	15 d2       	rcall	.+1066   	; 0x110c <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	98 8f       	std	Y+24, r25	; 0x18
     ce8:	8f 8b       	std	Y+23, r24	; 0x17
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	9c 8f       	std	Y+28, r25	; 0x1c
     cf0:	8b 8f       	std	Y+27, r24	; 0x1b
     cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <system_init+0x1d0>
     cfa:	9c 8f       	std	Y+28, r25	; 0x1c
     cfc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
     cfe:	84 e3       	ldi	r24, 0x34	; 52
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	10 82       	st	Z, r1
	servo_init(50);
     d06:	82 e3       	ldi	r24, 0x32	; 50
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	42 db       	rcall	.-2428   	; 0x390 <servo_init>
	timer_init(1000);
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	6e de       	rcall	.-804    	; 0x9ee <timer_init>
	CAN_Init(1);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	28 de       	rcall	.-944    	; 0x966 <CAN_Init>
}
     d16:	6c 96       	adiw	r28, 0x1c	; 28
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	00 90 5f 00 	lds	r0, 0x005F
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	00 90 5b 00 	lds	r0, 0x005B
     d38:	0f 92       	push	r0
     d3a:	2f 93       	push	r18
     d3c:	3f 93       	push	r19
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	80 91 7e 01 	lds	r24, 0x017E
     d52:	88 23       	and	r24, r24
     d54:	d1 f0       	breq	.+52     	; 0xd8a <__vector_23+0x62>
     d56:	80 91 7e 01 	lds	r24, 0x017E
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	80 93 7e 01 	sts	0x017E, r24
     d60:	86 ec       	ldi	r24, 0xC6	; 198
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	20 91 7f 01 	lds	r18, 0x017F
     d68:	22 2f       	mov	r18, r18
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	22 5c       	subi	r18, 0xC2	; 194
     d6e:	3e 4f       	sbci	r19, 0xFE	; 254
     d70:	f9 01       	movw	r30, r18
     d72:	20 81       	ld	r18, Z
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
     d78:	80 91 7f 01 	lds	r24, 0x017F
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 7f 01 	sts	0x017F, r24
     d82:	80 34       	cpi	r24, 0x40	; 64
     d84:	11 f4       	brne	.+4      	; 0xd8a <__vector_23+0x62>
     d86:	10 92 7f 01 	sts	0x017F, r1
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	00 92 5b 00 	sts	0x005B, r0
     da0:	0f 90       	pop	r0
     da2:	00 92 5f 00 	sts	0x005F, r0
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <__vector_21>:
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	00 90 5f 00 	lds	r0, 0x005F
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	00 90 5b 00 	lds	r0, 0x005B
     dbc:	0f 92       	push	r0
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	1f 92       	push	r1
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	80 ec       	ldi	r24, 0xC0	; 192
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8c 71       	andi	r24, 0x1C	; 28
     de6:	99 27       	eor	r25, r25
     de8:	89 2b       	or	r24, r25
     dea:	d1 f4       	brne	.+52     	; 0xe20 <__vector_21+0x74>
     dec:	80 91 c0 01 	lds	r24, 0x01C0
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	26 ec       	ldi	r18, 0xC6	; 198
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	f9 01       	movw	r30, r18
     dfa:	20 81       	ld	r18, Z
     dfc:	80 58       	subi	r24, 0x80	; 128
     dfe:	9e 4f       	sbci	r25, 0xFE	; 254
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
     e04:	80 91 c0 01 	lds	r24, 0x01C0
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	80 93 c0 01 	sts	0x01C0, r24
     e0e:	80 34       	cpi	r24, 0x40	; 64
     e10:	11 f4       	brne	.+4      	; 0xe16 <__vector_21+0x6a>
     e12:	10 92 c0 01 	sts	0x01C0, r1
     e16:	80 91 c1 01 	lds	r24, 0x01C1
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 c1 01 	sts	0x01C1, r24
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	00 92 5b 00 	sts	0x005B, r0
     e38:	0f 90       	pop	r0
     e3a:	00 92 5f 00 	sts	0x005F, r0
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_34>:
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    1834:	6b 89       	ldd	r22, Y+19	; 0x13
    1836:	7c 89       	ldd	r23, Y+20	; 0x14
    1838:	8d 89       	ldd	r24, Y+21	; 0x15
    183a:	9e 89       	ldd	r25, Y+22	; 0x16
    183c:	23 d2       	rcall	.+1094   	; 0x1c84 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	98 8f       	std	Y+24, r25	; 0x18
    1844:	8f 8b       	std	Y+23, r24	; 0x17
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	9c 8f       	std	Y+28, r25	; 0x1c
    184c:	8b 8f       	std	Y+27, r24	; 0x1b
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <system_init+0x1d0>
    1856:	9c 8f       	std	Y+28, r25	; 0x1c
    1858:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	PORTG = 0x00;
    185a:	84 e3       	ldi	r24, 0x34	; 52
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	fc 01       	movw	r30, r24
    1860:	10 82       	st	Z, r1
	servo_init(50);
    1862:	82 e3       	ldi	r24, 0x32	; 50
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 7f 01 	call	0x2fe	; 0x2fe <servo_init>
	timer_init(1000);
    186a:	88 ee       	ldi	r24, 0xE8	; 232
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	6d de       	rcall	.-806    	; 0x154a <timer_init>
	CAN_Init(1);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 ce 03 	call	0x79c	; 0x79c <CAN_Init>
}
    1876:	6c 96       	adiw	r28, 0x1c	; 28
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1890:	80 91 51 01 	lds	r24, 0x0151
    1894:	90 91 52 01 	lds	r25, 0x0152
    1898:	a0 91 53 01 	lds	r26, 0x0153
    189c:	b0 91 54 01 	lds	r27, 0x0154
}
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <__vector_23>:

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR1H = temp >> 8;
	UBRR1L = temp;
}
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	00 90 5f 00 	lds	r0, 0x005F
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	00 90 5b 00 	lds	r0, 0x005B
    18ba:	0f 92       	push	r0
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	80 91 97 01 	lds	r24, 0x0197
    18d4:	88 23       	and	r24, r24
    18d6:	d1 f0       	breq	.+52     	; 0x190c <__vector_23+0x62>
    18d8:	80 91 97 01 	lds	r24, 0x0197
    18dc:	81 50       	subi	r24, 0x01	; 1
    18de:	80 93 97 01 	sts	0x0197, r24
    18e2:	86 ec       	ldi	r24, 0xC6	; 198
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	20 91 98 01 	lds	r18, 0x0198
    18ea:	22 2f       	mov	r18, r18
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	29 5a       	subi	r18, 0xA9	; 169
    18f0:	3e 4f       	sbci	r19, 0xFE	; 254
    18f2:	f9 01       	movw	r30, r18
    18f4:	20 81       	ld	r18, Z
    18f6:	fc 01       	movw	r30, r24
    18f8:	20 83       	st	Z, r18
    18fa:	80 91 98 01 	lds	r24, 0x0198
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 98 01 	sts	0x0198, r24
    1904:	80 34       	cpi	r24, 0x40	; 64
    1906:	11 f4       	brne	.+4      	; 0x190c <__vector_23+0x62>
    1908:	10 92 98 01 	sts	0x0198, r1
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	00 92 5b 00 	sts	0x005B, r0
    1922:	0f 90       	pop	r0
    1924:	00 92 5f 00 	sts	0x005F, r0
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_21>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	00 90 5f 00 	lds	r0, 0x005F
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	00 90 5b 00 	lds	r0, 0x005B
    193e:	0f 92       	push	r0
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	8f 93       	push	r24
    1946:	9f 93       	push	r25
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	1f 92       	push	r1
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	80 ec       	ldi	r24, 0xC0	; 192
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	8c 71       	andi	r24, 0x1C	; 28
    1968:	99 27       	eor	r25, r25
    196a:	89 2b       	or	r24, r25
    196c:	d1 f4       	brne	.+52     	; 0x19a2 <__vector_21+0x74>
    196e:	80 91 d9 01 	lds	r24, 0x01D9
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	26 ec       	ldi	r18, 0xC6	; 198
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	f9 01       	movw	r30, r18
    197c:	20 81       	ld	r18, Z
    197e:	87 56       	subi	r24, 0x67	; 103
    1980:	9e 4f       	sbci	r25, 0xFE	; 254
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
    1986:	80 91 d9 01 	lds	r24, 0x01D9
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	80 93 d9 01 	sts	0x01D9, r24
    1990:	80 34       	cpi	r24, 0x40	; 64
    1992:	11 f4       	brne	.+4      	; 0x1998 <__vector_21+0x6a>
    1994:	10 92 d9 01 	sts	0x01D9, r1
    1998:	80 91 da 01 	lds	r24, 0x01DA
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	80 93 da 01 	sts	0x01DA, r24
    19a2:	0f 90       	pop	r0
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	00 92 5b 00 	sts	0x005B, r0
    19ba:	0f 90       	pop	r0
    19bc:	00 92 5f 00 	sts	0x005F, r0
    19c0:	0f 90       	pop	r0
    19c2:	1f 90       	pop	r1
    19c4:	18 95       	reti

000019c6 <__vector_34>:
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
<<<<<<< HEAD
<<<<<<< HEAD
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	0f 92       	push	r0
    1854:	00 90 5b 00 	lds	r0, 0x005B
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1870:	80 91 68 01 	lds	r24, 0x0168
    1874:	88 23       	and	r24, r24
    1876:	d9 f0       	breq	.+54     	; 0x18ae <__vector_34+0x62>
	{
		tx1_counter--;
    1878:	80 91 68 01 	lds	r24, 0x0168
    187c:	81 50       	subi	r24, 0x01	; 1
    187e:	80 93 68 01 	sts	0x0168, r24
		UDR1=tx1_buffer[tx1_rd_index];
    1882:	ae ec       	ldi	r26, 0xCE	; 206
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	80 91 69 01 	lds	r24, 0x0169
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	e4 51       	subi	r30, 0x14	; 20
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	80 81       	ld	r24, Z
    1896:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    1898:	80 91 69 01 	lds	r24, 0x0169
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	80 93 69 01 	sts	0x0169, r24
    18a2:	80 91 69 01 	lds	r24, 0x0169
    18a6:	80 34       	cpi	r24, 0x40	; 64
    18a8:	11 f4       	brne	.+4      	; 0x18ae <__vector_34+0x62>
			tx1_rd_index = 0;
    18aa:	10 92 69 01 	sts	0x0169, r1
	}
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	ff 91       	pop	r31
    18b4:	ef 91       	pop	r30
    18b6:	bf 91       	pop	r27
    18b8:	af 91       	pop	r26
    18ba:	9f 91       	pop	r25
    18bc:	8f 91       	pop	r24
    18be:	0f 90       	pop	r0
    18c0:	00 92 5b 00 	sts	0x005B, r0
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_32>:

ISR(USART1_RX_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	00 90 5b 00 	lds	r0, 0x005B
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    18f2:	e8 ec       	ldi	r30, 0xC8	; 200
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	8c 71       	andi	r24, 0x1C	; 28
    1902:	90 70       	andi	r25, 0x00	; 0
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	d9 f4       	brne	.+54     	; 0x193e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    1908:	80 91 6a 01 	lds	r24, 0x016A
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	ee ec       	ldi	r30, 0xCE	; 206
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	20 81       	ld	r18, Z
    1916:	fc 01       	movw	r30, r24
    1918:	e4 5d       	subi	r30, 0xD4	; 212
    191a:	fd 4f       	sbci	r31, 0xFD	; 253
    191c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    191e:	80 91 6a 01 	lds	r24, 0x016A
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	80 93 6a 01 	sts	0x016A, r24
    1928:	80 91 6a 01 	lds	r24, 0x016A
    192c:	80 34       	cpi	r24, 0x40	; 64
    192e:	11 f4       	brne	.+4      	; 0x1934 <__vector_32+0x66>
		rx1_wr_index = 0;
    1930:	10 92 6a 01 	sts	0x016A, r1

		rx1_counter++;
    1934:	80 91 6b 01 	lds	r24, 0x016B
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	80 93 6b 01 	sts	0x016B, r24
	}
}
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	ff 91       	pop	r31
    1946:	ef 91       	pop	r30
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	2f 91       	pop	r18
    194e:	0f 90       	pop	r0
    1950:	00 92 5b 00 	sts	0x005B, r0
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__subsf3>:
    195e:	50 58       	subi	r21, 0x80	; 128

00001960 <__addsf3>:
    1960:	bb 27       	eor	r27, r27
    1962:	aa 27       	eor	r26, r26
    1964:	0e d0       	rcall	.+28     	; 0x1982 <__addsf3x>
    1966:	75 c1       	rjmp	.+746    	; 0x1c52 <__fp_round>
    1968:	66 d1       	rcall	.+716    	; 0x1c36 <__fp_pscA>
    196a:	30 f0       	brcs	.+12     	; 0x1978 <__addsf3+0x18>
    196c:	6b d1       	rcall	.+726    	; 0x1c44 <__fp_pscB>
    196e:	20 f0       	brcs	.+8      	; 0x1978 <__addsf3+0x18>
    1970:	31 f4       	brne	.+12     	; 0x197e <__addsf3+0x1e>
    1972:	9f 3f       	cpi	r25, 0xFF	; 255
    1974:	11 f4       	brne	.+4      	; 0x197a <__addsf3+0x1a>
    1976:	1e f4       	brtc	.+6      	; 0x197e <__addsf3+0x1e>
    1978:	5b c1       	rjmp	.+694    	; 0x1c30 <__fp_nan>
    197a:	0e f4       	brtc	.+2      	; 0x197e <__addsf3+0x1e>
    197c:	e0 95       	com	r30
    197e:	e7 fb       	bst	r30, 7
    1980:	51 c1       	rjmp	.+674    	; 0x1c24 <__fp_inf>

00001982 <__addsf3x>:
    1982:	e9 2f       	mov	r30, r25
    1984:	77 d1       	rcall	.+750    	; 0x1c74 <__fp_split3>
    1986:	80 f3       	brcs	.-32     	; 0x1968 <__addsf3+0x8>
    1988:	ba 17       	cp	r27, r26
    198a:	62 07       	cpc	r22, r18
    198c:	73 07       	cpc	r23, r19
    198e:	84 07       	cpc	r24, r20
    1990:	95 07       	cpc	r25, r21
    1992:	18 f0       	brcs	.+6      	; 0x199a <__addsf3x+0x18>
    1994:	71 f4       	brne	.+28     	; 0x19b2 <__addsf3x+0x30>
    1996:	9e f5       	brtc	.+102    	; 0x19fe <__addsf3x+0x7c>
    1998:	8f c1       	rjmp	.+798    	; 0x1cb8 <__fp_zero>
    199a:	0e f4       	brtc	.+2      	; 0x199e <__addsf3x+0x1c>
    199c:	e0 95       	com	r30
    199e:	0b 2e       	mov	r0, r27
    19a0:	ba 2f       	mov	r27, r26
    19a2:	a0 2d       	mov	r26, r0
    19a4:	0b 01       	movw	r0, r22
    19a6:	b9 01       	movw	r22, r18
    19a8:	90 01       	movw	r18, r0
    19aa:	0c 01       	movw	r0, r24
    19ac:	ca 01       	movw	r24, r20
    19ae:	a0 01       	movw	r20, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	ff 27       	eor	r31, r31
    19b4:	59 1b       	sub	r21, r25
    19b6:	99 f0       	breq	.+38     	; 0x19de <__addsf3x+0x5c>
    19b8:	59 3f       	cpi	r21, 0xF9	; 249
    19ba:	50 f4       	brcc	.+20     	; 0x19d0 <__addsf3x+0x4e>
    19bc:	50 3e       	cpi	r21, 0xE0	; 224
    19be:	68 f1       	brcs	.+90     	; 0x1a1a <__addsf3x+0x98>
    19c0:	1a 16       	cp	r1, r26
    19c2:	f0 40       	sbci	r31, 0x00	; 0
    19c4:	a2 2f       	mov	r26, r18
    19c6:	23 2f       	mov	r18, r19
    19c8:	34 2f       	mov	r19, r20
    19ca:	44 27       	eor	r20, r20
    19cc:	58 5f       	subi	r21, 0xF8	; 248
    19ce:	f3 cf       	rjmp	.-26     	; 0x19b6 <__addsf3x+0x34>
    19d0:	46 95       	lsr	r20
    19d2:	37 95       	ror	r19
    19d4:	27 95       	ror	r18
    19d6:	a7 95       	ror	r26
    19d8:	f0 40       	sbci	r31, 0x00	; 0
    19da:	53 95       	inc	r21
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__addsf3x+0x4e>
    19de:	7e f4       	brtc	.+30     	; 0x19fe <__addsf3x+0x7c>
    19e0:	1f 16       	cp	r1, r31
    19e2:	ba 0b       	sbc	r27, r26
    19e4:	62 0b       	sbc	r22, r18
    19e6:	73 0b       	sbc	r23, r19
    19e8:	84 0b       	sbc	r24, r20
    19ea:	ba f0       	brmi	.+46     	; 0x1a1a <__addsf3x+0x98>
    19ec:	91 50       	subi	r25, 0x01	; 1
    19ee:	a1 f0       	breq	.+40     	; 0x1a18 <__addsf3x+0x96>
    19f0:	ff 0f       	add	r31, r31
    19f2:	bb 1f       	adc	r27, r27
    19f4:	66 1f       	adc	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	c2 f7       	brpl	.-16     	; 0x19ec <__addsf3x+0x6a>
    19fc:	0e c0       	rjmp	.+28     	; 0x1a1a <__addsf3x+0x98>
    19fe:	ba 0f       	add	r27, r26
    1a00:	62 1f       	adc	r22, r18
    1a02:	73 1f       	adc	r23, r19
    1a04:	84 1f       	adc	r24, r20
    1a06:	48 f4       	brcc	.+18     	; 0x1a1a <__addsf3x+0x98>
    1a08:	87 95       	ror	r24
    1a0a:	77 95       	ror	r23
    1a0c:	67 95       	ror	r22
    1a0e:	b7 95       	ror	r27
    1a10:	f7 95       	ror	r31
    1a12:	9e 3f       	cpi	r25, 0xFE	; 254
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <__addsf3x+0x96>
    1a16:	b3 cf       	rjmp	.-154    	; 0x197e <__addsf3+0x1e>
    1a18:	93 95       	inc	r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <__addsf3x+0x9e>
    1a1e:	99 27       	eor	r25, r25
    1a20:	ee 0f       	add	r30, r30
    1a22:	97 95       	ror	r25
    1a24:	87 95       	ror	r24
    1a26:	08 95       	ret

00001a28 <__cmpsf2>:
    1a28:	d9 d0       	rcall	.+434    	; 0x1bdc <__fp_cmp>
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <__cmpsf2+0x6>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	08 95       	ret

00001a30 <__divsf3>:
    1a30:	0c d0       	rcall	.+24     	; 0x1a4a <__divsf3x>
    1a32:	0f c1       	rjmp	.+542    	; 0x1c52 <__fp_round>
    1a34:	07 d1       	rcall	.+526    	; 0x1c44 <__fp_pscB>
    1a36:	40 f0       	brcs	.+16     	; 0x1a48 <__divsf3+0x18>
    1a38:	fe d0       	rcall	.+508    	; 0x1c36 <__fp_pscA>
    1a3a:	30 f0       	brcs	.+12     	; 0x1a48 <__divsf3+0x18>
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <__divsf3+0x16>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	19 f0       	breq	.+6      	; 0x1a48 <__divsf3+0x18>
    1a42:	f0 c0       	rjmp	.+480    	; 0x1c24 <__fp_inf>
    1a44:	51 11       	cpse	r21, r1
    1a46:	39 c1       	rjmp	.+626    	; 0x1cba <__fp_szero>
    1a48:	f3 c0       	rjmp	.+486    	; 0x1c30 <__fp_nan>

00001a4a <__divsf3x>:
    1a4a:	14 d1       	rcall	.+552    	; 0x1c74 <__fp_split3>
    1a4c:	98 f3       	brcs	.-26     	; 0x1a34 <__divsf3+0x4>

00001a4e <__divsf3_pse>:
    1a4e:	99 23       	and	r25, r25
    1a50:	c9 f3       	breq	.-14     	; 0x1a44 <__divsf3+0x14>
    1a52:	55 23       	and	r21, r21
    1a54:	b1 f3       	breq	.-20     	; 0x1a42 <__divsf3+0x12>
    1a56:	95 1b       	sub	r25, r21
    1a58:	55 0b       	sbc	r21, r21
    1a5a:	bb 27       	eor	r27, r27
    1a5c:	aa 27       	eor	r26, r26
    1a5e:	62 17       	cp	r22, r18
    1a60:	73 07       	cpc	r23, r19
    1a62:	84 07       	cpc	r24, r20
    1a64:	38 f0       	brcs	.+14     	; 0x1a74 <__divsf3_pse+0x26>
    1a66:	9f 5f       	subi	r25, 0xFF	; 255
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	22 0f       	add	r18, r18
    1a6c:	33 1f       	adc	r19, r19
    1a6e:	44 1f       	adc	r20, r20
    1a70:	aa 1f       	adc	r26, r26
    1a72:	a9 f3       	breq	.-22     	; 0x1a5e <__divsf3_pse+0x10>
    1a74:	33 d0       	rcall	.+102    	; 0x1adc <__divsf3_pse+0x8e>
    1a76:	0e 2e       	mov	r0, r30
    1a78:	3a f0       	brmi	.+14     	; 0x1a88 <__divsf3_pse+0x3a>
    1a7a:	e0 e8       	ldi	r30, 0x80	; 128
    1a7c:	30 d0       	rcall	.+96     	; 0x1ade <__divsf3_pse+0x90>
    1a7e:	91 50       	subi	r25, 0x01	; 1
    1a80:	50 40       	sbci	r21, 0x00	; 0
    1a82:	e6 95       	lsr	r30
    1a84:	00 1c       	adc	r0, r0
    1a86:	ca f7       	brpl	.-14     	; 0x1a7a <__divsf3_pse+0x2c>
    1a88:	29 d0       	rcall	.+82     	; 0x1adc <__divsf3_pse+0x8e>
    1a8a:	fe 2f       	mov	r31, r30
    1a8c:	27 d0       	rcall	.+78     	; 0x1adc <__divsf3_pse+0x8e>
    1a8e:	66 0f       	add	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	bb 1f       	adc	r27, r27
    1a96:	26 17       	cp	r18, r22
    1a98:	37 07       	cpc	r19, r23
    1a9a:	48 07       	cpc	r20, r24
    1a9c:	ab 07       	cpc	r26, r27
    1a9e:	b0 e8       	ldi	r27, 0x80	; 128
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <__divsf3_pse+0x56>
    1aa2:	bb 0b       	sbc	r27, r27
    1aa4:	80 2d       	mov	r24, r0
    1aa6:	bf 01       	movw	r22, r30
    1aa8:	ff 27       	eor	r31, r31
    1aaa:	93 58       	subi	r25, 0x83	; 131
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255
    1aae:	2a f0       	brmi	.+10     	; 0x1aba <__divsf3_pse+0x6c>
    1ab0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab2:	51 05       	cpc	r21, r1
    1ab4:	68 f0       	brcs	.+26     	; 0x1ad0 <__divsf3_pse+0x82>
    1ab6:	b6 c0       	rjmp	.+364    	; 0x1c24 <__fp_inf>
    1ab8:	00 c1       	rjmp	.+512    	; 0x1cba <__fp_szero>
    1aba:	5f 3f       	cpi	r21, 0xFF	; 255
    1abc:	ec f3       	brlt	.-6      	; 0x1ab8 <__divsf3_pse+0x6a>
    1abe:	98 3e       	cpi	r25, 0xE8	; 232
    1ac0:	dc f3       	brlt	.-10     	; 0x1ab8 <__divsf3_pse+0x6a>
    1ac2:	86 95       	lsr	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	b7 95       	ror	r27
    1aca:	f7 95       	ror	r31
    1acc:	9f 5f       	subi	r25, 0xFF	; 255
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__divsf3_pse+0x74>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	96 95       	lsr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	97 f9       	bld	r25, 7
    1ada:	08 95       	ret
    1adc:	e1 e0       	ldi	r30, 0x01	; 1
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	62 17       	cp	r22, r18
    1ae8:	73 07       	cpc	r23, r19
    1aea:	84 07       	cpc	r24, r20
    1aec:	ba 07       	cpc	r27, r26
    1aee:	20 f0       	brcs	.+8      	; 0x1af8 <__divsf3_pse+0xaa>
    1af0:	62 1b       	sub	r22, r18
    1af2:	73 0b       	sbc	r23, r19
    1af4:	84 0b       	sbc	r24, r20
    1af6:	ba 0b       	sbc	r27, r26
    1af8:	ee 1f       	adc	r30, r30
    1afa:	88 f7       	brcc	.-30     	; 0x1ade <__divsf3_pse+0x90>
    1afc:	e0 95       	com	r30
    1afe:	08 95       	ret

00001b00 <__fixsfsi>:
    1b00:	04 d0       	rcall	.+8      	; 0x1b0a <__fixunssfsi>
    1b02:	68 94       	set
    1b04:	b1 11       	cpse	r27, r1
    1b06:	d9 c0       	rjmp	.+434    	; 0x1cba <__fp_szero>
    1b08:	08 95       	ret

00001b0a <__fixunssfsi>:
    1b0a:	bc d0       	rcall	.+376    	; 0x1c84 <__fp_splitA>
    1b0c:	88 f0       	brcs	.+34     	; 0x1b30 <__fixunssfsi+0x26>
    1b0e:	9f 57       	subi	r25, 0x7F	; 127
    1b10:	90 f0       	brcs	.+36     	; 0x1b36 <__fixunssfsi+0x2c>
    1b12:	b9 2f       	mov	r27, r25
    1b14:	99 27       	eor	r25, r25
    1b16:	b7 51       	subi	r27, 0x17	; 23
    1b18:	a0 f0       	brcs	.+40     	; 0x1b42 <__fixunssfsi+0x38>
    1b1a:	d1 f0       	breq	.+52     	; 0x1b50 <__fixunssfsi+0x46>
    1b1c:	66 0f       	add	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	1a f0       	brmi	.+6      	; 0x1b2c <__fixunssfsi+0x22>
    1b26:	ba 95       	dec	r27
    1b28:	c9 f7       	brne	.-14     	; 0x1b1c <__fixunssfsi+0x12>
    1b2a:	12 c0       	rjmp	.+36     	; 0x1b50 <__fixunssfsi+0x46>
    1b2c:	b1 30       	cpi	r27, 0x01	; 1
    1b2e:	81 f0       	breq	.+32     	; 0x1b50 <__fixunssfsi+0x46>
    1b30:	c3 d0       	rcall	.+390    	; 0x1cb8 <__fp_zero>
    1b32:	b1 e0       	ldi	r27, 0x01	; 1
    1b34:	08 95       	ret
    1b36:	c0 c0       	rjmp	.+384    	; 0x1cb8 <__fp_zero>
    1b38:	67 2f       	mov	r22, r23
    1b3a:	78 2f       	mov	r23, r24
    1b3c:	88 27       	eor	r24, r24
    1b3e:	b8 5f       	subi	r27, 0xF8	; 248
    1b40:	39 f0       	breq	.+14     	; 0x1b50 <__fixunssfsi+0x46>
    1b42:	b9 3f       	cpi	r27, 0xF9	; 249
    1b44:	cc f3       	brlt	.-14     	; 0x1b38 <__fixunssfsi+0x2e>
    1b46:	86 95       	lsr	r24
    1b48:	77 95       	ror	r23
    1b4a:	67 95       	ror	r22
    1b4c:	b3 95       	inc	r27
    1b4e:	d9 f7       	brne	.-10     	; 0x1b46 <__fixunssfsi+0x3c>
    1b50:	3e f4       	brtc	.+14     	; 0x1b60 <__fixunssfsi+0x56>
    1b52:	90 95       	com	r25
    1b54:	80 95       	com	r24
    1b56:	70 95       	com	r23
    1b58:	61 95       	neg	r22
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	08 95       	ret

00001b62 <__floatunsisf>:
    1b62:	e8 94       	clt
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <__floatsisf+0x12>

00001b66 <__floatsisf>:
    1b66:	97 fb       	bst	r25, 7
    1b68:	3e f4       	brtc	.+14     	; 0x1b78 <__floatsisf+0x12>
    1b6a:	90 95       	com	r25
    1b6c:	80 95       	com	r24
    1b6e:	70 95       	com	r23
    1b70:	61 95       	neg	r22
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	8f 4f       	sbci	r24, 0xFF	; 255
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	99 23       	and	r25, r25
    1b7a:	a9 f0       	breq	.+42     	; 0x1ba6 <__floatsisf+0x40>
    1b7c:	f9 2f       	mov	r31, r25
    1b7e:	96 e9       	ldi	r25, 0x96	; 150
    1b80:	bb 27       	eor	r27, r27
    1b82:	93 95       	inc	r25
    1b84:	f6 95       	lsr	r31
    1b86:	87 95       	ror	r24
    1b88:	77 95       	ror	r23
    1b8a:	67 95       	ror	r22
    1b8c:	b7 95       	ror	r27
    1b8e:	f1 11       	cpse	r31, r1
    1b90:	f8 cf       	rjmp	.-16     	; 0x1b82 <__floatsisf+0x1c>
    1b92:	fa f4       	brpl	.+62     	; 0x1bd2 <__floatsisf+0x6c>
    1b94:	bb 0f       	add	r27, r27
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <__floatsisf+0x36>
    1b98:	60 ff       	sbrs	r22, 0
    1b9a:	1b c0       	rjmp	.+54     	; 0x1bd2 <__floatsisf+0x6c>
    1b9c:	6f 5f       	subi	r22, 0xFF	; 255
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	16 c0       	rjmp	.+44     	; 0x1bd2 <__floatsisf+0x6c>
    1ba6:	88 23       	and	r24, r24
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <__floatsisf+0x48>
    1baa:	96 e9       	ldi	r25, 0x96	; 150
    1bac:	11 c0       	rjmp	.+34     	; 0x1bd0 <__floatsisf+0x6a>
    1bae:	77 23       	and	r23, r23
    1bb0:	21 f0       	breq	.+8      	; 0x1bba <__floatsisf+0x54>
    1bb2:	9e e8       	ldi	r25, 0x8E	; 142
    1bb4:	87 2f       	mov	r24, r23
    1bb6:	76 2f       	mov	r23, r22
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <__floatsisf+0x5e>
    1bba:	66 23       	and	r22, r22
    1bbc:	71 f0       	breq	.+28     	; 0x1bda <__floatsisf+0x74>
    1bbe:	96 e8       	ldi	r25, 0x86	; 134
    1bc0:	86 2f       	mov	r24, r22
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	2a f0       	brmi	.+10     	; 0x1bd2 <__floatsisf+0x6c>
    1bc8:	9a 95       	dec	r25
    1bca:	66 0f       	add	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	da f7       	brpl	.-10     	; 0x1bc8 <__floatsisf+0x62>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	97 f9       	bld	r25, 7
    1bda:	08 95       	ret

00001bdc <__fp_cmp>:
    1bdc:	99 0f       	add	r25, r25
    1bde:	00 08       	sbc	r0, r0
    1be0:	55 0f       	add	r21, r21
    1be2:	aa 0b       	sbc	r26, r26
    1be4:	e0 e8       	ldi	r30, 0x80	; 128
    1be6:	fe ef       	ldi	r31, 0xFE	; 254
    1be8:	16 16       	cp	r1, r22
    1bea:	17 06       	cpc	r1, r23
    1bec:	e8 07       	cpc	r30, r24
    1bee:	f9 07       	cpc	r31, r25
    1bf0:	c0 f0       	brcs	.+48     	; 0x1c22 <__fp_cmp+0x46>
    1bf2:	12 16       	cp	r1, r18
    1bf4:	13 06       	cpc	r1, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	98 f0       	brcs	.+38     	; 0x1c22 <__fp_cmp+0x46>
    1bfc:	62 1b       	sub	r22, r18
    1bfe:	73 0b       	sbc	r23, r19
    1c00:	84 0b       	sbc	r24, r20
    1c02:	95 0b       	sbc	r25, r21
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <__fp_cmp+0x38>
    1c06:	0a 26       	eor	r0, r26
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <__fp_cmp+0x46>
    1c0a:	23 2b       	or	r18, r19
    1c0c:	24 2b       	or	r18, r20
    1c0e:	25 2b       	or	r18, r21
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <__fp_cmp+0x3e>
    1c12:	08 95       	ret
    1c14:	0a 26       	eor	r0, r26
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <__fp_cmp+0x3e>
    1c18:	a1 40       	sbci	r26, 0x01	; 1
    1c1a:	a6 95       	lsr	r26
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	81 1d       	adc	r24, r1
    1c20:	81 1d       	adc	r24, r1
    1c22:	08 95       	ret

00001c24 <__fp_inf>:
    1c24:	97 f9       	bld	r25, 7
    1c26:	9f 67       	ori	r25, 0x7F	; 127
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	08 95       	ret

00001c30 <__fp_nan>:
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	80 ec       	ldi	r24, 0xC0	; 192
    1c34:	08 95       	ret

00001c36 <__fp_pscA>:
    1c36:	00 24       	eor	r0, r0
    1c38:	0a 94       	dec	r0
    1c3a:	16 16       	cp	r1, r22
    1c3c:	17 06       	cpc	r1, r23
    1c3e:	18 06       	cpc	r1, r24
    1c40:	09 06       	cpc	r0, r25
    1c42:	08 95       	ret

00001c44 <__fp_pscB>:
    1c44:	00 24       	eor	r0, r0
    1c46:	0a 94       	dec	r0
    1c48:	12 16       	cp	r1, r18
    1c4a:	13 06       	cpc	r1, r19
    1c4c:	14 06       	cpc	r1, r20
    1c4e:	05 06       	cpc	r0, r21
    1c50:	08 95       	ret

00001c52 <__fp_round>:
    1c52:	09 2e       	mov	r0, r25
    1c54:	03 94       	inc	r0
    1c56:	00 0c       	add	r0, r0
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <__fp_round+0xc>
    1c5a:	88 23       	and	r24, r24
    1c5c:	52 f0       	brmi	.+20     	; 0x1c72 <__fp_round+0x20>
    1c5e:	bb 0f       	add	r27, r27
    1c60:	40 f4       	brcc	.+16     	; 0x1c72 <__fp_round+0x20>
    1c62:	bf 2b       	or	r27, r31
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <__fp_round+0x18>
    1c66:	60 ff       	sbrs	r22, 0
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <__fp_round+0x20>
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	08 95       	ret

00001c74 <__fp_split3>:
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	90 58       	subi	r25, 0x80	; 128
    1c78:	44 0f       	add	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	59 f0       	breq	.+22     	; 0x1c94 <__fp_splitA+0x10>
    1c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c80:	71 f0       	breq	.+28     	; 0x1c9e <__fp_splitA+0x1a>
    1c82:	47 95       	ror	r20

00001c84 <__fp_splitA>:
    1c84:	88 0f       	add	r24, r24
    1c86:	97 fb       	bst	r25, 7
    1c88:	99 1f       	adc	r25, r25
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <__fp_splitA+0x20>
    1c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8e:	79 f0       	breq	.+30     	; 0x1cae <__fp_splitA+0x2a>
    1c90:	87 95       	ror	r24
    1c92:	08 95       	ret
    1c94:	12 16       	cp	r1, r18
    1c96:	13 06       	cpc	r1, r19
    1c98:	14 06       	cpc	r1, r20
    1c9a:	55 1f       	adc	r21, r21
    1c9c:	f2 cf       	rjmp	.-28     	; 0x1c82 <__fp_split3+0xe>
    1c9e:	46 95       	lsr	r20
    1ca0:	f1 df       	rcall	.-30     	; 0x1c84 <__fp_splitA>
    1ca2:	08 c0       	rjmp	.+16     	; 0x1cb4 <__fp_splitA+0x30>
    1ca4:	16 16       	cp	r1, r22
    1ca6:	17 06       	cpc	r1, r23
    1ca8:	18 06       	cpc	r1, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	f1 cf       	rjmp	.-30     	; 0x1c90 <__fp_splitA+0xc>
    1cae:	86 95       	lsr	r24
    1cb0:	71 05       	cpc	r23, r1
    1cb2:	61 05       	cpc	r22, r1
    1cb4:	08 94       	sec
    1cb6:	08 95       	ret

00001cb8 <__fp_zero>:
    1cb8:	e8 94       	clt

00001cba <__fp_szero>:
    1cba:	bb 27       	eor	r27, r27
    1cbc:	66 27       	eor	r22, r22
    1cbe:	77 27       	eor	r23, r23
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	97 f9       	bld	r25, 7
    1cc4:	08 95       	ret

00001cc6 <__gesf2>:
    1cc6:	8a df       	rcall	.-236    	; 0x1bdc <__fp_cmp>
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <__gesf2+0x6>
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	08 95       	ret

00001cce <__mulsf3>:
    1cce:	0b d0       	rcall	.+22     	; 0x1ce6 <__mulsf3x>
    1cd0:	c0 cf       	rjmp	.-128    	; 0x1c52 <__fp_round>
    1cd2:	b1 df       	rcall	.-158    	; 0x1c36 <__fp_pscA>
    1cd4:	28 f0       	brcs	.+10     	; 0x1ce0 <__mulsf3+0x12>
    1cd6:	b6 df       	rcall	.-148    	; 0x1c44 <__fp_pscB>
    1cd8:	18 f0       	brcs	.+6      	; 0x1ce0 <__mulsf3+0x12>
    1cda:	95 23       	and	r25, r21
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <__mulsf3+0x12>
    1cde:	a2 cf       	rjmp	.-188    	; 0x1c24 <__fp_inf>
    1ce0:	a7 cf       	rjmp	.-178    	; 0x1c30 <__fp_nan>
    1ce2:	11 24       	eor	r1, r1
    1ce4:	ea cf       	rjmp	.-44     	; 0x1cba <__fp_szero>

00001ce6 <__mulsf3x>:
    1ce6:	c6 df       	rcall	.-116    	; 0x1c74 <__fp_split3>
    1ce8:	a0 f3       	brcs	.-24     	; 0x1cd2 <__mulsf3+0x4>

00001cea <__mulsf3_pse>:
    1cea:	95 9f       	mul	r25, r21
    1cec:	d1 f3       	breq	.-12     	; 0x1ce2 <__mulsf3+0x14>
    1cee:	95 0f       	add	r25, r21
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	62 9f       	mul	r22, r18
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	72 9f       	mul	r23, r18
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	b1 1d       	adc	r27, r1
    1d00:	63 9f       	mul	r22, r19
    1d02:	aa 27       	eor	r26, r26
    1d04:	f0 0d       	add	r31, r0
    1d06:	b1 1d       	adc	r27, r1
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	64 9f       	mul	r22, r20
    1d0c:	66 27       	eor	r22, r22
    1d0e:	b0 0d       	add	r27, r0
    1d10:	a1 1d       	adc	r26, r1
    1d12:	66 1f       	adc	r22, r22
    1d14:	82 9f       	mul	r24, r18
    1d16:	22 27       	eor	r18, r18
    1d18:	b0 0d       	add	r27, r0
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	62 1f       	adc	r22, r18
    1d1e:	73 9f       	mul	r23, r19
    1d20:	b0 0d       	add	r27, r0
    1d22:	a1 1d       	adc	r26, r1
    1d24:	62 1f       	adc	r22, r18
    1d26:	83 9f       	mul	r24, r19
    1d28:	a0 0d       	add	r26, r0
    1d2a:	61 1d       	adc	r22, r1
    1d2c:	22 1f       	adc	r18, r18
    1d2e:	74 9f       	mul	r23, r20
    1d30:	33 27       	eor	r19, r19
    1d32:	a0 0d       	add	r26, r0
    1d34:	61 1d       	adc	r22, r1
    1d36:	23 1f       	adc	r18, r19
    1d38:	84 9f       	mul	r24, r20
    1d3a:	60 0d       	add	r22, r0
    1d3c:	21 1d       	adc	r18, r1
    1d3e:	82 2f       	mov	r24, r18
    1d40:	76 2f       	mov	r23, r22
    1d42:	6a 2f       	mov	r22, r26
    1d44:	11 24       	eor	r1, r1
    1d46:	9f 57       	subi	r25, 0x7F	; 127
    1d48:	50 40       	sbci	r21, 0x00	; 0
    1d4a:	8a f0       	brmi	.+34     	; 0x1d6e <__mulsf3_pse+0x84>
    1d4c:	e1 f0       	breq	.+56     	; 0x1d86 <__mulsf3_pse+0x9c>
    1d4e:	88 23       	and	r24, r24
    1d50:	4a f0       	brmi	.+18     	; 0x1d64 <__mulsf3_pse+0x7a>
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	bb 1f       	adc	r27, r27
    1d58:	66 1f       	adc	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	a9 f7       	brne	.-22     	; 0x1d4e <__mulsf3_pse+0x64>
    1d64:	9e 3f       	cpi	r25, 0xFE	; 254
    1d66:	51 05       	cpc	r21, r1
    1d68:	70 f0       	brcs	.+28     	; 0x1d86 <__mulsf3_pse+0x9c>
    1d6a:	5c cf       	rjmp	.-328    	; 0x1c24 <__fp_inf>
    1d6c:	a6 cf       	rjmp	.-180    	; 0x1cba <__fp_szero>
    1d6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d70:	ec f3       	brlt	.-6      	; 0x1d6c <__mulsf3_pse+0x82>
    1d72:	98 3e       	cpi	r25, 0xE8	; 232
    1d74:	dc f3       	brlt	.-10     	; 0x1d6c <__mulsf3_pse+0x82>
    1d76:	86 95       	lsr	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b7 95       	ror	r27
    1d7e:	f7 95       	ror	r31
    1d80:	e7 95       	ror	r30
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	c1 f7       	brne	.-16     	; 0x1d76 <__mulsf3_pse+0x8c>
    1d86:	fe 2b       	or	r31, r30
    1d88:	88 0f       	add	r24, r24
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	96 95       	lsr	r25
    1d8e:	87 95       	ror	r24
    1d90:	97 f9       	bld	r25, 7
    1d92:	08 95       	ret

00001d94 <calloc>:
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	68 9f       	mul	r22, r24
    1d9e:	80 01       	movw	r16, r0
    1da0:	69 9f       	mul	r22, r25
    1da2:	10 0d       	add	r17, r0
    1da4:	78 9f       	mul	r23, r24
    1da6:	10 0d       	add	r17, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	c8 01       	movw	r24, r16
    1dac:	0d d0       	rcall	.+26     	; 0x1dc8 <malloc>
    1dae:	ec 01       	movw	r28, r24
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	21 f0       	breq	.+8      	; 0x1dbc <calloc+0x28>
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	a8 01       	movw	r20, r16
    1dba:	0b d1       	rcall	.+534    	; 0x1fd2 <memset>
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <malloc>:
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	bc 01       	movw	r22, r24
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	10 f4       	brcc	.+4      	; 0x1dd8 <malloc+0x10>
    1dd4:	62 e0       	ldi	r22, 0x02	; 2
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	a0 91 6e 02 	lds	r26, 0x026E
    1ddc:	b0 91 6f 02 	lds	r27, 0x026F
    1de0:	ed 01       	movw	r28, r26
    1de2:	e0 e0       	ldi	r30, 0x00	; 0
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	21 c0       	rjmp	.+66     	; 0x1e2e <malloc+0x66>
    1dec:	88 81       	ld	r24, Y
    1dee:	99 81       	ldd	r25, Y+1	; 0x01
    1df0:	86 17       	cp	r24, r22
    1df2:	97 07       	cpc	r25, r23
    1df4:	69 f4       	brne	.+26     	; 0x1e10 <malloc+0x48>
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	30 97       	sbiw	r30, 0x00	; 0
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <malloc+0x3c>
    1dfe:	93 83       	std	Z+3, r25	; 0x03
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <malloc+0x44>
    1e04:	90 93 6f 02 	sts	0x026F, r25
    1e08:	80 93 6e 02 	sts	0x026E, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	34 c0       	rjmp	.+104    	; 0x1e78 <malloc+0xb0>
    1e10:	68 17       	cp	r22, r24
    1e12:	79 07       	cpc	r23, r25
    1e14:	38 f4       	brcc	.+14     	; 0x1e24 <malloc+0x5c>
    1e16:	41 15       	cp	r20, r1
    1e18:	51 05       	cpc	r21, r1
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <malloc+0x5a>
    1e1c:	84 17       	cp	r24, r20
    1e1e:	95 07       	cpc	r25, r21
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <malloc+0x5c>
    1e22:	ac 01       	movw	r20, r24
    1e24:	fe 01       	movw	r30, r28
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	e9 01       	movw	r28, r18
    1e2e:	20 97       	sbiw	r28, 0x00	; 0
    1e30:	e9 f6       	brne	.-70     	; 0x1dec <malloc+0x24>
    1e32:	41 15       	cp	r20, r1
    1e34:	51 05       	cpc	r21, r1
    1e36:	a9 f1       	breq	.+106    	; 0x1ea2 <malloc+0xda>
    1e38:	ca 01       	movw	r24, r20
    1e3a:	86 1b       	sub	r24, r22
    1e3c:	97 0b       	sbc	r25, r23
    1e3e:	04 97       	sbiw	r24, 0x04	; 4
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <malloc+0x7c>
    1e42:	ba 01       	movw	r22, r20
    1e44:	e0 e0       	ldi	r30, 0x00	; 0
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	2a c0       	rjmp	.+84     	; 0x1e9e <malloc+0xd6>
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	11 97       	sbiw	r26, 0x01	; 1
    1e50:	84 17       	cp	r24, r20
    1e52:	95 07       	cpc	r25, r21
    1e54:	f9 f4       	brne	.+62     	; 0x1e94 <malloc+0xcc>
    1e56:	64 17       	cp	r22, r20
    1e58:	75 07       	cpc	r23, r21
    1e5a:	81 f4       	brne	.+32     	; 0x1e7c <malloc+0xb4>
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	8d 91       	ld	r24, X+
    1e60:	9c 91       	ld	r25, X
    1e62:	13 97       	sbiw	r26, 0x03	; 3
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <malloc+0xa6>
    1e68:	93 83       	std	Z+3, r25	; 0x03
    1e6a:	82 83       	std	Z+2, r24	; 0x02
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <malloc+0xae>
    1e6e:	90 93 6f 02 	sts	0x026F, r25
    1e72:	80 93 6e 02 	sts	0x026E, r24
    1e76:	fd 01       	movw	r30, r26
    1e78:	32 96       	adiw	r30, 0x02	; 2
    1e7a:	4f c0       	rjmp	.+158    	; 0x1f1a <malloc+0x152>
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	86 1b       	sub	r24, r22
    1e80:	97 0b       	sbc	r25, r23
    1e82:	fd 01       	movw	r30, r26
    1e84:	e8 0f       	add	r30, r24
    1e86:	f9 1f       	adc	r31, r25
    1e88:	61 93       	st	Z+, r22
    1e8a:	71 93       	st	Z+, r23
    1e8c:	02 97       	sbiw	r24, 0x02	; 2
    1e8e:	8d 93       	st	X+, r24
    1e90:	9c 93       	st	X, r25
    1e92:	43 c0       	rjmp	.+134    	; 0x1f1a <malloc+0x152>
    1e94:	fd 01       	movw	r30, r26
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	d9 01       	movw	r26, r18
    1e9e:	10 97       	sbiw	r26, 0x00	; 0
    1ea0:	a1 f6       	brne	.-88     	; 0x1e4a <malloc+0x82>
    1ea2:	80 91 6c 02 	lds	r24, 0x026C
    1ea6:	90 91 6d 02 	lds	r25, 0x026D
    1eaa:	89 2b       	or	r24, r25
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <malloc+0xf6>
    1eae:	80 91 02 01 	lds	r24, 0x0102
    1eb2:	90 91 03 01 	lds	r25, 0x0103
    1eb6:	90 93 6d 02 	sts	0x026D, r25
    1eba:	80 93 6c 02 	sts	0x026C, r24
    1ebe:	40 91 04 01 	lds	r20, 0x0104
    1ec2:	50 91 05 01 	lds	r21, 0x0105
    1ec6:	41 15       	cp	r20, r1
    1ec8:	51 05       	cpc	r21, r1
    1eca:	41 f4       	brne	.+16     	; 0x1edc <malloc+0x114>
    1ecc:	4d b7       	in	r20, 0x3d	; 61
    1ece:	5e b7       	in	r21, 0x3e	; 62
    1ed0:	80 91 00 01 	lds	r24, 0x0100
    1ed4:	90 91 01 01 	lds	r25, 0x0101
    1ed8:	48 1b       	sub	r20, r24
    1eda:	59 0b       	sbc	r21, r25
    1edc:	20 91 6c 02 	lds	r18, 0x026C
    1ee0:	30 91 6d 02 	lds	r19, 0x026D
    1ee4:	24 17       	cp	r18, r20
    1ee6:	35 07       	cpc	r19, r21
    1ee8:	b0 f4       	brcc	.+44     	; 0x1f16 <malloc+0x14e>
    1eea:	ca 01       	movw	r24, r20
    1eec:	82 1b       	sub	r24, r18
    1eee:	93 0b       	sbc	r25, r19
    1ef0:	86 17       	cp	r24, r22
    1ef2:	97 07       	cpc	r25, r23
    1ef4:	80 f0       	brcs	.+32     	; 0x1f16 <malloc+0x14e>
    1ef6:	ab 01       	movw	r20, r22
    1ef8:	4e 5f       	subi	r20, 0xFE	; 254
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255
    1efc:	84 17       	cp	r24, r20
    1efe:	95 07       	cpc	r25, r21
    1f00:	50 f0       	brcs	.+20     	; 0x1f16 <malloc+0x14e>
    1f02:	42 0f       	add	r20, r18
    1f04:	53 1f       	adc	r21, r19
    1f06:	50 93 6d 02 	sts	0x026D, r21
    1f0a:	40 93 6c 02 	sts	0x026C, r20
    1f0e:	f9 01       	movw	r30, r18
    1f10:	61 93       	st	Z+, r22
    1f12:	71 93       	st	Z+, r23
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <malloc+0x152>
    1f16:	e0 e0       	ldi	r30, 0x00	; 0
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	cf 01       	movw	r24, r30
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <free>:
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <free+0xa>
    1f2a:	50 c0       	rjmp	.+160    	; 0x1fcc <free+0xaa>
    1f2c:	ec 01       	movw	r28, r24
    1f2e:	22 97       	sbiw	r28, 0x02	; 2
    1f30:	1b 82       	std	Y+3, r1	; 0x03
    1f32:	1a 82       	std	Y+2, r1	; 0x02
    1f34:	a0 91 6e 02 	lds	r26, 0x026E
    1f38:	b0 91 6f 02 	lds	r27, 0x026F
    1f3c:	10 97       	sbiw	r26, 0x00	; 0
    1f3e:	09 f1       	breq	.+66     	; 0x1f82 <free+0x60>
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	ac 17       	cp	r26, r28
    1f46:	bd 07       	cpc	r27, r29
    1f48:	08 f1       	brcs	.+66     	; 0x1f8c <free+0x6a>
    1f4a:	bb 83       	std	Y+3, r27	; 0x03
    1f4c:	aa 83       	std	Y+2, r26	; 0x02
    1f4e:	fe 01       	movw	r30, r28
    1f50:	21 91       	ld	r18, Z+
    1f52:	31 91       	ld	r19, Z+
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	ae 17       	cp	r26, r30
    1f5a:	bf 07       	cpc	r27, r31
    1f5c:	79 f4       	brne	.+30     	; 0x1f7c <free+0x5a>
    1f5e:	8d 91       	ld	r24, X+
    1f60:	9c 91       	ld	r25, X
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	28 0f       	add	r18, r24
    1f66:	39 1f       	adc	r19, r25
    1f68:	2e 5f       	subi	r18, 0xFE	; 254
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	39 83       	std	Y+1, r19	; 0x01
    1f6e:	28 83       	st	Y, r18
    1f70:	12 96       	adiw	r26, 0x02	; 2
    1f72:	8d 91       	ld	r24, X+
    1f74:	9c 91       	ld	r25, X
    1f76:	13 97       	sbiw	r26, 0x03	; 3
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	41 15       	cp	r20, r1
    1f7e:	51 05       	cpc	r21, r1
    1f80:	71 f4       	brne	.+28     	; 0x1f9e <free+0x7c>
    1f82:	d0 93 6f 02 	sts	0x026F, r29
    1f86:	c0 93 6e 02 	sts	0x026E, r28
    1f8a:	20 c0       	rjmp	.+64     	; 0x1fcc <free+0xaa>
    1f8c:	12 96       	adiw	r26, 0x02	; 2
    1f8e:	8d 91       	ld	r24, X+
    1f90:	9c 91       	ld	r25, X
    1f92:	13 97       	sbiw	r26, 0x03	; 3
    1f94:	ad 01       	movw	r20, r26
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <free+0x7c>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	d3 cf       	rjmp	.-90     	; 0x1f44 <free+0x22>
    1f9e:	fa 01       	movw	r30, r20
    1fa0:	d3 83       	std	Z+3, r29	; 0x03
    1fa2:	c2 83       	std	Z+2, r28	; 0x02
    1fa4:	21 91       	ld	r18, Z+
    1fa6:	31 91       	ld	r19, Z+
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	ce 17       	cp	r28, r30
    1fae:	df 07       	cpc	r29, r31
    1fb0:	69 f4       	brne	.+26     	; 0x1fcc <free+0xaa>
    1fb2:	88 81       	ld	r24, Y
    1fb4:	99 81       	ldd	r25, Y+1	; 0x01
    1fb6:	28 0f       	add	r18, r24
    1fb8:	39 1f       	adc	r19, r25
    1fba:	2e 5f       	subi	r18, 0xFE	; 254
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	fa 01       	movw	r30, r20
    1fc0:	31 83       	std	Z+1, r19	; 0x01
    1fc2:	20 83       	st	Z, r18
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	93 83       	std	Z+3, r25	; 0x03
    1fca:	82 83       	std	Z+2, r24	; 0x02
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <memset>:
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <memset+0x6>
    1fd6:	6d 93       	st	X+, r22
    1fd8:	41 50       	subi	r20, 0x01	; 1
    1fda:	50 40       	sbci	r21, 0x00	; 0
    1fdc:	e0 f7       	brcc	.-8      	; 0x1fd6 <memset+0x4>
    1fde:	08 95       	ret

00001fe0 <_exit>:
    1fe0:	f8 94       	cli

00001fe2 <__stop_program>:
    1fe2:	ff cf       	rjmp	.-2      	; 0x1fe2 <__stop_program>
=======
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	00 90 5f 00 	lds	r0, 0x005F
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	00 90 5b 00 	lds	r0, 0x005B
     e54:	0f 92       	push	r0
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     e6a:	80 91 02 02 	lds	r24, 0x0202
     e6e:	88 23       	and	r24, r24
     e70:	d1 f0       	breq	.+52     	; 0xea6 <__vector_34+0x62>
	{
		tx1_counter--;
     e72:	80 91 02 02 	lds	r24, 0x0202
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	80 93 02 02 	sts	0x0202, r24
		UDR1=tx1_buffer[tx1_rd_index];
     e7c:	8e ec       	ldi	r24, 0xCE	; 206
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	20 91 03 02 	lds	r18, 0x0203
     e84:	22 2f       	mov	r18, r18
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	2e 53       	subi	r18, 0x3E	; 62
     e8a:	3e 4f       	sbci	r19, 0xFE	; 254
     e8c:	f9 01       	movw	r30, r18
     e8e:	20 81       	ld	r18, Z
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     e94:	80 91 03 02 	lds	r24, 0x0203
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	80 93 03 02 	sts	0x0203, r24
     e9e:	80 34       	cpi	r24, 0x40	; 64
     ea0:	11 f4       	brne	.+4      	; 0xea6 <__vector_34+0x62>
			tx1_rd_index = 0;
     ea2:	10 92 03 02 	sts	0x0203, r1
	}
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	00 92 5b 00 	sts	0x005B, r0
     ebc:	0f 90       	pop	r0
     ebe:	00 92 5f 00 	sts	0x005F, r0
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_32>:

ISR(USART1_RX_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	00 90 5f 00 	lds	r0, 0x005F
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	00 90 5b 00 	lds	r0, 0x005B
     ed8:	0f 92       	push	r0
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	1f 92       	push	r1
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     ef0:	88 ec       	ldi	r24, 0xC8	; 200
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8c 71       	andi	r24, 0x1C	; 28
     f02:	99 27       	eor	r25, r25
     f04:	89 2b       	or	r24, r25
     f06:	d1 f4       	brne	.+52     	; 0xf3c <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     f08:	80 91 44 02 	lds	r24, 0x0244
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	2e ec       	ldi	r18, 0xCE	; 206
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	8c 5f       	subi	r24, 0xFC	; 252
     f1a:	9d 4f       	sbci	r25, 0xFD	; 253
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     f20:	80 91 44 02 	lds	r24, 0x0244
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 44 02 	sts	0x0244, r24
     f2a:	80 34       	cpi	r24, 0x40	; 64
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__vector_32+0x6a>
		rx1_wr_index = 0;
     f2e:	10 92 44 02 	sts	0x0244, r1

		rx1_counter++;
     f32:	80 91 45 02 	lds	r24, 0x0245
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 45 02 	sts	0x0245, r24
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	00 92 5b 00 	sts	0x005B, r0
     f54:	0f 90       	pop	r0
     f56:	00 92 5f 00 	sts	0x005F, r0
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__subsf3>:
     f60:	50 58       	subi	r21, 0x80	; 128

00000f62 <__addsf3>:
     f62:	bb 27       	eor	r27, r27
     f64:	aa 27       	eor	r26, r26
     f66:	0e d0       	rcall	.+28     	; 0xf84 <__addsf3x>
     f68:	75 c1       	rjmp	.+746    	; 0x1254 <__fp_round>
     f6a:	66 d1       	rcall	.+716    	; 0x1238 <__fp_pscA>
     f6c:	30 f0       	brcs	.+12     	; 0xf7a <__addsf3+0x18>
     f6e:	6b d1       	rcall	.+726    	; 0x1246 <__fp_pscB>
     f70:	20 f0       	brcs	.+8      	; 0xf7a <__addsf3+0x18>
     f72:	31 f4       	brne	.+12     	; 0xf80 <__addsf3+0x1e>
     f74:	9f 3f       	cpi	r25, 0xFF	; 255
     f76:	11 f4       	brne	.+4      	; 0xf7c <__addsf3+0x1a>
     f78:	1e f4       	brtc	.+6      	; 0xf80 <__addsf3+0x1e>
     f7a:	5b c1       	rjmp	.+694    	; 0x1232 <__fp_nan>
     f7c:	0e f4       	brtc	.+2      	; 0xf80 <__addsf3+0x1e>
     f7e:	e0 95       	com	r30
     f80:	e7 fb       	bst	r30, 7
     f82:	51 c1       	rjmp	.+674    	; 0x1226 <__fp_inf>

00000f84 <__addsf3x>:
     f84:	e9 2f       	mov	r30, r25
     f86:	77 d1       	rcall	.+750    	; 0x1276 <__fp_split3>
     f88:	80 f3       	brcs	.-32     	; 0xf6a <__addsf3+0x8>
     f8a:	ba 17       	cp	r27, r26
     f8c:	62 07       	cpc	r22, r18
     f8e:	73 07       	cpc	r23, r19
     f90:	84 07       	cpc	r24, r20
     f92:	95 07       	cpc	r25, r21
     f94:	18 f0       	brcs	.+6      	; 0xf9c <__addsf3x+0x18>
     f96:	71 f4       	brne	.+28     	; 0xfb4 <__addsf3x+0x30>
     f98:	9e f5       	brtc	.+102    	; 0x1000 <__addsf3x+0x7c>
     f9a:	8f c1       	rjmp	.+798    	; 0x12ba <__fp_zero>
     f9c:	0e f4       	brtc	.+2      	; 0xfa0 <__addsf3x+0x1c>
     f9e:	e0 95       	com	r30
     fa0:	0b 2e       	mov	r0, r27
     fa2:	ba 2f       	mov	r27, r26
     fa4:	a0 2d       	mov	r26, r0
     fa6:	0b 01       	movw	r0, r22
     fa8:	b9 01       	movw	r22, r18
     faa:	90 01       	movw	r18, r0
     fac:	0c 01       	movw	r0, r24
     fae:	ca 01       	movw	r24, r20
     fb0:	a0 01       	movw	r20, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	ff 27       	eor	r31, r31
     fb6:	59 1b       	sub	r21, r25
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <__addsf3x+0x5c>
     fba:	59 3f       	cpi	r21, 0xF9	; 249
     fbc:	50 f4       	brcc	.+20     	; 0xfd2 <__addsf3x+0x4e>
     fbe:	50 3e       	cpi	r21, 0xE0	; 224
     fc0:	68 f1       	brcs	.+90     	; 0x101c <__addsf3x+0x98>
     fc2:	1a 16       	cp	r1, r26
     fc4:	f0 40       	sbci	r31, 0x00	; 0
     fc6:	a2 2f       	mov	r26, r18
     fc8:	23 2f       	mov	r18, r19
     fca:	34 2f       	mov	r19, r20
     fcc:	44 27       	eor	r20, r20
     fce:	58 5f       	subi	r21, 0xF8	; 248
     fd0:	f3 cf       	rjmp	.-26     	; 0xfb8 <__addsf3x+0x34>
     fd2:	46 95       	lsr	r20
     fd4:	37 95       	ror	r19
     fd6:	27 95       	ror	r18
     fd8:	a7 95       	ror	r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	53 95       	inc	r21
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__addsf3x+0x4e>
     fe0:	7e f4       	brtc	.+30     	; 0x1000 <__addsf3x+0x7c>
     fe2:	1f 16       	cp	r1, r31
     fe4:	ba 0b       	sbc	r27, r26
     fe6:	62 0b       	sbc	r22, r18
     fe8:	73 0b       	sbc	r23, r19
     fea:	84 0b       	sbc	r24, r20
     fec:	ba f0       	brmi	.+46     	; 0x101c <__addsf3x+0x98>
     fee:	91 50       	subi	r25, 0x01	; 1
     ff0:	a1 f0       	breq	.+40     	; 0x101a <__addsf3x+0x96>
     ff2:	ff 0f       	add	r31, r31
     ff4:	bb 1f       	adc	r27, r27
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	c2 f7       	brpl	.-16     	; 0xfee <__addsf3x+0x6a>
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <__addsf3x+0x98>
    1000:	ba 0f       	add	r27, r26
    1002:	62 1f       	adc	r22, r18
    1004:	73 1f       	adc	r23, r19
    1006:	84 1f       	adc	r24, r20
    1008:	48 f4       	brcc	.+18     	; 0x101c <__addsf3x+0x98>
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f7 95       	ror	r31
    1014:	9e 3f       	cpi	r25, 0xFE	; 254
    1016:	08 f0       	brcs	.+2      	; 0x101a <__addsf3x+0x96>
    1018:	b3 cf       	rjmp	.-154    	; 0xf80 <__addsf3+0x1e>
    101a:	93 95       	inc	r25
    101c:	88 0f       	add	r24, r24
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0x9e>
    1020:	99 27       	eor	r25, r25
    1022:	ee 0f       	add	r30, r30
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	08 95       	ret

0000102a <__cmpsf2>:
    102a:	d9 d0       	rcall	.+434    	; 0x11de <__fp_cmp>
    102c:	08 f4       	brcc	.+2      	; 0x1030 <__cmpsf2+0x6>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	08 95       	ret

00001032 <__divsf3>:
    1032:	0c d0       	rcall	.+24     	; 0x104c <__divsf3x>
    1034:	0f c1       	rjmp	.+542    	; 0x1254 <__fp_round>
    1036:	07 d1       	rcall	.+526    	; 0x1246 <__fp_pscB>
    1038:	40 f0       	brcs	.+16     	; 0x104a <__divsf3+0x18>
    103a:	fe d0       	rcall	.+508    	; 0x1238 <__fp_pscA>
    103c:	30 f0       	brcs	.+12     	; 0x104a <__divsf3+0x18>
    103e:	21 f4       	brne	.+8      	; 0x1048 <__divsf3+0x16>
    1040:	5f 3f       	cpi	r21, 0xFF	; 255
    1042:	19 f0       	breq	.+6      	; 0x104a <__divsf3+0x18>
    1044:	f0 c0       	rjmp	.+480    	; 0x1226 <__fp_inf>
    1046:	51 11       	cpse	r21, r1
    1048:	39 c1       	rjmp	.+626    	; 0x12bc <__fp_szero>
    104a:	f3 c0       	rjmp	.+486    	; 0x1232 <__fp_nan>

0000104c <__divsf3x>:
    104c:	14 d1       	rcall	.+552    	; 0x1276 <__fp_split3>
    104e:	98 f3       	brcs	.-26     	; 0x1036 <__divsf3+0x4>

00001050 <__divsf3_pse>:
    1050:	99 23       	and	r25, r25
    1052:	c9 f3       	breq	.-14     	; 0x1046 <__divsf3+0x14>
    1054:	55 23       	and	r21, r21
    1056:	b1 f3       	breq	.-20     	; 0x1044 <__divsf3+0x12>
    1058:	95 1b       	sub	r25, r21
    105a:	55 0b       	sbc	r21, r21
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	62 17       	cp	r22, r18
    1062:	73 07       	cpc	r23, r19
    1064:	84 07       	cpc	r24, r20
    1066:	38 f0       	brcs	.+14     	; 0x1076 <__divsf3_pse+0x26>
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	44 1f       	adc	r20, r20
    1072:	aa 1f       	adc	r26, r26
    1074:	a9 f3       	breq	.-22     	; 0x1060 <__divsf3_pse+0x10>
    1076:	33 d0       	rcall	.+102    	; 0x10de <__divsf3_pse+0x8e>
    1078:	0e 2e       	mov	r0, r30
    107a:	3a f0       	brmi	.+14     	; 0x108a <__divsf3_pse+0x3a>
    107c:	e0 e8       	ldi	r30, 0x80	; 128
    107e:	30 d0       	rcall	.+96     	; 0x10e0 <__divsf3_pse+0x90>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	e6 95       	lsr	r30
    1086:	00 1c       	adc	r0, r0
    1088:	ca f7       	brpl	.-14     	; 0x107c <__divsf3_pse+0x2c>
    108a:	29 d0       	rcall	.+82     	; 0x10de <__divsf3_pse+0x8e>
    108c:	fe 2f       	mov	r31, r30
    108e:	27 d0       	rcall	.+78     	; 0x10de <__divsf3_pse+0x8e>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	bb 1f       	adc	r27, r27
    1098:	26 17       	cp	r18, r22
    109a:	37 07       	cpc	r19, r23
    109c:	48 07       	cpc	r20, r24
    109e:	ab 07       	cpc	r26, r27
    10a0:	b0 e8       	ldi	r27, 0x80	; 128
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__divsf3_pse+0x56>
    10a4:	bb 0b       	sbc	r27, r27
    10a6:	80 2d       	mov	r24, r0
    10a8:	bf 01       	movw	r22, r30
    10aa:	ff 27       	eor	r31, r31
    10ac:	93 58       	subi	r25, 0x83	; 131
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	2a f0       	brmi	.+10     	; 0x10bc <__divsf3_pse+0x6c>
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	51 05       	cpc	r21, r1
    10b6:	68 f0       	brcs	.+26     	; 0x10d2 <__divsf3_pse+0x82>
    10b8:	b6 c0       	rjmp	.+364    	; 0x1226 <__fp_inf>
    10ba:	00 c1       	rjmp	.+512    	; 0x12bc <__fp_szero>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	ec f3       	brlt	.-6      	; 0x10ba <__divsf3_pse+0x6a>
    10c0:	98 3e       	cpi	r25, 0xE8	; 232
    10c2:	dc f3       	brlt	.-10     	; 0x10ba <__divsf3_pse+0x6a>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	9f 5f       	subi	r25, 0xFF	; 255
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <__divsf3_pse+0x74>
    10d2:	88 0f       	add	r24, r24
    10d4:	91 1d       	adc	r25, r1
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	97 f9       	bld	r25, 7
    10dc:	08 95       	ret
    10de:	e1 e0       	ldi	r30, 0x01	; 1
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	bb 1f       	adc	r27, r27
    10e8:	62 17       	cp	r22, r18
    10ea:	73 07       	cpc	r23, r19
    10ec:	84 07       	cpc	r24, r20
    10ee:	ba 07       	cpc	r27, r26
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <__divsf3_pse+0xaa>
    10f2:	62 1b       	sub	r22, r18
    10f4:	73 0b       	sbc	r23, r19
    10f6:	84 0b       	sbc	r24, r20
    10f8:	ba 0b       	sbc	r27, r26
    10fa:	ee 1f       	adc	r30, r30
    10fc:	88 f7       	brcc	.-30     	; 0x10e0 <__divsf3_pse+0x90>
    10fe:	e0 95       	com	r30
    1100:	08 95       	ret

00001102 <__fixsfsi>:
    1102:	04 d0       	rcall	.+8      	; 0x110c <__fixunssfsi>
    1104:	68 94       	set
    1106:	b1 11       	cpse	r27, r1
    1108:	d9 c0       	rjmp	.+434    	; 0x12bc <__fp_szero>
    110a:	08 95       	ret

0000110c <__fixunssfsi>:
    110c:	bc d0       	rcall	.+376    	; 0x1286 <__fp_splitA>
    110e:	88 f0       	brcs	.+34     	; 0x1132 <__fixunssfsi+0x26>
    1110:	9f 57       	subi	r25, 0x7F	; 127
    1112:	90 f0       	brcs	.+36     	; 0x1138 <__fixunssfsi+0x2c>
    1114:	b9 2f       	mov	r27, r25
    1116:	99 27       	eor	r25, r25
    1118:	b7 51       	subi	r27, 0x17	; 23
    111a:	a0 f0       	brcs	.+40     	; 0x1144 <__fixunssfsi+0x38>
    111c:	d1 f0       	breq	.+52     	; 0x1152 <__fixunssfsi+0x46>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	1a f0       	brmi	.+6      	; 0x112e <__fixunssfsi+0x22>
    1128:	ba 95       	dec	r27
    112a:	c9 f7       	brne	.-14     	; 0x111e <__fixunssfsi+0x12>
    112c:	12 c0       	rjmp	.+36     	; 0x1152 <__fixunssfsi+0x46>
    112e:	b1 30       	cpi	r27, 0x01	; 1
    1130:	81 f0       	breq	.+32     	; 0x1152 <__fixunssfsi+0x46>
    1132:	c3 d0       	rcall	.+390    	; 0x12ba <__fp_zero>
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	08 95       	ret
    1138:	c0 c0       	rjmp	.+384    	; 0x12ba <__fp_zero>
    113a:	67 2f       	mov	r22, r23
    113c:	78 2f       	mov	r23, r24
    113e:	88 27       	eor	r24, r24
    1140:	b8 5f       	subi	r27, 0xF8	; 248
    1142:	39 f0       	breq	.+14     	; 0x1152 <__fixunssfsi+0x46>
    1144:	b9 3f       	cpi	r27, 0xF9	; 249
    1146:	cc f3       	brlt	.-14     	; 0x113a <__fixunssfsi+0x2e>
    1148:	86 95       	lsr	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b3 95       	inc	r27
    1150:	d9 f7       	brne	.-10     	; 0x1148 <__fixunssfsi+0x3c>
    1152:	3e f4       	brtc	.+14     	; 0x1162 <__fixunssfsi+0x56>
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__floatunsisf>:
    1164:	e8 94       	clt
    1166:	09 c0       	rjmp	.+18     	; 0x117a <__floatsisf+0x12>

00001168 <__floatsisf>:
    1168:	97 fb       	bst	r25, 7
    116a:	3e f4       	brtc	.+14     	; 0x117a <__floatsisf+0x12>
    116c:	90 95       	com	r25
    116e:	80 95       	com	r24
    1170:	70 95       	com	r23
    1172:	61 95       	neg	r22
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	99 23       	and	r25, r25
    117c:	a9 f0       	breq	.+42     	; 0x11a8 <__floatsisf+0x40>
    117e:	f9 2f       	mov	r31, r25
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	bb 27       	eor	r27, r27
    1184:	93 95       	inc	r25
    1186:	f6 95       	lsr	r31
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f1 11       	cpse	r31, r1
    1192:	f8 cf       	rjmp	.-16     	; 0x1184 <__floatsisf+0x1c>
    1194:	fa f4       	brpl	.+62     	; 0x11d4 <__floatsisf+0x6c>
    1196:	bb 0f       	add	r27, r27
    1198:	11 f4       	brne	.+4      	; 0x119e <__floatsisf+0x36>
    119a:	60 ff       	sbrs	r22, 0
    119c:	1b c0       	rjmp	.+54     	; 0x11d4 <__floatsisf+0x6c>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <__floatsisf+0x6c>
    11a8:	88 23       	and	r24, r24
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <__floatsisf+0x48>
    11ac:	96 e9       	ldi	r25, 0x96	; 150
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <__floatsisf+0x6a>
    11b0:	77 23       	and	r23, r23
    11b2:	21 f0       	breq	.+8      	; 0x11bc <__floatsisf+0x54>
    11b4:	9e e8       	ldi	r25, 0x8E	; 142
    11b6:	87 2f       	mov	r24, r23
    11b8:	76 2f       	mov	r23, r22
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__floatsisf+0x5e>
    11bc:	66 23       	and	r22, r22
    11be:	71 f0       	breq	.+28     	; 0x11dc <__floatsisf+0x74>
    11c0:	96 e8       	ldi	r25, 0x86	; 134
    11c2:	86 2f       	mov	r24, r22
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	2a f0       	brmi	.+10     	; 0x11d4 <__floatsisf+0x6c>
    11ca:	9a 95       	dec	r25
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	da f7       	brpl	.-10     	; 0x11ca <__floatsisf+0x62>
    11d4:	88 0f       	add	r24, r24
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <__fp_cmp>:
    11de:	99 0f       	add	r25, r25
    11e0:	00 08       	sbc	r0, r0
    11e2:	55 0f       	add	r21, r21
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	e0 e8       	ldi	r30, 0x80	; 128
    11e8:	fe ef       	ldi	r31, 0xFE	; 254
    11ea:	16 16       	cp	r1, r22
    11ec:	17 06       	cpc	r1, r23
    11ee:	e8 07       	cpc	r30, r24
    11f0:	f9 07       	cpc	r31, r25
    11f2:	c0 f0       	brcs	.+48     	; 0x1224 <__fp_cmp+0x46>
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	e4 07       	cpc	r30, r20
    11fa:	f5 07       	cpc	r31, r21
    11fc:	98 f0       	brcs	.+38     	; 0x1224 <__fp_cmp+0x46>
    11fe:	62 1b       	sub	r22, r18
    1200:	73 0b       	sbc	r23, r19
    1202:	84 0b       	sbc	r24, r20
    1204:	95 0b       	sbc	r25, r21
    1206:	39 f4       	brne	.+14     	; 0x1216 <__fp_cmp+0x38>
    1208:	0a 26       	eor	r0, r26
    120a:	61 f0       	breq	.+24     	; 0x1224 <__fp_cmp+0x46>
    120c:	23 2b       	or	r18, r19
    120e:	24 2b       	or	r18, r20
    1210:	25 2b       	or	r18, r21
    1212:	21 f4       	brne	.+8      	; 0x121c <__fp_cmp+0x3e>
    1214:	08 95       	ret
    1216:	0a 26       	eor	r0, r26
    1218:	09 f4       	brne	.+2      	; 0x121c <__fp_cmp+0x3e>
    121a:	a1 40       	sbci	r26, 0x01	; 1
    121c:	a6 95       	lsr	r26
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	81 1d       	adc	r24, r1
    1222:	81 1d       	adc	r24, r1
    1224:	08 95       	ret

00001226 <__fp_inf>:
    1226:	97 f9       	bld	r25, 7
    1228:	9f 67       	ori	r25, 0x7F	; 127
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	08 95       	ret

00001232 <__fp_nan>:
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	80 ec       	ldi	r24, 0xC0	; 192
    1236:	08 95       	ret

00001238 <__fp_pscA>:
    1238:	00 24       	eor	r0, r0
    123a:	0a 94       	dec	r0
    123c:	16 16       	cp	r1, r22
    123e:	17 06       	cpc	r1, r23
    1240:	18 06       	cpc	r1, r24
    1242:	09 06       	cpc	r0, r25
    1244:	08 95       	ret

00001246 <__fp_pscB>:
    1246:	00 24       	eor	r0, r0
    1248:	0a 94       	dec	r0
    124a:	12 16       	cp	r1, r18
    124c:	13 06       	cpc	r1, r19
    124e:	14 06       	cpc	r1, r20
    1250:	05 06       	cpc	r0, r21
    1252:	08 95       	ret

00001254 <__fp_round>:
    1254:	09 2e       	mov	r0, r25
    1256:	03 94       	inc	r0
    1258:	00 0c       	add	r0, r0
    125a:	11 f4       	brne	.+4      	; 0x1260 <__fp_round+0xc>
    125c:	88 23       	and	r24, r24
    125e:	52 f0       	brmi	.+20     	; 0x1274 <__fp_round+0x20>
    1260:	bb 0f       	add	r27, r27
    1262:	40 f4       	brcc	.+16     	; 0x1274 <__fp_round+0x20>
    1264:	bf 2b       	or	r27, r31
    1266:	11 f4       	brne	.+4      	; 0x126c <__fp_round+0x18>
    1268:	60 ff       	sbrs	r22, 0
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <__fp_round+0x20>
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__fp_split3>:
    1276:	57 fd       	sbrc	r21, 7
    1278:	90 58       	subi	r25, 0x80	; 128
    127a:	44 0f       	add	r20, r20
    127c:	55 1f       	adc	r21, r21
    127e:	59 f0       	breq	.+22     	; 0x1296 <__fp_splitA+0x10>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	71 f0       	breq	.+28     	; 0x12a0 <__fp_splitA+0x1a>
    1284:	47 95       	ror	r20

00001286 <__fp_splitA>:
    1286:	88 0f       	add	r24, r24
    1288:	97 fb       	bst	r25, 7
    128a:	99 1f       	adc	r25, r25
    128c:	61 f0       	breq	.+24     	; 0x12a6 <__fp_splitA+0x20>
    128e:	9f 3f       	cpi	r25, 0xFF	; 255
    1290:	79 f0       	breq	.+30     	; 0x12b0 <__fp_splitA+0x2a>
    1292:	87 95       	ror	r24
    1294:	08 95       	ret
    1296:	12 16       	cp	r1, r18
    1298:	13 06       	cpc	r1, r19
    129a:	14 06       	cpc	r1, r20
    129c:	55 1f       	adc	r21, r21
    129e:	f2 cf       	rjmp	.-28     	; 0x1284 <__fp_split3+0xe>
    12a0:	46 95       	lsr	r20
    12a2:	f1 df       	rcall	.-30     	; 0x1286 <__fp_splitA>
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <__fp_splitA+0x30>
    12a6:	16 16       	cp	r1, r22
    12a8:	17 06       	cpc	r1, r23
    12aa:	18 06       	cpc	r1, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	f1 cf       	rjmp	.-30     	; 0x1292 <__fp_splitA+0xc>
    12b0:	86 95       	lsr	r24
    12b2:	71 05       	cpc	r23, r1
    12b4:	61 05       	cpc	r22, r1
    12b6:	08 94       	sec
    12b8:	08 95       	ret

000012ba <__fp_zero>:
    12ba:	e8 94       	clt

000012bc <__fp_szero>:
    12bc:	bb 27       	eor	r27, r27
    12be:	66 27       	eor	r22, r22
    12c0:	77 27       	eor	r23, r23
    12c2:	cb 01       	movw	r24, r22
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__gesf2>:
    12c8:	8a df       	rcall	.-236    	; 0x11de <__fp_cmp>
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <__gesf2+0x6>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__mulsf3>:
    12d0:	0b d0       	rcall	.+22     	; 0x12e8 <__mulsf3x>
    12d2:	c0 cf       	rjmp	.-128    	; 0x1254 <__fp_round>
    12d4:	b1 df       	rcall	.-158    	; 0x1238 <__fp_pscA>
    12d6:	28 f0       	brcs	.+10     	; 0x12e2 <__mulsf3+0x12>
    12d8:	b6 df       	rcall	.-148    	; 0x1246 <__fp_pscB>
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <__mulsf3+0x12>
    12dc:	95 23       	and	r25, r21
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__mulsf3+0x12>
    12e0:	a2 cf       	rjmp	.-188    	; 0x1226 <__fp_inf>
    12e2:	a7 cf       	rjmp	.-178    	; 0x1232 <__fp_nan>
    12e4:	11 24       	eor	r1, r1
    12e6:	ea cf       	rjmp	.-44     	; 0x12bc <__fp_szero>

000012e8 <__mulsf3x>:
    12e8:	c6 df       	rcall	.-116    	; 0x1276 <__fp_split3>
    12ea:	a0 f3       	brcs	.-24     	; 0x12d4 <__mulsf3+0x4>

000012ec <__mulsf3_pse>:
    12ec:	95 9f       	mul	r25, r21
    12ee:	d1 f3       	breq	.-12     	; 0x12e4 <__mulsf3+0x14>
    12f0:	95 0f       	add	r25, r21
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	55 1f       	adc	r21, r21
    12f6:	62 9f       	mul	r22, r18
    12f8:	f0 01       	movw	r30, r0
    12fa:	72 9f       	mul	r23, r18
    12fc:	bb 27       	eor	r27, r27
    12fe:	f0 0d       	add	r31, r0
    1300:	b1 1d       	adc	r27, r1
    1302:	63 9f       	mul	r22, r19
    1304:	aa 27       	eor	r26, r26
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	aa 1f       	adc	r26, r26
    130c:	64 9f       	mul	r22, r20
    130e:	66 27       	eor	r22, r22
    1310:	b0 0d       	add	r27, r0
    1312:	a1 1d       	adc	r26, r1
    1314:	66 1f       	adc	r22, r22
    1316:	82 9f       	mul	r24, r18
    1318:	22 27       	eor	r18, r18
    131a:	b0 0d       	add	r27, r0
    131c:	a1 1d       	adc	r26, r1
    131e:	62 1f       	adc	r22, r18
    1320:	73 9f       	mul	r23, r19
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	83 9f       	mul	r24, r19
    132a:	a0 0d       	add	r26, r0
    132c:	61 1d       	adc	r22, r1
    132e:	22 1f       	adc	r18, r18
    1330:	74 9f       	mul	r23, r20
    1332:	33 27       	eor	r19, r19
    1334:	a0 0d       	add	r26, r0
    1336:	61 1d       	adc	r22, r1
    1338:	23 1f       	adc	r18, r19
    133a:	84 9f       	mul	r24, r20
    133c:	60 0d       	add	r22, r0
    133e:	21 1d       	adc	r18, r1
    1340:	82 2f       	mov	r24, r18
    1342:	76 2f       	mov	r23, r22
    1344:	6a 2f       	mov	r22, r26
    1346:	11 24       	eor	r1, r1
    1348:	9f 57       	subi	r25, 0x7F	; 127
    134a:	50 40       	sbci	r21, 0x00	; 0
    134c:	8a f0       	brmi	.+34     	; 0x1370 <__mulsf3_pse+0x84>
    134e:	e1 f0       	breq	.+56     	; 0x1388 <__mulsf3_pse+0x9c>
    1350:	88 23       	and	r24, r24
    1352:	4a f0       	brmi	.+18     	; 0x1366 <__mulsf3_pse+0x7a>
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	91 50       	subi	r25, 0x01	; 1
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__mulsf3_pse+0x64>
    1366:	9e 3f       	cpi	r25, 0xFE	; 254
    1368:	51 05       	cpc	r21, r1
    136a:	70 f0       	brcs	.+28     	; 0x1388 <__mulsf3_pse+0x9c>
    136c:	5c cf       	rjmp	.-328    	; 0x1226 <__fp_inf>
    136e:	a6 cf       	rjmp	.-180    	; 0x12bc <__fp_szero>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	ec f3       	brlt	.-6      	; 0x136e <__mulsf3_pse+0x82>
    1374:	98 3e       	cpi	r25, 0xE8	; 232
    1376:	dc f3       	brlt	.-10     	; 0x136e <__mulsf3_pse+0x82>
    1378:	86 95       	lsr	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	f7 95       	ror	r31
    1382:	e7 95       	ror	r30
    1384:	9f 5f       	subi	r25, 0xFF	; 255
    1386:	c1 f7       	brne	.-16     	; 0x1378 <__mulsf3_pse+0x8c>
    1388:	fe 2b       	or	r31, r30
    138a:	88 0f       	add	r24, r24
    138c:	91 1d       	adc	r25, r1
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	97 f9       	bld	r25, 7
    1394:	08 95       	ret

00001396 <calloc>:
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	86 9f       	mul	r24, r22
    13a0:	80 01       	movw	r16, r0
    13a2:	87 9f       	mul	r24, r23
    13a4:	10 0d       	add	r17, r0
    13a6:	96 9f       	mul	r25, r22
    13a8:	10 0d       	add	r17, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	c8 01       	movw	r24, r16
    13ae:	0d d0       	rcall	.+26     	; 0x13ca <malloc>
    13b0:	ec 01       	movw	r28, r24
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	21 f0       	breq	.+8      	; 0x13be <calloc+0x28>
    13b6:	a8 01       	movw	r20, r16
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	33 d1       	rcall	.+614    	; 0x1624 <memset>
    13be:	ce 01       	movw	r24, r28
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <malloc>:
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	10 f4       	brcc	.+4      	; 0x13d8 <malloc+0xe>
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	e0 91 48 02 	lds	r30, 0x0248
    13dc:	f0 91 49 02 	lds	r31, 0x0249
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	c0 e0       	ldi	r28, 0x00	; 0
    13e6:	d0 e0       	ldi	r29, 0x00	; 0
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	11 f1       	breq	.+68     	; 0x1430 <malloc+0x66>
    13ec:	40 81       	ld	r20, Z
    13ee:	51 81       	ldd	r21, Z+1	; 0x01
    13f0:	48 17       	cp	r20, r24
    13f2:	59 07       	cpc	r21, r25
    13f4:	c0 f0       	brcs	.+48     	; 0x1426 <malloc+0x5c>
    13f6:	48 17       	cp	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	61 f4       	brne	.+24     	; 0x1414 <malloc+0x4a>
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	20 97       	sbiw	r28, 0x00	; 0
    1402:	19 f0       	breq	.+6      	; 0x140a <malloc+0x40>
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	2b c0       	rjmp	.+86     	; 0x1460 <malloc+0x96>
    140a:	90 93 49 02 	sts	0x0249, r25
    140e:	80 93 48 02 	sts	0x0248, r24
    1412:	26 c0       	rjmp	.+76     	; 0x1460 <malloc+0x96>
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	19 f0       	breq	.+6      	; 0x1420 <malloc+0x56>
    141a:	42 17       	cp	r20, r18
    141c:	53 07       	cpc	r21, r19
    141e:	18 f4       	brcc	.+6      	; 0x1426 <malloc+0x5c>
    1420:	9a 01       	movw	r18, r20
    1422:	be 01       	movw	r22, r28
    1424:	df 01       	movw	r26, r30
    1426:	ef 01       	movw	r28, r30
    1428:	02 80       	ldd	r0, Z+2	; 0x02
    142a:	f3 81       	ldd	r31, Z+3	; 0x03
    142c:	e0 2d       	mov	r30, r0
    142e:	dc cf       	rjmp	.-72     	; 0x13e8 <malloc+0x1e>
    1430:	21 15       	cp	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	09 f1       	breq	.+66     	; 0x1478 <malloc+0xae>
    1436:	28 1b       	sub	r18, r24
    1438:	39 0b       	sbc	r19, r25
    143a:	24 30       	cpi	r18, 0x04	; 4
    143c:	31 05       	cpc	r19, r1
    143e:	90 f4       	brcc	.+36     	; 0x1464 <malloc+0x9a>
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	8d 91       	ld	r24, X+
    1444:	9c 91       	ld	r25, X
    1446:	13 97       	sbiw	r26, 0x03	; 3
    1448:	61 15       	cp	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	21 f0       	breq	.+8      	; 0x1456 <malloc+0x8c>
    144e:	fb 01       	movw	r30, r22
    1450:	93 83       	std	Z+3, r25	; 0x03
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	04 c0       	rjmp	.+8      	; 0x145e <malloc+0x94>
    1456:	90 93 49 02 	sts	0x0249, r25
    145a:	80 93 48 02 	sts	0x0248, r24
    145e:	fd 01       	movw	r30, r26
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	44 c0       	rjmp	.+136    	; 0x14ec <malloc+0x122>
    1464:	fd 01       	movw	r30, r26
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	81 93       	st	Z+, r24
    146c:	91 93       	st	Z+, r25
    146e:	22 50       	subi	r18, 0x02	; 2
    1470:	31 09       	sbc	r19, r1
    1472:	2d 93       	st	X+, r18
    1474:	3c 93       	st	X, r19
    1476:	3a c0       	rjmp	.+116    	; 0x14ec <malloc+0x122>
    1478:	20 91 46 02 	lds	r18, 0x0246
    147c:	30 91 47 02 	lds	r19, 0x0247
    1480:	23 2b       	or	r18, r19
    1482:	41 f4       	brne	.+16     	; 0x1494 <malloc+0xca>
    1484:	20 91 02 01 	lds	r18, 0x0102
    1488:	30 91 03 01 	lds	r19, 0x0103
    148c:	30 93 47 02 	sts	0x0247, r19
    1490:	20 93 46 02 	sts	0x0246, r18
    1494:	20 91 00 01 	lds	r18, 0x0100
    1498:	30 91 01 01 	lds	r19, 0x0101
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	41 f4       	brne	.+16     	; 0x14b2 <malloc+0xe8>
    14a2:	2d b7       	in	r18, 0x3d	; 61
    14a4:	3e b7       	in	r19, 0x3e	; 62
    14a6:	40 91 04 01 	lds	r20, 0x0104
    14aa:	50 91 05 01 	lds	r21, 0x0105
    14ae:	24 1b       	sub	r18, r20
    14b0:	35 0b       	sbc	r19, r21
    14b2:	e0 91 46 02 	lds	r30, 0x0246
    14b6:	f0 91 47 02 	lds	r31, 0x0247
    14ba:	e2 17       	cp	r30, r18
    14bc:	f3 07       	cpc	r31, r19
    14be:	a0 f4       	brcc	.+40     	; 0x14e8 <malloc+0x11e>
    14c0:	2e 1b       	sub	r18, r30
    14c2:	3f 0b       	sbc	r19, r31
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	78 f0       	brcs	.+30     	; 0x14e8 <malloc+0x11e>
    14ca:	ac 01       	movw	r20, r24
    14cc:	4e 5f       	subi	r20, 0xFE	; 254
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	24 17       	cp	r18, r20
    14d2:	35 07       	cpc	r19, r21
    14d4:	48 f0       	brcs	.+18     	; 0x14e8 <malloc+0x11e>
    14d6:	4e 0f       	add	r20, r30
    14d8:	5f 1f       	adc	r21, r31
    14da:	50 93 47 02 	sts	0x0247, r21
    14de:	40 93 46 02 	sts	0x0246, r20
    14e2:	81 93       	st	Z+, r24
    14e4:	91 93       	st	Z+, r25
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <malloc+0x122>
    14e8:	e0 e0       	ldi	r30, 0x00	; 0
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	cf 01       	movw	r24, r30
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <free>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <free+0xe>
    1500:	8c c0       	rjmp	.+280    	; 0x161a <free+0x126>
    1502:	fc 01       	movw	r30, r24
    1504:	32 97       	sbiw	r30, 0x02	; 2
    1506:	13 82       	std	Z+3, r1	; 0x03
    1508:	12 82       	std	Z+2, r1	; 0x02
    150a:	00 91 48 02 	lds	r16, 0x0248
    150e:	10 91 49 02 	lds	r17, 0x0249
    1512:	01 15       	cp	r16, r1
    1514:	11 05       	cpc	r17, r1
    1516:	81 f4       	brne	.+32     	; 0x1538 <free+0x44>
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	20 91 46 02 	lds	r18, 0x0246
    1524:	30 91 47 02 	lds	r19, 0x0247
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	79 f5       	brne	.+94     	; 0x158c <free+0x98>
    152e:	f0 93 47 02 	sts	0x0247, r31
    1532:	e0 93 46 02 	sts	0x0246, r30
    1536:	71 c0       	rjmp	.+226    	; 0x161a <free+0x126>
    1538:	d8 01       	movw	r26, r16
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	ae 17       	cp	r26, r30
    1540:	bf 07       	cpc	r27, r31
    1542:	50 f4       	brcc	.+20     	; 0x1558 <free+0x64>
    1544:	12 96       	adiw	r26, 0x02	; 2
    1546:	2d 91       	ld	r18, X+
    1548:	3c 91       	ld	r19, X
    154a:	13 97       	sbiw	r26, 0x03	; 3
    154c:	ad 01       	movw	r20, r26
    154e:	21 15       	cp	r18, r1
    1550:	31 05       	cpc	r19, r1
    1552:	09 f1       	breq	.+66     	; 0x1596 <free+0xa2>
    1554:	d9 01       	movw	r26, r18
    1556:	f3 cf       	rjmp	.-26     	; 0x153e <free+0x4a>
    1558:	9d 01       	movw	r18, r26
    155a:	da 01       	movw	r26, r20
    155c:	33 83       	std	Z+3, r19	; 0x03
    155e:	22 83       	std	Z+2, r18	; 0x02
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	86 0f       	add	r24, r22
    1566:	97 1f       	adc	r25, r23
    1568:	82 17       	cp	r24, r18
    156a:	93 07       	cpc	r25, r19
    156c:	69 f4       	brne	.+26     	; 0x1588 <free+0x94>
    156e:	ec 01       	movw	r28, r24
    1570:	28 81       	ld	r18, Y
    1572:	39 81       	ldd	r19, Y+1	; 0x01
    1574:	26 0f       	add	r18, r22
    1576:	37 1f       	adc	r19, r23
    1578:	2e 5f       	subi	r18, 0xFE	; 254
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	93 83       	std	Z+3, r25	; 0x03
    1586:	82 83       	std	Z+2, r24	; 0x02
    1588:	45 2b       	or	r20, r21
    158a:	29 f4       	brne	.+10     	; 0x1596 <free+0xa2>
    158c:	f0 93 49 02 	sts	0x0249, r31
    1590:	e0 93 48 02 	sts	0x0248, r30
    1594:	42 c0       	rjmp	.+132    	; 0x161a <free+0x126>
    1596:	13 96       	adiw	r26, 0x03	; 3
    1598:	fc 93       	st	X, r31
    159a:	ee 93       	st	-X, r30
    159c:	12 97       	sbiw	r26, 0x02	; 2
    159e:	ed 01       	movw	r28, r26
    15a0:	49 91       	ld	r20, Y+
    15a2:	59 91       	ld	r21, Y+
    15a4:	9e 01       	movw	r18, r28
    15a6:	24 0f       	add	r18, r20
    15a8:	35 1f       	adc	r19, r21
    15aa:	e2 17       	cp	r30, r18
    15ac:	f3 07       	cpc	r31, r19
    15ae:	71 f4       	brne	.+28     	; 0x15cc <free+0xd8>
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	84 0f       	add	r24, r20
    15b6:	95 1f       	adc	r25, r21
    15b8:	02 96       	adiw	r24, 0x02	; 2
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	13 96       	adiw	r26, 0x03	; 3
    15c6:	9c 93       	st	X, r25
    15c8:	8e 93       	st	-X, r24
    15ca:	12 97       	sbiw	r26, 0x02	; 2
    15cc:	e0 e0       	ldi	r30, 0x00	; 0
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	d8 01       	movw	r26, r16
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	8d 91       	ld	r24, X+
    15d6:	9c 91       	ld	r25, X
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <free+0xf0>
    15de:	f8 01       	movw	r30, r16
    15e0:	8c 01       	movw	r16, r24
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <free+0xdc>
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	98 01       	movw	r18, r16
    15ea:	2e 5f       	subi	r18, 0xFE	; 254
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	82 0f       	add	r24, r18
    15f0:	93 1f       	adc	r25, r19
    15f2:	20 91 46 02 	lds	r18, 0x0246
    15f6:	30 91 47 02 	lds	r19, 0x0247
    15fa:	28 17       	cp	r18, r24
    15fc:	39 07       	cpc	r19, r25
    15fe:	69 f4       	brne	.+26     	; 0x161a <free+0x126>
    1600:	30 97       	sbiw	r30, 0x00	; 0
    1602:	29 f4       	brne	.+10     	; 0x160e <free+0x11a>
    1604:	10 92 49 02 	sts	0x0249, r1
    1608:	10 92 48 02 	sts	0x0248, r1
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <free+0x11e>
    160e:	13 82       	std	Z+3, r1	; 0x03
    1610:	12 82       	std	Z+2, r1	; 0x02
    1612:	10 93 47 02 	sts	0x0247, r17
    1616:	00 93 46 02 	sts	0x0246, r16
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <memset>:
    1624:	dc 01       	movw	r26, r24
    1626:	01 c0       	rjmp	.+2      	; 0x162a <memset+0x6>
    1628:	6d 93       	st	X+, r22
    162a:	41 50       	subi	r20, 0x01	; 1
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	e0 f7       	brcc	.-8      	; 0x1628 <memset+0x4>
    1630:	08 95       	ret

00001632 <_exit>:
    1632:	f8 94       	cli

00001634 <__stop_program>:
    1634:	ff cf       	rjmp	.-2      	; 0x1634 <__stop_program>
>>>>>>> e0b240b1c14c4966c5f4aab6a35058ead1d19ffe
=======
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	00 90 5f 00 	lds	r0, 0x005F
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	00 90 5b 00 	lds	r0, 0x005B
    19d6:	0f 92       	push	r0
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	ef 93       	push	r30
    19e2:	ff 93       	push	r31
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    19ec:	80 91 1b 02 	lds	r24, 0x021B
    19f0:	88 23       	and	r24, r24
    19f2:	d1 f0       	breq	.+52     	; 0x1a28 <__vector_34+0x62>
	{
		tx1_counter--;
    19f4:	80 91 1b 02 	lds	r24, 0x021B
    19f8:	81 50       	subi	r24, 0x01	; 1
    19fa:	80 93 1b 02 	sts	0x021B, r24
		UDR1=tx1_buffer[tx1_rd_index];
    19fe:	8e ec       	ldi	r24, 0xCE	; 206
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	20 91 1c 02 	lds	r18, 0x021C
    1a06:	22 2f       	mov	r18, r18
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	25 52       	subi	r18, 0x25	; 37
    1a0c:	3e 4f       	sbci	r19, 0xFE	; 254
    1a0e:	f9 01       	movw	r30, r18
    1a10:	20 81       	ld	r18, Z
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    1a16:	80 91 1c 02 	lds	r24, 0x021C
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 1c 02 	sts	0x021C, r24
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__vector_34+0x62>
			tx1_rd_index = 0;
    1a24:	10 92 1c 02 	sts	0x021C, r1
	}
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	00 92 5b 00 	sts	0x005B, r0
    1a3e:	0f 90       	pop	r0
    1a40:	00 92 5f 00 	sts	0x005F, r0
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_32>:

ISR(USART1_RX_vect)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	00 90 5f 00 	lds	r0, 0x005F
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	00 90 5b 00 	lds	r0, 0x005B
    1a5a:	0f 92       	push	r0
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	1f 92       	push	r1
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	8c 71       	andi	r24, 0x1C	; 28
    1a84:	99 27       	eor	r25, r25
    1a86:	89 2b       	or	r24, r25
    1a88:	d1 f4       	brne	.+52     	; 0x1abe <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    1a8a:	80 91 5d 02 	lds	r24, 0x025D
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	2e ec       	ldi	r18, 0xCE	; 206
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	20 81       	ld	r18, Z
    1a9a:	83 5e       	subi	r24, 0xE3	; 227
    1a9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1aa2:	80 91 5d 02 	lds	r24, 0x025D
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	80 93 5d 02 	sts	0x025D, r24
    1aac:	80 34       	cpi	r24, 0x40	; 64
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <__vector_32+0x6a>
		rx1_wr_index = 0;
    1ab0:	10 92 5d 02 	sts	0x025D, r1

		rx1_counter++;
    1ab4:	80 91 5e 02 	lds	r24, 0x025E
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	80 93 5e 02 	sts	0x025E, r24
	}
}
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	00 92 5b 00 	sts	0x005B, r0
    1ad6:	0f 90       	pop	r0
    1ad8:	00 92 5f 00 	sts	0x005F, r0
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <__subsf3>:
    1ae2:	50 58       	subi	r21, 0x80	; 128

00001ae4 <__addsf3>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	0e d0       	rcall	.+28     	; 0x1b06 <__addsf3x>
    1aea:	70 c1       	rjmp	.+736    	; 0x1dcc <__fp_round>
    1aec:	61 d1       	rcall	.+706    	; 0x1db0 <__fp_pscA>
    1aee:	30 f0       	brcs	.+12     	; 0x1afc <__addsf3+0x18>
    1af0:	66 d1       	rcall	.+716    	; 0x1dbe <__fp_pscB>
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__addsf3+0x18>
    1af4:	31 f4       	brne	.+12     	; 0x1b02 <__addsf3+0x1e>
    1af6:	9f 3f       	cpi	r25, 0xFF	; 255
    1af8:	11 f4       	brne	.+4      	; 0x1afe <__addsf3+0x1a>
    1afa:	1e f4       	brtc	.+6      	; 0x1b02 <__addsf3+0x1e>
    1afc:	56 c1       	rjmp	.+684    	; 0x1daa <__fp_nan>
    1afe:	0e f4       	brtc	.+2      	; 0x1b02 <__addsf3+0x1e>
    1b00:	e0 95       	com	r30
    1b02:	e7 fb       	bst	r30, 7
    1b04:	4c c1       	rjmp	.+664    	; 0x1d9e <__fp_inf>

00001b06 <__addsf3x>:
    1b06:	e9 2f       	mov	r30, r25
    1b08:	72 d1       	rcall	.+740    	; 0x1dee <__fp_split3>
    1b0a:	80 f3       	brcs	.-32     	; 0x1aec <__addsf3+0x8>
    1b0c:	ba 17       	cp	r27, r26
    1b0e:	62 07       	cpc	r22, r18
    1b10:	73 07       	cpc	r23, r19
    1b12:	84 07       	cpc	r24, r20
    1b14:	95 07       	cpc	r25, r21
    1b16:	18 f0       	brcs	.+6      	; 0x1b1e <__addsf3x+0x18>
    1b18:	71 f4       	brne	.+28     	; 0x1b36 <__addsf3x+0x30>
    1b1a:	9e f5       	brtc	.+102    	; 0x1b82 <__addsf3x+0x7c>
    1b1c:	8a c1       	rjmp	.+788    	; 0x1e32 <__fp_zero>
    1b1e:	0e f4       	brtc	.+2      	; 0x1b22 <__addsf3x+0x1c>
    1b20:	e0 95       	com	r30
    1b22:	0b 2e       	mov	r0, r27
    1b24:	ba 2f       	mov	r27, r26
    1b26:	a0 2d       	mov	r26, r0
    1b28:	0b 01       	movw	r0, r22
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	90 01       	movw	r18, r0
    1b2e:	0c 01       	movw	r0, r24
    1b30:	ca 01       	movw	r24, r20
    1b32:	a0 01       	movw	r20, r0
    1b34:	11 24       	eor	r1, r1
    1b36:	ff 27       	eor	r31, r31
    1b38:	59 1b       	sub	r21, r25
    1b3a:	99 f0       	breq	.+38     	; 0x1b62 <__addsf3x+0x5c>
    1b3c:	59 3f       	cpi	r21, 0xF9	; 249
    1b3e:	50 f4       	brcc	.+20     	; 0x1b54 <__addsf3x+0x4e>
    1b40:	50 3e       	cpi	r21, 0xE0	; 224
    1b42:	68 f1       	brcs	.+90     	; 0x1b9e <__addsf3x+0x98>
    1b44:	1a 16       	cp	r1, r26
    1b46:	f0 40       	sbci	r31, 0x00	; 0
    1b48:	a2 2f       	mov	r26, r18
    1b4a:	23 2f       	mov	r18, r19
    1b4c:	34 2f       	mov	r19, r20
    1b4e:	44 27       	eor	r20, r20
    1b50:	58 5f       	subi	r21, 0xF8	; 248
    1b52:	f3 cf       	rjmp	.-26     	; 0x1b3a <__addsf3x+0x34>
    1b54:	46 95       	lsr	r20
    1b56:	37 95       	ror	r19
    1b58:	27 95       	ror	r18
    1b5a:	a7 95       	ror	r26
    1b5c:	f0 40       	sbci	r31, 0x00	; 0
    1b5e:	53 95       	inc	r21
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__addsf3x+0x4e>
    1b62:	7e f4       	brtc	.+30     	; 0x1b82 <__addsf3x+0x7c>
    1b64:	1f 16       	cp	r1, r31
    1b66:	ba 0b       	sbc	r27, r26
    1b68:	62 0b       	sbc	r22, r18
    1b6a:	73 0b       	sbc	r23, r19
    1b6c:	84 0b       	sbc	r24, r20
    1b6e:	ba f0       	brmi	.+46     	; 0x1b9e <__addsf3x+0x98>
    1b70:	91 50       	subi	r25, 0x01	; 1
    1b72:	a1 f0       	breq	.+40     	; 0x1b9c <__addsf3x+0x96>
    1b74:	ff 0f       	add	r31, r31
    1b76:	bb 1f       	adc	r27, r27
    1b78:	66 1f       	adc	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	c2 f7       	brpl	.-16     	; 0x1b70 <__addsf3x+0x6a>
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <__addsf3x+0x98>
    1b82:	ba 0f       	add	r27, r26
    1b84:	62 1f       	adc	r22, r18
    1b86:	73 1f       	adc	r23, r19
    1b88:	84 1f       	adc	r24, r20
    1b8a:	48 f4       	brcc	.+18     	; 0x1b9e <__addsf3x+0x98>
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	b7 95       	ror	r27
    1b94:	f7 95       	ror	r31
    1b96:	9e 3f       	cpi	r25, 0xFE	; 254
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <__addsf3x+0x96>
    1b9a:	b3 cf       	rjmp	.-154    	; 0x1b02 <__addsf3+0x1e>
    1b9c:	93 95       	inc	r25
    1b9e:	88 0f       	add	r24, r24
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <__addsf3x+0x9e>
    1ba2:	99 27       	eor	r25, r25
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	97 95       	ror	r25
    1ba8:	87 95       	ror	r24
    1baa:	08 95       	ret

00001bac <__cmpsf2>:
    1bac:	d4 d0       	rcall	.+424    	; 0x1d56 <__fp_cmp>
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <__cmpsf2+0x6>
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	08 95       	ret

00001bb4 <__divsf3>:
    1bb4:	0c d0       	rcall	.+24     	; 0x1bce <__divsf3x>
    1bb6:	0a c1       	rjmp	.+532    	; 0x1dcc <__fp_round>
    1bb8:	02 d1       	rcall	.+516    	; 0x1dbe <__fp_pscB>
    1bba:	40 f0       	brcs	.+16     	; 0x1bcc <__divsf3+0x18>
    1bbc:	f9 d0       	rcall	.+498    	; 0x1db0 <__fp_pscA>
    1bbe:	30 f0       	brcs	.+12     	; 0x1bcc <__divsf3+0x18>
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <__divsf3+0x16>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <__divsf3+0x18>
    1bc6:	eb c0       	rjmp	.+470    	; 0x1d9e <__fp_inf>
    1bc8:	51 11       	cpse	r21, r1
    1bca:	34 c1       	rjmp	.+616    	; 0x1e34 <__fp_szero>
    1bcc:	ee c0       	rjmp	.+476    	; 0x1daa <__fp_nan>

00001bce <__divsf3x>:
    1bce:	0f d1       	rcall	.+542    	; 0x1dee <__fp_split3>
    1bd0:	98 f3       	brcs	.-26     	; 0x1bb8 <__divsf3+0x4>

00001bd2 <__divsf3_pse>:
    1bd2:	99 23       	and	r25, r25
    1bd4:	c9 f3       	breq	.-14     	; 0x1bc8 <__divsf3+0x14>
    1bd6:	55 23       	and	r21, r21
    1bd8:	b1 f3       	breq	.-20     	; 0x1bc6 <__divsf3+0x12>
    1bda:	95 1b       	sub	r25, r21
    1bdc:	55 0b       	sbc	r21, r21
    1bde:	bb 27       	eor	r27, r27
    1be0:	aa 27       	eor	r26, r26
    1be2:	62 17       	cp	r22, r18
    1be4:	73 07       	cpc	r23, r19
    1be6:	84 07       	cpc	r24, r20
    1be8:	38 f0       	brcs	.+14     	; 0x1bf8 <__divsf3_pse+0x26>
    1bea:	9f 5f       	subi	r25, 0xFF	; 255
    1bec:	5f 4f       	sbci	r21, 0xFF	; 255
    1bee:	22 0f       	add	r18, r18
    1bf0:	33 1f       	adc	r19, r19
    1bf2:	44 1f       	adc	r20, r20
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	a9 f3       	breq	.-22     	; 0x1be2 <__divsf3_pse+0x10>
    1bf8:	33 d0       	rcall	.+102    	; 0x1c60 <__divsf3_pse+0x8e>
    1bfa:	0e 2e       	mov	r0, r30
    1bfc:	3a f0       	brmi	.+14     	; 0x1c0c <__divsf3_pse+0x3a>
    1bfe:	e0 e8       	ldi	r30, 0x80	; 128
    1c00:	30 d0       	rcall	.+96     	; 0x1c62 <__divsf3_pse+0x90>
    1c02:	91 50       	subi	r25, 0x01	; 1
    1c04:	50 40       	sbci	r21, 0x00	; 0
    1c06:	e6 95       	lsr	r30
    1c08:	00 1c       	adc	r0, r0
    1c0a:	ca f7       	brpl	.-14     	; 0x1bfe <__divsf3_pse+0x2c>
    1c0c:	29 d0       	rcall	.+82     	; 0x1c60 <__divsf3_pse+0x8e>
    1c0e:	fe 2f       	mov	r31, r30
    1c10:	27 d0       	rcall	.+78     	; 0x1c60 <__divsf3_pse+0x8e>
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	26 17       	cp	r18, r22
    1c1c:	37 07       	cpc	r19, r23
    1c1e:	48 07       	cpc	r20, r24
    1c20:	ab 07       	cpc	r26, r27
    1c22:	b0 e8       	ldi	r27, 0x80	; 128
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <__divsf3_pse+0x56>
    1c26:	bb 0b       	sbc	r27, r27
    1c28:	80 2d       	mov	r24, r0
    1c2a:	bf 01       	movw	r22, r30
    1c2c:	ff 27       	eor	r31, r31
    1c2e:	93 58       	subi	r25, 0x83	; 131
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	2a f0       	brmi	.+10     	; 0x1c3e <__divsf3_pse+0x6c>
    1c34:	9e 3f       	cpi	r25, 0xFE	; 254
    1c36:	51 05       	cpc	r21, r1
    1c38:	68 f0       	brcs	.+26     	; 0x1c54 <__divsf3_pse+0x82>
    1c3a:	b1 c0       	rjmp	.+354    	; 0x1d9e <__fp_inf>
    1c3c:	fb c0       	rjmp	.+502    	; 0x1e34 <__fp_szero>
    1c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c40:	ec f3       	brlt	.-6      	; 0x1c3c <__divsf3_pse+0x6a>
    1c42:	98 3e       	cpi	r25, 0xE8	; 232
    1c44:	dc f3       	brlt	.-10     	; 0x1c3c <__divsf3_pse+0x6a>
    1c46:	86 95       	lsr	r24
    1c48:	77 95       	ror	r23
    1c4a:	67 95       	ror	r22
    1c4c:	b7 95       	ror	r27
    1c4e:	f7 95       	ror	r31
    1c50:	9f 5f       	subi	r25, 0xFF	; 255
    1c52:	c9 f7       	brne	.-14     	; 0x1c46 <__divsf3_pse+0x74>
    1c54:	88 0f       	add	r24, r24
    1c56:	91 1d       	adc	r25, r1
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	97 f9       	bld	r25, 7
    1c5e:	08 95       	ret
    1c60:	e1 e0       	ldi	r30, 0x01	; 1
    1c62:	66 0f       	add	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	88 1f       	adc	r24, r24
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	62 17       	cp	r22, r18
    1c6c:	73 07       	cpc	r23, r19
    1c6e:	84 07       	cpc	r24, r20
    1c70:	ba 07       	cpc	r27, r26
    1c72:	20 f0       	brcs	.+8      	; 0x1c7c <__divsf3_pse+0xaa>
    1c74:	62 1b       	sub	r22, r18
    1c76:	73 0b       	sbc	r23, r19
    1c78:	84 0b       	sbc	r24, r20
    1c7a:	ba 0b       	sbc	r27, r26
    1c7c:	ee 1f       	adc	r30, r30
    1c7e:	88 f7       	brcc	.-30     	; 0x1c62 <__divsf3_pse+0x90>
    1c80:	e0 95       	com	r30
    1c82:	08 95       	ret

00001c84 <__fixunssfsi>:
    1c84:	bc d0       	rcall	.+376    	; 0x1dfe <__fp_splitA>
    1c86:	88 f0       	brcs	.+34     	; 0x1caa <__fixunssfsi+0x26>
    1c88:	9f 57       	subi	r25, 0x7F	; 127
    1c8a:	90 f0       	brcs	.+36     	; 0x1cb0 <__fixunssfsi+0x2c>
    1c8c:	b9 2f       	mov	r27, r25
    1c8e:	99 27       	eor	r25, r25
    1c90:	b7 51       	subi	r27, 0x17	; 23
    1c92:	a0 f0       	brcs	.+40     	; 0x1cbc <__fixunssfsi+0x38>
    1c94:	d1 f0       	breq	.+52     	; 0x1cca <__fixunssfsi+0x46>
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	1a f0       	brmi	.+6      	; 0x1ca6 <__fixunssfsi+0x22>
    1ca0:	ba 95       	dec	r27
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__fixunssfsi+0x12>
    1ca4:	12 c0       	rjmp	.+36     	; 0x1cca <__fixunssfsi+0x46>
    1ca6:	b1 30       	cpi	r27, 0x01	; 1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <__fixunssfsi+0x46>
    1caa:	c3 d0       	rcall	.+390    	; 0x1e32 <__fp_zero>
    1cac:	b1 e0       	ldi	r27, 0x01	; 1
    1cae:	08 95       	ret
    1cb0:	c0 c0       	rjmp	.+384    	; 0x1e32 <__fp_zero>
    1cb2:	67 2f       	mov	r22, r23
    1cb4:	78 2f       	mov	r23, r24
    1cb6:	88 27       	eor	r24, r24
    1cb8:	b8 5f       	subi	r27, 0xF8	; 248
    1cba:	39 f0       	breq	.+14     	; 0x1cca <__fixunssfsi+0x46>
    1cbc:	b9 3f       	cpi	r27, 0xF9	; 249
    1cbe:	cc f3       	brlt	.-14     	; 0x1cb2 <__fixunssfsi+0x2e>
    1cc0:	86 95       	lsr	r24
    1cc2:	77 95       	ror	r23
    1cc4:	67 95       	ror	r22
    1cc6:	b3 95       	inc	r27
    1cc8:	d9 f7       	brne	.-10     	; 0x1cc0 <__fixunssfsi+0x3c>
    1cca:	3e f4       	brtc	.+14     	; 0x1cda <__fixunssfsi+0x56>
    1ccc:	90 95       	com	r25
    1cce:	80 95       	com	r24
    1cd0:	70 95       	com	r23
    1cd2:	61 95       	neg	r22
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	08 95       	ret

00001cdc <__floatunsisf>:
    1cdc:	e8 94       	clt
    1cde:	09 c0       	rjmp	.+18     	; 0x1cf2 <__floatsisf+0x12>

00001ce0 <__floatsisf>:
    1ce0:	97 fb       	bst	r25, 7
    1ce2:	3e f4       	brtc	.+14     	; 0x1cf2 <__floatsisf+0x12>
    1ce4:	90 95       	com	r25
    1ce6:	80 95       	com	r24
    1ce8:	70 95       	com	r23
    1cea:	61 95       	neg	r22
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	99 23       	and	r25, r25
    1cf4:	a9 f0       	breq	.+42     	; 0x1d20 <__floatsisf+0x40>
    1cf6:	f9 2f       	mov	r31, r25
    1cf8:	96 e9       	ldi	r25, 0x96	; 150
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	93 95       	inc	r25
    1cfe:	f6 95       	lsr	r31
    1d00:	87 95       	ror	r24
    1d02:	77 95       	ror	r23
    1d04:	67 95       	ror	r22
    1d06:	b7 95       	ror	r27
    1d08:	f1 11       	cpse	r31, r1
    1d0a:	f8 cf       	rjmp	.-16     	; 0x1cfc <__floatsisf+0x1c>
    1d0c:	fa f4       	brpl	.+62     	; 0x1d4c <__floatsisf+0x6c>
    1d0e:	bb 0f       	add	r27, r27
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <__floatsisf+0x36>
    1d12:	60 ff       	sbrs	r22, 0
    1d14:	1b c0       	rjmp	.+54     	; 0x1d4c <__floatsisf+0x6c>
    1d16:	6f 5f       	subi	r22, 0xFF	; 255
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	16 c0       	rjmp	.+44     	; 0x1d4c <__floatsisf+0x6c>
    1d20:	88 23       	and	r24, r24
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <__floatsisf+0x48>
    1d24:	96 e9       	ldi	r25, 0x96	; 150
    1d26:	11 c0       	rjmp	.+34     	; 0x1d4a <__floatsisf+0x6a>
    1d28:	77 23       	and	r23, r23
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <__floatsisf+0x54>
    1d2c:	9e e8       	ldi	r25, 0x8E	; 142
    1d2e:	87 2f       	mov	r24, r23
    1d30:	76 2f       	mov	r23, r22
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <__floatsisf+0x5e>
    1d34:	66 23       	and	r22, r22
    1d36:	71 f0       	breq	.+28     	; 0x1d54 <__floatsisf+0x74>
    1d38:	96 e8       	ldi	r25, 0x86	; 134
    1d3a:	86 2f       	mov	r24, r22
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	2a f0       	brmi	.+10     	; 0x1d4c <__floatsisf+0x6c>
    1d42:	9a 95       	dec	r25
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	da f7       	brpl	.-10     	; 0x1d42 <__floatsisf+0x62>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	97 f9       	bld	r25, 7
    1d54:	08 95       	ret

00001d56 <__fp_cmp>:
    1d56:	99 0f       	add	r25, r25
    1d58:	00 08       	sbc	r0, r0
    1d5a:	55 0f       	add	r21, r21
    1d5c:	aa 0b       	sbc	r26, r26
    1d5e:	e0 e8       	ldi	r30, 0x80	; 128
    1d60:	fe ef       	ldi	r31, 0xFE	; 254
    1d62:	16 16       	cp	r1, r22
    1d64:	17 06       	cpc	r1, r23
    1d66:	e8 07       	cpc	r30, r24
    1d68:	f9 07       	cpc	r31, r25
    1d6a:	c0 f0       	brcs	.+48     	; 0x1d9c <__fp_cmp+0x46>
    1d6c:	12 16       	cp	r1, r18
    1d6e:	13 06       	cpc	r1, r19
    1d70:	e4 07       	cpc	r30, r20
    1d72:	f5 07       	cpc	r31, r21
    1d74:	98 f0       	brcs	.+38     	; 0x1d9c <__fp_cmp+0x46>
    1d76:	62 1b       	sub	r22, r18
    1d78:	73 0b       	sbc	r23, r19
    1d7a:	84 0b       	sbc	r24, r20
    1d7c:	95 0b       	sbc	r25, r21
    1d7e:	39 f4       	brne	.+14     	; 0x1d8e <__fp_cmp+0x38>
    1d80:	0a 26       	eor	r0, r26
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <__fp_cmp+0x46>
    1d84:	23 2b       	or	r18, r19
    1d86:	24 2b       	or	r18, r20
    1d88:	25 2b       	or	r18, r21
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <__fp_cmp+0x3e>
    1d8c:	08 95       	ret
    1d8e:	0a 26       	eor	r0, r26
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__fp_cmp+0x3e>
    1d92:	a1 40       	sbci	r26, 0x01	; 1
    1d94:	a6 95       	lsr	r26
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	81 1d       	adc	r24, r1
    1d9a:	81 1d       	adc	r24, r1
    1d9c:	08 95       	ret

00001d9e <__fp_inf>:
    1d9e:	97 f9       	bld	r25, 7
    1da0:	9f 67       	ori	r25, 0x7F	; 127
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	08 95       	ret

00001daa <__fp_nan>:
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	80 ec       	ldi	r24, 0xC0	; 192
    1dae:	08 95       	ret

00001db0 <__fp_pscA>:
    1db0:	00 24       	eor	r0, r0
    1db2:	0a 94       	dec	r0
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	18 06       	cpc	r1, r24
    1dba:	09 06       	cpc	r0, r25
    1dbc:	08 95       	ret

00001dbe <__fp_pscB>:
    1dbe:	00 24       	eor	r0, r0
    1dc0:	0a 94       	dec	r0
    1dc2:	12 16       	cp	r1, r18
    1dc4:	13 06       	cpc	r1, r19
    1dc6:	14 06       	cpc	r1, r20
    1dc8:	05 06       	cpc	r0, r21
    1dca:	08 95       	ret

00001dcc <__fp_round>:
    1dcc:	09 2e       	mov	r0, r25
    1dce:	03 94       	inc	r0
    1dd0:	00 0c       	add	r0, r0
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <__fp_round+0xc>
    1dd4:	88 23       	and	r24, r24
    1dd6:	52 f0       	brmi	.+20     	; 0x1dec <__fp_round+0x20>
    1dd8:	bb 0f       	add	r27, r27
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <__fp_round+0x20>
    1ddc:	bf 2b       	or	r27, r31
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__fp_round+0x18>
    1de0:	60 ff       	sbrs	r22, 0
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <__fp_round+0x20>
    1de4:	6f 5f       	subi	r22, 0xFF	; 255
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	08 95       	ret

00001dee <__fp_split3>:
    1dee:	57 fd       	sbrc	r21, 7
    1df0:	90 58       	subi	r25, 0x80	; 128
    1df2:	44 0f       	add	r20, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	59 f0       	breq	.+22     	; 0x1e0e <__fp_splitA+0x10>
    1df8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfa:	71 f0       	breq	.+28     	; 0x1e18 <__fp_splitA+0x1a>
    1dfc:	47 95       	ror	r20

00001dfe <__fp_splitA>:
    1dfe:	88 0f       	add	r24, r24
    1e00:	97 fb       	bst	r25, 7
    1e02:	99 1f       	adc	r25, r25
    1e04:	61 f0       	breq	.+24     	; 0x1e1e <__fp_splitA+0x20>
    1e06:	9f 3f       	cpi	r25, 0xFF	; 255
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <__fp_splitA+0x2a>
    1e0a:	87 95       	ror	r24
    1e0c:	08 95       	ret
    1e0e:	12 16       	cp	r1, r18
    1e10:	13 06       	cpc	r1, r19
    1e12:	14 06       	cpc	r1, r20
    1e14:	55 1f       	adc	r21, r21
    1e16:	f2 cf       	rjmp	.-28     	; 0x1dfc <__fp_split3+0xe>
    1e18:	46 95       	lsr	r20
    1e1a:	f1 df       	rcall	.-30     	; 0x1dfe <__fp_splitA>
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <__fp_splitA+0x30>
    1e1e:	16 16       	cp	r1, r22
    1e20:	17 06       	cpc	r1, r23
    1e22:	18 06       	cpc	r1, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	f1 cf       	rjmp	.-30     	; 0x1e0a <__fp_splitA+0xc>
    1e28:	86 95       	lsr	r24
    1e2a:	71 05       	cpc	r23, r1
    1e2c:	61 05       	cpc	r22, r1
    1e2e:	08 94       	sec
    1e30:	08 95       	ret

00001e32 <__fp_zero>:
    1e32:	e8 94       	clt

00001e34 <__fp_szero>:
    1e34:	bb 27       	eor	r27, r27
    1e36:	66 27       	eor	r22, r22
    1e38:	77 27       	eor	r23, r23
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	97 f9       	bld	r25, 7
    1e3e:	08 95       	ret

00001e40 <__gesf2>:
    1e40:	8a df       	rcall	.-236    	; 0x1d56 <__fp_cmp>
    1e42:	08 f4       	brcc	.+2      	; 0x1e46 <__gesf2+0x6>
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	08 95       	ret

00001e48 <__mulsf3>:
    1e48:	0b d0       	rcall	.+22     	; 0x1e60 <__mulsf3x>
    1e4a:	c0 cf       	rjmp	.-128    	; 0x1dcc <__fp_round>
    1e4c:	b1 df       	rcall	.-158    	; 0x1db0 <__fp_pscA>
    1e4e:	28 f0       	brcs	.+10     	; 0x1e5a <__mulsf3+0x12>
    1e50:	b6 df       	rcall	.-148    	; 0x1dbe <__fp_pscB>
    1e52:	18 f0       	brcs	.+6      	; 0x1e5a <__mulsf3+0x12>
    1e54:	95 23       	and	r25, r21
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <__mulsf3+0x12>
    1e58:	a2 cf       	rjmp	.-188    	; 0x1d9e <__fp_inf>
    1e5a:	a7 cf       	rjmp	.-178    	; 0x1daa <__fp_nan>
    1e5c:	11 24       	eor	r1, r1
    1e5e:	ea cf       	rjmp	.-44     	; 0x1e34 <__fp_szero>

00001e60 <__mulsf3x>:
    1e60:	c6 df       	rcall	.-116    	; 0x1dee <__fp_split3>
    1e62:	a0 f3       	brcs	.-24     	; 0x1e4c <__mulsf3+0x4>

00001e64 <__mulsf3_pse>:
    1e64:	95 9f       	mul	r25, r21
    1e66:	d1 f3       	breq	.-12     	; 0x1e5c <__mulsf3+0x14>
    1e68:	95 0f       	add	r25, r21
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	55 1f       	adc	r21, r21
    1e6e:	62 9f       	mul	r22, r18
    1e70:	f0 01       	movw	r30, r0
    1e72:	72 9f       	mul	r23, r18
    1e74:	bb 27       	eor	r27, r27
    1e76:	f0 0d       	add	r31, r0
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	63 9f       	mul	r22, r19
    1e7c:	aa 27       	eor	r26, r26
    1e7e:	f0 0d       	add	r31, r0
    1e80:	b1 1d       	adc	r27, r1
    1e82:	aa 1f       	adc	r26, r26
    1e84:	64 9f       	mul	r22, r20
    1e86:	66 27       	eor	r22, r22
    1e88:	b0 0d       	add	r27, r0
    1e8a:	a1 1d       	adc	r26, r1
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	82 9f       	mul	r24, r18
    1e90:	22 27       	eor	r18, r18
    1e92:	b0 0d       	add	r27, r0
    1e94:	a1 1d       	adc	r26, r1
    1e96:	62 1f       	adc	r22, r18
    1e98:	73 9f       	mul	r23, r19
    1e9a:	b0 0d       	add	r27, r0
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	62 1f       	adc	r22, r18
    1ea0:	83 9f       	mul	r24, r19
    1ea2:	a0 0d       	add	r26, r0
    1ea4:	61 1d       	adc	r22, r1
    1ea6:	22 1f       	adc	r18, r18
    1ea8:	74 9f       	mul	r23, r20
    1eaa:	33 27       	eor	r19, r19
    1eac:	a0 0d       	add	r26, r0
    1eae:	61 1d       	adc	r22, r1
    1eb0:	23 1f       	adc	r18, r19
    1eb2:	84 9f       	mul	r24, r20
    1eb4:	60 0d       	add	r22, r0
    1eb6:	21 1d       	adc	r18, r1
    1eb8:	82 2f       	mov	r24, r18
    1eba:	76 2f       	mov	r23, r22
    1ebc:	6a 2f       	mov	r22, r26
    1ebe:	11 24       	eor	r1, r1
    1ec0:	9f 57       	subi	r25, 0x7F	; 127
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	8a f0       	brmi	.+34     	; 0x1ee8 <__mulsf3_pse+0x84>
    1ec6:	e1 f0       	breq	.+56     	; 0x1f00 <__mulsf3_pse+0x9c>
    1ec8:	88 23       	and	r24, r24
    1eca:	4a f0       	brmi	.+18     	; 0x1ede <__mulsf3_pse+0x7a>
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	bb 1f       	adc	r27, r27
    1ed2:	66 1f       	adc	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	88 1f       	adc	r24, r24
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	a9 f7       	brne	.-22     	; 0x1ec8 <__mulsf3_pse+0x64>
    1ede:	9e 3f       	cpi	r25, 0xFE	; 254
    1ee0:	51 05       	cpc	r21, r1
    1ee2:	70 f0       	brcs	.+28     	; 0x1f00 <__mulsf3_pse+0x9c>
    1ee4:	5c cf       	rjmp	.-328    	; 0x1d9e <__fp_inf>
    1ee6:	a6 cf       	rjmp	.-180    	; 0x1e34 <__fp_szero>
    1ee8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eea:	ec f3       	brlt	.-6      	; 0x1ee6 <__mulsf3_pse+0x82>
    1eec:	98 3e       	cpi	r25, 0xE8	; 232
    1eee:	dc f3       	brlt	.-10     	; 0x1ee6 <__mulsf3_pse+0x82>
    1ef0:	86 95       	lsr	r24
    1ef2:	77 95       	ror	r23
    1ef4:	67 95       	ror	r22
    1ef6:	b7 95       	ror	r27
    1ef8:	f7 95       	ror	r31
    1efa:	e7 95       	ror	r30
    1efc:	9f 5f       	subi	r25, 0xFF	; 255
    1efe:	c1 f7       	brne	.-16     	; 0x1ef0 <__mulsf3_pse+0x8c>
    1f00:	fe 2b       	or	r31, r30
    1f02:	88 0f       	add	r24, r24
    1f04:	91 1d       	adc	r25, r1
    1f06:	96 95       	lsr	r25
    1f08:	87 95       	ror	r24
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	08 95       	ret

00001f0e <calloc>:
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	86 9f       	mul	r24, r22
    1f18:	80 01       	movw	r16, r0
    1f1a:	87 9f       	mul	r24, r23
    1f1c:	10 0d       	add	r17, r0
    1f1e:	96 9f       	mul	r25, r22
    1f20:	10 0d       	add	r17, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	c8 01       	movw	r24, r16
    1f26:	0d d0       	rcall	.+26     	; 0x1f42 <malloc>
    1f28:	ec 01       	movw	r28, r24
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <calloc+0x28>
    1f2e:	a8 01       	movw	r20, r16
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	33 d1       	rcall	.+614    	; 0x219c <memset>
    1f36:	ce 01       	movw	r24, r28
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <malloc>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <malloc+0xe>
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	e0 91 61 02 	lds	r30, 0x0261
    1f54:	f0 91 62 02 	lds	r31, 0x0262
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	c0 e0       	ldi	r28, 0x00	; 0
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
    1f60:	30 97       	sbiw	r30, 0x00	; 0
    1f62:	11 f1       	breq	.+68     	; 0x1fa8 <malloc+0x66>
    1f64:	40 81       	ld	r20, Z
    1f66:	51 81       	ldd	r21, Z+1	; 0x01
    1f68:	48 17       	cp	r20, r24
    1f6a:	59 07       	cpc	r21, r25
    1f6c:	c0 f0       	brcs	.+48     	; 0x1f9e <malloc+0x5c>
    1f6e:	48 17       	cp	r20, r24
    1f70:	59 07       	cpc	r21, r25
    1f72:	61 f4       	brne	.+24     	; 0x1f8c <malloc+0x4a>
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 97       	sbiw	r28, 0x00	; 0
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <malloc+0x40>
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	2b c0       	rjmp	.+86     	; 0x1fd8 <malloc+0x96>
    1f82:	90 93 62 02 	sts	0x0262, r25
    1f86:	80 93 61 02 	sts	0x0261, r24
    1f8a:	26 c0       	rjmp	.+76     	; 0x1fd8 <malloc+0x96>
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <malloc+0x56>
    1f92:	42 17       	cp	r20, r18
    1f94:	53 07       	cpc	r21, r19
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <malloc+0x5c>
    1f98:	9a 01       	movw	r18, r20
    1f9a:	be 01       	movw	r22, r28
    1f9c:	df 01       	movw	r26, r30
    1f9e:	ef 01       	movw	r28, r30
    1fa0:	02 80       	ldd	r0, Z+2	; 0x02
    1fa2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	dc cf       	rjmp	.-72     	; 0x1f60 <malloc+0x1e>
    1fa8:	21 15       	cp	r18, r1
    1faa:	31 05       	cpc	r19, r1
    1fac:	09 f1       	breq	.+66     	; 0x1ff0 <malloc+0xae>
    1fae:	28 1b       	sub	r18, r24
    1fb0:	39 0b       	sbc	r19, r25
    1fb2:	24 30       	cpi	r18, 0x04	; 4
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	90 f4       	brcc	.+36     	; 0x1fdc <malloc+0x9a>
    1fb8:	12 96       	adiw	r26, 0x02	; 2
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	13 97       	sbiw	r26, 0x03	; 3
    1fc0:	61 15       	cp	r22, r1
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	21 f0       	breq	.+8      	; 0x1fce <malloc+0x8c>
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	93 83       	std	Z+3, r25	; 0x03
    1fca:	82 83       	std	Z+2, r24	; 0x02
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <malloc+0x94>
    1fce:	90 93 62 02 	sts	0x0262, r25
    1fd2:	80 93 61 02 	sts	0x0261, r24
    1fd6:	fd 01       	movw	r30, r26
    1fd8:	32 96       	adiw	r30, 0x02	; 2
    1fda:	44 c0       	rjmp	.+136    	; 0x2064 <malloc+0x122>
    1fdc:	fd 01       	movw	r30, r26
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	81 93       	st	Z+, r24
    1fe4:	91 93       	st	Z+, r25
    1fe6:	22 50       	subi	r18, 0x02	; 2
    1fe8:	31 09       	sbc	r19, r1
    1fea:	2d 93       	st	X+, r18
    1fec:	3c 93       	st	X, r19
    1fee:	3a c0       	rjmp	.+116    	; 0x2064 <malloc+0x122>
    1ff0:	20 91 5f 02 	lds	r18, 0x025F
    1ff4:	30 91 60 02 	lds	r19, 0x0260
    1ff8:	23 2b       	or	r18, r19
    1ffa:	41 f4       	brne	.+16     	; 0x200c <malloc+0xca>
    1ffc:	20 91 02 01 	lds	r18, 0x0102
    2000:	30 91 03 01 	lds	r19, 0x0103
    2004:	30 93 60 02 	sts	0x0260, r19
    2008:	20 93 5f 02 	sts	0x025F, r18
    200c:	20 91 00 01 	lds	r18, 0x0100
    2010:	30 91 01 01 	lds	r19, 0x0101
    2014:	21 15       	cp	r18, r1
    2016:	31 05       	cpc	r19, r1
    2018:	41 f4       	brne	.+16     	; 0x202a <malloc+0xe8>
    201a:	2d b7       	in	r18, 0x3d	; 61
    201c:	3e b7       	in	r19, 0x3e	; 62
    201e:	40 91 04 01 	lds	r20, 0x0104
    2022:	50 91 05 01 	lds	r21, 0x0105
    2026:	24 1b       	sub	r18, r20
    2028:	35 0b       	sbc	r19, r21
    202a:	e0 91 5f 02 	lds	r30, 0x025F
    202e:	f0 91 60 02 	lds	r31, 0x0260
    2032:	e2 17       	cp	r30, r18
    2034:	f3 07       	cpc	r31, r19
    2036:	a0 f4       	brcc	.+40     	; 0x2060 <malloc+0x11e>
    2038:	2e 1b       	sub	r18, r30
    203a:	3f 0b       	sbc	r19, r31
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	78 f0       	brcs	.+30     	; 0x2060 <malloc+0x11e>
    2042:	ac 01       	movw	r20, r24
    2044:	4e 5f       	subi	r20, 0xFE	; 254
    2046:	5f 4f       	sbci	r21, 0xFF	; 255
    2048:	24 17       	cp	r18, r20
    204a:	35 07       	cpc	r19, r21
    204c:	48 f0       	brcs	.+18     	; 0x2060 <malloc+0x11e>
    204e:	4e 0f       	add	r20, r30
    2050:	5f 1f       	adc	r21, r31
    2052:	50 93 60 02 	sts	0x0260, r21
    2056:	40 93 5f 02 	sts	0x025F, r20
    205a:	81 93       	st	Z+, r24
    205c:	91 93       	st	Z+, r25
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <malloc+0x122>
    2060:	e0 e0       	ldi	r30, 0x00	; 0
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	cf 01       	movw	r24, r30
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <free>:
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	09 f4       	brne	.+2      	; 0x207a <free+0xe>
    2078:	8c c0       	rjmp	.+280    	; 0x2192 <free+0x126>
    207a:	fc 01       	movw	r30, r24
    207c:	32 97       	sbiw	r30, 0x02	; 2
    207e:	13 82       	std	Z+3, r1	; 0x03
    2080:	12 82       	std	Z+2, r1	; 0x02
    2082:	00 91 61 02 	lds	r16, 0x0261
    2086:	10 91 62 02 	lds	r17, 0x0262
    208a:	01 15       	cp	r16, r1
    208c:	11 05       	cpc	r17, r1
    208e:	81 f4       	brne	.+32     	; 0x20b0 <free+0x44>
    2090:	20 81       	ld	r18, Z
    2092:	31 81       	ldd	r19, Z+1	; 0x01
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	20 91 5f 02 	lds	r18, 0x025F
    209c:	30 91 60 02 	lds	r19, 0x0260
    20a0:	28 17       	cp	r18, r24
    20a2:	39 07       	cpc	r19, r25
    20a4:	79 f5       	brne	.+94     	; 0x2104 <free+0x98>
    20a6:	f0 93 60 02 	sts	0x0260, r31
    20aa:	e0 93 5f 02 	sts	0x025F, r30
    20ae:	71 c0       	rjmp	.+226    	; 0x2192 <free+0x126>
    20b0:	d8 01       	movw	r26, r16
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	ae 17       	cp	r26, r30
    20b8:	bf 07       	cpc	r27, r31
    20ba:	50 f4       	brcc	.+20     	; 0x20d0 <free+0x64>
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	2d 91       	ld	r18, X+
    20c0:	3c 91       	ld	r19, X
    20c2:	13 97       	sbiw	r26, 0x03	; 3
    20c4:	ad 01       	movw	r20, r26
    20c6:	21 15       	cp	r18, r1
    20c8:	31 05       	cpc	r19, r1
    20ca:	09 f1       	breq	.+66     	; 0x210e <free+0xa2>
    20cc:	d9 01       	movw	r26, r18
    20ce:	f3 cf       	rjmp	.-26     	; 0x20b6 <free+0x4a>
    20d0:	9d 01       	movw	r18, r26
    20d2:	da 01       	movw	r26, r20
    20d4:	33 83       	std	Z+3, r19	; 0x03
    20d6:	22 83       	std	Z+2, r18	; 0x02
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	86 0f       	add	r24, r22
    20de:	97 1f       	adc	r25, r23
    20e0:	82 17       	cp	r24, r18
    20e2:	93 07       	cpc	r25, r19
    20e4:	69 f4       	brne	.+26     	; 0x2100 <free+0x94>
    20e6:	ec 01       	movw	r28, r24
    20e8:	28 81       	ld	r18, Y
    20ea:	39 81       	ldd	r19, Y+1	; 0x01
    20ec:	26 0f       	add	r18, r22
    20ee:	37 1f       	adc	r19, r23
    20f0:	2e 5f       	subi	r18, 0xFE	; 254
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	31 83       	std	Z+1, r19	; 0x01
    20f6:	20 83       	st	Z, r18
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	93 83       	std	Z+3, r25	; 0x03
    20fe:	82 83       	std	Z+2, r24	; 0x02
    2100:	45 2b       	or	r20, r21
    2102:	29 f4       	brne	.+10     	; 0x210e <free+0xa2>
    2104:	f0 93 62 02 	sts	0x0262, r31
    2108:	e0 93 61 02 	sts	0x0261, r30
    210c:	42 c0       	rjmp	.+132    	; 0x2192 <free+0x126>
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	fc 93       	st	X, r31
    2112:	ee 93       	st	-X, r30
    2114:	12 97       	sbiw	r26, 0x02	; 2
    2116:	ed 01       	movw	r28, r26
    2118:	49 91       	ld	r20, Y+
    211a:	59 91       	ld	r21, Y+
    211c:	9e 01       	movw	r18, r28
    211e:	24 0f       	add	r18, r20
    2120:	35 1f       	adc	r19, r21
    2122:	e2 17       	cp	r30, r18
    2124:	f3 07       	cpc	r31, r19
    2126:	71 f4       	brne	.+28     	; 0x2144 <free+0xd8>
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	84 0f       	add	r24, r20
    212e:	95 1f       	adc	r25, r21
    2130:	02 96       	adiw	r24, 0x02	; 2
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	13 96       	adiw	r26, 0x03	; 3
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
    2142:	12 97       	sbiw	r26, 0x02	; 2
    2144:	e0 e0       	ldi	r30, 0x00	; 0
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	d8 01       	movw	r26, r16
    214a:	12 96       	adiw	r26, 0x02	; 2
    214c:	8d 91       	ld	r24, X+
    214e:	9c 91       	ld	r25, X
    2150:	13 97       	sbiw	r26, 0x03	; 3
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	19 f0       	breq	.+6      	; 0x215c <free+0xf0>
    2156:	f8 01       	movw	r30, r16
    2158:	8c 01       	movw	r16, r24
    215a:	f6 cf       	rjmp	.-20     	; 0x2148 <free+0xdc>
    215c:	8d 91       	ld	r24, X+
    215e:	9c 91       	ld	r25, X
    2160:	98 01       	movw	r18, r16
    2162:	2e 5f       	subi	r18, 0xFE	; 254
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	82 0f       	add	r24, r18
    2168:	93 1f       	adc	r25, r19
    216a:	20 91 5f 02 	lds	r18, 0x025F
    216e:	30 91 60 02 	lds	r19, 0x0260
    2172:	28 17       	cp	r18, r24
    2174:	39 07       	cpc	r19, r25
    2176:	69 f4       	brne	.+26     	; 0x2192 <free+0x126>
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	29 f4       	brne	.+10     	; 0x2186 <free+0x11a>
    217c:	10 92 62 02 	sts	0x0262, r1
    2180:	10 92 61 02 	sts	0x0261, r1
    2184:	02 c0       	rjmp	.+4      	; 0x218a <free+0x11e>
    2186:	13 82       	std	Z+3, r1	; 0x03
    2188:	12 82       	std	Z+2, r1	; 0x02
    218a:	10 93 60 02 	sts	0x0260, r17
    218e:	00 93 5f 02 	sts	0x025F, r16
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <memset>:
    219c:	dc 01       	movw	r26, r24
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <memset+0x6>
    21a0:	6d 93       	st	X+, r22
    21a2:	41 50       	subi	r20, 0x01	; 1
    21a4:	50 40       	sbci	r21, 0x00	; 0
    21a6:	e0 f7       	brcc	.-8      	; 0x21a0 <memset+0x4>
    21a8:	08 95       	ret

000021aa <_exit>:
    21aa:	f8 94       	cli

000021ac <__stop_program>:
    21ac:	ff cf       	rjmp	.-2      	; 0x21ac <__stop_program>
>>>>>>> 07363ff7400dbe0af1895fa548283af7a30f1eb3
