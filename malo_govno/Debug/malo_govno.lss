
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00002e24  00002eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  0080016a  0080016a  00002f22  2**0
                  ALLOC
  3 .debug_aranges 00000348  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000803  00000000  00000000  0000326a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000204f  00000000  00000000  00003a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a04  00000000  00000000  00005abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002357  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000570  00000000  00000000  00008818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009df  00000000  00000000  00008d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000300  00000000  00000000  00009767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(10);
	servo_set_right_grabber_position(70);
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
		return 1;
	}
	return 0;
}
char green_detection_front_left(uint32_t start_time)
{
       6:	00 00       	nop
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
		return 1;
	}
	return 0;
}
char purple_detection_front_left(uint32_t start_time)
{
       a:	00 00       	nop
uint32_t system_get_system_time(void)
{
	return sys_time;
}
uint8_t system_get_match_started(void)
{
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c5       	rjmp	.+2908   	; 0xba6 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 46 13 	jmp	0x268c	; 0x268c <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e2       	ldi	r30, 0x24	; 36
      a8:	fe e2       	ldi	r31, 0x2E	; 46
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 36       	cpi	r26, 0x6A	; 106
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e6       	ldi	r26, 0x6A	; 106
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 3b       	cpi	r26, 0xB2	; 178
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	


	system_init();
      e6:	0e 94 2f 11 	call	0x225e	; 0x225e <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	while(1)
	{
		if(gpio_read_pin(SIDE_PIN))
     1ce:	89 e2       	ldi	r24, 0x29	; 41
     1d0:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
     1d4:	88 23       	and	r24, r24
     1d6:	19 f0       	breq	.+6      	; 0x1de <main+0x10c>
		{
			purpleside();
     1d8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <purpleside>
     1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <main+0xfc>
		}
		else
		{
			greenside();
     1de:	0e 94 56 0b 	call	0x16ac	; 0x16ac <greenside>
     1e2:	f5 cf       	rjmp	.-22     	; 0x1ce <main+0xfc>

000001e4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <servo_init+0xa>
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1f6:	ad e2       	ldi	r26, 0x2D	; 45
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	ed e2       	ldi	r30, 0x2D	; 45
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	88 63       	ori	r24, 0x38	; 56
     202:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     204:	a4 e2       	ldi	r26, 0x24	; 36
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e4 e2       	ldi	r30, 0x24	; 36
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 68       	ori	r24, 0x80	; 128
     210:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     212:	e4 e9       	ldi	r30, 0x94	; 148
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	11 82       	std	Z+1, r1	; 0x01
     218:	10 82       	st	Z, r1
	TCNT0 = 0;
     21a:	e6 e4       	ldi	r30, 0x46	; 70
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1

	OCR3A = 0;
     220:	e8 e9       	ldi	r30, 0x98	; 152
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1
	OCR3B = 0;
     228:	ea e9       	ldi	r30, 0x9A	; 154
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	11 82       	std	Z+1, r1	; 0x01
     22e:	10 82       	st	Z, r1
	OCR3C = 0;
     230:	ec e9       	ldi	r30, 0x9C	; 156
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	11 82       	std	Z+1, r1	; 0x01
     236:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     238:	e0 e9       	ldi	r30, 0x90	; 144
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	8e eb       	ldi	r24, 0xBE	; 190
     23e:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     240:	e1 e9       	ldi	r30, 0x91	; 145
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	8a e1       	ldi	r24, 0x1A	; 26
     246:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     248:	e4 e4       	ldi	r30, 0x44	; 68
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	8b e6       	ldi	r24, 0x6B	; 107
     24e:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     250:	06 e9       	ldi	r16, 0x96	; 150
     252:	10 e0       	ldi	r17, 0x00	; 0
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	cc 01       	movw	r24, r24
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	bc 01       	movw	r22, r24
     260:	cd 01       	movw	r24, r26
     262:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__floatunsisf>
     266:	dc 01       	movw	r26, r24
     268:	cb 01       	movw	r24, r22
     26a:	bc 01       	movw	r22, r24
     26c:	cd 01       	movw	r24, r26
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	51 e4       	ldi	r21, 0x41	; 65
     276:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	9c 01       	movw	r18, r24
     280:	ad 01       	movw	r20, r26
     282:	60 e8       	ldi	r22, 0x80	; 128
     284:	76 e9       	ldi	r23, 0x96	; 150
     286:	88 e1       	ldi	r24, 0x18	; 24
     288:	9b e4       	ldi	r25, 0x4B	; 75
     28a:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	bc 01       	movw	r22, r24
     294:	cd 01       	movw	r24, r26
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	bc 01       	movw	r22, r24
     2a8:	cd 01       	movw	r24, r26
     2aa:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	f8 01       	movw	r30, r16
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
}
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	cf 91       	pop	r28
     2be:	df 91       	pop	r29
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <servo_set_duty_cycle_umbrella+0xe>
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <servo_set_duty_cycle_umbrella+0x10>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2de:	e6 e9       	ldi	r30, 0x96	; 150
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	91 81       	ldd	r25, Z+1	; 0x01
     2e6:	cc 01       	movw	r24, r24
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	bc 01       	movw	r22, r24
     2ee:	cd 01       	movw	r24, r26
     2f0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__floatunsisf>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	bc 01       	movw	r22, r24
     2fa:	cd 01       	movw	r24, r26
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4f e7       	ldi	r20, 0x7F	; 127
     302:	53 e4       	ldi	r21, 0x43	; 67
     304:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	7c 01       	movw	r14, r24
     30e:	8d 01       	movw	r16, r26
     310:	8b 81       	ldd	r24, Y+3	; 0x03
     312:	9c 81       	ldd	r25, Y+4	; 0x04
     314:	aa 27       	eor	r26, r26
     316:	97 fd       	sbrc	r25, 7
     318:	a0 95       	com	r26
     31a:	ba 2f       	mov	r27, r26
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c8 01       	movw	r24, r16
     32a:	b7 01       	movw	r22, r14
     32c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     330:	dc 01       	movw	r26, r24
     332:	cb 01       	movw	r24, r22
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	5f e3       	ldi	r21, 0x3F	; 63
     340:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     358:	e9 e9       	ldi	r30, 0x99	; 153
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	89 2f       	mov	r24, r25
     362:	99 27       	eor	r25, r25
     364:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     366:	e8 e9       	ldi	r30, 0x98	; 152
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	80 83       	st	Z, r24
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	08 95       	ret

00000384 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	00 d0       	rcall	.+0      	; 0x392 <servo_set_duty_cycle_door+0xe>
     392:	00 d0       	rcall	.+0      	; 0x394 <servo_set_duty_cycle_door+0x10>
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     39c:	e6 e9       	ldi	r30, 0x96	; 150
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	cc 01       	movw	r24, r24
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__floatunsisf>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	4f e7       	ldi	r20, 0x7F	; 127
     3c0:	53 e4       	ldi	r21, 0x43	; 67
     3c2:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	8d 01       	movw	r16, r26
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	9c 81       	ldd	r25, Y+4	; 0x04
     3d2:	aa 27       	eor	r26, r26
     3d4:	97 fd       	sbrc	r25, 7
     3d6:	a0 95       	com	r26
     3d8:	ba 2f       	mov	r27, r26
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	c8 01       	movw	r24, r16
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	bc 01       	movw	r22, r24
     3f4:	cd 01       	movw	r24, r26
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	5f e3       	ldi	r21, 0x3F	; 63
     3fe:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     416:	eb e9       	ldi	r30, 0x9B	; 155
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9a 81       	ldd	r25, Y+2	; 0x02
     41e:	89 2f       	mov	r24, r25
     420:	99 27       	eor	r25, r25
     422:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     424:	ea e9       	ldi	r30, 0x9A	; 154
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	80 83       	st	Z, r24
}
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <servo_set_duty_cycle_left_grabber+0xe>
     450:	00 d0       	rcall	.+0      	; 0x452 <servo_set_duty_cycle_left_grabber+0x10>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	9c 83       	std	Y+4, r25	; 0x04
     458:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     45a:	e6 e9       	ldi	r30, 0x96	; 150
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	cc 01       	movw	r24, r24
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__floatunsisf>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	bc 01       	movw	r22, r24
     476:	cd 01       	movw	r24, r26
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4f e7       	ldi	r20, 0x7F	; 127
     47e:	53 e4       	ldi	r21, 0x43	; 67
     480:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	7c 01       	movw	r14, r24
     48a:	8d 01       	movw	r16, r26
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	aa 27       	eor	r26, r26
     492:	97 fd       	sbrc	r25, 7
     494:	a0 95       	com	r26
     496:	ba 2f       	mov	r27, r26
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	c8 01       	movw	r24, r16
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	5f e3       	ldi	r21, 0x3F	; 63
     4bc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4d4:	ed e9       	ldi	r30, 0x9D	; 157
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	89 2f       	mov	r24, r25
     4de:	99 27       	eor	r25, r25
     4e0:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4e2:	ec e9       	ldi	r30, 0x9C	; 156
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	80 83       	st	Z, r24
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	08 95       	ret

00000500 <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	99 27       	eor	r25, r25
     510:	87 fd       	sbrc	r24, 7
     512:	90 95       	com	r25
     514:	a9 2f       	mov	r26, r25
     516:	b9 2f       	mov	r27, r25
     518:	bc 01       	movw	r22, r24
     51a:	cd 01       	movw	r24, r26
     51c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	44 eb       	ldi	r20, 0xB4	; 180
     52e:	52 e4       	ldi	r21, 0x42	; 66
     530:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	26 e6       	ldi	r18, 0x66	; 102
     53e:	36 e6       	ldi	r19, 0x66	; 102
     540:	46 e3       	ldi	r20, 0x36	; 54
     542:	51 ec       	ldi	r21, 0xC1	; 193
     544:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	4c e6       	ldi	r20, 0x6C	; 108
     556:	53 e4       	ldi	r21, 0x43	; 67
     558:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	9c 01       	movw	r18, r24
     562:	ad 01       	movw	r20, r26
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	8f e7       	ldi	r24, 0x7F	; 127
     56a:	93 e4       	ldi	r25, 0x43	; 67
     56c:	0e 94 cf 13 	call	0x279e	; 0x279e <__subsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fixsfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	a2 de       	rcall	.-700    	; 0x2c6 <servo_set_duty_cycle_umbrella>
}
     582:	0f 90       	pop	r0
     584:	cf 91       	pop	r28
     586:	df 91       	pop	r29
     588:	08 95       	ret

0000058a <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	0f 92       	push	r0
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	99 27       	eor	r25, r25
     59a:	87 fd       	sbrc	r24, 7
     59c:	90 95       	com	r25
     59e:	a9 2f       	mov	r26, r25
     5a0:	b9 2f       	mov	r27, r25
     5a2:	bc 01       	movw	r22, r24
     5a4:	cd 01       	movw	r24, r26
     5a6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	bc 01       	movw	r22, r24
     5b0:	cd 01       	movw	r24, r26
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	44 eb       	ldi	r20, 0xB4	; 180
     5b8:	52 e4       	ldi	r21, 0x42	; 66
     5ba:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	26 e6       	ldi	r18, 0x66	; 102
     5c8:	36 e6       	ldi	r19, 0x66	; 102
     5ca:	46 e3       	ldi	r20, 0x36	; 54
     5cc:	51 ec       	ldi	r21, 0xC1	; 193
     5ce:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	4c e6       	ldi	r20, 0x6C	; 108
     5e0:	53 e4       	ldi	r21, 0x43	; 67
     5e2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	9c 01       	movw	r18, r24
     5ec:	ad 01       	movw	r20, r26
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	8f e7       	ldi	r24, 0x7F	; 127
     5f4:	93 e4       	ldi	r25, 0x43	; 67
     5f6:	0e 94 cf 13 	call	0x279e	; 0x279e <__subsf3>
     5fa:	dc 01       	movw	r26, r24
     5fc:	cb 01       	movw	r24, r22
     5fe:	bc 01       	movw	r22, r24
     600:	cd 01       	movw	r24, r26
     602:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fixsfsi>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc de       	rcall	.-648    	; 0x384 <servo_set_duty_cycle_door>
}
     60c:	0f 90       	pop	r0
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	08 95       	ret

00000614 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	0f 92       	push	r0
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	99 27       	eor	r25, r25
     624:	87 fd       	sbrc	r24, 7
     626:	90 95       	com	r25
     628:	a9 2f       	mov	r26, r25
     62a:	b9 2f       	mov	r27, r25
     62c:	bc 01       	movw	r22, r24
     62e:	cd 01       	movw	r24, r26
     630:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__floatsisf>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	bc 01       	movw	r22, r24
     63a:	cd 01       	movw	r24, r26
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	44 eb       	ldi	r20, 0xB4	; 180
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	0e 94 38 14 	call	0x2870	; 0x2870 <__divsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	26 e6       	ldi	r18, 0x66	; 102
     652:	36 e6       	ldi	r19, 0x66	; 102
     654:	46 e3       	ldi	r20, 0x36	; 54
     656:	51 ec       	ldi	r21, 0xC1	; 193
     658:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	4c e6       	ldi	r20, 0x6C	; 108
     66a:	53 e4       	ldi	r21, 0x43	; 67
     66c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__addsf3>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	9c 01       	movw	r18, r24
     676:	ad 01       	movw	r20, r26
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	8f e7       	ldi	r24, 0x7F	; 127
     67e:	93 e4       	ldi	r25, 0x43	; 67
     680:	0e 94 cf 13 	call	0x279e	; 0x279e <__subsf3>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	bc 01       	movw	r22, r24
     68a:	cd 01       	movw	r24, r26
     68c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fixsfsi>
     690:	dc 01       	movw	r26, r24
     692:	cb 01       	movw	r24, r22
     694:	d6 de       	rcall	.-596    	; 0x442 <servo_set_duty_cycle_left_grabber>
}
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	0f 92       	push	r0
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6aa:	e7 e4       	ldi	r30, 0x47	; 71
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	80 83       	st	Z, r24
}
     6b2:	0f 90       	pop	r0
     6b4:	cf 91       	pop	r28
     6b6:	df 91       	pop	r29
     6b8:	08 95       	ret

000006ba <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(10);
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	a7 df       	rcall	.-178    	; 0x614 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(70);
     6c6:	86 e4       	ldi	r24, 0x46	; 70
     6c8:	ea df       	rcall	.-44     	; 0x69e <servo_set_right_grabber_position>
}
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	08 95       	ret

000006d0 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	6c 97       	sbiw	r28, 0x1c	; 28
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     6e4:	85 e5       	ldi	r24, 0x55	; 85
     6e6:	0c df       	rcall	.-488    	; 0x500 <servo_set_umbrella_position>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	aa e7       	ldi	r26, 0x7A	; 122
     6ee:	b4 e4       	ldi	r27, 0x44	; 68
     6f0:	89 8f       	std	Y+25, r24	; 0x19
     6f2:	9a 8f       	std	Y+26, r25	; 0x1a
     6f4:	ab 8f       	std	Y+27, r26	; 0x1b
     6f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6f8:	69 8d       	ldd	r22, Y+25	; 0x19
     6fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e4       	ldi	r19, 0x40	; 64
     704:	4c e1       	ldi	r20, 0x1C	; 28
     706:	55 e4       	ldi	r21, 0x45	; 69
     708:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	8d 8b       	std	Y+21, r24	; 0x15
     712:	9e 8b       	std	Y+22, r25	; 0x16
     714:	af 8b       	std	Y+23, r26	; 0x17
     716:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     718:	6d 89       	ldd	r22, Y+21	; 0x15
     71a:	7e 89       	ldd	r23, Y+22	; 0x16
     71c:	8f 89       	ldd	r24, Y+23	; 0x17
     71e:	98 8d       	ldd	r25, Y+24	; 0x18
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e8       	ldi	r20, 0x80	; 128
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     72c:	88 23       	and	r24, r24
     72e:	2c f4       	brge	.+10     	; 0x73a <actuators_umbrella+0x6a>
		__ticks = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	9c 8b       	std	Y+20, r25	; 0x14
     736:	8b 8b       	std	Y+19, r24	; 0x13
     738:	3f c0       	rjmp	.+126    	; 0x7b8 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     73a:	6d 89       	ldd	r22, Y+21	; 0x15
     73c:	7e 89       	ldd	r23, Y+22	; 0x16
     73e:	8f 89       	ldd	r24, Y+23	; 0x17
     740:	98 8d       	ldd	r25, Y+24	; 0x18
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	3f ef       	ldi	r19, 0xFF	; 255
     746:	4f e7       	ldi	r20, 0x7F	; 127
     748:	57 e4       	ldi	r21, 0x47	; 71
     74a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     74e:	18 16       	cp	r1, r24
     750:	4c f5       	brge	.+82     	; 0x7a4 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     752:	69 8d       	ldd	r22, Y+25	; 0x19
     754:	7a 8d       	ldd	r23, Y+26	; 0x1a
     756:	8b 8d       	ldd	r24, Y+27	; 0x1b
     758:	9c 8d       	ldd	r25, Y+28	; 0x1c
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e2       	ldi	r20, 0x20	; 32
     760:	51 e4       	ldi	r21, 0x41	; 65
     762:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     772:	dc 01       	movw	r26, r24
     774:	cb 01       	movw	r24, r22
     776:	9c 8b       	std	Y+20, r25	; 0x14
     778:	8b 8b       	std	Y+19, r24	; 0x13
     77a:	0f c0       	rjmp	.+30     	; 0x79a <actuators_umbrella+0xca>
     77c:	8a ef       	ldi	r24, 0xFA	; 250
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9a 8b       	std	Y+18, r25	; 0x12
     782:	89 8b       	std	Y+17, r24	; 0x11
     784:	89 89       	ldd	r24, Y+17	; 0x11
     786:	9a 89       	ldd	r25, Y+18	; 0x12
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <actuators_umbrella+0xb8>
     78c:	9a 8b       	std	Y+18, r25	; 0x12
     78e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     790:	8b 89       	ldd	r24, Y+19	; 0x13
     792:	9c 89       	ldd	r25, Y+20	; 0x14
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	9c 8b       	std	Y+20, r25	; 0x14
     798:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	69 f7       	brne	.-38     	; 0x77c <actuators_umbrella+0xac>
     7a2:	14 c0       	rjmp	.+40     	; 0x7cc <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a4:	6d 89       	ldd	r22, Y+21	; 0x15
     7a6:	7e 89       	ldd	r23, Y+22	; 0x16
     7a8:	8f 89       	ldd	r24, Y+23	; 0x17
     7aa:	98 8d       	ldd	r25, Y+24	; 0x18
     7ac:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	9c 8b       	std	Y+20, r25	; 0x14
     7b6:	8b 8b       	std	Y+19, r24	; 0x13
     7b8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ba:	9c 89       	ldd	r25, Y+20	; 0x14
     7bc:	98 8b       	std	Y+16, r25	; 0x10
     7be:	8f 87       	std	Y+15, r24	; 0x0f
     7c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c2:	98 89       	ldd	r25, Y+16	; 0x10
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <actuators_umbrella+0xf4>
     7c8:	98 8b       	std	Y+16, r25	; 0x10
     7ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	dd de       	rcall	.-582    	; 0x58a <servo_set_door_position>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	aa e7       	ldi	r26, 0x7A	; 122
     7d6:	b4 e4       	ldi	r27, 0x44	; 68
     7d8:	8b 87       	std	Y+11, r24	; 0x0b
     7da:	9c 87       	std	Y+12, r25	; 0x0c
     7dc:	ad 87       	std	Y+13, r26	; 0x0d
     7de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     7e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e4       	ldi	r19, 0x40	; 64
     7ec:	4c e1       	ldi	r20, 0x1C	; 28
     7ee:	55 e4       	ldi	r21, 0x45	; 69
     7f0:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	8f 83       	std	Y+7, r24	; 0x07
     7fa:	98 87       	std	Y+8, r25	; 0x08
     7fc:	a9 87       	std	Y+9, r26	; 0x09
     7fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     800:	6f 81       	ldd	r22, Y+7	; 0x07
     802:	78 85       	ldd	r23, Y+8	; 0x08
     804:	89 85       	ldd	r24, Y+9	; 0x09
     806:	9a 85       	ldd	r25, Y+10	; 0x0a
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	2c f4       	brge	.+10     	; 0x822 <actuators_umbrella+0x152>
		__ticks = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9e 83       	std	Y+6, r25	; 0x06
     81e:	8d 83       	std	Y+5, r24	; 0x05
     820:	3f c0       	rjmp	.+126    	; 0x8a0 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     822:	6f 81       	ldd	r22, Y+7	; 0x07
     824:	78 85       	ldd	r23, Y+8	; 0x08
     826:	89 85       	ldd	r24, Y+9	; 0x09
     828:	9a 85       	ldd	r25, Y+10	; 0x0a
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	3f ef       	ldi	r19, 0xFF	; 255
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	57 e4       	ldi	r21, 0x47	; 71
     832:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	4c f5       	brge	.+82     	; 0x88c <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83a:	6b 85       	ldd	r22, Y+11	; 0x0b
     83c:	7c 85       	ldd	r23, Y+12	; 0x0c
     83e:	8d 85       	ldd	r24, Y+13	; 0x0d
     840:	9e 85       	ldd	r25, Y+14	; 0x0e
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e2       	ldi	r20, 0x20	; 32
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	9e 83       	std	Y+6, r25	; 0x06
     860:	8d 83       	std	Y+5, r24	; 0x05
     862:	0f c0       	rjmp	.+30     	; 0x882 <actuators_umbrella+0x1b2>
     864:	8a ef       	ldi	r24, 0xFA	; 250
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9c 83       	std	Y+4, r25	; 0x04
     86a:	8b 83       	std	Y+3, r24	; 0x03
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	9c 81       	ldd	r25, Y+4	; 0x04
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <actuators_umbrella+0x1a0>
     874:	9c 83       	std	Y+4, r25	; 0x04
     876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     878:	8d 81       	ldd	r24, Y+5	; 0x05
     87a:	9e 81       	ldd	r25, Y+6	; 0x06
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	9e 83       	std	Y+6, r25	; 0x06
     880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	9e 81       	ldd	r25, Y+6	; 0x06
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	69 f7       	brne	.-38     	; 0x864 <actuators_umbrella+0x194>
     88a:	14 c0       	rjmp	.+40     	; 0x8b4 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	6f 81       	ldd	r22, Y+7	; 0x07
     88e:	78 85       	ldd	r23, Y+8	; 0x08
     890:	89 85       	ldd	r24, Y+9	; 0x09
     892:	9a 85       	ldd	r25, Y+10	; 0x0a
     894:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	9e 83       	std	Y+6, r25	; 0x06
     89e:	8d 83       	std	Y+5, r24	; 0x05
     8a0:	8d 81       	ldd	r24, Y+5	; 0x05
     8a2:	9e 81       	ldd	r25, Y+6	; 0x06
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <actuators_umbrella+0x1dc>
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8b4:	6c 96       	adiw	r28, 0x1c	; 28
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <actuators_setup>:
void actuators_setup(void)
{
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	aa 97       	sbiw	r28, 0x2a	; 42
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(80);
     8da:	80 e5       	ldi	r24, 0x50	; 80
     8dc:	56 de       	rcall	.-852    	; 0x58a <servo_set_door_position>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	aa e7       	ldi	r26, 0x7A	; 122
     8e4:	b4 e4       	ldi	r27, 0x44	; 68
     8e6:	8f a3       	std	Y+39, r24	; 0x27
     8e8:	98 a7       	std	Y+40, r25	; 0x28
     8ea:	a9 a7       	std	Y+41, r26	; 0x29
     8ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ee:	6f a1       	ldd	r22, Y+39	; 0x27
     8f0:	78 a5       	ldd	r23, Y+40	; 0x28
     8f2:	89 a5       	ldd	r24, Y+41	; 0x29
     8f4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e4       	ldi	r19, 0x40	; 64
     8fa:	4c e1       	ldi	r20, 0x1C	; 28
     8fc:	55 e4       	ldi	r21, 0x45	; 69
     8fe:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	8b a3       	std	Y+35, r24	; 0x23
     908:	9c a3       	std	Y+36, r25	; 0x24
     90a:	ad a3       	std	Y+37, r26	; 0x25
     90c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     90e:	6b a1       	ldd	r22, Y+35	; 0x23
     910:	7c a1       	ldd	r23, Y+36	; 0x24
     912:	8d a1       	ldd	r24, Y+37	; 0x25
     914:	9e a1       	ldd	r25, Y+38	; 0x26
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     922:	88 23       	and	r24, r24
     924:	2c f4       	brge	.+10     	; 0x930 <actuators_setup+0x6a>
		__ticks = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9a a3       	std	Y+34, r25	; 0x22
     92c:	89 a3       	std	Y+33, r24	; 0x21
     92e:	3f c0       	rjmp	.+126    	; 0x9ae <actuators_setup+0xe8>
	else if (__tmp > 65535)
     930:	6b a1       	ldd	r22, Y+35	; 0x23
     932:	7c a1       	ldd	r23, Y+36	; 0x24
     934:	8d a1       	ldd	r24, Y+37	; 0x25
     936:	9e a1       	ldd	r25, Y+38	; 0x26
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f e7       	ldi	r20, 0x7F	; 127
     93e:	57 e4       	ldi	r21, 0x47	; 71
     940:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     944:	18 16       	cp	r1, r24
     946:	4c f5       	brge	.+82     	; 0x99a <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     948:	6f a1       	ldd	r22, Y+39	; 0x27
     94a:	78 a5       	ldd	r23, Y+40	; 0x28
     94c:	89 a5       	ldd	r24, Y+41	; 0x29
     94e:	9a a5       	ldd	r25, Y+42	; 0x2a
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e2       	ldi	r20, 0x20	; 32
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	9a a3       	std	Y+34, r25	; 0x22
     96e:	89 a3       	std	Y+33, r24	; 0x21
     970:	0f c0       	rjmp	.+30     	; 0x990 <actuators_setup+0xca>
     972:	8a ef       	ldi	r24, 0xFA	; 250
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	98 a3       	std	Y+32, r25	; 0x20
     978:	8f 8f       	std	Y+31, r24	; 0x1f
     97a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     97c:	98 a1       	ldd	r25, Y+32	; 0x20
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <actuators_setup+0xb8>
     982:	98 a3       	std	Y+32, r25	; 0x20
     984:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     986:	89 a1       	ldd	r24, Y+33	; 0x21
     988:	9a a1       	ldd	r25, Y+34	; 0x22
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	9a a3       	std	Y+34, r25	; 0x22
     98e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	89 a1       	ldd	r24, Y+33	; 0x21
     992:	9a a1       	ldd	r25, Y+34	; 0x22
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	69 f7       	brne	.-38     	; 0x972 <actuators_setup+0xac>
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	6b a1       	ldd	r22, Y+35	; 0x23
     99c:	7c a1       	ldd	r23, Y+36	; 0x24
     99e:	8d a1       	ldd	r24, Y+37	; 0x25
     9a0:	9e a1       	ldd	r25, Y+38	; 0x26
     9a2:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	9a a3       	std	Y+34, r25	; 0x22
     9ac:	89 a3       	std	Y+33, r24	; 0x21
     9ae:	89 a1       	ldd	r24, Y+33	; 0x21
     9b0:	9a a1       	ldd	r25, Y+34	; 0x22
     9b2:	9e 8f       	std	Y+30, r25	; 0x1e
     9b4:	8d 8f       	std	Y+29, r24	; 0x1d
     9b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <actuators_setup+0xf4>
     9be:	9e 8f       	std	Y+30, r25	; 0x1e
     9c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(-90);
     9c2:	86 ea       	ldi	r24, 0xA6	; 166
     9c4:	9d dd       	rcall	.-1222   	; 0x500 <servo_set_umbrella_position>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	aa e7       	ldi	r26, 0x7A	; 122
     9cc:	b4 e4       	ldi	r27, 0x44	; 68
     9ce:	89 8f       	std	Y+25, r24	; 0x19
     9d0:	9a 8f       	std	Y+26, r25	; 0x1a
     9d2:	ab 8f       	std	Y+27, r26	; 0x1b
     9d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9d6:	69 8d       	ldd	r22, Y+25	; 0x19
     9d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e4       	ldi	r19, 0x40	; 64
     9e2:	4c e1       	ldi	r20, 0x1C	; 28
     9e4:	55 e4       	ldi	r21, 0x45	; 69
     9e6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	8d 8b       	std	Y+21, r24	; 0x15
     9f0:	9e 8b       	std	Y+22, r25	; 0x16
     9f2:	af 8b       	std	Y+23, r26	; 0x17
     9f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9f6:	6d 89       	ldd	r22, Y+21	; 0x15
     9f8:	7e 89       	ldd	r23, Y+22	; 0x16
     9fa:	8f 89       	ldd	r24, Y+23	; 0x17
     9fc:	98 8d       	ldd	r25, Y+24	; 0x18
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e8       	ldi	r20, 0x80	; 128
     a04:	5f e3       	ldi	r21, 0x3F	; 63
     a06:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     a0a:	88 23       	and	r24, r24
     a0c:	2c f4       	brge	.+10     	; 0xa18 <actuators_setup+0x152>
		__ticks = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 8b       	std	Y+20, r25	; 0x14
     a14:	8b 8b       	std	Y+19, r24	; 0x13
     a16:	3f c0       	rjmp	.+126    	; 0xa96 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a18:	6d 89       	ldd	r22, Y+21	; 0x15
     a1a:	7e 89       	ldd	r23, Y+22	; 0x16
     a1c:	8f 89       	ldd	r24, Y+23	; 0x17
     a1e:	98 8d       	ldd	r25, Y+24	; 0x18
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	3f ef       	ldi	r19, 0xFF	; 255
     a24:	4f e7       	ldi	r20, 0x7F	; 127
     a26:	57 e4       	ldi	r21, 0x47	; 71
     a28:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	4c f5       	brge	.+82     	; 0xa82 <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a30:	69 8d       	ldd	r22, Y+25	; 0x19
     a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e2       	ldi	r20, 0x20	; 32
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	bc 01       	movw	r22, r24
     a4a:	cd 01       	movw	r24, r26
     a4c:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	9c 8b       	std	Y+20, r25	; 0x14
     a56:	8b 8b       	std	Y+19, r24	; 0x13
     a58:	0f c0       	rjmp	.+30     	; 0xa78 <actuators_setup+0x1b2>
     a5a:	8a ef       	ldi	r24, 0xFA	; 250
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9a 8b       	std	Y+18, r25	; 0x12
     a60:	89 8b       	std	Y+17, r24	; 0x11
     a62:	89 89       	ldd	r24, Y+17	; 0x11
     a64:	9a 89       	ldd	r25, Y+18	; 0x12
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <actuators_setup+0x1a0>
     a6a:	9a 8b       	std	Y+18, r25	; 0x12
     a6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6e:	8b 89       	ldd	r24, Y+19	; 0x13
     a70:	9c 89       	ldd	r25, Y+20	; 0x14
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	9c 8b       	std	Y+20, r25	; 0x14
     a76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a78:	8b 89       	ldd	r24, Y+19	; 0x13
     a7a:	9c 89       	ldd	r25, Y+20	; 0x14
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	69 f7       	brne	.-38     	; 0xa5a <actuators_setup+0x194>
     a80:	14 c0       	rjmp	.+40     	; 0xaaa <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a82:	6d 89       	ldd	r22, Y+21	; 0x15
     a84:	7e 89       	ldd	r23, Y+22	; 0x16
     a86:	8f 89       	ldd	r24, Y+23	; 0x17
     a88:	98 8d       	ldd	r25, Y+24	; 0x18
     a8a:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	9c 8b       	std	Y+20, r25	; 0x14
     a94:	8b 8b       	std	Y+19, r24	; 0x13
     a96:	8b 89       	ldd	r24, Y+19	; 0x13
     a98:	9c 89       	ldd	r25, Y+20	; 0x14
     a9a:	98 8b       	std	Y+16, r25	; 0x10
     a9c:	8f 87       	std	Y+15, r24	; 0x0f
     a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa0:	98 89       	ldd	r25, Y+16	; 0x10
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <actuators_setup+0x1dc>
     aa6:	98 8b       	std	Y+16, r25	; 0x10
     aa8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	6e dd       	rcall	.-1316   	; 0x58a <servo_set_door_position>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	aa ef       	ldi	r26, 0xFA	; 250
     ab4:	b3 e4       	ldi	r27, 0x43	; 67
     ab6:	8b 87       	std	Y+11, r24	; 0x0b
     ab8:	9c 87       	std	Y+12, r25	; 0x0c
     aba:	ad 87       	std	Y+13, r26	; 0x0d
     abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     abe:	6b 85       	ldd	r22, Y+11	; 0x0b
     ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e4       	ldi	r19, 0x40	; 64
     aca:	4c e1       	ldi	r20, 0x1C	; 28
     acc:	55 e4       	ldi	r21, 0x45	; 69
     ace:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	8f 83       	std	Y+7, r24	; 0x07
     ad8:	98 87       	std	Y+8, r25	; 0x08
     ada:	a9 87       	std	Y+9, r26	; 0x09
     adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ade:	6f 81       	ldd	r22, Y+7	; 0x07
     ae0:	78 85       	ldd	r23, Y+8	; 0x08
     ae2:	89 85       	ldd	r24, Y+9	; 0x09
     ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f e3       	ldi	r21, 0x3F	; 63
     aee:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
     af2:	88 23       	and	r24, r24
     af4:	2c f4       	brge	.+10     	; 0xb00 <actuators_setup+0x23a>
		__ticks = 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	9e 83       	std	Y+6, r25	; 0x06
     afc:	8d 83       	std	Y+5, r24	; 0x05
     afe:	3f c0       	rjmp	.+126    	; 0xb7e <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     b00:	6f 81       	ldd	r22, Y+7	; 0x07
     b02:	78 85       	ldd	r23, Y+8	; 0x08
     b04:	89 85       	ldd	r24, Y+9	; 0x09
     b06:	9a 85       	ldd	r25, Y+10	; 0x0a
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	3f ef       	ldi	r19, 0xFF	; 255
     b0c:	4f e7       	ldi	r20, 0x7F	; 127
     b0e:	57 e4       	ldi	r21, 0x47	; 71
     b10:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
     b14:	18 16       	cp	r1, r24
     b16:	4c f5       	brge	.+82     	; 0xb6a <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b18:	6b 85       	ldd	r22, Y+11	; 0x0b
     b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e2       	ldi	r20, 0x20	; 32
     b26:	51 e4       	ldi	r21, 0x41	; 65
     b28:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	9e 83       	std	Y+6, r25	; 0x06
     b3e:	8d 83       	std	Y+5, r24	; 0x05
     b40:	0f c0       	rjmp	.+30     	; 0xb60 <actuators_setup+0x29a>
     b42:	8a ef       	ldi	r24, 0xFA	; 250
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	9c 83       	std	Y+4, r25	; 0x04
     b48:	8b 83       	std	Y+3, r24	; 0x03
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	9c 81       	ldd	r25, Y+4	; 0x04
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <actuators_setup+0x288>
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	9e 83       	std	Y+6, r25	; 0x06
     b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	69 f7       	brne	.-38     	; 0xb42 <actuators_setup+0x27c>
     b68:	14 c0       	rjmp	.+40     	; 0xb92 <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b6a:	6f 81       	ldd	r22, Y+7	; 0x07
     b6c:	78 85       	ldd	r23, Y+8	; 0x08
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	9a 85       	ldd	r25, Y+10	; 0x0a
     b72:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	9e 83       	std	Y+6, r25	; 0x06
     b7c:	8d 83       	std	Y+5, r24	; 0x05
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	9e 81       	ldd	r25, Y+6	; 0x06
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <actuators_setup+0x2c4>
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     b92:	93 dd       	rcall	.-1242   	; 0x6ba <servo_set_grabbers_up>
}
     b94:	aa 96       	adiw	r28, 0x2a	; 42
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	00 90 5b 00 	lds	r0, 0x005B
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <__vector_18+0x2a>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <__vector_18+0x2c>
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     bd6:	ed ee       	ldi	r30, 0xED	; 237
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     bde:	1b 82       	std	Y+3, r1	; 0x03
     be0:	9c c0       	rjmp	.+312    	; 0xd1a <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     be2:	ed ee       	ldi	r30, 0xED	; 237
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	82 95       	swap	r24
     bea:	80 7f       	andi	r24, 0xF0	; 240
     bec:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     bee:	ee ee       	ldi	r30, 0xEE	; 238
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	82 95       	swap	r24
     bf6:	86 95       	lsr	r24
     bf8:	87 70       	andi	r24, 0x07	; 7
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	88 23       	and	r24, r24
     c04:	09 f4       	brne	.+2      	; 0xc08 <__vector_18+0x62>
     c06:	6e c0       	rjmp	.+220    	; 0xce4 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     c08:	ef ee       	ldi	r30, 0xEF	; 239
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     c10:	ae ee       	ldi	r26, 0xEE	; 238
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ee ee       	ldi	r30, 0xEE	; 238
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8f 7d       	andi	r24, 0xDF	; 223
     c1c:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     c1e:	e2 ef       	ldi	r30, 0xF2	; 242
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	82 95       	swap	r24
     c26:	86 95       	lsr	r24
     c28:	87 70       	andi	r24, 0x07	; 7
     c2a:	28 2f       	mov	r18, r24
     c2c:	e3 ef       	ldi	r30, 0xF3	; 243
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	82 2b       	or	r24, r18
     c44:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	2a c0       	rjmp	.+84     	; 0xc9e <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	82 1b       	sub	r24, r18
     c56:	93 0b       	sbc	r25, r19
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	90 95       	com	r25
     c5e:	81 95       	neg	r24
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	fc 01       	movw	r30, r24
     c64:	e6 59       	subi	r30, 0x96	; 150
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	40 81       	ld	r20, Z
     c6a:	51 81       	ldd	r21, Z+1	; 0x01
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	fc 01       	movw	r30, r24
     c76:	e2 58       	subi	r30, 0x82	; 130
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	80 81       	ld	r24, Z
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	82 0f       	add	r24, r18
     c88:	93 1f       	adc	r25, r19
     c8a:	da 01       	movw	r26, r20
     c8c:	a8 0f       	add	r26, r24
     c8e:	b9 1f       	adc	r27, r25
     c90:	ea ef       	ldi	r30, 0xFA	; 250
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	88 30       	cpi	r24, 0x08	; 8
     ca2:	98 f2       	brcs	.-90     	; 0xc4a <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	fc 01       	movw	r30, r24
     cae:	e2 58       	subi	r30, 0x82	; 130
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 83       	st	Z, r24
     cb8:	80 81       	ld	r24, Z
     cba:	85 30       	cpi	r24, 0x05	; 5
     cbc:	41 f4       	brne	.+16     	; 0xcce <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	e2 58       	subi	r30, 0x82	; 130
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	fc 01       	movw	r30, r24
     cd8:	ee 56       	subi	r30, 0x6E	; 110
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	80 81       	ld	r24, Z
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
     ce2:	1f c0       	rjmp	.+62     	; 0xd22 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     ce4:	ee ee       	ldi	r30, 0xEE	; 238
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 95       	swap	r24
     cec:	86 95       	lsr	r24
     cee:	86 95       	lsr	r24
     cf0:	83 70       	andi	r24, 0x03	; 3
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	88 23       	and	r24, r24
     cfc:	59 f0       	breq	.+22     	; 0xd14 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     cfe:	ef ee       	ldi	r30, 0xEF	; 239
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     d04:	ae ee       	ldi	r26, 0xEE	; 238
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	ee ee       	ldi	r30, 0xEE	; 238
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7b       	andi	r24, 0xBF	; 191
     d10:	8c 93       	st	X, r24
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	8b 83       	std	Y+3, r24	; 0x03
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	8f 30       	cpi	r24, 0x0F	; 15
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <__vector_18+0x17c>
     d20:	60 cf       	rjmp	.-320    	; 0xbe2 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     d22:	ed ee       	ldi	r30, 0xED	; 237
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     d2a:	aa ed       	ldi	r26, 0xDA	; 218
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea ed       	ldi	r30, 0xDA	; 218
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8c 93       	st	X, r24
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	00 92 5b 00 	sts	0x005B, r0
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <CAN_InitModule+0x6>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     d70:	e8 ed       	ldi	r30, 0xD8	; 216
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     d78:	1a 82       	std	Y+2, r1	; 0x02
     d7a:	32 c0       	rjmp	.+100    	; 0xde0 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     d7c:	ed ee       	ldi	r30, 0xED	; 237
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	82 95       	swap	r24
     d84:	80 7f       	andi	r24, 0xF0	; 240
     d86:	80 83       	st	Z, r24

		CANSTMOB = 0;
     d88:	ee ee       	ldi	r30, 0xEE	; 238
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	10 82       	st	Z, r1
		CANCDMOB = 0;
     d8e:	ef ee       	ldi	r30, 0xEF	; 239
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	10 82       	st	Z, r1

		CANIDT1 = 0;
     d94:	e3 ef       	ldi	r30, 0xF3	; 243
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	10 82       	st	Z, r1
		CANIDT2 = 0;
     d9a:	e2 ef       	ldi	r30, 0xF2	; 242
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	10 82       	st	Z, r1
		CANIDT3 = 0;
     da0:	e1 ef       	ldi	r30, 0xF1	; 241
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	10 82       	st	Z, r1
		CANIDT4 = 0;
     da6:	e0 ef       	ldi	r30, 0xF0	; 240
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1
		CANIDM1 = 0;
     dac:	e7 ef       	ldi	r30, 0xF7	; 247
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	10 82       	st	Z, r1
		CANIDM2 = 0;
     db2:	e6 ef       	ldi	r30, 0xF6	; 246
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     db8:	e5 ef       	ldi	r30, 0xF5	; 245
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	10 82       	st	Z, r1
		CANIDM4 = 0;
     dbe:	e4 ef       	ldi	r30, 0xF4	; 244
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <CAN_InitModule+0x6e>
			CANMSG = 0;
     dc8:	ea ef       	ldi	r30, 0xFA	; 250
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	b8 f3       	brcs	.-18     	; 0xdc8 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	8f 30       	cpi	r24, 0x0F	; 15
     de4:	58 f2       	brcs	.-106    	; 0xd7c <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     de6:	e8 ed       	ldi	r30, 0xD8	; 216
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     dee:	e2 ee       	ldi	r30, 0xE2	; 226
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     df6:	e3 ee       	ldi	r30, 0xE3	; 227
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     dfe:	e4 ee       	ldi	r30, 0xE4	; 228
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	8e e5       	ldi	r24, 0x5E	; 94
     e04:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     e06:	e5 ee       	ldi	r30, 0xE5	; 229
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     e0c:	eb ed       	ldi	r30, 0xDB	; 219
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 eb       	ldi	r24, 0xB0	; 176
     e12:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     e14:	ef ed       	ldi	r30, 0xDF	; 223
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	8f e7       	ldi	r24, 0x7F	; 127
     e1a:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     e1c:	ee ed       	ldi	r30, 0xDE	; 222
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	80 83       	st	Z, r24
	sei();
     e24:	78 94       	sei
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <CAN_InitRxMob+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <CAN_InitRxMob+0x8>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     e42:	ed ee       	ldi	r30, 0xED	; 237
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     e4a:	e9 ed       	ldi	r30, 0xD9	; 217
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	82 95       	swap	r24
     e52:	8f 70       	andi	r24, 0x0F	; 15
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	90 70       	andi	r25, 0x00	; 0
     e5c:	88 23       	and	r24, r24
     e5e:	a9 f7       	brne	.-22     	; 0xe4a <CAN_InitRxMob+0x1a>
     e60:	e9 ed       	ldi	r30, 0xD9	; 217
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	86 95       	lsr	r24
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	81 70       	andi	r24, 0x01	; 1
     e72:	90 70       	andi	r25, 0x00	; 0
     e74:	88 23       	and	r24, r24
     e76:	49 f7       	brne	.-46     	; 0xe4a <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e78:	1a 82       	std	Y+2, r1	; 0x02
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     e7c:	ed ee       	ldi	r30, 0xED	; 237
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	82 95       	swap	r24
     e84:	80 7f       	andi	r24, 0xF0	; 240
     e86:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     e88:	ef ee       	ldi	r30, 0xEF	; 239
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	82 95       	swap	r24
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	83 70       	andi	r24, 0x03	; 3
     e96:	88 23       	and	r24, r24
     e98:	69 f5       	brne	.+90     	; 0xef4 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     e9a:	ef ee       	ldi	r30, 0xEF	; 239
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8f e0       	ldi	r24, 0x0F	; 15
     ea0:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     ea2:	e3 ef       	ldi	r30, 0xF3	; 243
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	96 95       	lsr	r25
     eb2:	87 95       	ror	r24
     eb4:	96 95       	lsr	r25
     eb6:	87 95       	ror	r24
     eb8:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     eba:	e2 ef       	ldi	r30, 0xF2	; 242
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	82 95       	swap	r24
     ec2:	88 0f       	add	r24, r24
     ec4:	80 7e       	andi	r24, 0xE0	; 224
     ec6:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     ec8:	e6 ef       	ldi	r30, 0xF6	; 246
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 ee       	ldi	r24, 0xE0	; 224
     ece:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     ed0:	e7 ef       	ldi	r30, 0xF7	; 247
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     ed8:	af ee       	ldi	r26, 0xEF	; 239
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ef ee       	ldi	r30, 0xEF	; 239
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     ee6:	ed ee       	ldi	r30, 0xED	; 237
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	80 83       	st	Z, r24

		return 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0c c0       	rjmp	.+24     	; 0xf0c <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	8f 30       	cpi	r24, 0x0F	; 15
     efe:	08 f4       	brcc	.+2      	; 0xf02 <CAN_InitRxMob+0xd2>
     f00:	bd cf       	rjmp	.-134    	; 0xe7c <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     f02:	ed ee       	ldi	r30, 0xED	; 237
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	80 83       	st	Z, r24

	return 0;
     f0a:	1d 82       	std	Y+5, r1	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <CAN_Init+0xa>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     f2e:	1b df       	rcall	.-458    	; 0xd66 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     f30:	19 82       	std	Y+1, r1	; 0x01
     f32:	36 c0       	rjmp	.+108    	; 0xfa0 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	79 df       	rcall	.-270    	; 0xe30 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	8c 01       	movw	r16, r24
     f4a:	06 59       	subi	r16, 0x96	; 150
     f4c:	1e 4f       	sbci	r17, 0xFE	; 254
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <calloc>
     f5a:	f8 01       	movw	r30, r16
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	48 2f       	mov	r20, r24
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	fc 01       	movw	r30, r24
     f74:	ee 56       	subi	r30, 0x6E	; 110
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	10 82       	st	Z, r1
     f7a:	fc 01       	movw	r30, r24
     f7c:	ee 56       	subi	r30, 0x6E	; 110
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
     f80:	80 81       	ld	r24, Z
     f82:	f9 01       	movw	r30, r18
     f84:	e8 57       	subi	r30, 0x78	; 120
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	80 83       	st	Z, r24
     f8a:	f9 01       	movw	r30, r18
     f8c:	e8 57       	subi	r30, 0x78	; 120
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	80 81       	ld	r24, Z
     f92:	fa 01       	movw	r30, r20
     f94:	e2 58       	subi	r30, 0x82	; 130
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	99 81       	ldd	r25, Y+1	; 0x01
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	98 17       	cp	r25, r24
     fa6:	30 f2       	brcs	.-116    	; 0xf34 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <CAN_Read+0x6>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <CAN_Read+0x8>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9b 83       	std	Y+3, r25	; 0x03
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	fc 01       	movw	r30, r24
     fda:	ee 56       	subi	r30, 0x6E	; 110
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	b1 f3       	breq	.-20     	; 0xfd0 <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	30 c0       	rjmp	.+96     	; 0x1048 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	dc 01       	movw	r26, r24
     ff4:	a2 0f       	add	r26, r18
     ff6:	b3 1f       	adc	r27, r19
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	82 1b       	sub	r24, r18
    1004:	93 0b       	sbc	r25, r19
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	90 95       	com	r25
    100c:	81 95       	neg	r24
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	fc 01       	movw	r30, r24
    1012:	e6 59       	subi	r30, 0x96	; 150
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	40 81       	ld	r20, Z
    1018:	51 81       	ldd	r21, Z+1	; 0x01
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	fc 01       	movw	r30, r24
    1024:	e8 57       	subi	r30, 0x78	; 120
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	fa 01       	movw	r30, r20
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	80 81       	ld	r24, Z
    1040:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	68 f2       	brcs	.-102    	; 0xfe8 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	fc 01       	movw	r30, r24
    1058:	e8 57       	subi	r30, 0x78	; 120
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	80 81       	ld	r24, Z
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	80 83       	st	Z, r24
    1062:	80 81       	ld	r24, Z
    1064:	85 30       	cpi	r24, 0x05	; 5
    1066:	41 f4       	brne	.+16     	; 0x1078 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	fc 01       	movw	r30, r24
    1072:	e8 57       	subi	r30, 0x78	; 120
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9c 01       	movw	r18, r24
    1080:	21 50       	subi	r18, 0x01	; 1
    1082:	30 40       	sbci	r19, 0x00	; 0
    1084:	f9 01       	movw	r30, r18
    1086:	ee 56       	subi	r30, 0x6E	; 110
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	f9 01       	movw	r30, r18
    1090:	ee 56       	subi	r30, 0x6E	; 110
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	80 83       	st	Z, r24

	return 0;
    1096:	80 e0       	ldi	r24, 0x00	; 0
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	27 97       	sbiw	r28, 0x07	; 7
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	9d 83       	std	Y+5, r25	; 0x05
    10bc:	8c 83       	std	Y+4, r24	; 0x04
    10be:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    10c0:	e9 ed       	ldi	r30, 0xD9	; 217
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 95       	swap	r24
    10c8:	8f 70       	andi	r24, 0x0F	; 15
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	88 23       	and	r24, r24
    10d4:	a9 f7       	brne	.-22     	; 0x10c0 <CAN_Write+0x1a>
    10d6:	e9 ed       	ldi	r30, 0xD9	; 217
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	86 95       	lsr	r24
    10de:	86 95       	lsr	r24
    10e0:	86 95       	lsr	r24
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	90 70       	andi	r25, 0x00	; 0
    10ea:	88 23       	and	r24, r24
    10ec:	49 f7       	brne	.-46     	; 0x10c0 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    10ee:	ed ee       	ldi	r30, 0xED	; 237
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    10f6:	1a 82       	std	Y+2, r1	; 0x02
    10f8:	12 c0       	rjmp	.+36     	; 0x111e <__stack+0x1f>
	{
		CANPAGE = ch << 4;
    10fa:	ed ee       	ldi	r30, 0xED	; 237
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	82 95       	swap	r24
    1102:	80 7f       	andi	r24, 0xF0	; 240
    1104:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    1106:	ef ee       	ldi	r30, 0xEF	; 239
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	82 95       	swap	r24
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	83 70       	andi	r24, 0x03	; 3
    1114:	88 23       	and	r24, r24
    1116:	31 f0       	breq	.+12     	; 0x1124 <__stack+0x25>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	8f 30       	cpi	r24, 0x0F	; 15
    1122:	58 f3       	brcs	.-42     	; 0x10fa <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	8f 30       	cpi	r24, 0x0F	; 15
    1128:	19 f4       	brne	.+6      	; 0x1130 <__stack+0x31>
		return -1;
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	8f 83       	std	Y+7, r24	; 0x07
    112e:	32 c0       	rjmp	.+100    	; 0x1194 <__stack+0x95>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1130:	e2 ef       	ldi	r30, 0xF2	; 242
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	82 95       	swap	r24
    1138:	88 0f       	add	r24, r24
    113a:	80 7e       	andi	r24, 0xE0	; 224
    113c:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    113e:	e3 ef       	ldi	r30, 0xF3	; 243
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	86 95       	lsr	r24
    1146:	86 95       	lsr	r24
    1148:	86 95       	lsr	r24
    114a:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    114c:	ef ee       	ldi	r30, 0xEF	; 239
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <__stack+0x77>
		CANMSG = data[i];
    1158:	aa ef       	ldi	r26, 0xFA	; 250
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	fc 01       	movw	r30, r24
    1168:	e2 0f       	add	r30, r18
    116a:	f3 1f       	adc	r31, r19
    116c:	80 81       	ld	r24, Z
    116e:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	88 30       	cpi	r24, 0x08	; 8
    117a:	70 f3       	brcs	.-36     	; 0x1158 <__stack+0x59>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    117c:	af ee       	ldi	r26, 0xEF	; 239
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ef ee       	ldi	r30, 0xEF	; 239
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	80 64       	ori	r24, 0x40	; 64
    1188:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    118a:	ed ee       	ldi	r30, 0xED	; 237
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	80 83       	st	Z, r24

	return 0;
    1192:	1f 82       	std	Y+7, r1	; 0x07
    1194:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1196:	27 96       	adiw	r28, 0x07	; 7
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	2c 97       	sbiw	r28, 0x0c	; 12
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	89 87       	std	Y+9, r24	; 0x09
    11be:	6a 87       	std	Y+10, r22	; 0x0a
    11c0:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11c2:	80 91 08 01 	lds	r24, 0x0108
    11c6:	90 91 09 01 	lds	r25, 0x0109
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	06 97       	sbiw	r24, 0x06	; 6
    11d4:	98 87       	std	Y+8, r25	; 0x08
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
    11da:	ef 81       	ldd	r30, Y+7	; 0x07
    11dc:	f8 85       	ldd	r31, Y+8	; 0x08
    11de:	90 81       	ld	r25, Z
    11e0:	89 85       	ldd	r24, Y+9	; 0x09
    11e2:	98 17       	cp	r25, r24
    11e4:	19 f4       	brne	.+6      	; 0x11ec <gpio_register_pin+0x44>
            return 1;
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	2c 87       	std	Y+12, r18	; 0x0c
    11ea:	c9 c0       	rjmp	.+402    	; 0x137e <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11ec:	ef 81       	ldd	r30, Y+7	; 0x07
    11ee:	f8 85       	ldd	r31, Y+8	; 0x08
    11f0:	80 85       	ldd	r24, Z+8	; 0x08
    11f2:	91 85       	ldd	r25, Z+9	; 0x09
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	06 97       	sbiw	r24, 0x06	; 6
    11fe:	98 87       	std	Y+8, r25	; 0x08
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	06 96       	adiw	r24, 0x06	; 6
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	86 30       	cpi	r24, 0x06	; 6
    120c:	92 07       	cpc	r25, r18
    120e:	29 f7       	brne	.-54     	; 0x11da <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1210:	89 85       	ldd	r24, Y+9	; 0x09
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	86 95       	lsr	r24
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	87 70       	andi	r24, 0x07	; 7
    1220:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1222:	8a 85       	ldd	r24, Y+10	; 0x0a
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	09 f0       	breq	.+2      	; 0x122a <gpio_register_pin+0x82>
    1228:	48 c0       	rjmp	.+144    	; 0x12ba <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    122a:	8e 81       	ldd	r24, Y+6	; 0x06
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	c9 01       	movw	r24, r18
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	4e 96       	adiw	r24, 0x1e	; 30
    123c:	dc 01       	movw	r26, r24
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	4e 96       	adiw	r24, 0x1e	; 30
    1250:	fc 01       	movw	r30, r24
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <gpio_register_pin+0xbe>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	2a 95       	dec	r18
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <gpio_register_pin+0xba>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	c9 01       	movw	r24, r18
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	4f 96       	adiw	r24, 0x1f	; 31
    1280:	dc 01       	movw	r26, r24
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	4f 96       	adiw	r24, 0x1f	; 31
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <gpio_register_pin+0x104>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <gpio_register_pin+0x100>
    12b0:	80 95       	com	r24
    12b2:	84 23       	and	r24, r20
    12b4:	8c 93       	st	X, r24
        return 0;
    12b6:	1c 86       	std	Y+12, r1	; 0x0c
    12b8:	62 c0       	rjmp	.+196    	; 0x137e <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	c9 01       	movw	r24, r18
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	4e 96       	adiw	r24, 0x1e	; 30
    12cc:	dc 01       	movw	r26, r24
    12ce:	8e 81       	ldd	r24, Y+6	; 0x06
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	c9 01       	movw	r24, r18
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	4e 96       	adiw	r24, 0x1e	; 30
    12e0:	fc 01       	movw	r30, r24
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <gpio_register_pin+0x14e>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	2a 95       	dec	r18
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <gpio_register_pin+0x14a>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	c9 01       	movw	r24, r18
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	4f 96       	adiw	r24, 0x1f	; 31
    1312:	dc 01       	movw	r26, r24
    1314:	8e 81       	ldd	r24, Y+6	; 0x06
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	c9 01       	movw	r24, r18
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	4f 96       	adiw	r24, 0x1f	; 31
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <gpio_register_pin+0x194>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <gpio_register_pin+0x190>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1344:	8a e0       	ldi	r24, 0x0A	; 10
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 04 16 	call	0x2c08	; 0x2c08 <malloc>
    134c:	98 87       	std	Y+8, r25	; 0x08
    134e:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1350:	8f 81       	ldd	r24, Y+7	; 0x07
    1352:	98 85       	ldd	r25, Y+8	; 0x08
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	19 f4       	brne	.+6      	; 0x135e <gpio_register_pin+0x1b6>
        return 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	8c 87       	std	Y+12, r24	; 0x0c
    135c:	10 c0       	rjmp	.+32     	; 0x137e <gpio_register_pin+0x1d6>

    input->pin       = pin;
    135e:	ef 81       	ldd	r30, Y+7	; 0x07
    1360:	f8 85       	ldd	r31, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1366:	ef 81       	ldd	r30, Y+7	; 0x07
    1368:	f8 85       	ldd	r31, Y+8	; 0x08
    136a:	8b 85       	ldd	r24, Y+11	; 0x0b
    136c:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    136e:	8f 81       	ldd	r24, Y+7	; 0x07
    1370:	98 85       	ldd	r25, Y+8	; 0x08
    1372:	06 96       	adiw	r24, 0x06	; 6
    1374:	26 e0       	ldi	r18, 0x06	; 6
    1376:	31 e0       	ldi	r19, 0x01	; 1
    1378:	b9 01       	movw	r22, r18
    137a:	0b d0       	rcall	.+22     	; 0x1392 <list_add>

    return 0;
    137c:	1c 86       	std	Y+12, r1	; 0x0c
    137e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1380:	2c 96       	adiw	r28, 0x0c	; 12
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <list_add+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <list_add+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	7c 83       	std	Y+4, r23	; 0x04
    13a4:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    13a6:	eb 81       	ldd	r30, Y+3	; 0x03
    13a8:	fc 81       	ldd	r31, Y+4	; 0x04
    13aa:	42 81       	ldd	r20, Z+2	; 0x02
    13ac:	53 81       	ldd	r21, Z+3	; 0x03
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	b9 01       	movw	r22, r18
    13b8:	07 d0       	rcall	.+14     	; 0x13c8 <__list_add>
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <__list_add+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <__list_add+0x8>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <__list_add+0xa>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	7c 83       	std	Y+4, r23	; 0x04
    13dc:	6b 83       	std	Y+3, r22	; 0x03
    13de:	5e 83       	std	Y+6, r21	; 0x06
    13e0:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    13e2:	ed 81       	ldd	r30, Y+5	; 0x05
    13e4:	fe 81       	ldd	r31, Y+6	; 0x06
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    new->next = next;
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	93 83       	std	Z+3, r25	; 0x03
    13f8:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    prev->next = new;
    1406:	eb 81       	ldd	r30, Y+3	; 0x03
    1408:	fc 81       	ldd	r31, Y+4	; 0x04
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	93 83       	std	Z+3, r25	; 0x03
    1410:	82 83       	std	Z+2, r24	; 0x02
}
    1412:	26 96       	adiw	r28, 0x06	; 6
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <__gpio_read_pin+0x6>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	86 95       	lsr	r24
    1436:	86 95       	lsr	r24
    1438:	86 95       	lsr	r24
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	87 70       	andi	r24, 0x07	; 7
    1442:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	c9 01       	movw	r24, r18
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	4d 96       	adiw	r24, 0x1d	; 29
    1456:	fc 01       	movw	r30, r24
    1458:	80 81       	ld	r24, Z
    145a:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <__gpio_read_pin+0x4c>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <__gpio_read_pin+0x48>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	2b 97       	sbiw	r28, 0x0b	; 11
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    149a:	80 91 08 01 	lds	r24, 0x0108
    149e:	90 91 09 01 	lds	r25, 0x0109
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	06 97       	sbiw	r24, 0x06	; 6
    14ac:	98 87       	std	Y+8, r25	; 0x08
    14ae:	8f 83       	std	Y+7, r24	; 0x07
    14b0:	55 c0       	rjmp	.+170    	; 0x155c <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    14b2:	ef 81       	ldd	r30, Y+7	; 0x07
    14b4:	f8 85       	ldd	r31, Y+8	; 0x08
    14b6:	90 81       	ld	r25, Z
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	98 17       	cp	r25, r24
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <gpio_read_pin+0x3c>
    14be:	43 c0       	rjmp	.+134    	; 0x1546 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    14c0:	1c 82       	std	Y+4, r1	; 0x04
    14c2:	21 c0       	rjmp	.+66     	; 0x1506 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8f 81       	ldd	r24, Y+7	; 0x07
    14cc:	98 85       	ldd	r25, Y+8	; 0x08
    14ce:	82 0f       	add	r24, r18
    14d0:	93 1f       	adc	r25, r19
    14d2:	fc 01       	movw	r30, r24
    14d4:	32 96       	adiw	r30, 0x02	; 2
    14d6:	40 81       	ld	r20, Z
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9c 01       	movw	r18, r24
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	98 85       	ldd	r25, Y+8	; 0x08
    14e8:	82 0f       	add	r24, r18
    14ea:	93 1f       	adc	r25, r19
    14ec:	fc 01       	movw	r30, r24
    14ee:	32 96       	adiw	r30, 0x02	; 2
    14f0:	80 81       	ld	r24, Z
    14f2:	48 17       	cp	r20, r24
    14f4:	29 f0       	breq	.+10     	; 0x1500 <gpio_read_pin+0x7c>
                    return input->previous_state;
    14f6:	ef 81       	ldd	r30, Y+7	; 0x07
    14f8:	f8 85       	ldd	r31, Y+8	; 0x08
    14fa:	25 81       	ldd	r18, Z+5	; 0x05
    14fc:	2b 87       	std	Y+11, r18	; 0x0b
    14fe:	38 c0       	rjmp	.+112    	; 0x1570 <gpio_read_pin+0xec>
                i++;
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	e0 f2       	brcs	.-72     	; 0x14c4 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    150c:	ef 81       	ldd	r30, Y+7	; 0x07
    150e:	f8 85       	ldd	r31, Y+8	; 0x08
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 27       	eor	r24, r25
    1516:	88 23       	and	r24, r24
    1518:	29 f0       	breq	.+10     	; 0x1524 <gpio_read_pin+0xa0>
    151a:	ef 81       	ldd	r30, Y+7	; 0x07
    151c:	f8 85       	ldd	r31, Y+8	; 0x08
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	8a 87       	std	Y+10, r24	; 0x0a
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <gpio_read_pin+0xb0>
    1524:	ef 81       	ldd	r30, Y+7	; 0x07
    1526:	f8 85       	ldd	r31, Y+8	; 0x08
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	1a 86       	std	Y+10, r1	; 0x0a
    152c:	88 23       	and	r24, r24
    152e:	11 f4       	brne	.+4      	; 0x1534 <gpio_read_pin+0xb0>
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	2a 87       	std	Y+10, r18	; 0x0a
    1534:	8a 85       	ldd	r24, Y+10	; 0x0a
    1536:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1538:	ef 81       	ldd	r30, Y+7	; 0x07
    153a:	f8 85       	ldd	r31, Y+8	; 0x08
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	2b 87       	std	Y+11, r18	; 0x0b
    1544:	15 c0       	rjmp	.+42     	; 0x1570 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1546:	ef 81       	ldd	r30, Y+7	; 0x07
    1548:	f8 85       	ldd	r31, Y+8	; 0x08
    154a:	80 85       	ldd	r24, Z+8	; 0x08
    154c:	91 85       	ldd	r25, Z+9	; 0x09
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	06 97       	sbiw	r24, 0x06	; 6
    1558:	98 87       	std	Y+8, r25	; 0x08
    155a:	8f 83       	std	Y+7, r24	; 0x07
    155c:	8f 81       	ldd	r24, Y+7	; 0x07
    155e:	98 85       	ldd	r25, Y+8	; 0x08
    1560:	06 96       	adiw	r24, 0x06	; 6
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	86 30       	cpi	r24, 0x06	; 6
    1566:	92 07       	cpc	r25, r18
    1568:	09 f0       	breq	.+2      	; 0x156c <gpio_read_pin+0xe8>
    156a:	a3 cf       	rjmp	.-186    	; 0x14b2 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8b 87       	std	Y+11, r24	; 0x0b
    1570:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1572:	2b 96       	adiw	r28, 0x0b	; 11
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <gpio_debouncer+0xa>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <gpio_debouncer+0xc>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <gpio_debouncer+0xe>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1596:	80 91 08 01 	lds	r24, 0x0108
    159a:	90 91 09 01 	lds	r25, 0x0109
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	06 97       	sbiw	r24, 0x06	; 6
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	1b c0       	rjmp	.+54     	; 0x15e4 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    15ae:	00 91 9c 01 	lds	r16, 0x019C
    15b2:	10 91 9d 01 	lds	r17, 0x019D
    15b6:	ed 81       	ldd	r30, Y+5	; 0x05
    15b8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ba:	80 81       	ld	r24, Z
    15bc:	33 df       	rcall	.-410    	; 0x1424 <__gpio_read_pin>
    15be:	28 2f       	mov	r18, r24
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	80 0f       	add	r24, r16
    15c6:	91 1f       	adc	r25, r17
    15c8:	fc 01       	movw	r30, r24
    15ca:	32 96       	adiw	r30, 0x02	; 2
    15cc:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15ce:	ed 81       	ldd	r30, Y+5	; 0x05
    15d0:	fe 81       	ldd	r31, Y+6	; 0x06
    15d2:	80 85       	ldd	r24, Z+8	; 0x08
    15d4:	91 85       	ldd	r25, Z+9	; 0x09
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	06 97       	sbiw	r24, 0x06	; 6
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	06 96       	adiw	r24, 0x06	; 6
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	86 30       	cpi	r24, 0x06	; 6
    15ee:	92 07       	cpc	r25, r18
    15f0:	f1 f6       	brne	.-68     	; 0x15ae <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    15f2:	80 91 9c 01 	lds	r24, 0x019C
    15f6:	90 91 9d 01 	lds	r25, 0x019D
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	90 93 9d 01 	sts	0x019D, r25
    1600:	80 93 9c 01 	sts	0x019C, r24
    1604:	80 91 9c 01 	lds	r24, 0x019C
    1608:	90 91 9d 01 	lds	r25, 0x019D
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	21 f4       	brne	.+8      	; 0x161a <gpio_debouncer+0x96>
        count = 0;
    1612:	10 92 9d 01 	sts	0x019D, r1
    1616:	10 92 9c 01 	sts	0x019C, r1
	
}
    161a:	26 96       	adiw	r28, 0x06	; 6
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <green_detection_front>:
//					   DETEKCIJA/CALLBACK FUNKCIJE						//
//																		//
//////////////////////////////////////////////////////////////////////////

char green_detection_front(uint32_t start_time)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <green_detection_front+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <green_detection_front+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	69 83       	std	Y+1, r22	; 0x01
    1640:	7a 83       	std	Y+2, r23	; 0x02
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	9c 83       	std	Y+4, r25	; 0x04
	if(checkFrontSensors(FRONT_ALL) == DETECTED)
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	36 d7       	rcall	.+3692   	; 0x24b6 <checkFrontSensors>
    164a:	88 23       	and	r24, r24
    164c:	31 f4       	brne	.+12     	; 0x165a <green_detection_front+0x2a>
	{
		stop(HARD_STOP);
    164e:	83 e5       	ldi	r24, 0x53	; 83
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	47 d2       	rcall	.+1166   	; 0x1ae2 <stop>
		return 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	01 c0       	rjmp	.+2      	; 0x165c <green_detection_front+0x2c>
	}
	return 0;
    165a:	1d 82       	std	Y+5, r1	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <green_detection_back>:
		return 1;
	}
	return 0;
}
char green_detection_back(uint32_t start_time)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <green_detection_back+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <green_detection_back+0x8>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	69 83       	std	Y+1, r22	; 0x01
    167e:	7a 83       	std	Y+2, r23	; 0x02
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	9c 83       	std	Y+4, r25	; 0x04
	if(checkRearSensors(BACK_ALL) == DETECTED)
    1684:	8d ef       	ldi	r24, 0xFD	; 253
    1686:	48 d7       	rcall	.+3728   	; 0x2518 <checkRearSensors>
    1688:	88 23       	and	r24, r24
    168a:	31 f4       	brne	.+12     	; 0x1698 <green_detection_back+0x2a>
	{
		stop(HARD_STOP);
    168c:	83 e5       	ldi	r24, 0x53	; 83
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	28 d2       	rcall	.+1104   	; 0x1ae2 <stop>
		return 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	01 c0       	rjmp	.+2      	; 0x169a <green_detection_back+0x2c>
	}
	return 0;
    1698:	1d 82       	std	Y+5, r1	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <greenside>:
	{{185,1120},LOW_SPEED,BACKWARD,NULL},		                //vraca se ispred kocki
	{{1100,1020},LOW_SPEED,FORWARD,green_detection_front},		//gura kocke
	{{900,1020},LOW_SPEED,BACKWARD,green_detection_back}		//vraca se nazad
};
void greenside(void)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	2b 97       	sbiw	r28, 0x0b	; 11
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	
	uint8_t current_position = 0; 
    16c0:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0; 
    16c2:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	89 83       	std	Y+1, r24	; 0x01

	starting_position.x     = 185;
    16c8:	89 eb       	ldi	r24, 0xB9	; 185
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y     = 990;
    16d0:	8e ed       	ldi	r24, 0xDE	; 222
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	98 87       	std	Y+8, r25	; 0x08
    16d6:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = -90;
    16d8:	86 ea       	ldi	r24, 0xA6	; 166
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	9a 87       	std	Y+10, r25	; 0x0a
    16de:	89 87       	std	Y+9, r24	; 0x09
	 
	odometry_set_position(&starting_position);
    16e0:	ce 01       	movw	r24, r28
    16e2:	05 96       	adiw	r24, 0x05	; 5
    16e4:	45 d3       	rcall	.+1674   	; 0x1d70 <odometry_set_position>
	 
	while(1)
	{
		switch(active_state)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	91 05       	cpc	r25, r1
    16f0:	d1 f7       	brne	.-12     	; 0x16e6 <greenside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	8c 83       	std	Y+4, r24	; 0x04
    16f6:	5d c0       	rjmp	.+186    	; 0x17b2 <greenside+0x106>
				{
					odometry_status = odometry_move_to_position(&green_tactic_one_positions[current_position].point, green_tactic_one_positions[current_position].speed,
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	48 2f       	mov	r20, r24
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	ca 01       	movw	r24, r20
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	9c 01       	movw	r18, r24
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	22 0f       	add	r18, r18
    170c:	33 1f       	adc	r19, r19
    170e:	82 0f       	add	r24, r18
    1710:	93 1f       	adc	r25, r19
    1712:	84 0f       	add	r24, r20
    1714:	95 1f       	adc	r25, r21
    1716:	8f 5e       	subi	r24, 0xEF	; 239
    1718:	9e 4f       	sbci	r25, 0xFE	; 254
    171a:	bc 01       	movw	r22, r24
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	48 2f       	mov	r20, r24
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	ca 01       	movw	r24, r20
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	9c 01       	movw	r18, r24
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	84 0f       	add	r24, r20
    1738:	95 1f       	adc	r25, r21
    173a:	fc 01       	movw	r30, r24
    173c:	e8 5e       	subi	r30, 0xE8	; 232
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	a0 81       	ld	r26, Z
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	48 2f       	mov	r20, r24
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	ca 01       	movw	r24, r20
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	9c 01       	movw	r18, r24
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	fc 01       	movw	r30, r24
    1762:	e7 5e       	subi	r30, 0xE7	; 231
    1764:	fe 4f       	sbci	r31, 0xFE	; 254
    1766:	80 81       	ld	r24, Z
    1768:	b8 2f       	mov	r27, r24
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	48 2f       	mov	r20, r24
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	ca 01       	movw	r24, r20
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	9c 01       	movw	r18, r24
    1778:	22 0f       	add	r18, r18
    177a:	33 1f       	adc	r19, r19
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	84 0f       	add	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	fc 01       	movw	r30, r24
    178a:	e6 5e       	subi	r30, 0xE6	; 230
    178c:	fe 4f       	sbci	r31, 0xFE	; 254
    178e:	20 81       	ld	r18, Z
    1790:	31 81       	ldd	r19, Z+1	; 0x01
    1792:	cb 01       	movw	r24, r22
    1794:	6a 2f       	mov	r22, r26
    1796:	4b 2f       	mov	r20, r27
    1798:	39 d2       	rcall	.+1138   	; 0x1c0c <odometry_move_to_position>
    179a:	8a 83       	std	Y+2, r24	; 0x02
																green_tactic_one_positions[current_position].direction, green_tactic_one_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <greenside+0xf8>
    17a2:	a1 cf       	rjmp	.-190    	; 0x16e6 <greenside+0x3a>
					{
						break;
					}
					if(current_position == 3)
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	83 30       	cpi	r24, 0x03	; 3
    17a8:	09 f4       	brne	.+2      	; 0x17ac <greenside+0x100>
    17aa:	ff cf       	rjmp	.-2      	; 0x17aa <greenside+0xfe>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	8c 83       	std	Y+4, r24	; 0x04
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <greenside+0x10e>
    17b8:	9f cf       	rjmp	.-194    	; 0x16f8 <greenside+0x4c>
    17ba:	95 cf       	rjmp	.-214    	; 0x16e6 <greenside+0x3a>

000017bc <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	67 97       	sbiw	r28, 0x17	; 23
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    17d2:	90 91 9e 01 	lds	r25, 0x019E
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	89 17       	cp	r24, r25
    17da:	09 f4       	brne	.+2      	; 0x17de <odometry_set_speed+0x22>
    17dc:	81 c0       	rjmp	.+258    	; 0x18e0 <odometry_set_speed+0x124>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    17de:	86 e5       	ldi	r24, 0x56	; 86
    17e0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	88 8b       	std	Y+16, r24	; 0x10
    17e6:	72 c0       	rjmp	.+228    	; 0x18cc <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a8 e4       	ldi	r26, 0x48	; 72
    17ee:	b2 e4       	ldi	r27, 0x42	; 66
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
    17f2:	9c 87       	std	Y+12, r25	; 0x0c
    17f4:	ad 87       	std	Y+13, r26	; 0x0d
    17f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e4       	ldi	r19, 0x40	; 64
    1804:	4c e1       	ldi	r20, 0x1C	; 28
    1806:	55 e4       	ldi	r21, 0x45	; 69
    1808:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8f 83       	std	Y+7, r24	; 0x07
    1812:	98 87       	std	Y+8, r25	; 0x08
    1814:	a9 87       	std	Y+9, r26	; 0x09
    1816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 34 14 	call	0x2868	; 0x2868 <__cmpsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <odometry_set_speed+0x7e>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	6b 85       	ldd	r22, Y+11	; 0x0b
    1854:	7c 85       	ldd	r23, Y+12	; 0x0c
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	0f c0       	rjmp	.+30     	; 0x189a <odometry_set_speed+0xde>
    187c:	8a ef       	ldi	r24, 0xFA	; 250
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <odometry_set_speed+0xcc>
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <odometry_set_speed+0xc0>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <odometry_set_speed+0x108>
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	ce 01       	movw	r24, r28
    18ce:	0f 96       	adiw	r24, 0x0f	; 15
    18d0:	63 ec       	ldi	r22, 0xC3	; 195
    18d2:	e9 db       	rcall	.-2094   	; 0x10a6 <CAN_Write>
    18d4:	88 23       	and	r24, r24
    18d6:	09 f0       	breq	.+2      	; 0x18da <odometry_set_speed+0x11e>
    18d8:	87 cf       	rjmp	.-242    	; 0x17e8 <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	80 93 9e 01 	sts	0x019E, r24
}
    18e0:	67 96       	adiw	r28, 0x17	; 23
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <odometry_query_position>:

static void odometry_query_position(void)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	66 97       	sbiw	r28, 0x16	; 22
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1906:	80 e5       	ldi	r24, 0x50	; 80
    1908:	8f 87       	std	Y+15, r24	; 0x0f
    190a:	6f c0       	rjmp	.+222    	; 0x19ea <odometry_query_position+0xf8>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a8 e4       	ldi	r26, 0x48	; 72
    1912:	b2 e4       	ldi	r27, 0x42	; 66
    1914:	8b 87       	std	Y+11, r24	; 0x0b
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	ad 87       	std	Y+13, r26	; 0x0d
    191a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6b 85       	ldd	r22, Y+11	; 0x0b
    191e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1920:	8d 85       	ldd	r24, Y+13	; 0x0d
    1922:	9e 85       	ldd	r25, Y+14	; 0x0e
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e4       	ldi	r19, 0x40	; 64
    1928:	4c e1       	ldi	r20, 0x1C	; 28
    192a:	55 e4       	ldi	r21, 0x45	; 69
    192c:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8f 83       	std	Y+7, r24	; 0x07
    1936:	98 87       	std	Y+8, r25	; 0x08
    1938:	a9 87       	std	Y+9, r26	; 0x09
    193a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	8d d7       	rcall	.+3866   	; 0x2868 <__cmpsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <odometry_query_position+0x6a>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	3d c0       	rjmp	.+122    	; 0x19d6 <odometry_query_position+0xe4>
	else if (__tmp > 65535)
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__gesf2>
    1970:	18 16       	cp	r1, r24
    1972:	44 f5       	brge	.+80     	; 0x19c4 <odometry_query_position+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	dc d7       	rcall	.+4024   	; 0x294a <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <odometry_query_position+0xc8>
    199c:	8a ef       	ldi	r24, 0xFA	; 250
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <odometry_query_position+0xb6>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <odometry_query_position+0xaa>
    19c2:	13 c0       	rjmp	.+38     	; 0x19ea <odometry_query_position+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	be d7       	rcall	.+3964   	; 0x294a <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <odometry_query_position+0xf0>
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	ce 01       	movw	r24, r28
    19ec:	0f 96       	adiw	r24, 0x0f	; 15
    19ee:	63 ec       	ldi	r22, 0xC3	; 195
    19f0:	5a db       	rcall	.-2380   	; 0x10a6 <CAN_Write>
    19f2:	88 23       	and	r24, r24
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <odometry_query_position+0x106>
    19f6:	8a cf       	rjmp	.-236    	; 0x190c <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    19f8:	ce 01       	movw	r24, r28
    19fa:	0f 96       	adiw	r24, 0x0f	; 15
    19fc:	61 e0       	ldi	r22, 0x01	; 1
    19fe:	db da       	rcall	.-2634   	; 0xfb6 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1a06:	88 89       	ldd	r24, Y+16	; 0x10
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	38 2f       	mov	r19, r24
    1a0e:	22 27       	eor	r18, r18
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 2b       	or	r24, r18
    1a18:	93 2b       	or	r25, r19
    1a1a:	90 93 0b 01 	sts	0x010B, r25
    1a1e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1a22:	8a 89       	ldd	r24, Y+18	; 0x12
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	38 2f       	mov	r19, r24
    1a2a:	22 27       	eor	r18, r18
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	82 2b       	or	r24, r18
    1a34:	93 2b       	or	r25, r19
    1a36:	90 93 0d 01 	sts	0x010D, r25
    1a3a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1a3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	38 2f       	mov	r19, r24
    1a46:	22 27       	eor	r18, r18
    1a48:	8d 89       	ldd	r24, Y+21	; 0x15
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	82 2b       	or	r24, r18
    1a50:	93 2b       	or	r25, r19
    1a52:	90 93 0f 01 	sts	0x010F, r25
    1a56:	80 93 0e 01 	sts	0x010E, r24
}
    1a5a:	66 96       	adiw	r28, 0x16	; 22
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	27 97       	sbiw	r28, 0x07	; 7
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1a84:	db d3       	rcall	.+1974   	; 0x223c <system_get_system_time>
    1a86:	aa 27       	eor	r26, r26
    1a88:	97 fd       	sbrc	r25, 7
    1a8a:	a0 95       	com	r26
    1a8c:	ba 2f       	mov	r27, r26
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	ab 83       	std	Y+3, r26	; 0x03
    1a94:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    1a96:	2d df       	rcall	.-422    	; 0x18f2 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	71 f0       	breq	.+28     	; 0x1abc <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	ab 81       	ldd	r26, Y+3	; 0x03
    1aa6:	bc 81       	ldd	r27, Y+4	; 0x04
    1aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    1aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	09 95       	icall
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1abc:	80 91 10 01 	lds	r24, 0x0110
    1ac0:	8d 34       	cpi	r24, 0x4D	; 77
    1ac2:	49 f3       	breq	.-46     	; 0x1a96 <odometry_wait_until_done+0x2a>
    1ac4:	80 91 10 01 	lds	r24, 0x0110
    1ac8:	82 35       	cpi	r24, 0x52	; 82
    1aca:	29 f3       	breq	.-54     	; 0x1a96 <odometry_wait_until_done+0x2a>
	
	return ODOMETRY_SUCCESS;
    1acc:	1f 82       	std	Y+7, r1	; 0x07
    1ace:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1ad0:	27 96       	adiw	r28, 0x07	; 7
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <stop>:

void stop(int8_t type)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	67 97       	sbiw	r28, 0x17	; 23
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	8f 87       	std	Y+15, r24	; 0x0f
    1afc:	6c c0       	rjmp	.+216    	; 0x1bd6 <stop+0xf4>

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a8 e4       	ldi	r26, 0x48	; 72
    1b04:	b2 e4       	ldi	r27, 0x42	; 66
    1b06:	8b 87       	std	Y+11, r24	; 0x0b
    1b08:	9c 87       	std	Y+12, r25	; 0x0c
    1b0a:	ad 87       	std	Y+13, r26	; 0x0d
    1b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e4       	ldi	r19, 0x40	; 64
    1b1a:	4c e1       	ldi	r20, 0x1C	; 28
    1b1c:	55 e4       	ldi	r21, 0x45	; 69
    1b1e:	f7 d7       	rcall	.+4078   	; 0x2b0e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8f 83       	std	Y+7, r24	; 0x07
    1b26:	98 87       	std	Y+8, r25	; 0x08
    1b28:	a9 87       	std	Y+9, r26	; 0x09
    1b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	95 d6       	rcall	.+3370   	; 0x2868 <__cmpsf2>
    1b3e:	88 23       	and	r24, r24
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <stop+0x6a>
		__ticks = 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	3b c0       	rjmp	.+118    	; 0x1bc2 <stop+0xe0>
	else if (__tmp > 65535)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	4f e7       	ldi	r20, 0x7F	; 127
    1b5a:	57 e4       	ldi	r21, 0x47	; 71
    1b5c:	d4 d7       	rcall	.+4008   	; 0x2b06 <__gesf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	3c f5       	brge	.+78     	; 0x1bb0 <stop+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	cd d7       	rcall	.+3994   	; 0x2b0e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	e6 d6       	rcall	.+3532   	; 0x294a <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <stop+0xc4>
    1b88:	8a ef       	ldi	r24, 0xFA	; 250
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <stop+0xb2>
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <stop+0xa6>
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <stop+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	c8 d6       	rcall	.+3472   	; 0x294a <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <stop+0xec>
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0f 96       	adiw	r24, 0x0f	; 15
    1bda:	63 ec       	ldi	r22, 0xC3	; 195
    1bdc:	64 da       	rcall	.-2872   	; 0x10a6 <CAN_Write>
    1bde:	88 23       	and	r24, r24
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <stop+0x102>
    1be2:	8d cf       	rjmp	.-230    	; 0x1afe <stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1be4:	86 de       	rcall	.-756    	; 0x18f2 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1be6:	80 91 10 01 	lds	r24, 0x0110
    1bea:	8d 34       	cpi	r24, 0x4D	; 77
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <stop+0x10e>
    1bee:	84 cf       	rjmp	.-248    	; 0x1af8 <stop+0x16>
    1bf0:	80 91 10 01 	lds	r24, 0x0110
    1bf4:	82 35       	cpi	r24, 0x52	; 82
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <stop+0x118>
    1bf8:	7f cf       	rjmp	.-258    	; 0x1af8 <stop+0x16>
}
    1bfa:	67 96       	adiw	r28, 0x17	; 23
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <odometry_move_to_position>:
		
	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	6c 97       	sbiw	r28, 0x1c	; 28
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	98 8f       	std	Y+24, r25	; 0x18
    1c22:	8f 8b       	std	Y+23, r24	; 0x17
    1c24:	69 8f       	std	Y+25, r22	; 0x19
    1c26:	4a 8f       	std	Y+26, r20	; 0x1a
    1c28:	3c 8f       	std	Y+28, r19	; 0x1c
    1c2a:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1c2c:	89 8d       	ldd	r24, Y+25	; 0x19
    1c2e:	c6 dd       	rcall	.-1140   	; 0x17bc <odometry_set_speed>

	buffer[0] = 'G';
    1c30:	87 e4       	ldi	r24, 0x47	; 71
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1c34:	ef 89       	ldd	r30, Y+23	; 0x17
    1c36:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	89 2f       	mov	r24, r25
    1c3e:	99 0f       	add	r25, r25
    1c40:	99 0b       	sbc	r25, r25
    1c42:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1c44:	ef 89       	ldd	r30, Y+23	; 0x17
    1c46:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1c4e:	ef 89       	ldd	r30, Y+23	; 0x17
    1c50:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	89 2f       	mov	r24, r25
    1c58:	99 0f       	add	r25, r25
    1c5a:	99 0b       	sbc	r25, r25
    1c5c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1c5e:	ef 89       	ldd	r30, Y+23	; 0x17
    1c60:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1c68:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    1c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c6c:	81 95       	neg	r24
    1c6e:	8d 8b       	std	Y+21, r24	; 0x15
    1c70:	6c c0       	rjmp	.+216    	; 0x1d4a <odometry_move_to_position+0x13e>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a8 e4       	ldi	r26, 0x48	; 72
    1c78:	b2 e4       	ldi	r27, 0x42	; 66
    1c7a:	8b 87       	std	Y+11, r24	; 0x0b
    1c7c:	9c 87       	std	Y+12, r25	; 0x0c
    1c7e:	ad 87       	std	Y+13, r26	; 0x0d
    1c80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e4       	ldi	r19, 0x40	; 64
    1c8e:	4c e1       	ldi	r20, 0x1C	; 28
    1c90:	55 e4       	ldi	r21, 0x45	; 69
    1c92:	3d d7       	rcall	.+3706   	; 0x2b0e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8f 83       	std	Y+7, r24	; 0x07
    1c9a:	98 87       	std	Y+8, r25	; 0x08
    1c9c:	a9 87       	std	Y+9, r26	; 0x09
    1c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	db d5       	rcall	.+2998   	; 0x2868 <__cmpsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <odometry_move_to_position+0xb4>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3b c0       	rjmp	.+118    	; 0x1d36 <odometry_move_to_position+0x12a>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	1a d7       	rcall	.+3636   	; 0x2b06 <__gesf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	3c f5       	brge	.+78     	; 0x1d24 <odometry_move_to_position+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	13 d7       	rcall	.+3622   	; 0x2b0e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	2c d6       	rcall	.+3160   	; 0x294a <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <odometry_move_to_position+0x10e>
    1cfc:	8a ef       	ldi	r24, 0xFA	; 250
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <odometry_move_to_position+0xfc>
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <odometry_move_to_position+0xf0>
    1d22:	13 c0       	rjmp	.+38     	; 0x1d4a <odometry_move_to_position+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	0e d6       	rcall	.+3100   	; 0x294a <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <odometry_move_to_position+0x136>
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	0f 96       	adiw	r24, 0x0f	; 15
    1d4e:	63 ec       	ldi	r22, 0xC3	; 195
    1d50:	aa d9       	rcall	.-3244   	; 0x10a6 <CAN_Write>
    1d52:	88 23       	and	r24, r24
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <odometry_move_to_position+0x14c>
    1d56:	8d cf       	rjmp	.-230    	; 0x1c72 <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5c:	87 de       	rcall	.-754    	; 0x1a6c <odometry_wait_until_done>
}
    1d5e:	6c 96       	adiw	r28, 0x1c	; 28
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	69 97       	sbiw	r28, 0x19	; 25
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	99 8f       	std	Y+25, r25	; 0x19
    1d86:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    1d88:	89 e4       	ldi	r24, 0x49	; 73
    1d8a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    1d8c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1d8e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	89 2f       	mov	r24, r25
    1d96:	99 0f       	add	r25, r25
    1d98:	99 0b       	sbc	r25, r25
    1d9a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    1d9c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1d9e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    1da6:	e8 8d       	ldd	r30, Y+24	; 0x18
    1da8:	f9 8d       	ldd	r31, Y+25	; 0x19
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	89 2f       	mov	r24, r25
    1db0:	99 0f       	add	r25, r25
    1db2:	99 0b       	sbc	r25, r25
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    1db6:	e8 8d       	ldd	r30, Y+24	; 0x18
    1db8:	f9 8d       	ldd	r31, Y+25	; 0x19
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    1dc0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1dc2:	f9 8d       	ldd	r31, Y+25	; 0x19
    1dc4:	84 81       	ldd	r24, Z+4	; 0x04
    1dc6:	95 81       	ldd	r25, Z+5	; 0x05
    1dc8:	81 95       	neg	r24
    1dca:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    1dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dce:	99 27       	eor	r25, r25
    1dd0:	87 fd       	sbrc	r24, 7
    1dd2:	90 95       	com	r25
    1dd4:	89 2f       	mov	r24, r25
    1dd6:	99 0f       	add	r25, r25
    1dd8:	99 0b       	sbc	r25, r25
    1dda:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    1de0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1de2:	f9 8d       	ldd	r31, Y+25	; 0x19
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	90 93 0b 01 	sts	0x010B, r25
    1dec:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1df0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1df2:	f9 8d       	ldd	r31, Y+25	; 0x19
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	90 93 0d 01 	sts	0x010D, r25
    1dfc:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    1e00:	e8 8d       	ldd	r30, Y+24	; 0x18
    1e02:	f9 8d       	ldd	r31, Y+25	; 0x19
    1e04:	84 81       	ldd	r24, Z+4	; 0x04
    1e06:	95 81       	ldd	r25, Z+5	; 0x05
    1e08:	90 95       	com	r25
    1e0a:	81 95       	neg	r24
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	90 93 0f 01 	sts	0x010F, r25
    1e12:	80 93 0e 01 	sts	0x010E, r24
    1e16:	6c c0       	rjmp	.+216    	; 0x1ef0 <odometry_set_position+0x180>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a8 e4       	ldi	r26, 0x48	; 72
    1e1e:	b2 e4       	ldi	r27, 0x42	; 66
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e4       	ldi	r19, 0x40	; 64
    1e34:	4c e1       	ldi	r20, 0x1C	; 28
    1e36:	55 e4       	ldi	r21, 0x45	; 69
    1e38:	6a d6       	rcall	.+3284   	; 0x2b0e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	08 d5       	rcall	.+2576   	; 0x2868 <__cmpsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <odometry_set_position+0xf6>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	3b c0       	rjmp	.+118    	; 0x1edc <odometry_set_position+0x16c>
	else if (__tmp > 65535)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	47 d6       	rcall	.+3214   	; 0x2b06 <__gesf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	3c f5       	brge	.+78     	; 0x1eca <odometry_set_position+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	40 d6       	rcall	.+3200   	; 0x2b0e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	59 d5       	rcall	.+2738   	; 0x294a <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <odometry_set_position+0x150>
    1ea2:	8a ef       	ldi	r24, 0xFA	; 250
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <odometry_set_position+0x13e>
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <odometry_set_position+0x132>
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <odometry_set_position+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	3b d5       	rcall	.+2678   	; 0x294a <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <odometry_set_position+0x178>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	40 96       	adiw	r24, 0x10	; 16
    1ef4:	63 ec       	ldi	r22, 0xC3	; 195
    1ef6:	d7 d8       	rcall	.-3666   	; 0x10a6 <CAN_Write>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f0       	breq	.+2      	; 0x1efe <odometry_set_position+0x18e>
    1efc:	8d cf       	rjmp	.-230    	; 0x1e18 <odometry_set_position+0xa8>
		_delay_ms(50);
}
    1efe:	69 96       	adiw	r28, 0x19	; 25
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <purple_detection_front>:
//					   DETEKCIJA/CALLBACK FUNKCIJE						//
//																		//
//////////////////////////////////////////////////////////////////////////

char purple_detection_front(uint32_t start_time)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <purple_detection_front+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <purple_detection_front+0x8>
    1f18:	0f 92       	push	r0
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	69 83       	std	Y+1, r22	; 0x01
    1f20:	7a 83       	std	Y+2, r23	; 0x02
    1f22:	8b 83       	std	Y+3, r24	; 0x03
    1f24:	9c 83       	std	Y+4, r25	; 0x04
	if(checkFrontSensors(FRONT_ALL) == DETECTED)
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	c6 d2       	rcall	.+1420   	; 0x24b6 <checkFrontSensors>
    1f2a:	88 23       	and	r24, r24
    1f2c:	31 f4       	brne	.+12     	; 0x1f3a <purple_detection_front+0x2a>
	{
		stop(HARD_STOP);
    1f2e:	83 e5       	ldi	r24, 0x53	; 83
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	d7 dd       	rcall	.-1106   	; 0x1ae2 <stop>
		return 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <purple_detection_front+0x2c>
	}
	return 0;
    1f3a:	1d 82       	std	Y+5, r1	; 0x05
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <purple_detection_back>:
		return 1;
	}
	return 0;
}
char purple_detection_back(uint32_t start_time)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <purple_detection_back+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <purple_detection_back+0x8>
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	69 83       	std	Y+1, r22	; 0x01
    1f5e:	7a 83       	std	Y+2, r23	; 0x02
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	9c 83       	std	Y+4, r25	; 0x04
	if(checkRearSensors(BACK_ALL) == DETECTED)
    1f64:	8d ef       	ldi	r24, 0xFD	; 253
    1f66:	d8 d2       	rcall	.+1456   	; 0x2518 <checkRearSensors>
    1f68:	88 23       	and	r24, r24
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <purple_detection_back+0x2a>
	{
		stop(HARD_STOP);
    1f6c:	83 e5       	ldi	r24, 0x53	; 83
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	b8 dd       	rcall	.-1168   	; 0x1ae2 <stop>
		return 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <purple_detection_back+0x2c>
	}
	return 0;
    1f78:	1d 82       	std	Y+5, r1	; 0x05
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <purpleside>:
	{{185,880},LOW_SPEED,BACKWARD,NULL},		                     //POSITION 1			MOVE BACK INFRONT OF THE BLOCKS 
	{{1100,980},LOW_SPEED,FORWARD,purple_detection_front},		    //POSITION 2			PUSH THE BLOCKS TO THE GATE
	{{185,980},LOW_SPEED,BACKWARD,purple_detection_back}		    //POSITION 3			GET  BACK
};
void purpleside(void)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	2b 97       	sbiw	r28, 0x0b	; 11
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    1fa0:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position = 0;
    1fa2:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	
	starting_position.x		= 180;
    1fa8:	84 eb       	ldi	r24, 0xB4	; 180
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
	starting_position.y		= 1010;
    1fb0:	82 ef       	ldi	r24, 0xF2	; 242
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	98 87       	std	Y+8, r25	; 0x08
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
	starting_position.angle = 90;
    1fb8:	8a e5       	ldi	r24, 0x5A	; 90
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9a 87       	std	Y+10, r25	; 0x0a
    1fbe:	89 87       	std	Y+9, r24	; 0x09
	
	odometry_set_position(&starting_position);
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	05 96       	adiw	r24, 0x05	; 5
    1fc4:	d5 de       	rcall	.-598    	; 0x1d70 <odometry_set_position>
	
	while(1)
	{
		switch(active_state)
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	99 27       	eor	r25, r25
    1fca:	87 fd       	sbrc	r24, 7
    1fcc:	90 95       	com	r25
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <purpleside+0x3a>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
    1fd8:	5d c0       	rjmp	.+186    	; 0x2094 <purpleside+0x108>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	48 2f       	mov	r20, r24
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	22 0f       	add	r18, r18
    1fea:	33 1f       	adc	r19, r19
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	82 0f       	add	r24, r18
    1ff2:	93 1f       	adc	r25, r19
    1ff4:	84 0f       	add	r24, r20
    1ff6:	95 1f       	adc	r25, r21
    1ff8:	83 5c       	subi	r24, 0xC3	; 195
    1ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	48 2f       	mov	r20, r24
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	ca 01       	movw	r24, r20
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	9c 01       	movw	r18, r24
    200c:	22 0f       	add	r18, r18
    200e:	33 1f       	adc	r19, r19
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	82 0f       	add	r24, r18
    2016:	93 1f       	adc	r25, r19
    2018:	84 0f       	add	r24, r20
    201a:	95 1f       	adc	r25, r21
    201c:	fc 01       	movw	r30, r24
    201e:	ec 5b       	subi	r30, 0xBC	; 188
    2020:	fe 4f       	sbci	r31, 0xFE	; 254
    2022:	a0 81       	ld	r26, Z
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	48 2f       	mov	r20, r24
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	ca 01       	movw	r24, r20
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	9c 01       	movw	r18, r24
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	82 0f       	add	r24, r18
    203c:	93 1f       	adc	r25, r19
    203e:	84 0f       	add	r24, r20
    2040:	95 1f       	adc	r25, r21
    2042:	fc 01       	movw	r30, r24
    2044:	eb 5b       	subi	r30, 0xBB	; 187
    2046:	fe 4f       	sbci	r31, 0xFE	; 254
    2048:	80 81       	ld	r24, Z
    204a:	b8 2f       	mov	r27, r24
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	48 2f       	mov	r20, r24
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	ca 01       	movw	r24, r20
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	9c 01       	movw	r18, r24
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	82 0f       	add	r24, r18
    2064:	93 1f       	adc	r25, r19
    2066:	84 0f       	add	r24, r20
    2068:	95 1f       	adc	r25, r21
    206a:	fc 01       	movw	r30, r24
    206c:	ea 5b       	subi	r30, 0xBA	; 186
    206e:	fe 4f       	sbci	r31, 0xFE	; 254
    2070:	20 81       	ld	r18, Z
    2072:	31 81       	ldd	r19, Z+1	; 0x01
    2074:	cb 01       	movw	r24, r22
    2076:	6a 2f       	mov	r22, r26
    2078:	4b 2f       	mov	r20, r27
    207a:	c8 dd       	rcall	.-1136   	; 0x1c0c <odometry_move_to_position>
    207c:	8a 83       	std	Y+2, r24	; 0x02
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	09 f4       	brne	.+2      	; 0x2086 <purpleside+0xfa>
    2084:	a0 cf       	rjmp	.-192    	; 0x1fc6 <purpleside+0x3a>
					{
						break;
					}
					else if(current_position == 3)
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	83 30       	cpi	r24, 0x03	; 3
    208a:	09 f4       	brne	.+2      	; 0x208e <purpleside+0x102>
    208c:	ff cf       	rjmp	.-2      	; 0x208c <purpleside+0x100>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	8c 83       	std	Y+4, r24	; 0x04
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	84 30       	cpi	r24, 0x04	; 4
    2098:	08 f4       	brcc	.+2      	; 0x209c <purpleside+0x110>
    209a:	9f cf       	rjmp	.-194    	; 0x1fda <purpleside+0x4e>
    209c:	94 cf       	rjmp	.-216    	; 0x1fc6 <purpleside+0x3a>

0000209e <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <timer_register_callback+0x6>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	90 93 a0 01 	sts	0x01A0, r25
    20b4:	80 93 9f 01 	sts	0x019F, r24
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <timer_init+0xa>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    20d4:	e0 e8       	ldi	r30, 0x80	; 128
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    20da:	e1 e8       	ldi	r30, 0x81	; 129
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	89 e0       	ldi	r24, 0x09	; 9
    20e0:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    20e2:	08 e8       	ldi	r16, 0x88	; 136
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	cc 01       	movw	r24, r24
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	56 d4       	rcall	.+2220   	; 0x29a2 <__floatunsisf>
    20f6:	9b 01       	movw	r18, r22
    20f8:	ac 01       	movw	r20, r24
    20fa:	60 e8       	ldi	r22, 0x80	; 128
    20fc:	76 e9       	ldi	r23, 0x96	; 150
    20fe:	88 e1       	ldi	r24, 0x18	; 24
    2100:	9b e4       	ldi	r25, 0x4B	; 75
    2102:	b6 d3       	rcall	.+1900   	; 0x2870 <__divsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	45 d3       	rcall	.+1674   	; 0x27a0 <__addsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	15 d4       	rcall	.+2090   	; 0x294a <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    212a:	ef e6       	ldi	r30, 0x6F	; 111
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	80 83       	st	Z, r24

	SREG |= 0x80;
    2132:	af e5       	ldi	r26, 0x5F	; 95
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ef e5       	ldi	r30, 0x5F	; 95
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	80 68       	ori	r24, 0x80	; 128
    213e:	8c 93       	st	X, r24
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	00 90 5b 00 	lds	r0, 0x005B
    215a:	0f 92       	push	r0
    215c:	11 24       	eor	r1, r1
    215e:	2f 93       	push	r18
    2160:	3f 93       	push	r19
    2162:	4f 93       	push	r20
    2164:	5f 93       	push	r21
    2166:	6f 93       	push	r22
    2168:	7f 93       	push	r23
    216a:	8f 93       	push	r24
    216c:	9f 93       	push	r25
    216e:	af 93       	push	r26
    2170:	bf 93       	push	r27
    2172:	ef 93       	push	r30
    2174:	ff 93       	push	r31
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    217e:	80 91 9f 01 	lds	r24, 0x019F
    2182:	90 91 a0 01 	lds	r25, 0x01A0
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	29 f0       	breq	.+10     	; 0x2194 <__vector_12+0x46>
        timer_callback();
    218a:	e0 91 9f 01 	lds	r30, 0x019F
    218e:	f0 91 a0 01 	lds	r31, 0x01A0
    2192:	09 95       	icall
	if(sys_time >= 90000)
    2194:	80 91 a1 01 	lds	r24, 0x01A1
    2198:	90 91 a2 01 	lds	r25, 0x01A2
    219c:	a0 91 a3 01 	lds	r26, 0x01A3
    21a0:	b0 91 a4 01 	lds	r27, 0x01A4
    21a4:	80 39       	cpi	r24, 0x90	; 144
    21a6:	2f e5       	ldi	r18, 0x5F	; 95
    21a8:	92 07       	cpc	r25, r18
    21aa:	21 e0       	ldi	r18, 0x01	; 1
    21ac:	a2 07       	cpc	r26, r18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	b2 07       	cpc	r27, r18
    21b2:	10 f0       	brcs	.+4      	; 0x21b8 <__vector_12+0x6a>
		actuators_umbrella();
    21b4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <actuators_umbrella>
	sys_time++;
    21b8:	80 91 a1 01 	lds	r24, 0x01A1
    21bc:	90 91 a2 01 	lds	r25, 0x01A2
    21c0:	a0 91 a3 01 	lds	r26, 0x01A3
    21c4:	b0 91 a4 01 	lds	r27, 0x01A4
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	a1 1d       	adc	r26, r1
    21cc:	b1 1d       	adc	r27, r1
    21ce:	80 93 a1 01 	sts	0x01A1, r24
    21d2:	90 93 a2 01 	sts	0x01A2, r25
    21d6:	a0 93 a3 01 	sts	0x01A3, r26
    21da:	b0 93 a4 01 	sts	0x01A4, r27
}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	bf 91       	pop	r27
    21e8:	af 91       	pop	r26
    21ea:	9f 91       	pop	r25
    21ec:	8f 91       	pop	r24
    21ee:	7f 91       	pop	r23
    21f0:	6f 91       	pop	r22
    21f2:	5f 91       	pop	r21
    21f4:	4f 91       	pop	r20
    21f6:	3f 91       	pop	r19
    21f8:	2f 91       	pop	r18
    21fa:	0f 90       	pop	r0
    21fc:	00 92 5b 00 	sts	0x005B, r0
    2200:	0f 90       	pop	r0
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	18 95       	reti

0000220a <system_reset_system_time>:

void system_reset_system_time(void)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2212:	10 92 a1 01 	sts	0x01A1, r1
    2216:	10 92 a2 01 	sts	0x01A2, r1
    221a:	10 92 a3 01 	sts	0x01A3, r1
    221e:	10 92 a4 01 	sts	0x01A4, r1
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <system_set_match_started>:
void system_set_match_started(void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 a5 01 	sts	0x01A5, r24
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2244:	80 91 a1 01 	lds	r24, 0x01A1
    2248:	90 91 a2 01 	lds	r25, 0x01A2
    224c:	a0 91 a3 01 	lds	r26, 0x01A3
    2250:	b0 91 a4 01 	lds	r27, 0x01A4
}
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <system_init>:
	uint32_t current;
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
void system_init(void)
{	
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	6c 97       	sbiw	r28, 0x1c	; 28
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    2272:	82 ec       	ldi	r24, 0xC2	; 194
    2274:	9a e0       	ldi	r25, 0x0A	; 10
    2276:	13 df       	rcall	.-474    	; 0x209e <timer_register_callback>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a8 ec       	ldi	r26, 0xC8	; 200
    227e:	b2 e4       	ldi	r27, 0x42	; 66
    2280:	89 8f       	std	Y+25, r24	; 0x19
    2282:	9a 8f       	std	Y+26, r25	; 0x1a
    2284:	ab 8f       	std	Y+27, r26	; 0x1b
    2286:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	69 8d       	ldd	r22, Y+25	; 0x19
    228a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e4       	ldi	r19, 0x40	; 64
    2294:	4c e1       	ldi	r20, 0x1C	; 28
    2296:	55 e4       	ldi	r21, 0x45	; 69
    2298:	3a d4       	rcall	.+2164   	; 0x2b0e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8d 8b       	std	Y+21, r24	; 0x15
    22a0:	9e 8b       	std	Y+22, r25	; 0x16
    22a2:	af 8b       	std	Y+23, r26	; 0x17
    22a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a6:	6d 89       	ldd	r22, Y+21	; 0x15
    22a8:	7e 89       	ldd	r23, Y+22	; 0x16
    22aa:	8f 89       	ldd	r24, Y+23	; 0x17
    22ac:	98 8d       	ldd	r25, Y+24	; 0x18
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	d8 d2       	rcall	.+1456   	; 0x2868 <__cmpsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <system_init+0x68>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
    22c4:	3b c0       	rjmp	.+118    	; 0x233c <system_init+0xde>
	else if (__tmp > 65535)
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	17 d4       	rcall	.+2094   	; 0x2b06 <__gesf2>
    22d8:	18 16       	cp	r1, r24
    22da:	3c f5       	brge	.+78     	; 0x232a <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	69 8d       	ldd	r22, Y+25	; 0x19
    22de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	10 d4       	rcall	.+2080   	; 0x2b0e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	29 d3       	rcall	.+1618   	; 0x294a <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <system_init+0xc2>
    2302:	8a ef       	ldi	r24, 0xFA	; 250
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9a 8b       	std	Y+18, r25	; 0x12
    2308:	89 8b       	std	Y+17, r24	; 0x11
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <system_init+0xb0>
    2312:	9a 8b       	std	Y+18, r25	; 0x12
    2314:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9c 8b       	std	Y+20, r25	; 0x14
    231e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8b 89       	ldd	r24, Y+19	; 0x13
    2322:	9c 89       	ldd	r25, Y+20	; 0x14
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <system_init+0xa4>
    2328:	13 c0       	rjmp	.+38     	; 0x2350 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	0b d3       	rcall	.+1558   	; 0x294a <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9c 8b       	std	Y+20, r25	; 0x14
    233a:	8b 8b       	std	Y+19, r24	; 0x13
    233c:	8b 89       	ldd	r24, Y+19	; 0x13
    233e:	9c 89       	ldd	r25, Y+20	; 0x14
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
    2344:	8f 85       	ldd	r24, Y+15	; 0x0f
    2346:	98 89       	ldd	r25, Y+16	; 0x10
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <system_init+0xea>
    234c:	98 8b       	std	Y+16, r25	; 0x10
    234e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    2350:	88 e2       	ldi	r24, 0x28	; 40
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    235a:	89 e2       	ldi	r24, 0x29	; 41
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    2364:	88 e0       	ldi	r24, 0x08	; 8
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    236e:	8a e0       	ldi	r24, 0x0A	; 10
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    2378:	8c e0       	ldi	r24, 0x0C	; 12
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    2382:	8e e0       	ldi	r24, 0x0E	; 14
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <gpio_register_pin>
	
	
	DDRG = 0xff;
    238c:	e3 e3       	ldi	r30, 0x33	; 51
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	80 83       	st	Z, r24
	PORTG = 0x00;
    2394:	e4 e3       	ldi	r30, 0x34	; 52
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	10 82       	st	Z, r1
	servo_init(50);
    239a:	82 e3       	ldi	r24, 0x32	; 50
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <servo_init>
	timer_init(1000);
    23a2:	88 ee       	ldi	r24, 0xE8	; 232
    23a4:	93 e0       	ldi	r25, 0x03	; 3
    23a6:	8d de       	rcall	.-742    	; 0x20c2 <timer_init>
	CAN_Init(1);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <CAN_Init>

	actuators_setup();
    23ae:	0e 94 63 04 	call	0x8c6	; 0x8c6 <actuators_setup>
    23b2:	6c c0       	rjmp	.+216    	; 0x248c <system_init+0x22e>
	
	while(gpio_read_pin(JUMPER_PIN))
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e2       	ldi	r26, 0x20	; 32
    23ba:	b1 e4       	ldi	r27, 0x41	; 65
    23bc:	8b 87       	std	Y+11, r24	; 0x0b
    23be:	9c 87       	std	Y+12, r25	; 0x0c
    23c0:	ad 87       	std	Y+13, r26	; 0x0d
    23c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e4       	ldi	r19, 0x40	; 64
    23d0:	4c e1       	ldi	r20, 0x1C	; 28
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	9c d3       	rcall	.+1848   	; 0x2b0e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	98 87       	std	Y+8, r25	; 0x08
    23de:	a9 87       	std	Y+9, r26	; 0x09
    23e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e2:	6f 81       	ldd	r22, Y+7	; 0x07
    23e4:	78 85       	ldd	r23, Y+8	; 0x08
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	3a d2       	rcall	.+1140   	; 0x2868 <__cmpsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <system_init+0x1a4>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	3b c0       	rjmp	.+118    	; 0x2478 <system_init+0x21a>
	else if (__tmp > 65535)
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	79 d3       	rcall	.+1778   	; 0x2b06 <__gesf2>
    2414:	18 16       	cp	r1, r24
    2416:	3c f5       	brge	.+78     	; 0x2466 <system_init+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	72 d3       	rcall	.+1764   	; 0x2b0e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	8b d2       	rcall	.+1302   	; 0x294a <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	0f c0       	rjmp	.+30     	; 0x245c <system_init+0x1fe>
    243e:	8a ef       	ldi	r24, 0xFA	; 250
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <system_init+0x1ec>
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <system_init+0x1e0>
    2464:	13 c0       	rjmp	.+38     	; 0x248c <system_init+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	6d d2       	rcall	.+1242   	; 0x294a <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <system_init+0x226>
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	88 e2       	ldi	r24, 0x28	; 40
    248e:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2492:	88 23       	and	r24, r24
    2494:	09 f0       	breq	.+2      	; 0x2498 <system_init+0x23a>
    2496:	8e cf       	rjmp	.-228    	; 0x23b4 <system_init+0x156>
		_delay_ms(10);
	PORTG = 0xff;
    2498:	e4 e3       	ldi	r30, 0x34	; 52
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	80 83       	st	Z, r24
	system_reset_system_time();
    24a0:	b4 de       	rcall	.-664    	; 0x220a <system_reset_system_time>
	system_set_match_started();
    24a2:	c2 de       	rcall	.-636    	; 0x2228 <system_set_match_started>
	
}
    24a4:	6c 96       	adiw	r28, 0x1c	; 28
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <checkFrontSensors>:
signed char checkFrontSensors(signed char sensor)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <checkFrontSensors+0x6>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == FRONT_LEFT_SIDE)
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	39 f4       	brne	.+14     	; 0x24d6 <checkFrontSensors+0x20>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE)
    24c8:	88 e0       	ldi	r24, 0x08	; 8
    24ca:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	d9 f4       	brne	.+54     	; 0x2508 <checkFrontSensors+0x52>
		{
			return DETECTED;
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	1b c0       	rjmp	.+54     	; 0x250c <checkFrontSensors+0x56>
		}
	}
	else if(sensor == FRONT_RIGHT_SIDE)
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	82 30       	cpi	r24, 0x02	; 2
    24da:	39 f4       	brne	.+14     	; 0x24ea <checkFrontSensors+0x34>
	{
		if(gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    24dc:	8a e0       	ldi	r24, 0x0A	; 10
    24de:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	89 f4       	brne	.+34     	; 0x2508 <checkFrontSensors+0x52>
		{
			return DETECTED;
    24e6:	1a 82       	std	Y+2, r1	; 0x02
    24e8:	11 c0       	rjmp	.+34     	; 0x250c <checkFrontSensors+0x56>
		}
	}
	else if(sensor == FRONT_ALL)
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	83 30       	cpi	r24, 0x03	; 3
    24ee:	61 f4       	brne	.+24     	; 0x2508 <checkFrontSensors+0x52>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE || gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    24f0:	88 e0       	ldi	r24, 0x08	; 8
    24f2:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	29 f0       	breq	.+10     	; 0x2504 <checkFrontSensors+0x4e>
    24fa:	8a e0       	ldi	r24, 0x0A	; 10
    24fc:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	11 f4       	brne	.+4      	; 0x2508 <checkFrontSensors+0x52>
		{
			return DETECTED;
    2504:	1a 82       	std	Y+2, r1	; 0x02
    2506:	02 c0       	rjmp	.+4      	; 0x250c <checkFrontSensors+0x56>
		}
	}
	return NOT_DETECTED;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <checkRearSensors>:
signed char checkRearSensors(signed char sensor)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <checkRearSensors+0x6>
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == BACK_LEFT_SIDE)
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	8f 3f       	cpi	r24, 0xFF	; 255
    2528:	39 f4       	brne	.+14     	; 0x2538 <checkRearSensors+0x20>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE)
    252a:	8c e0       	ldi	r24, 0x0C	; 12
    252c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	d9 f4       	brne	.+54     	; 0x256a <checkRearSensors+0x52>
		{
			return DETECTED;
    2534:	1a 82       	std	Y+2, r1	; 0x02
    2536:	1b c0       	rjmp	.+54     	; 0x256e <checkRearSensors+0x56>
		}
	}
	else if(sensor == BACK_RIGHT_SIDE)
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	8e 3f       	cpi	r24, 0xFE	; 254
    253c:	39 f4       	brne	.+14     	; 0x254c <checkRearSensors+0x34>
	{
		if(gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    253e:	8e e0       	ldi	r24, 0x0E	; 14
    2540:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	89 f4       	brne	.+34     	; 0x256a <checkRearSensors+0x52>
		{
			return DETECTED;
    2548:	1a 82       	std	Y+2, r1	; 0x02
    254a:	11 c0       	rjmp	.+34     	; 0x256e <checkRearSensors+0x56>
		}
	}
	else if(sensor == BACK_ALL)
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	8d 3f       	cpi	r24, 0xFD	; 253
    2550:	61 f4       	brne	.+24     	; 0x256a <checkRearSensors+0x52>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE || gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    2552:	8c e0       	ldi	r24, 0x0C	; 12
    2554:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	29 f0       	breq	.+10     	; 0x2566 <checkRearSensors+0x4e>
    255c:	8e e0       	ldi	r24, 0x0E	; 14
    255e:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpio_read_pin>
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	11 f4       	brne	.+4      	; 0x256a <checkRearSensors+0x52>
		{
			return DETECTED;
    2566:	1a 82       	std	Y+2, r1	; 0x02
    2568:	02 c0       	rjmp	.+4      	; 0x256e <checkRearSensors+0x56>
		}
	}
	return NOT_DETECTED;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	00 90 5b 00 	lds	r0, 0x005B
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	ef 93       	push	r30
    2594:	ff 93       	push	r31
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    259e:	80 91 a6 01 	lds	r24, 0x01A6
    25a2:	88 23       	and	r24, r24
    25a4:	d9 f0       	breq	.+54     	; 0x25dc <__vector_23+0x62>
	{
		tx0_counter--;
    25a6:	80 91 a6 01 	lds	r24, 0x01A6
    25aa:	81 50       	subi	r24, 0x01	; 1
    25ac:	80 93 a6 01 	sts	0x01A6, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    25b0:	a6 ec       	ldi	r26, 0xC6	; 198
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	80 91 a7 01 	lds	r24, 0x01A7
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 55       	subi	r30, 0x52	; 82
    25c0:	fe 4f       	sbci	r31, 0xFE	; 254
    25c2:	80 81       	ld	r24, Z
    25c4:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    25c6:	80 91 a7 01 	lds	r24, 0x01A7
    25ca:	8f 5f       	subi	r24, 0xFF	; 255
    25cc:	80 93 a7 01 	sts	0x01A7, r24
    25d0:	80 91 a7 01 	lds	r24, 0x01A7
    25d4:	80 34       	cpi	r24, 0x40	; 64
    25d6:	11 f4       	brne	.+4      	; 0x25dc <__vector_23+0x62>
			tx0_rd_index = 0;
    25d8:	10 92 a7 01 	sts	0x01A7, r1
	}
}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	ff 91       	pop	r31
    25e2:	ef 91       	pop	r30
    25e4:	bf 91       	pop	r27
    25e6:	af 91       	pop	r26
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	0f 90       	pop	r0
    25ee:	00 92 5b 00 	sts	0x005B, r0
    25f2:	0f 90       	pop	r0
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	0f 90       	pop	r0
    25f8:	1f 90       	pop	r1
    25fa:	18 95       	reti

000025fc <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	0f 92       	push	r0
    2604:	00 90 5b 00 	lds	r0, 0x005B
    2608:	0f 92       	push	r0
    260a:	11 24       	eor	r1, r1
    260c:	2f 93       	push	r18
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	ef 93       	push	r30
    2614:	ff 93       	push	r31
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2620:	e0 ec       	ldi	r30, 0xC0	; 192
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	8c 71       	andi	r24, 0x1C	; 28
    2630:	90 70       	andi	r25, 0x00	; 0
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	d9 f4       	brne	.+54     	; 0x266c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2636:	80 91 a8 01 	lds	r24, 0x01A8
    263a:	88 2f       	mov	r24, r24
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	e6 ec       	ldi	r30, 0xC6	; 198
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	20 81       	ld	r18, Z
    2644:	fc 01       	movw	r30, r24
    2646:	e2 51       	subi	r30, 0x12	; 18
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    264c:	80 91 a8 01 	lds	r24, 0x01A8
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 a8 01 	sts	0x01A8, r24
    2656:	80 91 a8 01 	lds	r24, 0x01A8
    265a:	80 34       	cpi	r24, 0x40	; 64
    265c:	11 f4       	brne	.+4      	; 0x2662 <__vector_21+0x66>
			rx0_wr_index = 0;
    265e:	10 92 a8 01 	sts	0x01A8, r1

		rx0_counter++;
    2662:	80 91 a9 01 	lds	r24, 0x01A9
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	80 93 a9 01 	sts	0x01A9, r24
	}
}
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	9f 91       	pop	r25
    2678:	8f 91       	pop	r24
    267a:	2f 91       	pop	r18
    267c:	0f 90       	pop	r0
    267e:	00 92 5b 00 	sts	0x005B, r0
    2682:	0f 90       	pop	r0
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	0f 90       	pop	r0
    2688:	1f 90       	pop	r1
    268a:	18 95       	reti

0000268c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    268c:	1f 92       	push	r1
    268e:	0f 92       	push	r0
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	0f 92       	push	r0
    2694:	00 90 5b 00 	lds	r0, 0x005B
    2698:	0f 92       	push	r0
    269a:	11 24       	eor	r1, r1
    269c:	8f 93       	push	r24
    269e:	9f 93       	push	r25
    26a0:	af 93       	push	r26
    26a2:	bf 93       	push	r27
    26a4:	ef 93       	push	r30
    26a6:	ff 93       	push	r31
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    26b0:	80 91 aa 01 	lds	r24, 0x01AA
    26b4:	88 23       	and	r24, r24
    26b6:	d9 f0       	breq	.+54     	; 0x26ee <__vector_34+0x62>
	{
		tx1_counter--;
    26b8:	80 91 aa 01 	lds	r24, 0x01AA
    26bc:	81 50       	subi	r24, 0x01	; 1
    26be:	80 93 aa 01 	sts	0x01AA, r24
		UDR1=tx1_buffer[tx1_rd_index];
    26c2:	ae ec       	ldi	r26, 0xCE	; 206
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	80 91 ab 01 	lds	r24, 0x01AB
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	fc 01       	movw	r30, r24
    26d0:	e2 5d       	subi	r30, 0xD2	; 210
    26d2:	fd 4f       	sbci	r31, 0xFD	; 253
    26d4:	80 81       	ld	r24, Z
    26d6:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    26d8:	80 91 ab 01 	lds	r24, 0x01AB
    26dc:	8f 5f       	subi	r24, 0xFF	; 255
    26de:	80 93 ab 01 	sts	0x01AB, r24
    26e2:	80 91 ab 01 	lds	r24, 0x01AB
    26e6:	80 34       	cpi	r24, 0x40	; 64
    26e8:	11 f4       	brne	.+4      	; 0x26ee <__vector_34+0x62>
			tx1_rd_index = 0;
    26ea:	10 92 ab 01 	sts	0x01AB, r1
	}
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	ff 91       	pop	r31
    26f4:	ef 91       	pop	r30
    26f6:	bf 91       	pop	r27
    26f8:	af 91       	pop	r26
    26fa:	9f 91       	pop	r25
    26fc:	8f 91       	pop	r24
    26fe:	0f 90       	pop	r0
    2700:	00 92 5b 00 	sts	0x005B, r0
    2704:	0f 90       	pop	r0
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	0f 90       	pop	r0
    270a:	1f 90       	pop	r1
    270c:	18 95       	reti

0000270e <__vector_32>:

ISR(USART1_RX_vect)
{
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	00 90 5b 00 	lds	r0, 0x005B
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	2f 93       	push	r18
    2720:	8f 93       	push	r24
    2722:	9f 93       	push	r25
    2724:	ef 93       	push	r30
    2726:	ff 93       	push	r31
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2732:	e8 ec       	ldi	r30, 0xC8	; 200
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	8c 71       	andi	r24, 0x1C	; 28
    2742:	90 70       	andi	r25, 0x00	; 0
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	d9 f4       	brne	.+54     	; 0x277e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    2748:	80 91 ac 01 	lds	r24, 0x01AC
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	ee ec       	ldi	r30, 0xCE	; 206
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	20 81       	ld	r18, Z
    2756:	fc 01       	movw	r30, r24
    2758:	e2 59       	subi	r30, 0x92	; 146
    275a:	fd 4f       	sbci	r31, 0xFD	; 253
    275c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    275e:	80 91 ac 01 	lds	r24, 0x01AC
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	80 93 ac 01 	sts	0x01AC, r24
    2768:	80 91 ac 01 	lds	r24, 0x01AC
    276c:	80 34       	cpi	r24, 0x40	; 64
    276e:	11 f4       	brne	.+4      	; 0x2774 <__vector_32+0x66>
		rx1_wr_index = 0;
    2770:	10 92 ac 01 	sts	0x01AC, r1

		rx1_counter++;
    2774:	80 91 ad 01 	lds	r24, 0x01AD
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	80 93 ad 01 	sts	0x01AD, r24
	}
}
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	9f 91       	pop	r25
    278a:	8f 91       	pop	r24
    278c:	2f 91       	pop	r18
    278e:	0f 90       	pop	r0
    2790:	00 92 5b 00 	sts	0x005B, r0
    2794:	0f 90       	pop	r0
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	0f 90       	pop	r0
    279a:	1f 90       	pop	r1
    279c:	18 95       	reti

0000279e <__subsf3>:
    279e:	50 58       	subi	r21, 0x80	; 128

000027a0 <__addsf3>:
    27a0:	bb 27       	eor	r27, r27
    27a2:	aa 27       	eor	r26, r26
    27a4:	0e d0       	rcall	.+28     	; 0x27c2 <__addsf3x>
    27a6:	75 c1       	rjmp	.+746    	; 0x2a92 <__fp_round>
    27a8:	66 d1       	rcall	.+716    	; 0x2a76 <__fp_pscA>
    27aa:	30 f0       	brcs	.+12     	; 0x27b8 <__addsf3+0x18>
    27ac:	6b d1       	rcall	.+726    	; 0x2a84 <__fp_pscB>
    27ae:	20 f0       	brcs	.+8      	; 0x27b8 <__addsf3+0x18>
    27b0:	31 f4       	brne	.+12     	; 0x27be <__addsf3+0x1e>
    27b2:	9f 3f       	cpi	r25, 0xFF	; 255
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__addsf3+0x1a>
    27b6:	1e f4       	brtc	.+6      	; 0x27be <__addsf3+0x1e>
    27b8:	5b c1       	rjmp	.+694    	; 0x2a70 <__fp_nan>
    27ba:	0e f4       	brtc	.+2      	; 0x27be <__addsf3+0x1e>
    27bc:	e0 95       	com	r30
    27be:	e7 fb       	bst	r30, 7
    27c0:	51 c1       	rjmp	.+674    	; 0x2a64 <__fp_inf>

000027c2 <__addsf3x>:
    27c2:	e9 2f       	mov	r30, r25
    27c4:	77 d1       	rcall	.+750    	; 0x2ab4 <__fp_split3>
    27c6:	80 f3       	brcs	.-32     	; 0x27a8 <__addsf3+0x8>
    27c8:	ba 17       	cp	r27, r26
    27ca:	62 07       	cpc	r22, r18
    27cc:	73 07       	cpc	r23, r19
    27ce:	84 07       	cpc	r24, r20
    27d0:	95 07       	cpc	r25, r21
    27d2:	18 f0       	brcs	.+6      	; 0x27da <__addsf3x+0x18>
    27d4:	71 f4       	brne	.+28     	; 0x27f2 <__addsf3x+0x30>
    27d6:	9e f5       	brtc	.+102    	; 0x283e <__addsf3x+0x7c>
    27d8:	8f c1       	rjmp	.+798    	; 0x2af8 <__fp_zero>
    27da:	0e f4       	brtc	.+2      	; 0x27de <__addsf3x+0x1c>
    27dc:	e0 95       	com	r30
    27de:	0b 2e       	mov	r0, r27
    27e0:	ba 2f       	mov	r27, r26
    27e2:	a0 2d       	mov	r26, r0
    27e4:	0b 01       	movw	r0, r22
    27e6:	b9 01       	movw	r22, r18
    27e8:	90 01       	movw	r18, r0
    27ea:	0c 01       	movw	r0, r24
    27ec:	ca 01       	movw	r24, r20
    27ee:	a0 01       	movw	r20, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	ff 27       	eor	r31, r31
    27f4:	59 1b       	sub	r21, r25
    27f6:	99 f0       	breq	.+38     	; 0x281e <__addsf3x+0x5c>
    27f8:	59 3f       	cpi	r21, 0xF9	; 249
    27fa:	50 f4       	brcc	.+20     	; 0x2810 <__addsf3x+0x4e>
    27fc:	50 3e       	cpi	r21, 0xE0	; 224
    27fe:	68 f1       	brcs	.+90     	; 0x285a <__addsf3x+0x98>
    2800:	1a 16       	cp	r1, r26
    2802:	f0 40       	sbci	r31, 0x00	; 0
    2804:	a2 2f       	mov	r26, r18
    2806:	23 2f       	mov	r18, r19
    2808:	34 2f       	mov	r19, r20
    280a:	44 27       	eor	r20, r20
    280c:	58 5f       	subi	r21, 0xF8	; 248
    280e:	f3 cf       	rjmp	.-26     	; 0x27f6 <__addsf3x+0x34>
    2810:	46 95       	lsr	r20
    2812:	37 95       	ror	r19
    2814:	27 95       	ror	r18
    2816:	a7 95       	ror	r26
    2818:	f0 40       	sbci	r31, 0x00	; 0
    281a:	53 95       	inc	r21
    281c:	c9 f7       	brne	.-14     	; 0x2810 <__addsf3x+0x4e>
    281e:	7e f4       	brtc	.+30     	; 0x283e <__addsf3x+0x7c>
    2820:	1f 16       	cp	r1, r31
    2822:	ba 0b       	sbc	r27, r26
    2824:	62 0b       	sbc	r22, r18
    2826:	73 0b       	sbc	r23, r19
    2828:	84 0b       	sbc	r24, r20
    282a:	ba f0       	brmi	.+46     	; 0x285a <__addsf3x+0x98>
    282c:	91 50       	subi	r25, 0x01	; 1
    282e:	a1 f0       	breq	.+40     	; 0x2858 <__addsf3x+0x96>
    2830:	ff 0f       	add	r31, r31
    2832:	bb 1f       	adc	r27, r27
    2834:	66 1f       	adc	r22, r22
    2836:	77 1f       	adc	r23, r23
    2838:	88 1f       	adc	r24, r24
    283a:	c2 f7       	brpl	.-16     	; 0x282c <__addsf3x+0x6a>
    283c:	0e c0       	rjmp	.+28     	; 0x285a <__addsf3x+0x98>
    283e:	ba 0f       	add	r27, r26
    2840:	62 1f       	adc	r22, r18
    2842:	73 1f       	adc	r23, r19
    2844:	84 1f       	adc	r24, r20
    2846:	48 f4       	brcc	.+18     	; 0x285a <__addsf3x+0x98>
    2848:	87 95       	ror	r24
    284a:	77 95       	ror	r23
    284c:	67 95       	ror	r22
    284e:	b7 95       	ror	r27
    2850:	f7 95       	ror	r31
    2852:	9e 3f       	cpi	r25, 0xFE	; 254
    2854:	08 f0       	brcs	.+2      	; 0x2858 <__addsf3x+0x96>
    2856:	b3 cf       	rjmp	.-154    	; 0x27be <__addsf3+0x1e>
    2858:	93 95       	inc	r25
    285a:	88 0f       	add	r24, r24
    285c:	08 f0       	brcs	.+2      	; 0x2860 <__addsf3x+0x9e>
    285e:	99 27       	eor	r25, r25
    2860:	ee 0f       	add	r30, r30
    2862:	97 95       	ror	r25
    2864:	87 95       	ror	r24
    2866:	08 95       	ret

00002868 <__cmpsf2>:
    2868:	d9 d0       	rcall	.+434    	; 0x2a1c <__fp_cmp>
    286a:	08 f4       	brcc	.+2      	; 0x286e <__cmpsf2+0x6>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	08 95       	ret

00002870 <__divsf3>:
    2870:	0c d0       	rcall	.+24     	; 0x288a <__divsf3x>
    2872:	0f c1       	rjmp	.+542    	; 0x2a92 <__fp_round>
    2874:	07 d1       	rcall	.+526    	; 0x2a84 <__fp_pscB>
    2876:	40 f0       	brcs	.+16     	; 0x2888 <__divsf3+0x18>
    2878:	fe d0       	rcall	.+508    	; 0x2a76 <__fp_pscA>
    287a:	30 f0       	brcs	.+12     	; 0x2888 <__divsf3+0x18>
    287c:	21 f4       	brne	.+8      	; 0x2886 <__divsf3+0x16>
    287e:	5f 3f       	cpi	r21, 0xFF	; 255
    2880:	19 f0       	breq	.+6      	; 0x2888 <__divsf3+0x18>
    2882:	f0 c0       	rjmp	.+480    	; 0x2a64 <__fp_inf>
    2884:	51 11       	cpse	r21, r1
    2886:	39 c1       	rjmp	.+626    	; 0x2afa <__fp_szero>
    2888:	f3 c0       	rjmp	.+486    	; 0x2a70 <__fp_nan>

0000288a <__divsf3x>:
    288a:	14 d1       	rcall	.+552    	; 0x2ab4 <__fp_split3>
    288c:	98 f3       	brcs	.-26     	; 0x2874 <__divsf3+0x4>

0000288e <__divsf3_pse>:
    288e:	99 23       	and	r25, r25
    2890:	c9 f3       	breq	.-14     	; 0x2884 <__divsf3+0x14>
    2892:	55 23       	and	r21, r21
    2894:	b1 f3       	breq	.-20     	; 0x2882 <__divsf3+0x12>
    2896:	95 1b       	sub	r25, r21
    2898:	55 0b       	sbc	r21, r21
    289a:	bb 27       	eor	r27, r27
    289c:	aa 27       	eor	r26, r26
    289e:	62 17       	cp	r22, r18
    28a0:	73 07       	cpc	r23, r19
    28a2:	84 07       	cpc	r24, r20
    28a4:	38 f0       	brcs	.+14     	; 0x28b4 <__divsf3_pse+0x26>
    28a6:	9f 5f       	subi	r25, 0xFF	; 255
    28a8:	5f 4f       	sbci	r21, 0xFF	; 255
    28aa:	22 0f       	add	r18, r18
    28ac:	33 1f       	adc	r19, r19
    28ae:	44 1f       	adc	r20, r20
    28b0:	aa 1f       	adc	r26, r26
    28b2:	a9 f3       	breq	.-22     	; 0x289e <__divsf3_pse+0x10>
    28b4:	33 d0       	rcall	.+102    	; 0x291c <__divsf3_pse+0x8e>
    28b6:	0e 2e       	mov	r0, r30
    28b8:	3a f0       	brmi	.+14     	; 0x28c8 <__divsf3_pse+0x3a>
    28ba:	e0 e8       	ldi	r30, 0x80	; 128
    28bc:	30 d0       	rcall	.+96     	; 0x291e <__divsf3_pse+0x90>
    28be:	91 50       	subi	r25, 0x01	; 1
    28c0:	50 40       	sbci	r21, 0x00	; 0
    28c2:	e6 95       	lsr	r30
    28c4:	00 1c       	adc	r0, r0
    28c6:	ca f7       	brpl	.-14     	; 0x28ba <__divsf3_pse+0x2c>
    28c8:	29 d0       	rcall	.+82     	; 0x291c <__divsf3_pse+0x8e>
    28ca:	fe 2f       	mov	r31, r30
    28cc:	27 d0       	rcall	.+78     	; 0x291c <__divsf3_pse+0x8e>
    28ce:	66 0f       	add	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	bb 1f       	adc	r27, r27
    28d6:	26 17       	cp	r18, r22
    28d8:	37 07       	cpc	r19, r23
    28da:	48 07       	cpc	r20, r24
    28dc:	ab 07       	cpc	r26, r27
    28de:	b0 e8       	ldi	r27, 0x80	; 128
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <__divsf3_pse+0x56>
    28e2:	bb 0b       	sbc	r27, r27
    28e4:	80 2d       	mov	r24, r0
    28e6:	bf 01       	movw	r22, r30
    28e8:	ff 27       	eor	r31, r31
    28ea:	93 58       	subi	r25, 0x83	; 131
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	2a f0       	brmi	.+10     	; 0x28fa <__divsf3_pse+0x6c>
    28f0:	9e 3f       	cpi	r25, 0xFE	; 254
    28f2:	51 05       	cpc	r21, r1
    28f4:	68 f0       	brcs	.+26     	; 0x2910 <__divsf3_pse+0x82>
    28f6:	b6 c0       	rjmp	.+364    	; 0x2a64 <__fp_inf>
    28f8:	00 c1       	rjmp	.+512    	; 0x2afa <__fp_szero>
    28fa:	5f 3f       	cpi	r21, 0xFF	; 255
    28fc:	ec f3       	brlt	.-6      	; 0x28f8 <__divsf3_pse+0x6a>
    28fe:	98 3e       	cpi	r25, 0xE8	; 232
    2900:	dc f3       	brlt	.-10     	; 0x28f8 <__divsf3_pse+0x6a>
    2902:	86 95       	lsr	r24
    2904:	77 95       	ror	r23
    2906:	67 95       	ror	r22
    2908:	b7 95       	ror	r27
    290a:	f7 95       	ror	r31
    290c:	9f 5f       	subi	r25, 0xFF	; 255
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__divsf3_pse+0x74>
    2910:	88 0f       	add	r24, r24
    2912:	91 1d       	adc	r25, r1
    2914:	96 95       	lsr	r25
    2916:	87 95       	ror	r24
    2918:	97 f9       	bld	r25, 7
    291a:	08 95       	ret
    291c:	e1 e0       	ldi	r30, 0x01	; 1
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	88 1f       	adc	r24, r24
    2924:	bb 1f       	adc	r27, r27
    2926:	62 17       	cp	r22, r18
    2928:	73 07       	cpc	r23, r19
    292a:	84 07       	cpc	r24, r20
    292c:	ba 07       	cpc	r27, r26
    292e:	20 f0       	brcs	.+8      	; 0x2938 <__divsf3_pse+0xaa>
    2930:	62 1b       	sub	r22, r18
    2932:	73 0b       	sbc	r23, r19
    2934:	84 0b       	sbc	r24, r20
    2936:	ba 0b       	sbc	r27, r26
    2938:	ee 1f       	adc	r30, r30
    293a:	88 f7       	brcc	.-30     	; 0x291e <__divsf3_pse+0x90>
    293c:	e0 95       	com	r30
    293e:	08 95       	ret

00002940 <__fixsfsi>:
    2940:	04 d0       	rcall	.+8      	; 0x294a <__fixunssfsi>
    2942:	68 94       	set
    2944:	b1 11       	cpse	r27, r1
    2946:	d9 c0       	rjmp	.+434    	; 0x2afa <__fp_szero>
    2948:	08 95       	ret

0000294a <__fixunssfsi>:
    294a:	bc d0       	rcall	.+376    	; 0x2ac4 <__fp_splitA>
    294c:	88 f0       	brcs	.+34     	; 0x2970 <__fixunssfsi+0x26>
    294e:	9f 57       	subi	r25, 0x7F	; 127
    2950:	90 f0       	brcs	.+36     	; 0x2976 <__fixunssfsi+0x2c>
    2952:	b9 2f       	mov	r27, r25
    2954:	99 27       	eor	r25, r25
    2956:	b7 51       	subi	r27, 0x17	; 23
    2958:	a0 f0       	brcs	.+40     	; 0x2982 <__fixunssfsi+0x38>
    295a:	d1 f0       	breq	.+52     	; 0x2990 <__fixunssfsi+0x46>
    295c:	66 0f       	add	r22, r22
    295e:	77 1f       	adc	r23, r23
    2960:	88 1f       	adc	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	1a f0       	brmi	.+6      	; 0x296c <__fixunssfsi+0x22>
    2966:	ba 95       	dec	r27
    2968:	c9 f7       	brne	.-14     	; 0x295c <__fixunssfsi+0x12>
    296a:	12 c0       	rjmp	.+36     	; 0x2990 <__fixunssfsi+0x46>
    296c:	b1 30       	cpi	r27, 0x01	; 1
    296e:	81 f0       	breq	.+32     	; 0x2990 <__fixunssfsi+0x46>
    2970:	c3 d0       	rcall	.+390    	; 0x2af8 <__fp_zero>
    2972:	b1 e0       	ldi	r27, 0x01	; 1
    2974:	08 95       	ret
    2976:	c0 c0       	rjmp	.+384    	; 0x2af8 <__fp_zero>
    2978:	67 2f       	mov	r22, r23
    297a:	78 2f       	mov	r23, r24
    297c:	88 27       	eor	r24, r24
    297e:	b8 5f       	subi	r27, 0xF8	; 248
    2980:	39 f0       	breq	.+14     	; 0x2990 <__fixunssfsi+0x46>
    2982:	b9 3f       	cpi	r27, 0xF9	; 249
    2984:	cc f3       	brlt	.-14     	; 0x2978 <__fixunssfsi+0x2e>
    2986:	86 95       	lsr	r24
    2988:	77 95       	ror	r23
    298a:	67 95       	ror	r22
    298c:	b3 95       	inc	r27
    298e:	d9 f7       	brne	.-10     	; 0x2986 <__fixunssfsi+0x3c>
    2990:	3e f4       	brtc	.+14     	; 0x29a0 <__fixunssfsi+0x56>
    2992:	90 95       	com	r25
    2994:	80 95       	com	r24
    2996:	70 95       	com	r23
    2998:	61 95       	neg	r22
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	8f 4f       	sbci	r24, 0xFF	; 255
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	08 95       	ret

000029a2 <__floatunsisf>:
    29a2:	e8 94       	clt
    29a4:	09 c0       	rjmp	.+18     	; 0x29b8 <__floatsisf+0x12>

000029a6 <__floatsisf>:
    29a6:	97 fb       	bst	r25, 7
    29a8:	3e f4       	brtc	.+14     	; 0x29b8 <__floatsisf+0x12>
    29aa:	90 95       	com	r25
    29ac:	80 95       	com	r24
    29ae:	70 95       	com	r23
    29b0:	61 95       	neg	r22
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	8f 4f       	sbci	r24, 0xFF	; 255
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	99 23       	and	r25, r25
    29ba:	a9 f0       	breq	.+42     	; 0x29e6 <__floatsisf+0x40>
    29bc:	f9 2f       	mov	r31, r25
    29be:	96 e9       	ldi	r25, 0x96	; 150
    29c0:	bb 27       	eor	r27, r27
    29c2:	93 95       	inc	r25
    29c4:	f6 95       	lsr	r31
    29c6:	87 95       	ror	r24
    29c8:	77 95       	ror	r23
    29ca:	67 95       	ror	r22
    29cc:	b7 95       	ror	r27
    29ce:	f1 11       	cpse	r31, r1
    29d0:	f8 cf       	rjmp	.-16     	; 0x29c2 <__floatsisf+0x1c>
    29d2:	fa f4       	brpl	.+62     	; 0x2a12 <__floatsisf+0x6c>
    29d4:	bb 0f       	add	r27, r27
    29d6:	11 f4       	brne	.+4      	; 0x29dc <__floatsisf+0x36>
    29d8:	60 ff       	sbrs	r22, 0
    29da:	1b c0       	rjmp	.+54     	; 0x2a12 <__floatsisf+0x6c>
    29dc:	6f 5f       	subi	r22, 0xFF	; 255
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	8f 4f       	sbci	r24, 0xFF	; 255
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	16 c0       	rjmp	.+44     	; 0x2a12 <__floatsisf+0x6c>
    29e6:	88 23       	and	r24, r24
    29e8:	11 f0       	breq	.+4      	; 0x29ee <__floatsisf+0x48>
    29ea:	96 e9       	ldi	r25, 0x96	; 150
    29ec:	11 c0       	rjmp	.+34     	; 0x2a10 <__floatsisf+0x6a>
    29ee:	77 23       	and	r23, r23
    29f0:	21 f0       	breq	.+8      	; 0x29fa <__floatsisf+0x54>
    29f2:	9e e8       	ldi	r25, 0x8E	; 142
    29f4:	87 2f       	mov	r24, r23
    29f6:	76 2f       	mov	r23, r22
    29f8:	05 c0       	rjmp	.+10     	; 0x2a04 <__floatsisf+0x5e>
    29fa:	66 23       	and	r22, r22
    29fc:	71 f0       	breq	.+28     	; 0x2a1a <__floatsisf+0x74>
    29fe:	96 e8       	ldi	r25, 0x86	; 134
    2a00:	86 2f       	mov	r24, r22
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	2a f0       	brmi	.+10     	; 0x2a12 <__floatsisf+0x6c>
    2a08:	9a 95       	dec	r25
    2a0a:	66 0f       	add	r22, r22
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	88 1f       	adc	r24, r24
    2a10:	da f7       	brpl	.-10     	; 0x2a08 <__floatsisf+0x62>
    2a12:	88 0f       	add	r24, r24
    2a14:	96 95       	lsr	r25
    2a16:	87 95       	ror	r24
    2a18:	97 f9       	bld	r25, 7
    2a1a:	08 95       	ret

00002a1c <__fp_cmp>:
    2a1c:	99 0f       	add	r25, r25
    2a1e:	00 08       	sbc	r0, r0
    2a20:	55 0f       	add	r21, r21
    2a22:	aa 0b       	sbc	r26, r26
    2a24:	e0 e8       	ldi	r30, 0x80	; 128
    2a26:	fe ef       	ldi	r31, 0xFE	; 254
    2a28:	16 16       	cp	r1, r22
    2a2a:	17 06       	cpc	r1, r23
    2a2c:	e8 07       	cpc	r30, r24
    2a2e:	f9 07       	cpc	r31, r25
    2a30:	c0 f0       	brcs	.+48     	; 0x2a62 <__fp_cmp+0x46>
    2a32:	12 16       	cp	r1, r18
    2a34:	13 06       	cpc	r1, r19
    2a36:	e4 07       	cpc	r30, r20
    2a38:	f5 07       	cpc	r31, r21
    2a3a:	98 f0       	brcs	.+38     	; 0x2a62 <__fp_cmp+0x46>
    2a3c:	62 1b       	sub	r22, r18
    2a3e:	73 0b       	sbc	r23, r19
    2a40:	84 0b       	sbc	r24, r20
    2a42:	95 0b       	sbc	r25, r21
    2a44:	39 f4       	brne	.+14     	; 0x2a54 <__fp_cmp+0x38>
    2a46:	0a 26       	eor	r0, r26
    2a48:	61 f0       	breq	.+24     	; 0x2a62 <__fp_cmp+0x46>
    2a4a:	23 2b       	or	r18, r19
    2a4c:	24 2b       	or	r18, r20
    2a4e:	25 2b       	or	r18, r21
    2a50:	21 f4       	brne	.+8      	; 0x2a5a <__fp_cmp+0x3e>
    2a52:	08 95       	ret
    2a54:	0a 26       	eor	r0, r26
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__fp_cmp+0x3e>
    2a58:	a1 40       	sbci	r26, 0x01	; 1
    2a5a:	a6 95       	lsr	r26
    2a5c:	8f ef       	ldi	r24, 0xFF	; 255
    2a5e:	81 1d       	adc	r24, r1
    2a60:	81 1d       	adc	r24, r1
    2a62:	08 95       	ret

00002a64 <__fp_inf>:
    2a64:	97 f9       	bld	r25, 7
    2a66:	9f 67       	ori	r25, 0x7F	; 127
    2a68:	80 e8       	ldi	r24, 0x80	; 128
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	08 95       	ret

00002a70 <__fp_nan>:
    2a70:	9f ef       	ldi	r25, 0xFF	; 255
    2a72:	80 ec       	ldi	r24, 0xC0	; 192
    2a74:	08 95       	ret

00002a76 <__fp_pscA>:
    2a76:	00 24       	eor	r0, r0
    2a78:	0a 94       	dec	r0
    2a7a:	16 16       	cp	r1, r22
    2a7c:	17 06       	cpc	r1, r23
    2a7e:	18 06       	cpc	r1, r24
    2a80:	09 06       	cpc	r0, r25
    2a82:	08 95       	ret

00002a84 <__fp_pscB>:
    2a84:	00 24       	eor	r0, r0
    2a86:	0a 94       	dec	r0
    2a88:	12 16       	cp	r1, r18
    2a8a:	13 06       	cpc	r1, r19
    2a8c:	14 06       	cpc	r1, r20
    2a8e:	05 06       	cpc	r0, r21
    2a90:	08 95       	ret

00002a92 <__fp_round>:
    2a92:	09 2e       	mov	r0, r25
    2a94:	03 94       	inc	r0
    2a96:	00 0c       	add	r0, r0
    2a98:	11 f4       	brne	.+4      	; 0x2a9e <__fp_round+0xc>
    2a9a:	88 23       	and	r24, r24
    2a9c:	52 f0       	brmi	.+20     	; 0x2ab2 <__fp_round+0x20>
    2a9e:	bb 0f       	add	r27, r27
    2aa0:	40 f4       	brcc	.+16     	; 0x2ab2 <__fp_round+0x20>
    2aa2:	bf 2b       	or	r27, r31
    2aa4:	11 f4       	brne	.+4      	; 0x2aaa <__fp_round+0x18>
    2aa6:	60 ff       	sbrs	r22, 0
    2aa8:	04 c0       	rjmp	.+8      	; 0x2ab2 <__fp_round+0x20>
    2aaa:	6f 5f       	subi	r22, 0xFF	; 255
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab2:	08 95       	ret

00002ab4 <__fp_split3>:
    2ab4:	57 fd       	sbrc	r21, 7
    2ab6:	90 58       	subi	r25, 0x80	; 128
    2ab8:	44 0f       	add	r20, r20
    2aba:	55 1f       	adc	r21, r21
    2abc:	59 f0       	breq	.+22     	; 0x2ad4 <__fp_splitA+0x10>
    2abe:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac0:	71 f0       	breq	.+28     	; 0x2ade <__fp_splitA+0x1a>
    2ac2:	47 95       	ror	r20

00002ac4 <__fp_splitA>:
    2ac4:	88 0f       	add	r24, r24
    2ac6:	97 fb       	bst	r25, 7
    2ac8:	99 1f       	adc	r25, r25
    2aca:	61 f0       	breq	.+24     	; 0x2ae4 <__fp_splitA+0x20>
    2acc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ace:	79 f0       	breq	.+30     	; 0x2aee <__fp_splitA+0x2a>
    2ad0:	87 95       	ror	r24
    2ad2:	08 95       	ret
    2ad4:	12 16       	cp	r1, r18
    2ad6:	13 06       	cpc	r1, r19
    2ad8:	14 06       	cpc	r1, r20
    2ada:	55 1f       	adc	r21, r21
    2adc:	f2 cf       	rjmp	.-28     	; 0x2ac2 <__fp_split3+0xe>
    2ade:	46 95       	lsr	r20
    2ae0:	f1 df       	rcall	.-30     	; 0x2ac4 <__fp_splitA>
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <__fp_splitA+0x30>
    2ae4:	16 16       	cp	r1, r22
    2ae6:	17 06       	cpc	r1, r23
    2ae8:	18 06       	cpc	r1, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	f1 cf       	rjmp	.-30     	; 0x2ad0 <__fp_splitA+0xc>
    2aee:	86 95       	lsr	r24
    2af0:	71 05       	cpc	r23, r1
    2af2:	61 05       	cpc	r22, r1
    2af4:	08 94       	sec
    2af6:	08 95       	ret

00002af8 <__fp_zero>:
    2af8:	e8 94       	clt

00002afa <__fp_szero>:
    2afa:	bb 27       	eor	r27, r27
    2afc:	66 27       	eor	r22, r22
    2afe:	77 27       	eor	r23, r23
    2b00:	cb 01       	movw	r24, r22
    2b02:	97 f9       	bld	r25, 7
    2b04:	08 95       	ret

00002b06 <__gesf2>:
    2b06:	8a df       	rcall	.-236    	; 0x2a1c <__fp_cmp>
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <__gesf2+0x6>
    2b0a:	8f ef       	ldi	r24, 0xFF	; 255
    2b0c:	08 95       	ret

00002b0e <__mulsf3>:
    2b0e:	0b d0       	rcall	.+22     	; 0x2b26 <__mulsf3x>
    2b10:	c0 cf       	rjmp	.-128    	; 0x2a92 <__fp_round>
    2b12:	b1 df       	rcall	.-158    	; 0x2a76 <__fp_pscA>
    2b14:	28 f0       	brcs	.+10     	; 0x2b20 <__mulsf3+0x12>
    2b16:	b6 df       	rcall	.-148    	; 0x2a84 <__fp_pscB>
    2b18:	18 f0       	brcs	.+6      	; 0x2b20 <__mulsf3+0x12>
    2b1a:	95 23       	and	r25, r21
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <__mulsf3+0x12>
    2b1e:	a2 cf       	rjmp	.-188    	; 0x2a64 <__fp_inf>
    2b20:	a7 cf       	rjmp	.-178    	; 0x2a70 <__fp_nan>
    2b22:	11 24       	eor	r1, r1
    2b24:	ea cf       	rjmp	.-44     	; 0x2afa <__fp_szero>

00002b26 <__mulsf3x>:
    2b26:	c6 df       	rcall	.-116    	; 0x2ab4 <__fp_split3>
    2b28:	a0 f3       	brcs	.-24     	; 0x2b12 <__mulsf3+0x4>

00002b2a <__mulsf3_pse>:
    2b2a:	95 9f       	mul	r25, r21
    2b2c:	d1 f3       	breq	.-12     	; 0x2b22 <__mulsf3+0x14>
    2b2e:	95 0f       	add	r25, r21
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	55 1f       	adc	r21, r21
    2b34:	62 9f       	mul	r22, r18
    2b36:	f0 01       	movw	r30, r0
    2b38:	72 9f       	mul	r23, r18
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	f0 0d       	add	r31, r0
    2b3e:	b1 1d       	adc	r27, r1
    2b40:	63 9f       	mul	r22, r19
    2b42:	aa 27       	eor	r26, r26
    2b44:	f0 0d       	add	r31, r0
    2b46:	b1 1d       	adc	r27, r1
    2b48:	aa 1f       	adc	r26, r26
    2b4a:	64 9f       	mul	r22, r20
    2b4c:	66 27       	eor	r22, r22
    2b4e:	b0 0d       	add	r27, r0
    2b50:	a1 1d       	adc	r26, r1
    2b52:	66 1f       	adc	r22, r22
    2b54:	82 9f       	mul	r24, r18
    2b56:	22 27       	eor	r18, r18
    2b58:	b0 0d       	add	r27, r0
    2b5a:	a1 1d       	adc	r26, r1
    2b5c:	62 1f       	adc	r22, r18
    2b5e:	73 9f       	mul	r23, r19
    2b60:	b0 0d       	add	r27, r0
    2b62:	a1 1d       	adc	r26, r1
    2b64:	62 1f       	adc	r22, r18
    2b66:	83 9f       	mul	r24, r19
    2b68:	a0 0d       	add	r26, r0
    2b6a:	61 1d       	adc	r22, r1
    2b6c:	22 1f       	adc	r18, r18
    2b6e:	74 9f       	mul	r23, r20
    2b70:	33 27       	eor	r19, r19
    2b72:	a0 0d       	add	r26, r0
    2b74:	61 1d       	adc	r22, r1
    2b76:	23 1f       	adc	r18, r19
    2b78:	84 9f       	mul	r24, r20
    2b7a:	60 0d       	add	r22, r0
    2b7c:	21 1d       	adc	r18, r1
    2b7e:	82 2f       	mov	r24, r18
    2b80:	76 2f       	mov	r23, r22
    2b82:	6a 2f       	mov	r22, r26
    2b84:	11 24       	eor	r1, r1
    2b86:	9f 57       	subi	r25, 0x7F	; 127
    2b88:	50 40       	sbci	r21, 0x00	; 0
    2b8a:	8a f0       	brmi	.+34     	; 0x2bae <__mulsf3_pse+0x84>
    2b8c:	e1 f0       	breq	.+56     	; 0x2bc6 <__mulsf3_pse+0x9c>
    2b8e:	88 23       	and	r24, r24
    2b90:	4a f0       	brmi	.+18     	; 0x2ba4 <__mulsf3_pse+0x7a>
    2b92:	ee 0f       	add	r30, r30
    2b94:	ff 1f       	adc	r31, r31
    2b96:	bb 1f       	adc	r27, r27
    2b98:	66 1f       	adc	r22, r22
    2b9a:	77 1f       	adc	r23, r23
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	91 50       	subi	r25, 0x01	; 1
    2ba0:	50 40       	sbci	r21, 0x00	; 0
    2ba2:	a9 f7       	brne	.-22     	; 0x2b8e <__mulsf3_pse+0x64>
    2ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    2ba6:	51 05       	cpc	r21, r1
    2ba8:	70 f0       	brcs	.+28     	; 0x2bc6 <__mulsf3_pse+0x9c>
    2baa:	5c cf       	rjmp	.-328    	; 0x2a64 <__fp_inf>
    2bac:	a6 cf       	rjmp	.-180    	; 0x2afa <__fp_szero>
    2bae:	5f 3f       	cpi	r21, 0xFF	; 255
    2bb0:	ec f3       	brlt	.-6      	; 0x2bac <__mulsf3_pse+0x82>
    2bb2:	98 3e       	cpi	r25, 0xE8	; 232
    2bb4:	dc f3       	brlt	.-10     	; 0x2bac <__mulsf3_pse+0x82>
    2bb6:	86 95       	lsr	r24
    2bb8:	77 95       	ror	r23
    2bba:	67 95       	ror	r22
    2bbc:	b7 95       	ror	r27
    2bbe:	f7 95       	ror	r31
    2bc0:	e7 95       	ror	r30
    2bc2:	9f 5f       	subi	r25, 0xFF	; 255
    2bc4:	c1 f7       	brne	.-16     	; 0x2bb6 <__mulsf3_pse+0x8c>
    2bc6:	fe 2b       	or	r31, r30
    2bc8:	88 0f       	add	r24, r24
    2bca:	91 1d       	adc	r25, r1
    2bcc:	96 95       	lsr	r25
    2bce:	87 95       	ror	r24
    2bd0:	97 f9       	bld	r25, 7
    2bd2:	08 95       	ret

00002bd4 <calloc>:
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	68 9f       	mul	r22, r24
    2bde:	80 01       	movw	r16, r0
    2be0:	69 9f       	mul	r22, r25
    2be2:	10 0d       	add	r17, r0
    2be4:	78 9f       	mul	r23, r24
    2be6:	10 0d       	add	r17, r0
    2be8:	11 24       	eor	r1, r1
    2bea:	c8 01       	movw	r24, r16
    2bec:	0d d0       	rcall	.+26     	; 0x2c08 <malloc>
    2bee:	ec 01       	movw	r28, r24
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	21 f0       	breq	.+8      	; 0x2bfc <calloc+0x28>
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	a8 01       	movw	r20, r16
    2bfa:	0b d1       	rcall	.+534    	; 0x2e12 <memset>
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	08 95       	ret

00002c08 <malloc>:
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	91 05       	cpc	r25, r1
    2c12:	10 f4       	brcc	.+4      	; 0x2c18 <malloc+0x10>
    2c14:	62 e0       	ldi	r22, 0x02	; 2
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	a0 91 b0 02 	lds	r26, 0x02B0
    2c1c:	b0 91 b1 02 	lds	r27, 0x02B1
    2c20:	ed 01       	movw	r28, r26
    2c22:	e0 e0       	ldi	r30, 0x00	; 0
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	21 c0       	rjmp	.+66     	; 0x2c6e <malloc+0x66>
    2c2c:	88 81       	ld	r24, Y
    2c2e:	99 81       	ldd	r25, Y+1	; 0x01
    2c30:	86 17       	cp	r24, r22
    2c32:	97 07       	cpc	r25, r23
    2c34:	69 f4       	brne	.+26     	; 0x2c50 <malloc+0x48>
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	30 97       	sbiw	r30, 0x00	; 0
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <malloc+0x3c>
    2c3e:	93 83       	std	Z+3, r25	; 0x03
    2c40:	82 83       	std	Z+2, r24	; 0x02
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <malloc+0x44>
    2c44:	90 93 b1 02 	sts	0x02B1, r25
    2c48:	80 93 b0 02 	sts	0x02B0, r24
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	34 c0       	rjmp	.+104    	; 0x2cb8 <malloc+0xb0>
    2c50:	68 17       	cp	r22, r24
    2c52:	79 07       	cpc	r23, r25
    2c54:	38 f4       	brcc	.+14     	; 0x2c64 <malloc+0x5c>
    2c56:	41 15       	cp	r20, r1
    2c58:	51 05       	cpc	r21, r1
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <malloc+0x5a>
    2c5c:	84 17       	cp	r24, r20
    2c5e:	95 07       	cpc	r25, r21
    2c60:	08 f4       	brcc	.+2      	; 0x2c64 <malloc+0x5c>
    2c62:	ac 01       	movw	r20, r24
    2c64:	fe 01       	movw	r30, r28
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	e9 01       	movw	r28, r18
    2c6e:	20 97       	sbiw	r28, 0x00	; 0
    2c70:	e9 f6       	brne	.-70     	; 0x2c2c <malloc+0x24>
    2c72:	41 15       	cp	r20, r1
    2c74:	51 05       	cpc	r21, r1
    2c76:	a9 f1       	breq	.+106    	; 0x2ce2 <malloc+0xda>
    2c78:	ca 01       	movw	r24, r20
    2c7a:	86 1b       	sub	r24, r22
    2c7c:	97 0b       	sbc	r25, r23
    2c7e:	04 97       	sbiw	r24, 0x04	; 4
    2c80:	08 f4       	brcc	.+2      	; 0x2c84 <malloc+0x7c>
    2c82:	ba 01       	movw	r22, r20
    2c84:	e0 e0       	ldi	r30, 0x00	; 0
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	2a c0       	rjmp	.+84     	; 0x2cde <malloc+0xd6>
    2c8a:	8d 91       	ld	r24, X+
    2c8c:	9c 91       	ld	r25, X
    2c8e:	11 97       	sbiw	r26, 0x01	; 1
    2c90:	84 17       	cp	r24, r20
    2c92:	95 07       	cpc	r25, r21
    2c94:	f9 f4       	brne	.+62     	; 0x2cd4 <malloc+0xcc>
    2c96:	64 17       	cp	r22, r20
    2c98:	75 07       	cpc	r23, r21
    2c9a:	81 f4       	brne	.+32     	; 0x2cbc <malloc+0xb4>
    2c9c:	12 96       	adiw	r26, 0x02	; 2
    2c9e:	8d 91       	ld	r24, X+
    2ca0:	9c 91       	ld	r25, X
    2ca2:	13 97       	sbiw	r26, 0x03	; 3
    2ca4:	30 97       	sbiw	r30, 0x00	; 0
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <malloc+0xa6>
    2ca8:	93 83       	std	Z+3, r25	; 0x03
    2caa:	82 83       	std	Z+2, r24	; 0x02
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <malloc+0xae>
    2cae:	90 93 b1 02 	sts	0x02B1, r25
    2cb2:	80 93 b0 02 	sts	0x02B0, r24
    2cb6:	fd 01       	movw	r30, r26
    2cb8:	32 96       	adiw	r30, 0x02	; 2
    2cba:	4f c0       	rjmp	.+158    	; 0x2d5a <malloc+0x152>
    2cbc:	ca 01       	movw	r24, r20
    2cbe:	86 1b       	sub	r24, r22
    2cc0:	97 0b       	sbc	r25, r23
    2cc2:	fd 01       	movw	r30, r26
    2cc4:	e8 0f       	add	r30, r24
    2cc6:	f9 1f       	adc	r31, r25
    2cc8:	61 93       	st	Z+, r22
    2cca:	71 93       	st	Z+, r23
    2ccc:	02 97       	sbiw	r24, 0x02	; 2
    2cce:	8d 93       	st	X+, r24
    2cd0:	9c 93       	st	X, r25
    2cd2:	43 c0       	rjmp	.+134    	; 0x2d5a <malloc+0x152>
    2cd4:	fd 01       	movw	r30, r26
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	9c 01       	movw	r18, r24
    2cdc:	d9 01       	movw	r26, r18
    2cde:	10 97       	sbiw	r26, 0x00	; 0
    2ce0:	a1 f6       	brne	.-88     	; 0x2c8a <malloc+0x82>
    2ce2:	80 91 ae 02 	lds	r24, 0x02AE
    2ce6:	90 91 af 02 	lds	r25, 0x02AF
    2cea:	89 2b       	or	r24, r25
    2cec:	41 f4       	brne	.+16     	; 0x2cfe <malloc+0xf6>
    2cee:	80 91 02 01 	lds	r24, 0x0102
    2cf2:	90 91 03 01 	lds	r25, 0x0103
    2cf6:	90 93 af 02 	sts	0x02AF, r25
    2cfa:	80 93 ae 02 	sts	0x02AE, r24
    2cfe:	40 91 04 01 	lds	r20, 0x0104
    2d02:	50 91 05 01 	lds	r21, 0x0105
    2d06:	41 15       	cp	r20, r1
    2d08:	51 05       	cpc	r21, r1
    2d0a:	41 f4       	brne	.+16     	; 0x2d1c <malloc+0x114>
    2d0c:	4d b7       	in	r20, 0x3d	; 61
    2d0e:	5e b7       	in	r21, 0x3e	; 62
    2d10:	80 91 00 01 	lds	r24, 0x0100
    2d14:	90 91 01 01 	lds	r25, 0x0101
    2d18:	48 1b       	sub	r20, r24
    2d1a:	59 0b       	sbc	r21, r25
    2d1c:	20 91 ae 02 	lds	r18, 0x02AE
    2d20:	30 91 af 02 	lds	r19, 0x02AF
    2d24:	24 17       	cp	r18, r20
    2d26:	35 07       	cpc	r19, r21
    2d28:	b0 f4       	brcc	.+44     	; 0x2d56 <malloc+0x14e>
    2d2a:	ca 01       	movw	r24, r20
    2d2c:	82 1b       	sub	r24, r18
    2d2e:	93 0b       	sbc	r25, r19
    2d30:	86 17       	cp	r24, r22
    2d32:	97 07       	cpc	r25, r23
    2d34:	80 f0       	brcs	.+32     	; 0x2d56 <malloc+0x14e>
    2d36:	ab 01       	movw	r20, r22
    2d38:	4e 5f       	subi	r20, 0xFE	; 254
    2d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3c:	84 17       	cp	r24, r20
    2d3e:	95 07       	cpc	r25, r21
    2d40:	50 f0       	brcs	.+20     	; 0x2d56 <malloc+0x14e>
    2d42:	42 0f       	add	r20, r18
    2d44:	53 1f       	adc	r21, r19
    2d46:	50 93 af 02 	sts	0x02AF, r21
    2d4a:	40 93 ae 02 	sts	0x02AE, r20
    2d4e:	f9 01       	movw	r30, r18
    2d50:	61 93       	st	Z+, r22
    2d52:	71 93       	st	Z+, r23
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <malloc+0x152>
    2d56:	e0 e0       	ldi	r30, 0x00	; 0
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	cf 01       	movw	r24, r30
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <free>:
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <free+0xa>
    2d6a:	50 c0       	rjmp	.+160    	; 0x2e0c <free+0xaa>
    2d6c:	ec 01       	movw	r28, r24
    2d6e:	22 97       	sbiw	r28, 0x02	; 2
    2d70:	1b 82       	std	Y+3, r1	; 0x03
    2d72:	1a 82       	std	Y+2, r1	; 0x02
    2d74:	a0 91 b0 02 	lds	r26, 0x02B0
    2d78:	b0 91 b1 02 	lds	r27, 0x02B1
    2d7c:	10 97       	sbiw	r26, 0x00	; 0
    2d7e:	09 f1       	breq	.+66     	; 0x2dc2 <free+0x60>
    2d80:	40 e0       	ldi	r20, 0x00	; 0
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	ac 17       	cp	r26, r28
    2d86:	bd 07       	cpc	r27, r29
    2d88:	08 f1       	brcs	.+66     	; 0x2dcc <free+0x6a>
    2d8a:	bb 83       	std	Y+3, r27	; 0x03
    2d8c:	aa 83       	std	Y+2, r26	; 0x02
    2d8e:	fe 01       	movw	r30, r28
    2d90:	21 91       	ld	r18, Z+
    2d92:	31 91       	ld	r19, Z+
    2d94:	e2 0f       	add	r30, r18
    2d96:	f3 1f       	adc	r31, r19
    2d98:	ae 17       	cp	r26, r30
    2d9a:	bf 07       	cpc	r27, r31
    2d9c:	79 f4       	brne	.+30     	; 0x2dbc <free+0x5a>
    2d9e:	8d 91       	ld	r24, X+
    2da0:	9c 91       	ld	r25, X
    2da2:	11 97       	sbiw	r26, 0x01	; 1
    2da4:	28 0f       	add	r18, r24
    2da6:	39 1f       	adc	r19, r25
    2da8:	2e 5f       	subi	r18, 0xFE	; 254
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	39 83       	std	Y+1, r19	; 0x01
    2dae:	28 83       	st	Y, r18
    2db0:	12 96       	adiw	r26, 0x02	; 2
    2db2:	8d 91       	ld	r24, X+
    2db4:	9c 91       	ld	r25, X
    2db6:	13 97       	sbiw	r26, 0x03	; 3
    2db8:	9b 83       	std	Y+3, r25	; 0x03
    2dba:	8a 83       	std	Y+2, r24	; 0x02
    2dbc:	41 15       	cp	r20, r1
    2dbe:	51 05       	cpc	r21, r1
    2dc0:	71 f4       	brne	.+28     	; 0x2dde <free+0x7c>
    2dc2:	d0 93 b1 02 	sts	0x02B1, r29
    2dc6:	c0 93 b0 02 	sts	0x02B0, r28
    2dca:	20 c0       	rjmp	.+64     	; 0x2e0c <free+0xaa>
    2dcc:	12 96       	adiw	r26, 0x02	; 2
    2dce:	8d 91       	ld	r24, X+
    2dd0:	9c 91       	ld	r25, X
    2dd2:	13 97       	sbiw	r26, 0x03	; 3
    2dd4:	ad 01       	movw	r20, r26
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	11 f0       	breq	.+4      	; 0x2dde <free+0x7c>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	d3 cf       	rjmp	.-90     	; 0x2d84 <free+0x22>
    2dde:	fa 01       	movw	r30, r20
    2de0:	d3 83       	std	Z+3, r29	; 0x03
    2de2:	c2 83       	std	Z+2, r28	; 0x02
    2de4:	21 91       	ld	r18, Z+
    2de6:	31 91       	ld	r19, Z+
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	ce 17       	cp	r28, r30
    2dee:	df 07       	cpc	r29, r31
    2df0:	69 f4       	brne	.+26     	; 0x2e0c <free+0xaa>
    2df2:	88 81       	ld	r24, Y
    2df4:	99 81       	ldd	r25, Y+1	; 0x01
    2df6:	28 0f       	add	r18, r24
    2df8:	39 1f       	adc	r19, r25
    2dfa:	2e 5f       	subi	r18, 0xFE	; 254
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	fa 01       	movw	r30, r20
    2e00:	31 83       	std	Z+1, r19	; 0x01
    2e02:	20 83       	st	Z, r18
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	93 83       	std	Z+3, r25	; 0x03
    2e0a:	82 83       	std	Z+2, r24	; 0x02
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	08 95       	ret

00002e12 <memset>:
    2e12:	dc 01       	movw	r26, r24
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <memset+0x6>
    2e16:	6d 93       	st	X+, r22
    2e18:	41 50       	subi	r20, 0x01	; 1
    2e1a:	50 40       	sbci	r21, 0x00	; 0
    2e1c:	e0 f7       	brcc	.-8      	; 0x2e16 <memset+0x4>
    2e1e:	08 95       	ret

00002e20 <_exit>:
    2e20:	f8 94       	cli

00002e22 <__stop_program>:
    2e22:	ff cf       	rjmp	.-2      	; 0x2e22 <__stop_program>
