
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000020bc  00002150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080010a  0080010a  0000215a  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000948  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000241d  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b1f  00000000  00000000  00005217  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028b3  00000000  00000000  00005d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  000085ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b7d  00000000  00000000  00008b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000310  00000000  00000000  000096f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       2:	00 00       	nop
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
static int combination_check()
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b4 c5       	rjmp	.+2920   	; 0xbb2 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec eb       	ldi	r30, 0xBC	; 188
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 35       	cpi	r26, 0x51	; 81
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	aa e7       	ldi	r26, 0x7A	; 122
      f0:	b4 e4       	ldi	r27, 0x44	; 68
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
			PORTG = 0x00;
		}*/
		//100 up
		//250 down
		
		PORTG = 0xff;
     1ce:	e4 e3       	ldi	r30, 0x34	; 52
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	80 83       	st	Z, r24
		servo_set_grabbers_down();
     1d6:	77 d2       	rcall	.+1262   	; 0x6c6 <servo_set_grabbers_down>
     1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x106>

000001da <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <servo_init+0xa>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1ec:	ad e2       	ldi	r26, 0x2D	; 45
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ed e2       	ldi	r30, 0x2D	; 45
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	88 63       	ori	r24, 0x38	; 56
     1f8:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1fa:	a4 e2       	ldi	r26, 0x24	; 36
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e4 e2       	ldi	r30, 0x24	; 36
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	80 68       	ori	r24, 0x80	; 128
     206:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     208:	e4 e9       	ldi	r30, 0x94	; 148
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	11 82       	std	Z+1, r1	; 0x01
     20e:	10 82       	st	Z, r1
	TCNT0 = 0;
     210:	e6 e4       	ldi	r30, 0x46	; 70
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	10 82       	st	Z, r1

	OCR3A = 0;
     216:	e8 e9       	ldi	r30, 0x98	; 152
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	11 82       	std	Z+1, r1	; 0x01
     21c:	10 82       	st	Z, r1
	OCR3B = 0;
     21e:	ea e9       	ldi	r30, 0x9A	; 154
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	11 82       	std	Z+1, r1	; 0x01
     224:	10 82       	st	Z, r1
	OCR3C = 0;
     226:	ec e9       	ldi	r30, 0x9C	; 156
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	11 82       	std	Z+1, r1	; 0x01
     22c:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     22e:	e0 e9       	ldi	r30, 0x90	; 144
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	8e eb       	ldi	r24, 0xBE	; 190
     234:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     236:	e1 e9       	ldi	r30, 0x91	; 145
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	8a e1       	ldi	r24, 0x1A	; 26
     23c:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     23e:	e4 e4       	ldi	r30, 0x44	; 68
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	8b e6       	ldi	r24, 0x6B	; 107
     244:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     246:	06 e9       	ldi	r16, 0x96	; 150
     248:	10 e0       	ldi	r17, 0x00	; 0
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	cc 01       	movw	r24, r24
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	bc 01       	movw	r22, r24
     262:	cd 01       	movw	r24, r26
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	51 e4       	ldi	r21, 0x41	; 65
     26c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     270:	dc 01       	movw	r26, r24
     272:	cb 01       	movw	r24, r22
     274:	9c 01       	movw	r18, r24
     276:	ad 01       	movw	r20, r26
     278:	60 e8       	ldi	r22, 0x80	; 128
     27a:	76 e9       	ldi	r23, 0x96	; 150
     27c:	88 e1       	ldi	r24, 0x18	; 24
     27e:	9b e4       	ldi	r25, 0x4B	; 75
     280:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	5f e3       	ldi	r21, 0x3F	; 63
     294:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	bc 01       	movw	r22, r24
     29e:	cd 01       	movw	r24, r26
     2a0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	f8 01       	movw	r30, r16
     2aa:	91 83       	std	Z+1, r25	; 0x01
     2ac:	80 83       	st	Z, r24
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	df 93       	push	r29
     2c6:	cf 93       	push	r28
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <servo_set_duty_cycle_umbrella+0xe>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <servo_set_duty_cycle_umbrella+0x10>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9c 83       	std	Y+4, r25	; 0x04
     2d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2d4:	e6 e9       	ldi	r30, 0x96	; 150
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	cc 01       	movw	r24, r24
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	bc 01       	movw	r22, r24
     2e4:	cd 01       	movw	r24, r26
     2e6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	bc 01       	movw	r22, r24
     2f0:	cd 01       	movw	r24, r26
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4f e7       	ldi	r20, 0x7F	; 127
     2f8:	53 e4       	ldi	r21, 0x43	; 67
     2fa:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	7c 01       	movw	r14, r24
     304:	8d 01       	movw	r16, r26
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	aa 27       	eor	r26, r26
     30c:	97 fd       	sbrc	r25, 7
     30e:	a0 95       	com	r26
     310:	ba 2f       	mov	r27, r26
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	c8 01       	movw	r24, r16
     320:	b7 01       	movw	r22, r14
     322:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     34e:	e9 e9       	ldi	r30, 0x99	; 153
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	89 2f       	mov	r24, r25
     358:	99 27       	eor	r25, r25
     35a:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     35c:	e8 e9       	ldi	r30, 0x98	; 152
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	80 83       	st	Z, r24
}
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	cf 91       	pop	r28
     36e:	df 91       	pop	r29
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <servo_set_duty_cycle_door+0xe>
     388:	00 d0       	rcall	.+0      	; 0x38a <servo_set_duty_cycle_door+0x10>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	9c 83       	std	Y+4, r25	; 0x04
     390:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     392:	e6 e9       	ldi	r30, 0x96	; 150
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	cc 01       	movw	r24, r24
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4f e7       	ldi	r20, 0x7F	; 127
     3b6:	53 e4       	ldi	r21, 0x43	; 67
     3b8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	7c 01       	movw	r14, r24
     3c2:	8d 01       	movw	r16, r26
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	aa 27       	eor	r26, r26
     3ca:	97 fd       	sbrc	r25, 7
     3cc:	a0 95       	com	r26
     3ce:	ba 2f       	mov	r27, r26
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     3d8:	9b 01       	movw	r18, r22
     3da:	ac 01       	movw	r20, r24
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	5f e3       	ldi	r21, 0x3F	; 63
     3f4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	9a 83       	std	Y+2, r25	; 0x02
     40a:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     40c:	eb e9       	ldi	r30, 0x9B	; 155
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	89 2f       	mov	r24, r25
     416:	99 27       	eor	r25, r25
     418:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     41a:	ea e9       	ldi	r30, 0x9A	; 154
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	80 83       	st	Z, r24
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	00 d0       	rcall	.+0      	; 0x446 <servo_set_duty_cycle_left_grabber+0xe>
     446:	00 d0       	rcall	.+0      	; 0x448 <servo_set_duty_cycle_left_grabber+0x10>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	9c 83       	std	Y+4, r25	; 0x04
     44e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     450:	e6 e9       	ldi	r30, 0x96	; 150
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	cc 01       	movw	r24, r24
     45a:	a0 e0       	ldi	r26, 0x00	; 0
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	bc 01       	movw	r22, r24
     460:	cd 01       	movw	r24, r26
     462:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	4f e7       	ldi	r20, 0x7F	; 127
     474:	53 e4       	ldi	r21, 0x43	; 67
     476:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	7c 01       	movw	r14, r24
     480:	8d 01       	movw	r16, r26
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	9c 81       	ldd	r25, Y+4	; 0x04
     486:	aa 27       	eor	r26, r26
     488:	97 fd       	sbrc	r25, 7
     48a:	a0 95       	com	r26
     48c:	ba 2f       	mov	r27, r26
     48e:	bc 01       	movw	r22, r24
     490:	cd 01       	movw	r24, r26
     492:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	c8 01       	movw	r24, r16
     49c:	b7 01       	movw	r22, r14
     49e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	5f e3       	ldi	r21, 0x3F	; 63
     4b2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	9a 83       	std	Y+2, r25	; 0x02
     4c8:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4ca:	ed e9       	ldi	r30, 0x9D	; 157
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	89 2f       	mov	r24, r25
     4d4:	99 27       	eor	r25, r25
     4d6:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4d8:	ec e9       	ldi	r30, 0x9C	; 156
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	80 83       	st	Z, r24
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	0f 92       	push	r0
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	99 27       	eor	r25, r25
     506:	87 fd       	sbrc	r24, 7
     508:	90 95       	com	r25
     50a:	a9 2f       	mov	r26, r25
     50c:	b9 2f       	mov	r27, r25
     50e:	bc 01       	movw	r22, r24
     510:	cd 01       	movw	r24, r26
     512:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	bc 01       	movw	r22, r24
     51c:	cd 01       	movw	r24, r26
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	44 eb       	ldi	r20, 0xB4	; 180
     524:	52 e4       	ldi	r21, 0x42	; 66
     526:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	bc 01       	movw	r22, r24
     530:	cd 01       	movw	r24, r26
     532:	26 e6       	ldi	r18, 0x66	; 102
     534:	36 e6       	ldi	r19, 0x66	; 102
     536:	46 e3       	ldi	r20, 0x36	; 54
     538:	51 ec       	ldi	r21, 0xC1	; 193
     53a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	4c e6       	ldi	r20, 0x6C	; 108
     54c:	53 e4       	ldi	r21, 0x43	; 67
     54e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	9c 01       	movw	r18, r24
     558:	ad 01       	movw	r20, r26
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	93 e4       	ldi	r25, 0x43	; 67
     562:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	a2 de       	rcall	.-700    	; 0x2bc <servo_set_duty_cycle_umbrella>
}
     578:	0f 90       	pop	r0
     57a:	cf 91       	pop	r28
     57c:	df 91       	pop	r29
     57e:	08 95       	ret

00000580 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     580:	df 93       	push	r29
     582:	cf 93       	push	r28
     584:	0f 92       	push	r0
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	99 27       	eor	r25, r25
     590:	87 fd       	sbrc	r24, 7
     592:	90 95       	com	r25
     594:	a9 2f       	mov	r26, r25
     596:	b9 2f       	mov	r27, r25
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	44 eb       	ldi	r20, 0xB4	; 180
     5ae:	52 e4       	ldi	r21, 0x42	; 66
     5b0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	26 e6       	ldi	r18, 0x66	; 102
     5be:	36 e6       	ldi	r19, 0x66	; 102
     5c0:	46 e3       	ldi	r20, 0x36	; 54
     5c2:	51 ec       	ldi	r21, 0xC1	; 193
     5c4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4c e6       	ldi	r20, 0x6C	; 108
     5d6:	53 e4       	ldi	r21, 0x43	; 67
     5d8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	9c 01       	movw	r18, r24
     5e2:	ad 01       	movw	r20, r26
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	8f e7       	ldi	r24, 0x7F	; 127
     5ea:	93 e4       	ldi	r25, 0x43	; 67
     5ec:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	bc 01       	movw	r22, r24
     5f6:	cd 01       	movw	r24, r26
     5f8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     5fc:	dc 01       	movw	r26, r24
     5fe:	cb 01       	movw	r24, r22
     600:	bc de       	rcall	.-648    	; 0x37a <servo_set_duty_cycle_door>
}
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	0f 92       	push	r0
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	99 27       	eor	r25, r25
     61a:	87 fd       	sbrc	r24, 7
     61c:	90 95       	com	r25
     61e:	a9 2f       	mov	r26, r25
     620:	b9 2f       	mov	r27, r25
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	bc 01       	movw	r22, r24
     630:	cd 01       	movw	r24, r26
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	44 eb       	ldi	r20, 0xB4	; 180
     638:	52 e4       	ldi	r21, 0x42	; 66
     63a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	bc 01       	movw	r22, r24
     644:	cd 01       	movw	r24, r26
     646:	26 e6       	ldi	r18, 0x66	; 102
     648:	36 e6       	ldi	r19, 0x66	; 102
     64a:	46 e3       	ldi	r20, 0x36	; 54
     64c:	51 ec       	ldi	r21, 0xC1	; 193
     64e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	4c e6       	ldi	r20, 0x6C	; 108
     660:	53 e4       	ldi	r21, 0x43	; 67
     662:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	9c 01       	movw	r18, r24
     66c:	ad 01       	movw	r20, r26
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	8f e7       	ldi	r24, 0x7F	; 127
     674:	93 e4       	ldi	r25, 0x43	; 67
     676:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	d6 de       	rcall	.-596    	; 0x438 <servo_set_duty_cycle_left_grabber>
}
     68c:	0f 90       	pop	r0
     68e:	cf 91       	pop	r28
     690:	df 91       	pop	r29
     692:	08 95       	ret

00000694 <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     694:	df 93       	push	r29
     696:	cf 93       	push	r28
     698:	0f 92       	push	r0
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     6a0:	e7 e4       	ldi	r30, 0x47	; 71
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	80 83       	st	Z, r24
}
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	08 95       	ret

000006b0 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-29);
     6b8:	83 ee       	ldi	r24, 0xE3	; 227
     6ba:	a7 df       	rcall	.-178    	; 0x60a <servo_set_left_grabber_position>
	servo_set_right_grabber_position(100);
     6bc:	84 e6       	ldi	r24, 0x64	; 100
     6be:	ea df       	rcall	.-44     	; 0x694 <servo_set_right_grabber_position>
}
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <servo_set_grabbers_down>:
void servo_set_grabbers_down(void)
{
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(89);
     6ce:	89 e5       	ldi	r24, 0x59	; 89
     6d0:	9c df       	rcall	.-200    	; 0x60a <servo_set_left_grabber_position>
	servo_set_right_grabber_position(250);
     6d2:	8a ef       	ldi	r24, 0xFA	; 250
     6d4:	df df       	rcall	.-66     	; 0x694 <servo_set_right_grabber_position>
}
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	08 95       	ret

000006dc <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	6c 97       	sbiw	r28, 0x1c	; 28
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(-86);
     6f0:	8a ea       	ldi	r24, 0xAA	; 170
     6f2:	01 df       	rcall	.-510    	; 0x4f6 <servo_set_umbrella_position>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	aa e7       	ldi	r26, 0x7A	; 122
     6fa:	b4 e4       	ldi	r27, 0x44	; 68
     6fc:	89 8f       	std	Y+25, r24	; 0x19
     6fe:	9a 8f       	std	Y+26, r25	; 0x1a
     700:	ab 8f       	std	Y+27, r26	; 0x1b
     702:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     704:	69 8d       	ldd	r22, Y+25	; 0x19
     706:	7a 8d       	ldd	r23, Y+26	; 0x1a
     708:	8b 8d       	ldd	r24, Y+27	; 0x1b
     70a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e4       	ldi	r19, 0x40	; 64
     710:	4c e1       	ldi	r20, 0x1C	; 28
     712:	55 e4       	ldi	r21, 0x45	; 69
     714:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	8d 8b       	std	Y+21, r24	; 0x15
     71e:	9e 8b       	std	Y+22, r25	; 0x16
     720:	af 8b       	std	Y+23, r26	; 0x17
     722:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     724:	6d 89       	ldd	r22, Y+21	; 0x15
     726:	7e 89       	ldd	r23, Y+22	; 0x16
     728:	8f 89       	ldd	r24, Y+23	; 0x17
     72a:	98 8d       	ldd	r25, Y+24	; 0x18
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     738:	88 23       	and	r24, r24
     73a:	2c f4       	brge	.+10     	; 0x746 <actuators_umbrella+0x6a>
		__ticks = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9c 8b       	std	Y+20, r25	; 0x14
     742:	8b 8b       	std	Y+19, r24	; 0x13
     744:	3f c0       	rjmp	.+126    	; 0x7c4 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     746:	6d 89       	ldd	r22, Y+21	; 0x15
     748:	7e 89       	ldd	r23, Y+22	; 0x16
     74a:	8f 89       	ldd	r24, Y+23	; 0x17
     74c:	98 8d       	ldd	r25, Y+24	; 0x18
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	3f ef       	ldi	r19, 0xFF	; 255
     752:	4f e7       	ldi	r20, 0x7F	; 127
     754:	57 e4       	ldi	r21, 0x47	; 71
     756:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     75a:	18 16       	cp	r1, r24
     75c:	4c f5       	brge	.+82     	; 0x7b0 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75e:	69 8d       	ldd	r22, Y+25	; 0x19
     760:	7a 8d       	ldd	r23, Y+26	; 0x1a
     762:	8b 8d       	ldd	r24, Y+27	; 0x1b
     764:	9c 8d       	ldd	r25, Y+28	; 0x1c
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e2       	ldi	r20, 0x20	; 32
     76c:	51 e4       	ldi	r21, 0x41	; 65
     76e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     772:	dc 01       	movw	r26, r24
     774:	cb 01       	movw	r24, r22
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	9c 8b       	std	Y+20, r25	; 0x14
     784:	8b 8b       	std	Y+19, r24	; 0x13
     786:	0f c0       	rjmp	.+30     	; 0x7a6 <actuators_umbrella+0xca>
     788:	8a ef       	ldi	r24, 0xFA	; 250
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9a 8b       	std	Y+18, r25	; 0x12
     78e:	89 8b       	std	Y+17, r24	; 0x11
     790:	89 89       	ldd	r24, Y+17	; 0x11
     792:	9a 89       	ldd	r25, Y+18	; 0x12
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <actuators_umbrella+0xb8>
     798:	9a 8b       	std	Y+18, r25	; 0x12
     79a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     79c:	8b 89       	ldd	r24, Y+19	; 0x13
     79e:	9c 89       	ldd	r25, Y+20	; 0x14
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	9c 8b       	std	Y+20, r25	; 0x14
     7a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a6:	8b 89       	ldd	r24, Y+19	; 0x13
     7a8:	9c 89       	ldd	r25, Y+20	; 0x14
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	69 f7       	brne	.-38     	; 0x788 <actuators_umbrella+0xac>
     7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b0:	6d 89       	ldd	r22, Y+21	; 0x15
     7b2:	7e 89       	ldd	r23, Y+22	; 0x16
     7b4:	8f 89       	ldd	r24, Y+23	; 0x17
     7b6:	98 8d       	ldd	r25, Y+24	; 0x18
     7b8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	9c 8b       	std	Y+20, r25	; 0x14
     7c2:	8b 8b       	std	Y+19, r24	; 0x13
     7c4:	8b 89       	ldd	r24, Y+19	; 0x13
     7c6:	9c 89       	ldd	r25, Y+20	; 0x14
     7c8:	98 8b       	std	Y+16, r25	; 0x10
     7ca:	8f 87       	std	Y+15, r24	; 0x0f
     7cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ce:	98 89       	ldd	r25, Y+16	; 0x10
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <actuators_umbrella+0xf4>
     7d4:	98 8b       	std	Y+16, r25	; 0x10
     7d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	d2 de       	rcall	.-604    	; 0x580 <servo_set_door_position>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	aa e7       	ldi	r26, 0x7A	; 122
     7e2:	b4 e4       	ldi	r27, 0x44	; 68
     7e4:	8b 87       	std	Y+11, r24	; 0x0b
     7e6:	9c 87       	std	Y+12, r25	; 0x0c
     7e8:	ad 87       	std	Y+13, r26	; 0x0d
     7ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     7ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     7f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e4       	ldi	r19, 0x40	; 64
     7f8:	4c e1       	ldi	r20, 0x1C	; 28
     7fa:	55 e4       	ldi	r21, 0x45	; 69
     7fc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	8f 83       	std	Y+7, r24	; 0x07
     806:	98 87       	std	Y+8, r25	; 0x08
     808:	a9 87       	std	Y+9, r26	; 0x09
     80a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     80c:	6f 81       	ldd	r22, Y+7	; 0x07
     80e:	78 85       	ldd	r23, Y+8	; 0x08
     810:	89 85       	ldd	r24, Y+9	; 0x09
     812:	9a 85       	ldd	r25, Y+10	; 0x0a
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	2c f4       	brge	.+10     	; 0x82e <actuators_umbrella+0x152>
		__ticks = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9e 83       	std	Y+6, r25	; 0x06
     82a:	8d 83       	std	Y+5, r24	; 0x05
     82c:	3f c0       	rjmp	.+126    	; 0x8ac <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     82e:	6f 81       	ldd	r22, Y+7	; 0x07
     830:	78 85       	ldd	r23, Y+8	; 0x08
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	3f ef       	ldi	r19, 0xFF	; 255
     83a:	4f e7       	ldi	r20, 0x7F	; 127
     83c:	57 e4       	ldi	r21, 0x47	; 71
     83e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     842:	18 16       	cp	r1, r24
     844:	4c f5       	brge	.+82     	; 0x898 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     846:	6b 85       	ldd	r22, Y+11	; 0x0b
     848:	7c 85       	ldd	r23, Y+12	; 0x0c
     84a:	8d 85       	ldd	r24, Y+13	; 0x0d
     84c:	9e 85       	ldd	r25, Y+14	; 0x0e
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e2       	ldi	r20, 0x20	; 32
     854:	51 e4       	ldi	r21, 0x41	; 65
     856:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	8d 83       	std	Y+5, r24	; 0x05
     86e:	0f c0       	rjmp	.+30     	; 0x88e <actuators_umbrella+0x1b2>
     870:	8a ef       	ldi	r24, 0xFA	; 250
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9c 83       	std	Y+4, r25	; 0x04
     876:	8b 83       	std	Y+3, r24	; 0x03
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <actuators_umbrella+0x1a0>
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	8d 81       	ldd	r24, Y+5	; 0x05
     886:	9e 81       	ldd	r25, Y+6	; 0x06
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	9e 83       	std	Y+6, r25	; 0x06
     88c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	9e 81       	ldd	r25, Y+6	; 0x06
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	69 f7       	brne	.-38     	; 0x870 <actuators_umbrella+0x194>
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     898:	6f 81       	ldd	r22, Y+7	; 0x07
     89a:	78 85       	ldd	r23, Y+8	; 0x08
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	9e 83       	std	Y+6, r25	; 0x06
     8aa:	8d 83       	std	Y+5, r24	; 0x05
     8ac:	8d 81       	ldd	r24, Y+5	; 0x05
     8ae:	9e 81       	ldd	r25, Y+6	; 0x06
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <actuators_umbrella+0x1dc>
     8bc:	9a 83       	std	Y+2, r25	; 0x02
     8be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8c0:	6c 96       	adiw	r28, 0x1c	; 28
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <actuators_setup>:
void actuators_setup(void)
{
     8d2:	df 93       	push	r29
     8d4:	cf 93       	push	r28
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	aa 97       	sbiw	r28, 0x2a	; 42
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     8e6:	8a e5       	ldi	r24, 0x5A	; 90
     8e8:	4b de       	rcall	.-874    	; 0x580 <servo_set_door_position>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	aa e7       	ldi	r26, 0x7A	; 122
     8f0:	b4 e4       	ldi	r27, 0x44	; 68
     8f2:	8f a3       	std	Y+39, r24	; 0x27
     8f4:	98 a7       	std	Y+40, r25	; 0x28
     8f6:	a9 a7       	std	Y+41, r26	; 0x29
     8f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8fa:	6f a1       	ldd	r22, Y+39	; 0x27
     8fc:	78 a5       	ldd	r23, Y+40	; 0x28
     8fe:	89 a5       	ldd	r24, Y+41	; 0x29
     900:	9a a5       	ldd	r25, Y+42	; 0x2a
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e4       	ldi	r19, 0x40	; 64
     906:	4c e1       	ldi	r20, 0x1C	; 28
     908:	55 e4       	ldi	r21, 0x45	; 69
     90a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	8b a3       	std	Y+35, r24	; 0x23
     914:	9c a3       	std	Y+36, r25	; 0x24
     916:	ad a3       	std	Y+37, r26	; 0x25
     918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     91a:	6b a1       	ldd	r22, Y+35	; 0x23
     91c:	7c a1       	ldd	r23, Y+36	; 0x24
     91e:	8d a1       	ldd	r24, Y+37	; 0x25
     920:	9e a1       	ldd	r25, Y+38	; 0x26
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     92e:	88 23       	and	r24, r24
     930:	2c f4       	brge	.+10     	; 0x93c <actuators_setup+0x6a>
		__ticks = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	9a a3       	std	Y+34, r25	; 0x22
     938:	89 a3       	std	Y+33, r24	; 0x21
     93a:	3f c0       	rjmp	.+126    	; 0x9ba <actuators_setup+0xe8>
	else if (__tmp > 65535)
     93c:	6b a1       	ldd	r22, Y+35	; 0x23
     93e:	7c a1       	ldd	r23, Y+36	; 0x24
     940:	8d a1       	ldd	r24, Y+37	; 0x25
     942:	9e a1       	ldd	r25, Y+38	; 0x26
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	3f ef       	ldi	r19, 0xFF	; 255
     948:	4f e7       	ldi	r20, 0x7F	; 127
     94a:	57 e4       	ldi	r21, 0x47	; 71
     94c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     950:	18 16       	cp	r1, r24
     952:	4c f5       	brge	.+82     	; 0x9a6 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     954:	6f a1       	ldd	r22, Y+39	; 0x27
     956:	78 a5       	ldd	r23, Y+40	; 0x28
     958:	89 a5       	ldd	r24, Y+41	; 0x29
     95a:	9a a5       	ldd	r25, Y+42	; 0x2a
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e2       	ldi	r20, 0x20	; 32
     962:	51 e4       	ldi	r21, 0x41	; 65
     964:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	9a a3       	std	Y+34, r25	; 0x22
     97a:	89 a3       	std	Y+33, r24	; 0x21
     97c:	0f c0       	rjmp	.+30     	; 0x99c <actuators_setup+0xca>
     97e:	8a ef       	ldi	r24, 0xFA	; 250
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	98 a3       	std	Y+32, r25	; 0x20
     984:	8f 8f       	std	Y+31, r24	; 0x1f
     986:	8f 8d       	ldd	r24, Y+31	; 0x1f
     988:	98 a1       	ldd	r25, Y+32	; 0x20
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <actuators_setup+0xb8>
     98e:	98 a3       	std	Y+32, r25	; 0x20
     990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     992:	89 a1       	ldd	r24, Y+33	; 0x21
     994:	9a a1       	ldd	r25, Y+34	; 0x22
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	9a a3       	std	Y+34, r25	; 0x22
     99a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99c:	89 a1       	ldd	r24, Y+33	; 0x21
     99e:	9a a1       	ldd	r25, Y+34	; 0x22
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	69 f7       	brne	.-38     	; 0x97e <actuators_setup+0xac>
     9a4:	14 c0       	rjmp	.+40     	; 0x9ce <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a6:	6b a1       	ldd	r22, Y+35	; 0x23
     9a8:	7c a1       	ldd	r23, Y+36	; 0x24
     9aa:	8d a1       	ldd	r24, Y+37	; 0x25
     9ac:	9e a1       	ldd	r25, Y+38	; 0x26
     9ae:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	9a a3       	std	Y+34, r25	; 0x22
     9b8:	89 a3       	std	Y+33, r24	; 0x21
     9ba:	89 a1       	ldd	r24, Y+33	; 0x21
     9bc:	9a a1       	ldd	r25, Y+34	; 0x22
     9be:	9e 8f       	std	Y+30, r25	; 0x1e
     9c0:	8d 8f       	std	Y+29, r24	; 0x1d
     9c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <actuators_setup+0xf4>
     9ca:	9e 8f       	std	Y+30, r25	; 0x1e
     9cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(85);
     9ce:	85 e5       	ldi	r24, 0x55	; 85
     9d0:	92 dd       	rcall	.-1244   	; 0x4f6 <servo_set_umbrella_position>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	aa e7       	ldi	r26, 0x7A	; 122
     9d8:	b4 e4       	ldi	r27, 0x44	; 68
     9da:	89 8f       	std	Y+25, r24	; 0x19
     9dc:	9a 8f       	std	Y+26, r25	; 0x1a
     9de:	ab 8f       	std	Y+27, r26	; 0x1b
     9e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9e2:	69 8d       	ldd	r22, Y+25	; 0x19
     9e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e4       	ldi	r19, 0x40	; 64
     9ee:	4c e1       	ldi	r20, 0x1C	; 28
     9f0:	55 e4       	ldi	r21, 0x45	; 69
     9f2:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	8d 8b       	std	Y+21, r24	; 0x15
     9fc:	9e 8b       	std	Y+22, r25	; 0x16
     9fe:	af 8b       	std	Y+23, r26	; 0x17
     a00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a02:	6d 89       	ldd	r22, Y+21	; 0x15
     a04:	7e 89       	ldd	r23, Y+22	; 0x16
     a06:	8f 89       	ldd	r24, Y+23	; 0x17
     a08:	98 8d       	ldd	r25, Y+24	; 0x18
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e8       	ldi	r20, 0x80	; 128
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	2c f4       	brge	.+10     	; 0xa24 <actuators_setup+0x152>
		__ticks = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	9c 8b       	std	Y+20, r25	; 0x14
     a20:	8b 8b       	std	Y+19, r24	; 0x13
     a22:	3f c0       	rjmp	.+126    	; 0xaa2 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a24:	6d 89       	ldd	r22, Y+21	; 0x15
     a26:	7e 89       	ldd	r23, Y+22	; 0x16
     a28:	8f 89       	ldd	r24, Y+23	; 0x17
     a2a:	98 8d       	ldd	r25, Y+24	; 0x18
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	3f ef       	ldi	r19, 0xFF	; 255
     a30:	4f e7       	ldi	r20, 0x7F	; 127
     a32:	57 e4       	ldi	r21, 0x47	; 71
     a34:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     a38:	18 16       	cp	r1, r24
     a3a:	4c f5       	brge	.+82     	; 0xa8e <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3c:	69 8d       	ldd	r22, Y+25	; 0x19
     a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e2       	ldi	r20, 0x20	; 32
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	9c 8b       	std	Y+20, r25	; 0x14
     a62:	8b 8b       	std	Y+19, r24	; 0x13
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <actuators_setup+0x1b2>
     a66:	8a ef       	ldi	r24, 0xFA	; 250
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9a 8b       	std	Y+18, r25	; 0x12
     a6c:	89 8b       	std	Y+17, r24	; 0x11
     a6e:	89 89       	ldd	r24, Y+17	; 0x11
     a70:	9a 89       	ldd	r25, Y+18	; 0x12
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <actuators_setup+0x1a0>
     a76:	9a 8b       	std	Y+18, r25	; 0x12
     a78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7a:	8b 89       	ldd	r24, Y+19	; 0x13
     a7c:	9c 89       	ldd	r25, Y+20	; 0x14
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	9c 8b       	std	Y+20, r25	; 0x14
     a82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a84:	8b 89       	ldd	r24, Y+19	; 0x13
     a86:	9c 89       	ldd	r25, Y+20	; 0x14
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	69 f7       	brne	.-38     	; 0xa66 <actuators_setup+0x194>
     a8c:	14 c0       	rjmp	.+40     	; 0xab6 <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8e:	6d 89       	ldd	r22, Y+21	; 0x15
     a90:	7e 89       	ldd	r23, Y+22	; 0x16
     a92:	8f 89       	ldd	r24, Y+23	; 0x17
     a94:	98 8d       	ldd	r25, Y+24	; 0x18
     a96:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	9c 8b       	std	Y+20, r25	; 0x14
     aa0:	8b 8b       	std	Y+19, r24	; 0x13
     aa2:	8b 89       	ldd	r24, Y+19	; 0x13
     aa4:	9c 89       	ldd	r25, Y+20	; 0x14
     aa6:	98 8b       	std	Y+16, r25	; 0x10
     aa8:	8f 87       	std	Y+15, r24	; 0x0f
     aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
     aac:	98 89       	ldd	r25, Y+16	; 0x10
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <actuators_setup+0x1dc>
     ab2:	98 8b       	std	Y+16, r25	; 0x10
     ab4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	63 dd       	rcall	.-1338   	; 0x580 <servo_set_door_position>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	aa ef       	ldi	r26, 0xFA	; 250
     ac0:	b3 e4       	ldi	r27, 0x43	; 67
     ac2:	8b 87       	std	Y+11, r24	; 0x0b
     ac4:	9c 87       	std	Y+12, r25	; 0x0c
     ac6:	ad 87       	std	Y+13, r26	; 0x0d
     ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aca:	6b 85       	ldd	r22, Y+11	; 0x0b
     acc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ace:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e4       	ldi	r19, 0x40	; 64
     ad6:	4c e1       	ldi	r20, 0x1C	; 28
     ad8:	55 e4       	ldi	r21, 0x45	; 69
     ada:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	8f 83       	std	Y+7, r24	; 0x07
     ae4:	98 87       	std	Y+8, r25	; 0x08
     ae6:	a9 87       	std	Y+9, r26	; 0x09
     ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     aea:	6f 81       	ldd	r22, Y+7	; 0x07
     aec:	78 85       	ldd	r23, Y+8	; 0x08
     aee:	89 85       	ldd	r24, Y+9	; 0x09
     af0:	9a 85       	ldd	r25, Y+10	; 0x0a
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e8       	ldi	r20, 0x80	; 128
     af8:	5f e3       	ldi	r21, 0x3F	; 63
     afa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     afe:	88 23       	and	r24, r24
     b00:	2c f4       	brge	.+10     	; 0xb0c <actuators_setup+0x23a>
		__ticks = 1;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	9e 83       	std	Y+6, r25	; 0x06
     b08:	8d 83       	std	Y+5, r24	; 0x05
     b0a:	3f c0       	rjmp	.+126    	; 0xb8a <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     b0c:	6f 81       	ldd	r22, Y+7	; 0x07
     b0e:	78 85       	ldd	r23, Y+8	; 0x08
     b10:	89 85       	ldd	r24, Y+9	; 0x09
     b12:	9a 85       	ldd	r25, Y+10	; 0x0a
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	3f ef       	ldi	r19, 0xFF	; 255
     b18:	4f e7       	ldi	r20, 0x7F	; 127
     b1a:	57 e4       	ldi	r21, 0x47	; 71
     b1c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     b20:	18 16       	cp	r1, r24
     b22:	4c f5       	brge	.+82     	; 0xb76 <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b24:	6b 85       	ldd	r22, Y+11	; 0x0b
     b26:	7c 85       	ldd	r23, Y+12	; 0x0c
     b28:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e2       	ldi	r20, 0x20	; 32
     b32:	51 e4       	ldi	r21, 0x41	; 65
     b34:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	bc 01       	movw	r22, r24
     b3e:	cd 01       	movw	r24, r26
     b40:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     b44:	dc 01       	movw	r26, r24
     b46:	cb 01       	movw	r24, r22
     b48:	9e 83       	std	Y+6, r25	; 0x06
     b4a:	8d 83       	std	Y+5, r24	; 0x05
     b4c:	0f c0       	rjmp	.+30     	; 0xb6c <actuators_setup+0x29a>
     b4e:	8a ef       	ldi	r24, 0xFA	; 250
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <actuators_setup+0x288>
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	9e 81       	ldd	r25, Y+6	; 0x06
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	69 f7       	brne	.-38     	; 0xb4e <actuators_setup+0x27c>
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b76:	6f 81       	ldd	r22, Y+7	; 0x07
     b78:	78 85       	ldd	r23, Y+8	; 0x08
     b7a:	89 85       	ldd	r24, Y+9	; 0x09
     b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <actuators_setup+0x2c4>
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     b9e:	88 dd       	rcall	.-1264   	; 0x6b0 <servo_set_grabbers_up>
	
}
     ba0:	aa 96       	adiw	r28, 0x2a	; 42
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <__vector_18>:
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	00 90 5b 00 	lds	r0, 0x005B
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <__vector_18+0x2a>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <__vector_18+0x2c>
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	ed ee       	ldi	r30, 0xED	; 237
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8c 83       	std	Y+4, r24	; 0x04
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	9c c0       	rjmp	.+312    	; 0xd26 <__vector_18+0x174>
     bee:	ed ee       	ldi	r30, 0xED	; 237
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	82 95       	swap	r24
     bf6:	80 7f       	andi	r24, 0xF0	; 240
     bf8:	80 83       	st	Z, r24
     bfa:	ee ee       	ldi	r30, 0xEE	; 238
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	82 95       	swap	r24
     c02:	86 95       	lsr	r24
     c04:	87 70       	andi	r24, 0x07	; 7
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	90 70       	andi	r25, 0x00	; 0
     c0e:	88 23       	and	r24, r24
     c10:	09 f4       	brne	.+2      	; 0xc14 <__vector_18+0x62>
     c12:	6e c0       	rjmp	.+220    	; 0xcf0 <__vector_18+0x13e>
     c14:	ef ee       	ldi	r30, 0xEF	; 239
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	80 83       	st	Z, r24
     c1c:	ae ee       	ldi	r26, 0xEE	; 238
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ee ee       	ldi	r30, 0xEE	; 238
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8f 7d       	andi	r24, 0xDF	; 223
     c28:	8c 93       	st	X, r24
     c2a:	e2 ef       	ldi	r30, 0xF2	; 242
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 95       	swap	r24
     c32:	86 95       	lsr	r24
     c34:	87 70       	andi	r24, 0x07	; 7
     c36:	28 2f       	mov	r18, r24
     c38:	e3 ef       	ldi	r30, 0xF3	; 243
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	82 2b       	or	r24, r18
     c50:	8a 83       	std	Y+2, r24	; 0x02
     c52:	19 82       	std	Y+1, r1	; 0x01
     c54:	2a c0       	rjmp	.+84     	; 0xcaa <__vector_18+0xf8>
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	82 1b       	sub	r24, r18
     c62:	93 0b       	sbc	r25, r19
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	90 95       	com	r25
     c6a:	81 95       	neg	r24
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	fc 01       	movw	r30, r24
     c70:	e6 5f       	subi	r30, 0xF6	; 246
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	40 81       	ld	r20, Z
     c76:	51 81       	ldd	r21, Z+1	; 0x01
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	fc 01       	movw	r30, r24
     c82:	e2 5e       	subi	r30, 0xE2	; 226
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	80 81       	ld	r24, Z
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	da 01       	movw	r26, r20
     c98:	a8 0f       	add	r26, r24
     c9a:	b9 1f       	adc	r27, r25
     c9c:	ea ef       	ldi	r30, 0xFA	; 250
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8c 93       	st	X, r24
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	98 f2       	brcs	.-90     	; 0xc56 <__vector_18+0xa4>
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	fc 01       	movw	r30, r24
     cba:	e2 5e       	subi	r30, 0xE2	; 226
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	80 83       	st	Z, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	85 30       	cpi	r24, 0x05	; 5
     cc8:	41 f4       	brne	.+16     	; 0xcda <__vector_18+0x128>
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 5e       	subi	r30, 0xE2	; 226
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	10 82       	st	Z, r1
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	88 2f       	mov	r24, r24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	fc 01       	movw	r30, r24
     ce4:	ee 5c       	subi	r30, 0xCE	; 206
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	80 81       	ld	r24, Z
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 83       	st	Z, r24
     cee:	1f c0       	rjmp	.+62     	; 0xd2e <__vector_18+0x17c>
     cf0:	ee ee       	ldi	r30, 0xEE	; 238
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 95       	swap	r24
     cf8:	86 95       	lsr	r24
     cfa:	86 95       	lsr	r24
     cfc:	83 70       	andi	r24, 0x03	; 3
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	88 23       	and	r24, r24
     d08:	59 f0       	breq	.+22     	; 0xd20 <__vector_18+0x16e>
     d0a:	ef ee       	ldi	r30, 0xEF	; 239
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
     d10:	ae ee       	ldi	r26, 0xEE	; 238
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ee ee       	ldi	r30, 0xEE	; 238
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 7b       	andi	r24, 0xBF	; 191
     d1c:	8c 93       	st	X, r24
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <__vector_18+0x17c>
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	8f 30       	cpi	r24, 0x0F	; 15
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <__vector_18+0x17c>
     d2c:	60 cf       	rjmp	.-320    	; 0xbee <__vector_18+0x3c>
     d2e:	ed ee       	ldi	r30, 0xED	; 237
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	80 83       	st	Z, r24
     d36:	aa ed       	ldi	r26, 0xDA	; 218
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea ed       	ldi	r30, 0xDA	; 218
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 93       	st	X, r24
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	00 92 5b 00 	sts	0x005B, r0
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <CAN_InitModule>:
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <CAN_InitModule+0x6>
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	e8 ed       	ldi	r30, 0xD8	; 216
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 83       	st	Z, r24
     d84:	1a 82       	std	Y+2, r1	; 0x02
     d86:	32 c0       	rjmp	.+100    	; 0xdec <CAN_InitModule+0x7a>
     d88:	ed ee       	ldi	r30, 0xED	; 237
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	82 95       	swap	r24
     d90:	80 7f       	andi	r24, 0xF0	; 240
     d92:	80 83       	st	Z, r24
     d94:	ee ee       	ldi	r30, 0xEE	; 238
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	10 82       	st	Z, r1
     d9a:	ef ee       	ldi	r30, 0xEF	; 239
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	10 82       	st	Z, r1
     da0:	e3 ef       	ldi	r30, 0xF3	; 243
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	10 82       	st	Z, r1
     da6:	e2 ef       	ldi	r30, 0xF2	; 242
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1
     dac:	e1 ef       	ldi	r30, 0xF1	; 241
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	10 82       	st	Z, r1
     db2:	e0 ef       	ldi	r30, 0xF0	; 240
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
     db8:	e7 ef       	ldi	r30, 0xF7	; 247
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	10 82       	st	Z, r1
     dbe:	e6 ef       	ldi	r30, 0xF6	; 246
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	10 82       	st	Z, r1
     dc4:	e5 ef       	ldi	r30, 0xF5	; 245
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 82       	st	Z, r1
     dca:	e4 ef       	ldi	r30, 0xF4	; 244
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	10 82       	st	Z, r1
     dd0:	19 82       	std	Y+1, r1	; 0x01
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <CAN_InitModule+0x6e>
     dd4:	ea ef       	ldi	r30, 0xFA	; 250
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	10 82       	st	Z, r1
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 30       	cpi	r24, 0x08	; 8
     de4:	b8 f3       	brcs	.-18     	; 0xdd4 <CAN_InitModule+0x62>
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	8a 83       	std	Y+2, r24	; 0x02
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	8f 30       	cpi	r24, 0x0F	; 15
     df0:	58 f2       	brcs	.-106    	; 0xd88 <CAN_InitModule+0x16>
     df2:	e8 ed       	ldi	r30, 0xD8	; 216
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	80 83       	st	Z, r24
     dfa:	e2 ee       	ldi	r30, 0xE2	; 226
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 83       	st	Z, r24
     e02:	e3 ee       	ldi	r30, 0xE3	; 227
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	88 e0       	ldi	r24, 0x08	; 8
     e08:	80 83       	st	Z, r24
     e0a:	e4 ee       	ldi	r30, 0xE4	; 228
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	8e e5       	ldi	r24, 0x5E	; 94
     e10:	80 83       	st	Z, r24
     e12:	e5 ee       	ldi	r30, 0xE5	; 229
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	10 82       	st	Z, r1
     e18:	eb ed       	ldi	r30, 0xDB	; 219
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 eb       	ldi	r24, 0xB0	; 176
     e1e:	80 83       	st	Z, r24
     e20:	ef ed       	ldi	r30, 0xDF	; 223
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8f e7       	ldi	r24, 0x7F	; 127
     e26:	80 83       	st	Z, r24
     e28:	ee ed       	ldi	r30, 0xDE	; 222
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	80 83       	st	Z, r24
     e30:	78 94       	sei
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <CAN_InitRxMob>:
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <CAN_InitRxMob+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <CAN_InitRxMob+0x8>
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
     e4e:	ed ee       	ldi	r30, 0xED	; 237
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	e9 ed       	ldi	r30, 0xD9	; 217
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	82 95       	swap	r24
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	81 70       	andi	r24, 0x01	; 1
     e66:	90 70       	andi	r25, 0x00	; 0
     e68:	88 23       	and	r24, r24
     e6a:	a9 f7       	brne	.-22     	; 0xe56 <CAN_InitRxMob+0x1a>
     e6c:	e9 ed       	ldi	r30, 0xD9	; 217
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	81 70       	andi	r24, 0x01	; 1
     e7e:	90 70       	andi	r25, 0x00	; 0
     e80:	88 23       	and	r24, r24
     e82:	49 f7       	brne	.-46     	; 0xe56 <CAN_InitRxMob+0x1a>
     e84:	1a 82       	std	Y+2, r1	; 0x02
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <CAN_InitRxMob+0xca>
     e88:	ed ee       	ldi	r30, 0xED	; 237
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	82 95       	swap	r24
     e90:	80 7f       	andi	r24, 0xF0	; 240
     e92:	80 83       	st	Z, r24
     e94:	ef ee       	ldi	r30, 0xEF	; 239
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 95       	swap	r24
     e9c:	86 95       	lsr	r24
     e9e:	86 95       	lsr	r24
     ea0:	83 70       	andi	r24, 0x03	; 3
     ea2:	88 23       	and	r24, r24
     ea4:	69 f5       	brne	.+90     	; 0xf00 <CAN_InitRxMob+0xc4>
     ea6:	ef ee       	ldi	r30, 0xEF	; 239
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8f e0       	ldi	r24, 0x0F	; 15
     eac:	80 83       	st	Z, r24
     eae:	e3 ef       	ldi	r30, 0xF3	; 243
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	9c 81       	ldd	r25, Y+4	; 0x04
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	96 95       	lsr	r25
     ebe:	87 95       	ror	r24
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	80 83       	st	Z, r24
     ec6:	e2 ef       	ldi	r30, 0xF2	; 242
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	82 95       	swap	r24
     ece:	88 0f       	add	r24, r24
     ed0:	80 7e       	andi	r24, 0xE0	; 224
     ed2:	80 83       	st	Z, r24
     ed4:	e6 ef       	ldi	r30, 0xF6	; 246
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 ee       	ldi	r24, 0xE0	; 224
     eda:	80 83       	st	Z, r24
     edc:	e7 ef       	ldi	r30, 0xF7	; 247
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	80 83       	st	Z, r24
     ee4:	af ee       	ldi	r26, 0xEF	; 239
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ef ee       	ldi	r30, 0xEF	; 239
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	8c 93       	st	X, r24
     ef2:	ed ee       	ldi	r30, 0xED	; 237
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	0c c0       	rjmp	.+24     	; 0xf18 <CAN_InitRxMob+0xdc>
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	8f 30       	cpi	r24, 0x0F	; 15
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <CAN_InitRxMob+0xd2>
     f0c:	bd cf       	rjmp	.-134    	; 0xe88 <CAN_InitRxMob+0x4c>
     f0e:	ed ee       	ldi	r30, 0xED	; 237
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	1d 82       	std	Y+5, r1	; 0x05
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <CAN_Init>:
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <CAN_Init+0xa>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	1b df       	rcall	.-458    	; 0xd72 <CAN_InitModule>
     f3c:	19 82       	std	Y+1, r1	; 0x01
     f3e:	35 c0       	rjmp	.+106    	; 0xfaa <CAN_Init+0x80>
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	79 df       	rcall	.-270    	; 0xe3c <CAN_InitRxMob>
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	8c 01       	movw	r16, r24
     f56:	06 5f       	subi	r16, 0xF6	; 246
     f58:	1e 4f       	sbci	r17, 0xFE	; 254
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	84 d7       	rcall	.+3848   	; 0x1e6c <calloc>
     f64:	f8 01       	movw	r30, r16
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	48 2f       	mov	r20, r24
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	ee 5c       	subi	r30, 0xCE	; 206
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	10 82       	st	Z, r1
     f84:	fc 01       	movw	r30, r24
     f86:	ee 5c       	subi	r30, 0xCE	; 206
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	80 81       	ld	r24, Z
     f8c:	f9 01       	movw	r30, r18
     f8e:	e8 5d       	subi	r30, 0xD8	; 216
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	80 83       	st	Z, r24
     f94:	f9 01       	movw	r30, r18
     f96:	e8 5d       	subi	r30, 0xD8	; 216
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	fa 01       	movw	r30, r20
     f9e:	e2 5e       	subi	r30, 0xE2	; 226
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	80 83       	st	Z, r24
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	99 81       	ldd	r25, Y+1	; 0x01
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	98 17       	cp	r25, r24
     fb0:	38 f2       	brcs	.-114    	; 0xf40 <CAN_Init+0x16>
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	2c 97       	sbiw	r28, 0x0c	; 12
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	89 87       	std	Y+9, r24	; 0x09
     fd6:	6a 87       	std	Y+10, r22	; 0x0a
     fd8:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fda:	80 91 08 01 	lds	r24, 0x0108
     fde:	90 91 09 01 	lds	r25, 0x0109
     fe2:	9c 83       	std	Y+4, r25	; 0x04
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	06 97       	sbiw	r24, 0x06	; 6
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	8f 83       	std	Y+7, r24	; 0x07
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     ff2:	ef 81       	ldd	r30, Y+7	; 0x07
     ff4:	f8 85       	ldd	r31, Y+8	; 0x08
     ff6:	90 81       	ld	r25, Z
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	98 17       	cp	r25, r24
     ffc:	19 f4       	brne	.+6      	; 0x1004 <gpio_register_pin+0x44>
            return 1;
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	c8 c0       	rjmp	.+400    	; 0x1194 <__stack+0x95>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1004:	ef 81       	ldd	r30, Y+7	; 0x07
    1006:	f8 85       	ldd	r31, Y+8	; 0x08
    1008:	80 85       	ldd	r24, Z+8	; 0x08
    100a:	91 85       	ldd	r25, Z+9	; 0x09
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	06 97       	sbiw	r24, 0x06	; 6
    1016:	98 87       	std	Y+8, r25	; 0x08
    1018:	8f 83       	std	Y+7, r24	; 0x07
    101a:	8f 81       	ldd	r24, Y+7	; 0x07
    101c:	98 85       	ldd	r25, Y+8	; 0x08
    101e:	06 96       	adiw	r24, 0x06	; 6
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	86 30       	cpi	r24, 0x06	; 6
    1024:	92 07       	cpc	r25, r18
    1026:	29 f7       	brne	.-54     	; 0xff2 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	87 70       	andi	r24, 0x07	; 7
    1038:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    103a:	8a 85       	ldd	r24, Y+10	; 0x0a
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <gpio_register_pin+0x82>
    1040:	48 c0       	rjmp	.+144    	; 0x10d2 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	4e 96       	adiw	r24, 0x1e	; 30
    1054:	dc 01       	movw	r26, r24
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	c9 01       	movw	r24, r18
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	4e 96       	adiw	r24, 0x1e	; 30
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <gpio_register_pin+0xbe>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	2a 95       	dec	r18
    1080:	e2 f7       	brpl	.-8      	; 0x107a <gpio_register_pin+0xba>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	c9 01       	movw	r24, r18
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	4f 96       	adiw	r24, 0x1f	; 31
    1098:	dc 01       	movw	r26, r24
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	c9 01       	movw	r24, r18
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	82 0f       	add	r24, r18
    10a8:	93 1f       	adc	r25, r19
    10aa:	4f 96       	adiw	r24, 0x1f	; 31
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <gpio_register_pin+0x104>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <gpio_register_pin+0x100>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
        return 0;
    10ce:	1c 86       	std	Y+12, r1	; 0x0c
    10d0:	61 c0       	rjmp	.+194    	; 0x1194 <__stack+0x95>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	c9 01       	movw	r24, r18
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	4e 96       	adiw	r24, 0x1e	; 30
    10e4:	dc 01       	movw	r26, r24
    10e6:	8e 81       	ldd	r24, Y+6	; 0x06
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	c9 01       	movw	r24, r18
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	82 0f       	add	r24, r18
    10f4:	93 1f       	adc	r25, r19
    10f6:	4e 96       	adiw	r24, 0x1e	; 30
    10f8:	fc 01       	movw	r30, r24
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__stack+0xf>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	2a 95       	dec	r18
    1110:	e2 f7       	brpl	.-8      	; 0x110a <__stack+0xb>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	82 0f       	add	r24, r18
    1126:	93 1f       	adc	r25, r19
    1128:	4f 96       	adiw	r24, 0x1f	; 31
    112a:	dc 01       	movw	r26, r24
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	c9 01       	movw	r24, r18
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	4f 96       	adiw	r24, 0x1f	; 31
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <__stack+0x55>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <__stack+0x51>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9f d6       	rcall	.+3390   	; 0x1ea0 <malloc>
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	19 f4       	brne	.+6      	; 0x1174 <__stack+0x75>
        return 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	8c 87       	std	Y+12, r24	; 0x0c
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <__stack+0x95>

    input->pin       = pin;
    1174:	ef 81       	ldd	r30, Y+7	; 0x07
    1176:	f8 85       	ldd	r31, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    117c:	ef 81       	ldd	r30, Y+7	; 0x07
    117e:	f8 85       	ldd	r31, Y+8	; 0x08
    1180:	8b 85       	ldd	r24, Y+11	; 0x0b
    1182:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
    1186:	98 85       	ldd	r25, Y+8	; 0x08
    1188:	06 96       	adiw	r24, 0x06	; 6
    118a:	26 e0       	ldi	r18, 0x06	; 6
    118c:	31 e0       	ldi	r19, 0x01	; 1
    118e:	b9 01       	movw	r22, r18
    1190:	0b d0       	rcall	.+22     	; 0x11a8 <list_add>

    return 0;
    1192:	1c 86       	std	Y+12, r1	; 0x0c
    1194:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1196:	2c 96       	adiw	r28, 0x0c	; 12
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <list_add+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <list_add+0x8>
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	7c 83       	std	Y+4, r23	; 0x04
    11ba:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    11bc:	eb 81       	ldd	r30, Y+3	; 0x03
    11be:	fc 81       	ldd	r31, Y+4	; 0x04
    11c0:	42 81       	ldd	r20, Z+2	; 0x02
    11c2:	53 81       	ldd	r21, Z+3	; 0x03
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	b9 01       	movw	r22, r18
    11ce:	07 d0       	rcall	.+14     	; 0x11de <__list_add>
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <__list_add+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <__list_add+0x8>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <__list_add+0xa>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	7c 83       	std	Y+4, r23	; 0x04
    11f2:	6b 83       	std	Y+3, r22	; 0x03
    11f4:	5e 83       	std	Y+6, r21	; 0x06
    11f6:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    11f8:	ed 81       	ldd	r30, Y+5	; 0x05
    11fa:	fe 81       	ldd	r31, Y+6	; 0x06
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    new->next = next;
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	93 83       	std	Z+3, r25	; 0x03
    120e:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1210:	e9 81       	ldd	r30, Y+1	; 0x01
    1212:	fa 81       	ldd	r31, Y+2	; 0x02
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    prev->next = new;
    121c:	eb 81       	ldd	r30, Y+3	; 0x03
    121e:	fc 81       	ldd	r31, Y+4	; 0x04
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	93 83       	std	Z+3, r25	; 0x03
    1226:	82 83       	std	Z+2, r24	; 0x02
}
    1228:	26 96       	adiw	r28, 0x06	; 6
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <__gpio_read_pin+0x6>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	86 95       	lsr	r24
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	87 70       	andi	r24, 0x07	; 7
    1258:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	c9 01       	movw	r24, r18
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	4d 96       	adiw	r24, 0x1d	; 29
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <__gpio_read_pin+0x4c>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <__gpio_read_pin+0x48>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	2b 97       	sbiw	r28, 0x0b	; 11
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12b0:	80 91 08 01 	lds	r24, 0x0108
    12b4:	90 91 09 01 	lds	r25, 0x0109
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	06 97       	sbiw	r24, 0x06	; 6
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	8f 83       	std	Y+7, r24	; 0x07
    12c6:	55 c0       	rjmp	.+170    	; 0x1372 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12c8:	ef 81       	ldd	r30, Y+7	; 0x07
    12ca:	f8 85       	ldd	r31, Y+8	; 0x08
    12cc:	90 81       	ld	r25, Z
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	98 17       	cp	r25, r24
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <gpio_read_pin+0x3c>
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    12d6:	1c 82       	std	Y+4, r1	; 0x04
    12d8:	21 c0       	rjmp	.+66     	; 0x131c <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8f 81       	ldd	r24, Y+7	; 0x07
    12e2:	98 85       	ldd	r25, Y+8	; 0x08
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	fc 01       	movw	r30, r24
    12ea:	32 96       	adiw	r30, 0x02	; 2
    12ec:	40 81       	ld	r20, Z
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 01       	movw	r18, r24
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	fc 01       	movw	r30, r24
    1304:	32 96       	adiw	r30, 0x02	; 2
    1306:	80 81       	ld	r24, Z
    1308:	48 17       	cp	r20, r24
    130a:	29 f0       	breq	.+10     	; 0x1316 <gpio_read_pin+0x7c>
                    return input->previous_state;
    130c:	ef 81       	ldd	r30, Y+7	; 0x07
    130e:	f8 85       	ldd	r31, Y+8	; 0x08
    1310:	25 81       	ldd	r18, Z+5	; 0x05
    1312:	2b 87       	std	Y+11, r18	; 0x0b
    1314:	38 c0       	rjmp	.+112    	; 0x1386 <gpio_read_pin+0xec>
                i++;
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	e0 f2       	brcs	.-72     	; 0x12da <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1322:	ef 81       	ldd	r30, Y+7	; 0x07
    1324:	f8 85       	ldd	r31, Y+8	; 0x08
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 27       	eor	r24, r25
    132c:	88 23       	and	r24, r24
    132e:	29 f0       	breq	.+10     	; 0x133a <gpio_read_pin+0xa0>
    1330:	ef 81       	ldd	r30, Y+7	; 0x07
    1332:	f8 85       	ldd	r31, Y+8	; 0x08
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	8a 87       	std	Y+10, r24	; 0x0a
    1338:	08 c0       	rjmp	.+16     	; 0x134a <gpio_read_pin+0xb0>
    133a:	ef 81       	ldd	r30, Y+7	; 0x07
    133c:	f8 85       	ldd	r31, Y+8	; 0x08
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	1a 86       	std	Y+10, r1	; 0x0a
    1342:	88 23       	and	r24, r24
    1344:	11 f4       	brne	.+4      	; 0x134a <gpio_read_pin+0xb0>
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	2a 87       	std	Y+10, r18	; 0x0a
    134a:	8a 85       	ldd	r24, Y+10	; 0x0a
    134c:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    134e:	ef 81       	ldd	r30, Y+7	; 0x07
    1350:	f8 85       	ldd	r31, Y+8	; 0x08
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	2b 87       	std	Y+11, r18	; 0x0b
    135a:	15 c0       	rjmp	.+42     	; 0x1386 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    135c:	ef 81       	ldd	r30, Y+7	; 0x07
    135e:	f8 85       	ldd	r31, Y+8	; 0x08
    1360:	80 85       	ldd	r24, Z+8	; 0x08
    1362:	91 85       	ldd	r25, Z+9	; 0x09
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	06 97       	sbiw	r24, 0x06	; 6
    136e:	98 87       	std	Y+8, r25	; 0x08
    1370:	8f 83       	std	Y+7, r24	; 0x07
    1372:	8f 81       	ldd	r24, Y+7	; 0x07
    1374:	98 85       	ldd	r25, Y+8	; 0x08
    1376:	06 96       	adiw	r24, 0x06	; 6
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	86 30       	cpi	r24, 0x06	; 6
    137c:	92 07       	cpc	r25, r18
    137e:	09 f0       	breq	.+2      	; 0x1382 <gpio_read_pin+0xe8>
    1380:	a3 cf       	rjmp	.-186    	; 0x12c8 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	8b 87       	std	Y+11, r24	; 0x0b
    1386:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1388:	2b 96       	adiw	r28, 0x0b	; 11
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <gpio_debouncer+0xa>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <gpio_debouncer+0xc>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <gpio_debouncer+0xe>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13ac:	80 91 08 01 	lds	r24, 0x0108
    13b0:	90 91 09 01 	lds	r25, 0x0109
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	06 97       	sbiw	r24, 0x06	; 6
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	1b c0       	rjmp	.+54     	; 0x13fa <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13c4:	00 91 3c 01 	lds	r16, 0x013C
    13c8:	10 91 3d 01 	lds	r17, 0x013D
    13cc:	ed 81       	ldd	r30, Y+5	; 0x05
    13ce:	fe 81       	ldd	r31, Y+6	; 0x06
    13d0:	80 81       	ld	r24, Z
    13d2:	33 df       	rcall	.-410    	; 0x123a <__gpio_read_pin>
    13d4:	28 2f       	mov	r18, r24
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	80 0f       	add	r24, r16
    13dc:	91 1f       	adc	r25, r17
    13de:	fc 01       	movw	r30, r24
    13e0:	32 96       	adiw	r30, 0x02	; 2
    13e2:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13e4:	ed 81       	ldd	r30, Y+5	; 0x05
    13e6:	fe 81       	ldd	r31, Y+6	; 0x06
    13e8:	80 85       	ldd	r24, Z+8	; 0x08
    13ea:	91 85       	ldd	r25, Z+9	; 0x09
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	06 97       	sbiw	r24, 0x06	; 6
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	06 96       	adiw	r24, 0x06	; 6
    1400:	21 e0       	ldi	r18, 0x01	; 1
    1402:	86 30       	cpi	r24, 0x06	; 6
    1404:	92 07       	cpc	r25, r18
    1406:	f1 f6       	brne	.-68     	; 0x13c4 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1408:	80 91 3c 01 	lds	r24, 0x013C
    140c:	90 91 3d 01 	lds	r25, 0x013D
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	90 93 3d 01 	sts	0x013D, r25
    1416:	80 93 3c 01 	sts	0x013C, r24
    141a:	80 91 3c 01 	lds	r24, 0x013C
    141e:	90 91 3d 01 	lds	r25, 0x013D
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	21 f4       	brne	.+8      	; 0x1430 <gpio_debouncer+0x96>
        count = 0;
    1428:	10 92 3d 01 	sts	0x013D, r1
    142c:	10 92 3c 01 	sts	0x013C, r1
	
}
    1430:	26 96       	adiw	r28, 0x06	; 6
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <timer_register_callback+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	90 93 3f 01 	sts	0x013F, r25
    145c:	80 93 3e 01 	sts	0x013E, r24
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <timer_init>:
	return comb;
}


void timer_init(unsigned int freq)
{
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <timer_init+0xa>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    147c:	e0 e8       	ldi	r30, 0x80	; 128
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1482:	e1 e8       	ldi	r30, 0x81	; 129
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	89 e0       	ldi	r24, 0x09	; 9
    1488:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    148a:	08 e8       	ldi	r16, 0x88	; 136
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	cc 01       	movw	r24, r24
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	ce d3       	rcall	.+1948   	; 0x1c3a <__floatunsisf>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	60 e8       	ldi	r22, 0x80	; 128
    14a4:	76 e9       	ldi	r23, 0x96	; 150
    14a6:	88 e1       	ldi	r24, 0x18	; 24
    14a8:	9b e4       	ldi	r25, 0x4B	; 75
    14aa:	2e d3       	rcall	.+1628   	; 0x1b08 <__divsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	bd d2       	rcall	.+1402   	; 0x1a38 <__addsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	8d d3       	rcall	.+1818   	; 0x1be2 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	f8 01       	movw	r30, r16
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    14d2:	ef e6       	ldi	r30, 0x6F	; 111
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	80 83       	st	Z, r24

	SREG |= 0x80;
    14da:	af e5       	ldi	r26, 0x5F	; 95
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ef e5       	ldi	r30, 0x5F	; 95
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	8c 93       	st	X, r24
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	00 90 5b 00 	lds	r0, 0x005B
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1526:	80 91 3e 01 	lds	r24, 0x013E
    152a:	90 91 3f 01 	lds	r25, 0x013F
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	29 f0       	breq	.+10     	; 0x153c <__vector_12+0x46>
        timer_callback();
    1532:	e0 91 3e 01 	lds	r30, 0x013E
    1536:	f0 91 3f 01 	lds	r31, 0x013F
    153a:	09 95       	icall
	if(sys_time >= 80000)
    153c:	80 91 40 01 	lds	r24, 0x0140
    1540:	90 91 41 01 	lds	r25, 0x0141
    1544:	a0 91 42 01 	lds	r26, 0x0142
    1548:	b0 91 43 01 	lds	r27, 0x0143
    154c:	80 38       	cpi	r24, 0x80	; 128
    154e:	28 e3       	ldi	r18, 0x38	; 56
    1550:	92 07       	cpc	r25, r18
    1552:	21 e0       	ldi	r18, 0x01	; 1
    1554:	a2 07       	cpc	r26, r18
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	b2 07       	cpc	r27, r18
    155a:	08 f0       	brcs	.+2      	; 0x155e <__vector_12+0x68>
		actuators_umbrella();
    155c:	bf d8       	rcall	.-3714   	; 0x6dc <actuators_umbrella>
	sys_time++;
    155e:	80 91 40 01 	lds	r24, 0x0140
    1562:	90 91 41 01 	lds	r25, 0x0141
    1566:	a0 91 42 01 	lds	r26, 0x0142
    156a:	b0 91 43 01 	lds	r27, 0x0143
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	a1 1d       	adc	r26, r1
    1572:	b1 1d       	adc	r27, r1
    1574:	80 93 40 01 	sts	0x0140, r24
    1578:	90 93 41 01 	sts	0x0141, r25
    157c:	a0 93 42 01 	sts	0x0142, r26
    1580:	b0 93 43 01 	sts	0x0143, r27
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	00 92 5b 00 	sts	0x005B, r0
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <system_reset_system_time>:
void system_reset_system_time(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    15b8:	10 92 40 01 	sts	0x0140, r1
    15bc:	10 92 41 01 	sts	0x0141, r1
    15c0:	10 92 42 01 	sts	0x0142, r1
    15c4:	10 92 43 01 	sts	0x0143, r1
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <system_set_match_started>:
void system_set_match_started(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	80 93 44 01 	sts	0x0144, r24
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <system_init>:
			break;
		//maybe put default for rotate for getting the camera right
	}
}
void system_init(void)
{	
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	6c 97       	sbiw	r28, 0x1c	; 28
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    15f6:	8d ec       	ldi	r24, 0xCD	; 205
    15f8:	99 e0       	ldi	r25, 0x09	; 9
    15fa:	25 df       	rcall	.-438    	; 0x1446 <timer_register_callback>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a8 ec       	ldi	r26, 0xC8	; 200
    1602:	b2 e4       	ldi	r27, 0x42	; 66
    1604:	89 8f       	std	Y+25, r24	; 0x19
    1606:	9a 8f       	std	Y+26, r25	; 0x1a
    1608:	ab 8f       	std	Y+27, r26	; 0x1b
    160a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	69 8d       	ldd	r22, Y+25	; 0x19
    160e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e4       	ldi	r19, 0x40	; 64
    1618:	4c e1       	ldi	r20, 0x1C	; 28
    161a:	55 e4       	ldi	r21, 0x45	; 69
    161c:	c4 d3       	rcall	.+1928   	; 0x1da6 <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8d 8b       	std	Y+21, r24	; 0x15
    1624:	9e 8b       	std	Y+22, r25	; 0x16
    1626:	af 8b       	std	Y+23, r26	; 0x17
    1628:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    162a:	6d 89       	ldd	r22, Y+21	; 0x15
    162c:	7e 89       	ldd	r23, Y+22	; 0x16
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	62 d2       	rcall	.+1220   	; 0x1b00 <__cmpsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <system_init+0x68>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
    1648:	3b c0       	rjmp	.+118    	; 0x16c0 <system_init+0xde>
	else if (__tmp > 65535)
    164a:	6d 89       	ldd	r22, Y+21	; 0x15
    164c:	7e 89       	ldd	r23, Y+22	; 0x16
    164e:	8f 89       	ldd	r24, Y+23	; 0x17
    1650:	98 8d       	ldd	r25, Y+24	; 0x18
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	a1 d3       	rcall	.+1858   	; 0x1d9e <__gesf2>
    165c:	18 16       	cp	r1, r24
    165e:	3c f5       	brge	.+78     	; 0x16ae <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	9a d3       	rcall	.+1844   	; 0x1da6 <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	b3 d2       	rcall	.+1382   	; 0x1be2 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <system_init+0xc2>
    1686:	8a ef       	ldi	r24, 0xFA	; 250
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9a 8b       	std	Y+18, r25	; 0x12
    168c:	89 8b       	std	Y+17, r24	; 0x11
    168e:	89 89       	ldd	r24, Y+17	; 0x11
    1690:	9a 89       	ldd	r25, Y+18	; 0x12
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <system_init+0xb0>
    1696:	9a 8b       	std	Y+18, r25	; 0x12
    1698:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8b 89       	ldd	r24, Y+19	; 0x13
    169c:	9c 89       	ldd	r25, Y+20	; 0x14
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9c 8b       	std	Y+20, r25	; 0x14
    16a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8b 89       	ldd	r24, Y+19	; 0x13
    16a6:	9c 89       	ldd	r25, Y+20	; 0x14
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <system_init+0xa4>
    16ac:	13 c0       	rjmp	.+38     	; 0x16d4 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6d 89       	ldd	r22, Y+21	; 0x15
    16b0:	7e 89       	ldd	r23, Y+22	; 0x16
    16b2:	8f 89       	ldd	r24, Y+23	; 0x17
    16b4:	98 8d       	ldd	r25, Y+24	; 0x18
    16b6:	95 d2       	rcall	.+1322   	; 0x1be2 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9c 8b       	std	Y+20, r25	; 0x14
    16be:	8b 8b       	std	Y+19, r24	; 0x13
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	98 8b       	std	Y+16, r25	; 0x10
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <system_init+0xea>
    16d0:	98 8b       	std	Y+16, r25	; 0x10
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(8,GPIO_DIRECTION_INPUT,true);							//jumper
    16d4:	88 e0       	ldi	r24, 0x08	; 8
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	72 dc       	rcall	.-1820   	; 0xfc0 <gpio_register_pin>
	gpio_register_pin(14,GPIO_DIRECTION_INPUT,true);						//prekidac za stranu
    16dc:	8e e0       	ldi	r24, 0x0E	; 14
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	6e dc       	rcall	.-1828   	; 0xfc0 <gpio_register_pin>
	gpio_register_pin(0,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	6a dc       	rcall	.-1836   	; 0xfc0 <gpio_register_pin>
	gpio_register_pin(1,GPIO_DIRECTION_INPUT,true);							//camera 1 position
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	66 dc       	rcall	.-1844   	; 0xfc0 <gpio_register_pin>
	gpio_register_pin(2,GPIO_DIRECTION_INPUT,true);							//camera 2 position
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	62 dc       	rcall	.-1852   	; 0xfc0 <gpio_register_pin>
	gpio_register_pin(2,GPIO_DIRECTION_OUTPUT,false);						//led tactic 3
	gpio_register_pin(3,GPIO_DIRECTION_OUTPUT,false);						//led tactic 4
	gpio_register_pin(4,GPIO_DIRECTION_OUTPUT,false);						//led tactic 5
	*/
	
	DDRG = 0xff;
    16fc:	e3 e3       	ldi	r30, 0x33	; 51
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	80 83       	st	Z, r24
//	PORTG = 0xff;
	servo_init(50);
    1704:	82 e3       	ldi	r24, 0x32	; 50
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 ed 00 	call	0x1da	; 0x1da <servo_init>
	timer_init(1000);
    170c:	88 ee       	ldi	r24, 0xE8	; 232
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	ac de       	rcall	.-680    	; 0x146a <timer_init>
	CAN_Init(1);
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	0a dc       	rcall	.-2028   	; 0xf2a <CAN_Init>

	actuators_setup();
    1716:	dd d8       	rcall	.-3654   	; 0x8d2 <actuators_setup>
    1718:	6c c0       	rjmp	.+216    	; 0x17f2 <system_init+0x210>
	
	while(gpio_read_pin(8))
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e2       	ldi	r26, 0x20	; 32
    1720:	b1 e4       	ldi	r27, 0x41	; 65
    1722:	8b 87       	std	Y+11, r24	; 0x0b
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	ad 87       	std	Y+13, r26	; 0x0d
    1728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e4       	ldi	r19, 0x40	; 64
    1736:	4c e1       	ldi	r20, 0x1C	; 28
    1738:	55 e4       	ldi	r21, 0x45	; 69
    173a:	35 d3       	rcall	.+1642   	; 0x1da6 <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8f 83       	std	Y+7, r24	; 0x07
    1742:	98 87       	std	Y+8, r25	; 0x08
    1744:	a9 87       	std	Y+9, r26	; 0x09
    1746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	d3 d1       	rcall	.+934    	; 0x1b00 <__cmpsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <system_init+0x186>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3b c0       	rjmp	.+118    	; 0x17de <system_init+0x1fc>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	12 d3       	rcall	.+1572   	; 0x1d9e <__gesf2>
    177a:	18 16       	cp	r1, r24
    177c:	3c f5       	brge	.+78     	; 0x17cc <system_init+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0b d3       	rcall	.+1558   	; 0x1da6 <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	24 d2       	rcall	.+1096   	; 0x1be2 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <system_init+0x1e0>
    17a4:	8a ef       	ldi	r24, 0xFA	; 250
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <system_init+0x1ce>
    17b4:	9c 83       	std	Y+4, r25	; 0x04
    17b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <system_init+0x1c2>
    17ca:	13 c0       	rjmp	.+38     	; 0x17f2 <system_init+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	06 d2       	rcall	.+1036   	; 0x1be2 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <system_init+0x208>
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	88 e0       	ldi	r24, 0x08	; 8
    17f4:	52 dd       	rcall	.-1372   	; 0x129a <gpio_read_pin>
    17f6:	88 23       	and	r24, r24
    17f8:	09 f0       	breq	.+2      	; 0x17fc <system_init+0x21a>
    17fa:	8f cf       	rjmp	.-226    	; 0x171a <system_init+0x138>
		_delay_ms(10);
	//PORTG = 0x00;
	system_reset_system_time();
    17fc:	d9 de       	rcall	.-590    	; 0x15b0 <system_reset_system_time>
	system_set_match_started();
    17fe:	e7 de       	rcall	.-562    	; 0x15ce <system_set_match_started>
}
    1800:	6c 96       	adiw	r28, 0x1c	; 28
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <__vector_23>:
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	00 90 5b 00 	lds	r0, 0x005B
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	80 91 45 01 	lds	r24, 0x0145
    183a:	88 23       	and	r24, r24
    183c:	d9 f0       	breq	.+54     	; 0x1874 <__vector_23+0x62>
    183e:	80 91 45 01 	lds	r24, 0x0145
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	80 93 45 01 	sts	0x0145, r24
    1848:	a6 ec       	ldi	r26, 0xC6	; 198
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	80 91 46 01 	lds	r24, 0x0146
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	e3 5b       	subi	r30, 0xB3	; 179
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	80 81       	ld	r24, Z
    185c:	8c 93       	st	X, r24
    185e:	80 91 46 01 	lds	r24, 0x0146
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	80 93 46 01 	sts	0x0146, r24
    1868:	80 91 46 01 	lds	r24, 0x0146
    186c:	80 34       	cpi	r24, 0x40	; 64
    186e:	11 f4       	brne	.+4      	; 0x1874 <__vector_23+0x62>
    1870:	10 92 46 01 	sts	0x0146, r1
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	0f 90       	pop	r0
    1886:	00 92 5b 00 	sts	0x005B, r0
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__vector_21>:
    1894:	1f 92       	push	r1
    1896:	0f 92       	push	r0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	0f 92       	push	r0
    189c:	00 90 5b 00 	lds	r0, 0x005B
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	e0 ec       	ldi	r30, 0xC0	; 192
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	8c 71       	andi	r24, 0x1C	; 28
    18c8:	90 70       	andi	r25, 0x00	; 0
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__vector_21+0x70>
    18ce:	80 91 47 01 	lds	r24, 0x0147
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	e6 ec       	ldi	r30, 0xC6	; 198
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	20 81       	ld	r18, Z
    18dc:	fc 01       	movw	r30, r24
    18de:	e3 57       	subi	r30, 0x73	; 115
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	20 83       	st	Z, r18
    18e4:	80 91 47 01 	lds	r24, 0x0147
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 47 01 	sts	0x0147, r24
    18ee:	80 91 47 01 	lds	r24, 0x0147
    18f2:	80 34       	cpi	r24, 0x40	; 64
    18f4:	11 f4       	brne	.+4      	; 0x18fa <__vector_21+0x66>
    18f6:	10 92 47 01 	sts	0x0147, r1
    18fa:	80 91 48 01 	lds	r24, 0x0148
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 48 01 	sts	0x0148, r24
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	00 92 5b 00 	sts	0x005B, r0
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_34>:
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	00 90 5b 00 	lds	r0, 0x005B
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	80 91 49 01 	lds	r24, 0x0149
    194c:	88 23       	and	r24, r24
    194e:	d9 f0       	breq	.+54     	; 0x1986 <__vector_34+0x62>
    1950:	80 91 49 01 	lds	r24, 0x0149
    1954:	81 50       	subi	r24, 0x01	; 1
    1956:	80 93 49 01 	sts	0x0149, r24
    195a:	ae ec       	ldi	r26, 0xCE	; 206
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	80 91 4a 01 	lds	r24, 0x014A
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	fc 01       	movw	r30, r24
    1968:	e3 53       	subi	r30, 0x33	; 51
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 81       	ld	r24, Z
    196e:	8c 93       	st	X, r24
    1970:	80 91 4a 01 	lds	r24, 0x014A
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 4a 01 	sts	0x014A, r24
    197a:	80 91 4a 01 	lds	r24, 0x014A
    197e:	80 34       	cpi	r24, 0x40	; 64
    1980:	11 f4       	brne	.+4      	; 0x1986 <__vector_34+0x62>
    1982:	10 92 4a 01 	sts	0x014A, r1
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	0f 90       	pop	r0
    1998:	00 92 5b 00 	sts	0x005B, r0
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__vector_32>:
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	00 90 5b 00 	lds	r0, 0x005B
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	e8 ec       	ldi	r30, 0xC8	; 200
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	8c 71       	andi	r24, 0x1C	; 28
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	d9 f4       	brne	.+54     	; 0x1a16 <__vector_32+0x70>
    19e0:	80 91 4b 01 	lds	r24, 0x014B
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ee ec       	ldi	r30, 0xCE	; 206
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	20 81       	ld	r18, Z
    19ee:	fc 01       	movw	r30, r24
    19f0:	e3 5f       	subi	r30, 0xF3	; 243
    19f2:	fd 4f       	sbci	r31, 0xFD	; 253
    19f4:	20 83       	st	Z, r18
    19f6:	80 91 4b 01 	lds	r24, 0x014B
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 4b 01 	sts	0x014B, r24
    1a00:	80 91 4b 01 	lds	r24, 0x014B
    1a04:	80 34       	cpi	r24, 0x40	; 64
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <__vector_32+0x66>
    1a08:	10 92 4b 01 	sts	0x014B, r1
    1a0c:	80 91 4c 01 	lds	r24, 0x014C
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 4c 01 	sts	0x014C, r24
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	00 92 5b 00 	sts	0x005B, r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__subsf3>:
    1a36:	50 58       	subi	r21, 0x80	; 128

00001a38 <__addsf3>:
    1a38:	bb 27       	eor	r27, r27
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	0e d0       	rcall	.+28     	; 0x1a5a <__addsf3x>
    1a3e:	75 c1       	rjmp	.+746    	; 0x1d2a <__fp_round>
    1a40:	66 d1       	rcall	.+716    	; 0x1d0e <__fp_pscA>
    1a42:	30 f0       	brcs	.+12     	; 0x1a50 <__addsf3+0x18>
    1a44:	6b d1       	rcall	.+726    	; 0x1d1c <__fp_pscB>
    1a46:	20 f0       	brcs	.+8      	; 0x1a50 <__addsf3+0x18>
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <__addsf3+0x1e>
    1a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <__addsf3+0x1a>
    1a4e:	1e f4       	brtc	.+6      	; 0x1a56 <__addsf3+0x1e>
    1a50:	5b c1       	rjmp	.+694    	; 0x1d08 <__fp_nan>
    1a52:	0e f4       	brtc	.+2      	; 0x1a56 <__addsf3+0x1e>
    1a54:	e0 95       	com	r30
    1a56:	e7 fb       	bst	r30, 7
    1a58:	51 c1       	rjmp	.+674    	; 0x1cfc <__fp_inf>

00001a5a <__addsf3x>:
    1a5a:	e9 2f       	mov	r30, r25
    1a5c:	77 d1       	rcall	.+750    	; 0x1d4c <__fp_split3>
    1a5e:	80 f3       	brcs	.-32     	; 0x1a40 <__addsf3+0x8>
    1a60:	ba 17       	cp	r27, r26
    1a62:	62 07       	cpc	r22, r18
    1a64:	73 07       	cpc	r23, r19
    1a66:	84 07       	cpc	r24, r20
    1a68:	95 07       	cpc	r25, r21
    1a6a:	18 f0       	brcs	.+6      	; 0x1a72 <__addsf3x+0x18>
    1a6c:	71 f4       	brne	.+28     	; 0x1a8a <__addsf3x+0x30>
    1a6e:	9e f5       	brtc	.+102    	; 0x1ad6 <__addsf3x+0x7c>
    1a70:	8f c1       	rjmp	.+798    	; 0x1d90 <__fp_zero>
    1a72:	0e f4       	brtc	.+2      	; 0x1a76 <__addsf3x+0x1c>
    1a74:	e0 95       	com	r30
    1a76:	0b 2e       	mov	r0, r27
    1a78:	ba 2f       	mov	r27, r26
    1a7a:	a0 2d       	mov	r26, r0
    1a7c:	0b 01       	movw	r0, r22
    1a7e:	b9 01       	movw	r22, r18
    1a80:	90 01       	movw	r18, r0
    1a82:	0c 01       	movw	r0, r24
    1a84:	ca 01       	movw	r24, r20
    1a86:	a0 01       	movw	r20, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	ff 27       	eor	r31, r31
    1a8c:	59 1b       	sub	r21, r25
    1a8e:	99 f0       	breq	.+38     	; 0x1ab6 <__addsf3x+0x5c>
    1a90:	59 3f       	cpi	r21, 0xF9	; 249
    1a92:	50 f4       	brcc	.+20     	; 0x1aa8 <__addsf3x+0x4e>
    1a94:	50 3e       	cpi	r21, 0xE0	; 224
    1a96:	68 f1       	brcs	.+90     	; 0x1af2 <__addsf3x+0x98>
    1a98:	1a 16       	cp	r1, r26
    1a9a:	f0 40       	sbci	r31, 0x00	; 0
    1a9c:	a2 2f       	mov	r26, r18
    1a9e:	23 2f       	mov	r18, r19
    1aa0:	34 2f       	mov	r19, r20
    1aa2:	44 27       	eor	r20, r20
    1aa4:	58 5f       	subi	r21, 0xF8	; 248
    1aa6:	f3 cf       	rjmp	.-26     	; 0x1a8e <__addsf3x+0x34>
    1aa8:	46 95       	lsr	r20
    1aaa:	37 95       	ror	r19
    1aac:	27 95       	ror	r18
    1aae:	a7 95       	ror	r26
    1ab0:	f0 40       	sbci	r31, 0x00	; 0
    1ab2:	53 95       	inc	r21
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__addsf3x+0x4e>
    1ab6:	7e f4       	brtc	.+30     	; 0x1ad6 <__addsf3x+0x7c>
    1ab8:	1f 16       	cp	r1, r31
    1aba:	ba 0b       	sbc	r27, r26
    1abc:	62 0b       	sbc	r22, r18
    1abe:	73 0b       	sbc	r23, r19
    1ac0:	84 0b       	sbc	r24, r20
    1ac2:	ba f0       	brmi	.+46     	; 0x1af2 <__addsf3x+0x98>
    1ac4:	91 50       	subi	r25, 0x01	; 1
    1ac6:	a1 f0       	breq	.+40     	; 0x1af0 <__addsf3x+0x96>
    1ac8:	ff 0f       	add	r31, r31
    1aca:	bb 1f       	adc	r27, r27
    1acc:	66 1f       	adc	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	c2 f7       	brpl	.-16     	; 0x1ac4 <__addsf3x+0x6a>
    1ad4:	0e c0       	rjmp	.+28     	; 0x1af2 <__addsf3x+0x98>
    1ad6:	ba 0f       	add	r27, r26
    1ad8:	62 1f       	adc	r22, r18
    1ada:	73 1f       	adc	r23, r19
    1adc:	84 1f       	adc	r24, r20
    1ade:	48 f4       	brcc	.+18     	; 0x1af2 <__addsf3x+0x98>
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	f7 95       	ror	r31
    1aea:	9e 3f       	cpi	r25, 0xFE	; 254
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__addsf3x+0x96>
    1aee:	b3 cf       	rjmp	.-154    	; 0x1a56 <__addsf3+0x1e>
    1af0:	93 95       	inc	r25
    1af2:	88 0f       	add	r24, r24
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <__addsf3x+0x9e>
    1af6:	99 27       	eor	r25, r25
    1af8:	ee 0f       	add	r30, r30
    1afa:	97 95       	ror	r25
    1afc:	87 95       	ror	r24
    1afe:	08 95       	ret

00001b00 <__cmpsf2>:
    1b00:	d9 d0       	rcall	.+434    	; 0x1cb4 <__fp_cmp>
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <__cmpsf2+0x6>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	08 95       	ret

00001b08 <__divsf3>:
    1b08:	0c d0       	rcall	.+24     	; 0x1b22 <__divsf3x>
    1b0a:	0f c1       	rjmp	.+542    	; 0x1d2a <__fp_round>
    1b0c:	07 d1       	rcall	.+526    	; 0x1d1c <__fp_pscB>
    1b0e:	40 f0       	brcs	.+16     	; 0x1b20 <__divsf3+0x18>
    1b10:	fe d0       	rcall	.+508    	; 0x1d0e <__fp_pscA>
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <__divsf3+0x18>
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <__divsf3+0x16>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <__divsf3+0x18>
    1b1a:	f0 c0       	rjmp	.+480    	; 0x1cfc <__fp_inf>
    1b1c:	51 11       	cpse	r21, r1
    1b1e:	39 c1       	rjmp	.+626    	; 0x1d92 <__fp_szero>
    1b20:	f3 c0       	rjmp	.+486    	; 0x1d08 <__fp_nan>

00001b22 <__divsf3x>:
    1b22:	14 d1       	rcall	.+552    	; 0x1d4c <__fp_split3>
    1b24:	98 f3       	brcs	.-26     	; 0x1b0c <__divsf3+0x4>

00001b26 <__divsf3_pse>:
    1b26:	99 23       	and	r25, r25
    1b28:	c9 f3       	breq	.-14     	; 0x1b1c <__divsf3+0x14>
    1b2a:	55 23       	and	r21, r21
    1b2c:	b1 f3       	breq	.-20     	; 0x1b1a <__divsf3+0x12>
    1b2e:	95 1b       	sub	r25, r21
    1b30:	55 0b       	sbc	r21, r21
    1b32:	bb 27       	eor	r27, r27
    1b34:	aa 27       	eor	r26, r26
    1b36:	62 17       	cp	r22, r18
    1b38:	73 07       	cpc	r23, r19
    1b3a:	84 07       	cpc	r24, r20
    1b3c:	38 f0       	brcs	.+14     	; 0x1b4c <__divsf3_pse+0x26>
    1b3e:	9f 5f       	subi	r25, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	44 1f       	adc	r20, r20
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	a9 f3       	breq	.-22     	; 0x1b36 <__divsf3_pse+0x10>
    1b4c:	33 d0       	rcall	.+102    	; 0x1bb4 <__divsf3_pse+0x8e>
    1b4e:	0e 2e       	mov	r0, r30
    1b50:	3a f0       	brmi	.+14     	; 0x1b60 <__divsf3_pse+0x3a>
    1b52:	e0 e8       	ldi	r30, 0x80	; 128
    1b54:	30 d0       	rcall	.+96     	; 0x1bb6 <__divsf3_pse+0x90>
    1b56:	91 50       	subi	r25, 0x01	; 1
    1b58:	50 40       	sbci	r21, 0x00	; 0
    1b5a:	e6 95       	lsr	r30
    1b5c:	00 1c       	adc	r0, r0
    1b5e:	ca f7       	brpl	.-14     	; 0x1b52 <__divsf3_pse+0x2c>
    1b60:	29 d0       	rcall	.+82     	; 0x1bb4 <__divsf3_pse+0x8e>
    1b62:	fe 2f       	mov	r31, r30
    1b64:	27 d0       	rcall	.+78     	; 0x1bb4 <__divsf3_pse+0x8e>
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	26 17       	cp	r18, r22
    1b70:	37 07       	cpc	r19, r23
    1b72:	48 07       	cpc	r20, r24
    1b74:	ab 07       	cpc	r26, r27
    1b76:	b0 e8       	ldi	r27, 0x80	; 128
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <__divsf3_pse+0x56>
    1b7a:	bb 0b       	sbc	r27, r27
    1b7c:	80 2d       	mov	r24, r0
    1b7e:	bf 01       	movw	r22, r30
    1b80:	ff 27       	eor	r31, r31
    1b82:	93 58       	subi	r25, 0x83	; 131
    1b84:	5f 4f       	sbci	r21, 0xFF	; 255
    1b86:	2a f0       	brmi	.+10     	; 0x1b92 <__divsf3_pse+0x6c>
    1b88:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	68 f0       	brcs	.+26     	; 0x1ba8 <__divsf3_pse+0x82>
    1b8e:	b6 c0       	rjmp	.+364    	; 0x1cfc <__fp_inf>
    1b90:	00 c1       	rjmp	.+512    	; 0x1d92 <__fp_szero>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	ec f3       	brlt	.-6      	; 0x1b90 <__divsf3_pse+0x6a>
    1b96:	98 3e       	cpi	r25, 0xE8	; 232
    1b98:	dc f3       	brlt	.-10     	; 0x1b90 <__divsf3_pse+0x6a>
    1b9a:	86 95       	lsr	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	f7 95       	ror	r31
    1ba4:	9f 5f       	subi	r25, 0xFF	; 255
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__divsf3_pse+0x74>
    1ba8:	88 0f       	add	r24, r24
    1baa:	91 1d       	adc	r25, r1
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	08 95       	ret
    1bb4:	e1 e0       	ldi	r30, 0x01	; 1
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	62 17       	cp	r22, r18
    1bc0:	73 07       	cpc	r23, r19
    1bc2:	84 07       	cpc	r24, r20
    1bc4:	ba 07       	cpc	r27, r26
    1bc6:	20 f0       	brcs	.+8      	; 0x1bd0 <__divsf3_pse+0xaa>
    1bc8:	62 1b       	sub	r22, r18
    1bca:	73 0b       	sbc	r23, r19
    1bcc:	84 0b       	sbc	r24, r20
    1bce:	ba 0b       	sbc	r27, r26
    1bd0:	ee 1f       	adc	r30, r30
    1bd2:	88 f7       	brcc	.-30     	; 0x1bb6 <__divsf3_pse+0x90>
    1bd4:	e0 95       	com	r30
    1bd6:	08 95       	ret

00001bd8 <__fixsfsi>:
    1bd8:	04 d0       	rcall	.+8      	; 0x1be2 <__fixunssfsi>
    1bda:	68 94       	set
    1bdc:	b1 11       	cpse	r27, r1
    1bde:	d9 c0       	rjmp	.+434    	; 0x1d92 <__fp_szero>
    1be0:	08 95       	ret

00001be2 <__fixunssfsi>:
    1be2:	bc d0       	rcall	.+376    	; 0x1d5c <__fp_splitA>
    1be4:	88 f0       	brcs	.+34     	; 0x1c08 <__fixunssfsi+0x26>
    1be6:	9f 57       	subi	r25, 0x7F	; 127
    1be8:	90 f0       	brcs	.+36     	; 0x1c0e <__fixunssfsi+0x2c>
    1bea:	b9 2f       	mov	r27, r25
    1bec:	99 27       	eor	r25, r25
    1bee:	b7 51       	subi	r27, 0x17	; 23
    1bf0:	a0 f0       	brcs	.+40     	; 0x1c1a <__fixunssfsi+0x38>
    1bf2:	d1 f0       	breq	.+52     	; 0x1c28 <__fixunssfsi+0x46>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	1a f0       	brmi	.+6      	; 0x1c04 <__fixunssfsi+0x22>
    1bfe:	ba 95       	dec	r27
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__fixunssfsi+0x12>
    1c02:	12 c0       	rjmp	.+36     	; 0x1c28 <__fixunssfsi+0x46>
    1c04:	b1 30       	cpi	r27, 0x01	; 1
    1c06:	81 f0       	breq	.+32     	; 0x1c28 <__fixunssfsi+0x46>
    1c08:	c3 d0       	rcall	.+390    	; 0x1d90 <__fp_zero>
    1c0a:	b1 e0       	ldi	r27, 0x01	; 1
    1c0c:	08 95       	ret
    1c0e:	c0 c0       	rjmp	.+384    	; 0x1d90 <__fp_zero>
    1c10:	67 2f       	mov	r22, r23
    1c12:	78 2f       	mov	r23, r24
    1c14:	88 27       	eor	r24, r24
    1c16:	b8 5f       	subi	r27, 0xF8	; 248
    1c18:	39 f0       	breq	.+14     	; 0x1c28 <__fixunssfsi+0x46>
    1c1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c1c:	cc f3       	brlt	.-14     	; 0x1c10 <__fixunssfsi+0x2e>
    1c1e:	86 95       	lsr	r24
    1c20:	77 95       	ror	r23
    1c22:	67 95       	ror	r22
    1c24:	b3 95       	inc	r27
    1c26:	d9 f7       	brne	.-10     	; 0x1c1e <__fixunssfsi+0x3c>
    1c28:	3e f4       	brtc	.+14     	; 0x1c38 <__fixunssfsi+0x56>
    1c2a:	90 95       	com	r25
    1c2c:	80 95       	com	r24
    1c2e:	70 95       	com	r23
    1c30:	61 95       	neg	r22
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	08 95       	ret

00001c3a <__floatunsisf>:
    1c3a:	e8 94       	clt
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <__floatsisf+0x12>

00001c3e <__floatsisf>:
    1c3e:	97 fb       	bst	r25, 7
    1c40:	3e f4       	brtc	.+14     	; 0x1c50 <__floatsisf+0x12>
    1c42:	90 95       	com	r25
    1c44:	80 95       	com	r24
    1c46:	70 95       	com	r23
    1c48:	61 95       	neg	r22
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	99 23       	and	r25, r25
    1c52:	a9 f0       	breq	.+42     	; 0x1c7e <__floatsisf+0x40>
    1c54:	f9 2f       	mov	r31, r25
    1c56:	96 e9       	ldi	r25, 0x96	; 150
    1c58:	bb 27       	eor	r27, r27
    1c5a:	93 95       	inc	r25
    1c5c:	f6 95       	lsr	r31
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f1 11       	cpse	r31, r1
    1c68:	f8 cf       	rjmp	.-16     	; 0x1c5a <__floatsisf+0x1c>
    1c6a:	fa f4       	brpl	.+62     	; 0x1caa <__floatsisf+0x6c>
    1c6c:	bb 0f       	add	r27, r27
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <__floatsisf+0x36>
    1c70:	60 ff       	sbrs	r22, 0
    1c72:	1b c0       	rjmp	.+54     	; 0x1caa <__floatsisf+0x6c>
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	16 c0       	rjmp	.+44     	; 0x1caa <__floatsisf+0x6c>
    1c7e:	88 23       	and	r24, r24
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <__floatsisf+0x48>
    1c82:	96 e9       	ldi	r25, 0x96	; 150
    1c84:	11 c0       	rjmp	.+34     	; 0x1ca8 <__floatsisf+0x6a>
    1c86:	77 23       	and	r23, r23
    1c88:	21 f0       	breq	.+8      	; 0x1c92 <__floatsisf+0x54>
    1c8a:	9e e8       	ldi	r25, 0x8E	; 142
    1c8c:	87 2f       	mov	r24, r23
    1c8e:	76 2f       	mov	r23, r22
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <__floatsisf+0x5e>
    1c92:	66 23       	and	r22, r22
    1c94:	71 f0       	breq	.+28     	; 0x1cb2 <__floatsisf+0x74>
    1c96:	96 e8       	ldi	r25, 0x86	; 134
    1c98:	86 2f       	mov	r24, r22
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	2a f0       	brmi	.+10     	; 0x1caa <__floatsisf+0x6c>
    1ca0:	9a 95       	dec	r25
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	da f7       	brpl	.-10     	; 0x1ca0 <__floatsisf+0x62>
    1caa:	88 0f       	add	r24, r24
    1cac:	96 95       	lsr	r25
    1cae:	87 95       	ror	r24
    1cb0:	97 f9       	bld	r25, 7
    1cb2:	08 95       	ret

00001cb4 <__fp_cmp>:
    1cb4:	99 0f       	add	r25, r25
    1cb6:	00 08       	sbc	r0, r0
    1cb8:	55 0f       	add	r21, r21
    1cba:	aa 0b       	sbc	r26, r26
    1cbc:	e0 e8       	ldi	r30, 0x80	; 128
    1cbe:	fe ef       	ldi	r31, 0xFE	; 254
    1cc0:	16 16       	cp	r1, r22
    1cc2:	17 06       	cpc	r1, r23
    1cc4:	e8 07       	cpc	r30, r24
    1cc6:	f9 07       	cpc	r31, r25
    1cc8:	c0 f0       	brcs	.+48     	; 0x1cfa <__fp_cmp+0x46>
    1cca:	12 16       	cp	r1, r18
    1ccc:	13 06       	cpc	r1, r19
    1cce:	e4 07       	cpc	r30, r20
    1cd0:	f5 07       	cpc	r31, r21
    1cd2:	98 f0       	brcs	.+38     	; 0x1cfa <__fp_cmp+0x46>
    1cd4:	62 1b       	sub	r22, r18
    1cd6:	73 0b       	sbc	r23, r19
    1cd8:	84 0b       	sbc	r24, r20
    1cda:	95 0b       	sbc	r25, r21
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <__fp_cmp+0x38>
    1cde:	0a 26       	eor	r0, r26
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <__fp_cmp+0x46>
    1ce2:	23 2b       	or	r18, r19
    1ce4:	24 2b       	or	r18, r20
    1ce6:	25 2b       	or	r18, r21
    1ce8:	21 f4       	brne	.+8      	; 0x1cf2 <__fp_cmp+0x3e>
    1cea:	08 95       	ret
    1cec:	0a 26       	eor	r0, r26
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <__fp_cmp+0x3e>
    1cf0:	a1 40       	sbci	r26, 0x01	; 1
    1cf2:	a6 95       	lsr	r26
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	81 1d       	adc	r24, r1
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	08 95       	ret

00001cfc <__fp_inf>:
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	9f 67       	ori	r25, 0x7F	; 127
    1d00:	80 e8       	ldi	r24, 0x80	; 128
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	08 95       	ret

00001d08 <__fp_nan>:
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	80 ec       	ldi	r24, 0xC0	; 192
    1d0c:	08 95       	ret

00001d0e <__fp_pscA>:
    1d0e:	00 24       	eor	r0, r0
    1d10:	0a 94       	dec	r0
    1d12:	16 16       	cp	r1, r22
    1d14:	17 06       	cpc	r1, r23
    1d16:	18 06       	cpc	r1, r24
    1d18:	09 06       	cpc	r0, r25
    1d1a:	08 95       	ret

00001d1c <__fp_pscB>:
    1d1c:	00 24       	eor	r0, r0
    1d1e:	0a 94       	dec	r0
    1d20:	12 16       	cp	r1, r18
    1d22:	13 06       	cpc	r1, r19
    1d24:	14 06       	cpc	r1, r20
    1d26:	05 06       	cpc	r0, r21
    1d28:	08 95       	ret

00001d2a <__fp_round>:
    1d2a:	09 2e       	mov	r0, r25
    1d2c:	03 94       	inc	r0
    1d2e:	00 0c       	add	r0, r0
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <__fp_round+0xc>
    1d32:	88 23       	and	r24, r24
    1d34:	52 f0       	brmi	.+20     	; 0x1d4a <__fp_round+0x20>
    1d36:	bb 0f       	add	r27, r27
    1d38:	40 f4       	brcc	.+16     	; 0x1d4a <__fp_round+0x20>
    1d3a:	bf 2b       	or	r27, r31
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <__fp_round+0x18>
    1d3e:	60 ff       	sbrs	r22, 0
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <__fp_round+0x20>
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	8f 4f       	sbci	r24, 0xFF	; 255
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	08 95       	ret

00001d4c <__fp_split3>:
    1d4c:	57 fd       	sbrc	r21, 7
    1d4e:	90 58       	subi	r25, 0x80	; 128
    1d50:	44 0f       	add	r20, r20
    1d52:	55 1f       	adc	r21, r21
    1d54:	59 f0       	breq	.+22     	; 0x1d6c <__fp_splitA+0x10>
    1d56:	5f 3f       	cpi	r21, 0xFF	; 255
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <__fp_splitA+0x1a>
    1d5a:	47 95       	ror	r20

00001d5c <__fp_splitA>:
    1d5c:	88 0f       	add	r24, r24
    1d5e:	97 fb       	bst	r25, 7
    1d60:	99 1f       	adc	r25, r25
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <__fp_splitA+0x20>
    1d64:	9f 3f       	cpi	r25, 0xFF	; 255
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <__fp_splitA+0x2a>
    1d68:	87 95       	ror	r24
    1d6a:	08 95       	ret
    1d6c:	12 16       	cp	r1, r18
    1d6e:	13 06       	cpc	r1, r19
    1d70:	14 06       	cpc	r1, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	f2 cf       	rjmp	.-28     	; 0x1d5a <__fp_split3+0xe>
    1d76:	46 95       	lsr	r20
    1d78:	f1 df       	rcall	.-30     	; 0x1d5c <__fp_splitA>
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <__fp_splitA+0x30>
    1d7c:	16 16       	cp	r1, r22
    1d7e:	17 06       	cpc	r1, r23
    1d80:	18 06       	cpc	r1, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	f1 cf       	rjmp	.-30     	; 0x1d68 <__fp_splitA+0xc>
    1d86:	86 95       	lsr	r24
    1d88:	71 05       	cpc	r23, r1
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	08 94       	sec
    1d8e:	08 95       	ret

00001d90 <__fp_zero>:
    1d90:	e8 94       	clt

00001d92 <__fp_szero>:
    1d92:	bb 27       	eor	r27, r27
    1d94:	66 27       	eor	r22, r22
    1d96:	77 27       	eor	r23, r23
    1d98:	cb 01       	movw	r24, r22
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret

00001d9e <__gesf2>:
    1d9e:	8a df       	rcall	.-236    	; 0x1cb4 <__fp_cmp>
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <__gesf2+0x6>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	08 95       	ret

00001da6 <__mulsf3>:
    1da6:	0b d0       	rcall	.+22     	; 0x1dbe <__mulsf3x>
    1da8:	c0 cf       	rjmp	.-128    	; 0x1d2a <__fp_round>
    1daa:	b1 df       	rcall	.-158    	; 0x1d0e <__fp_pscA>
    1dac:	28 f0       	brcs	.+10     	; 0x1db8 <__mulsf3+0x12>
    1dae:	b6 df       	rcall	.-148    	; 0x1d1c <__fp_pscB>
    1db0:	18 f0       	brcs	.+6      	; 0x1db8 <__mulsf3+0x12>
    1db2:	95 23       	and	r25, r21
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <__mulsf3+0x12>
    1db6:	a2 cf       	rjmp	.-188    	; 0x1cfc <__fp_inf>
    1db8:	a7 cf       	rjmp	.-178    	; 0x1d08 <__fp_nan>
    1dba:	11 24       	eor	r1, r1
    1dbc:	ea cf       	rjmp	.-44     	; 0x1d92 <__fp_szero>

00001dbe <__mulsf3x>:
    1dbe:	c6 df       	rcall	.-116    	; 0x1d4c <__fp_split3>
    1dc0:	a0 f3       	brcs	.-24     	; 0x1daa <__mulsf3+0x4>

00001dc2 <__mulsf3_pse>:
    1dc2:	95 9f       	mul	r25, r21
    1dc4:	d1 f3       	breq	.-12     	; 0x1dba <__mulsf3+0x14>
    1dc6:	95 0f       	add	r25, r21
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	55 1f       	adc	r21, r21
    1dcc:	62 9f       	mul	r22, r18
    1dce:	f0 01       	movw	r30, r0
    1dd0:	72 9f       	mul	r23, r18
    1dd2:	bb 27       	eor	r27, r27
    1dd4:	f0 0d       	add	r31, r0
    1dd6:	b1 1d       	adc	r27, r1
    1dd8:	63 9f       	mul	r22, r19
    1dda:	aa 27       	eor	r26, r26
    1ddc:	f0 0d       	add	r31, r0
    1dde:	b1 1d       	adc	r27, r1
    1de0:	aa 1f       	adc	r26, r26
    1de2:	64 9f       	mul	r22, r20
    1de4:	66 27       	eor	r22, r22
    1de6:	b0 0d       	add	r27, r0
    1de8:	a1 1d       	adc	r26, r1
    1dea:	66 1f       	adc	r22, r22
    1dec:	82 9f       	mul	r24, r18
    1dee:	22 27       	eor	r18, r18
    1df0:	b0 0d       	add	r27, r0
    1df2:	a1 1d       	adc	r26, r1
    1df4:	62 1f       	adc	r22, r18
    1df6:	73 9f       	mul	r23, r19
    1df8:	b0 0d       	add	r27, r0
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	62 1f       	adc	r22, r18
    1dfe:	83 9f       	mul	r24, r19
    1e00:	a0 0d       	add	r26, r0
    1e02:	61 1d       	adc	r22, r1
    1e04:	22 1f       	adc	r18, r18
    1e06:	74 9f       	mul	r23, r20
    1e08:	33 27       	eor	r19, r19
    1e0a:	a0 0d       	add	r26, r0
    1e0c:	61 1d       	adc	r22, r1
    1e0e:	23 1f       	adc	r18, r19
    1e10:	84 9f       	mul	r24, r20
    1e12:	60 0d       	add	r22, r0
    1e14:	21 1d       	adc	r18, r1
    1e16:	82 2f       	mov	r24, r18
    1e18:	76 2f       	mov	r23, r22
    1e1a:	6a 2f       	mov	r22, r26
    1e1c:	11 24       	eor	r1, r1
    1e1e:	9f 57       	subi	r25, 0x7F	; 127
    1e20:	50 40       	sbci	r21, 0x00	; 0
    1e22:	8a f0       	brmi	.+34     	; 0x1e46 <__mulsf3_pse+0x84>
    1e24:	e1 f0       	breq	.+56     	; 0x1e5e <__mulsf3_pse+0x9c>
    1e26:	88 23       	and	r24, r24
    1e28:	4a f0       	brmi	.+18     	; 0x1e3c <__mulsf3_pse+0x7a>
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	bb 1f       	adc	r27, r27
    1e30:	66 1f       	adc	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 1f       	adc	r24, r24
    1e36:	91 50       	subi	r25, 0x01	; 1
    1e38:	50 40       	sbci	r21, 0x00	; 0
    1e3a:	a9 f7       	brne	.-22     	; 0x1e26 <__mulsf3_pse+0x64>
    1e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3e:	51 05       	cpc	r21, r1
    1e40:	70 f0       	brcs	.+28     	; 0x1e5e <__mulsf3_pse+0x9c>
    1e42:	5c cf       	rjmp	.-328    	; 0x1cfc <__fp_inf>
    1e44:	a6 cf       	rjmp	.-180    	; 0x1d92 <__fp_szero>
    1e46:	5f 3f       	cpi	r21, 0xFF	; 255
    1e48:	ec f3       	brlt	.-6      	; 0x1e44 <__mulsf3_pse+0x82>
    1e4a:	98 3e       	cpi	r25, 0xE8	; 232
    1e4c:	dc f3       	brlt	.-10     	; 0x1e44 <__mulsf3_pse+0x82>
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	e7 95       	ror	r30
    1e5a:	9f 5f       	subi	r25, 0xFF	; 255
    1e5c:	c1 f7       	brne	.-16     	; 0x1e4e <__mulsf3_pse+0x8c>
    1e5e:	fe 2b       	or	r31, r30
    1e60:	88 0f       	add	r24, r24
    1e62:	91 1d       	adc	r25, r1
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	97 f9       	bld	r25, 7
    1e6a:	08 95       	ret

00001e6c <calloc>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	68 9f       	mul	r22, r24
    1e76:	80 01       	movw	r16, r0
    1e78:	69 9f       	mul	r22, r25
    1e7a:	10 0d       	add	r17, r0
    1e7c:	78 9f       	mul	r23, r24
    1e7e:	10 0d       	add	r17, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	c8 01       	movw	r24, r16
    1e84:	0d d0       	rcall	.+26     	; 0x1ea0 <malloc>
    1e86:	ec 01       	movw	r28, r24
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <calloc+0x28>
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	a8 01       	movw	r20, r16
    1e92:	0b d1       	rcall	.+534    	; 0x20aa <memset>
    1e94:	ce 01       	movw	r24, r28
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <malloc>:
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	10 f4       	brcc	.+4      	; 0x1eb0 <malloc+0x10>
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	a0 91 4f 02 	lds	r26, 0x024F
    1eb4:	b0 91 50 02 	lds	r27, 0x0250
    1eb8:	ed 01       	movw	r28, r26
    1eba:	e0 e0       	ldi	r30, 0x00	; 0
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	21 c0       	rjmp	.+66     	; 0x1f06 <malloc+0x66>
    1ec4:	88 81       	ld	r24, Y
    1ec6:	99 81       	ldd	r25, Y+1	; 0x01
    1ec8:	86 17       	cp	r24, r22
    1eca:	97 07       	cpc	r25, r23
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <malloc+0x48>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	30 97       	sbiw	r30, 0x00	; 0
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <malloc+0x3c>
    1ed6:	93 83       	std	Z+3, r25	; 0x03
    1ed8:	82 83       	std	Z+2, r24	; 0x02
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <malloc+0x44>
    1edc:	90 93 50 02 	sts	0x0250, r25
    1ee0:	80 93 4f 02 	sts	0x024F, r24
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	34 c0       	rjmp	.+104    	; 0x1f50 <malloc+0xb0>
    1ee8:	68 17       	cp	r22, r24
    1eea:	79 07       	cpc	r23, r25
    1eec:	38 f4       	brcc	.+14     	; 0x1efc <malloc+0x5c>
    1eee:	41 15       	cp	r20, r1
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <malloc+0x5a>
    1ef4:	84 17       	cp	r24, r20
    1ef6:	95 07       	cpc	r25, r21
    1ef8:	08 f4       	brcc	.+2      	; 0x1efc <malloc+0x5c>
    1efa:	ac 01       	movw	r20, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	9c 01       	movw	r18, r24
    1f04:	e9 01       	movw	r28, r18
    1f06:	20 97       	sbiw	r28, 0x00	; 0
    1f08:	e9 f6       	brne	.-70     	; 0x1ec4 <malloc+0x24>
    1f0a:	41 15       	cp	r20, r1
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	a9 f1       	breq	.+106    	; 0x1f7a <malloc+0xda>
    1f10:	ca 01       	movw	r24, r20
    1f12:	86 1b       	sub	r24, r22
    1f14:	97 0b       	sbc	r25, r23
    1f16:	04 97       	sbiw	r24, 0x04	; 4
    1f18:	08 f4       	brcc	.+2      	; 0x1f1c <malloc+0x7c>
    1f1a:	ba 01       	movw	r22, r20
    1f1c:	e0 e0       	ldi	r30, 0x00	; 0
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	2a c0       	rjmp	.+84     	; 0x1f76 <malloc+0xd6>
    1f22:	8d 91       	ld	r24, X+
    1f24:	9c 91       	ld	r25, X
    1f26:	11 97       	sbiw	r26, 0x01	; 1
    1f28:	84 17       	cp	r24, r20
    1f2a:	95 07       	cpc	r25, r21
    1f2c:	f9 f4       	brne	.+62     	; 0x1f6c <malloc+0xcc>
    1f2e:	64 17       	cp	r22, r20
    1f30:	75 07       	cpc	r23, r21
    1f32:	81 f4       	brne	.+32     	; 0x1f54 <malloc+0xb4>
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8d 91       	ld	r24, X+
    1f38:	9c 91       	ld	r25, X
    1f3a:	13 97       	sbiw	r26, 0x03	; 3
    1f3c:	30 97       	sbiw	r30, 0x00	; 0
    1f3e:	19 f0       	breq	.+6      	; 0x1f46 <malloc+0xa6>
    1f40:	93 83       	std	Z+3, r25	; 0x03
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <malloc+0xae>
    1f46:	90 93 50 02 	sts	0x0250, r25
    1f4a:	80 93 4f 02 	sts	0x024F, r24
    1f4e:	fd 01       	movw	r30, r26
    1f50:	32 96       	adiw	r30, 0x02	; 2
    1f52:	4f c0       	rjmp	.+158    	; 0x1ff2 <malloc+0x152>
    1f54:	ca 01       	movw	r24, r20
    1f56:	86 1b       	sub	r24, r22
    1f58:	97 0b       	sbc	r25, r23
    1f5a:	fd 01       	movw	r30, r26
    1f5c:	e8 0f       	add	r30, r24
    1f5e:	f9 1f       	adc	r31, r25
    1f60:	61 93       	st	Z+, r22
    1f62:	71 93       	st	Z+, r23
    1f64:	02 97       	sbiw	r24, 0x02	; 2
    1f66:	8d 93       	st	X+, r24
    1f68:	9c 93       	st	X, r25
    1f6a:	43 c0       	rjmp	.+134    	; 0x1ff2 <malloc+0x152>
    1f6c:	fd 01       	movw	r30, r26
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	9c 01       	movw	r18, r24
    1f74:	d9 01       	movw	r26, r18
    1f76:	10 97       	sbiw	r26, 0x00	; 0
    1f78:	a1 f6       	brne	.-88     	; 0x1f22 <malloc+0x82>
    1f7a:	80 91 4d 02 	lds	r24, 0x024D
    1f7e:	90 91 4e 02 	lds	r25, 0x024E
    1f82:	89 2b       	or	r24, r25
    1f84:	41 f4       	brne	.+16     	; 0x1f96 <malloc+0xf6>
    1f86:	80 91 02 01 	lds	r24, 0x0102
    1f8a:	90 91 03 01 	lds	r25, 0x0103
    1f8e:	90 93 4e 02 	sts	0x024E, r25
    1f92:	80 93 4d 02 	sts	0x024D, r24
    1f96:	40 91 04 01 	lds	r20, 0x0104
    1f9a:	50 91 05 01 	lds	r21, 0x0105
    1f9e:	41 15       	cp	r20, r1
    1fa0:	51 05       	cpc	r21, r1
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <malloc+0x114>
    1fa4:	4d b7       	in	r20, 0x3d	; 61
    1fa6:	5e b7       	in	r21, 0x3e	; 62
    1fa8:	80 91 00 01 	lds	r24, 0x0100
    1fac:	90 91 01 01 	lds	r25, 0x0101
    1fb0:	48 1b       	sub	r20, r24
    1fb2:	59 0b       	sbc	r21, r25
    1fb4:	20 91 4d 02 	lds	r18, 0x024D
    1fb8:	30 91 4e 02 	lds	r19, 0x024E
    1fbc:	24 17       	cp	r18, r20
    1fbe:	35 07       	cpc	r19, r21
    1fc0:	b0 f4       	brcc	.+44     	; 0x1fee <malloc+0x14e>
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	82 1b       	sub	r24, r18
    1fc6:	93 0b       	sbc	r25, r19
    1fc8:	86 17       	cp	r24, r22
    1fca:	97 07       	cpc	r25, r23
    1fcc:	80 f0       	brcs	.+32     	; 0x1fee <malloc+0x14e>
    1fce:	ab 01       	movw	r20, r22
    1fd0:	4e 5f       	subi	r20, 0xFE	; 254
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	84 17       	cp	r24, r20
    1fd6:	95 07       	cpc	r25, r21
    1fd8:	50 f0       	brcs	.+20     	; 0x1fee <malloc+0x14e>
    1fda:	42 0f       	add	r20, r18
    1fdc:	53 1f       	adc	r21, r19
    1fde:	50 93 4e 02 	sts	0x024E, r21
    1fe2:	40 93 4d 02 	sts	0x024D, r20
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	61 93       	st	Z+, r22
    1fea:	71 93       	st	Z+, r23
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <malloc+0x152>
    1fee:	e0 e0       	ldi	r30, 0x00	; 0
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret

00001ffa <free>:
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	09 f4       	brne	.+2      	; 0x2004 <free+0xa>
    2002:	50 c0       	rjmp	.+160    	; 0x20a4 <free+0xaa>
    2004:	ec 01       	movw	r28, r24
    2006:	22 97       	sbiw	r28, 0x02	; 2
    2008:	1b 82       	std	Y+3, r1	; 0x03
    200a:	1a 82       	std	Y+2, r1	; 0x02
    200c:	a0 91 4f 02 	lds	r26, 0x024F
    2010:	b0 91 50 02 	lds	r27, 0x0250
    2014:	10 97       	sbiw	r26, 0x00	; 0
    2016:	09 f1       	breq	.+66     	; 0x205a <free+0x60>
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	ac 17       	cp	r26, r28
    201e:	bd 07       	cpc	r27, r29
    2020:	08 f1       	brcs	.+66     	; 0x2064 <free+0x6a>
    2022:	bb 83       	std	Y+3, r27	; 0x03
    2024:	aa 83       	std	Y+2, r26	; 0x02
    2026:	fe 01       	movw	r30, r28
    2028:	21 91       	ld	r18, Z+
    202a:	31 91       	ld	r19, Z+
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	ae 17       	cp	r26, r30
    2032:	bf 07       	cpc	r27, r31
    2034:	79 f4       	brne	.+30     	; 0x2054 <free+0x5a>
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	39 83       	std	Y+1, r19	; 0x01
    2046:	28 83       	st	Y, r18
    2048:	12 96       	adiw	r26, 0x02	; 2
    204a:	8d 91       	ld	r24, X+
    204c:	9c 91       	ld	r25, X
    204e:	13 97       	sbiw	r26, 0x03	; 3
    2050:	9b 83       	std	Y+3, r25	; 0x03
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	41 15       	cp	r20, r1
    2056:	51 05       	cpc	r21, r1
    2058:	71 f4       	brne	.+28     	; 0x2076 <free+0x7c>
    205a:	d0 93 50 02 	sts	0x0250, r29
    205e:	c0 93 4f 02 	sts	0x024F, r28
    2062:	20 c0       	rjmp	.+64     	; 0x20a4 <free+0xaa>
    2064:	12 96       	adiw	r26, 0x02	; 2
    2066:	8d 91       	ld	r24, X+
    2068:	9c 91       	ld	r25, X
    206a:	13 97       	sbiw	r26, 0x03	; 3
    206c:	ad 01       	movw	r20, r26
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	11 f0       	breq	.+4      	; 0x2076 <free+0x7c>
    2072:	dc 01       	movw	r26, r24
    2074:	d3 cf       	rjmp	.-90     	; 0x201c <free+0x22>
    2076:	fa 01       	movw	r30, r20
    2078:	d3 83       	std	Z+3, r29	; 0x03
    207a:	c2 83       	std	Z+2, r28	; 0x02
    207c:	21 91       	ld	r18, Z+
    207e:	31 91       	ld	r19, Z+
    2080:	e2 0f       	add	r30, r18
    2082:	f3 1f       	adc	r31, r19
    2084:	ce 17       	cp	r28, r30
    2086:	df 07       	cpc	r29, r31
    2088:	69 f4       	brne	.+26     	; 0x20a4 <free+0xaa>
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	2e 5f       	subi	r18, 0xFE	; 254
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	fa 01       	movw	r30, r20
    2098:	31 83       	std	Z+1, r19	; 0x01
    209a:	20 83       	st	Z, r18
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	93 83       	std	Z+3, r25	; 0x03
    20a2:	82 83       	std	Z+2, r24	; 0x02
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <memset>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <memset+0x6>
    20ae:	6d 93       	st	X+, r22
    20b0:	41 50       	subi	r20, 0x01	; 1
    20b2:	50 40       	sbci	r21, 0x00	; 0
    20b4:	e0 f7       	brcc	.-8      	; 0x20ae <memset+0x4>
    20b6:	08 95       	ret

000020b8 <_exit>:
    20b8:	f8 94       	cli

000020ba <__stop_program>:
    20ba:	ff cf       	rjmp	.-2      	; 0x20ba <__stop_program>
