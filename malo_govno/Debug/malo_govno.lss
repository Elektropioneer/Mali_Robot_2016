
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080011c  0080011c  0000218a  2**0
                  ALLOC
  3 .debug_aranges 00000268  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e1  00000000  00000000  000023f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e2  00000000  00000000  000028d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fa  00000000  00000000  000042b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b32  00000000  00000000  00004baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  000066e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072e  00000000  00000000  00006a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  000071c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
}//END OF servo_init


void servo_position1(unsigned char dutyCycle)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>

	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b7 c1       	rjmp	.+878    	; 0x3b8 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea ed       	ldi	r30, 0xDA	; 218
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 36       	cpi	r26, 0x63	; 99
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include <stdio.h>
#include "odometry.h"


int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	6e 97       	sbiw	r28, 0x1e	; 30
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;	
      e6:	1e 8e       	std	Y+30, r1	; 0x1e
      e8:	1d 8e       	std	Y+29, r1	; 0x1d
	
	system_init();
      ea:	0e 94 0c 0b 	call	0x1618	; 0x1618 <system_init>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	aa e7       	ldi	r26, 0x7A	; 122
      f4:	b4 e4       	ldi	r27, 0x44	; 68
      f6:	89 8f       	std	Y+25, r24	; 0x19
      f8:	9a 8f       	std	Y+26, r25	; 0x1a
      fa:	ab 8f       	std	Y+27, r26	; 0x1b
      fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fe:	69 8d       	ldd	r22, Y+25	; 0x19
     100:	7a 8d       	ldd	r23, Y+26	; 0x1a
     102:	8b 8d       	ldd	r24, Y+27	; 0x1b
     104:	9c 8d       	ldd	r25, Y+28	; 0x1c
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e4       	ldi	r19, 0x40	; 64
     10a:	4c e1       	ldi	r20, 0x1C	; 28
     10c:	55 e4       	ldi	r21, 0x45	; 69
     10e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
     112:	dc 01       	movw	r26, r24
     114:	cb 01       	movw	r24, r22
     116:	8d 8b       	std	Y+21, r24	; 0x15
     118:	9e 8b       	std	Y+22, r25	; 0x16
     11a:	af 8b       	std	Y+23, r26	; 0x17
     11c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     11e:	6d 89       	ldd	r22, Y+21	; 0x15
     120:	7e 89       	ldd	r23, Y+22	; 0x16
     122:	8f 89       	ldd	r24, Y+23	; 0x17
     124:	98 8d       	ldd	r25, Y+24	; 0x18
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e8       	ldi	r20, 0x80	; 128
     12c:	5f e3       	ldi	r21, 0x3F	; 63
     12e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     132:	88 23       	and	r24, r24
     134:	2c f4       	brge	.+10     	; 0x140 <main+0x6e>
		__ticks = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9c 8b       	std	Y+20, r25	; 0x14
     13c:	8b 8b       	std	Y+19, r24	; 0x13
     13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0xec>
	else if (__tmp > 65535)
     140:	6d 89       	ldd	r22, Y+21	; 0x15
     142:	7e 89       	ldd	r23, Y+22	; 0x16
     144:	8f 89       	ldd	r24, Y+23	; 0x17
     146:	98 8d       	ldd	r25, Y+24	; 0x18
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	3f ef       	ldi	r19, 0xFF	; 255
     14c:	4f e7       	ldi	r20, 0x7F	; 127
     14e:	57 e4       	ldi	r21, 0x47	; 71
     150:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__gesf2>
     154:	18 16       	cp	r1, r24
     156:	4c f5       	brge	.+82     	; 0x1aa <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     158:	69 8d       	ldd	r22, Y+25	; 0x19
     15a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     15c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     15e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e2       	ldi	r20, 0x20	; 32
     166:	51 e4       	ldi	r21, 0x41	; 65
     168:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	9c 8b       	std	Y+20, r25	; 0x14
     17e:	8b 8b       	std	Y+19, r24	; 0x13
     180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xce>
     182:	8a ef       	ldi	r24, 0xFA	; 250
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9a 8b       	std	Y+18, r25	; 0x12
     188:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18a:	89 89       	ldd	r24, Y+17	; 0x11
     18c:	9a 89       	ldd	r25, Y+18	; 0x12
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <main+0xbc>
     192:	9a 8b       	std	Y+18, r25	; 0x12
     194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     196:	8b 89       	ldd	r24, Y+19	; 0x13
     198:	9c 89       	ldd	r25, Y+20	; 0x14
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	9c 8b       	std	Y+20, r25	; 0x14
     19e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a0:	8b 89       	ldd	r24, Y+19	; 0x13
     1a2:	9c 89       	ldd	r25, Y+20	; 0x14
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xb0>
     1a8:	98 c0       	rjmp	.+304    	; 0x2da <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	6d 89       	ldd	r22, Y+21	; 0x15
     1ac:	7e 89       	ldd	r23, Y+22	; 0x16
     1ae:	8f 89       	ldd	r24, Y+23	; 0x17
     1b0:	98 8d       	ldd	r25, Y+24	; 0x18
     1b2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9c 8b       	std	Y+20, r25	; 0x14
     1bc:	8b 8b       	std	Y+19, r24	; 0x13
     1be:	8b 89       	ldd	r24, Y+19	; 0x13
     1c0:	9c 89       	ldd	r25, Y+20	; 0x14
     1c2:	98 8b       	std	Y+16, r25	; 0x10
     1c4:	8f 87       	std	Y+15, r24	; 0x0f
     1c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c8:	98 89       	ldd	r25, Y+16	; 0x10
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xf8>
     1ce:	98 8b       	std	Y+16, r25	; 0x10
     1d0:	8f 87       	std	Y+15, r24	; 0x0f
     1d2:	83 c0       	rjmp	.+262    	; 0x2da <main+0x208>
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
		{
			gpio_register_pin(31,GPIO_DIRECTION_INPUT,true);
     1d4:	8f e1       	ldi	r24, 0x1F	; 31
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	eb d3       	rcall	.+2006   	; 0x9b2 <gpio_register_pin>
			gpio_debouncer();
     1dc:	b6 d5       	rcall	.+2924   	; 0xd4a <gpio_debouncer>
			if(gpio_read_pin(31) == 1)
     1de:	8f e1       	ldi	r24, 0x1F	; 31
     1e0:	34 d5       	rcall	.+2664   	; 0xc4a <gpio_read_pin>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x116>
     1e6:	77 c0       	rjmp	.+238    	; 0x2d6 <main+0x204>
			{
				i = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9e 8f       	std	Y+30, r25	; 0x1e
     1ee:	8d 8f       	std	Y+29, r24	; 0x1d
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	aa e7       	ldi	r26, 0x7A	; 122
     1f6:	b4 e4       	ldi	r27, 0x44	; 68
     1f8:	8b 87       	std	Y+11, r24	; 0x0b
     1fa:	9c 87       	std	Y+12, r25	; 0x0c
     1fc:	ad 87       	std	Y+13, r26	; 0x0d
     1fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     200:	6b 85       	ldd	r22, Y+11	; 0x0b
     202:	7c 85       	ldd	r23, Y+12	; 0x0c
     204:	8d 85       	ldd	r24, Y+13	; 0x0d
     206:	9e 85       	ldd	r25, Y+14	; 0x0e
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e4       	ldi	r19, 0x40	; 64
     20c:	4c e1       	ldi	r20, 0x1C	; 28
     20e:	55 e4       	ldi	r21, 0x45	; 69
     210:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8f 83       	std	Y+7, r24	; 0x07
     21a:	98 87       	std	Y+8, r25	; 0x08
     21c:	a9 87       	std	Y+9, r26	; 0x09
     21e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     220:	6f 81       	ldd	r22, Y+7	; 0x07
     222:	78 85       	ldd	r23, Y+8	; 0x08
     224:	89 85       	ldd	r24, Y+9	; 0x09
     226:	9a 85       	ldd	r25, Y+10	; 0x0a
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 e8       	ldi	r20, 0x80	; 128
     22e:	5f e3       	ldi	r21, 0x3F	; 63
     230:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	2c f4       	brge	.+10     	; 0x242 <main+0x170>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	9e 83       	std	Y+6, r25	; 0x06
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	3f c0       	rjmp	.+126    	; 0x2c0 <main+0x1ee>
	else if (__tmp > 65535)
     242:	6f 81       	ldd	r22, Y+7	; 0x07
     244:	78 85       	ldd	r23, Y+8	; 0x08
     246:	89 85       	ldd	r24, Y+9	; 0x09
     248:	9a 85       	ldd	r25, Y+10	; 0x0a
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	3f ef       	ldi	r19, 0xFF	; 255
     24e:	4f e7       	ldi	r20, 0x7F	; 127
     250:	57 e4       	ldi	r21, 0x47	; 71
     252:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__gesf2>
     256:	18 16       	cp	r1, r24
     258:	4c f5       	brge	.+82     	; 0x2ac <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25a:	6b 85       	ldd	r22, Y+11	; 0x0b
     25c:	7c 85       	ldd	r23, Y+12	; 0x0c
     25e:	8d 85       	ldd	r24, Y+13	; 0x0d
     260:	9e 85       	ldd	r25, Y+14	; 0x0e
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e2       	ldi	r20, 0x20	; 32
     268:	51 e4       	ldi	r21, 0x41	; 65
     26a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	bc 01       	movw	r22, r24
     274:	cd 01       	movw	r24, r26
     276:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	9e 83       	std	Y+6, r25	; 0x06
     280:	8d 83       	std	Y+5, r24	; 0x05
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <main+0x1d0>
     284:	8a ef       	ldi	r24, 0xFA	; 250
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9c 83       	std	Y+4, r25	; 0x04
     28a:	8b 83       	std	Y+3, r24	; 0x03
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	9c 81       	ldd	r25, Y+4	; 0x04
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <main+0x1be>
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	9e 81       	ldd	r25, Y+6	; 0x06
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	9e 83       	std	Y+6, r25	; 0x06
     2a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	69 f7       	brne	.-38     	; 0x284 <main+0x1b2>
     2aa:	17 c0       	rjmp	.+46     	; 0x2da <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ac:	6f 81       	ldd	r22, Y+7	; 0x07
     2ae:	78 85       	ldd	r23, Y+8	; 0x08
     2b0:	89 85       	ldd	r24, Y+9	; 0x09
     2b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	9e 83       	std	Y+6, r25	; 0x06
     2be:	8d 83       	std	Y+5, r24	; 0x05
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x1fa>
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <main+0x208>
				_delay_ms(1000);
			}
			else
			{
				i = 0;
     2d6:	1e 8e       	std	Y+30, r1	; 0x1e
     2d8:	1d 8e       	std	Y+29, r1	; 0x1d
	
	while(1)
	{
		_delay_ms(1000);
		//middle button
		while(i == 0)
     2da:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2de:	00 97       	sbiw	r24, 0x00	; 0
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0x212>
     2e2:	78 cf       	rjmp	.-272    	; 0x1d4 <main+0x102>
			else
			{
				i = 0;
			}
		}	
		if(i == 1)
     2e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	91 05       	cpc	r25, r1
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x21e>
     2ee:	ff ce       	rjmp	.-514    	; 0xee <main+0x1c>
		{
			while(1)
			{
				PORTG = 0xff;
     2f0:	e4 e3       	ldi	r30, 0x34	; 52
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	80 83       	st	Z, r24
				purpleside();
     2f8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <purpleside>
     2fc:	f9 cf       	rjmp	.-14     	; 0x2f0 <main+0x21e>

000002fe <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	00 d0       	rcall	.+0      	; 0x308 <servo_init+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= (1 << PINE3) | (1 << PINE4) | (1 << PINE5);
     310:	ad e2       	ldi	r26, 0x2D	; 45
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	ed e2       	ldi	r30, 0x2D	; 45
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	88 63       	ori	r24, 0x38	; 56
     31c:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     31e:	e4 e9       	ldi	r30, 0x94	; 148
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	11 82       	std	Z+1, r1	; 0x01
     324:	10 82       	st	Z, r1
	OCR3A = 0;
     326:	e8 e9       	ldi	r30, 0x98	; 152
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	11 82       	std	Z+1, r1	; 0x01
     32c:	10 82       	st	Z, r1
	OCR3B = 0;
     32e:	ea e9       	ldi	r30, 0x9A	; 154
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1
	OCR3C = 0;
     336:	ec e9       	ldi	r30, 0x9C	; 156
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1
	
	TCCR3A = (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     33e:	e0 e9       	ldi	r30, 0x90	; 144
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	8e ef       	ldi	r24, 0xFE	; 254
     344:	80 83       	st	Z, r24
	TCCR3B = (1 << WGM32) | (1 << WGM33) | (1 << CS31); // PRESKALER = 1
     346:	e1 e9       	ldi	r30, 0x91	; 145
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	8a e1       	ldi	r24, 0x1A	; 26
     34c:	80 83       	st	Z, r24
	ICR3 = ((double)F_CPU) / (8 * f_pwm) - 0.5; // FREKVENCIJA PWMA JE ~19kHz
     34e:	06 e9       	ldi	r16, 0x96	; 150
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	cc 01       	movw	r24, r24
     364:	a0 e0       	ldi	r26, 0x00	; 0
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	bc 01       	movw	r22, r24
     36a:	cd 01       	movw	r24, r26
     36c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__floatunsisf>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	60 e8       	ldi	r22, 0x80	; 128
     376:	76 e9       	ldi	r23, 0x96	; 150
     378:	88 e1       	ldi	r24, 0x18	; 24
     37a:	9b e4       	ldi	r25, 0x4B	; 75
     37c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__divsf3>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	5f e3       	ldi	r21, 0x3F	; 63
     390:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__subsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	bc 01       	movw	r22, r24
     39a:	cd 01       	movw	r24, r26
     39c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fixunssfsi>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	f8 01       	movw	r30, r16
     3a6:	91 83       	std	Z+1, r25	; 0x01
     3a8:	80 83       	st	Z, r24
}//END OF servo_init
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	00 90 5b 00 	lds	r0, 0x005B
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <__vector_18+0x2a>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <__vector_18+0x2c>
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     3e8:	ed ee       	ldi	r30, 0xED	; 237
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     3f0:	1b 82       	std	Y+3, r1	; 0x03
     3f2:	9c c0       	rjmp	.+312    	; 0x52c <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     3f4:	ed ee       	ldi	r30, 0xED	; 237
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	82 95       	swap	r24
     3fc:	80 7f       	andi	r24, 0xF0	; 240
     3fe:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     400:	ee ee       	ldi	r30, 0xEE	; 238
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	82 95       	swap	r24
     408:	86 95       	lsr	r24
     40a:	87 70       	andi	r24, 0x07	; 7
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	81 70       	andi	r24, 0x01	; 1
     412:	90 70       	andi	r25, 0x00	; 0
     414:	88 23       	and	r24, r24
     416:	09 f4       	brne	.+2      	; 0x41a <__vector_18+0x62>
     418:	6e c0       	rjmp	.+220    	; 0x4f6 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     41a:	ef ee       	ldi	r30, 0xEF	; 239
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 e8       	ldi	r24, 0x80	; 128
     420:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     422:	ae ee       	ldi	r26, 0xEE	; 238
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	ee ee       	ldi	r30, 0xEE	; 238
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	8f 7d       	andi	r24, 0xDF	; 223
     42e:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     430:	e2 ef       	ldi	r30, 0xF2	; 242
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 95       	swap	r24
     438:	86 95       	lsr	r24
     43a:	87 70       	andi	r24, 0x07	; 7
     43c:	28 2f       	mov	r18, r24
     43e:	e3 ef       	ldi	r30, 0xF3	; 243
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	82 2b       	or	r24, r18
     456:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     458:	19 82       	std	Y+1, r1	; 0x01
     45a:	2a c0       	rjmp	.+84     	; 0x4b0 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	28 2f       	mov	r18, r24
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	82 1b       	sub	r24, r18
     468:	93 0b       	sbc	r25, r19
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	90 95       	com	r25
     470:	81 95       	neg	r24
     472:	9f 4f       	sbci	r25, 0xFF	; 255
     474:	fc 01       	movw	r30, r24
     476:	e4 5e       	subi	r30, 0xE4	; 228
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	40 81       	ld	r20, Z
     47c:	51 81       	ldd	r21, Z+1	; 0x01
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	fc 01       	movw	r30, r24
     488:	e0 5d       	subi	r30, 0xD0	; 208
     48a:	fe 4f       	sbci	r31, 0xFE	; 254
     48c:	80 81       	ld	r24, Z
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	da 01       	movw	r26, r20
     49e:	a8 0f       	add	r26, r24
     4a0:	b9 1f       	adc	r27, r25
     4a2:	ea ef       	ldi	r30, 0xFA	; 250
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	88 30       	cpi	r24, 0x08	; 8
     4b4:	98 f2       	brcs	.-90     	; 0x45c <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	fc 01       	movw	r30, r24
     4c0:	e0 5d       	subi	r30, 0xD0	; 208
     4c2:	fe 4f       	sbci	r31, 0xFE	; 254
     4c4:	80 81       	ld	r24, Z
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 83       	st	Z, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	fc 01       	movw	r30, r24
     4da:	e0 5d       	subi	r30, 0xD0	; 208
     4dc:	fe 4f       	sbci	r31, 0xFE	; 254
     4de:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	fc 01       	movw	r30, r24
     4ea:	ec 5b       	subi	r30, 0xBC	; 188
     4ec:	fe 4f       	sbci	r31, 0xFE	; 254
     4ee:	80 81       	ld	r24, Z
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	80 83       	st	Z, r24
     4f4:	1f c0       	rjmp	.+62     	; 0x534 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     4f6:	ee ee       	ldi	r30, 0xEE	; 238
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	82 95       	swap	r24
     4fe:	86 95       	lsr	r24
     500:	86 95       	lsr	r24
     502:	83 70       	andi	r24, 0x03	; 3
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	81 70       	andi	r24, 0x01	; 1
     50a:	90 70       	andi	r25, 0x00	; 0
     50c:	88 23       	and	r24, r24
     50e:	59 f0       	breq	.+22     	; 0x526 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     510:	ef ee       	ldi	r30, 0xEF	; 239
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     516:	ae ee       	ldi	r26, 0xEE	; 238
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	ee ee       	ldi	r30, 0xEE	; 238
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	8f 7b       	andi	r24, 0xBF	; 191
     522:	8c 93       	st	X, r24
     524:	07 c0       	rjmp	.+14     	; 0x534 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	8b 83       	std	Y+3, r24	; 0x03
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	8f 30       	cpi	r24, 0x0F	; 15
     530:	08 f4       	brcc	.+2      	; 0x534 <__vector_18+0x17c>
     532:	60 cf       	rjmp	.-320    	; 0x3f4 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     534:	ed ee       	ldi	r30, 0xED	; 237
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     53c:	aa ed       	ldi	r26, 0xDA	; 218
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	ea ed       	ldi	r30, 0xDA	; 218
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8c 93       	st	X, r24
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	00 92 5b 00 	sts	0x005B, r0
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	00 d0       	rcall	.+0      	; 0x57e <CAN_InitModule+0x6>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     582:	e8 ed       	ldi	r30, 0xD8	; 216
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     58a:	1a 82       	std	Y+2, r1	; 0x02
     58c:	32 c0       	rjmp	.+100    	; 0x5f2 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     58e:	ed ee       	ldi	r30, 0xED	; 237
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	82 95       	swap	r24
     596:	80 7f       	andi	r24, 0xF0	; 240
     598:	80 83       	st	Z, r24

		CANSTMOB = 0;
     59a:	ee ee       	ldi	r30, 0xEE	; 238
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	10 82       	st	Z, r1
		CANCDMOB = 0;
     5a0:	ef ee       	ldi	r30, 0xEF	; 239
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	10 82       	st	Z, r1

		CANIDT1 = 0;
     5a6:	e3 ef       	ldi	r30, 0xF3	; 243
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	10 82       	st	Z, r1
		CANIDT2 = 0;
     5ac:	e2 ef       	ldi	r30, 0xF2	; 242
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	10 82       	st	Z, r1
		CANIDT3 = 0;
     5b2:	e1 ef       	ldi	r30, 0xF1	; 241
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	10 82       	st	Z, r1
		CANIDT4 = 0;
     5b8:	e0 ef       	ldi	r30, 0xF0	; 240
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	10 82       	st	Z, r1
		CANIDM1 = 0;
     5be:	e7 ef       	ldi	r30, 0xF7	; 247
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	10 82       	st	Z, r1
		CANIDM2 = 0;
     5c4:	e6 ef       	ldi	r30, 0xF6	; 246
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	10 82       	st	Z, r1
		CANIDM3 = 0;
     5ca:	e5 ef       	ldi	r30, 0xF5	; 245
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
		CANIDM4 = 0;
     5d0:	e4 ef       	ldi	r30, 0xF4	; 244
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5d6:	19 82       	std	Y+1, r1	; 0x01
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <CAN_InitModule+0x6e>
			CANMSG = 0;
     5da:	ea ef       	ldi	r30, 0xFA	; 250
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	8f 5f       	subi	r24, 0xFF	; 255
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	88 30       	cpi	r24, 0x08	; 8
     5ea:	b8 f3       	brcs	.-18     	; 0x5da <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	8a 83       	std	Y+2, r24	; 0x02
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	8f 30       	cpi	r24, 0x0F	; 15
     5f6:	58 f2       	brcs	.-106    	; 0x58e <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     5f8:	e8 ed       	ldi	r30, 0xD8	; 216
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     600:	e2 ee       	ldi	r30, 0xE2	; 226
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     608:	e3 ee       	ldi	r30, 0xE3	; 227
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     610:	e4 ee       	ldi	r30, 0xE4	; 228
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	8e e5       	ldi	r24, 0x5E	; 94
     616:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     618:	e5 ee       	ldi	r30, 0xE5	; 229
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     61e:	eb ed       	ldi	r30, 0xDB	; 219
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 eb       	ldi	r24, 0xB0	; 176
     624:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     626:	ef ed       	ldi	r30, 0xDF	; 223
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	8f e7       	ldi	r24, 0x7F	; 127
     62c:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     62e:	ee ed       	ldi	r30, 0xDE	; 222
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
	sei();
     636:	78 94       	sei
}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	00 d0       	rcall	.+0      	; 0x648 <CAN_InitRxMob+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <CAN_InitRxMob+0x8>
     64a:	0f 92       	push	r0
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9c 83       	std	Y+4, r25	; 0x04
     652:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     654:	ed ee       	ldi	r30, 0xED	; 237
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     65c:	e9 ed       	ldi	r30, 0xD9	; 217
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	82 95       	swap	r24
     664:	8f 70       	andi	r24, 0x0F	; 15
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	88 23       	and	r24, r24
     670:	a9 f7       	brne	.-22     	; 0x65c <CAN_InitRxMob+0x1a>
     672:	e9 ed       	ldi	r30, 0xD9	; 217
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	86 95       	lsr	r24
     67a:	86 95       	lsr	r24
     67c:	86 95       	lsr	r24
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	81 70       	andi	r24, 0x01	; 1
     684:	90 70       	andi	r25, 0x00	; 0
     686:	88 23       	and	r24, r24
     688:	49 f7       	brne	.-46     	; 0x65c <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     68a:	1a 82       	std	Y+2, r1	; 0x02
     68c:	3f c0       	rjmp	.+126    	; 0x70c <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     68e:	ed ee       	ldi	r30, 0xED	; 237
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	82 95       	swap	r24
     696:	80 7f       	andi	r24, 0xF0	; 240
     698:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     69a:	ef ee       	ldi	r30, 0xEF	; 239
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	82 95       	swap	r24
     6a2:	86 95       	lsr	r24
     6a4:	86 95       	lsr	r24
     6a6:	83 70       	andi	r24, 0x03	; 3
     6a8:	88 23       	and	r24, r24
     6aa:	69 f5       	brne	.+90     	; 0x706 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     6ac:	ef ee       	ldi	r30, 0xEF	; 239
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	8f e0       	ldi	r24, 0x0F	; 15
     6b2:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     6b4:	e3 ef       	ldi	r30, 0xF3	; 243
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	90 70       	andi	r25, 0x00	; 0
     6be:	96 95       	lsr	r25
     6c0:	87 95       	ror	r24
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     6cc:	e2 ef       	ldi	r30, 0xF2	; 242
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	82 95       	swap	r24
     6d4:	88 0f       	add	r24, r24
     6d6:	80 7e       	andi	r24, 0xE0	; 224
     6d8:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     6da:	e6 ef       	ldi	r30, 0xF6	; 246
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 ee       	ldi	r24, 0xE0	; 224
     6e0:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     6e2:	e7 ef       	ldi	r30, 0xF7	; 247
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     6ea:	af ee       	ldi	r26, 0xEF	; 239
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	ef ee       	ldi	r30, 0xEF	; 239
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 68       	ori	r24, 0x80	; 128
     6f6:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     6f8:	ed ee       	ldi	r30, 0xED	; 237
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	80 83       	st	Z, r24

		return 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	8d 83       	std	Y+5, r24	; 0x05
     704:	0c c0       	rjmp	.+24     	; 0x71e <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	8a 83       	std	Y+2, r24	; 0x02
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	8f 30       	cpi	r24, 0x0F	; 15
     710:	08 f4       	brcc	.+2      	; 0x714 <CAN_InitRxMob+0xd2>
     712:	bd cf       	rjmp	.-134    	; 0x68e <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     714:	ed ee       	ldi	r30, 0xED	; 237
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	80 83       	st	Z, r24

	return 0;
     71c:	1d 82       	std	Y+5, r1	; 0x05
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	00 d0       	rcall	.+0      	; 0x73a <CAN_Init+0xa>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     740:	1b df       	rcall	.-458    	; 0x578 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     742:	19 82       	std	Y+1, r1	; 0x01
     744:	36 c0       	rjmp	.+108    	; 0x7b2 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	79 df       	rcall	.-270    	; 0x642 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	8c 01       	movw	r16, r24
     75c:	04 5e       	subi	r16, 0xE4	; 228
     75e:	1e 4f       	sbci	r17, 0xFE	; 254
     760:	85 e0       	ldi	r24, 0x05	; 5
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <calloc>
     76c:	f8 01       	movw	r30, r16
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	48 2f       	mov	r20, r24
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	88 2f       	mov	r24, r24
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	fc 01       	movw	r30, r24
     786:	ec 5b       	subi	r30, 0xBC	; 188
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	10 82       	st	Z, r1
     78c:	fc 01       	movw	r30, r24
     78e:	ec 5b       	subi	r30, 0xBC	; 188
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	80 81       	ld	r24, Z
     794:	f9 01       	movw	r30, r18
     796:	e6 5c       	subi	r30, 0xC6	; 198
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	80 83       	st	Z, r24
     79c:	f9 01       	movw	r30, r18
     79e:	e6 5c       	subi	r30, 0xC6	; 198
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	80 81       	ld	r24, Z
     7a4:	fa 01       	movw	r30, r20
     7a6:	e0 5d       	subi	r30, 0xD0	; 208
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	98 17       	cp	r25, r24
     7b8:	30 f2       	brcs	.-116    	; 0x746 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <CAN_Read+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <CAN_Read+0x8>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	9b 83       	std	Y+3, r25	; 0x03
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	fc 01       	movw	r30, r24
     7e4:	ec 5b       	subi	r30, 0xBC	; 188
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	80 81       	ld	r24, Z
     7ea:	88 23       	and	r24, r24
     7ec:	b1 f3       	breq	.-20     	; 0x7da <CAN_Read+0x12>

	for(i = 0; i < 8; ++i)
     7ee:	19 82       	std	Y+1, r1	; 0x01
     7f0:	30 c0       	rjmp	.+96     	; 0x852 <CAN_Read+0x8a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	9b 81       	ldd	r25, Y+3	; 0x03
     7fc:	dc 01       	movw	r26, r24
     7fe:	a2 0f       	add	r26, r18
     800:	b3 1f       	adc	r27, r19
     802:	8c 81       	ldd	r24, Y+4	; 0x04
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	82 1b       	sub	r24, r18
     80e:	93 0b       	sbc	r25, r19
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	90 95       	com	r25
     816:	81 95       	neg	r24
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	fc 01       	movw	r30, r24
     81c:	e4 5e       	subi	r30, 0xE4	; 228
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	40 81       	ld	r20, Z
     822:	51 81       	ldd	r21, Z+1	; 0x01
     824:	8c 81       	ldd	r24, Y+4	; 0x04
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	fc 01       	movw	r30, r24
     82e:	e6 5c       	subi	r30, 0xC6	; 198
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	80 81       	ld	r24, Z
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	82 0f       	add	r24, r18
     840:	93 1f       	adc	r25, r19
     842:	fa 01       	movw	r30, r20
     844:	e8 0f       	add	r30, r24
     846:	f9 1f       	adc	r31, r25
     848:	80 81       	ld	r24, Z
     84a:	8c 93       	st	X, r24
{
    unsigned char i;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 30       	cpi	r24, 0x08	; 8
     856:	68 f2       	brcs	.-102    	; 0x7f2 <CAN_Read+0x2a>
		*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	fc 01       	movw	r30, r24
     862:	e6 5c       	subi	r30, 0xC6	; 198
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	80 81       	ld	r24, Z
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	80 83       	st	Z, r24
     86c:	80 81       	ld	r24, Z
     86e:	85 30       	cpi	r24, 0x05	; 5
     870:	41 f4       	brne	.+16     	; 0x882 <CAN_Read+0xba>
		*(rxRdIndex + sendingNodeID - 1) = 0;
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	fc 01       	movw	r30, r24
     87c:	e6 5c       	subi	r30, 0xC6	; 198
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	88 2f       	mov	r24, r24
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9c 01       	movw	r18, r24
     88a:	21 50       	subi	r18, 0x01	; 1
     88c:	30 40       	sbci	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	ec 5b       	subi	r30, 0xBC	; 188
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	80 81       	ld	r24, Z
     896:	81 50       	subi	r24, 0x01	; 1
     898:	f9 01       	movw	r30, r18
     89a:	ec 5b       	subi	r30, 0xBC	; 188
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	80 83       	st	Z, r24

	return 0;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
}
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	cf 91       	pop	r28
     8ac:	df 91       	pop	r29
     8ae:	08 95       	ret

000008b0 <CAN_Write>:


char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     8b0:	df 93       	push	r29
     8b2:	cf 93       	push	r28
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	27 97       	sbiw	r28, 0x07	; 7
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	9d 83       	std	Y+5, r25	; 0x05
     8c6:	8c 83       	std	Y+4, r24	; 0x04
     8c8:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     8ca:	e9 ed       	ldi	r30, 0xD9	; 217
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	82 95       	swap	r24
     8d2:	8f 70       	andi	r24, 0x0F	; 15
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	81 70       	andi	r24, 0x01	; 1
     8da:	90 70       	andi	r25, 0x00	; 0
     8dc:	88 23       	and	r24, r24
     8de:	a9 f7       	brne	.-22     	; 0x8ca <CAN_Write+0x1a>
     8e0:	e9 ed       	ldi	r30, 0xD9	; 217
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	86 95       	lsr	r24
     8e8:	86 95       	lsr	r24
     8ea:	86 95       	lsr	r24
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	81 70       	andi	r24, 0x01	; 1
     8f2:	90 70       	andi	r25, 0x00	; 0
     8f4:	88 23       	and	r24, r24
     8f6:	49 f7       	brne	.-46     	; 0x8ca <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     8f8:	ed ee       	ldi	r30, 0xED	; 237
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     900:	1a 82       	std	Y+2, r1	; 0x02
     902:	12 c0       	rjmp	.+36     	; 0x928 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     904:	ed ee       	ldi	r30, 0xED	; 237
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	82 95       	swap	r24
     90c:	80 7f       	andi	r24, 0xF0	; 240
     90e:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     910:	ef ee       	ldi	r30, 0xEF	; 239
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	82 95       	swap	r24
     918:	86 95       	lsr	r24
     91a:	86 95       	lsr	r24
     91c:	83 70       	andi	r24, 0x03	; 3
     91e:	88 23       	and	r24, r24
     920:	31 f0       	breq	.+12     	; 0x92e <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	8a 83       	std	Y+2, r24	; 0x02
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	8f 30       	cpi	r24, 0x0F	; 15
     92c:	58 f3       	brcs	.-42     	; 0x904 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	8f 30       	cpi	r24, 0x0F	; 15
     932:	19 f4       	brne	.+6      	; 0x93a <CAN_Write+0x8a>
		return -1;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	8f 83       	std	Y+7, r24	; 0x07
     938:	32 c0       	rjmp	.+100    	; 0x99e <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     93a:	e2 ef       	ldi	r30, 0xF2	; 242
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	8e 81       	ldd	r24, Y+6	; 0x06
     940:	82 95       	swap	r24
     942:	88 0f       	add	r24, r24
     944:	80 7e       	andi	r24, 0xE0	; 224
     946:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     948:	e3 ef       	ldi	r30, 0xF3	; 243
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	8e 81       	ldd	r24, Y+6	; 0x06
     94e:	86 95       	lsr	r24
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     956:	ef ee       	ldi	r30, 0xEF	; 239
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	88 e0       	ldi	r24, 0x08	; 8
     95c:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     95e:	1b 82       	std	Y+3, r1	; 0x03
     960:	0f c0       	rjmp	.+30     	; 0x980 <CAN_Write+0xd0>
		CANMSG = data[i];
     962:	aa ef       	ldi	r26, 0xFA	; 250
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	8b 81       	ldd	r24, Y+3	; 0x03
     968:	28 2f       	mov	r18, r24
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	8c 81       	ldd	r24, Y+4	; 0x04
     96e:	9d 81       	ldd	r25, Y+5	; 0x05
     970:	fc 01       	movw	r30, r24
     972:	e2 0f       	add	r30, r18
     974:	f3 1f       	adc	r31, r19
     976:	80 81       	ld	r24, Z
     978:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	8b 83       	std	Y+3, r24	; 0x03
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	88 30       	cpi	r24, 0x08	; 8
     984:	70 f3       	brcs	.-36     	; 0x962 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     986:	af ee       	ldi	r26, 0xEF	; 239
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	ef ee       	ldi	r30, 0xEF	; 239
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	80 64       	ori	r24, 0x40	; 64
     992:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     994:	ed ee       	ldi	r30, 0xED	; 237
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	80 83       	st	Z, r24

	return 0;
     99c:	1f 82       	std	Y+7, r1	; 0x07
     99e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     9a0:	27 96       	adiw	r28, 0x07	; 7
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	cf 91       	pop	r28
     9ae:	df 91       	pop	r29
     9b0:	08 95       	ret

000009b2 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	2c 97       	sbiw	r28, 0x0c	; 12
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	89 87       	std	Y+9, r24	; 0x09
     9c8:	6a 87       	std	Y+10, r22	; 0x0a
     9ca:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     9cc:	80 91 08 01 	lds	r24, 0x0108
     9d0:	90 91 09 01 	lds	r25, 0x0109
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	06 97       	sbiw	r24, 0x06	; 6
     9de:	98 87       	std	Y+8, r25	; 0x08
     9e0:	8f 83       	std	Y+7, r24	; 0x07
     9e2:	14 c0       	rjmp	.+40     	; 0xa0c <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     9e4:	ef 81       	ldd	r30, Y+7	; 0x07
     9e6:	f8 85       	ldd	r31, Y+8	; 0x08
     9e8:	90 81       	ld	r25, Z
     9ea:	89 85       	ldd	r24, Y+9	; 0x09
     9ec:	98 17       	cp	r25, r24
     9ee:	19 f4       	brne	.+6      	; 0x9f6 <gpio_register_pin+0x44>
            return 1;
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	2c 87       	std	Y+12, r18	; 0x0c
     9f4:	a7 c0       	rjmp	.+334    	; 0xb44 <gpio_register_pin+0x192>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     9f6:	ef 81       	ldd	r30, Y+7	; 0x07
     9f8:	f8 85       	ldd	r31, Y+8	; 0x08
     9fa:	80 85       	ldd	r24, Z+8	; 0x08
     9fc:	91 85       	ldd	r25, Z+9	; 0x09
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	06 97       	sbiw	r24, 0x06	; 6
     a08:	98 87       	std	Y+8, r25	; 0x08
     a0a:	8f 83       	std	Y+7, r24	; 0x07
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	06 96       	adiw	r24, 0x06	; 6
     a12:	21 e0       	ldi	r18, 0x01	; 1
     a14:	86 30       	cpi	r24, 0x06	; 6
     a16:	92 07       	cpc	r25, r18
     a18:	29 f7       	brne	.-54     	; 0x9e4 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     a1a:	89 85       	ldd	r24, Y+9	; 0x09
     a1c:	86 95       	lsr	r24
     a1e:	86 95       	lsr	r24
     a20:	86 95       	lsr	r24
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	87 70       	andi	r24, 0x07	; 7
     a2a:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <gpio_register_pin+0x82>
     a32:	48 c0       	rjmp	.+144    	; 0xac4 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     a34:	8e 81       	ldd	r24, Y+6	; 0x06
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	c9 01       	movw	r24, r18
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	4e 96       	adiw	r24, 0x1e	; 30
     a46:	dc 01       	movw	r26, r24
     a48:	8e 81       	ldd	r24, Y+6	; 0x06
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	c9 01       	movw	r24, r18
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	4e 96       	adiw	r24, 0x1e	; 30
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	48 2f       	mov	r20, r24
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	28 2f       	mov	r18, r24
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <gpio_register_pin+0xbe>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	2a 95       	dec	r18
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <gpio_register_pin+0xba>
     a74:	84 2b       	or	r24, r20
     a76:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     a78:	8e 81       	ldd	r24, Y+6	; 0x06
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	c9 01       	movw	r24, r18
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	82 0f       	add	r24, r18
     a86:	93 1f       	adc	r25, r19
     a88:	4f 96       	adiw	r24, 0x1f	; 31
     a8a:	dc 01       	movw	r26, r24
     a8c:	8e 81       	ldd	r24, Y+6	; 0x06
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	4f 96       	adiw	r24, 0x1f	; 31
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	48 2f       	mov	r20, r24
     aa4:	8d 81       	ldd	r24, Y+5	; 0x05
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	02 2e       	mov	r0, r18
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <gpio_register_pin+0x104>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	0a 94       	dec	r0
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <gpio_register_pin+0x100>
     aba:	80 95       	com	r24
     abc:	84 23       	and	r24, r20
     abe:	8c 93       	st	X, r24
        return 0;
     ac0:	1c 86       	std	Y+12, r1	; 0x0c
     ac2:	40 c0       	rjmp	.+128    	; 0xb44 <gpio_register_pin+0x192>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     ac4:	8e 81       	ldd	r24, Y+6	; 0x06
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	c9 01       	movw	r24, r18
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	4e 96       	adiw	r24, 0x1e	; 30
     ad6:	dc 01       	movw	r26, r24
     ad8:	8e 81       	ldd	r24, Y+6	; 0x06
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	c9 01       	movw	r24, r18
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	4e 96       	adiw	r24, 0x1e	; 30
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	48 2f       	mov	r20, r24
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <gpio_register_pin+0x14e>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	2a 95       	dec	r18
     b02:	e2 f7       	brpl	.-8      	; 0xafc <gpio_register_pin+0x14a>
     b04:	80 95       	com	r24
     b06:	84 23       	and	r24, r20
     b08:	8c 93       	st	X, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     b0a:	8a e0       	ldi	r24, 0x0A	; 10
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <malloc>
     b12:	98 87       	std	Y+8, r25	; 0x08
     b14:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     b16:	8f 81       	ldd	r24, Y+7	; 0x07
     b18:	98 85       	ldd	r25, Y+8	; 0x08
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	19 f4       	brne	.+6      	; 0xb24 <gpio_register_pin+0x172>
        return 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	8c 87       	std	Y+12, r24	; 0x0c
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <gpio_register_pin+0x192>

    input->pin       = pin;
     b24:	ef 81       	ldd	r30, Y+7	; 0x07
     b26:	f8 85       	ldd	r31, Y+8	; 0x08
     b28:	89 85       	ldd	r24, Y+9	; 0x09
     b2a:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     b2c:	ef 81       	ldd	r30, Y+7	; 0x07
     b2e:	f8 85       	ldd	r31, Y+8	; 0x08
     b30:	8b 85       	ldd	r24, Y+11	; 0x0b
     b32:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     b34:	8f 81       	ldd	r24, Y+7	; 0x07
     b36:	98 85       	ldd	r25, Y+8	; 0x08
     b38:	06 96       	adiw	r24, 0x06	; 6
     b3a:	26 e0       	ldi	r18, 0x06	; 6
     b3c:	31 e0       	ldi	r19, 0x01	; 1
     b3e:	b9 01       	movw	r22, r18
     b40:	0b d0       	rcall	.+22     	; 0xb58 <list_add>

    return 0;
     b42:	1c 86       	std	Y+12, r1	; 0x0c
     b44:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     b46:	2c 96       	adiw	r28, 0x0c	; 12
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <list_add+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <list_add+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	7c 83       	std	Y+4, r23	; 0x04
     b6a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     b6c:	eb 81       	ldd	r30, Y+3	; 0x03
     b6e:	fc 81       	ldd	r31, Y+4	; 0x04
     b70:	42 81       	ldd	r20, Z+2	; 0x02
     b72:	53 81       	ldd	r21, Z+3	; 0x03
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	2b 81       	ldd	r18, Y+3	; 0x03
     b7a:	3c 81       	ldd	r19, Y+4	; 0x04
     b7c:	b9 01       	movw	r22, r18
     b7e:	07 d0       	rcall	.+14     	; 0xb8e <__list_add>
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <__list_add+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <__list_add+0x8>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <__list_add+0xa>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	7c 83       	std	Y+4, r23	; 0x04
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	5e 83       	std	Y+6, r21	; 0x06
     ba6:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     ba8:	ed 81       	ldd	r30, Y+5	; 0x05
     baa:	fe 81       	ldd	r31, Y+6	; 0x06
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	80 83       	st	Z, r24
    new->next = next;
     bb4:	e9 81       	ldd	r30, Y+1	; 0x01
     bb6:	fa 81       	ldd	r31, Y+2	; 0x02
     bb8:	8d 81       	ldd	r24, Y+5	; 0x05
     bba:	9e 81       	ldd	r25, Y+6	; 0x06
     bbc:	93 83       	std	Z+3, r25	; 0x03
     bbe:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
    prev->next = new;
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	fc 81       	ldd	r31, Y+4	; 0x04
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	93 83       	std	Z+3, r25	; 0x03
     bd6:	82 83       	std	Z+2, r24	; 0x02
}
     bd8:	26 96       	adiw	r28, 0x06	; 6
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <__gpio_read_pin+0x6>
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	86 95       	lsr	r24
     bfc:	86 95       	lsr	r24
     bfe:	86 95       	lsr	r24
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	87 70       	andi	r24, 0x07	; 7
     c08:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	c9 01       	movw	r24, r18
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	82 0f       	add	r24, r18
     c18:	93 1f       	adc	r25, r19
     c1a:	4d 96       	adiw	r24, 0x1d	; 29
     c1c:	fc 01       	movw	r30, r24
     c1e:	80 81       	ld	r24, Z
     c20:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__gpio_read_pin+0x4c>
     c32:	55 95       	asr	r21
     c34:	47 95       	ror	r20
     c36:	8a 95       	dec	r24
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <__gpio_read_pin+0x48>
     c3a:	ca 01       	movw	r24, r20
     c3c:	81 70       	andi	r24, 0x01	; 1
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	2b 97       	sbiw	r28, 0x0b	; 11
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     c60:	80 91 08 01 	lds	r24, 0x0108
     c64:	90 91 09 01 	lds	r25, 0x0109
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	06 97       	sbiw	r24, 0x06	; 6
     c72:	98 87       	std	Y+8, r25	; 0x08
     c74:	8f 83       	std	Y+7, r24	; 0x07
     c76:	55 c0       	rjmp	.+170    	; 0xd22 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     c78:	ef 81       	ldd	r30, Y+7	; 0x07
     c7a:	f8 85       	ldd	r31, Y+8	; 0x08
     c7c:	90 81       	ld	r25, Z
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	98 17       	cp	r25, r24
     c82:	09 f0       	breq	.+2      	; 0xc86 <gpio_read_pin+0x3c>
     c84:	43 c0       	rjmp	.+134    	; 0xd0c <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
     c86:	1c 82       	std	Y+4, r1	; 0x04
     c88:	21 c0       	rjmp	.+66     	; 0xccc <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8f 81       	ldd	r24, Y+7	; 0x07
     c92:	98 85       	ldd	r25, Y+8	; 0x08
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	fc 01       	movw	r30, r24
     c9a:	32 96       	adiw	r30, 0x02	; 2
     c9c:	40 81       	ld	r20, Z
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9c 01       	movw	r18, r24
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	82 0f       	add	r24, r18
     cb0:	93 1f       	adc	r25, r19
     cb2:	fc 01       	movw	r30, r24
     cb4:	32 96       	adiw	r30, 0x02	; 2
     cb6:	80 81       	ld	r24, Z
     cb8:	48 17       	cp	r20, r24
     cba:	29 f0       	breq	.+10     	; 0xcc6 <gpio_read_pin+0x7c>
                    return input->previous_state;
     cbc:	ef 81       	ldd	r30, Y+7	; 0x07
     cbe:	f8 85       	ldd	r31, Y+8	; 0x08
     cc0:	25 81       	ldd	r18, Z+5	; 0x05
     cc2:	2b 87       	std	Y+11, r18	; 0x0b
     cc4:	38 c0       	rjmp	.+112    	; 0xd36 <gpio_read_pin+0xec>
                i++;
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	e0 f2       	brcs	.-72     	; 0xc8a <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     cd2:	ef 81       	ldd	r30, Y+7	; 0x07
     cd4:	f8 85       	ldd	r31, Y+8	; 0x08
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 27       	eor	r24, r25
     cdc:	88 23       	and	r24, r24
     cde:	29 f0       	breq	.+10     	; 0xcea <gpio_read_pin+0xa0>
     ce0:	ef 81       	ldd	r30, Y+7	; 0x07
     ce2:	f8 85       	ldd	r31, Y+8	; 0x08
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	8a 87       	std	Y+10, r24	; 0x0a
     ce8:	08 c0       	rjmp	.+16     	; 0xcfa <gpio_read_pin+0xb0>
     cea:	ef 81       	ldd	r30, Y+7	; 0x07
     cec:	f8 85       	ldd	r31, Y+8	; 0x08
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	1a 86       	std	Y+10, r1	; 0x0a
     cf2:	88 23       	and	r24, r24
     cf4:	11 f4       	brne	.+4      	; 0xcfa <gpio_read_pin+0xb0>
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	2a 87       	std	Y+10, r18	; 0x0a
     cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfc:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
     cfe:	ef 81       	ldd	r30, Y+7	; 0x07
     d00:	f8 85       	ldd	r31, Y+8	; 0x08
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	85 83       	std	Z+5, r24	; 0x05

            return state;
     d06:	2b 81       	ldd	r18, Y+3	; 0x03
     d08:	2b 87       	std	Y+11, r18	; 0x0b
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d0c:	ef 81       	ldd	r30, Y+7	; 0x07
     d0e:	f8 85       	ldd	r31, Y+8	; 0x08
     d10:	80 85       	ldd	r24, Z+8	; 0x08
     d12:	91 85       	ldd	r25, Z+9	; 0x09
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	06 97       	sbiw	r24, 0x06	; 6
     d1e:	98 87       	std	Y+8, r25	; 0x08
     d20:	8f 83       	std	Y+7, r24	; 0x07
     d22:	8f 81       	ldd	r24, Y+7	; 0x07
     d24:	98 85       	ldd	r25, Y+8	; 0x08
     d26:	06 96       	adiw	r24, 0x06	; 6
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	86 30       	cpi	r24, 0x06	; 6
     d2c:	92 07       	cpc	r25, r18
     d2e:	09 f0       	breq	.+2      	; 0xd32 <gpio_read_pin+0xe8>
     d30:	a3 cf       	rjmp	.-186    	; 0xc78 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	8b 87       	std	Y+11, r24	; 0x0b
     d36:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     d38:	2b 96       	adiw	r28, 0x0b	; 11
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <gpio_debouncer+0xa>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <gpio_debouncer+0xc>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <gpio_debouncer+0xe>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d5c:	80 91 08 01 	lds	r24, 0x0108
     d60:	90 91 09 01 	lds	r25, 0x0109
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	06 97       	sbiw	r24, 0x06	; 6
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	1b c0       	rjmp	.+54     	; 0xdaa <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     d74:	00 91 4e 01 	lds	r16, 0x014E
     d78:	10 91 4f 01 	lds	r17, 0x014F
     d7c:	ed 81       	ldd	r30, Y+5	; 0x05
     d7e:	fe 81       	ldd	r31, Y+6	; 0x06
     d80:	80 81       	ld	r24, Z
     d82:	33 df       	rcall	.-410    	; 0xbea <__gpio_read_pin>
     d84:	28 2f       	mov	r18, r24
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	80 0f       	add	r24, r16
     d8c:	91 1f       	adc	r25, r17
     d8e:	fc 01       	movw	r30, r24
     d90:	32 96       	adiw	r30, 0x02	; 2
     d92:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d94:	ed 81       	ldd	r30, Y+5	; 0x05
     d96:	fe 81       	ldd	r31, Y+6	; 0x06
     d98:	80 85       	ldd	r24, Z+8	; 0x08
     d9a:	91 85       	ldd	r25, Z+9	; 0x09
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	06 97       	sbiw	r24, 0x06	; 6
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	06 96       	adiw	r24, 0x06	; 6
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	86 30       	cpi	r24, 0x06	; 6
     db4:	92 07       	cpc	r25, r18
     db6:	f1 f6       	brne	.-68     	; 0xd74 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     db8:	80 91 4e 01 	lds	r24, 0x014E
     dbc:	90 91 4f 01 	lds	r25, 0x014F
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 4f 01 	sts	0x014F, r25
     dc6:	80 93 4e 01 	sts	0x014E, r24
     dca:	80 91 4e 01 	lds	r24, 0x014E
     dce:	90 91 4f 01 	lds	r25, 0x014F
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	91 05       	cpc	r25, r1
     dd6:	21 f4       	brne	.+8      	; 0xde0 <gpio_debouncer+0x96>
        count = 0;
     dd8:	10 92 4f 01 	sts	0x014F, r1
     ddc:	10 92 4e 01 	sts	0x014E, r1
	
}
     de0:	26 96       	adiw	r28, 0x06	; 6
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	67 97       	sbiw	r28, 0x17	; 23
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
     e0c:	90 91 50 01 	lds	r25, 0x0150
     e10:	8f 89       	ldd	r24, Y+23	; 0x17
     e12:	89 17       	cp	r24, r25
     e14:	09 f4       	brne	.+2      	; 0xe18 <odometry_set_speed+0x22>
     e16:	7b c0       	rjmp	.+246    	; 0xf0e <odometry_set_speed+0x118>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
     e18:	86 e5       	ldi	r24, 0x56	; 86
     e1a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
     e1c:	8f 89       	ldd	r24, Y+23	; 0x17
     e1e:	88 8b       	std	Y+16, r24	; 0x10
     e20:	6c c0       	rjmp	.+216    	; 0xefa <odometry_set_speed+0x104>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a8 e4       	ldi	r26, 0x48	; 72
     e28:	b2 e4       	ldi	r27, 0x42	; 66
     e2a:	8b 87       	std	Y+11, r24	; 0x0b
     e2c:	9c 87       	std	Y+12, r25	; 0x0c
     e2e:	ad 87       	std	Y+13, r26	; 0x0d
     e30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e32:	6b 85       	ldd	r22, Y+11	; 0x0b
     e34:	7c 85       	ldd	r23, Y+12	; 0x0c
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e4       	ldi	r19, 0x40	; 64
     e3e:	4c e1       	ldi	r20, 0x1C	; 28
     e40:	55 e4       	ldi	r21, 0x45	; 69
     e42:	c0 d7       	rcall	.+3968   	; 0x1dc4 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	98 87       	std	Y+8, r25	; 0x08
     e4c:	a9 87       	std	Y+9, r26	; 0x09
     e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e50:	6f 81       	ldd	r22, Y+7	; 0x07
     e52:	78 85       	ldd	r23, Y+8	; 0x08
     e54:	89 85       	ldd	r24, Y+9	; 0x09
     e56:	9a 85       	ldd	r25, Y+10	; 0x0a
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	63 d6       	rcall	.+3270   	; 0x1b28 <__cmpsf2>
     e62:	88 23       	and	r24, r24
     e64:	2c f4       	brge	.+10     	; 0xe70 <odometry_set_speed+0x7a>
		__ticks = 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	3b c0       	rjmp	.+118    	; 0xee6 <odometry_set_speed+0xf0>
	else if (__tmp > 65535)
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	57 e4       	ldi	r21, 0x47	; 71
     e80:	9d d7       	rcall	.+3898   	; 0x1dbc <__gesf2>
     e82:	18 16       	cp	r1, r24
     e84:	3c f5       	brge	.+78     	; 0xed4 <odometry_set_speed+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e86:	6b 85       	ldd	r22, Y+11	; 0x0b
     e88:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e2       	ldi	r20, 0x20	; 32
     e94:	51 e4       	ldi	r21, 0x41	; 65
     e96:	96 d7       	rcall	.+3884   	; 0x1dc4 <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	af d6       	rcall	.+3422   	; 0x1c00 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <odometry_set_speed+0xd4>
     eac:	8a ef       	ldi	r24, 0xFA	; 250
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9c 83       	std	Y+4, r25	; 0x04
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <odometry_set_speed+0xc2>
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	69 f7       	brne	.-38     	; 0xeac <odometry_set_speed+0xb6>
     ed2:	13 c0       	rjmp	.+38     	; 0xefa <odometry_set_speed+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	91 d6       	rcall	.+3362   	; 0x1c00 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <odometry_set_speed+0xfc>
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	ce 01       	movw	r24, r28
     efc:	0f 96       	adiw	r24, 0x0f	; 15
     efe:	63 ec       	ldi	r22, 0xC3	; 195
     f00:	d7 dc       	rcall	.-1618   	; 0x8b0 <CAN_Write>
     f02:	88 23       	and	r24, r24
     f04:	09 f0       	breq	.+2      	; 0xf08 <odometry_set_speed+0x112>
     f06:	8d cf       	rjmp	.-230    	; 0xe22 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	80 93 50 01 	sts	0x0150, r24
}
     f0e:	67 96       	adiw	r28, 0x17	; 23
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <odometry_query_position>:

static void odometry_query_position(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	66 97       	sbiw	r28, 0x16	; 22
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
     f34:	80 e5       	ldi	r24, 0x50	; 80
     f36:	8f 87       	std	Y+15, r24	; 0x0f
     f38:	6c c0       	rjmp	.+216    	; 0x1012 <odometry_query_position+0xf2>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a8 e4       	ldi	r26, 0x48	; 72
     f40:	b2 e4       	ldi	r27, 0x42	; 66
     f42:	8b 87       	std	Y+11, r24	; 0x0b
     f44:	9c 87       	std	Y+12, r25	; 0x0c
     f46:	ad 87       	std	Y+13, r26	; 0x0d
     f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f50:	9e 85       	ldd	r25, Y+14	; 0x0e
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e4       	ldi	r19, 0x40	; 64
     f56:	4c e1       	ldi	r20, 0x1C	; 28
     f58:	55 e4       	ldi	r21, 0x45	; 69
     f5a:	34 d7       	rcall	.+3688   	; 0x1dc4 <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8f 83       	std	Y+7, r24	; 0x07
     f62:	98 87       	std	Y+8, r25	; 0x08
     f64:	a9 87       	std	Y+9, r26	; 0x09
     f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	d7 d5       	rcall	.+2990   	; 0x1b28 <__cmpsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <odometry_query_position+0x68>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	3b c0       	rjmp	.+118    	; 0xffe <odometry_query_position+0xde>
	else if (__tmp > 65535)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	11 d7       	rcall	.+3618   	; 0x1dbc <__gesf2>
     f9a:	18 16       	cp	r1, r24
     f9c:	3c f5       	brge	.+78     	; 0xfec <odometry_query_position+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	0a d7       	rcall	.+3604   	; 0x1dc4 <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	23 d6       	rcall	.+3142   	; 0x1c00 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <odometry_query_position+0xc2>
     fc4:	8a ef       	ldi	r24, 0xFA	; 250
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <odometry_query_position+0xb0>
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <odometry_query_position+0xa4>
     fea:	13 c0       	rjmp	.+38     	; 0x1012 <odometry_query_position+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	6f 81       	ldd	r22, Y+7	; 0x07
     fee:	78 85       	ldd	r23, Y+8	; 0x08
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff4:	05 d6       	rcall	.+3082   	; 0x1c00 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <odometry_query_position+0xea>
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	ce 01       	movw	r24, r28
    1014:	0f 96       	adiw	r24, 0x0f	; 15
    1016:	63 ec       	ldi	r22, 0xC3	; 195
    1018:	4b dc       	rcall	.-1898   	; 0x8b0 <CAN_Write>
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <odometry_query_position+0x100>
    101e:	8d cf       	rjmp	.-230    	; 0xf3a <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1020:	ce 01       	movw	r24, r28
    1022:	0f 96       	adiw	r24, 0x0f	; 15
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	d0 db       	rcall	.-2144   	; 0x7c8 <CAN_Read>

	position.state = buffer[0];
    1028:	8f 85       	ldd	r24, Y+15	; 0x0f
    102a:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    102e:	88 89       	ldd	r24, Y+16	; 0x10
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	38 2f       	mov	r19, r24
    1036:	22 27       	eor	r18, r18
    1038:	89 89       	ldd	r24, Y+17	; 0x11
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	82 2b       	or	r24, r18
    1040:	93 2b       	or	r25, r19
    1042:	90 93 0b 01 	sts	0x010B, r25
    1046:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    104a:	8a 89       	ldd	r24, Y+18	; 0x12
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	38 2f       	mov	r19, r24
    1052:	22 27       	eor	r18, r18
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	82 2b       	or	r24, r18
    105c:	93 2b       	or	r25, r19
    105e:	90 93 0d 01 	sts	0x010D, r25
    1062:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1066:	8c 89       	ldd	r24, Y+20	; 0x14
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	38 2f       	mov	r19, r24
    106e:	22 27       	eor	r18, r18
    1070:	8d 89       	ldd	r24, Y+21	; 0x15
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	82 2b       	or	r24, r18
    1078:	93 2b       	or	r25, r19
    107a:	90 93 0f 01 	sts	0x010F, r25
    107e:	80 93 0e 01 	sts	0x010E, r24
}
    1082:	66 96       	adiw	r28, 0x16	; 22
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	27 97       	sbiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    10ac:	b5 d3       	rcall	.+1898   	; 0x1818 <system_get_system_time>
    10ae:	aa 27       	eor	r26, r26
    10b0:	97 fd       	sbrc	r25, 7
    10b2:	a0 95       	com	r26
    10b4:	ba 2f       	mov	r27, r26
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	ab 83       	std	Y+3, r26	; 0x03
    10bc:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    10be:	30 df       	rcall	.-416    	; 0xf20 <odometry_query_position>
		if(callback != NULL)
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <odometry_wait_until_done+0x50>
		{
			if(callback(time) == 1)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	ab 81       	ldd	r26, Y+3	; 0x03
    10ce:	bc 81       	ldd	r27, Y+4	; 0x04
    10d0:	ed 81       	ldd	r30, Y+5	; 0x05
    10d2:	fe 81       	ldd	r31, Y+6	; 0x06
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	09 95       	icall
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <odometry_wait_until_done+0x50>
				return ODOMETRY_FAIL;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <odometry_wait_until_done+0x62>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    10e4:	80 91 10 01 	lds	r24, 0x0110
    10e8:	8d 34       	cpi	r24, 0x4D	; 77
    10ea:	49 f3       	breq	.-46     	; 0x10be <odometry_wait_until_done+0x2a>
    10ec:	80 91 10 01 	lds	r24, 0x0110
    10f0:	82 35       	cpi	r24, 0x52	; 82
    10f2:	29 f3       	breq	.-54     	; 0x10be <odometry_wait_until_done+0x2a>

	return ODOMETRY_SUCCESS;
    10f4:	1f 82       	std	Y+7, r1	; 0x07
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10f8:	27 96       	adiw	r28, 0x07	; 7
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <odometry_move_to_position>:

	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	6c 97       	sbiw	r28, 0x1c	; 28
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	98 8f       	std	Y+24, r25	; 0x18
    1120:	8f 8b       	std	Y+23, r24	; 0x17
    1122:	69 8f       	std	Y+25, r22	; 0x19
    1124:	4a 8f       	std	Y+26, r20	; 0x1a
    1126:	3c 8f       	std	Y+28, r19	; 0x1c
    1128:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    112a:	89 8d       	ldd	r24, Y+25	; 0x19
    112c:	64 de       	rcall	.-824    	; 0xdf6 <odometry_set_speed>

	buffer[0] = 'G';
    112e:	87 e4       	ldi	r24, 0x47	; 71
    1130:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1132:	ef 89       	ldd	r30, Y+23	; 0x17
    1134:	f8 8d       	ldd	r31, Y+24	; 0x18
    1136:	80 81       	ld	r24, Z
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	89 2f       	mov	r24, r25
    113c:	99 0f       	add	r25, r25
    113e:	99 0b       	sbc	r25, r25
    1140:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1142:	ef 89       	ldd	r30, Y+23	; 0x17
    1144:	f8 8d       	ldd	r31, Y+24	; 0x18
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    114c:	ef 89       	ldd	r30, Y+23	; 0x17
    114e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	89 2f       	mov	r24, r25
    1156:	99 0f       	add	r25, r25
    1158:	99 0b       	sbc	r25, r25
    115a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    115c:	ef 89       	ldd	r30, Y+23	; 0x17
    115e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;//Mozda ne treba 0
    1166:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1168:	8a 8d       	ldd	r24, Y+26	; 0x1a
    116a:	8d 8b       	std	Y+21, r24	; 0x15
    116c:	6c c0       	rjmp	.+216    	; 0x1246 <odometry_move_to_position+0x13c>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a8 e4       	ldi	r26, 0x48	; 72
    1174:	b2 e4       	ldi	r27, 0x42	; 66
    1176:	8b 87       	std	Y+11, r24	; 0x0b
    1178:	9c 87       	std	Y+12, r25	; 0x0c
    117a:	ad 87       	std	Y+13, r26	; 0x0d
    117c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1180:	7c 85       	ldd	r23, Y+12	; 0x0c
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e4       	ldi	r19, 0x40	; 64
    118a:	4c e1       	ldi	r20, 0x1C	; 28
    118c:	55 e4       	ldi	r21, 0x45	; 69
    118e:	1a d6       	rcall	.+3124   	; 0x1dc4 <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8f 83       	std	Y+7, r24	; 0x07
    1196:	98 87       	std	Y+8, r25	; 0x08
    1198:	a9 87       	std	Y+9, r26	; 0x09
    119a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	bd d4       	rcall	.+2426   	; 0x1b28 <__cmpsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <odometry_move_to_position+0xb2>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	3b c0       	rjmp	.+118    	; 0x1232 <odometry_move_to_position+0x128>
	else if (__tmp > 65535)
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	f7 d5       	rcall	.+3054   	; 0x1dbc <__gesf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	3c f5       	brge	.+78     	; 0x1220 <odometry_move_to_position+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	f0 d5       	rcall	.+3040   	; 0x1dc4 <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	09 d5       	rcall	.+2578   	; 0x1c00 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <odometry_move_to_position+0x10c>
    11f8:	8a ef       	ldi	r24, 0xFA	; 250
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <odometry_move_to_position+0xfa>
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	69 f7       	brne	.-38     	; 0x11f8 <odometry_move_to_position+0xee>
    121e:	13 c0       	rjmp	.+38     	; 0x1246 <odometry_move_to_position+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	6f 81       	ldd	r22, Y+7	; 0x07
    1222:	78 85       	ldd	r23, Y+8	; 0x08
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	eb d4       	rcall	.+2518   	; 0x1c00 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <odometry_move_to_position+0x134>
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	ce 01       	movw	r24, r28
    1248:	0f 96       	adiw	r24, 0x0f	; 15
    124a:	63 ec       	ldi	r22, 0xC3	; 195
    124c:	31 db       	rcall	.-2462   	; 0x8b0 <CAN_Write>
    124e:	88 23       	and	r24, r24
    1250:	09 f0       	breq	.+2      	; 0x1254 <odometry_move_to_position+0x14a>
    1252:	8d cf       	rjmp	.-230    	; 0x116e <odometry_move_to_position+0x64>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1258:	1d df       	rcall	.-454    	; 0x1094 <odometry_wait_until_done>
}
    125a:	6c 96       	adiw	r28, 0x1c	; 28
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	98 8f       	std	Y+24, r25	; 0x18
    1282:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1284:	89 e4       	ldi	r24, 0x49	; 73
    1286:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1288:	ef 89       	ldd	r30, Y+23	; 0x17
    128a:	f8 8d       	ldd	r31, Y+24	; 0x18
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	89 2f       	mov	r24, r25
    1292:	99 0f       	add	r25, r25
    1294:	99 0b       	sbc	r25, r25
    1296:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1298:	ef 89       	ldd	r30, Y+23	; 0x17
    129a:	f8 8d       	ldd	r31, Y+24	; 0x18
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    12a2:	ef 89       	ldd	r30, Y+23	; 0x17
    12a4:	f8 8d       	ldd	r31, Y+24	; 0x18
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	89 2f       	mov	r24, r25
    12ac:	99 0f       	add	r25, r25
    12ae:	99 0b       	sbc	r25, r25
    12b0:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    12b2:	ef 89       	ldd	r30, Y+23	; 0x17
    12b4:	f8 8d       	ldd	r31, Y+24	; 0x18
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle << 8;
    12bc:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    12be:	ef 89       	ldd	r30, Y+23	; 0x17
    12c0:	f8 8d       	ldd	r31, Y+24	; 0x18
    12c2:	84 81       	ldd	r24, Z+4	; 0x04
    12c4:	95 81       	ldd	r25, Z+5	; 0x05
    12c6:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    12c8:	ef 89       	ldd	r30, Y+23	; 0x17
    12ca:	f8 8d       	ldd	r31, Y+24	; 0x18
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	90 93 0b 01 	sts	0x010B, r25
    12d4:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    12d8:	ef 89       	ldd	r30, Y+23	; 0x17
    12da:	f8 8d       	ldd	r31, Y+24	; 0x18
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	90 93 0d 01 	sts	0x010D, r25
    12e4:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    12e8:	ef 89       	ldd	r30, Y+23	; 0x17
    12ea:	f8 8d       	ldd	r31, Y+24	; 0x18
    12ec:	84 81       	ldd	r24, Z+4	; 0x04
    12ee:	95 81       	ldd	r25, Z+5	; 0x05
    12f0:	90 93 0f 01 	sts	0x010F, r25
    12f4:	80 93 0e 01 	sts	0x010E, r24
    12f8:	6c c0       	rjmp	.+216    	; 0x13d2 <odometry_set_position+0x166>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a8 e4       	ldi	r26, 0x48	; 72
    1300:	b2 e4       	ldi	r27, 0x42	; 66
    1302:	8b 87       	std	Y+11, r24	; 0x0b
    1304:	9c 87       	std	Y+12, r25	; 0x0c
    1306:	ad 87       	std	Y+13, r26	; 0x0d
    1308:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130a:	6b 85       	ldd	r22, Y+11	; 0x0b
    130c:	7c 85       	ldd	r23, Y+12	; 0x0c
    130e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1310:	9e 85       	ldd	r25, Y+14	; 0x0e
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e4       	ldi	r19, 0x40	; 64
    1316:	4c e1       	ldi	r20, 0x1C	; 28
    1318:	55 e4       	ldi	r21, 0x45	; 69
    131a:	54 d5       	rcall	.+2728   	; 0x1dc4 <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	a9 87       	std	Y+9, r26	; 0x09
    1326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	f7 d3       	rcall	.+2030   	; 0x1b28 <__cmpsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <odometry_set_position+0xdc>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	3b c0       	rjmp	.+118    	; 0x13be <odometry_set_position+0x152>
	else if (__tmp > 65535)
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	31 d5       	rcall	.+2658   	; 0x1dbc <__gesf2>
    135a:	18 16       	cp	r1, r24
    135c:	3c f5       	brge	.+78     	; 0x13ac <odometry_set_position+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1360:	7c 85       	ldd	r23, Y+12	; 0x0c
    1362:	8d 85       	ldd	r24, Y+13	; 0x0d
    1364:	9e 85       	ldd	r25, Y+14	; 0x0e
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e2       	ldi	r20, 0x20	; 32
    136c:	51 e4       	ldi	r21, 0x41	; 65
    136e:	2a d5       	rcall	.+2644   	; 0x1dc4 <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	43 d4       	rcall	.+2182   	; 0x1c00 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <odometry_set_position+0x136>
    1384:	8a ef       	ldi	r24, 0xFA	; 250
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	8b 83       	std	Y+3, r24	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <odometry_set_position+0x124>
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f7       	brne	.-38     	; 0x1384 <odometry_set_position+0x118>
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <odometry_set_position+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	6f 81       	ldd	r22, Y+7	; 0x07
    13ae:	78 85       	ldd	r23, Y+8	; 0x08
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	25 d4       	rcall	.+2122   	; 0x1c00 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <odometry_set_position+0x15e>
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	ce 01       	movw	r24, r28
    13d4:	0f 96       	adiw	r24, 0x0f	; 15
    13d6:	63 ec       	ldi	r22, 0xC3	; 195
    13d8:	6b da       	rcall	.-2858   	; 0x8b0 <CAN_Write>
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <odometry_set_position+0x174>
    13de:	8d cf       	rjmp	.-230    	; 0x12fa <odometry_set_position+0x8e>
		_delay_ms(50);
}
    13e0:	68 96       	adiw	r28, 0x18	; 24
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <purpleside>:
{
	{{100,100},NORMAL_SPEED,FORWARD,NULL}
};

void purpleside(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2b 97       	sbiw	r28, 0x0b	; 11
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    1406:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t next_position	 = 0;
    1408:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t odometry_status;
	uint8_t active_state = ROBOT_STATE_TACTIC_ONE;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
	
	starting_position.x		= 0;
    140e:	1e 82       	std	Y+6, r1	; 0x06
    1410:	1d 82       	std	Y+5, r1	; 0x05
	starting_position.y		= 0;
    1412:	18 86       	std	Y+8, r1	; 0x08
    1414:	1f 82       	std	Y+7, r1	; 0x07
	starting_position.angle = 0;
    1416:	1a 86       	std	Y+10, r1	; 0x0a
    1418:	19 86       	std	Y+9, r1	; 0x09
	
	odometry_set_position(&starting_position);
    141a:	ce 01       	movw	r24, r28
    141c:	05 96       	adiw	r24, 0x05	; 5
    141e:	26 df       	rcall	.-436    	; 0x126c <odometry_set_position>

	while(1)
	{
		switch(active_state)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	d1 f7       	brne	.-12     	; 0x1420 <purpleside+0x2e>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	8c 83       	std	Y+4, r24	; 0x04
    1430:	5c c0       	rjmp	.+184    	; 0x14ea <purpleside+0xf8>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	48 2f       	mov	r20, r24
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	ca 01       	movw	r24, r20
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	9c 01       	movw	r18, r24
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	8f 5e       	subi	r24, 0xEF	; 239
    1452:	9e 4f       	sbci	r25, 0xFE	; 254
    1454:	bc 01       	movw	r22, r24
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	48 2f       	mov	r20, r24
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	ca 01       	movw	r24, r20
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	9c 01       	movw	r18, r24
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	84 0f       	add	r24, r20
    1472:	95 1f       	adc	r25, r21
    1474:	fc 01       	movw	r30, r24
    1476:	e8 5e       	subi	r30, 0xE8	; 232
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	a0 81       	ld	r26, Z
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	48 2f       	mov	r20, r24
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	ca 01       	movw	r24, r20
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	9c 01       	movw	r18, r24
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	22 0f       	add	r18, r18
    1490:	33 1f       	adc	r19, r19
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	fc 01       	movw	r30, r24
    149c:	e7 5e       	subi	r30, 0xE7	; 231
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	b0 81       	ld	r27, Z
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	48 2f       	mov	r20, r24
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	ca 01       	movw	r24, r20
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	9c 01       	movw	r18, r24
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	82 0f       	add	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	84 0f       	add	r24, r20
    14be:	95 1f       	adc	r25, r21
    14c0:	fc 01       	movw	r30, r24
    14c2:	e6 5e       	subi	r30, 0xE6	; 230
    14c4:	fe 4f       	sbci	r31, 0xFE	; 254
    14c6:	20 81       	ld	r18, Z
    14c8:	31 81       	ldd	r19, Z+1	; 0x01
    14ca:	cb 01       	movw	r24, r22
    14cc:	6a 2f       	mov	r22, r26
    14ce:	4b 2f       	mov	r20, r27
    14d0:	1c de       	rcall	.-968    	; 0x110a <odometry_move_to_position>
    14d2:	8a 83       	std	Y+2, r24	; 0x02
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <purpleside+0xea>
    14da:	a2 cf       	rjmp	.-188    	; 0x1420 <purpleside+0x2e>
					{
						break;
					}
					if(current_position == 0)
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <purpleside+0xf2>
    14e2:	ff cf       	rjmp	.-2      	; 0x14e2 <purpleside+0xf0>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	8c 83       	std	Y+4, r24	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <purpleside+0x100>
    14f0:	a0 cf       	rjmp	.-192    	; 0x1432 <purpleside+0x40>
    14f2:	96 cf       	rjmp	.-212    	; 0x1420 <purpleside+0x2e>

000014f4 <timer_init>:


void timer_init(unsigned int freq)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <timer_init+0xa>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1506:	e0 e8       	ldi	r30, 0x80	; 128
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    150c:	e1 e8       	ldi	r30, 0x81	; 129
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	89 e0       	ldi	r24, 0x09	; 9
    1512:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1514:	08 e8       	ldi	r16, 0x88	; 136
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	cc 01       	movw	r24, r24
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	98 d3       	rcall	.+1840   	; 0x1c58 <__floatunsisf>
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	60 e8       	ldi	r22, 0x80	; 128
    152e:	76 e9       	ldi	r23, 0x96	; 150
    1530:	88 e1       	ldi	r24, 0x18	; 24
    1532:	9b e4       	ldi	r25, 0x4B	; 75
    1534:	fd d2       	rcall	.+1530   	; 0x1b30 <__divsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	8c d2       	rcall	.+1304   	; 0x1a60 <__addsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	57 d3       	rcall	.+1710   	; 0x1c00 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    155c:	ef e6       	ldi	r30, 0x6F	; 111
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	80 83       	st	Z, r24

	SREG |= 0x80;
    1564:	af e5       	ldi	r26, 0x5F	; 95
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ef e5       	ldi	r30, 0x5F	; 95
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 68       	ori	r24, 0x80	; 128
    1570:	8c 93       	st	X, r24
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	00 90 5b 00 	lds	r0, 0x005B
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    15b0:	80 91 51 01 	lds	r24, 0x0151
    15b4:	90 91 52 01 	lds	r25, 0x0152
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	29 f0       	breq	.+10     	; 0x15c6 <__vector_12+0x46>
        timer_callback();
    15bc:	e0 91 51 01 	lds	r30, 0x0151
    15c0:	f0 91 52 01 	lds	r31, 0x0152
    15c4:	09 95       	icall
	sys_time++;
    15c6:	80 91 53 01 	lds	r24, 0x0153
    15ca:	90 91 54 01 	lds	r25, 0x0154
    15ce:	a0 91 55 01 	lds	r26, 0x0155
    15d2:	b0 91 56 01 	lds	r27, 0x0156
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	a1 1d       	adc	r26, r1
    15da:	b1 1d       	adc	r27, r1
    15dc:	80 93 53 01 	sts	0x0153, r24
    15e0:	90 93 54 01 	sts	0x0154, r25
    15e4:	a0 93 55 01 	sts	0x0155, r26
    15e8:	b0 93 56 01 	sts	0x0156, r27
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	00 92 5b 00 	sts	0x005B, r0
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <system_init>:

void system_init(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	6c 97       	sbiw	r28, 0x1c	; 28
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	aa e7       	ldi	r26, 0x7A	; 122
    1632:	b4 e4       	ldi	r27, 0x44	; 68
    1634:	89 8f       	std	Y+25, r24	; 0x19
    1636:	9a 8f       	std	Y+26, r25	; 0x1a
    1638:	ab 8f       	std	Y+27, r26	; 0x1b
    163a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	69 8d       	ldd	r22, Y+25	; 0x19
    163e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e4       	ldi	r19, 0x40	; 64
    1648:	4c e1       	ldi	r20, 0x1C	; 28
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	bb d3       	rcall	.+1910   	; 0x1dc4 <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	8d 8b       	std	Y+21, r24	; 0x15
    1654:	9e 8b       	std	Y+22, r25	; 0x16
    1656:	af 8b       	std	Y+23, r26	; 0x17
    1658:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    165a:	6d 89       	ldd	r22, Y+21	; 0x15
    165c:	7e 89       	ldd	r23, Y+22	; 0x16
    165e:	8f 89       	ldd	r24, Y+23	; 0x17
    1660:	98 8d       	ldd	r25, Y+24	; 0x18
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e8       	ldi	r20, 0x80	; 128
    1668:	5f e3       	ldi	r21, 0x3F	; 63
    166a:	5e d2       	rcall	.+1212   	; 0x1b28 <__cmpsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <system_init+0x62>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
    1678:	3b c0       	rjmp	.+118    	; 0x16f0 <system_init+0xd8>
	else if (__tmp > 65535)
    167a:	6d 89       	ldd	r22, Y+21	; 0x15
    167c:	7e 89       	ldd	r23, Y+22	; 0x16
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	98 d3       	rcall	.+1840   	; 0x1dbc <__gesf2>
    168c:	18 16       	cp	r1, r24
    168e:	3c f5       	brge	.+78     	; 0x16de <system_init+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	69 8d       	ldd	r22, Y+25	; 0x19
    1692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e2       	ldi	r20, 0x20	; 32
    169e:	51 e4       	ldi	r21, 0x41	; 65
    16a0:	91 d3       	rcall	.+1826   	; 0x1dc4 <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	aa d2       	rcall	.+1364   	; 0x1c00 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9c 8b       	std	Y+20, r25	; 0x14
    16b2:	8b 8b       	std	Y+19, r24	; 0x13
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <system_init+0xbc>
    16b6:	8a ef       	ldi	r24, 0xFA	; 250
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9a 8b       	std	Y+18, r25	; 0x12
    16bc:	89 8b       	std	Y+17, r24	; 0x11
    16be:	89 89       	ldd	r24, Y+17	; 0x11
    16c0:	9a 89       	ldd	r25, Y+18	; 0x12
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <system_init+0xaa>
    16c6:	9a 8b       	std	Y+18, r25	; 0x12
    16c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	9c 89       	ldd	r25, Y+20	; 0x14
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <system_init+0x9e>
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <system_init+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	6d 89       	ldd	r22, Y+21	; 0x15
    16e0:	7e 89       	ldd	r23, Y+22	; 0x16
    16e2:	8f 89       	ldd	r24, Y+23	; 0x17
    16e4:	98 8d       	ldd	r25, Y+24	; 0x18
    16e6:	8c d2       	rcall	.+1304   	; 0x1c00 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9c 8b       	std	Y+20, r25	; 0x14
    16ee:	8b 8b       	std	Y+19, r24	; 0x13
    16f0:	8b 89       	ldd	r24, Y+19	; 0x13
    16f2:	9c 89       	ldd	r25, Y+20	; 0x14
    16f4:	98 8b       	std	Y+16, r25	; 0x10
    16f6:	8f 87       	std	Y+15, r24	; 0x0f
    16f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fa:	98 89       	ldd	r25, Y+16	; 0x10
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <system_init+0xe4>
    1700:	98 8b       	std	Y+16, r25	; 0x10
    1702:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DDRG = 0xff;
    1704:	e3 e3       	ldi	r30, 0x33	; 51
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	80 83       	st	Z, r24
	PORTG = 0xFF;
    170c:	e4 e3       	ldi	r30, 0x34	; 52
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	80 83       	st	Z, r24
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	aa e7       	ldi	r26, 0x7A	; 122
    171a:	b4 e4       	ldi	r27, 0x44	; 68
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e4       	ldi	r19, 0x40	; 64
    1730:	4c e1       	ldi	r20, 0x1C	; 28
    1732:	55 e4       	ldi	r21, 0x45	; 69
    1734:	47 d3       	rcall	.+1678   	; 0x1dc4 <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8f 83       	std	Y+7, r24	; 0x07
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	a9 87       	std	Y+9, r26	; 0x09
    1740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	ea d1       	rcall	.+980    	; 0x1b28 <__cmpsf2>
    1754:	88 23       	and	r24, r24
    1756:	2c f4       	brge	.+10     	; 0x1762 <system_init+0x14a>
		__ticks = 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	3b c0       	rjmp	.+118    	; 0x17d8 <system_init+0x1c0>
	else if (__tmp > 65535)
    1762:	6f 81       	ldd	r22, Y+7	; 0x07
    1764:	78 85       	ldd	r23, Y+8	; 0x08
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	24 d3       	rcall	.+1608   	; 0x1dbc <__gesf2>
    1774:	18 16       	cp	r1, r24
    1776:	3c f5       	brge	.+78     	; 0x17c6 <system_init+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	1d d3       	rcall	.+1594   	; 0x1dc4 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	36 d2       	rcall	.+1132   	; 0x1c00 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <system_init+0x1a4>
    179e:	8a ef       	ldi	r24, 0xFA	; 250
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <system_init+0x192>
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <system_init+0x186>
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <system_init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	6f 81       	ldd	r22, Y+7	; 0x07
    17c8:	78 85       	ldd	r23, Y+8	; 0x08
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	18 d2       	rcall	.+1072   	; 0x1c00 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	9a 83       	std	Y+2, r25	; 0x02
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <system_init+0x1cc>
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	PORTG = 0x00;
    17ec:	e4 e3       	ldi	r30, 0x34	; 52
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1
	servo_init(50);
    17f2:	82 e3       	ldi	r24, 0x32	; 50
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <servo_init>
	timer_init(1000);
    17fa:	88 ee       	ldi	r24, 0xE8	; 232
    17fc:	93 e0       	ldi	r25, 0x03	; 3
    17fe:	7a de       	rcall	.-780    	; 0x14f4 <timer_init>
	CAN_Init(1);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 98 03 	call	0x730	; 0x730 <CAN_Init>
}
    1806:	6c 96       	adiw	r28, 0x1c	; 28
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1820:	80 91 53 01 	lds	r24, 0x0153
    1824:	90 91 54 01 	lds	r25, 0x0154
    1828:	a0 91 55 01 	lds	r26, 0x0155
    182c:	b0 91 56 01 	lds	r27, 0x0156
}
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    183a:	1f 92       	push	r1
    183c:	0f 92       	push	r0
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	0f 92       	push	r0
    1842:	00 90 5b 00 	lds	r0, 0x005B
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    185e:	80 91 57 01 	lds	r24, 0x0157
    1862:	88 23       	and	r24, r24
    1864:	d9 f0       	breq	.+54     	; 0x189c <__vector_23+0x62>
	{
		tx0_counter--;
    1866:	80 91 57 01 	lds	r24, 0x0157
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	80 93 57 01 	sts	0x0157, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1870:	a6 ec       	ldi	r26, 0xC6	; 198
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	80 91 58 01 	lds	r24, 0x0158
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	fc 01       	movw	r30, r24
    187e:	e1 5a       	subi	r30, 0xA1	; 161
    1880:	fe 4f       	sbci	r31, 0xFE	; 254
    1882:	80 81       	ld	r24, Z
    1884:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    1886:	80 91 58 01 	lds	r24, 0x0158
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 58 01 	sts	0x0158, r24
    1890:	80 91 58 01 	lds	r24, 0x0158
    1894:	80 34       	cpi	r24, 0x40	; 64
    1896:	11 f4       	brne	.+4      	; 0x189c <__vector_23+0x62>
			tx0_rd_index = 0;
    1898:	10 92 58 01 	sts	0x0158, r1
	}
}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	0f 90       	pop	r0
    18ae:	00 92 5b 00 	sts	0x005B, r0
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	00 90 5b 00 	lds	r0, 0x005B
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	2f 93       	push	r18
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    18e0:	e0 ec       	ldi	r30, 0xC0	; 192
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	8c 71       	andi	r24, 0x1C	; 28
    18f0:	90 70       	andi	r25, 0x00	; 0
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	d9 f4       	brne	.+54     	; 0x192c <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    18f6:	80 91 59 01 	lds	r24, 0x0159
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	e6 ec       	ldi	r30, 0xC6	; 198
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	20 81       	ld	r18, Z
    1904:	fc 01       	movw	r30, r24
    1906:	e1 56       	subi	r30, 0x61	; 97
    1908:	fe 4f       	sbci	r31, 0xFE	; 254
    190a:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    190c:	80 91 59 01 	lds	r24, 0x0159
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	80 93 59 01 	sts	0x0159, r24
    1916:	80 91 59 01 	lds	r24, 0x0159
    191a:	80 34       	cpi	r24, 0x40	; 64
    191c:	11 f4       	brne	.+4      	; 0x1922 <__vector_21+0x66>
			rx0_wr_index = 0;
    191e:	10 92 59 01 	sts	0x0159, r1

		rx0_counter++;
    1922:	80 91 5a 01 	lds	r24, 0x015A
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 5a 01 	sts	0x015A, r24
	}
}
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	00 92 5b 00 	sts	0x005B, r0
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	00 90 5b 00 	lds	r0, 0x005B
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1970:	80 91 5b 01 	lds	r24, 0x015B
    1974:	88 23       	and	r24, r24
    1976:	d9 f0       	breq	.+54     	; 0x19ae <__vector_34+0x62>
	{
		tx1_counter--;
    1978:	80 91 5b 01 	lds	r24, 0x015B
    197c:	81 50       	subi	r24, 0x01	; 1
    197e:	80 93 5b 01 	sts	0x015B, r24
		UDR1=tx1_buffer[tx1_rd_index];
    1982:	ae ec       	ldi	r26, 0xCE	; 206
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	80 91 5c 01 	lds	r24, 0x015C
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	fc 01       	movw	r30, r24
    1990:	e1 52       	subi	r30, 0x21	; 33
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	80 81       	ld	r24, Z
    1996:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    1998:	80 91 5c 01 	lds	r24, 0x015C
    199c:	8f 5f       	subi	r24, 0xFF	; 255
    199e:	80 93 5c 01 	sts	0x015C, r24
    19a2:	80 91 5c 01 	lds	r24, 0x015C
    19a6:	80 34       	cpi	r24, 0x40	; 64
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__vector_34+0x62>
			tx1_rd_index = 0;
    19aa:	10 92 5c 01 	sts	0x015C, r1
	}
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	0f 90       	pop	r0
    19c0:	00 92 5b 00 	sts	0x005B, r0
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <__vector_32>:

ISR(USART1_RX_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	00 90 5b 00 	lds	r0, 0x005B
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    19f2:	e8 ec       	ldi	r30, 0xC8	; 200
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	8c 71       	andi	r24, 0x1C	; 28
    1a02:	90 70       	andi	r25, 0x00	; 0
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	d9 f4       	brne	.+54     	; 0x1a3e <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    1a08:	80 91 5d 01 	lds	r24, 0x015D
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	ee ec       	ldi	r30, 0xCE	; 206
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	20 81       	ld	r18, Z
    1a16:	fc 01       	movw	r30, r24
    1a18:	e1 5e       	subi	r30, 0xE1	; 225
    1a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    1a1e:	80 91 5d 01 	lds	r24, 0x015D
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 93 5d 01 	sts	0x015D, r24
    1a28:	80 91 5d 01 	lds	r24, 0x015D
    1a2c:	80 34       	cpi	r24, 0x40	; 64
    1a2e:	11 f4       	brne	.+4      	; 0x1a34 <__vector_32+0x66>
		rx1_wr_index = 0;
    1a30:	10 92 5d 01 	sts	0x015D, r1

		rx1_counter++;
    1a34:	80 91 5e 01 	lds	r24, 0x015E
    1a38:	8f 5f       	subi	r24, 0xFF	; 255
    1a3a:	80 93 5e 01 	sts	0x015E, r24
	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	2f 91       	pop	r18
    1a4e:	0f 90       	pop	r0
    1a50:	00 92 5b 00 	sts	0x005B, r0
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__subsf3>:
    1a5e:	50 58       	subi	r21, 0x80	; 128

00001a60 <__addsf3>:
    1a60:	bb 27       	eor	r27, r27
    1a62:	aa 27       	eor	r26, r26
    1a64:	0e d0       	rcall	.+28     	; 0x1a82 <__addsf3x>
    1a66:	70 c1       	rjmp	.+736    	; 0x1d48 <__fp_round>
    1a68:	61 d1       	rcall	.+706    	; 0x1d2c <__fp_pscA>
    1a6a:	30 f0       	brcs	.+12     	; 0x1a78 <__addsf3+0x18>
    1a6c:	66 d1       	rcall	.+716    	; 0x1d3a <__fp_pscB>
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <__addsf3+0x18>
    1a70:	31 f4       	brne	.+12     	; 0x1a7e <__addsf3+0x1e>
    1a72:	9f 3f       	cpi	r25, 0xFF	; 255
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <__addsf3+0x1a>
    1a76:	1e f4       	brtc	.+6      	; 0x1a7e <__addsf3+0x1e>
    1a78:	56 c1       	rjmp	.+684    	; 0x1d26 <__fp_nan>
    1a7a:	0e f4       	brtc	.+2      	; 0x1a7e <__addsf3+0x1e>
    1a7c:	e0 95       	com	r30
    1a7e:	e7 fb       	bst	r30, 7
    1a80:	4c c1       	rjmp	.+664    	; 0x1d1a <__fp_inf>

00001a82 <__addsf3x>:
    1a82:	e9 2f       	mov	r30, r25
    1a84:	72 d1       	rcall	.+740    	; 0x1d6a <__fp_split3>
    1a86:	80 f3       	brcs	.-32     	; 0x1a68 <__addsf3+0x8>
    1a88:	ba 17       	cp	r27, r26
    1a8a:	62 07       	cpc	r22, r18
    1a8c:	73 07       	cpc	r23, r19
    1a8e:	84 07       	cpc	r24, r20
    1a90:	95 07       	cpc	r25, r21
    1a92:	18 f0       	brcs	.+6      	; 0x1a9a <__addsf3x+0x18>
    1a94:	71 f4       	brne	.+28     	; 0x1ab2 <__addsf3x+0x30>
    1a96:	9e f5       	brtc	.+102    	; 0x1afe <__addsf3x+0x7c>
    1a98:	8a c1       	rjmp	.+788    	; 0x1dae <__fp_zero>
    1a9a:	0e f4       	brtc	.+2      	; 0x1a9e <__addsf3x+0x1c>
    1a9c:	e0 95       	com	r30
    1a9e:	0b 2e       	mov	r0, r27
    1aa0:	ba 2f       	mov	r27, r26
    1aa2:	a0 2d       	mov	r26, r0
    1aa4:	0b 01       	movw	r0, r22
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	90 01       	movw	r18, r0
    1aaa:	0c 01       	movw	r0, r24
    1aac:	ca 01       	movw	r24, r20
    1aae:	a0 01       	movw	r20, r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	ff 27       	eor	r31, r31
    1ab4:	59 1b       	sub	r21, r25
    1ab6:	99 f0       	breq	.+38     	; 0x1ade <__addsf3x+0x5c>
    1ab8:	59 3f       	cpi	r21, 0xF9	; 249
    1aba:	50 f4       	brcc	.+20     	; 0x1ad0 <__addsf3x+0x4e>
    1abc:	50 3e       	cpi	r21, 0xE0	; 224
    1abe:	68 f1       	brcs	.+90     	; 0x1b1a <__addsf3x+0x98>
    1ac0:	1a 16       	cp	r1, r26
    1ac2:	f0 40       	sbci	r31, 0x00	; 0
    1ac4:	a2 2f       	mov	r26, r18
    1ac6:	23 2f       	mov	r18, r19
    1ac8:	34 2f       	mov	r19, r20
    1aca:	44 27       	eor	r20, r20
    1acc:	58 5f       	subi	r21, 0xF8	; 248
    1ace:	f3 cf       	rjmp	.-26     	; 0x1ab6 <__addsf3x+0x34>
    1ad0:	46 95       	lsr	r20
    1ad2:	37 95       	ror	r19
    1ad4:	27 95       	ror	r18
    1ad6:	a7 95       	ror	r26
    1ad8:	f0 40       	sbci	r31, 0x00	; 0
    1ada:	53 95       	inc	r21
    1adc:	c9 f7       	brne	.-14     	; 0x1ad0 <__addsf3x+0x4e>
    1ade:	7e f4       	brtc	.+30     	; 0x1afe <__addsf3x+0x7c>
    1ae0:	1f 16       	cp	r1, r31
    1ae2:	ba 0b       	sbc	r27, r26
    1ae4:	62 0b       	sbc	r22, r18
    1ae6:	73 0b       	sbc	r23, r19
    1ae8:	84 0b       	sbc	r24, r20
    1aea:	ba f0       	brmi	.+46     	; 0x1b1a <__addsf3x+0x98>
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	a1 f0       	breq	.+40     	; 0x1b18 <__addsf3x+0x96>
    1af0:	ff 0f       	add	r31, r31
    1af2:	bb 1f       	adc	r27, r27
    1af4:	66 1f       	adc	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	c2 f7       	brpl	.-16     	; 0x1aec <__addsf3x+0x6a>
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <__addsf3x+0x98>
    1afe:	ba 0f       	add	r27, r26
    1b00:	62 1f       	adc	r22, r18
    1b02:	73 1f       	adc	r23, r19
    1b04:	84 1f       	adc	r24, r20
    1b06:	48 f4       	brcc	.+18     	; 0x1b1a <__addsf3x+0x98>
    1b08:	87 95       	ror	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b7 95       	ror	r27
    1b10:	f7 95       	ror	r31
    1b12:	9e 3f       	cpi	r25, 0xFE	; 254
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <__addsf3x+0x96>
    1b16:	b3 cf       	rjmp	.-154    	; 0x1a7e <__addsf3+0x1e>
    1b18:	93 95       	inc	r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__addsf3x+0x9e>
    1b1e:	99 27       	eor	r25, r25
    1b20:	ee 0f       	add	r30, r30
    1b22:	97 95       	ror	r25
    1b24:	87 95       	ror	r24
    1b26:	08 95       	ret

00001b28 <__cmpsf2>:
    1b28:	d4 d0       	rcall	.+424    	; 0x1cd2 <__fp_cmp>
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__cmpsf2+0x6>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	08 95       	ret

00001b30 <__divsf3>:
    1b30:	0c d0       	rcall	.+24     	; 0x1b4a <__divsf3x>
    1b32:	0a c1       	rjmp	.+532    	; 0x1d48 <__fp_round>
    1b34:	02 d1       	rcall	.+516    	; 0x1d3a <__fp_pscB>
    1b36:	40 f0       	brcs	.+16     	; 0x1b48 <__divsf3+0x18>
    1b38:	f9 d0       	rcall	.+498    	; 0x1d2c <__fp_pscA>
    1b3a:	30 f0       	brcs	.+12     	; 0x1b48 <__divsf3+0x18>
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <__divsf3+0x16>
    1b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <__divsf3+0x18>
    1b42:	eb c0       	rjmp	.+470    	; 0x1d1a <__fp_inf>
    1b44:	51 11       	cpse	r21, r1
    1b46:	34 c1       	rjmp	.+616    	; 0x1db0 <__fp_szero>
    1b48:	ee c0       	rjmp	.+476    	; 0x1d26 <__fp_nan>

00001b4a <__divsf3x>:
    1b4a:	0f d1       	rcall	.+542    	; 0x1d6a <__fp_split3>
    1b4c:	98 f3       	brcs	.-26     	; 0x1b34 <__divsf3+0x4>

00001b4e <__divsf3_pse>:
    1b4e:	99 23       	and	r25, r25
    1b50:	c9 f3       	breq	.-14     	; 0x1b44 <__divsf3+0x14>
    1b52:	55 23       	and	r21, r21
    1b54:	b1 f3       	breq	.-20     	; 0x1b42 <__divsf3+0x12>
    1b56:	95 1b       	sub	r25, r21
    1b58:	55 0b       	sbc	r21, r21
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	aa 27       	eor	r26, r26
    1b5e:	62 17       	cp	r22, r18
    1b60:	73 07       	cpc	r23, r19
    1b62:	84 07       	cpc	r24, r20
    1b64:	38 f0       	brcs	.+14     	; 0x1b74 <__divsf3_pse+0x26>
    1b66:	9f 5f       	subi	r25, 0xFF	; 255
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6a:	22 0f       	add	r18, r18
    1b6c:	33 1f       	adc	r19, r19
    1b6e:	44 1f       	adc	r20, r20
    1b70:	aa 1f       	adc	r26, r26
    1b72:	a9 f3       	breq	.-22     	; 0x1b5e <__divsf3_pse+0x10>
    1b74:	33 d0       	rcall	.+102    	; 0x1bdc <__divsf3_pse+0x8e>
    1b76:	0e 2e       	mov	r0, r30
    1b78:	3a f0       	brmi	.+14     	; 0x1b88 <__divsf3_pse+0x3a>
    1b7a:	e0 e8       	ldi	r30, 0x80	; 128
    1b7c:	30 d0       	rcall	.+96     	; 0x1bde <__divsf3_pse+0x90>
    1b7e:	91 50       	subi	r25, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	e6 95       	lsr	r30
    1b84:	00 1c       	adc	r0, r0
    1b86:	ca f7       	brpl	.-14     	; 0x1b7a <__divsf3_pse+0x2c>
    1b88:	29 d0       	rcall	.+82     	; 0x1bdc <__divsf3_pse+0x8e>
    1b8a:	fe 2f       	mov	r31, r30
    1b8c:	27 d0       	rcall	.+78     	; 0x1bdc <__divsf3_pse+0x8e>
    1b8e:	66 0f       	add	r22, r22
    1b90:	77 1f       	adc	r23, r23
    1b92:	88 1f       	adc	r24, r24
    1b94:	bb 1f       	adc	r27, r27
    1b96:	26 17       	cp	r18, r22
    1b98:	37 07       	cpc	r19, r23
    1b9a:	48 07       	cpc	r20, r24
    1b9c:	ab 07       	cpc	r26, r27
    1b9e:	b0 e8       	ldi	r27, 0x80	; 128
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__divsf3_pse+0x56>
    1ba2:	bb 0b       	sbc	r27, r27
    1ba4:	80 2d       	mov	r24, r0
    1ba6:	bf 01       	movw	r22, r30
    1ba8:	ff 27       	eor	r31, r31
    1baa:	93 58       	subi	r25, 0x83	; 131
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	2a f0       	brmi	.+10     	; 0x1bba <__divsf3_pse+0x6c>
    1bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	68 f0       	brcs	.+26     	; 0x1bd0 <__divsf3_pse+0x82>
    1bb6:	b1 c0       	rjmp	.+354    	; 0x1d1a <__fp_inf>
    1bb8:	fb c0       	rjmp	.+502    	; 0x1db0 <__fp_szero>
    1bba:	5f 3f       	cpi	r21, 0xFF	; 255
    1bbc:	ec f3       	brlt	.-6      	; 0x1bb8 <__divsf3_pse+0x6a>
    1bbe:	98 3e       	cpi	r25, 0xE8	; 232
    1bc0:	dc f3       	brlt	.-10     	; 0x1bb8 <__divsf3_pse+0x6a>
    1bc2:	86 95       	lsr	r24
    1bc4:	77 95       	ror	r23
    1bc6:	67 95       	ror	r22
    1bc8:	b7 95       	ror	r27
    1bca:	f7 95       	ror	r31
    1bcc:	9f 5f       	subi	r25, 0xFF	; 255
    1bce:	c9 f7       	brne	.-14     	; 0x1bc2 <__divsf3_pse+0x74>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	97 f9       	bld	r25, 7
    1bda:	08 95       	ret
    1bdc:	e1 e0       	ldi	r30, 0x01	; 1
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	bb 1f       	adc	r27, r27
    1be6:	62 17       	cp	r22, r18
    1be8:	73 07       	cpc	r23, r19
    1bea:	84 07       	cpc	r24, r20
    1bec:	ba 07       	cpc	r27, r26
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <__divsf3_pse+0xaa>
    1bf0:	62 1b       	sub	r22, r18
    1bf2:	73 0b       	sbc	r23, r19
    1bf4:	84 0b       	sbc	r24, r20
    1bf6:	ba 0b       	sbc	r27, r26
    1bf8:	ee 1f       	adc	r30, r30
    1bfa:	88 f7       	brcc	.-30     	; 0x1bde <__divsf3_pse+0x90>
    1bfc:	e0 95       	com	r30
    1bfe:	08 95       	ret

00001c00 <__fixunssfsi>:
    1c00:	bc d0       	rcall	.+376    	; 0x1d7a <__fp_splitA>
    1c02:	88 f0       	brcs	.+34     	; 0x1c26 <__fixunssfsi+0x26>
    1c04:	9f 57       	subi	r25, 0x7F	; 127
    1c06:	90 f0       	brcs	.+36     	; 0x1c2c <__fixunssfsi+0x2c>
    1c08:	b9 2f       	mov	r27, r25
    1c0a:	99 27       	eor	r25, r25
    1c0c:	b7 51       	subi	r27, 0x17	; 23
    1c0e:	a0 f0       	brcs	.+40     	; 0x1c38 <__fixunssfsi+0x38>
    1c10:	d1 f0       	breq	.+52     	; 0x1c46 <__fixunssfsi+0x46>
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	1a f0       	brmi	.+6      	; 0x1c22 <__fixunssfsi+0x22>
    1c1c:	ba 95       	dec	r27
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__fixunssfsi+0x12>
    1c20:	12 c0       	rjmp	.+36     	; 0x1c46 <__fixunssfsi+0x46>
    1c22:	b1 30       	cpi	r27, 0x01	; 1
    1c24:	81 f0       	breq	.+32     	; 0x1c46 <__fixunssfsi+0x46>
    1c26:	c3 d0       	rcall	.+390    	; 0x1dae <__fp_zero>
    1c28:	b1 e0       	ldi	r27, 0x01	; 1
    1c2a:	08 95       	ret
    1c2c:	c0 c0       	rjmp	.+384    	; 0x1dae <__fp_zero>
    1c2e:	67 2f       	mov	r22, r23
    1c30:	78 2f       	mov	r23, r24
    1c32:	88 27       	eor	r24, r24
    1c34:	b8 5f       	subi	r27, 0xF8	; 248
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <__fixunssfsi+0x46>
    1c38:	b9 3f       	cpi	r27, 0xF9	; 249
    1c3a:	cc f3       	brlt	.-14     	; 0x1c2e <__fixunssfsi+0x2e>
    1c3c:	86 95       	lsr	r24
    1c3e:	77 95       	ror	r23
    1c40:	67 95       	ror	r22
    1c42:	b3 95       	inc	r27
    1c44:	d9 f7       	brne	.-10     	; 0x1c3c <__fixunssfsi+0x3c>
    1c46:	3e f4       	brtc	.+14     	; 0x1c56 <__fixunssfsi+0x56>
    1c48:	90 95       	com	r25
    1c4a:	80 95       	com	r24
    1c4c:	70 95       	com	r23
    1c4e:	61 95       	neg	r22
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	8f 4f       	sbci	r24, 0xFF	; 255
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	08 95       	ret

00001c58 <__floatunsisf>:
    1c58:	e8 94       	clt
    1c5a:	09 c0       	rjmp	.+18     	; 0x1c6e <__floatsisf+0x12>

00001c5c <__floatsisf>:
    1c5c:	97 fb       	bst	r25, 7
    1c5e:	3e f4       	brtc	.+14     	; 0x1c6e <__floatsisf+0x12>
    1c60:	90 95       	com	r25
    1c62:	80 95       	com	r24
    1c64:	70 95       	com	r23
    1c66:	61 95       	neg	r22
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	99 23       	and	r25, r25
    1c70:	a9 f0       	breq	.+42     	; 0x1c9c <__floatsisf+0x40>
    1c72:	f9 2f       	mov	r31, r25
    1c74:	96 e9       	ldi	r25, 0x96	; 150
    1c76:	bb 27       	eor	r27, r27
    1c78:	93 95       	inc	r25
    1c7a:	f6 95       	lsr	r31
    1c7c:	87 95       	ror	r24
    1c7e:	77 95       	ror	r23
    1c80:	67 95       	ror	r22
    1c82:	b7 95       	ror	r27
    1c84:	f1 11       	cpse	r31, r1
    1c86:	f8 cf       	rjmp	.-16     	; 0x1c78 <__floatsisf+0x1c>
    1c88:	fa f4       	brpl	.+62     	; 0x1cc8 <__floatsisf+0x6c>
    1c8a:	bb 0f       	add	r27, r27
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__floatsisf+0x36>
    1c8e:	60 ff       	sbrs	r22, 0
    1c90:	1b c0       	rjmp	.+54     	; 0x1cc8 <__floatsisf+0x6c>
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	8f 4f       	sbci	r24, 0xFF	; 255
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	16 c0       	rjmp	.+44     	; 0x1cc8 <__floatsisf+0x6c>
    1c9c:	88 23       	and	r24, r24
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <__floatsisf+0x48>
    1ca0:	96 e9       	ldi	r25, 0x96	; 150
    1ca2:	11 c0       	rjmp	.+34     	; 0x1cc6 <__floatsisf+0x6a>
    1ca4:	77 23       	and	r23, r23
    1ca6:	21 f0       	breq	.+8      	; 0x1cb0 <__floatsisf+0x54>
    1ca8:	9e e8       	ldi	r25, 0x8E	; 142
    1caa:	87 2f       	mov	r24, r23
    1cac:	76 2f       	mov	r23, r22
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <__floatsisf+0x5e>
    1cb0:	66 23       	and	r22, r22
    1cb2:	71 f0       	breq	.+28     	; 0x1cd0 <__floatsisf+0x74>
    1cb4:	96 e8       	ldi	r25, 0x86	; 134
    1cb6:	86 2f       	mov	r24, r22
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	2a f0       	brmi	.+10     	; 0x1cc8 <__floatsisf+0x6c>
    1cbe:	9a 95       	dec	r25
    1cc0:	66 0f       	add	r22, r22
    1cc2:	77 1f       	adc	r23, r23
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	da f7       	brpl	.-10     	; 0x1cbe <__floatsisf+0x62>
    1cc8:	88 0f       	add	r24, r24
    1cca:	96 95       	lsr	r25
    1ccc:	87 95       	ror	r24
    1cce:	97 f9       	bld	r25, 7
    1cd0:	08 95       	ret

00001cd2 <__fp_cmp>:
    1cd2:	99 0f       	add	r25, r25
    1cd4:	00 08       	sbc	r0, r0
    1cd6:	55 0f       	add	r21, r21
    1cd8:	aa 0b       	sbc	r26, r26
    1cda:	e0 e8       	ldi	r30, 0x80	; 128
    1cdc:	fe ef       	ldi	r31, 0xFE	; 254
    1cde:	16 16       	cp	r1, r22
    1ce0:	17 06       	cpc	r1, r23
    1ce2:	e8 07       	cpc	r30, r24
    1ce4:	f9 07       	cpc	r31, r25
    1ce6:	c0 f0       	brcs	.+48     	; 0x1d18 <__fp_cmp+0x46>
    1ce8:	12 16       	cp	r1, r18
    1cea:	13 06       	cpc	r1, r19
    1cec:	e4 07       	cpc	r30, r20
    1cee:	f5 07       	cpc	r31, r21
    1cf0:	98 f0       	brcs	.+38     	; 0x1d18 <__fp_cmp+0x46>
    1cf2:	62 1b       	sub	r22, r18
    1cf4:	73 0b       	sbc	r23, r19
    1cf6:	84 0b       	sbc	r24, r20
    1cf8:	95 0b       	sbc	r25, r21
    1cfa:	39 f4       	brne	.+14     	; 0x1d0a <__fp_cmp+0x38>
    1cfc:	0a 26       	eor	r0, r26
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <__fp_cmp+0x46>
    1d00:	23 2b       	or	r18, r19
    1d02:	24 2b       	or	r18, r20
    1d04:	25 2b       	or	r18, r21
    1d06:	21 f4       	brne	.+8      	; 0x1d10 <__fp_cmp+0x3e>
    1d08:	08 95       	ret
    1d0a:	0a 26       	eor	r0, r26
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <__fp_cmp+0x3e>
    1d0e:	a1 40       	sbci	r26, 0x01	; 1
    1d10:	a6 95       	lsr	r26
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	81 1d       	adc	r24, r1
    1d16:	81 1d       	adc	r24, r1
    1d18:	08 95       	ret

00001d1a <__fp_inf>:
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	9f 67       	ori	r25, 0x7F	; 127
    1d1e:	80 e8       	ldi	r24, 0x80	; 128
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	08 95       	ret

00001d26 <__fp_nan>:
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    1d28:	80 ec       	ldi	r24, 0xC0	; 192
    1d2a:	08 95       	ret

00001d2c <__fp_pscA>:
    1d2c:	00 24       	eor	r0, r0
    1d2e:	0a 94       	dec	r0
    1d30:	16 16       	cp	r1, r22
    1d32:	17 06       	cpc	r1, r23
    1d34:	18 06       	cpc	r1, r24
    1d36:	09 06       	cpc	r0, r25
    1d38:	08 95       	ret

00001d3a <__fp_pscB>:
    1d3a:	00 24       	eor	r0, r0
    1d3c:	0a 94       	dec	r0
    1d3e:	12 16       	cp	r1, r18
    1d40:	13 06       	cpc	r1, r19
    1d42:	14 06       	cpc	r1, r20
    1d44:	05 06       	cpc	r0, r21
    1d46:	08 95       	ret

00001d48 <__fp_round>:
    1d48:	09 2e       	mov	r0, r25
    1d4a:	03 94       	inc	r0
    1d4c:	00 0c       	add	r0, r0
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <__fp_round+0xc>
    1d50:	88 23       	and	r24, r24
    1d52:	52 f0       	brmi	.+20     	; 0x1d68 <__fp_round+0x20>
    1d54:	bb 0f       	add	r27, r27
    1d56:	40 f4       	brcc	.+16     	; 0x1d68 <__fp_round+0x20>
    1d58:	bf 2b       	or	r27, r31
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <__fp_round+0x18>
    1d5c:	60 ff       	sbrs	r22, 0
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <__fp_round+0x20>
    1d60:	6f 5f       	subi	r22, 0xFF	; 255
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	8f 4f       	sbci	r24, 0xFF	; 255
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	08 95       	ret

00001d6a <__fp_split3>:
    1d6a:	57 fd       	sbrc	r21, 7
    1d6c:	90 58       	subi	r25, 0x80	; 128
    1d6e:	44 0f       	add	r20, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	59 f0       	breq	.+22     	; 0x1d8a <__fp_splitA+0x10>
    1d74:	5f 3f       	cpi	r21, 0xFF	; 255
    1d76:	71 f0       	breq	.+28     	; 0x1d94 <__fp_splitA+0x1a>
    1d78:	47 95       	ror	r20

00001d7a <__fp_splitA>:
    1d7a:	88 0f       	add	r24, r24
    1d7c:	97 fb       	bst	r25, 7
    1d7e:	99 1f       	adc	r25, r25
    1d80:	61 f0       	breq	.+24     	; 0x1d9a <__fp_splitA+0x20>
    1d82:	9f 3f       	cpi	r25, 0xFF	; 255
    1d84:	79 f0       	breq	.+30     	; 0x1da4 <__fp_splitA+0x2a>
    1d86:	87 95       	ror	r24
    1d88:	08 95       	ret
    1d8a:	12 16       	cp	r1, r18
    1d8c:	13 06       	cpc	r1, r19
    1d8e:	14 06       	cpc	r1, r20
    1d90:	55 1f       	adc	r21, r21
    1d92:	f2 cf       	rjmp	.-28     	; 0x1d78 <__fp_split3+0xe>
    1d94:	46 95       	lsr	r20
    1d96:	f1 df       	rcall	.-30     	; 0x1d7a <__fp_splitA>
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <__fp_splitA+0x30>
    1d9a:	16 16       	cp	r1, r22
    1d9c:	17 06       	cpc	r1, r23
    1d9e:	18 06       	cpc	r1, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	f1 cf       	rjmp	.-30     	; 0x1d86 <__fp_splitA+0xc>
    1da4:	86 95       	lsr	r24
    1da6:	71 05       	cpc	r23, r1
    1da8:	61 05       	cpc	r22, r1
    1daa:	08 94       	sec
    1dac:	08 95       	ret

00001dae <__fp_zero>:
    1dae:	e8 94       	clt

00001db0 <__fp_szero>:
    1db0:	bb 27       	eor	r27, r27
    1db2:	66 27       	eor	r22, r22
    1db4:	77 27       	eor	r23, r23
    1db6:	cb 01       	movw	r24, r22
    1db8:	97 f9       	bld	r25, 7
    1dba:	08 95       	ret

00001dbc <__gesf2>:
    1dbc:	8a df       	rcall	.-236    	; 0x1cd2 <__fp_cmp>
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <__gesf2+0x6>
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__mulsf3>:
    1dc4:	0b d0       	rcall	.+22     	; 0x1ddc <__mulsf3x>
    1dc6:	c0 cf       	rjmp	.-128    	; 0x1d48 <__fp_round>
    1dc8:	b1 df       	rcall	.-158    	; 0x1d2c <__fp_pscA>
    1dca:	28 f0       	brcs	.+10     	; 0x1dd6 <__mulsf3+0x12>
    1dcc:	b6 df       	rcall	.-148    	; 0x1d3a <__fp_pscB>
    1dce:	18 f0       	brcs	.+6      	; 0x1dd6 <__mulsf3+0x12>
    1dd0:	95 23       	and	r25, r21
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <__mulsf3+0x12>
    1dd4:	a2 cf       	rjmp	.-188    	; 0x1d1a <__fp_inf>
    1dd6:	a7 cf       	rjmp	.-178    	; 0x1d26 <__fp_nan>
    1dd8:	11 24       	eor	r1, r1
    1dda:	ea cf       	rjmp	.-44     	; 0x1db0 <__fp_szero>

00001ddc <__mulsf3x>:
    1ddc:	c6 df       	rcall	.-116    	; 0x1d6a <__fp_split3>
    1dde:	a0 f3       	brcs	.-24     	; 0x1dc8 <__mulsf3+0x4>

00001de0 <__mulsf3_pse>:
    1de0:	95 9f       	mul	r25, r21
    1de2:	d1 f3       	breq	.-12     	; 0x1dd8 <__mulsf3+0x14>
    1de4:	95 0f       	add	r25, r21
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	55 1f       	adc	r21, r21
    1dea:	62 9f       	mul	r22, r18
    1dec:	f0 01       	movw	r30, r0
    1dee:	72 9f       	mul	r23, r18
    1df0:	bb 27       	eor	r27, r27
    1df2:	f0 0d       	add	r31, r0
    1df4:	b1 1d       	adc	r27, r1
    1df6:	63 9f       	mul	r22, r19
    1df8:	aa 27       	eor	r26, r26
    1dfa:	f0 0d       	add	r31, r0
    1dfc:	b1 1d       	adc	r27, r1
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	64 9f       	mul	r22, r20
    1e02:	66 27       	eor	r22, r22
    1e04:	b0 0d       	add	r27, r0
    1e06:	a1 1d       	adc	r26, r1
    1e08:	66 1f       	adc	r22, r22
    1e0a:	82 9f       	mul	r24, r18
    1e0c:	22 27       	eor	r18, r18
    1e0e:	b0 0d       	add	r27, r0
    1e10:	a1 1d       	adc	r26, r1
    1e12:	62 1f       	adc	r22, r18
    1e14:	73 9f       	mul	r23, r19
    1e16:	b0 0d       	add	r27, r0
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	62 1f       	adc	r22, r18
    1e1c:	83 9f       	mul	r24, r19
    1e1e:	a0 0d       	add	r26, r0
    1e20:	61 1d       	adc	r22, r1
    1e22:	22 1f       	adc	r18, r18
    1e24:	74 9f       	mul	r23, r20
    1e26:	33 27       	eor	r19, r19
    1e28:	a0 0d       	add	r26, r0
    1e2a:	61 1d       	adc	r22, r1
    1e2c:	23 1f       	adc	r18, r19
    1e2e:	84 9f       	mul	r24, r20
    1e30:	60 0d       	add	r22, r0
    1e32:	21 1d       	adc	r18, r1
    1e34:	82 2f       	mov	r24, r18
    1e36:	76 2f       	mov	r23, r22
    1e38:	6a 2f       	mov	r22, r26
    1e3a:	11 24       	eor	r1, r1
    1e3c:	9f 57       	subi	r25, 0x7F	; 127
    1e3e:	50 40       	sbci	r21, 0x00	; 0
    1e40:	8a f0       	brmi	.+34     	; 0x1e64 <__mulsf3_pse+0x84>
    1e42:	e1 f0       	breq	.+56     	; 0x1e7c <__mulsf3_pse+0x9c>
    1e44:	88 23       	and	r24, r24
    1e46:	4a f0       	brmi	.+18     	; 0x1e5a <__mulsf3_pse+0x7a>
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	66 1f       	adc	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	91 50       	subi	r25, 0x01	; 1
    1e56:	50 40       	sbci	r21, 0x00	; 0
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <__mulsf3_pse+0x64>
    1e5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	70 f0       	brcs	.+28     	; 0x1e7c <__mulsf3_pse+0x9c>
    1e60:	5c cf       	rjmp	.-328    	; 0x1d1a <__fp_inf>
    1e62:	a6 cf       	rjmp	.-180    	; 0x1db0 <__fp_szero>
    1e64:	5f 3f       	cpi	r21, 0xFF	; 255
    1e66:	ec f3       	brlt	.-6      	; 0x1e62 <__mulsf3_pse+0x82>
    1e68:	98 3e       	cpi	r25, 0xE8	; 232
    1e6a:	dc f3       	brlt	.-10     	; 0x1e62 <__mulsf3_pse+0x82>
    1e6c:	86 95       	lsr	r24
    1e6e:	77 95       	ror	r23
    1e70:	67 95       	ror	r22
    1e72:	b7 95       	ror	r27
    1e74:	f7 95       	ror	r31
    1e76:	e7 95       	ror	r30
    1e78:	9f 5f       	subi	r25, 0xFF	; 255
    1e7a:	c1 f7       	brne	.-16     	; 0x1e6c <__mulsf3_pse+0x8c>
    1e7c:	fe 2b       	or	r31, r30
    1e7e:	88 0f       	add	r24, r24
    1e80:	91 1d       	adc	r25, r1
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	97 f9       	bld	r25, 7
    1e88:	08 95       	ret

00001e8a <calloc>:
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	68 9f       	mul	r22, r24
    1e94:	80 01       	movw	r16, r0
    1e96:	69 9f       	mul	r22, r25
    1e98:	10 0d       	add	r17, r0
    1e9a:	78 9f       	mul	r23, r24
    1e9c:	10 0d       	add	r17, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	c8 01       	movw	r24, r16
    1ea2:	0d d0       	rcall	.+26     	; 0x1ebe <malloc>
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <calloc+0x28>
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	a8 01       	movw	r20, r16
    1eb0:	0b d1       	rcall	.+534    	; 0x20c8 <memset>
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <malloc>:
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	10 f4       	brcc	.+4      	; 0x1ece <malloc+0x10>
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	a0 91 61 02 	lds	r26, 0x0261
    1ed2:	b0 91 62 02 	lds	r27, 0x0262
    1ed6:	ed 01       	movw	r28, r26
    1ed8:	e0 e0       	ldi	r30, 0x00	; 0
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	21 c0       	rjmp	.+66     	; 0x1f24 <malloc+0x66>
    1ee2:	88 81       	ld	r24, Y
    1ee4:	99 81       	ldd	r25, Y+1	; 0x01
    1ee6:	86 17       	cp	r24, r22
    1ee8:	97 07       	cpc	r25, r23
    1eea:	69 f4       	brne	.+26     	; 0x1f06 <malloc+0x48>
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	30 97       	sbiw	r30, 0x00	; 0
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <malloc+0x3c>
    1ef4:	93 83       	std	Z+3, r25	; 0x03
    1ef6:	82 83       	std	Z+2, r24	; 0x02
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <malloc+0x44>
    1efa:	90 93 62 02 	sts	0x0262, r25
    1efe:	80 93 61 02 	sts	0x0261, r24
    1f02:	fe 01       	movw	r30, r28
    1f04:	34 c0       	rjmp	.+104    	; 0x1f6e <malloc+0xb0>
    1f06:	68 17       	cp	r22, r24
    1f08:	79 07       	cpc	r23, r25
    1f0a:	38 f4       	brcc	.+14     	; 0x1f1a <malloc+0x5c>
    1f0c:	41 15       	cp	r20, r1
    1f0e:	51 05       	cpc	r21, r1
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <malloc+0x5a>
    1f12:	84 17       	cp	r24, r20
    1f14:	95 07       	cpc	r25, r21
    1f16:	08 f4       	brcc	.+2      	; 0x1f1a <malloc+0x5c>
    1f18:	ac 01       	movw	r20, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	9c 01       	movw	r18, r24
    1f22:	e9 01       	movw	r28, r18
    1f24:	20 97       	sbiw	r28, 0x00	; 0
    1f26:	e9 f6       	brne	.-70     	; 0x1ee2 <malloc+0x24>
    1f28:	41 15       	cp	r20, r1
    1f2a:	51 05       	cpc	r21, r1
    1f2c:	a9 f1       	breq	.+106    	; 0x1f98 <malloc+0xda>
    1f2e:	ca 01       	movw	r24, r20
    1f30:	86 1b       	sub	r24, r22
    1f32:	97 0b       	sbc	r25, r23
    1f34:	04 97       	sbiw	r24, 0x04	; 4
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <malloc+0x7c>
    1f38:	ba 01       	movw	r22, r20
    1f3a:	e0 e0       	ldi	r30, 0x00	; 0
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	2a c0       	rjmp	.+84     	; 0x1f94 <malloc+0xd6>
    1f40:	8d 91       	ld	r24, X+
    1f42:	9c 91       	ld	r25, X
    1f44:	11 97       	sbiw	r26, 0x01	; 1
    1f46:	84 17       	cp	r24, r20
    1f48:	95 07       	cpc	r25, r21
    1f4a:	f9 f4       	brne	.+62     	; 0x1f8a <malloc+0xcc>
    1f4c:	64 17       	cp	r22, r20
    1f4e:	75 07       	cpc	r23, r21
    1f50:	81 f4       	brne	.+32     	; 0x1f72 <malloc+0xb4>
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	8d 91       	ld	r24, X+
    1f56:	9c 91       	ld	r25, X
    1f58:	13 97       	sbiw	r26, 0x03	; 3
    1f5a:	30 97       	sbiw	r30, 0x00	; 0
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <malloc+0xa6>
    1f5e:	93 83       	std	Z+3, r25	; 0x03
    1f60:	82 83       	std	Z+2, r24	; 0x02
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <malloc+0xae>
    1f64:	90 93 62 02 	sts	0x0262, r25
    1f68:	80 93 61 02 	sts	0x0261, r24
    1f6c:	fd 01       	movw	r30, r26
    1f6e:	32 96       	adiw	r30, 0x02	; 2
    1f70:	4f c0       	rjmp	.+158    	; 0x2010 <malloc+0x152>
    1f72:	ca 01       	movw	r24, r20
    1f74:	86 1b       	sub	r24, r22
    1f76:	97 0b       	sbc	r25, r23
    1f78:	fd 01       	movw	r30, r26
    1f7a:	e8 0f       	add	r30, r24
    1f7c:	f9 1f       	adc	r31, r25
    1f7e:	61 93       	st	Z+, r22
    1f80:	71 93       	st	Z+, r23
    1f82:	02 97       	sbiw	r24, 0x02	; 2
    1f84:	8d 93       	st	X+, r24
    1f86:	9c 93       	st	X, r25
    1f88:	43 c0       	rjmp	.+134    	; 0x2010 <malloc+0x152>
    1f8a:	fd 01       	movw	r30, r26
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	9c 01       	movw	r18, r24
    1f92:	d9 01       	movw	r26, r18
    1f94:	10 97       	sbiw	r26, 0x00	; 0
    1f96:	a1 f6       	brne	.-88     	; 0x1f40 <malloc+0x82>
    1f98:	80 91 5f 02 	lds	r24, 0x025F
    1f9c:	90 91 60 02 	lds	r25, 0x0260
    1fa0:	89 2b       	or	r24, r25
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <malloc+0xf6>
    1fa4:	80 91 02 01 	lds	r24, 0x0102
    1fa8:	90 91 03 01 	lds	r25, 0x0103
    1fac:	90 93 60 02 	sts	0x0260, r25
    1fb0:	80 93 5f 02 	sts	0x025F, r24
    1fb4:	40 91 04 01 	lds	r20, 0x0104
    1fb8:	50 91 05 01 	lds	r21, 0x0105
    1fbc:	41 15       	cp	r20, r1
    1fbe:	51 05       	cpc	r21, r1
    1fc0:	41 f4       	brne	.+16     	; 0x1fd2 <malloc+0x114>
    1fc2:	4d b7       	in	r20, 0x3d	; 61
    1fc4:	5e b7       	in	r21, 0x3e	; 62
    1fc6:	80 91 00 01 	lds	r24, 0x0100
    1fca:	90 91 01 01 	lds	r25, 0x0101
    1fce:	48 1b       	sub	r20, r24
    1fd0:	59 0b       	sbc	r21, r25
    1fd2:	20 91 5f 02 	lds	r18, 0x025F
    1fd6:	30 91 60 02 	lds	r19, 0x0260
    1fda:	24 17       	cp	r18, r20
    1fdc:	35 07       	cpc	r19, r21
    1fde:	b0 f4       	brcc	.+44     	; 0x200c <malloc+0x14e>
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	82 1b       	sub	r24, r18
    1fe4:	93 0b       	sbc	r25, r19
    1fe6:	86 17       	cp	r24, r22
    1fe8:	97 07       	cpc	r25, r23
    1fea:	80 f0       	brcs	.+32     	; 0x200c <malloc+0x14e>
    1fec:	ab 01       	movw	r20, r22
    1fee:	4e 5f       	subi	r20, 0xFE	; 254
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	84 17       	cp	r24, r20
    1ff4:	95 07       	cpc	r25, r21
    1ff6:	50 f0       	brcs	.+20     	; 0x200c <malloc+0x14e>
    1ff8:	42 0f       	add	r20, r18
    1ffa:	53 1f       	adc	r21, r19
    1ffc:	50 93 60 02 	sts	0x0260, r21
    2000:	40 93 5f 02 	sts	0x025F, r20
    2004:	f9 01       	movw	r30, r18
    2006:	61 93       	st	Z+, r22
    2008:	71 93       	st	Z+, r23
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <malloc+0x152>
    200c:	e0 e0       	ldi	r30, 0x00	; 0
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	cf 01       	movw	r24, r30
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <free>:
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	09 f4       	brne	.+2      	; 0x2022 <free+0xa>
    2020:	50 c0       	rjmp	.+160    	; 0x20c2 <free+0xaa>
    2022:	ec 01       	movw	r28, r24
    2024:	22 97       	sbiw	r28, 0x02	; 2
    2026:	1b 82       	std	Y+3, r1	; 0x03
    2028:	1a 82       	std	Y+2, r1	; 0x02
    202a:	a0 91 61 02 	lds	r26, 0x0261
    202e:	b0 91 62 02 	lds	r27, 0x0262
    2032:	10 97       	sbiw	r26, 0x00	; 0
    2034:	09 f1       	breq	.+66     	; 0x2078 <free+0x60>
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	ac 17       	cp	r26, r28
    203c:	bd 07       	cpc	r27, r29
    203e:	08 f1       	brcs	.+66     	; 0x2082 <free+0x6a>
    2040:	bb 83       	std	Y+3, r27	; 0x03
    2042:	aa 83       	std	Y+2, r26	; 0x02
    2044:	fe 01       	movw	r30, r28
    2046:	21 91       	ld	r18, Z+
    2048:	31 91       	ld	r19, Z+
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	ae 17       	cp	r26, r30
    2050:	bf 07       	cpc	r27, r31
    2052:	79 f4       	brne	.+30     	; 0x2072 <free+0x5a>
    2054:	8d 91       	ld	r24, X+
    2056:	9c 91       	ld	r25, X
    2058:	11 97       	sbiw	r26, 0x01	; 1
    205a:	28 0f       	add	r18, r24
    205c:	39 1f       	adc	r19, r25
    205e:	2e 5f       	subi	r18, 0xFE	; 254
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	39 83       	std	Y+1, r19	; 0x01
    2064:	28 83       	st	Y, r18
    2066:	12 96       	adiw	r26, 0x02	; 2
    2068:	8d 91       	ld	r24, X+
    206a:	9c 91       	ld	r25, X
    206c:	13 97       	sbiw	r26, 0x03	; 3
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	41 15       	cp	r20, r1
    2074:	51 05       	cpc	r21, r1
    2076:	71 f4       	brne	.+28     	; 0x2094 <free+0x7c>
    2078:	d0 93 62 02 	sts	0x0262, r29
    207c:	c0 93 61 02 	sts	0x0261, r28
    2080:	20 c0       	rjmp	.+64     	; 0x20c2 <free+0xaa>
    2082:	12 96       	adiw	r26, 0x02	; 2
    2084:	8d 91       	ld	r24, X+
    2086:	9c 91       	ld	r25, X
    2088:	13 97       	sbiw	r26, 0x03	; 3
    208a:	ad 01       	movw	r20, r26
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	11 f0       	breq	.+4      	; 0x2094 <free+0x7c>
    2090:	dc 01       	movw	r26, r24
    2092:	d3 cf       	rjmp	.-90     	; 0x203a <free+0x22>
    2094:	fa 01       	movw	r30, r20
    2096:	d3 83       	std	Z+3, r29	; 0x03
    2098:	c2 83       	std	Z+2, r28	; 0x02
    209a:	21 91       	ld	r18, Z+
    209c:	31 91       	ld	r19, Z+
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	ce 17       	cp	r28, r30
    20a4:	df 07       	cpc	r29, r31
    20a6:	69 f4       	brne	.+26     	; 0x20c2 <free+0xaa>
    20a8:	88 81       	ld	r24, Y
    20aa:	99 81       	ldd	r25, Y+1	; 0x01
    20ac:	28 0f       	add	r18, r24
    20ae:	39 1f       	adc	r19, r25
    20b0:	2e 5f       	subi	r18, 0xFE	; 254
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	fa 01       	movw	r30, r20
    20b6:	31 83       	std	Z+1, r19	; 0x01
    20b8:	20 83       	st	Z, r18
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	93 83       	std	Z+3, r25	; 0x03
    20c0:	82 83       	std	Z+2, r24	; 0x02
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	08 95       	ret

000020c8 <memset>:
    20c8:	dc 01       	movw	r26, r24
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <memset+0x6>
    20cc:	6d 93       	st	X+, r22
    20ce:	41 50       	subi	r20, 0x01	; 1
    20d0:	50 40       	sbci	r21, 0x00	; 0
    20d2:	e0 f7       	brcc	.-8      	; 0x20cc <memset+0x4>
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
