
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001d54  00001de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080010a  0080010a  00001df2  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000944  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000248d  00000000  00000000  00002a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2e  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000294b  00000000  00000000  00005a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  00008394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b8e  00000000  00000000  00008924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000310  00000000  00000000  000094b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
static int combination_check()
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	97 c3       	rjmp	.+1838   	; 0x778 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e5       	ldi	r30, 0x54	; 84
      a8:	fd e1       	ldi	r31, 0x1D	; 29
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 35       	cpi	r26, 0x51	; 81
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
			PORTG = 0x00;
		}
		
		*/
		
		i = checkRearSensors(BACK_ALL);
     1ce:	8d ef       	ldi	r24, 0xFD	; 253
     1d0:	0e 94 28 0a 	call	0x1450	; 0x1450 <checkRearSensors>
     1d4:	99 27       	eor	r25, r25
     1d6:	87 fd       	sbrc	r24, 7
     1d8:	90 95       	com	r25
     1da:	9a 8b       	std	Y+18, r25	; 0x12
     1dc:	89 8b       	std	Y+17, r24	; 0x11
		b = checkFrontSensors(FRONT_ALL);
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <checkFrontSensors>
     1e4:	99 27       	eor	r25, r25
     1e6:	87 fd       	sbrc	r24, 7
     1e8:	90 95       	com	r25
     1ea:	98 8b       	std	Y+16, r25	; 0x10
     1ec:	8f 87       	std	Y+15, r24	; 0x0f
		if(i == DETECTED || b == DETECTED)
     1ee:	89 89       	ldd	r24, Y+17	; 0x11
     1f0:	9a 89       	ldd	r25, Y+18	; 0x12
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	21 f0       	breq	.+8      	; 0x1fe <main+0x12c>
     1f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1f8:	98 89       	ldd	r25, Y+16	; 0x10
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	29 f4       	brne	.+10     	; 0x208 <main+0x136>
		{
			PORTG = 0xff;
     1fe:	e4 e3       	ldi	r30, 0x34	; 52
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	80 83       	st	Z, r24
     206:	e3 cf       	rjmp	.-58     	; 0x1ce <main+0xfc>
		}
		else
		{
			PORTG = 0x00;
     208:	e4 e3       	ldi	r30, 0x34	; 52
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	10 82       	st	Z, r1
     20e:	df cf       	rjmp	.-66     	; 0x1ce <main+0xfc>

00000210 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	00 d0       	rcall	.+0      	; 0x21a <servo_init+0xa>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     222:	ad e2       	ldi	r26, 0x2D	; 45
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	ed e2       	ldi	r30, 0x2D	; 45
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	88 63       	ori	r24, 0x38	; 56
     22e:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     230:	a4 e2       	ldi	r26, 0x24	; 36
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	e4 e2       	ldi	r30, 0x24	; 36
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     23e:	e4 e9       	ldi	r30, 0x94	; 148
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	11 82       	std	Z+1, r1	; 0x01
     244:	10 82       	st	Z, r1
	TCNT0 = 0;
     246:	e6 e4       	ldi	r30, 0x46	; 70
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	10 82       	st	Z, r1

	OCR3A = 0;
     24c:	e8 e9       	ldi	r30, 0x98	; 152
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	11 82       	std	Z+1, r1	; 0x01
     252:	10 82       	st	Z, r1
	OCR3B = 0;
     254:	ea e9       	ldi	r30, 0x9A	; 154
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	11 82       	std	Z+1, r1	; 0x01
     25a:	10 82       	st	Z, r1
	OCR3C = 0;
     25c:	ec e9       	ldi	r30, 0x9C	; 156
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	11 82       	std	Z+1, r1	; 0x01
     262:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     264:	e0 e9       	ldi	r30, 0x90	; 144
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	8e eb       	ldi	r24, 0xBE	; 190
     26a:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     26c:	e1 e9       	ldi	r30, 0x91	; 145
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	8a e1       	ldi	r24, 0x1A	; 26
     272:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     274:	e4 e4       	ldi	r30, 0x44	; 68
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	8b e6       	ldi	r24, 0x6B	; 107
     27a:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     27c:	06 e9       	ldi	r16, 0x96	; 150
     27e:	10 e0       	ldi	r17, 0x00	; 0
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	9a 81       	ldd	r25, Y+2	; 0x02
     284:	cc 01       	movw	r24, r24
     286:	a0 e0       	ldi	r26, 0x00	; 0
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	51 e4       	ldi	r21, 0x41	; 65
     2a2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	9c 01       	movw	r18, r24
     2ac:	ad 01       	movw	r20, r26
     2ae:	60 e8       	ldi	r22, 0x80	; 128
     2b0:	76 e9       	ldi	r23, 0x96	; 150
     2b2:	88 e1       	ldi	r24, 0x18	; 24
     2b4:	9b e4       	ldi	r25, 0x4B	; 75
     2b6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__divsf3>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	bc 01       	movw	r22, r24
     2c0:	cd 01       	movw	r24, r26
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	5f e3       	ldi	r21, 0x3F	; 63
     2ca:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     2ce:	dc 01       	movw	r26, r24
     2d0:	cb 01       	movw	r24, r22
     2d2:	bc 01       	movw	r22, r24
     2d4:	cd 01       	movw	r24, r26
     2d6:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	f8 01       	movw	r30, r16
     2e0:	91 83       	std	Z+1, r25	; 0x01
     2e2:	80 83       	st	Z, r24
}
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	08 95       	ret

000002f2 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	00 d0       	rcall	.+0      	; 0x300 <servo_set_duty_cycle_umbrella+0xe>
     300:	00 d0       	rcall	.+0      	; 0x302 <servo_set_duty_cycle_umbrella+0x10>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	9c 83       	std	Y+4, r25	; 0x04
     308:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     30a:	e6 e9       	ldi	r30, 0x96	; 150
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	91 81       	ldd	r25, Z+1	; 0x01
     312:	cc 01       	movw	r24, r24
     314:	a0 e0       	ldi	r26, 0x00	; 0
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	bc 01       	movw	r22, r24
     31a:	cd 01       	movw	r24, r26
     31c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	4f e7       	ldi	r20, 0x7F	; 127
     32e:	53 e4       	ldi	r21, 0x43	; 67
     330:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__divsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	7c 01       	movw	r14, r24
     33a:	8d 01       	movw	r16, r26
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	aa 27       	eor	r26, r26
     342:	97 fd       	sbrc	r25, 7
     344:	a0 95       	com	r26
     346:	ba 2f       	mov	r27, r26
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
     354:	c8 01       	movw	r24, r16
     356:	b7 01       	movw	r22, r14
     358:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	bc 01       	movw	r22, r24
     362:	cd 01       	movw	r24, r26
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	5f e3       	ldi	r21, 0x3F	; 63
     36c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     384:	e9 e9       	ldi	r30, 0x99	; 153
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	89 2f       	mov	r24, r25
     38e:	99 27       	eor	r25, r25
     390:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     392:	e8 e9       	ldi	r30, 0x98	; 152
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	80 83       	st	Z, r24
}
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	08 95       	ret

000003b0 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <servo_set_duty_cycle_door+0xe>
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <servo_set_duty_cycle_door+0x10>
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	9c 83       	std	Y+4, r25	; 0x04
     3c6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     3c8:	e6 e9       	ldi	r30, 0x96	; 150
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	cc 01       	movw	r24, r24
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	bc 01       	movw	r22, r24
     3d8:	cd 01       	movw	r24, r26
     3da:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	4f e7       	ldi	r20, 0x7F	; 127
     3ec:	53 e4       	ldi	r21, 0x43	; 67
     3ee:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__divsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	7c 01       	movw	r14, r24
     3f8:	8d 01       	movw	r16, r26
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	aa 27       	eor	r26, r26
     400:	97 fd       	sbrc	r25, 7
     402:	a0 95       	com	r26
     404:	ba 2f       	mov	r27, r26
     406:	bc 01       	movw	r22, r24
     408:	cd 01       	movw	r24, r26
     40a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
     40e:	9b 01       	movw	r18, r22
     410:	ac 01       	movw	r20, r24
     412:	c8 01       	movw	r24, r16
     414:	b7 01       	movw	r22, r14
     416:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	bc 01       	movw	r22, r24
     420:	cd 01       	movw	r24, r26
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	5f e3       	ldi	r21, 0x3F	; 63
     42a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	9a 83       	std	Y+2, r25	; 0x02
     440:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     442:	eb e9       	ldi	r30, 0x9B	; 155
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	89 2f       	mov	r24, r25
     44c:	99 27       	eor	r25, r25
     44e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     450:	ea e9       	ldi	r30, 0x9A	; 154
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	80 83       	st	Z, r24
}
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	08 95       	ret

0000046e <servo_set_umbrella_position>:
	OCR3CL = temp & 0xFF;
}
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0f 92       	push	r0
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	99 27       	eor	r25, r25
     47e:	87 fd       	sbrc	r24, 7
     480:	90 95       	com	r25
     482:	a9 2f       	mov	r26, r25
     484:	b9 2f       	mov	r27, r25
     486:	bc 01       	movw	r22, r24
     488:	cd 01       	movw	r24, r26
     48a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	bc 01       	movw	r22, r24
     494:	cd 01       	movw	r24, r26
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	44 eb       	ldi	r20, 0xB4	; 180
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__divsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	26 e6       	ldi	r18, 0x66	; 102
     4ac:	36 e6       	ldi	r19, 0x66	; 102
     4ae:	46 e3       	ldi	r20, 0x36	; 54
     4b0:	51 ec       	ldi	r21, 0xC1	; 193
     4b2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4c e6       	ldi	r20, 0x6C	; 108
     4c4:	53 e4       	ldi	r21, 0x43	; 67
     4c6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	9c 01       	movw	r18, r24
     4d0:	ad 01       	movw	r20, r26
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	8f e7       	ldi	r24, 0x7F	; 127
     4d8:	93 e4       	ldi	r25, 0x43	; 67
     4da:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fixsfsi>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	01 df       	rcall	.-510    	; 0x2f2 <servo_set_duty_cycle_umbrella>
}
     4f0:	0f 90       	pop	r0
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	08 95       	ret

000004f8 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     4f8:	df 93       	push	r29
     4fa:	cf 93       	push	r28
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	99 27       	eor	r25, r25
     508:	87 fd       	sbrc	r24, 7
     50a:	90 95       	com	r25
     50c:	a9 2f       	mov	r26, r25
     50e:	b9 2f       	mov	r27, r25
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	bc 01       	movw	r22, r24
     51e:	cd 01       	movw	r24, r26
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	44 eb       	ldi	r20, 0xB4	; 180
     526:	52 e4       	ldi	r21, 0x42	; 66
     528:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__divsf3>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	26 e6       	ldi	r18, 0x66	; 102
     536:	36 e6       	ldi	r19, 0x66	; 102
     538:	46 e3       	ldi	r20, 0x36	; 54
     53a:	51 ec       	ldi	r21, 0xC1	; 193
     53c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4c e6       	ldi	r20, 0x6C	; 108
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__addsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9c 01       	movw	r18, r24
     55a:	ad 01       	movw	r20, r26
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	8f e7       	ldi	r24, 0x7F	; 127
     562:	93 e4       	ldi	r25, 0x43	; 67
     564:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__subsf3>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	bc 01       	movw	r22, r24
     56e:	cd 01       	movw	r24, r26
     570:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fixsfsi>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	1b df       	rcall	.-458    	; 0x3b0 <servo_set_duty_cycle_door>
}
     57a:	0f 90       	pop	r0
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	08 95       	ret

00000582 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	6c 97       	sbiw	r28, 0x1c	; 28
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     596:	85 e5       	ldi	r24, 0x55	; 85
     598:	6a df       	rcall	.-300    	; 0x46e <servo_set_umbrella_position>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	aa e7       	ldi	r26, 0x7A	; 122
     5a0:	b4 e4       	ldi	r27, 0x44	; 68
     5a2:	89 8f       	std	Y+25, r24	; 0x19
     5a4:	9a 8f       	std	Y+26, r25	; 0x1a
     5a6:	ab 8f       	std	Y+27, r26	; 0x1b
     5a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5aa:	69 8d       	ldd	r22, Y+25	; 0x19
     5ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e4       	ldi	r19, 0x40	; 64
     5b6:	4c e1       	ldi	r20, 0x1C	; 28
     5b8:	55 e4       	ldi	r21, 0x45	; 69
     5ba:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	8d 8b       	std	Y+21, r24	; 0x15
     5c4:	9e 8b       	std	Y+22, r25	; 0x16
     5c6:	af 8b       	std	Y+23, r26	; 0x17
     5c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     5ca:	6d 89       	ldd	r22, Y+21	; 0x15
     5cc:	7e 89       	ldd	r23, Y+22	; 0x16
     5ce:	8f 89       	ldd	r24, Y+23	; 0x17
     5d0:	98 8d       	ldd	r25, Y+24	; 0x18
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	5f e3       	ldi	r21, 0x3F	; 63
     5da:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__cmpsf2>
     5de:	88 23       	and	r24, r24
     5e0:	2c f4       	brge	.+10     	; 0x5ec <actuators_umbrella+0x6a>
		__ticks = 1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9c 8b       	std	Y+20, r25	; 0x14
     5e8:	8b 8b       	std	Y+19, r24	; 0x13
     5ea:	3f c0       	rjmp	.+126    	; 0x66a <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     5ec:	6d 89       	ldd	r22, Y+21	; 0x15
     5ee:	7e 89       	ldd	r23, Y+22	; 0x16
     5f0:	8f 89       	ldd	r24, Y+23	; 0x17
     5f2:	98 8d       	ldd	r25, Y+24	; 0x18
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	3f ef       	ldi	r19, 0xFF	; 255
     5f8:	4f e7       	ldi	r20, 0x7F	; 127
     5fa:	57 e4       	ldi	r21, 0x47	; 71
     5fc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__gesf2>
     600:	18 16       	cp	r1, r24
     602:	4c f5       	brge	.+82     	; 0x656 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     604:	69 8d       	ldd	r22, Y+25	; 0x19
     606:	7a 8d       	ldd	r23, Y+26	; 0x1a
     608:	8b 8d       	ldd	r24, Y+27	; 0x1b
     60a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e2       	ldi	r20, 0x20	; 32
     612:	51 e4       	ldi	r21, 0x41	; 65
     614:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9c 8b       	std	Y+20, r25	; 0x14
     62a:	8b 8b       	std	Y+19, r24	; 0x13
     62c:	0f c0       	rjmp	.+30     	; 0x64c <actuators_umbrella+0xca>
     62e:	8a ef       	ldi	r24, 0xFA	; 250
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9a 8b       	std	Y+18, r25	; 0x12
     634:	89 8b       	std	Y+17, r24	; 0x11
     636:	89 89       	ldd	r24, Y+17	; 0x11
     638:	9a 89       	ldd	r25, Y+18	; 0x12
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <actuators_umbrella+0xb8>
     63e:	9a 8b       	std	Y+18, r25	; 0x12
     640:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	8b 89       	ldd	r24, Y+19	; 0x13
     644:	9c 89       	ldd	r25, Y+20	; 0x14
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	9c 8b       	std	Y+20, r25	; 0x14
     64a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64c:	8b 89       	ldd	r24, Y+19	; 0x13
     64e:	9c 89       	ldd	r25, Y+20	; 0x14
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	69 f7       	brne	.-38     	; 0x62e <actuators_umbrella+0xac>
     654:	14 c0       	rjmp	.+40     	; 0x67e <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     656:	6d 89       	ldd	r22, Y+21	; 0x15
     658:	7e 89       	ldd	r23, Y+22	; 0x16
     65a:	8f 89       	ldd	r24, Y+23	; 0x17
     65c:	98 8d       	ldd	r25, Y+24	; 0x18
     65e:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	9c 8b       	std	Y+20, r25	; 0x14
     668:	8b 8b       	std	Y+19, r24	; 0x13
     66a:	8b 89       	ldd	r24, Y+19	; 0x13
     66c:	9c 89       	ldd	r25, Y+20	; 0x14
     66e:	98 8b       	std	Y+16, r25	; 0x10
     670:	8f 87       	std	Y+15, r24	; 0x0f
     672:	8f 85       	ldd	r24, Y+15	; 0x0f
     674:	98 89       	ldd	r25, Y+16	; 0x10
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <actuators_umbrella+0xf4>
     67a:	98 8b       	std	Y+16, r25	; 0x10
     67c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	3b df       	rcall	.-394    	; 0x4f8 <servo_set_door_position>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	aa e7       	ldi	r26, 0x7A	; 122
     688:	b4 e4       	ldi	r27, 0x44	; 68
     68a:	8b 87       	std	Y+11, r24	; 0x0b
     68c:	9c 87       	std	Y+12, r25	; 0x0c
     68e:	ad 87       	std	Y+13, r26	; 0x0d
     690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     692:	6b 85       	ldd	r22, Y+11	; 0x0b
     694:	7c 85       	ldd	r23, Y+12	; 0x0c
     696:	8d 85       	ldd	r24, Y+13	; 0x0d
     698:	9e 85       	ldd	r25, Y+14	; 0x0e
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e4       	ldi	r19, 0x40	; 64
     69e:	4c e1       	ldi	r20, 0x1C	; 28
     6a0:	55 e4       	ldi	r21, 0x45	; 69
     6a2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	8f 83       	std	Y+7, r24	; 0x07
     6ac:	98 87       	std	Y+8, r25	; 0x08
     6ae:	a9 87       	std	Y+9, r26	; 0x09
     6b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6b2:	6f 81       	ldd	r22, Y+7	; 0x07
     6b4:	78 85       	ldd	r23, Y+8	; 0x08
     6b6:	89 85       	ldd	r24, Y+9	; 0x09
     6b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__cmpsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <actuators_umbrella+0x152>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e 83       	std	Y+6, r25	; 0x06
     6d0:	8d 83       	std	Y+5, r24	; 0x05
     6d2:	3f c0       	rjmp	.+126    	; 0x752 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     6d4:	6f 81       	ldd	r22, Y+7	; 0x07
     6d6:	78 85       	ldd	r23, Y+8	; 0x08
     6d8:	89 85       	ldd	r24, Y+9	; 0x09
     6da:	9a 85       	ldd	r25, Y+10	; 0x0a
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	57 e4       	ldi	r21, 0x47	; 71
     6e4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__gesf2>
     6e8:	18 16       	cp	r1, r24
     6ea:	4c f5       	brge	.+82     	; 0x73e <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     6ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     6f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__mulsf3>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	bc 01       	movw	r22, r24
     706:	cd 01       	movw	r24, r26
     708:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	9e 83       	std	Y+6, r25	; 0x06
     712:	8d 83       	std	Y+5, r24	; 0x05
     714:	0f c0       	rjmp	.+30     	; 0x734 <actuators_umbrella+0x1b2>
     716:	8a ef       	ldi	r24, 0xFA	; 250
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9c 83       	std	Y+4, r25	; 0x04
     71c:	8b 83       	std	Y+3, r24	; 0x03
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <actuators_umbrella+0x1a0>
     726:	9c 83       	std	Y+4, r25	; 0x04
     728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     72a:	8d 81       	ldd	r24, Y+5	; 0x05
     72c:	9e 81       	ldd	r25, Y+6	; 0x06
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	9e 83       	std	Y+6, r25	; 0x06
     732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	69 f7       	brne	.-38     	; 0x716 <actuators_umbrella+0x194>
     73c:	14 c0       	rjmp	.+40     	; 0x766 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73e:	6f 81       	ldd	r22, Y+7	; 0x07
     740:	78 85       	ldd	r23, Y+8	; 0x08
     742:	89 85       	ldd	r24, Y+9	; 0x09
     744:	9a 85       	ldd	r25, Y+10	; 0x0a
     746:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fixunssfsi>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	9e 83       	std	Y+6, r25	; 0x06
     750:	8d 83       	std	Y+5, r24	; 0x05
     752:	8d 81       	ldd	r24, Y+5	; 0x05
     754:	9e 81       	ldd	r25, Y+6	; 0x06
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <actuators_umbrella+0x1dc>
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     766:	6c 96       	adiw	r28, 0x1c	; 28
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <__vector_18>:
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	00 90 5b 00 	lds	r0, 0x005B
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <__vector_18+0x2a>
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <__vector_18+0x2c>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	ed ee       	ldi	r30, 0xED	; 237
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	8c 83       	std	Y+4, r24	; 0x04
     7b0:	1b 82       	std	Y+3, r1	; 0x03
     7b2:	9c c0       	rjmp	.+312    	; 0x8ec <__vector_18+0x174>
     7b4:	ed ee       	ldi	r30, 0xED	; 237
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	82 95       	swap	r24
     7bc:	80 7f       	andi	r24, 0xF0	; 240
     7be:	80 83       	st	Z, r24
     7c0:	ee ee       	ldi	r30, 0xEE	; 238
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	82 95       	swap	r24
     7c8:	86 95       	lsr	r24
     7ca:	87 70       	andi	r24, 0x07	; 7
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	81 70       	andi	r24, 0x01	; 1
     7d2:	90 70       	andi	r25, 0x00	; 0
     7d4:	88 23       	and	r24, r24
     7d6:	09 f4       	brne	.+2      	; 0x7da <__vector_18+0x62>
     7d8:	6e c0       	rjmp	.+220    	; 0x8b6 <__vector_18+0x13e>
     7da:	ef ee       	ldi	r30, 0xEF	; 239
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	80 83       	st	Z, r24
     7e2:	ae ee       	ldi	r26, 0xEE	; 238
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	ee ee       	ldi	r30, 0xEE	; 238
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8f 7d       	andi	r24, 0xDF	; 223
     7ee:	8c 93       	st	X, r24
     7f0:	e2 ef       	ldi	r30, 0xF2	; 242
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	82 95       	swap	r24
     7f8:	86 95       	lsr	r24
     7fa:	87 70       	andi	r24, 0x07	; 7
     7fc:	28 2f       	mov	r18, r24
     7fe:	e3 ef       	ldi	r30, 0xF3	; 243
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	82 2b       	or	r24, r18
     816:	8a 83       	std	Y+2, r24	; 0x02
     818:	19 82       	std	Y+1, r1	; 0x01
     81a:	2a c0       	rjmp	.+84     	; 0x870 <__vector_18+0xf8>
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	82 1b       	sub	r24, r18
     828:	93 0b       	sbc	r25, r19
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	90 95       	com	r25
     830:	81 95       	neg	r24
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	fc 01       	movw	r30, r24
     836:	e6 5f       	subi	r30, 0xF6	; 246
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	40 81       	ld	r20, Z
     83c:	51 81       	ldd	r21, Z+1	; 0x01
     83e:	8a 81       	ldd	r24, Y+2	; 0x02
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	fc 01       	movw	r30, r24
     848:	e2 5e       	subi	r30, 0xE2	; 226
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	80 81       	ld	r24, Z
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	82 0f       	add	r24, r18
     85a:	93 1f       	adc	r25, r19
     85c:	da 01       	movw	r26, r20
     85e:	a8 0f       	add	r26, r24
     860:	b9 1f       	adc	r27, r25
     862:	ea ef       	ldi	r30, 0xFA	; 250
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	8c 93       	st	X, r24
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	88 30       	cpi	r24, 0x08	; 8
     874:	98 f2       	brcs	.-90     	; 0x81c <__vector_18+0xa4>
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	fc 01       	movw	r30, r24
     880:	e2 5e       	subi	r30, 0xE2	; 226
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	80 81       	ld	r24, Z
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 83       	st	Z, r24
     88a:	80 81       	ld	r24, Z
     88c:	85 30       	cpi	r24, 0x05	; 5
     88e:	41 f4       	brne	.+16     	; 0x8a0 <__vector_18+0x128>
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	e2 5e       	subi	r30, 0xE2	; 226
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	10 82       	st	Z, r1
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	fc 01       	movw	r30, r24
     8aa:	ee 5c       	subi	r30, 0xCE	; 206
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 83       	st	Z, r24
     8b4:	1f c0       	rjmp	.+62     	; 0x8f4 <__vector_18+0x17c>
     8b6:	ee ee       	ldi	r30, 0xEE	; 238
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	82 95       	swap	r24
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	83 70       	andi	r24, 0x03	; 3
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	81 70       	andi	r24, 0x01	; 1
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	88 23       	and	r24, r24
     8ce:	59 f0       	breq	.+22     	; 0x8e6 <__vector_18+0x16e>
     8d0:	ef ee       	ldi	r30, 0xEF	; 239
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	10 82       	st	Z, r1
     8d6:	ae ee       	ldi	r26, 0xEE	; 238
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	ee ee       	ldi	r30, 0xEE	; 238
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	8f 7b       	andi	r24, 0xBF	; 191
     8e2:	8c 93       	st	X, r24
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__vector_18+0x17c>
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	8b 83       	std	Y+3, r24	; 0x03
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	8f 30       	cpi	r24, 0x0F	; 15
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <__vector_18+0x17c>
     8f2:	60 cf       	rjmp	.-320    	; 0x7b4 <__vector_18+0x3c>
     8f4:	ed ee       	ldi	r30, 0xED	; 237
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	8c 81       	ldd	r24, Y+4	; 0x04
     8fa:	80 83       	st	Z, r24
     8fc:	aa ed       	ldi	r26, 0xDA	; 218
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	ea ed       	ldi	r30, 0xDA	; 218
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8c 93       	st	X, r24
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	5f 91       	pop	r21
     922:	4f 91       	pop	r20
     924:	3f 91       	pop	r19
     926:	2f 91       	pop	r18
     928:	0f 90       	pop	r0
     92a:	00 92 5b 00 	sts	0x005B, r0
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <CAN_InitModule>:
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	00 d0       	rcall	.+0      	; 0x93e <CAN_InitModule+0x6>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	e8 ed       	ldi	r30, 0xD8	; 216
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
     94a:	1a 82       	std	Y+2, r1	; 0x02
     94c:	32 c0       	rjmp	.+100    	; 0x9b2 <CAN_InitModule+0x7a>
     94e:	ed ee       	ldi	r30, 0xED	; 237
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	82 95       	swap	r24
     956:	80 7f       	andi	r24, 0xF0	; 240
     958:	80 83       	st	Z, r24
     95a:	ee ee       	ldi	r30, 0xEE	; 238
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	10 82       	st	Z, r1
     960:	ef ee       	ldi	r30, 0xEF	; 239
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	10 82       	st	Z, r1
     966:	e3 ef       	ldi	r30, 0xF3	; 243
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	10 82       	st	Z, r1
     96c:	e2 ef       	ldi	r30, 0xF2	; 242
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	10 82       	st	Z, r1
     972:	e1 ef       	ldi	r30, 0xF1	; 241
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	10 82       	st	Z, r1
     978:	e0 ef       	ldi	r30, 0xF0	; 240
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	10 82       	st	Z, r1
     97e:	e7 ef       	ldi	r30, 0xF7	; 247
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	10 82       	st	Z, r1
     984:	e6 ef       	ldi	r30, 0xF6	; 246
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	10 82       	st	Z, r1
     98a:	e5 ef       	ldi	r30, 0xF5	; 245
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	10 82       	st	Z, r1
     990:	e4 ef       	ldi	r30, 0xF4	; 244
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	10 82       	st	Z, r1
     996:	19 82       	std	Y+1, r1	; 0x01
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <CAN_InitModule+0x6e>
     99a:	ea ef       	ldi	r30, 0xFA	; 250
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	10 82       	st	Z, r1
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 30       	cpi	r24, 0x08	; 8
     9aa:	b8 f3       	brcs	.-18     	; 0x99a <CAN_InitModule+0x62>
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	8a 83       	std	Y+2, r24	; 0x02
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	8f 30       	cpi	r24, 0x0F	; 15
     9b6:	58 f2       	brcs	.-106    	; 0x94e <CAN_InitModule+0x16>
     9b8:	e8 ed       	ldi	r30, 0xD8	; 216
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	80 83       	st	Z, r24
     9c0:	e2 ee       	ldi	r30, 0xE2	; 226
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 83       	st	Z, r24
     9c8:	e3 ee       	ldi	r30, 0xE3	; 227
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	88 e0       	ldi	r24, 0x08	; 8
     9ce:	80 83       	st	Z, r24
     9d0:	e4 ee       	ldi	r30, 0xE4	; 228
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	8e e5       	ldi	r24, 0x5E	; 94
     9d6:	80 83       	st	Z, r24
     9d8:	e5 ee       	ldi	r30, 0xE5	; 229
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	10 82       	st	Z, r1
     9de:	eb ed       	ldi	r30, 0xDB	; 219
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 eb       	ldi	r24, 0xB0	; 176
     9e4:	80 83       	st	Z, r24
     9e6:	ef ed       	ldi	r30, 0xDF	; 223
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	8f e7       	ldi	r24, 0x7F	; 127
     9ec:	80 83       	st	Z, r24
     9ee:	ee ed       	ldi	r30, 0xDE	; 222
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	80 83       	st	Z, r24
     9f6:	78 94       	sei
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <CAN_InitRxMob>:
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	00 d0       	rcall	.+0      	; 0xa08 <CAN_InitRxMob+0x6>
     a08:	00 d0       	rcall	.+0      	; 0xa0a <CAN_InitRxMob+0x8>
     a0a:	0f 92       	push	r0
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	ed ee       	ldi	r30, 0xED	; 237
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	e9 ed       	ldi	r30, 0xD9	; 217
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	82 95       	swap	r24
     a24:	8f 70       	andi	r24, 0x0F	; 15
     a26:	88 2f       	mov	r24, r24
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	81 70       	andi	r24, 0x01	; 1
     a2c:	90 70       	andi	r25, 0x00	; 0
     a2e:	88 23       	and	r24, r24
     a30:	a9 f7       	brne	.-22     	; 0xa1c <CAN_InitRxMob+0x1a>
     a32:	e9 ed       	ldi	r30, 0xD9	; 217
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	86 95       	lsr	r24
     a3a:	86 95       	lsr	r24
     a3c:	86 95       	lsr	r24
     a3e:	88 2f       	mov	r24, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	81 70       	andi	r24, 0x01	; 1
     a44:	90 70       	andi	r25, 0x00	; 0
     a46:	88 23       	and	r24, r24
     a48:	49 f7       	brne	.-46     	; 0xa1c <CAN_InitRxMob+0x1a>
     a4a:	1a 82       	std	Y+2, r1	; 0x02
     a4c:	3f c0       	rjmp	.+126    	; 0xacc <CAN_InitRxMob+0xca>
     a4e:	ed ee       	ldi	r30, 0xED	; 237
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	82 95       	swap	r24
     a56:	80 7f       	andi	r24, 0xF0	; 240
     a58:	80 83       	st	Z, r24
     a5a:	ef ee       	ldi	r30, 0xEF	; 239
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	82 95       	swap	r24
     a62:	86 95       	lsr	r24
     a64:	86 95       	lsr	r24
     a66:	83 70       	andi	r24, 0x03	; 3
     a68:	88 23       	and	r24, r24
     a6a:	69 f5       	brne	.+90     	; 0xac6 <CAN_InitRxMob+0xc4>
     a6c:	ef ee       	ldi	r30, 0xEF	; 239
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	80 83       	st	Z, r24
     a74:	e3 ef       	ldi	r30, 0xF3	; 243
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	90 70       	andi	r25, 0x00	; 0
     a7e:	96 95       	lsr	r25
     a80:	87 95       	ror	r24
     a82:	96 95       	lsr	r25
     a84:	87 95       	ror	r24
     a86:	96 95       	lsr	r25
     a88:	87 95       	ror	r24
     a8a:	80 83       	st	Z, r24
     a8c:	e2 ef       	ldi	r30, 0xF2	; 242
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	82 95       	swap	r24
     a94:	88 0f       	add	r24, r24
     a96:	80 7e       	andi	r24, 0xE0	; 224
     a98:	80 83       	st	Z, r24
     a9a:	e6 ef       	ldi	r30, 0xF6	; 246
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 ee       	ldi	r24, 0xE0	; 224
     aa0:	80 83       	st	Z, r24
     aa2:	e7 ef       	ldi	r30, 0xF7	; 247
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	80 83       	st	Z, r24
     aaa:	af ee       	ldi	r26, 0xEF	; 239
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	ef ee       	ldi	r30, 0xEF	; 239
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	8c 93       	st	X, r24
     ab8:	ed ee       	ldi	r30, 0xED	; 237
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	80 83       	st	Z, r24
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	8d 83       	std	Y+5, r24	; 0x05
     ac4:	0c c0       	rjmp	.+24     	; 0xade <CAN_InitRxMob+0xdc>
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	8a 83       	std	Y+2, r24	; 0x02
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	8f 30       	cpi	r24, 0x0F	; 15
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <CAN_InitRxMob+0xd2>
     ad2:	bd cf       	rjmp	.-134    	; 0xa4e <CAN_InitRxMob+0x4c>
     ad4:	ed ee       	ldi	r30, 0xED	; 237
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	80 83       	st	Z, r24
     adc:	1d 82       	std	Y+5, r1	; 0x05
     ade:	8d 81       	ldd	r24, Y+5	; 0x05
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	cf 91       	pop	r28
     aec:	df 91       	pop	r29
     aee:	08 95       	ret

00000af0 <CAN_Init>:
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	00 d0       	rcall	.+0      	; 0xafa <CAN_Init+0xa>
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	8a 83       	std	Y+2, r24	; 0x02
     b00:	1b df       	rcall	.-458    	; 0x938 <CAN_InitModule>
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	35 c0       	rjmp	.+106    	; 0xb70 <CAN_Init+0x80>
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	79 df       	rcall	.-270    	; 0xa02 <CAN_InitRxMob>
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	88 2f       	mov	r24, r24
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	8c 01       	movw	r16, r24
     b1c:	06 5f       	subi	r16, 0xF6	; 246
     b1e:	1e 4f       	sbci	r17, 0xFE	; 254
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	ed d7       	rcall	.+4058   	; 0x1b04 <calloc>
     b2a:	f8 01       	movw	r30, r16
     b2c:	91 83       	std	Z+1, r25	; 0x01
     b2e:	80 83       	st	Z, r24
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	48 2f       	mov	r20, r24
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	28 2f       	mov	r18, r24
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	fc 01       	movw	r30, r24
     b44:	ee 5c       	subi	r30, 0xCE	; 206
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	10 82       	st	Z, r1
     b4a:	fc 01       	movw	r30, r24
     b4c:	ee 5c       	subi	r30, 0xCE	; 206
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	80 81       	ld	r24, Z
     b52:	f9 01       	movw	r30, r18
     b54:	e8 5d       	subi	r30, 0xD8	; 216
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	80 83       	st	Z, r24
     b5a:	f9 01       	movw	r30, r18
     b5c:	e8 5d       	subi	r30, 0xD8	; 216
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	80 81       	ld	r24, Z
     b62:	fa 01       	movw	r30, r20
     b64:	e2 5e       	subi	r30, 0xE2	; 226
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	80 83       	st	Z, r24
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	99 81       	ldd	r25, Y+1	; 0x01
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	98 17       	cp	r25, r24
     b76:	38 f2       	brcs	.-114    	; 0xb06 <CAN_Init+0x16>
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2c 97       	sbiw	r28, 0x0c	; 12
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	89 87       	std	Y+9, r24	; 0x09
     b9c:	6a 87       	std	Y+10, r22	; 0x0a
     b9e:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     ba0:	80 91 08 01 	lds	r24, 0x0108
     ba4:	90 91 09 01 	lds	r25, 0x0109
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	06 97       	sbiw	r24, 0x06	; 6
     bb2:	98 87       	std	Y+8, r25	; 0x08
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     bb8:	ef 81       	ldd	r30, Y+7	; 0x07
     bba:	f8 85       	ldd	r31, Y+8	; 0x08
     bbc:	90 81       	ld	r25, Z
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	98 17       	cp	r25, r24
     bc2:	19 f4       	brne	.+6      	; 0xbca <gpio_register_pin+0x44>
            return 1;
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	2c 87       	std	Y+12, r18	; 0x0c
     bc8:	c8 c0       	rjmp	.+400    	; 0xd5a <gpio_register_pin+0x1d4>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     bca:	ef 81       	ldd	r30, Y+7	; 0x07
     bcc:	f8 85       	ldd	r31, Y+8	; 0x08
     bce:	80 85       	ldd	r24, Z+8	; 0x08
     bd0:	91 85       	ldd	r25, Z+9	; 0x09
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	06 97       	sbiw	r24, 0x06	; 6
     bdc:	98 87       	std	Y+8, r25	; 0x08
     bde:	8f 83       	std	Y+7, r24	; 0x07
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	06 96       	adiw	r24, 0x06	; 6
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	86 30       	cpi	r24, 0x06	; 6
     bea:	92 07       	cpc	r25, r18
     bec:	29 f7       	brne	.-54     	; 0xbb8 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     bee:	89 85       	ldd	r24, Y+9	; 0x09
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	86 95       	lsr	r24
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	87 70       	andi	r24, 0x07	; 7
     bfe:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     c00:	8a 85       	ldd	r24, Y+10	; 0x0a
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <gpio_register_pin+0x82>
     c06:	48 c0       	rjmp	.+144    	; 0xc98 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	c9 01       	movw	r24, r18
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	4e 96       	adiw	r24, 0x1e	; 30
     c1a:	dc 01       	movw	r26, r24
     c1c:	8e 81       	ldd	r24, Y+6	; 0x06
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	c9 01       	movw	r24, r18
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	4e 96       	adiw	r24, 0x1e	; 30
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <gpio_register_pin+0xbe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	2a 95       	dec	r18
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <gpio_register_pin+0xba>
     c48:	84 2b       	or	r24, r20
     c4a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	4f 96       	adiw	r24, 0x1f	; 31
     c5e:	dc 01       	movw	r26, r24
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	c9 01       	movw	r24, r18
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	4f 96       	adiw	r24, 0x1f	; 31
     c72:	fc 01       	movw	r30, r24
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 2e       	mov	r0, r18
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <gpio_register_pin+0x104>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <gpio_register_pin+0x100>
     c8e:	80 95       	com	r24
     c90:	84 23       	and	r24, r20
     c92:	8c 93       	st	X, r24
        return 0;
     c94:	1c 86       	std	Y+12, r1	; 0x0c
     c96:	61 c0       	rjmp	.+194    	; 0xd5a <gpio_register_pin+0x1d4>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     c98:	8e 81       	ldd	r24, Y+6	; 0x06
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	c9 01       	movw	r24, r18
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	4e 96       	adiw	r24, 0x1e	; 30
     caa:	dc 01       	movw	r26, r24
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	c9 01       	movw	r24, r18
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	4e 96       	adiw	r24, 0x1e	; 30
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <gpio_register_pin+0x14e>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	2a 95       	dec	r18
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <gpio_register_pin+0x14a>
     cd8:	80 95       	com	r24
     cda:	84 23       	and	r24, r20
     cdc:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	c9 01       	movw	r24, r18
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	4f 96       	adiw	r24, 0x1f	; 31
     cf0:	dc 01       	movw	r26, r24
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c9 01       	movw	r24, r18
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	4f 96       	adiw	r24, 0x1f	; 31
     d04:	fc 01       	movw	r30, r24
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <gpio_register_pin+0x194>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	2a 95       	dec	r18
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <gpio_register_pin+0x190>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     d22:	8a e0       	ldi	r24, 0x0A	; 10
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	08 d7       	rcall	.+3600   	; 0x1b38 <malloc>
     d28:	98 87       	std	Y+8, r25	; 0x08
     d2a:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	98 85       	ldd	r25, Y+8	; 0x08
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	19 f4       	brne	.+6      	; 0xd3a <gpio_register_pin+0x1b4>
        return 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 87       	std	Y+12, r24	; 0x0c
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <gpio_register_pin+0x1d4>

    input->pin       = pin;
     d3a:	ef 81       	ldd	r30, Y+7	; 0x07
     d3c:	f8 85       	ldd	r31, Y+8	; 0x08
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     d42:	ef 81       	ldd	r30, Y+7	; 0x07
     d44:	f8 85       	ldd	r31, Y+8	; 0x08
     d46:	8b 85       	ldd	r24, Y+11	; 0x0b
     d48:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	06 96       	adiw	r24, 0x06	; 6
     d50:	26 e0       	ldi	r18, 0x06	; 6
     d52:	31 e0       	ldi	r19, 0x01	; 1
     d54:	b9 01       	movw	r22, r18
     d56:	0b d0       	rcall	.+22     	; 0xd6e <list_add>

    return 0;
     d58:	1c 86       	std	Y+12, r1	; 0x0c
     d5a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     d5c:	2c 96       	adiw	r28, 0x0c	; 12
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <list_add+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <list_add+0x8>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	7c 83       	std	Y+4, r23	; 0x04
     d80:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	42 81       	ldd	r20, Z+2	; 0x02
     d88:	53 81       	ldd	r21, Z+3	; 0x03
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	2b 81       	ldd	r18, Y+3	; 0x03
     d90:	3c 81       	ldd	r19, Y+4	; 0x04
     d92:	b9 01       	movw	r22, r18
     d94:	07 d0       	rcall	.+14     	; 0xda4 <__list_add>
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <__list_add+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <__list_add+0x8>
     dac:	00 d0       	rcall	.+0      	; 0xdae <__list_add+0xa>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	7c 83       	std	Y+4, r23	; 0x04
     db8:	6b 83       	std	Y+3, r22	; 0x03
     dba:	5e 83       	std	Y+6, r21	; 0x06
     dbc:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     dbe:	ed 81       	ldd	r30, Y+5	; 0x05
     dc0:	fe 81       	ldd	r31, Y+6	; 0x06
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
    new->next = next;
     dca:	e9 81       	ldd	r30, Y+1	; 0x01
     dcc:	fa 81       	ldd	r31, Y+2	; 0x02
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	93 83       	std	Z+3, r25	; 0x03
     dd4:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
    prev->next = new;
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	93 83       	std	Z+3, r25	; 0x03
     dec:	82 83       	std	Z+2, r24	; 0x02
}
     dee:	26 96       	adiw	r28, 0x06	; 6
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <__gpio_read_pin+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	86 95       	lsr	r24
     e12:	86 95       	lsr	r24
     e14:	86 95       	lsr	r24
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	87 70       	andi	r24, 0x07	; 7
     e1e:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	c9 01       	movw	r24, r18
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	4d 96       	adiw	r24, 0x1d	; 29
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <__gpio_read_pin+0x4c>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <__gpio_read_pin+0x48>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	2b 97       	sbiw	r28, 0x0b	; 11
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e76:	80 91 08 01 	lds	r24, 0x0108
     e7a:	90 91 09 01 	lds	r25, 0x0109
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	06 97       	sbiw	r24, 0x06	; 6
     e88:	98 87       	std	Y+8, r25	; 0x08
     e8a:	8f 83       	std	Y+7, r24	; 0x07
     e8c:	55 c0       	rjmp	.+170    	; 0xf38 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
     e8e:	ef 81       	ldd	r30, Y+7	; 0x07
     e90:	f8 85       	ldd	r31, Y+8	; 0x08
     e92:	90 81       	ld	r25, Z
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	98 17       	cp	r25, r24
     e98:	09 f0       	breq	.+2      	; 0xe9c <gpio_read_pin+0x3c>
     e9a:	43 c0       	rjmp	.+134    	; 0xf22 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
     e9c:	1c 82       	std	Y+4, r1	; 0x04
     e9e:	21 c0       	rjmp	.+66     	; 0xee2 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8f 81       	ldd	r24, Y+7	; 0x07
     ea8:	98 85       	ldd	r25, Y+8	; 0x08
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	fc 01       	movw	r30, r24
     eb0:	32 96       	adiw	r30, 0x02	; 2
     eb2:	40 81       	ld	r20, Z
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9c 01       	movw	r18, r24
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	fc 01       	movw	r30, r24
     eca:	32 96       	adiw	r30, 0x02	; 2
     ecc:	80 81       	ld	r24, Z
     ece:	48 17       	cp	r20, r24
     ed0:	29 f0       	breq	.+10     	; 0xedc <gpio_read_pin+0x7c>
                    return input->previous_state;
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	25 81       	ldd	r18, Z+5	; 0x05
     ed8:	2b 87       	std	Y+11, r18	; 0x0b
     eda:	38 c0       	rjmp	.+112    	; 0xf4c <gpio_read_pin+0xec>
                i++;
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	e0 f2       	brcs	.-72     	; 0xea0 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     ee8:	ef 81       	ldd	r30, Y+7	; 0x07
     eea:	f8 85       	ldd	r31, Y+8	; 0x08
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	89 27       	eor	r24, r25
     ef2:	88 23       	and	r24, r24
     ef4:	29 f0       	breq	.+10     	; 0xf00 <gpio_read_pin+0xa0>
     ef6:	ef 81       	ldd	r30, Y+7	; 0x07
     ef8:	f8 85       	ldd	r31, Y+8	; 0x08
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	8a 87       	std	Y+10, r24	; 0x0a
     efe:	08 c0       	rjmp	.+16     	; 0xf10 <gpio_read_pin+0xb0>
     f00:	ef 81       	ldd	r30, Y+7	; 0x07
     f02:	f8 85       	ldd	r31, Y+8	; 0x08
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	1a 86       	std	Y+10, r1	; 0x0a
     f08:	88 23       	and	r24, r24
     f0a:	11 f4       	brne	.+4      	; 0xf10 <gpio_read_pin+0xb0>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	2a 87       	std	Y+10, r18	; 0x0a
     f10:	8a 85       	ldd	r24, Y+10	; 0x0a
     f12:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
     f14:	ef 81       	ldd	r30, Y+7	; 0x07
     f16:	f8 85       	ldd	r31, Y+8	; 0x08
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	85 83       	std	Z+5, r24	; 0x05

            return state;
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	2b 87       	std	Y+11, r18	; 0x0b
     f20:	15 c0       	rjmp	.+42     	; 0xf4c <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f22:	ef 81       	ldd	r30, Y+7	; 0x07
     f24:	f8 85       	ldd	r31, Y+8	; 0x08
     f26:	80 85       	ldd	r24, Z+8	; 0x08
     f28:	91 85       	ldd	r25, Z+9	; 0x09
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	06 97       	sbiw	r24, 0x06	; 6
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	8f 83       	std	Y+7, r24	; 0x07
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	06 96       	adiw	r24, 0x06	; 6
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	86 30       	cpi	r24, 0x06	; 6
     f42:	92 07       	cpc	r25, r18
     f44:	09 f0       	breq	.+2      	; 0xf48 <gpio_read_pin+0xe8>
     f46:	a3 cf       	rjmp	.-186    	; 0xe8e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     f4e:	2b 96       	adiw	r28, 0x0b	; 11
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <gpio_debouncer+0xa>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <gpio_debouncer+0xc>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <gpio_debouncer+0xe>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f72:	80 91 08 01 	lds	r24, 0x0108
     f76:	90 91 09 01 	lds	r25, 0x0109
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	06 97       	sbiw	r24, 0x06	; 6
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	1b c0       	rjmp	.+54     	; 0xfc0 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
     f8a:	00 91 3c 01 	lds	r16, 0x013C
     f8e:	10 91 3d 01 	lds	r17, 0x013D
     f92:	ed 81       	ldd	r30, Y+5	; 0x05
     f94:	fe 81       	ldd	r31, Y+6	; 0x06
     f96:	80 81       	ld	r24, Z
     f98:	33 df       	rcall	.-410    	; 0xe00 <__gpio_read_pin>
     f9a:	28 2f       	mov	r18, r24
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	80 0f       	add	r24, r16
     fa2:	91 1f       	adc	r25, r17
     fa4:	fc 01       	movw	r30, r24
     fa6:	32 96       	adiw	r30, 0x02	; 2
     fa8:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     faa:	ed 81       	ldd	r30, Y+5	; 0x05
     fac:	fe 81       	ldd	r31, Y+6	; 0x06
     fae:	80 85       	ldd	r24, Z+8	; 0x08
     fb0:	91 85       	ldd	r25, Z+9	; 0x09
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	06 97       	sbiw	r24, 0x06	; 6
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	06 96       	adiw	r24, 0x06	; 6
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	86 30       	cpi	r24, 0x06	; 6
     fca:	92 07       	cpc	r25, r18
     fcc:	f1 f6       	brne	.-68     	; 0xf8a <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     fce:	80 91 3c 01 	lds	r24, 0x013C
     fd2:	90 91 3d 01 	lds	r25, 0x013D
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 3d 01 	sts	0x013D, r25
     fdc:	80 93 3c 01 	sts	0x013C, r24
     fe0:	80 91 3c 01 	lds	r24, 0x013C
     fe4:	90 91 3d 01 	lds	r25, 0x013D
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	91 05       	cpc	r25, r1
     fec:	21 f4       	brne	.+8      	; 0xff6 <gpio_debouncer+0x96>
        count = 0;
     fee:	10 92 3d 01 	sts	0x013D, r1
     ff2:	10 92 3c 01 	sts	0x013C, r1
	
}
     ff6:	26 96       	adiw	r28, 0x06	; 6
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	08 95       	ret

0000100c <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <timer_register_callback+0x6>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	90 93 3f 01 	sts	0x013F, r25
    1022:	80 93 3e 01 	sts	0x013E, r24
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <timer_init>:
	return comb;
}


void timer_init(unsigned int freq)
{
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <timer_init+0xa>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    1042:	e0 e8       	ldi	r30, 0x80	; 128
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1048:	e1 e8       	ldi	r30, 0x81	; 129
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 e0       	ldi	r24, 0x09	; 9
    104e:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    1050:	08 e8       	ldi	r16, 0x88	; 136
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	cc 01       	movw	r24, r24
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	37 d4       	rcall	.+2158   	; 0x18d2 <__floatunsisf>
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	60 e8       	ldi	r22, 0x80	; 128
    106a:	76 e9       	ldi	r23, 0x96	; 150
    106c:	88 e1       	ldi	r24, 0x18	; 24
    106e:	9b e4       	ldi	r25, 0x4B	; 75
    1070:	97 d3       	rcall	.+1838   	; 0x17a0 <__divsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	5f e3       	ldi	r21, 0x3F	; 63
    1082:	26 d3       	rcall	.+1612   	; 0x16d0 <__addsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	f6 d3       	rcall	.+2028   	; 0x187a <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	f8 01       	movw	r30, r16
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1098:	ef e6       	ldi	r30, 0x6F	; 111
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	80 83       	st	Z, r24

	SREG |= 0x80;
    10a0:	af e5       	ldi	r26, 0x5F	; 95
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e5       	ldi	r30, 0x5F	; 95
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	00 90 5b 00 	lds	r0, 0x005B
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    10ec:	80 91 3e 01 	lds	r24, 0x013E
    10f0:	90 91 3f 01 	lds	r25, 0x013F
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	29 f0       	breq	.+10     	; 0x1102 <__stack+0x3>
        timer_callback();
    10f8:	e0 91 3e 01 	lds	r30, 0x013E
    10fc:	f0 91 3f 01 	lds	r31, 0x013F
    1100:	09 95       	icall
	if(sys_time >= 90000)
    1102:	80 91 40 01 	lds	r24, 0x0140
    1106:	90 91 41 01 	lds	r25, 0x0141
    110a:	a0 91 42 01 	lds	r26, 0x0142
    110e:	b0 91 43 01 	lds	r27, 0x0143
    1112:	80 39       	cpi	r24, 0x90	; 144
    1114:	2f e5       	ldi	r18, 0x5F	; 95
    1116:	92 07       	cpc	r25, r18
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	a2 07       	cpc	r26, r18
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	b2 07       	cpc	r27, r18
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__stack+0x25>
		actuators_umbrella();
    1122:	2f da       	rcall	.-2978   	; 0x582 <actuators_umbrella>
	sys_time++;
    1124:	80 91 40 01 	lds	r24, 0x0140
    1128:	90 91 41 01 	lds	r25, 0x0141
    112c:	a0 91 42 01 	lds	r26, 0x0142
    1130:	b0 91 43 01 	lds	r27, 0x0143
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	a1 1d       	adc	r26, r1
    1138:	b1 1d       	adc	r27, r1
    113a:	80 93 40 01 	sts	0x0140, r24
    113e:	90 93 41 01 	sts	0x0141, r25
    1142:	a0 93 42 01 	sts	0x0142, r26
    1146:	b0 93 43 01 	sts	0x0143, r27
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	00 92 5b 00 	sts	0x005B, r0
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <system_reset_system_time>:
void system_reset_system_time(void)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    117e:	10 92 40 01 	sts	0x0140, r1
    1182:	10 92 41 01 	sts	0x0141, r1
    1186:	10 92 42 01 	sts	0x0142, r1
    118a:	10 92 43 01 	sts	0x0143, r1
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <system_set_match_started>:
void system_set_match_started(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 44 01 	sts	0x0144, r24
}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <system_init>:
			break;
		//maybe put default for rotate for getting the camera right
	}
}
void system_init(void)
{	
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	6c 97       	sbiw	r28, 0x1c	; 28
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    11bc:	80 eb       	ldi	r24, 0xB0	; 176
    11be:	97 e0       	ldi	r25, 0x07	; 7
    11c0:	25 df       	rcall	.-438    	; 0x100c <timer_register_callback>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a8 ec       	ldi	r26, 0xC8	; 200
    11c8:	b2 e4       	ldi	r27, 0x42	; 66
    11ca:	89 8f       	std	Y+25, r24	; 0x19
    11cc:	9a 8f       	std	Y+26, r25	; 0x1a
    11ce:	ab 8f       	std	Y+27, r26	; 0x1b
    11d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	69 8d       	ldd	r22, Y+25	; 0x19
    11d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e4       	ldi	r19, 0x40	; 64
    11de:	4c e1       	ldi	r20, 0x1C	; 28
    11e0:	55 e4       	ldi	r21, 0x45	; 69
    11e2:	2d d4       	rcall	.+2138   	; 0x1a3e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8d 8b       	std	Y+21, r24	; 0x15
    11ea:	9e 8b       	std	Y+22, r25	; 0x16
    11ec:	af 8b       	std	Y+23, r26	; 0x17
    11ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f0:	6d 89       	ldd	r22, Y+21	; 0x15
    11f2:	7e 89       	ldd	r23, Y+22	; 0x16
    11f4:	8f 89       	ldd	r24, Y+23	; 0x17
    11f6:	98 8d       	ldd	r25, Y+24	; 0x18
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	cb d2       	rcall	.+1430   	; 0x1798 <__cmpsf2>
    1202:	88 23       	and	r24, r24
    1204:	2c f4       	brge	.+10     	; 0x1210 <system_init+0x68>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9c 8b       	std	Y+20, r25	; 0x14
    120c:	8b 8b       	std	Y+19, r24	; 0x13
    120e:	3b c0       	rjmp	.+118    	; 0x1286 <system_init+0xde>
	else if (__tmp > 65535)
    1210:	6d 89       	ldd	r22, Y+21	; 0x15
    1212:	7e 89       	ldd	r23, Y+22	; 0x16
    1214:	8f 89       	ldd	r24, Y+23	; 0x17
    1216:	98 8d       	ldd	r25, Y+24	; 0x18
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0a d4       	rcall	.+2068   	; 0x1a36 <__gesf2>
    1222:	18 16       	cp	r1, r24
    1224:	3c f5       	brge	.+78     	; 0x1274 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	69 8d       	ldd	r22, Y+25	; 0x19
    1228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	03 d4       	rcall	.+2054   	; 0x1a3e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	1c d3       	rcall	.+1592   	; 0x187a <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9c 8b       	std	Y+20, r25	; 0x14
    1248:	8b 8b       	std	Y+19, r24	; 0x13
    124a:	0f c0       	rjmp	.+30     	; 0x126a <system_init+0xc2>
    124c:	8a ef       	ldi	r24, 0xFA	; 250
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9a 8b       	std	Y+18, r25	; 0x12
    1252:	89 8b       	std	Y+17, r24	; 0x11
    1254:	89 89       	ldd	r24, Y+17	; 0x11
    1256:	9a 89       	ldd	r25, Y+18	; 0x12
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <system_init+0xb0>
    125c:	9a 8b       	std	Y+18, r25	; 0x12
    125e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8b 89       	ldd	r24, Y+19	; 0x13
    1262:	9c 89       	ldd	r25, Y+20	; 0x14
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	9c 8b       	std	Y+20, r25	; 0x14
    1268:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8b 89       	ldd	r24, Y+19	; 0x13
    126c:	9c 89       	ldd	r25, Y+20	; 0x14
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <system_init+0xa4>
    1272:	13 c0       	rjmp	.+38     	; 0x129a <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	6d 89       	ldd	r22, Y+21	; 0x15
    1276:	7e 89       	ldd	r23, Y+22	; 0x16
    1278:	8f 89       	ldd	r24, Y+23	; 0x17
    127a:	98 8d       	ldd	r25, Y+24	; 0x18
    127c:	fe d2       	rcall	.+1532   	; 0x187a <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9c 8b       	std	Y+20, r25	; 0x14
    1284:	8b 8b       	std	Y+19, r24	; 0x13
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	98 8b       	std	Y+16, r25	; 0x10
    128c:	8f 87       	std	Y+15, r24	; 0x0f
    128e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1290:	98 89       	ldd	r25, Y+16	; 0x10
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <system_init+0xea>
    1296:	98 8b       	std	Y+16, r25	; 0x10
    1298:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    129a:	88 e2       	ldi	r24, 0x28	; 40
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	72 dc       	rcall	.-1820   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    12a2:	89 e2       	ldi	r24, 0x29	; 41
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	6e dc       	rcall	.-1828   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	6a dc       	rcall	.-1836   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	66 dc       	rcall	.-1844   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	62 dc       	rcall	.-1852   	; 0xb86 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    12c2:	88 e0       	ldi	r24, 0x08	; 8
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	5e dc       	rcall	.-1860   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    12ca:	8a e0       	ldi	r24, 0x0A	; 10
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	5a dc       	rcall	.-1868   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    12d2:	8c e0       	ldi	r24, 0x0C	; 12
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	56 dc       	rcall	.-1876   	; 0xb86 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    12da:	8e e0       	ldi	r24, 0x0E	; 14
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	52 dc       	rcall	.-1884   	; 0xb86 <gpio_register_pin>
	
	
	DDRG = 0xff;
    12e2:	e3 e3       	ldi	r30, 0x33	; 51
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	80 83       	st	Z, r24
	//PORTG = 0x00;
	servo_init(50);
    12ea:	82 e3       	ldi	r24, 0x32	; 50
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 08 01 	call	0x210	; 0x210 <servo_init>
	timer_init(1000);
    12f2:	88 ee       	ldi	r24, 0xE8	; 232
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	9c de       	rcall	.-712    	; 0x1030 <timer_init>
	CAN_Init(1);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	fa db       	rcall	.-2060   	; 0xaf0 <CAN_Init>
    12fc:	6c c0       	rjmp	.+216    	; 0x13d6 <system_init+0x22e>

	//actuators_setup();
	
	while(gpio_read_pin(JUMPER_PIN))
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 e2       	ldi	r26, 0x20	; 32
    1304:	b1 e4       	ldi	r27, 0x41	; 65
    1306:	8b 87       	std	Y+11, r24	; 0x0b
    1308:	9c 87       	std	Y+12, r25	; 0x0c
    130a:	ad 87       	std	Y+13, r26	; 0x0d
    130c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1310:	7c 85       	ldd	r23, Y+12	; 0x0c
    1312:	8d 85       	ldd	r24, Y+13	; 0x0d
    1314:	9e 85       	ldd	r25, Y+14	; 0x0e
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e4       	ldi	r19, 0x40	; 64
    131a:	4c e1       	ldi	r20, 0x1C	; 28
    131c:	55 e4       	ldi	r21, 0x45	; 69
    131e:	8f d3       	rcall	.+1822   	; 0x1a3e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8f 83       	std	Y+7, r24	; 0x07
    1326:	98 87       	std	Y+8, r25	; 0x08
    1328:	a9 87       	std	Y+9, r26	; 0x09
    132a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    132c:	6f 81       	ldd	r22, Y+7	; 0x07
    132e:	78 85       	ldd	r23, Y+8	; 0x08
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	2d d2       	rcall	.+1114   	; 0x1798 <__cmpsf2>
    133e:	88 23       	and	r24, r24
    1340:	2c f4       	brge	.+10     	; 0x134c <system_init+0x1a4>
		__ticks = 1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	3b c0       	rjmp	.+118    	; 0x13c2 <system_init+0x21a>
	else if (__tmp > 65535)
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f e7       	ldi	r20, 0x7F	; 127
    135a:	57 e4       	ldi	r21, 0x47	; 71
    135c:	6c d3       	rcall	.+1752   	; 0x1a36 <__gesf2>
    135e:	18 16       	cp	r1, r24
    1360:	3c f5       	brge	.+78     	; 0x13b0 <system_init+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	65 d3       	rcall	.+1738   	; 0x1a3e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	7e d2       	rcall	.+1276   	; 0x187a <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <system_init+0x1fe>
    1388:	8a ef       	ldi	r24, 0xFA	; 250
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <system_init+0x1ec>
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	69 f7       	brne	.-38     	; 0x1388 <system_init+0x1e0>
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <system_init+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	60 d2       	rcall	.+1216   	; 0x187a <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <system_init+0x226>
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	88 e2       	ldi	r24, 0x28	; 40
    13d8:	43 dd       	rcall	.-1402   	; 0xe60 <gpio_read_pin>
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <system_init+0x238>
    13de:	8f cf       	rjmp	.-226    	; 0x12fe <system_init+0x156>
		_delay_ms(10);
	//PORTG = 0xff;
	system_reset_system_time();
    13e0:	ca de       	rcall	.-620    	; 0x1176 <system_reset_system_time>
	system_set_match_started();
    13e2:	d8 de       	rcall	.-592    	; 0x1194 <system_set_match_started>
	
}
    13e4:	6c 96       	adiw	r28, 0x1c	; 28
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <checkFrontSensors>:
signed char checkFrontSensors(signed char sensor)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <checkFrontSensors+0x6>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == FRONT_LEFT_SIDE)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	31 f4       	brne	.+12     	; 0x1414 <checkFrontSensors+0x1e>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE)
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	2a dd       	rcall	.-1452   	; 0xe60 <gpio_read_pin>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	c1 f4       	brne	.+48     	; 0x1440 <checkFrontSensors+0x4a>
		{
			return DETECTED;
    1410:	1a 82       	std	Y+2, r1	; 0x02
    1412:	18 c0       	rjmp	.+48     	; 0x1444 <checkFrontSensors+0x4e>
		}
	}
	else if(sensor == FRONT_RIGHT_SIDE)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	31 f4       	brne	.+12     	; 0x1426 <checkFrontSensors+0x30>
	{
		if(gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    141a:	8a e0       	ldi	r24, 0x0A	; 10
    141c:	21 dd       	rcall	.-1470   	; 0xe60 <gpio_read_pin>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	79 f4       	brne	.+30     	; 0x1440 <checkFrontSensors+0x4a>
		{
			return DETECTED;
    1422:	1a 82       	std	Y+2, r1	; 0x02
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <checkFrontSensors+0x4e>
		}
	}
	else if(sensor == FRONT_ALL)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	51 f4       	brne	.+20     	; 0x1440 <checkFrontSensors+0x4a>
	{
		if(gpio_read_pin(SENSOR_F_L_PIN) == TRUE || gpio_read_pin(SENSOR_F_R_PIN) == TRUE)
    142c:	88 e0       	ldi	r24, 0x08	; 8
    142e:	18 dd       	rcall	.-1488   	; 0xe60 <gpio_read_pin>
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	21 f0       	breq	.+8      	; 0x143c <checkFrontSensors+0x46>
    1434:	8a e0       	ldi	r24, 0x0A	; 10
    1436:	14 dd       	rcall	.-1496   	; 0xe60 <gpio_read_pin>
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	11 f4       	brne	.+4      	; 0x1440 <checkFrontSensors+0x4a>
		{
			return DETECTED;
    143c:	1a 82       	std	Y+2, r1	; 0x02
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <checkFrontSensors+0x4e>
		}
	}
	return NOT_DETECTED;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <checkRearSensors>:
signed char checkRearSensors(signed char sensor)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <checkRearSensors+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == BACK_LEFT_SIDE)
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	8f 3f       	cpi	r24, 0xFF	; 255
    1460:	31 f4       	brne	.+12     	; 0x146e <checkRearSensors+0x1e>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE)
    1462:	8c e0       	ldi	r24, 0x0C	; 12
    1464:	fd dc       	rcall	.-1542   	; 0xe60 <gpio_read_pin>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	c1 f4       	brne	.+48     	; 0x149a <checkRearSensors+0x4a>
		{
			return DETECTED;
    146a:	1a 82       	std	Y+2, r1	; 0x02
    146c:	18 c0       	rjmp	.+48     	; 0x149e <checkRearSensors+0x4e>
		}
	}
	else if(sensor == BACK_RIGHT_SIDE)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8e 3f       	cpi	r24, 0xFE	; 254
    1472:	31 f4       	brne	.+12     	; 0x1480 <checkRearSensors+0x30>
	{
		if(gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    1474:	8e e0       	ldi	r24, 0x0E	; 14
    1476:	f4 dc       	rcall	.-1560   	; 0xe60 <gpio_read_pin>
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	79 f4       	brne	.+30     	; 0x149a <checkRearSensors+0x4a>
		{
			return DETECTED;
    147c:	1a 82       	std	Y+2, r1	; 0x02
    147e:	0f c0       	rjmp	.+30     	; 0x149e <checkRearSensors+0x4e>
		}
	}
	else if(sensor == BACK_ALL)
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	8d 3f       	cpi	r24, 0xFD	; 253
    1484:	51 f4       	brne	.+20     	; 0x149a <checkRearSensors+0x4a>
	{
		if(gpio_read_pin(SENSOR_B_L_PIN) == TRUE || gpio_read_pin(SENSOR_B_R_PIN) == TRUE)
    1486:	8c e0       	ldi	r24, 0x0C	; 12
    1488:	eb dc       	rcall	.-1578   	; 0xe60 <gpio_read_pin>
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	21 f0       	breq	.+8      	; 0x1496 <checkRearSensors+0x46>
    148e:	8e e0       	ldi	r24, 0x0E	; 14
    1490:	e7 dc       	rcall	.-1586   	; 0xe60 <gpio_read_pin>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	11 f4       	brne	.+4      	; 0x149a <checkRearSensors+0x4a>
		{
			return DETECTED;
    1496:	1a 82       	std	Y+2, r1	; 0x02
    1498:	02 c0       	rjmp	.+4      	; 0x149e <checkRearSensors+0x4e>
		}
	}
	return NOT_DETECTED;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <__vector_23>:
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	00 90 5b 00 	lds	r0, 0x005B
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	80 91 45 01 	lds	r24, 0x0145
    14d2:	88 23       	and	r24, r24
    14d4:	d9 f0       	breq	.+54     	; 0x150c <__vector_23+0x62>
    14d6:	80 91 45 01 	lds	r24, 0x0145
    14da:	81 50       	subi	r24, 0x01	; 1
    14dc:	80 93 45 01 	sts	0x0145, r24
    14e0:	a6 ec       	ldi	r26, 0xC6	; 198
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	80 91 46 01 	lds	r24, 0x0146
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	fc 01       	movw	r30, r24
    14ee:	e3 5b       	subi	r30, 0xB3	; 179
    14f0:	fe 4f       	sbci	r31, 0xFE	; 254
    14f2:	80 81       	ld	r24, Z
    14f4:	8c 93       	st	X, r24
    14f6:	80 91 46 01 	lds	r24, 0x0146
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 93 46 01 	sts	0x0146, r24
    1500:	80 91 46 01 	lds	r24, 0x0146
    1504:	80 34       	cpi	r24, 0x40	; 64
    1506:	11 f4       	brne	.+4      	; 0x150c <__vector_23+0x62>
    1508:	10 92 46 01 	sts	0x0146, r1
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	0f 90       	pop	r0
    151e:	00 92 5b 00 	sts	0x005B, r0
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_21>:
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	00 90 5b 00 	lds	r0, 0x005B
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	e0 ec       	ldi	r30, 0xC0	; 192
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	8c 71       	andi	r24, 0x1C	; 28
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	d9 f4       	brne	.+54     	; 0x159c <__vector_21+0x70>
    1566:	80 91 47 01 	lds	r24, 0x0147
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	e6 ec       	ldi	r30, 0xC6	; 198
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	20 81       	ld	r18, Z
    1574:	fc 01       	movw	r30, r24
    1576:	e3 57       	subi	r30, 0x73	; 115
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	20 83       	st	Z, r18
    157c:	80 91 47 01 	lds	r24, 0x0147
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 93 47 01 	sts	0x0147, r24
    1586:	80 91 47 01 	lds	r24, 0x0147
    158a:	80 34       	cpi	r24, 0x40	; 64
    158c:	11 f4       	brne	.+4      	; 0x1592 <__vector_21+0x66>
    158e:	10 92 47 01 	sts	0x0147, r1
    1592:	80 91 48 01 	lds	r24, 0x0148
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 48 01 	sts	0x0148, r24
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	ff 91       	pop	r31
    15a4:	ef 91       	pop	r30
    15a6:	9f 91       	pop	r25
    15a8:	8f 91       	pop	r24
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	00 92 5b 00 	sts	0x005B, r0
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0
    15b8:	1f 90       	pop	r1
    15ba:	18 95       	reti

000015bc <__vector_34>:
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	00 90 5b 00 	lds	r0, 0x005B
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	80 91 49 01 	lds	r24, 0x0149
    15e4:	88 23       	and	r24, r24
    15e6:	d9 f0       	breq	.+54     	; 0x161e <__vector_34+0x62>
    15e8:	80 91 49 01 	lds	r24, 0x0149
    15ec:	81 50       	subi	r24, 0x01	; 1
    15ee:	80 93 49 01 	sts	0x0149, r24
    15f2:	ae ec       	ldi	r26, 0xCE	; 206
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	80 91 4a 01 	lds	r24, 0x014A
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	e3 53       	subi	r30, 0x33	; 51
    1602:	fe 4f       	sbci	r31, 0xFE	; 254
    1604:	80 81       	ld	r24, Z
    1606:	8c 93       	st	X, r24
    1608:	80 91 4a 01 	lds	r24, 0x014A
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	80 93 4a 01 	sts	0x014A, r24
    1612:	80 91 4a 01 	lds	r24, 0x014A
    1616:	80 34       	cpi	r24, 0x40	; 64
    1618:	11 f4       	brne	.+4      	; 0x161e <__vector_34+0x62>
    161a:	10 92 4a 01 	sts	0x014A, r1
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	0f 90       	pop	r0
    1630:	00 92 5b 00 	sts	0x005B, r0
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_32>:
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	00 90 5b 00 	lds	r0, 0x005B
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	2f 93       	push	r18
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	0f 92       	push	r0
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	e8 ec       	ldi	r30, 0xC8	; 200
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	8c 71       	andi	r24, 0x1C	; 28
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	d9 f4       	brne	.+54     	; 0x16ae <__vector_32+0x70>
    1678:	80 91 4b 01 	lds	r24, 0x014B
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	ee ec       	ldi	r30, 0xCE	; 206
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	20 81       	ld	r18, Z
    1686:	fc 01       	movw	r30, r24
    1688:	e3 5f       	subi	r30, 0xF3	; 243
    168a:	fd 4f       	sbci	r31, 0xFD	; 253
    168c:	20 83       	st	Z, r18
    168e:	80 91 4b 01 	lds	r24, 0x014B
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	80 93 4b 01 	sts	0x014B, r24
    1698:	80 91 4b 01 	lds	r24, 0x014B
    169c:	80 34       	cpi	r24, 0x40	; 64
    169e:	11 f4       	brne	.+4      	; 0x16a4 <__vector_32+0x66>
    16a0:	10 92 4b 01 	sts	0x014B, r1
    16a4:	80 91 4c 01 	lds	r24, 0x014C
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 4c 01 	sts	0x014C, r24
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	2f 91       	pop	r18
    16be:	0f 90       	pop	r0
    16c0:	00 92 5b 00 	sts	0x005B, r0
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <__subsf3>:
    16ce:	50 58       	subi	r21, 0x80	; 128

000016d0 <__addsf3>:
    16d0:	bb 27       	eor	r27, r27
    16d2:	aa 27       	eor	r26, r26
    16d4:	0e d0       	rcall	.+28     	; 0x16f2 <__addsf3x>
    16d6:	75 c1       	rjmp	.+746    	; 0x19c2 <__fp_round>
    16d8:	66 d1       	rcall	.+716    	; 0x19a6 <__fp_pscA>
    16da:	30 f0       	brcs	.+12     	; 0x16e8 <__addsf3+0x18>
    16dc:	6b d1       	rcall	.+726    	; 0x19b4 <__fp_pscB>
    16de:	20 f0       	brcs	.+8      	; 0x16e8 <__addsf3+0x18>
    16e0:	31 f4       	brne	.+12     	; 0x16ee <__addsf3+0x1e>
    16e2:	9f 3f       	cpi	r25, 0xFF	; 255
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__addsf3+0x1a>
    16e6:	1e f4       	brtc	.+6      	; 0x16ee <__addsf3+0x1e>
    16e8:	5b c1       	rjmp	.+694    	; 0x19a0 <__fp_nan>
    16ea:	0e f4       	brtc	.+2      	; 0x16ee <__addsf3+0x1e>
    16ec:	e0 95       	com	r30
    16ee:	e7 fb       	bst	r30, 7
    16f0:	51 c1       	rjmp	.+674    	; 0x1994 <__fp_inf>

000016f2 <__addsf3x>:
    16f2:	e9 2f       	mov	r30, r25
    16f4:	77 d1       	rcall	.+750    	; 0x19e4 <__fp_split3>
    16f6:	80 f3       	brcs	.-32     	; 0x16d8 <__addsf3+0x8>
    16f8:	ba 17       	cp	r27, r26
    16fa:	62 07       	cpc	r22, r18
    16fc:	73 07       	cpc	r23, r19
    16fe:	84 07       	cpc	r24, r20
    1700:	95 07       	cpc	r25, r21
    1702:	18 f0       	brcs	.+6      	; 0x170a <__addsf3x+0x18>
    1704:	71 f4       	brne	.+28     	; 0x1722 <__addsf3x+0x30>
    1706:	9e f5       	brtc	.+102    	; 0x176e <__addsf3x+0x7c>
    1708:	8f c1       	rjmp	.+798    	; 0x1a28 <__fp_zero>
    170a:	0e f4       	brtc	.+2      	; 0x170e <__addsf3x+0x1c>
    170c:	e0 95       	com	r30
    170e:	0b 2e       	mov	r0, r27
    1710:	ba 2f       	mov	r27, r26
    1712:	a0 2d       	mov	r26, r0
    1714:	0b 01       	movw	r0, r22
    1716:	b9 01       	movw	r22, r18
    1718:	90 01       	movw	r18, r0
    171a:	0c 01       	movw	r0, r24
    171c:	ca 01       	movw	r24, r20
    171e:	a0 01       	movw	r20, r0
    1720:	11 24       	eor	r1, r1
    1722:	ff 27       	eor	r31, r31
    1724:	59 1b       	sub	r21, r25
    1726:	99 f0       	breq	.+38     	; 0x174e <__addsf3x+0x5c>
    1728:	59 3f       	cpi	r21, 0xF9	; 249
    172a:	50 f4       	brcc	.+20     	; 0x1740 <__addsf3x+0x4e>
    172c:	50 3e       	cpi	r21, 0xE0	; 224
    172e:	68 f1       	brcs	.+90     	; 0x178a <__addsf3x+0x98>
    1730:	1a 16       	cp	r1, r26
    1732:	f0 40       	sbci	r31, 0x00	; 0
    1734:	a2 2f       	mov	r26, r18
    1736:	23 2f       	mov	r18, r19
    1738:	34 2f       	mov	r19, r20
    173a:	44 27       	eor	r20, r20
    173c:	58 5f       	subi	r21, 0xF8	; 248
    173e:	f3 cf       	rjmp	.-26     	; 0x1726 <__addsf3x+0x34>
    1740:	46 95       	lsr	r20
    1742:	37 95       	ror	r19
    1744:	27 95       	ror	r18
    1746:	a7 95       	ror	r26
    1748:	f0 40       	sbci	r31, 0x00	; 0
    174a:	53 95       	inc	r21
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__addsf3x+0x4e>
    174e:	7e f4       	brtc	.+30     	; 0x176e <__addsf3x+0x7c>
    1750:	1f 16       	cp	r1, r31
    1752:	ba 0b       	sbc	r27, r26
    1754:	62 0b       	sbc	r22, r18
    1756:	73 0b       	sbc	r23, r19
    1758:	84 0b       	sbc	r24, r20
    175a:	ba f0       	brmi	.+46     	; 0x178a <__addsf3x+0x98>
    175c:	91 50       	subi	r25, 0x01	; 1
    175e:	a1 f0       	breq	.+40     	; 0x1788 <__addsf3x+0x96>
    1760:	ff 0f       	add	r31, r31
    1762:	bb 1f       	adc	r27, r27
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	c2 f7       	brpl	.-16     	; 0x175c <__addsf3x+0x6a>
    176c:	0e c0       	rjmp	.+28     	; 0x178a <__addsf3x+0x98>
    176e:	ba 0f       	add	r27, r26
    1770:	62 1f       	adc	r22, r18
    1772:	73 1f       	adc	r23, r19
    1774:	84 1f       	adc	r24, r20
    1776:	48 f4       	brcc	.+18     	; 0x178a <__addsf3x+0x98>
    1778:	87 95       	ror	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f7 95       	ror	r31
    1782:	9e 3f       	cpi	r25, 0xFE	; 254
    1784:	08 f0       	brcs	.+2      	; 0x1788 <__addsf3x+0x96>
    1786:	b3 cf       	rjmp	.-154    	; 0x16ee <__addsf3+0x1e>
    1788:	93 95       	inc	r25
    178a:	88 0f       	add	r24, r24
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__addsf3x+0x9e>
    178e:	99 27       	eor	r25, r25
    1790:	ee 0f       	add	r30, r30
    1792:	97 95       	ror	r25
    1794:	87 95       	ror	r24
    1796:	08 95       	ret

00001798 <__cmpsf2>:
    1798:	d9 d0       	rcall	.+434    	; 0x194c <__fp_cmp>
    179a:	08 f4       	brcc	.+2      	; 0x179e <__cmpsf2+0x6>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	08 95       	ret

000017a0 <__divsf3>:
    17a0:	0c d0       	rcall	.+24     	; 0x17ba <__divsf3x>
    17a2:	0f c1       	rjmp	.+542    	; 0x19c2 <__fp_round>
    17a4:	07 d1       	rcall	.+526    	; 0x19b4 <__fp_pscB>
    17a6:	40 f0       	brcs	.+16     	; 0x17b8 <__divsf3+0x18>
    17a8:	fe d0       	rcall	.+508    	; 0x19a6 <__fp_pscA>
    17aa:	30 f0       	brcs	.+12     	; 0x17b8 <__divsf3+0x18>
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <__divsf3+0x16>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <__divsf3+0x18>
    17b2:	f0 c0       	rjmp	.+480    	; 0x1994 <__fp_inf>
    17b4:	51 11       	cpse	r21, r1
    17b6:	39 c1       	rjmp	.+626    	; 0x1a2a <__fp_szero>
    17b8:	f3 c0       	rjmp	.+486    	; 0x19a0 <__fp_nan>

000017ba <__divsf3x>:
    17ba:	14 d1       	rcall	.+552    	; 0x19e4 <__fp_split3>
    17bc:	98 f3       	brcs	.-26     	; 0x17a4 <__divsf3+0x4>

000017be <__divsf3_pse>:
    17be:	99 23       	and	r25, r25
    17c0:	c9 f3       	breq	.-14     	; 0x17b4 <__divsf3+0x14>
    17c2:	55 23       	and	r21, r21
    17c4:	b1 f3       	breq	.-20     	; 0x17b2 <__divsf3+0x12>
    17c6:	95 1b       	sub	r25, r21
    17c8:	55 0b       	sbc	r21, r21
    17ca:	bb 27       	eor	r27, r27
    17cc:	aa 27       	eor	r26, r26
    17ce:	62 17       	cp	r22, r18
    17d0:	73 07       	cpc	r23, r19
    17d2:	84 07       	cpc	r24, r20
    17d4:	38 f0       	brcs	.+14     	; 0x17e4 <__divsf3_pse+0x26>
    17d6:	9f 5f       	subi	r25, 0xFF	; 255
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	44 1f       	adc	r20, r20
    17e0:	aa 1f       	adc	r26, r26
    17e2:	a9 f3       	breq	.-22     	; 0x17ce <__divsf3_pse+0x10>
    17e4:	33 d0       	rcall	.+102    	; 0x184c <__divsf3_pse+0x8e>
    17e6:	0e 2e       	mov	r0, r30
    17e8:	3a f0       	brmi	.+14     	; 0x17f8 <__divsf3_pse+0x3a>
    17ea:	e0 e8       	ldi	r30, 0x80	; 128
    17ec:	30 d0       	rcall	.+96     	; 0x184e <__divsf3_pse+0x90>
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	50 40       	sbci	r21, 0x00	; 0
    17f2:	e6 95       	lsr	r30
    17f4:	00 1c       	adc	r0, r0
    17f6:	ca f7       	brpl	.-14     	; 0x17ea <__divsf3_pse+0x2c>
    17f8:	29 d0       	rcall	.+82     	; 0x184c <__divsf3_pse+0x8e>
    17fa:	fe 2f       	mov	r31, r30
    17fc:	27 d0       	rcall	.+78     	; 0x184c <__divsf3_pse+0x8e>
    17fe:	66 0f       	add	r22, r22
    1800:	77 1f       	adc	r23, r23
    1802:	88 1f       	adc	r24, r24
    1804:	bb 1f       	adc	r27, r27
    1806:	26 17       	cp	r18, r22
    1808:	37 07       	cpc	r19, r23
    180a:	48 07       	cpc	r20, r24
    180c:	ab 07       	cpc	r26, r27
    180e:	b0 e8       	ldi	r27, 0x80	; 128
    1810:	09 f0       	breq	.+2      	; 0x1814 <__divsf3_pse+0x56>
    1812:	bb 0b       	sbc	r27, r27
    1814:	80 2d       	mov	r24, r0
    1816:	bf 01       	movw	r22, r30
    1818:	ff 27       	eor	r31, r31
    181a:	93 58       	subi	r25, 0x83	; 131
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	2a f0       	brmi	.+10     	; 0x182a <__divsf3_pse+0x6c>
    1820:	9e 3f       	cpi	r25, 0xFE	; 254
    1822:	51 05       	cpc	r21, r1
    1824:	68 f0       	brcs	.+26     	; 0x1840 <__divsf3_pse+0x82>
    1826:	b6 c0       	rjmp	.+364    	; 0x1994 <__fp_inf>
    1828:	00 c1       	rjmp	.+512    	; 0x1a2a <__fp_szero>
    182a:	5f 3f       	cpi	r21, 0xFF	; 255
    182c:	ec f3       	brlt	.-6      	; 0x1828 <__divsf3_pse+0x6a>
    182e:	98 3e       	cpi	r25, 0xE8	; 232
    1830:	dc f3       	brlt	.-10     	; 0x1828 <__divsf3_pse+0x6a>
    1832:	86 95       	lsr	r24
    1834:	77 95       	ror	r23
    1836:	67 95       	ror	r22
    1838:	b7 95       	ror	r27
    183a:	f7 95       	ror	r31
    183c:	9f 5f       	subi	r25, 0xFF	; 255
    183e:	c9 f7       	brne	.-14     	; 0x1832 <__divsf3_pse+0x74>
    1840:	88 0f       	add	r24, r24
    1842:	91 1d       	adc	r25, r1
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	97 f9       	bld	r25, 7
    184a:	08 95       	ret
    184c:	e1 e0       	ldi	r30, 0x01	; 1
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	bb 1f       	adc	r27, r27
    1856:	62 17       	cp	r22, r18
    1858:	73 07       	cpc	r23, r19
    185a:	84 07       	cpc	r24, r20
    185c:	ba 07       	cpc	r27, r26
    185e:	20 f0       	brcs	.+8      	; 0x1868 <__divsf3_pse+0xaa>
    1860:	62 1b       	sub	r22, r18
    1862:	73 0b       	sbc	r23, r19
    1864:	84 0b       	sbc	r24, r20
    1866:	ba 0b       	sbc	r27, r26
    1868:	ee 1f       	adc	r30, r30
    186a:	88 f7       	brcc	.-30     	; 0x184e <__divsf3_pse+0x90>
    186c:	e0 95       	com	r30
    186e:	08 95       	ret

00001870 <__fixsfsi>:
    1870:	04 d0       	rcall	.+8      	; 0x187a <__fixunssfsi>
    1872:	68 94       	set
    1874:	b1 11       	cpse	r27, r1
    1876:	d9 c0       	rjmp	.+434    	; 0x1a2a <__fp_szero>
    1878:	08 95       	ret

0000187a <__fixunssfsi>:
    187a:	bc d0       	rcall	.+376    	; 0x19f4 <__fp_splitA>
    187c:	88 f0       	brcs	.+34     	; 0x18a0 <__fixunssfsi+0x26>
    187e:	9f 57       	subi	r25, 0x7F	; 127
    1880:	90 f0       	brcs	.+36     	; 0x18a6 <__fixunssfsi+0x2c>
    1882:	b9 2f       	mov	r27, r25
    1884:	99 27       	eor	r25, r25
    1886:	b7 51       	subi	r27, 0x17	; 23
    1888:	a0 f0       	brcs	.+40     	; 0x18b2 <__fixunssfsi+0x38>
    188a:	d1 f0       	breq	.+52     	; 0x18c0 <__fixunssfsi+0x46>
    188c:	66 0f       	add	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	88 1f       	adc	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	1a f0       	brmi	.+6      	; 0x189c <__fixunssfsi+0x22>
    1896:	ba 95       	dec	r27
    1898:	c9 f7       	brne	.-14     	; 0x188c <__fixunssfsi+0x12>
    189a:	12 c0       	rjmp	.+36     	; 0x18c0 <__fixunssfsi+0x46>
    189c:	b1 30       	cpi	r27, 0x01	; 1
    189e:	81 f0       	breq	.+32     	; 0x18c0 <__fixunssfsi+0x46>
    18a0:	c3 d0       	rcall	.+390    	; 0x1a28 <__fp_zero>
    18a2:	b1 e0       	ldi	r27, 0x01	; 1
    18a4:	08 95       	ret
    18a6:	c0 c0       	rjmp	.+384    	; 0x1a28 <__fp_zero>
    18a8:	67 2f       	mov	r22, r23
    18aa:	78 2f       	mov	r23, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	b8 5f       	subi	r27, 0xF8	; 248
    18b0:	39 f0       	breq	.+14     	; 0x18c0 <__fixunssfsi+0x46>
    18b2:	b9 3f       	cpi	r27, 0xF9	; 249
    18b4:	cc f3       	brlt	.-14     	; 0x18a8 <__fixunssfsi+0x2e>
    18b6:	86 95       	lsr	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	b3 95       	inc	r27
    18be:	d9 f7       	brne	.-10     	; 0x18b6 <__fixunssfsi+0x3c>
    18c0:	3e f4       	brtc	.+14     	; 0x18d0 <__fixunssfsi+0x56>
    18c2:	90 95       	com	r25
    18c4:	80 95       	com	r24
    18c6:	70 95       	com	r23
    18c8:	61 95       	neg	r22
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	08 95       	ret

000018d2 <__floatunsisf>:
    18d2:	e8 94       	clt
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <__floatsisf+0x12>

000018d6 <__floatsisf>:
    18d6:	97 fb       	bst	r25, 7
    18d8:	3e f4       	brtc	.+14     	; 0x18e8 <__floatsisf+0x12>
    18da:	90 95       	com	r25
    18dc:	80 95       	com	r24
    18de:	70 95       	com	r23
    18e0:	61 95       	neg	r22
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	99 23       	and	r25, r25
    18ea:	a9 f0       	breq	.+42     	; 0x1916 <__floatsisf+0x40>
    18ec:	f9 2f       	mov	r31, r25
    18ee:	96 e9       	ldi	r25, 0x96	; 150
    18f0:	bb 27       	eor	r27, r27
    18f2:	93 95       	inc	r25
    18f4:	f6 95       	lsr	r31
    18f6:	87 95       	ror	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f1 11       	cpse	r31, r1
    1900:	f8 cf       	rjmp	.-16     	; 0x18f2 <__floatsisf+0x1c>
    1902:	fa f4       	brpl	.+62     	; 0x1942 <__floatsisf+0x6c>
    1904:	bb 0f       	add	r27, r27
    1906:	11 f4       	brne	.+4      	; 0x190c <__floatsisf+0x36>
    1908:	60 ff       	sbrs	r22, 0
    190a:	1b c0       	rjmp	.+54     	; 0x1942 <__floatsisf+0x6c>
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	16 c0       	rjmp	.+44     	; 0x1942 <__floatsisf+0x6c>
    1916:	88 23       	and	r24, r24
    1918:	11 f0       	breq	.+4      	; 0x191e <__floatsisf+0x48>
    191a:	96 e9       	ldi	r25, 0x96	; 150
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <__floatsisf+0x6a>
    191e:	77 23       	and	r23, r23
    1920:	21 f0       	breq	.+8      	; 0x192a <__floatsisf+0x54>
    1922:	9e e8       	ldi	r25, 0x8E	; 142
    1924:	87 2f       	mov	r24, r23
    1926:	76 2f       	mov	r23, r22
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <__floatsisf+0x5e>
    192a:	66 23       	and	r22, r22
    192c:	71 f0       	breq	.+28     	; 0x194a <__floatsisf+0x74>
    192e:	96 e8       	ldi	r25, 0x86	; 134
    1930:	86 2f       	mov	r24, r22
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	2a f0       	brmi	.+10     	; 0x1942 <__floatsisf+0x6c>
    1938:	9a 95       	dec	r25
    193a:	66 0f       	add	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	da f7       	brpl	.-10     	; 0x1938 <__floatsisf+0x62>
    1942:	88 0f       	add	r24, r24
    1944:	96 95       	lsr	r25
    1946:	87 95       	ror	r24
    1948:	97 f9       	bld	r25, 7
    194a:	08 95       	ret

0000194c <__fp_cmp>:
    194c:	99 0f       	add	r25, r25
    194e:	00 08       	sbc	r0, r0
    1950:	55 0f       	add	r21, r21
    1952:	aa 0b       	sbc	r26, r26
    1954:	e0 e8       	ldi	r30, 0x80	; 128
    1956:	fe ef       	ldi	r31, 0xFE	; 254
    1958:	16 16       	cp	r1, r22
    195a:	17 06       	cpc	r1, r23
    195c:	e8 07       	cpc	r30, r24
    195e:	f9 07       	cpc	r31, r25
    1960:	c0 f0       	brcs	.+48     	; 0x1992 <__fp_cmp+0x46>
    1962:	12 16       	cp	r1, r18
    1964:	13 06       	cpc	r1, r19
    1966:	e4 07       	cpc	r30, r20
    1968:	f5 07       	cpc	r31, r21
    196a:	98 f0       	brcs	.+38     	; 0x1992 <__fp_cmp+0x46>
    196c:	62 1b       	sub	r22, r18
    196e:	73 0b       	sbc	r23, r19
    1970:	84 0b       	sbc	r24, r20
    1972:	95 0b       	sbc	r25, r21
    1974:	39 f4       	brne	.+14     	; 0x1984 <__fp_cmp+0x38>
    1976:	0a 26       	eor	r0, r26
    1978:	61 f0       	breq	.+24     	; 0x1992 <__fp_cmp+0x46>
    197a:	23 2b       	or	r18, r19
    197c:	24 2b       	or	r18, r20
    197e:	25 2b       	or	r18, r21
    1980:	21 f4       	brne	.+8      	; 0x198a <__fp_cmp+0x3e>
    1982:	08 95       	ret
    1984:	0a 26       	eor	r0, r26
    1986:	09 f4       	brne	.+2      	; 0x198a <__fp_cmp+0x3e>
    1988:	a1 40       	sbci	r26, 0x01	; 1
    198a:	a6 95       	lsr	r26
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	81 1d       	adc	r24, r1
    1990:	81 1d       	adc	r24, r1
    1992:	08 95       	ret

00001994 <__fp_inf>:
    1994:	97 f9       	bld	r25, 7
    1996:	9f 67       	ori	r25, 0x7F	; 127
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	08 95       	ret

000019a0 <__fp_nan>:
    19a0:	9f ef       	ldi	r25, 0xFF	; 255
    19a2:	80 ec       	ldi	r24, 0xC0	; 192
    19a4:	08 95       	ret

000019a6 <__fp_pscA>:
    19a6:	00 24       	eor	r0, r0
    19a8:	0a 94       	dec	r0
    19aa:	16 16       	cp	r1, r22
    19ac:	17 06       	cpc	r1, r23
    19ae:	18 06       	cpc	r1, r24
    19b0:	09 06       	cpc	r0, r25
    19b2:	08 95       	ret

000019b4 <__fp_pscB>:
    19b4:	00 24       	eor	r0, r0
    19b6:	0a 94       	dec	r0
    19b8:	12 16       	cp	r1, r18
    19ba:	13 06       	cpc	r1, r19
    19bc:	14 06       	cpc	r1, r20
    19be:	05 06       	cpc	r0, r21
    19c0:	08 95       	ret

000019c2 <__fp_round>:
    19c2:	09 2e       	mov	r0, r25
    19c4:	03 94       	inc	r0
    19c6:	00 0c       	add	r0, r0
    19c8:	11 f4       	brne	.+4      	; 0x19ce <__fp_round+0xc>
    19ca:	88 23       	and	r24, r24
    19cc:	52 f0       	brmi	.+20     	; 0x19e2 <__fp_round+0x20>
    19ce:	bb 0f       	add	r27, r27
    19d0:	40 f4       	brcc	.+16     	; 0x19e2 <__fp_round+0x20>
    19d2:	bf 2b       	or	r27, r31
    19d4:	11 f4       	brne	.+4      	; 0x19da <__fp_round+0x18>
    19d6:	60 ff       	sbrs	r22, 0
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <__fp_round+0x20>
    19da:	6f 5f       	subi	r22, 0xFF	; 255
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	8f 4f       	sbci	r24, 0xFF	; 255
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	08 95       	ret

000019e4 <__fp_split3>:
    19e4:	57 fd       	sbrc	r21, 7
    19e6:	90 58       	subi	r25, 0x80	; 128
    19e8:	44 0f       	add	r20, r20
    19ea:	55 1f       	adc	r21, r21
    19ec:	59 f0       	breq	.+22     	; 0x1a04 <__fp_splitA+0x10>
    19ee:	5f 3f       	cpi	r21, 0xFF	; 255
    19f0:	71 f0       	breq	.+28     	; 0x1a0e <__fp_splitA+0x1a>
    19f2:	47 95       	ror	r20

000019f4 <__fp_splitA>:
    19f4:	88 0f       	add	r24, r24
    19f6:	97 fb       	bst	r25, 7
    19f8:	99 1f       	adc	r25, r25
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <__fp_splitA+0x20>
    19fc:	9f 3f       	cpi	r25, 0xFF	; 255
    19fe:	79 f0       	breq	.+30     	; 0x1a1e <__fp_splitA+0x2a>
    1a00:	87 95       	ror	r24
    1a02:	08 95       	ret
    1a04:	12 16       	cp	r1, r18
    1a06:	13 06       	cpc	r1, r19
    1a08:	14 06       	cpc	r1, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	f2 cf       	rjmp	.-28     	; 0x19f2 <__fp_split3+0xe>
    1a0e:	46 95       	lsr	r20
    1a10:	f1 df       	rcall	.-30     	; 0x19f4 <__fp_splitA>
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <__fp_splitA+0x30>
    1a14:	16 16       	cp	r1, r22
    1a16:	17 06       	cpc	r1, r23
    1a18:	18 06       	cpc	r1, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	f1 cf       	rjmp	.-30     	; 0x1a00 <__fp_splitA+0xc>
    1a1e:	86 95       	lsr	r24
    1a20:	71 05       	cpc	r23, r1
    1a22:	61 05       	cpc	r22, r1
    1a24:	08 94       	sec
    1a26:	08 95       	ret

00001a28 <__fp_zero>:
    1a28:	e8 94       	clt

00001a2a <__fp_szero>:
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	66 27       	eor	r22, r22
    1a2e:	77 27       	eor	r23, r23
    1a30:	cb 01       	movw	r24, r22
    1a32:	97 f9       	bld	r25, 7
    1a34:	08 95       	ret

00001a36 <__gesf2>:
    1a36:	8a df       	rcall	.-236    	; 0x194c <__fp_cmp>
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <__gesf2+0x6>
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	08 95       	ret

00001a3e <__mulsf3>:
    1a3e:	0b d0       	rcall	.+22     	; 0x1a56 <__mulsf3x>
    1a40:	c0 cf       	rjmp	.-128    	; 0x19c2 <__fp_round>
    1a42:	b1 df       	rcall	.-158    	; 0x19a6 <__fp_pscA>
    1a44:	28 f0       	brcs	.+10     	; 0x1a50 <__mulsf3+0x12>
    1a46:	b6 df       	rcall	.-148    	; 0x19b4 <__fp_pscB>
    1a48:	18 f0       	brcs	.+6      	; 0x1a50 <__mulsf3+0x12>
    1a4a:	95 23       	and	r25, r21
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__mulsf3+0x12>
    1a4e:	a2 cf       	rjmp	.-188    	; 0x1994 <__fp_inf>
    1a50:	a7 cf       	rjmp	.-178    	; 0x19a0 <__fp_nan>
    1a52:	11 24       	eor	r1, r1
    1a54:	ea cf       	rjmp	.-44     	; 0x1a2a <__fp_szero>

00001a56 <__mulsf3x>:
    1a56:	c6 df       	rcall	.-116    	; 0x19e4 <__fp_split3>
    1a58:	a0 f3       	brcs	.-24     	; 0x1a42 <__mulsf3+0x4>

00001a5a <__mulsf3_pse>:
    1a5a:	95 9f       	mul	r25, r21
    1a5c:	d1 f3       	breq	.-12     	; 0x1a52 <__mulsf3+0x14>
    1a5e:	95 0f       	add	r25, r21
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	55 1f       	adc	r21, r21
    1a64:	62 9f       	mul	r22, r18
    1a66:	f0 01       	movw	r30, r0
    1a68:	72 9f       	mul	r23, r18
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	b1 1d       	adc	r27, r1
    1a70:	63 9f       	mul	r22, r19
    1a72:	aa 27       	eor	r26, r26
    1a74:	f0 0d       	add	r31, r0
    1a76:	b1 1d       	adc	r27, r1
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	64 9f       	mul	r22, r20
    1a7c:	66 27       	eor	r22, r22
    1a7e:	b0 0d       	add	r27, r0
    1a80:	a1 1d       	adc	r26, r1
    1a82:	66 1f       	adc	r22, r22
    1a84:	82 9f       	mul	r24, r18
    1a86:	22 27       	eor	r18, r18
    1a88:	b0 0d       	add	r27, r0
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	62 1f       	adc	r22, r18
    1a8e:	73 9f       	mul	r23, r19
    1a90:	b0 0d       	add	r27, r0
    1a92:	a1 1d       	adc	r26, r1
    1a94:	62 1f       	adc	r22, r18
    1a96:	83 9f       	mul	r24, r19
    1a98:	a0 0d       	add	r26, r0
    1a9a:	61 1d       	adc	r22, r1
    1a9c:	22 1f       	adc	r18, r18
    1a9e:	74 9f       	mul	r23, r20
    1aa0:	33 27       	eor	r19, r19
    1aa2:	a0 0d       	add	r26, r0
    1aa4:	61 1d       	adc	r22, r1
    1aa6:	23 1f       	adc	r18, r19
    1aa8:	84 9f       	mul	r24, r20
    1aaa:	60 0d       	add	r22, r0
    1aac:	21 1d       	adc	r18, r1
    1aae:	82 2f       	mov	r24, r18
    1ab0:	76 2f       	mov	r23, r22
    1ab2:	6a 2f       	mov	r22, r26
    1ab4:	11 24       	eor	r1, r1
    1ab6:	9f 57       	subi	r25, 0x7F	; 127
    1ab8:	50 40       	sbci	r21, 0x00	; 0
    1aba:	8a f0       	brmi	.+34     	; 0x1ade <__mulsf3_pse+0x84>
    1abc:	e1 f0       	breq	.+56     	; 0x1af6 <__mulsf3_pse+0x9c>
    1abe:	88 23       	and	r24, r24
    1ac0:	4a f0       	brmi	.+18     	; 0x1ad4 <__mulsf3_pse+0x7a>
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	66 1f       	adc	r22, r22
    1aca:	77 1f       	adc	r23, r23
    1acc:	88 1f       	adc	r24, r24
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	50 40       	sbci	r21, 0x00	; 0
    1ad2:	a9 f7       	brne	.-22     	; 0x1abe <__mulsf3_pse+0x64>
    1ad4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad6:	51 05       	cpc	r21, r1
    1ad8:	70 f0       	brcs	.+28     	; 0x1af6 <__mulsf3_pse+0x9c>
    1ada:	5c cf       	rjmp	.-328    	; 0x1994 <__fp_inf>
    1adc:	a6 cf       	rjmp	.-180    	; 0x1a2a <__fp_szero>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	ec f3       	brlt	.-6      	; 0x1adc <__mulsf3_pse+0x82>
    1ae2:	98 3e       	cpi	r25, 0xE8	; 232
    1ae4:	dc f3       	brlt	.-10     	; 0x1adc <__mulsf3_pse+0x82>
    1ae6:	86 95       	lsr	r24
    1ae8:	77 95       	ror	r23
    1aea:	67 95       	ror	r22
    1aec:	b7 95       	ror	r27
    1aee:	f7 95       	ror	r31
    1af0:	e7 95       	ror	r30
    1af2:	9f 5f       	subi	r25, 0xFF	; 255
    1af4:	c1 f7       	brne	.-16     	; 0x1ae6 <__mulsf3_pse+0x8c>
    1af6:	fe 2b       	or	r31, r30
    1af8:	88 0f       	add	r24, r24
    1afa:	91 1d       	adc	r25, r1
    1afc:	96 95       	lsr	r25
    1afe:	87 95       	ror	r24
    1b00:	97 f9       	bld	r25, 7
    1b02:	08 95       	ret

00001b04 <calloc>:
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	68 9f       	mul	r22, r24
    1b0e:	80 01       	movw	r16, r0
    1b10:	69 9f       	mul	r22, r25
    1b12:	10 0d       	add	r17, r0
    1b14:	78 9f       	mul	r23, r24
    1b16:	10 0d       	add	r17, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	c8 01       	movw	r24, r16
    1b1c:	0d d0       	rcall	.+26     	; 0x1b38 <malloc>
    1b1e:	ec 01       	movw	r28, r24
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <calloc+0x28>
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	a8 01       	movw	r20, r16
    1b2a:	0b d1       	rcall	.+534    	; 0x1d42 <memset>
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <malloc>:
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	91 05       	cpc	r25, r1
    1b42:	10 f4       	brcc	.+4      	; 0x1b48 <malloc+0x10>
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	a0 91 4f 02 	lds	r26, 0x024F
    1b4c:	b0 91 50 02 	lds	r27, 0x0250
    1b50:	ed 01       	movw	r28, r26
    1b52:	e0 e0       	ldi	r30, 0x00	; 0
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	21 c0       	rjmp	.+66     	; 0x1b9e <malloc+0x66>
    1b5c:	88 81       	ld	r24, Y
    1b5e:	99 81       	ldd	r25, Y+1	; 0x01
    1b60:	86 17       	cp	r24, r22
    1b62:	97 07       	cpc	r25, r23
    1b64:	69 f4       	brne	.+26     	; 0x1b80 <malloc+0x48>
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <malloc+0x3c>
    1b6e:	93 83       	std	Z+3, r25	; 0x03
    1b70:	82 83       	std	Z+2, r24	; 0x02
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <malloc+0x44>
    1b74:	90 93 50 02 	sts	0x0250, r25
    1b78:	80 93 4f 02 	sts	0x024F, r24
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	34 c0       	rjmp	.+104    	; 0x1be8 <malloc+0xb0>
    1b80:	68 17       	cp	r22, r24
    1b82:	79 07       	cpc	r23, r25
    1b84:	38 f4       	brcc	.+14     	; 0x1b94 <malloc+0x5c>
    1b86:	41 15       	cp	r20, r1
    1b88:	51 05       	cpc	r21, r1
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <malloc+0x5a>
    1b8c:	84 17       	cp	r24, r20
    1b8e:	95 07       	cpc	r25, r21
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <malloc+0x5c>
    1b92:	ac 01       	movw	r20, r24
    1b94:	fe 01       	movw	r30, r28
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	e9 01       	movw	r28, r18
    1b9e:	20 97       	sbiw	r28, 0x00	; 0
    1ba0:	e9 f6       	brne	.-70     	; 0x1b5c <malloc+0x24>
    1ba2:	41 15       	cp	r20, r1
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	a9 f1       	breq	.+106    	; 0x1c12 <malloc+0xda>
    1ba8:	ca 01       	movw	r24, r20
    1baa:	86 1b       	sub	r24, r22
    1bac:	97 0b       	sbc	r25, r23
    1bae:	04 97       	sbiw	r24, 0x04	; 4
    1bb0:	08 f4       	brcc	.+2      	; 0x1bb4 <malloc+0x7c>
    1bb2:	ba 01       	movw	r22, r20
    1bb4:	e0 e0       	ldi	r30, 0x00	; 0
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	2a c0       	rjmp	.+84     	; 0x1c0e <malloc+0xd6>
    1bba:	8d 91       	ld	r24, X+
    1bbc:	9c 91       	ld	r25, X
    1bbe:	11 97       	sbiw	r26, 0x01	; 1
    1bc0:	84 17       	cp	r24, r20
    1bc2:	95 07       	cpc	r25, r21
    1bc4:	f9 f4       	brne	.+62     	; 0x1c04 <malloc+0xcc>
    1bc6:	64 17       	cp	r22, r20
    1bc8:	75 07       	cpc	r23, r21
    1bca:	81 f4       	brne	.+32     	; 0x1bec <malloc+0xb4>
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	8d 91       	ld	r24, X+
    1bd0:	9c 91       	ld	r25, X
    1bd2:	13 97       	sbiw	r26, 0x03	; 3
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <malloc+0xa6>
    1bd8:	93 83       	std	Z+3, r25	; 0x03
    1bda:	82 83       	std	Z+2, r24	; 0x02
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <malloc+0xae>
    1bde:	90 93 50 02 	sts	0x0250, r25
    1be2:	80 93 4f 02 	sts	0x024F, r24
    1be6:	fd 01       	movw	r30, r26
    1be8:	32 96       	adiw	r30, 0x02	; 2
    1bea:	4f c0       	rjmp	.+158    	; 0x1c8a <malloc+0x152>
    1bec:	ca 01       	movw	r24, r20
    1bee:	86 1b       	sub	r24, r22
    1bf0:	97 0b       	sbc	r25, r23
    1bf2:	fd 01       	movw	r30, r26
    1bf4:	e8 0f       	add	r30, r24
    1bf6:	f9 1f       	adc	r31, r25
    1bf8:	61 93       	st	Z+, r22
    1bfa:	71 93       	st	Z+, r23
    1bfc:	02 97       	sbiw	r24, 0x02	; 2
    1bfe:	8d 93       	st	X+, r24
    1c00:	9c 93       	st	X, r25
    1c02:	43 c0       	rjmp	.+134    	; 0x1c8a <malloc+0x152>
    1c04:	fd 01       	movw	r30, r26
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	d9 01       	movw	r26, r18
    1c0e:	10 97       	sbiw	r26, 0x00	; 0
    1c10:	a1 f6       	brne	.-88     	; 0x1bba <malloc+0x82>
    1c12:	80 91 4d 02 	lds	r24, 0x024D
    1c16:	90 91 4e 02 	lds	r25, 0x024E
    1c1a:	89 2b       	or	r24, r25
    1c1c:	41 f4       	brne	.+16     	; 0x1c2e <malloc+0xf6>
    1c1e:	80 91 02 01 	lds	r24, 0x0102
    1c22:	90 91 03 01 	lds	r25, 0x0103
    1c26:	90 93 4e 02 	sts	0x024E, r25
    1c2a:	80 93 4d 02 	sts	0x024D, r24
    1c2e:	40 91 04 01 	lds	r20, 0x0104
    1c32:	50 91 05 01 	lds	r21, 0x0105
    1c36:	41 15       	cp	r20, r1
    1c38:	51 05       	cpc	r21, r1
    1c3a:	41 f4       	brne	.+16     	; 0x1c4c <malloc+0x114>
    1c3c:	4d b7       	in	r20, 0x3d	; 61
    1c3e:	5e b7       	in	r21, 0x3e	; 62
    1c40:	80 91 00 01 	lds	r24, 0x0100
    1c44:	90 91 01 01 	lds	r25, 0x0101
    1c48:	48 1b       	sub	r20, r24
    1c4a:	59 0b       	sbc	r21, r25
    1c4c:	20 91 4d 02 	lds	r18, 0x024D
    1c50:	30 91 4e 02 	lds	r19, 0x024E
    1c54:	24 17       	cp	r18, r20
    1c56:	35 07       	cpc	r19, r21
    1c58:	b0 f4       	brcc	.+44     	; 0x1c86 <malloc+0x14e>
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	82 1b       	sub	r24, r18
    1c5e:	93 0b       	sbc	r25, r19
    1c60:	86 17       	cp	r24, r22
    1c62:	97 07       	cpc	r25, r23
    1c64:	80 f0       	brcs	.+32     	; 0x1c86 <malloc+0x14e>
    1c66:	ab 01       	movw	r20, r22
    1c68:	4e 5f       	subi	r20, 0xFE	; 254
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	84 17       	cp	r24, r20
    1c6e:	95 07       	cpc	r25, r21
    1c70:	50 f0       	brcs	.+20     	; 0x1c86 <malloc+0x14e>
    1c72:	42 0f       	add	r20, r18
    1c74:	53 1f       	adc	r21, r19
    1c76:	50 93 4e 02 	sts	0x024E, r21
    1c7a:	40 93 4d 02 	sts	0x024D, r20
    1c7e:	f9 01       	movw	r30, r18
    1c80:	61 93       	st	Z+, r22
    1c82:	71 93       	st	Z+, r23
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <malloc+0x152>
    1c86:	e0 e0       	ldi	r30, 0x00	; 0
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	cf 01       	movw	r24, r30
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <free>:
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <free+0xa>
    1c9a:	50 c0       	rjmp	.+160    	; 0x1d3c <free+0xaa>
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	22 97       	sbiw	r28, 0x02	; 2
    1ca0:	1b 82       	std	Y+3, r1	; 0x03
    1ca2:	1a 82       	std	Y+2, r1	; 0x02
    1ca4:	a0 91 4f 02 	lds	r26, 0x024F
    1ca8:	b0 91 50 02 	lds	r27, 0x0250
    1cac:	10 97       	sbiw	r26, 0x00	; 0
    1cae:	09 f1       	breq	.+66     	; 0x1cf2 <free+0x60>
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	ac 17       	cp	r26, r28
    1cb6:	bd 07       	cpc	r27, r29
    1cb8:	08 f1       	brcs	.+66     	; 0x1cfc <free+0x6a>
    1cba:	bb 83       	std	Y+3, r27	; 0x03
    1cbc:	aa 83       	std	Y+2, r26	; 0x02
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	21 91       	ld	r18, Z+
    1cc2:	31 91       	ld	r19, Z+
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	ae 17       	cp	r26, r30
    1cca:	bf 07       	cpc	r27, r31
    1ccc:	79 f4       	brne	.+30     	; 0x1cec <free+0x5a>
    1cce:	8d 91       	ld	r24, X+
    1cd0:	9c 91       	ld	r25, X
    1cd2:	11 97       	sbiw	r26, 0x01	; 1
    1cd4:	28 0f       	add	r18, r24
    1cd6:	39 1f       	adc	r19, r25
    1cd8:	2e 5f       	subi	r18, 0xFE	; 254
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	39 83       	std	Y+1, r19	; 0x01
    1cde:	28 83       	st	Y, r18
    1ce0:	12 96       	adiw	r26, 0x02	; 2
    1ce2:	8d 91       	ld	r24, X+
    1ce4:	9c 91       	ld	r25, X
    1ce6:	13 97       	sbiw	r26, 0x03	; 3
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02
    1cec:	41 15       	cp	r20, r1
    1cee:	51 05       	cpc	r21, r1
    1cf0:	71 f4       	brne	.+28     	; 0x1d0e <free+0x7c>
    1cf2:	d0 93 50 02 	sts	0x0250, r29
    1cf6:	c0 93 4f 02 	sts	0x024F, r28
    1cfa:	20 c0       	rjmp	.+64     	; 0x1d3c <free+0xaa>
    1cfc:	12 96       	adiw	r26, 0x02	; 2
    1cfe:	8d 91       	ld	r24, X+
    1d00:	9c 91       	ld	r25, X
    1d02:	13 97       	sbiw	r26, 0x03	; 3
    1d04:	ad 01       	movw	r20, r26
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	11 f0       	breq	.+4      	; 0x1d0e <free+0x7c>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	d3 cf       	rjmp	.-90     	; 0x1cb4 <free+0x22>
    1d0e:	fa 01       	movw	r30, r20
    1d10:	d3 83       	std	Z+3, r29	; 0x03
    1d12:	c2 83       	std	Z+2, r28	; 0x02
    1d14:	21 91       	ld	r18, Z+
    1d16:	31 91       	ld	r19, Z+
    1d18:	e2 0f       	add	r30, r18
    1d1a:	f3 1f       	adc	r31, r19
    1d1c:	ce 17       	cp	r28, r30
    1d1e:	df 07       	cpc	r29, r31
    1d20:	69 f4       	brne	.+26     	; 0x1d3c <free+0xaa>
    1d22:	88 81       	ld	r24, Y
    1d24:	99 81       	ldd	r25, Y+1	; 0x01
    1d26:	28 0f       	add	r18, r24
    1d28:	39 1f       	adc	r19, r25
    1d2a:	2e 5f       	subi	r18, 0xFE	; 254
    1d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2e:	fa 01       	movw	r30, r20
    1d30:	31 83       	std	Z+1, r19	; 0x01
    1d32:	20 83       	st	Z, r18
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	93 83       	std	Z+3, r25	; 0x03
    1d3a:	82 83       	std	Z+2, r24	; 0x02
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <memset>:
    1d42:	dc 01       	movw	r26, r24
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <memset+0x6>
    1d46:	6d 93       	st	X+, r22
    1d48:	41 50       	subi	r20, 0x01	; 1
    1d4a:	50 40       	sbci	r21, 0x00	; 0
    1d4c:	e0 f7       	brcc	.-8      	; 0x1d46 <memset+0x4>
    1d4e:	08 95       	ret

00001d50 <_exit>:
    1d50:	f8 94       	cli

00001d52 <__stop_program>:
    1d52:	ff cf       	rjmp	.-2      	; 0x1d52 <__stop_program>
