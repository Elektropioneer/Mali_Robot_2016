
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000020bc  00002150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  0080010a  0080010a  0000215a  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000948  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002435  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2e  00000000  00000000  0000522f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028be  00000000  00000000  00005d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  0000861c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b7d  00000000  00000000  00008bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000310  00000000  00000000  00009729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	servo_set_left_grabber_position(-29);
	servo_set_right_grabber_position(100);
}
void servo_set_grabbers_down(void)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
}
static int combination_check()
{
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	a4 c5       	rjmp	.+2888   	; 0xb92 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec eb       	ldi	r30, 0xBC	; 188
      a8:	f0 e2       	ldi	r31, 0x20	; 32
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a1 35       	cpi	r26, 0x51	; 81
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61

	system_init();
      e6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0xfc>

000001d0 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	00 d0       	rcall	.+0      	; 0x1da <servo_init+0xa>
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1e2:	ad e2       	ldi	r26, 0x2D	; 45
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	ed e2       	ldi	r30, 0x2D	; 45
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	88 63       	ori	r24, 0x38	; 56
     1ee:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1f0:	a4 e2       	ldi	r26, 0x24	; 36
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e4 e2       	ldi	r30, 0x24	; 36
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	80 68       	ori	r24, 0x80	; 128
     1fc:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     1fe:	e4 e9       	ldi	r30, 0x94	; 148
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	11 82       	std	Z+1, r1	; 0x01
     204:	10 82       	st	Z, r1
	TCNT0 = 0;
     206:	e6 e4       	ldi	r30, 0x46	; 70
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	10 82       	st	Z, r1

	OCR3A = 0;
     20c:	e8 e9       	ldi	r30, 0x98	; 152
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	11 82       	std	Z+1, r1	; 0x01
     212:	10 82       	st	Z, r1
	OCR3B = 0;
     214:	ea e9       	ldi	r30, 0x9A	; 154
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	11 82       	std	Z+1, r1	; 0x01
     21a:	10 82       	st	Z, r1
	OCR3C = 0;
     21c:	ec e9       	ldi	r30, 0x9C	; 156
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     224:	e0 e9       	ldi	r30, 0x90	; 144
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	8e eb       	ldi	r24, 0xBE	; 190
     22a:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     22c:	e1 e9       	ldi	r30, 0x91	; 145
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	8a e1       	ldi	r24, 0x1A	; 26
     232:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     234:	e4 e4       	ldi	r30, 0x44	; 68
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	8b e6       	ldi	r24, 0x6B	; 107
     23a:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     23c:	06 e9       	ldi	r16, 0x96	; 150
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	cc 01       	movw	r24, r24
     246:	a0 e0       	ldi	r26, 0x00	; 0
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	bc 01       	movw	r22, r24
     24c:	cd 01       	movw	r24, r26
     24e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	bc 01       	movw	r22, r24
     258:	cd 01       	movw	r24, r26
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	51 e4       	ldi	r21, 0x41	; 65
     262:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     266:	dc 01       	movw	r26, r24
     268:	cb 01       	movw	r24, r22
     26a:	9c 01       	movw	r18, r24
     26c:	ad 01       	movw	r20, r26
     26e:	60 e8       	ldi	r22, 0x80	; 128
     270:	76 e9       	ldi	r23, 0x96	; 150
     272:	88 e1       	ldi	r24, 0x18	; 24
     274:	9b e4       	ldi	r25, 0x4B	; 75
     276:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	bc 01       	movw	r22, r24
     280:	cd 01       	movw	r24, r26
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	5f e3       	ldi	r21, 0x3F	; 63
     28a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	bc 01       	movw	r22, r24
     294:	cd 01       	movw	r24, r26
     296:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	f8 01       	movw	r30, r16
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	80 83       	st	Z, r24
}
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <servo_set_duty_cycle_umbrella+0xe>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <servo_set_duty_cycle_umbrella+0x10>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	9c 83       	std	Y+4, r25	; 0x04
     2c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2ca:	e6 e9       	ldi	r30, 0x96	; 150
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	cc 01       	movw	r24, r24
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	53 e4       	ldi	r21, 0x43	; 67
     2f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	7c 01       	movw	r14, r24
     2fa:	8d 01       	movw	r16, r26
     2fc:	8b 81       	ldd	r24, Y+3	; 0x03
     2fe:	9c 81       	ldd	r25, Y+4	; 0x04
     300:	aa 27       	eor	r26, r26
     302:	97 fd       	sbrc	r25, 7
     304:	a0 95       	com	r26
     306:	ba 2f       	mov	r27, r26
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     310:	9b 01       	movw	r18, r22
     312:	ac 01       	movw	r20, r24
     314:	c8 01       	movw	r24, r16
     316:	b7 01       	movw	r22, r14
     318:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     330:	dc 01       	movw	r26, r24
     332:	cb 01       	movw	r24, r22
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     344:	e9 e9       	ldi	r30, 0x99	; 153
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	89 2f       	mov	r24, r25
     34e:	99 27       	eor	r25, r25
     350:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     352:	e8 e9       	ldi	r30, 0x98	; 152
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	80 83       	st	Z, r24
}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	08 95       	ret

00000370 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	00 d0       	rcall	.+0      	; 0x37e <servo_set_duty_cycle_door+0xe>
     37e:	00 d0       	rcall	.+0      	; 0x380 <servo_set_duty_cycle_door+0x10>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     388:	e6 e9       	ldi	r30, 0x96	; 150
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	91 81       	ldd	r25, Z+1	; 0x01
     390:	cc 01       	movw	r24, r24
     392:	a0 e0       	ldi	r26, 0x00	; 0
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4f e7       	ldi	r20, 0x7F	; 127
     3ac:	53 e4       	ldi	r21, 0x43	; 67
     3ae:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	7c 01       	movw	r14, r24
     3b8:	8d 01       	movw	r16, r26
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	aa 27       	eor	r26, r26
     3c0:	97 fd       	sbrc	r25, 7
     3c2:	a0 95       	com	r26
     3c4:	ba 2f       	mov	r27, r26
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c8 01       	movw	r24, r16
     3d4:	b7 01       	movw	r22, r14
     3d6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	5f e3       	ldi	r21, 0x3F	; 63
     3ea:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	bc 01       	movw	r22, r24
     3f4:	cd 01       	movw	r24, r26
     3f6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     402:	eb e9       	ldi	r30, 0x9B	; 155
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	9a 81       	ldd	r25, Y+2	; 0x02
     40a:	89 2f       	mov	r24, r25
     40c:	99 27       	eor	r25, r25
     40e:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     410:	ea e9       	ldi	r30, 0x9A	; 154
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	80 83       	st	Z, r24
}
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	08 95       	ret

0000042e <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	df 93       	push	r29
     438:	cf 93       	push	r28
     43a:	00 d0       	rcall	.+0      	; 0x43c <servo_set_duty_cycle_left_grabber+0xe>
     43c:	00 d0       	rcall	.+0      	; 0x43e <servo_set_duty_cycle_left_grabber+0x10>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9c 83       	std	Y+4, r25	; 0x04
     444:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     446:	e6 e9       	ldi	r30, 0x96	; 150
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	cc 01       	movw	r24, r24
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatunsisf>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	bc 01       	movw	r22, r24
     462:	cd 01       	movw	r24, r26
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	53 e4       	ldi	r21, 0x43	; 67
     46c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	7c 01       	movw	r14, r24
     476:	8d 01       	movw	r16, r26
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	aa 27       	eor	r26, r26
     47e:	97 fd       	sbrc	r25, 7
     480:	a0 95       	com	r26
     482:	ba 2f       	mov	r27, r26
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c8 01       	movw	r24, r16
     492:	b7 01       	movw	r22, r14
     494:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	bc 01       	movw	r22, r24
     49e:	cd 01       	movw	r24, r26
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	5f e3       	ldi	r21, 0x3F	; 63
     4a8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	9a 83       	std	Y+2, r25	; 0x02
     4be:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4c0:	ed e9       	ldi	r30, 0x9D	; 157
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	89 2f       	mov	r24, r25
     4ca:	99 27       	eor	r25, r25
     4cc:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4ce:	ec e9       	ldi	r30, 0x9C	; 156
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	80 83       	st	Z, r24
}
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	08 95       	ret

000004ec <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     4ec:	df 93       	push	r29
     4ee:	cf 93       	push	r28
     4f0:	0f 92       	push	r0
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	99 27       	eor	r25, r25
     4fc:	87 fd       	sbrc	r24, 7
     4fe:	90 95       	com	r25
     500:	a9 2f       	mov	r26, r25
     502:	b9 2f       	mov	r27, r25
     504:	bc 01       	movw	r22, r24
     506:	cd 01       	movw	r24, r26
     508:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	44 eb       	ldi	r20, 0xB4	; 180
     51a:	52 e4       	ldi	r21, 0x42	; 66
     51c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	26 e6       	ldi	r18, 0x66	; 102
     52a:	36 e6       	ldi	r19, 0x66	; 102
     52c:	46 e3       	ldi	r20, 0x36	; 54
     52e:	51 ec       	ldi	r21, 0xC1	; 193
     530:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	4c e6       	ldi	r20, 0x6C	; 108
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	9c 01       	movw	r18, r24
     54e:	ad 01       	movw	r20, r26
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	8f e7       	ldi	r24, 0x7F	; 127
     556:	93 e4       	ldi	r25, 0x43	; 67
     558:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	bc 01       	movw	r22, r24
     562:	cd 01       	movw	r24, r26
     564:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	a2 de       	rcall	.-700    	; 0x2b2 <servo_set_duty_cycle_umbrella>
}
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	99 27       	eor	r25, r25
     586:	87 fd       	sbrc	r24, 7
     588:	90 95       	com	r25
     58a:	a9 2f       	mov	r26, r25
     58c:	b9 2f       	mov	r27, r25
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	44 eb       	ldi	r20, 0xB4	; 180
     5a4:	52 e4       	ldi	r21, 0x42	; 66
     5a6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	bc 01       	movw	r22, r24
     5b0:	cd 01       	movw	r24, r26
     5b2:	26 e6       	ldi	r18, 0x66	; 102
     5b4:	36 e6       	ldi	r19, 0x66	; 102
     5b6:	46 e3       	ldi	r20, 0x36	; 54
     5b8:	51 ec       	ldi	r21, 0xC1	; 193
     5ba:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	4c e6       	ldi	r20, 0x6C	; 108
     5cc:	53 e4       	ldi	r21, 0x43	; 67
     5ce:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	9c 01       	movw	r18, r24
     5d8:	ad 01       	movw	r20, r26
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	8f e7       	ldi	r24, 0x7F	; 127
     5e0:	93 e4       	ldi	r25, 0x43	; 67
     5e2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	bc 01       	movw	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	bc de       	rcall	.-648    	; 0x370 <servo_set_duty_cycle_door>
}
     5f8:	0f 90       	pop	r0
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	0f 92       	push	r0
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	99 27       	eor	r25, r25
     610:	87 fd       	sbrc	r24, 7
     612:	90 95       	com	r25
     614:	a9 2f       	mov	r26, r25
     616:	b9 2f       	mov	r27, r25
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatsisf>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	44 eb       	ldi	r20, 0xB4	; 180
     62e:	52 e4       	ldi	r21, 0x42	; 66
     630:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__divsf3>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	bc 01       	movw	r22, r24
     63a:	cd 01       	movw	r24, r26
     63c:	26 e6       	ldi	r18, 0x66	; 102
     63e:	36 e6       	ldi	r19, 0x66	; 102
     640:	46 e3       	ldi	r20, 0x36	; 54
     642:	51 ec       	ldi	r21, 0xC1	; 193
     644:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4c e6       	ldi	r20, 0x6C	; 108
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__addsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	9c 01       	movw	r18, r24
     662:	ad 01       	movw	r20, r26
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	8f e7       	ldi	r24, 0x7F	; 127
     66a:	93 e4       	ldi	r25, 0x43	; 67
     66c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__subsf3>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fixsfsi>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	d6 de       	rcall	.-596    	; 0x42e <servo_set_duty_cycle_left_grabber>
}
     682:	0f 90       	pop	r0
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	08 95       	ret

0000068a <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     68a:	df 93       	push	r29
     68c:	cf 93       	push	r28
     68e:	0f 92       	push	r0
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     696:	e7 e4       	ldi	r30, 0x47	; 71
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	80 83       	st	Z, r24
}
     69e:	0f 90       	pop	r0
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	08 95       	ret

000006a6 <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-29);
     6ae:	83 ee       	ldi	r24, 0xE3	; 227
     6b0:	a7 df       	rcall	.-178    	; 0x600 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(100);
     6b2:	84 e6       	ldi	r24, 0x64	; 100
     6b4:	ea df       	rcall	.-44     	; 0x68a <servo_set_right_grabber_position>
}
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	6c 97       	sbiw	r28, 0x1c	; 28
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     6d0:	85 e5       	ldi	r24, 0x55	; 85
     6d2:	0c df       	rcall	.-488    	; 0x4ec <servo_set_umbrella_position>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	aa e7       	ldi	r26, 0x7A	; 122
     6da:	b4 e4       	ldi	r27, 0x44	; 68
     6dc:	89 8f       	std	Y+25, r24	; 0x19
     6de:	9a 8f       	std	Y+26, r25	; 0x1a
     6e0:	ab 8f       	std	Y+27, r26	; 0x1b
     6e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6e4:	69 8d       	ldd	r22, Y+25	; 0x19
     6e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e4       	ldi	r19, 0x40	; 64
     6f0:	4c e1       	ldi	r20, 0x1C	; 28
     6f2:	55 e4       	ldi	r21, 0x45	; 69
     6f4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	8d 8b       	std	Y+21, r24	; 0x15
     6fe:	9e 8b       	std	Y+22, r25	; 0x16
     700:	af 8b       	std	Y+23, r26	; 0x17
     702:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     704:	6d 89       	ldd	r22, Y+21	; 0x15
     706:	7e 89       	ldd	r23, Y+22	; 0x16
     708:	8f 89       	ldd	r24, Y+23	; 0x17
     70a:	98 8d       	ldd	r25, Y+24	; 0x18
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     718:	88 23       	and	r24, r24
     71a:	2c f4       	brge	.+10     	; 0x726 <actuators_umbrella+0x6a>
		__ticks = 1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	9c 8b       	std	Y+20, r25	; 0x14
     722:	8b 8b       	std	Y+19, r24	; 0x13
     724:	3f c0       	rjmp	.+126    	; 0x7a4 <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     726:	6d 89       	ldd	r22, Y+21	; 0x15
     728:	7e 89       	ldd	r23, Y+22	; 0x16
     72a:	8f 89       	ldd	r24, Y+23	; 0x17
     72c:	98 8d       	ldd	r25, Y+24	; 0x18
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	3f ef       	ldi	r19, 0xFF	; 255
     732:	4f e7       	ldi	r20, 0x7F	; 127
     734:	57 e4       	ldi	r21, 0x47	; 71
     736:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     73a:	18 16       	cp	r1, r24
     73c:	4c f5       	brge	.+82     	; 0x790 <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     73e:	69 8d       	ldd	r22, Y+25	; 0x19
     740:	7a 8d       	ldd	r23, Y+26	; 0x1a
     742:	8b 8d       	ldd	r24, Y+27	; 0x1b
     744:	9c 8d       	ldd	r25, Y+28	; 0x1c
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e2       	ldi	r20, 0x20	; 32
     74c:	51 e4       	ldi	r21, 0x41	; 65
     74e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	bc 01       	movw	r22, r24
     758:	cd 01       	movw	r24, r26
     75a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	9c 8b       	std	Y+20, r25	; 0x14
     764:	8b 8b       	std	Y+19, r24	; 0x13
     766:	0f c0       	rjmp	.+30     	; 0x786 <actuators_umbrella+0xca>
     768:	8a ef       	ldi	r24, 0xFA	; 250
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9a 8b       	std	Y+18, r25	; 0x12
     76e:	89 8b       	std	Y+17, r24	; 0x11
     770:	89 89       	ldd	r24, Y+17	; 0x11
     772:	9a 89       	ldd	r25, Y+18	; 0x12
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <actuators_umbrella+0xb8>
     778:	9a 8b       	std	Y+18, r25	; 0x12
     77a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     77c:	8b 89       	ldd	r24, Y+19	; 0x13
     77e:	9c 89       	ldd	r25, Y+20	; 0x14
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	9c 8b       	std	Y+20, r25	; 0x14
     784:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     786:	8b 89       	ldd	r24, Y+19	; 0x13
     788:	9c 89       	ldd	r25, Y+20	; 0x14
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	69 f7       	brne	.-38     	; 0x768 <actuators_umbrella+0xac>
     78e:	14 c0       	rjmp	.+40     	; 0x7b8 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     790:	6d 89       	ldd	r22, Y+21	; 0x15
     792:	7e 89       	ldd	r23, Y+22	; 0x16
     794:	8f 89       	ldd	r24, Y+23	; 0x17
     796:	98 8d       	ldd	r25, Y+24	; 0x18
     798:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	9c 8b       	std	Y+20, r25	; 0x14
     7a2:	8b 8b       	std	Y+19, r24	; 0x13
     7a4:	8b 89       	ldd	r24, Y+19	; 0x13
     7a6:	9c 89       	ldd	r25, Y+20	; 0x14
     7a8:	98 8b       	std	Y+16, r25	; 0x10
     7aa:	8f 87       	std	Y+15, r24	; 0x0f
     7ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ae:	98 89       	ldd	r25, Y+16	; 0x10
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <actuators_umbrella+0xf4>
     7b4:	98 8b       	std	Y+16, r25	; 0x10
     7b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	dd de       	rcall	.-582    	; 0x576 <servo_set_door_position>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	aa e7       	ldi	r26, 0x7A	; 122
     7c2:	b4 e4       	ldi	r27, 0x44	; 68
     7c4:	8b 87       	std	Y+11, r24	; 0x0b
     7c6:	9c 87       	std	Y+12, r25	; 0x0c
     7c8:	ad 87       	std	Y+13, r26	; 0x0d
     7ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7cc:	6b 85       	ldd	r22, Y+11	; 0x0b
     7ce:	7c 85       	ldd	r23, Y+12	; 0x0c
     7d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e4       	ldi	r19, 0x40	; 64
     7d8:	4c e1       	ldi	r20, 0x1C	; 28
     7da:	55 e4       	ldi	r21, 0x45	; 69
     7dc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	8f 83       	std	Y+7, r24	; 0x07
     7e6:	98 87       	std	Y+8, r25	; 0x08
     7e8:	a9 87       	std	Y+9, r26	; 0x09
     7ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7ec:	6f 81       	ldd	r22, Y+7	; 0x07
     7ee:	78 85       	ldd	r23, Y+8	; 0x08
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e8       	ldi	r20, 0x80	; 128
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     800:	88 23       	and	r24, r24
     802:	2c f4       	brge	.+10     	; 0x80e <actuators_umbrella+0x152>
		__ticks = 1;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9e 83       	std	Y+6, r25	; 0x06
     80a:	8d 83       	std	Y+5, r24	; 0x05
     80c:	3f c0       	rjmp	.+126    	; 0x88c <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     80e:	6f 81       	ldd	r22, Y+7	; 0x07
     810:	78 85       	ldd	r23, Y+8	; 0x08
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	9a 85       	ldd	r25, Y+10	; 0x0a
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	4f e7       	ldi	r20, 0x7F	; 127
     81c:	57 e4       	ldi	r21, 0x47	; 71
     81e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     822:	18 16       	cp	r1, r24
     824:	4c f5       	brge	.+82     	; 0x878 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     826:	6b 85       	ldd	r22, Y+11	; 0x0b
     828:	7c 85       	ldd	r23, Y+12	; 0x0c
     82a:	8d 85       	ldd	r24, Y+13	; 0x0d
     82c:	9e 85       	ldd	r25, Y+14	; 0x0e
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	51 e4       	ldi	r21, 0x41	; 65
     836:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	9e 83       	std	Y+6, r25	; 0x06
     84c:	8d 83       	std	Y+5, r24	; 0x05
     84e:	0f c0       	rjmp	.+30     	; 0x86e <actuators_umbrella+0x1b2>
     850:	8a ef       	ldi	r24, 0xFA	; 250
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	9c 83       	std	Y+4, r25	; 0x04
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	9c 81       	ldd	r25, Y+4	; 0x04
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <actuators_umbrella+0x1a0>
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     864:	8d 81       	ldd	r24, Y+5	; 0x05
     866:	9e 81       	ldd	r25, Y+6	; 0x06
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	9e 81       	ldd	r25, Y+6	; 0x06
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	69 f7       	brne	.-38     	; 0x850 <actuators_umbrella+0x194>
     876:	14 c0       	rjmp	.+40     	; 0x8a0 <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     878:	6f 81       	ldd	r22, Y+7	; 0x07
     87a:	78 85       	ldd	r23, Y+8	; 0x08
     87c:	89 85       	ldd	r24, Y+9	; 0x09
     87e:	9a 85       	ldd	r25, Y+10	; 0x0a
     880:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	9e 83       	std	Y+6, r25	; 0x06
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	9e 81       	ldd	r25, Y+6	; 0x06
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <actuators_umbrella+0x1dc>
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     8a0:	6c 96       	adiw	r28, 0x1c	; 28
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <actuators_setup>:
void actuators_setup(void)
{
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	aa 97       	sbiw	r28, 0x2a	; 42
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     8c6:	8a e5       	ldi	r24, 0x5A	; 90
     8c8:	56 de       	rcall	.-852    	; 0x576 <servo_set_door_position>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	aa e7       	ldi	r26, 0x7A	; 122
     8d0:	b4 e4       	ldi	r27, 0x44	; 68
     8d2:	8f a3       	std	Y+39, r24	; 0x27
     8d4:	98 a7       	std	Y+40, r25	; 0x28
     8d6:	a9 a7       	std	Y+41, r26	; 0x29
     8d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8da:	6f a1       	ldd	r22, Y+39	; 0x27
     8dc:	78 a5       	ldd	r23, Y+40	; 0x28
     8de:	89 a5       	ldd	r24, Y+41	; 0x29
     8e0:	9a a5       	ldd	r25, Y+42	; 0x2a
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e4       	ldi	r19, 0x40	; 64
     8e6:	4c e1       	ldi	r20, 0x1C	; 28
     8e8:	55 e4       	ldi	r21, 0x45	; 69
     8ea:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	8b a3       	std	Y+35, r24	; 0x23
     8f4:	9c a3       	std	Y+36, r25	; 0x24
     8f6:	ad a3       	std	Y+37, r26	; 0x25
     8f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8fa:	6b a1       	ldd	r22, Y+35	; 0x23
     8fc:	7c a1       	ldd	r23, Y+36	; 0x24
     8fe:	8d a1       	ldd	r24, Y+37	; 0x25
     900:	9e a1       	ldd	r25, Y+38	; 0x26
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e8       	ldi	r20, 0x80	; 128
     908:	5f e3       	ldi	r21, 0x3F	; 63
     90a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     90e:	88 23       	and	r24, r24
     910:	2c f4       	brge	.+10     	; 0x91c <actuators_setup+0x6a>
		__ticks = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9a a3       	std	Y+34, r25	; 0x22
     918:	89 a3       	std	Y+33, r24	; 0x21
     91a:	3f c0       	rjmp	.+126    	; 0x99a <actuators_setup+0xe8>
	else if (__tmp > 65535)
     91c:	6b a1       	ldd	r22, Y+35	; 0x23
     91e:	7c a1       	ldd	r23, Y+36	; 0x24
     920:	8d a1       	ldd	r24, Y+37	; 0x25
     922:	9e a1       	ldd	r25, Y+38	; 0x26
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	57 e4       	ldi	r21, 0x47	; 71
     92c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     930:	18 16       	cp	r1, r24
     932:	4c f5       	brge	.+82     	; 0x986 <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     934:	6f a1       	ldd	r22, Y+39	; 0x27
     936:	78 a5       	ldd	r23, Y+40	; 0x28
     938:	89 a5       	ldd	r24, Y+41	; 0x29
     93a:	9a a5       	ldd	r25, Y+42	; 0x2a
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e2       	ldi	r20, 0x20	; 32
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	9a a3       	std	Y+34, r25	; 0x22
     95a:	89 a3       	std	Y+33, r24	; 0x21
     95c:	0f c0       	rjmp	.+30     	; 0x97c <actuators_setup+0xca>
     95e:	8a ef       	ldi	r24, 0xFA	; 250
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	98 a3       	std	Y+32, r25	; 0x20
     964:	8f 8f       	std	Y+31, r24	; 0x1f
     966:	8f 8d       	ldd	r24, Y+31	; 0x1f
     968:	98 a1       	ldd	r25, Y+32	; 0x20
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <actuators_setup+0xb8>
     96e:	98 a3       	std	Y+32, r25	; 0x20
     970:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     972:	89 a1       	ldd	r24, Y+33	; 0x21
     974:	9a a1       	ldd	r25, Y+34	; 0x22
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	9a a3       	std	Y+34, r25	; 0x22
     97a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     97c:	89 a1       	ldd	r24, Y+33	; 0x21
     97e:	9a a1       	ldd	r25, Y+34	; 0x22
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	69 f7       	brne	.-38     	; 0x95e <actuators_setup+0xac>
     984:	14 c0       	rjmp	.+40     	; 0x9ae <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     986:	6b a1       	ldd	r22, Y+35	; 0x23
     988:	7c a1       	ldd	r23, Y+36	; 0x24
     98a:	8d a1       	ldd	r24, Y+37	; 0x25
     98c:	9e a1       	ldd	r25, Y+38	; 0x26
     98e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9a a3       	std	Y+34, r25	; 0x22
     998:	89 a3       	std	Y+33, r24	; 0x21
     99a:	89 a1       	ldd	r24, Y+33	; 0x21
     99c:	9a a1       	ldd	r25, Y+34	; 0x22
     99e:	9e 8f       	std	Y+30, r25	; 0x1e
     9a0:	8d 8f       	std	Y+29, r24	; 0x1d
     9a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <actuators_setup+0xf4>
     9aa:	9e 8f       	std	Y+30, r25	; 0x1e
     9ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	servo_set_umbrella_position(-86);
     9ae:	8a ea       	ldi	r24, 0xAA	; 170
     9b0:	9d dd       	rcall	.-1222   	; 0x4ec <servo_set_umbrella_position>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	aa e7       	ldi	r26, 0x7A	; 122
     9b8:	b4 e4       	ldi	r27, 0x44	; 68
     9ba:	89 8f       	std	Y+25, r24	; 0x19
     9bc:	9a 8f       	std	Y+26, r25	; 0x1a
     9be:	ab 8f       	std	Y+27, r26	; 0x1b
     9c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9c2:	69 8d       	ldd	r22, Y+25	; 0x19
     9c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e4       	ldi	r19, 0x40	; 64
     9ce:	4c e1       	ldi	r20, 0x1C	; 28
     9d0:	55 e4       	ldi	r21, 0x45	; 69
     9d2:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	8d 8b       	std	Y+21, r24	; 0x15
     9dc:	9e 8b       	std	Y+22, r25	; 0x16
     9de:	af 8b       	std	Y+23, r26	; 0x17
     9e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9e2:	6d 89       	ldd	r22, Y+21	; 0x15
     9e4:	7e 89       	ldd	r23, Y+22	; 0x16
     9e6:	8f 89       	ldd	r24, Y+23	; 0x17
     9e8:	98 8d       	ldd	r25, Y+24	; 0x18
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e8       	ldi	r20, 0x80	; 128
     9f0:	5f e3       	ldi	r21, 0x3F	; 63
     9f2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     9f6:	88 23       	and	r24, r24
     9f8:	2c f4       	brge	.+10     	; 0xa04 <actuators_setup+0x152>
		__ticks = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	9c 8b       	std	Y+20, r25	; 0x14
     a00:	8b 8b       	std	Y+19, r24	; 0x13
     a02:	3f c0       	rjmp	.+126    	; 0xa82 <actuators_setup+0x1d0>
	else if (__tmp > 65535)
     a04:	6d 89       	ldd	r22, Y+21	; 0x15
     a06:	7e 89       	ldd	r23, Y+22	; 0x16
     a08:	8f 89       	ldd	r24, Y+23	; 0x17
     a0a:	98 8d       	ldd	r25, Y+24	; 0x18
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	3f ef       	ldi	r19, 0xFF	; 255
     a10:	4f e7       	ldi	r20, 0x7F	; 127
     a12:	57 e4       	ldi	r21, 0x47	; 71
     a14:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     a18:	18 16       	cp	r1, r24
     a1a:	4c f5       	brge	.+82     	; 0xa6e <actuators_setup+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1c:	69 8d       	ldd	r22, Y+25	; 0x19
     a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e2       	ldi	r20, 0x20	; 32
     a2a:	51 e4       	ldi	r21, 0x41	; 65
     a2c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	bc 01       	movw	r22, r24
     a36:	cd 01       	movw	r24, r26
     a38:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	9c 8b       	std	Y+20, r25	; 0x14
     a42:	8b 8b       	std	Y+19, r24	; 0x13
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <actuators_setup+0x1b2>
     a46:	8a ef       	ldi	r24, 0xFA	; 250
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	9a 8b       	std	Y+18, r25	; 0x12
     a4c:	89 8b       	std	Y+17, r24	; 0x11
     a4e:	89 89       	ldd	r24, Y+17	; 0x11
     a50:	9a 89       	ldd	r25, Y+18	; 0x12
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <actuators_setup+0x1a0>
     a56:	9a 8b       	std	Y+18, r25	; 0x12
     a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	9c 8b       	std	Y+20, r25	; 0x14
     a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a64:	8b 89       	ldd	r24, Y+19	; 0x13
     a66:	9c 89       	ldd	r25, Y+20	; 0x14
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	69 f7       	brne	.-38     	; 0xa46 <actuators_setup+0x194>
     a6c:	14 c0       	rjmp	.+40     	; 0xa96 <actuators_setup+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6e:	6d 89       	ldd	r22, Y+21	; 0x15
     a70:	7e 89       	ldd	r23, Y+22	; 0x16
     a72:	8f 89       	ldd	r24, Y+23	; 0x17
     a74:	98 8d       	ldd	r25, Y+24	; 0x18
     a76:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	9c 8b       	std	Y+20, r25	; 0x14
     a80:	8b 8b       	std	Y+19, r24	; 0x13
     a82:	8b 89       	ldd	r24, Y+19	; 0x13
     a84:	9c 89       	ldd	r25, Y+20	; 0x14
     a86:	98 8b       	std	Y+16, r25	; 0x10
     a88:	8f 87       	std	Y+15, r24	; 0x0f
     a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a8c:	98 89       	ldd	r25, Y+16	; 0x10
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <actuators_setup+0x1dc>
     a92:	98 8b       	std	Y+16, r25	; 0x10
     a94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	6e dd       	rcall	.-1316   	; 0x576 <servo_set_door_position>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	aa ef       	ldi	r26, 0xFA	; 250
     aa0:	b3 e4       	ldi	r27, 0x43	; 67
     aa2:	8b 87       	std	Y+11, r24	; 0x0b
     aa4:	9c 87       	std	Y+12, r25	; 0x0c
     aa6:	ad 87       	std	Y+13, r26	; 0x0d
     aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
     aac:	7c 85       	ldd	r23, Y+12	; 0x0c
     aae:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e4       	ldi	r19, 0x40	; 64
     ab6:	4c e1       	ldi	r20, 0x1C	; 28
     ab8:	55 e4       	ldi	r21, 0x45	; 69
     aba:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	8f 83       	std	Y+7, r24	; 0x07
     ac4:	98 87       	std	Y+8, r25	; 0x08
     ac6:	a9 87       	std	Y+9, r26	; 0x09
     ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     aca:	6f 81       	ldd	r22, Y+7	; 0x07
     acc:	78 85       	ldd	r23, Y+8	; 0x08
     ace:	89 85       	ldd	r24, Y+9	; 0x09
     ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e8       	ldi	r20, 0x80	; 128
     ad8:	5f e3       	ldi	r21, 0x3F	; 63
     ada:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__cmpsf2>
     ade:	88 23       	and	r24, r24
     ae0:	2c f4       	brge	.+10     	; 0xaec <actuators_setup+0x23a>
		__ticks = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9e 83       	std	Y+6, r25	; 0x06
     ae8:	8d 83       	std	Y+5, r24	; 0x05
     aea:	3f c0       	rjmp	.+126    	; 0xb6a <actuators_setup+0x2b8>
	else if (__tmp > 65535)
     aec:	6f 81       	ldd	r22, Y+7	; 0x07
     aee:	78 85       	ldd	r23, Y+8	; 0x08
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	9a 85       	ldd	r25, Y+10	; 0x0a
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	4f e7       	ldi	r20, 0x7F	; 127
     afa:	57 e4       	ldi	r21, 0x47	; 71
     afc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__gesf2>
     b00:	18 16       	cp	r1, r24
     b02:	4c f5       	brge	.+82     	; 0xb56 <actuators_setup+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b04:	6b 85       	ldd	r22, Y+11	; 0x0b
     b06:	7c 85       	ldd	r23, Y+12	; 0x0c
     b08:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e2       	ldi	r20, 0x20	; 32
     b12:	51 e4       	ldi	r21, 0x41	; 65
     b14:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__mulsf3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	0f c0       	rjmp	.+30     	; 0xb4c <actuators_setup+0x29a>
     b2e:	8a ef       	ldi	r24, 0xFA	; 250
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9c 83       	std	Y+4, r25	; 0x04
     b34:	8b 83       	std	Y+3, r24	; 0x03
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <actuators_setup+0x288>
     b3e:	9c 83       	std	Y+4, r25	; 0x04
     b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b42:	8d 81       	ldd	r24, Y+5	; 0x05
     b44:	9e 81       	ldd	r25, Y+6	; 0x06
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	9e 83       	std	Y+6, r25	; 0x06
     b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4c:	8d 81       	ldd	r24, Y+5	; 0x05
     b4e:	9e 81       	ldd	r25, Y+6	; 0x06
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	69 f7       	brne	.-38     	; 0xb2e <actuators_setup+0x27c>
     b54:	14 c0       	rjmp	.+40     	; 0xb7e <actuators_setup+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b56:	6f 81       	ldd	r22, Y+7	; 0x07
     b58:	78 85       	ldd	r23, Y+8	; 0x08
     b5a:	89 85       	ldd	r24, Y+9	; 0x09
     b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	9e 83       	std	Y+6, r25	; 0x06
     b68:	8d 83       	std	Y+5, r24	; 0x05
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	9a 83       	std	Y+2, r25	; 0x02
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <actuators_setup+0x2c4>
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     b7e:	93 dd       	rcall	.-1242   	; 0x6a6 <servo_set_grabbers_up>
}
     b80:	aa 96       	adiw	r28, 0x2a	; 42
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <__vector_18>:
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	00 90 5b 00 	lds	r0, 0x005B
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <__vector_18+0x2a>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <__vector_18+0x2c>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	ed ee       	ldi	r30, 0xED	; 237
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8c 83       	std	Y+4, r24	; 0x04
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	9c c0       	rjmp	.+312    	; 0xd06 <__vector_18+0x174>
     bce:	ed ee       	ldi	r30, 0xED	; 237
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	82 95       	swap	r24
     bd6:	80 7f       	andi	r24, 0xF0	; 240
     bd8:	80 83       	st	Z, r24
     bda:	ee ee       	ldi	r30, 0xEE	; 238
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	82 95       	swap	r24
     be2:	86 95       	lsr	r24
     be4:	87 70       	andi	r24, 0x07	; 7
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	81 70       	andi	r24, 0x01	; 1
     bec:	90 70       	andi	r25, 0x00	; 0
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <__vector_18+0x62>
     bf2:	6e c0       	rjmp	.+220    	; 0xcd0 <__vector_18+0x13e>
     bf4:	ef ee       	ldi	r30, 0xEF	; 239
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	80 83       	st	Z, r24
     bfc:	ae ee       	ldi	r26, 0xEE	; 238
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	ee ee       	ldi	r30, 0xEE	; 238
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	8c 93       	st	X, r24
     c0a:	e2 ef       	ldi	r30, 0xF2	; 242
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	82 95       	swap	r24
     c12:	86 95       	lsr	r24
     c14:	87 70       	andi	r24, 0x07	; 7
     c16:	28 2f       	mov	r18, r24
     c18:	e3 ef       	ldi	r30, 0xF3	; 243
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	82 2b       	or	r24, r18
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	19 82       	std	Y+1, r1	; 0x01
     c34:	2a c0       	rjmp	.+84     	; 0xc8a <__vector_18+0xf8>
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	82 1b       	sub	r24, r18
     c42:	93 0b       	sbc	r25, r19
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	90 95       	com	r25
     c4a:	81 95       	neg	r24
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	fc 01       	movw	r30, r24
     c50:	e6 5f       	subi	r30, 0xF6	; 246
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	fc 01       	movw	r30, r24
     c62:	e2 5e       	subi	r30, 0xE2	; 226
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	80 81       	ld	r24, Z
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	da 01       	movw	r26, r20
     c78:	a8 0f       	add	r26, r24
     c7a:	b9 1f       	adc	r27, r25
     c7c:	ea ef       	ldi	r30, 0xFA	; 250
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8c 93       	st	X, r24
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	98 f2       	brcs	.-90     	; 0xc36 <__vector_18+0xa4>
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 5e       	subi	r30, 0xE2	; 226
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 83       	st	Z, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	85 30       	cpi	r24, 0x05	; 5
     ca8:	41 f4       	brne	.+16     	; 0xcba <__vector_18+0x128>
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	fc 01       	movw	r30, r24
     cb4:	e2 5e       	subi	r30, 0xE2	; 226
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	10 82       	st	Z, r1
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	fc 01       	movw	r30, r24
     cc4:	ee 5c       	subi	r30, 0xCE	; 206
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	80 81       	ld	r24, Z
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 83       	st	Z, r24
     cce:	1f c0       	rjmp	.+62     	; 0xd0e <__vector_18+0x17c>
     cd0:	ee ee       	ldi	r30, 0xEE	; 238
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	82 95       	swap	r24
     cd8:	86 95       	lsr	r24
     cda:	86 95       	lsr	r24
     cdc:	83 70       	andi	r24, 0x03	; 3
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	88 23       	and	r24, r24
     ce8:	59 f0       	breq	.+22     	; 0xd00 <__vector_18+0x16e>
     cea:	ef ee       	ldi	r30, 0xEF	; 239
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	10 82       	st	Z, r1
     cf0:	ae ee       	ldi	r26, 0xEE	; 238
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ee ee       	ldi	r30, 0xEE	; 238
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 7b       	andi	r24, 0xBF	; 191
     cfc:	8c 93       	st	X, r24
     cfe:	07 c0       	rjmp	.+14     	; 0xd0e <__vector_18+0x17c>
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	8b 83       	std	Y+3, r24	; 0x03
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	8f 30       	cpi	r24, 0x0F	; 15
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <__vector_18+0x17c>
     d0c:	60 cf       	rjmp	.-320    	; 0xbce <__vector_18+0x3c>
     d0e:	ed ee       	ldi	r30, 0xED	; 237
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	80 83       	st	Z, r24
     d16:	aa ed       	ldi	r26, 0xDA	; 218
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ea ed       	ldi	r30, 0xDA	; 218
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8c 93       	st	X, r24
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	00 92 5b 00 	sts	0x005B, r0
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <CAN_InitModule>:
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <CAN_InitModule+0x6>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	e8 ed       	ldi	r30, 0xD8	; 216
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
     d64:	1a 82       	std	Y+2, r1	; 0x02
     d66:	32 c0       	rjmp	.+100    	; 0xdcc <CAN_InitModule+0x7a>
     d68:	ed ee       	ldi	r30, 0xED	; 237
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	82 95       	swap	r24
     d70:	80 7f       	andi	r24, 0xF0	; 240
     d72:	80 83       	st	Z, r24
     d74:	ee ee       	ldi	r30, 0xEE	; 238
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	10 82       	st	Z, r1
     d7a:	ef ee       	ldi	r30, 0xEF	; 239
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	10 82       	st	Z, r1
     d80:	e3 ef       	ldi	r30, 0xF3	; 243
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	10 82       	st	Z, r1
     d86:	e2 ef       	ldi	r30, 0xF2	; 242
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	10 82       	st	Z, r1
     d8c:	e1 ef       	ldi	r30, 0xF1	; 241
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	10 82       	st	Z, r1
     d92:	e0 ef       	ldi	r30, 0xF0	; 240
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	10 82       	st	Z, r1
     d98:	e7 ef       	ldi	r30, 0xF7	; 247
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	10 82       	st	Z, r1
     d9e:	e6 ef       	ldi	r30, 0xF6	; 246
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	10 82       	st	Z, r1
     da4:	e5 ef       	ldi	r30, 0xF5	; 245
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	10 82       	st	Z, r1
     daa:	e4 ef       	ldi	r30, 0xF4	; 244
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	10 82       	st	Z, r1
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <CAN_InitModule+0x6e>
     db4:	ea ef       	ldi	r30, 0xFA	; 250
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	10 82       	st	Z, r1
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	b8 f3       	brcs	.-18     	; 0xdb4 <CAN_InitModule+0x62>
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8a 83       	std	Y+2, r24	; 0x02
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	8f 30       	cpi	r24, 0x0F	; 15
     dd0:	58 f2       	brcs	.-106    	; 0xd68 <CAN_InitModule+0x16>
     dd2:	e8 ed       	ldi	r30, 0xD8	; 216
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 83       	st	Z, r24
     dda:	e2 ee       	ldi	r30, 0xE2	; 226
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
     de2:	e3 ee       	ldi	r30, 0xE3	; 227
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	80 83       	st	Z, r24
     dea:	e4 ee       	ldi	r30, 0xE4	; 228
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	8e e5       	ldi	r24, 0x5E	; 94
     df0:	80 83       	st	Z, r24
     df2:	e5 ee       	ldi	r30, 0xE5	; 229
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	10 82       	st	Z, r1
     df8:	eb ed       	ldi	r30, 0xDB	; 219
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 eb       	ldi	r24, 0xB0	; 176
     dfe:	80 83       	st	Z, r24
     e00:	ef ed       	ldi	r30, 0xDF	; 223
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8f e7       	ldi	r24, 0x7F	; 127
     e06:	80 83       	st	Z, r24
     e08:	ee ed       	ldi	r30, 0xDE	; 222
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	80 83       	st	Z, r24
     e10:	78 94       	sei
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <CAN_InitRxMob>:
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <CAN_InitRxMob+0x6>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <CAN_InitRxMob+0x8>
     e24:	0f 92       	push	r0
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	ed ee       	ldi	r30, 0xED	; 237
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	e9 ed       	ldi	r30, 0xD9	; 217
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	82 95       	swap	r24
     e3e:	8f 70       	andi	r24, 0x0F	; 15
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	81 70       	andi	r24, 0x01	; 1
     e46:	90 70       	andi	r25, 0x00	; 0
     e48:	88 23       	and	r24, r24
     e4a:	a9 f7       	brne	.-22     	; 0xe36 <CAN_InitRxMob+0x1a>
     e4c:	e9 ed       	ldi	r30, 0xD9	; 217
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	86 95       	lsr	r24
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	81 70       	andi	r24, 0x01	; 1
     e5e:	90 70       	andi	r25, 0x00	; 0
     e60:	88 23       	and	r24, r24
     e62:	49 f7       	brne	.-46     	; 0xe36 <CAN_InitRxMob+0x1a>
     e64:	1a 82       	std	Y+2, r1	; 0x02
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <CAN_InitRxMob+0xca>
     e68:	ed ee       	ldi	r30, 0xED	; 237
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	82 95       	swap	r24
     e70:	80 7f       	andi	r24, 0xF0	; 240
     e72:	80 83       	st	Z, r24
     e74:	ef ee       	ldi	r30, 0xEF	; 239
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	82 95       	swap	r24
     e7c:	86 95       	lsr	r24
     e7e:	86 95       	lsr	r24
     e80:	83 70       	andi	r24, 0x03	; 3
     e82:	88 23       	and	r24, r24
     e84:	69 f5       	brne	.+90     	; 0xee0 <CAN_InitRxMob+0xc4>
     e86:	ef ee       	ldi	r30, 0xEF	; 239
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8f e0       	ldi	r24, 0x0F	; 15
     e8c:	80 83       	st	Z, r24
     e8e:	e3 ef       	ldi	r30, 0xF3	; 243
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	96 95       	lsr	r25
     e9a:	87 95       	ror	r24
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	80 83       	st	Z, r24
     ea6:	e2 ef       	ldi	r30, 0xF2	; 242
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	82 95       	swap	r24
     eae:	88 0f       	add	r24, r24
     eb0:	80 7e       	andi	r24, 0xE0	; 224
     eb2:	80 83       	st	Z, r24
     eb4:	e6 ef       	ldi	r30, 0xF6	; 246
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 ee       	ldi	r24, 0xE0	; 224
     eba:	80 83       	st	Z, r24
     ebc:	e7 ef       	ldi	r30, 0xF7	; 247
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	80 83       	st	Z, r24
     ec4:	af ee       	ldi	r26, 0xEF	; 239
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef ee       	ldi	r30, 0xEF	; 239
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
     ed2:	ed ee       	ldi	r30, 0xED	; 237
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <CAN_InitRxMob+0xdc>
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	8f 30       	cpi	r24, 0x0F	; 15
     eea:	08 f4       	brcc	.+2      	; 0xeee <CAN_InitRxMob+0xd2>
     eec:	bd cf       	rjmp	.-134    	; 0xe68 <CAN_InitRxMob+0x4c>
     eee:	ed ee       	ldi	r30, 0xED	; 237
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	1d 82       	std	Y+5, r1	; 0x05
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <CAN_Init>:
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <CAN_Init+0xa>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
     f1a:	1b df       	rcall	.-458    	; 0xd52 <CAN_InitModule>
     f1c:	19 82       	std	Y+1, r1	; 0x01
     f1e:	35 c0       	rjmp	.+106    	; 0xf8a <CAN_Init+0x80>
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	79 df       	rcall	.-270    	; 0xe1c <CAN_InitRxMob>
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	8c 01       	movw	r16, r24
     f36:	06 5f       	subi	r16, 0xF6	; 246
     f38:	1e 4f       	sbci	r17, 0xFE	; 254
     f3a:	85 e0       	ldi	r24, 0x05	; 5
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	94 d7       	rcall	.+3880   	; 0x1e6c <calloc>
     f44:	f8 01       	movw	r30, r16
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	48 2f       	mov	r20, r24
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	ee 5c       	subi	r30, 0xCE	; 206
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	10 82       	st	Z, r1
     f64:	fc 01       	movw	r30, r24
     f66:	ee 5c       	subi	r30, 0xCE	; 206
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	80 81       	ld	r24, Z
     f6c:	f9 01       	movw	r30, r18
     f6e:	e8 5d       	subi	r30, 0xD8	; 216
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	80 83       	st	Z, r24
     f74:	f9 01       	movw	r30, r18
     f76:	e8 5d       	subi	r30, 0xD8	; 216
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	fa 01       	movw	r30, r20
     f7e:	e2 5e       	subi	r30, 0xE2	; 226
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 83       	st	Z, r24
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	99 81       	ldd	r25, Y+1	; 0x01
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	98 17       	cp	r25, r24
     f90:	38 f2       	brcs	.-114    	; 0xf20 <CAN_Init+0x16>
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	2c 97       	sbiw	r28, 0x0c	; 12
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	6a 87       	std	Y+10, r22	; 0x0a
     fb8:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fba:	80 91 08 01 	lds	r24, 0x0108
     fbe:	90 91 09 01 	lds	r25, 0x0109
     fc2:	9c 83       	std	Y+4, r25	; 0x04
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	06 97       	sbiw	r24, 0x06	; 6
     fcc:	98 87       	std	Y+8, r25	; 0x08
     fce:	8f 83       	std	Y+7, r24	; 0x07
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     fd2:	ef 81       	ldd	r30, Y+7	; 0x07
     fd4:	f8 85       	ldd	r31, Y+8	; 0x08
     fd6:	90 81       	ld	r25, Z
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	98 17       	cp	r25, r24
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <gpio_register_pin+0x44>
            return 1;
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	2c 87       	std	Y+12, r18	; 0x0c
     fe2:	c8 c0       	rjmp	.+400    	; 0x1174 <__stack+0x75>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fe4:	ef 81       	ldd	r30, Y+7	; 0x07
     fe6:	f8 85       	ldd	r31, Y+8	; 0x08
     fe8:	80 85       	ldd	r24, Z+8	; 0x08
     fea:	91 85       	ldd	r25, Z+9	; 0x09
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	06 97       	sbiw	r24, 0x06	; 6
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	8f 81       	ldd	r24, Y+7	; 0x07
     ffc:	98 85       	ldd	r25, Y+8	; 0x08
     ffe:	06 96       	adiw	r24, 0x06	; 6
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	86 30       	cpi	r24, 0x06	; 6
    1004:	92 07       	cpc	r25, r18
    1006:	29 f7       	brne	.-54     	; 0xfd2 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	86 95       	lsr	r24
    100c:	86 95       	lsr	r24
    100e:	86 95       	lsr	r24
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	87 70       	andi	r24, 0x07	; 7
    1018:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    101a:	8a 85       	ldd	r24, Y+10	; 0x0a
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	09 f0       	breq	.+2      	; 0x1022 <gpio_register_pin+0x82>
    1020:	48 c0       	rjmp	.+144    	; 0x10b2 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1022:	8e 81       	ldd	r24, Y+6	; 0x06
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
    1032:	4e 96       	adiw	r24, 0x1e	; 30
    1034:	dc 01       	movw	r26, r24
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	c9 01       	movw	r24, r18
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	4e 96       	adiw	r24, 0x1e	; 30
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <gpio_register_pin+0xbe>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <gpio_register_pin+0xba>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	c9 01       	movw	r24, r18
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	4f 96       	adiw	r24, 0x1f	; 31
    1078:	dc 01       	movw	r26, r24
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	c9 01       	movw	r24, r18
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	4f 96       	adiw	r24, 0x1f	; 31
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <gpio_register_pin+0x104>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <gpio_register_pin+0x100>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
        return 0;
    10ae:	1c 86       	std	Y+12, r1	; 0x0c
    10b0:	61 c0       	rjmp	.+194    	; 0x1174 <__stack+0x75>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	c9 01       	movw	r24, r18
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	4e 96       	adiw	r24, 0x1e	; 30
    10c4:	dc 01       	movw	r26, r24
    10c6:	8e 81       	ldd	r24, Y+6	; 0x06
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	c9 01       	movw	r24, r18
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	4e 96       	adiw	r24, 0x1e	; 30
    10d8:	fc 01       	movw	r30, r24
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <gpio_register_pin+0x14e>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	2a 95       	dec	r18
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <gpio_register_pin+0x14a>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	c9 01       	movw	r24, r18
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	4f 96       	adiw	r24, 0x1f	; 31
    110a:	dc 01       	movw	r26, r24
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	c9 01       	movw	r24, r18
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	4f 96       	adiw	r24, 0x1f	; 31
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <__stack+0x35>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <__stack+0x31>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	af d6       	rcall	.+3422   	; 0x1ea0 <malloc>
    1142:	98 87       	std	Y+8, r25	; 0x08
    1144:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
    1148:	98 85       	ldd	r25, Y+8	; 0x08
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	19 f4       	brne	.+6      	; 0x1154 <__stack+0x55>
        return 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8c 87       	std	Y+12, r24	; 0x0c
    1152:	10 c0       	rjmp	.+32     	; 0x1174 <__stack+0x75>

    input->pin       = pin;
    1154:	ef 81       	ldd	r30, Y+7	; 0x07
    1156:	f8 85       	ldd	r31, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    115c:	ef 81       	ldd	r30, Y+7	; 0x07
    115e:	f8 85       	ldd	r31, Y+8	; 0x08
    1160:	8b 85       	ldd	r24, Y+11	; 0x0b
    1162:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	06 96       	adiw	r24, 0x06	; 6
    116a:	26 e0       	ldi	r18, 0x06	; 6
    116c:	31 e0       	ldi	r19, 0x01	; 1
    116e:	b9 01       	movw	r22, r18
    1170:	0b d0       	rcall	.+22     	; 0x1188 <list_add>

    return 0;
    1172:	1c 86       	std	Y+12, r1	; 0x0c
    1174:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1176:	2c 96       	adiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <list_add+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <list_add+0x8>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	7c 83       	std	Y+4, r23	; 0x04
    119a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	42 81       	ldd	r20, Z+2	; 0x02
    11a2:	53 81       	ldd	r21, Z+3	; 0x03
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	b9 01       	movw	r22, r18
    11ae:	07 d0       	rcall	.+14     	; 0x11be <__list_add>
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <__list_add+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <__list_add+0x8>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <__list_add+0xa>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	7c 83       	std	Y+4, r23	; 0x04
    11d2:	6b 83       	std	Y+3, r22	; 0x03
    11d4:	5e 83       	std	Y+6, r21	; 0x06
    11d6:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    11d8:	ed 81       	ldd	r30, Y+5	; 0x05
    11da:	fe 81       	ldd	r31, Y+6	; 0x06
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
    new->next = next;
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	93 83       	std	Z+3, r25	; 0x03
    11ee:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    prev->next = new;
    11fc:	eb 81       	ldd	r30, Y+3	; 0x03
    11fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	93 83       	std	Z+3, r25	; 0x03
    1206:	82 83       	std	Z+2, r24	; 0x02
}
    1208:	26 96       	adiw	r28, 0x06	; 6
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <__gpio_read_pin+0x6>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	86 95       	lsr	r24
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	c9 01       	movw	r24, r18
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	4d 96       	adiw	r24, 0x1d	; 29
    124c:	fc 01       	movw	r30, r24
    124e:	80 81       	ld	r24, Z
    1250:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__gpio_read_pin+0x4c>
    1262:	55 95       	asr	r21
    1264:	47 95       	ror	r20
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <__gpio_read_pin+0x48>
    126a:	ca 01       	movw	r24, r20
    126c:	81 70       	andi	r24, 0x01	; 1
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	2b 97       	sbiw	r28, 0x0b	; 11
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1290:	80 91 08 01 	lds	r24, 0x0108
    1294:	90 91 09 01 	lds	r25, 0x0109
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	06 97       	sbiw	r24, 0x06	; 6
    12a2:	98 87       	std	Y+8, r25	; 0x08
    12a4:	8f 83       	std	Y+7, r24	; 0x07
    12a6:	55 c0       	rjmp	.+170    	; 0x1352 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12a8:	ef 81       	ldd	r30, Y+7	; 0x07
    12aa:	f8 85       	ldd	r31, Y+8	; 0x08
    12ac:	90 81       	ld	r25, Z
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	98 17       	cp	r25, r24
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <gpio_read_pin+0x3c>
    12b4:	43 c0       	rjmp	.+134    	; 0x133c <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    12b6:	1c 82       	std	Y+4, r1	; 0x04
    12b8:	21 c0       	rjmp	.+66     	; 0x12fc <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	98 85       	ldd	r25, Y+8	; 0x08
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	fc 01       	movw	r30, r24
    12ca:	32 96       	adiw	r30, 0x02	; 2
    12cc:	40 81       	ld	r20, Z
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 01       	movw	r18, r24
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
    12dc:	98 85       	ldd	r25, Y+8	; 0x08
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	fc 01       	movw	r30, r24
    12e4:	32 96       	adiw	r30, 0x02	; 2
    12e6:	80 81       	ld	r24, Z
    12e8:	48 17       	cp	r20, r24
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <gpio_read_pin+0x7c>
                    return input->previous_state;
    12ec:	ef 81       	ldd	r30, Y+7	; 0x07
    12ee:	f8 85       	ldd	r31, Y+8	; 0x08
    12f0:	25 81       	ldd	r18, Z+5	; 0x05
    12f2:	2b 87       	std	Y+11, r18	; 0x0b
    12f4:	38 c0       	rjmp	.+112    	; 0x1366 <gpio_read_pin+0xec>
                i++;
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	e0 f2       	brcs	.-72     	; 0x12ba <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1302:	ef 81       	ldd	r30, Y+7	; 0x07
    1304:	f8 85       	ldd	r31, Y+8	; 0x08
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 27       	eor	r24, r25
    130c:	88 23       	and	r24, r24
    130e:	29 f0       	breq	.+10     	; 0x131a <gpio_read_pin+0xa0>
    1310:	ef 81       	ldd	r30, Y+7	; 0x07
    1312:	f8 85       	ldd	r31, Y+8	; 0x08
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	8a 87       	std	Y+10, r24	; 0x0a
    1318:	08 c0       	rjmp	.+16     	; 0x132a <gpio_read_pin+0xb0>
    131a:	ef 81       	ldd	r30, Y+7	; 0x07
    131c:	f8 85       	ldd	r31, Y+8	; 0x08
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	1a 86       	std	Y+10, r1	; 0x0a
    1322:	88 23       	and	r24, r24
    1324:	11 f4       	brne	.+4      	; 0x132a <gpio_read_pin+0xb0>
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	2a 87       	std	Y+10, r18	; 0x0a
    132a:	8a 85       	ldd	r24, Y+10	; 0x0a
    132c:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    132e:	ef 81       	ldd	r30, Y+7	; 0x07
    1330:	f8 85       	ldd	r31, Y+8	; 0x08
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	85 83       	std	Z+5, r24	; 0x05

            return state;
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	2b 87       	std	Y+11, r18	; 0x0b
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    133c:	ef 81       	ldd	r30, Y+7	; 0x07
    133e:	f8 85       	ldd	r31, Y+8	; 0x08
    1340:	80 85       	ldd	r24, Z+8	; 0x08
    1342:	91 85       	ldd	r25, Z+9	; 0x09
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	06 97       	sbiw	r24, 0x06	; 6
    134e:	98 87       	std	Y+8, r25	; 0x08
    1350:	8f 83       	std	Y+7, r24	; 0x07
    1352:	8f 81       	ldd	r24, Y+7	; 0x07
    1354:	98 85       	ldd	r25, Y+8	; 0x08
    1356:	06 96       	adiw	r24, 0x06	; 6
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	86 30       	cpi	r24, 0x06	; 6
    135c:	92 07       	cpc	r25, r18
    135e:	09 f0       	breq	.+2      	; 0x1362 <gpio_read_pin+0xe8>
    1360:	a3 cf       	rjmp	.-186    	; 0x12a8 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1368:	2b 96       	adiw	r28, 0x0b	; 11
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <gpio_debouncer+0xa>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <gpio_debouncer+0xc>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <gpio_debouncer+0xe>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    138c:	80 91 08 01 	lds	r24, 0x0108
    1390:	90 91 09 01 	lds	r25, 0x0109
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	06 97       	sbiw	r24, 0x06	; 6
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	1b c0       	rjmp	.+54     	; 0x13da <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13a4:	00 91 3c 01 	lds	r16, 0x013C
    13a8:	10 91 3d 01 	lds	r17, 0x013D
    13ac:	ed 81       	ldd	r30, Y+5	; 0x05
    13ae:	fe 81       	ldd	r31, Y+6	; 0x06
    13b0:	80 81       	ld	r24, Z
    13b2:	33 df       	rcall	.-410    	; 0x121a <__gpio_read_pin>
    13b4:	28 2f       	mov	r18, r24
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	80 0f       	add	r24, r16
    13bc:	91 1f       	adc	r25, r17
    13be:	fc 01       	movw	r30, r24
    13c0:	32 96       	adiw	r30, 0x02	; 2
    13c2:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13c4:	ed 81       	ldd	r30, Y+5	; 0x05
    13c6:	fe 81       	ldd	r31, Y+6	; 0x06
    13c8:	80 85       	ldd	r24, Z+8	; 0x08
    13ca:	91 85       	ldd	r25, Z+9	; 0x09
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	06 97       	sbiw	r24, 0x06	; 6
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	06 96       	adiw	r24, 0x06	; 6
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	92 07       	cpc	r25, r18
    13e6:	f1 f6       	brne	.-68     	; 0x13a4 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    13e8:	80 91 3c 01 	lds	r24, 0x013C
    13ec:	90 91 3d 01 	lds	r25, 0x013D
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	90 93 3d 01 	sts	0x013D, r25
    13f6:	80 93 3c 01 	sts	0x013C, r24
    13fa:	80 91 3c 01 	lds	r24, 0x013C
    13fe:	90 91 3d 01 	lds	r25, 0x013D
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	21 f4       	brne	.+8      	; 0x1410 <gpio_debouncer+0x96>
        count = 0;
    1408:	10 92 3d 01 	sts	0x013D, r1
    140c:	10 92 3c 01 	sts	0x013C, r1
	
}
    1410:	26 96       	adiw	r28, 0x06	; 6
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <timer_register_callback+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	90 93 3f 01 	sts	0x013F, r25
    143c:	80 93 3e 01 	sts	0x013E, r24
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <timer_init>:
	return comb;
}


void timer_init(unsigned int freq)
{
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <timer_init+0xa>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    145c:	e0 e8       	ldi	r30, 0x80	; 128
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    1462:	e1 e8       	ldi	r30, 0x81	; 129
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	89 e0       	ldi	r24, 0x09	; 9
    1468:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    146a:	08 e8       	ldi	r16, 0x88	; 136
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	cc 01       	movw	r24, r24
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	de d3       	rcall	.+1980   	; 0x1c3a <__floatunsisf>
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
    1482:	60 e8       	ldi	r22, 0x80	; 128
    1484:	76 e9       	ldi	r23, 0x96	; 150
    1486:	88 e1       	ldi	r24, 0x18	; 24
    1488:	9b e4       	ldi	r25, 0x4B	; 75
    148a:	3e d3       	rcall	.+1660   	; 0x1b08 <__divsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	cd d2       	rcall	.+1434   	; 0x1a38 <__addsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	9d d3       	rcall	.+1850   	; 0x1be2 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    14b2:	ef e6       	ldi	r30, 0x6F	; 111
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 83       	st	Z, r24

	SREG |= 0x80;
    14ba:	af e5       	ldi	r26, 0x5F	; 95
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e5       	ldi	r30, 0x5F	; 95
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	00 90 5b 00 	lds	r0, 0x005B
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1506:	80 91 3e 01 	lds	r24, 0x013E
    150a:	90 91 3f 01 	lds	r25, 0x013F
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	29 f0       	breq	.+10     	; 0x151c <__vector_12+0x46>
        timer_callback();
    1512:	e0 91 3e 01 	lds	r30, 0x013E
    1516:	f0 91 3f 01 	lds	r31, 0x013F
    151a:	09 95       	icall
	if(sys_time >= 80000)
    151c:	80 91 40 01 	lds	r24, 0x0140
    1520:	90 91 41 01 	lds	r25, 0x0141
    1524:	a0 91 42 01 	lds	r26, 0x0142
    1528:	b0 91 43 01 	lds	r27, 0x0143
    152c:	80 38       	cpi	r24, 0x80	; 128
    152e:	28 e3       	ldi	r18, 0x38	; 56
    1530:	92 07       	cpc	r25, r18
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	a2 07       	cpc	r26, r18
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	b2 07       	cpc	r27, r18
    153a:	08 f0       	brcs	.+2      	; 0x153e <__vector_12+0x68>
		actuators_umbrella();
    153c:	bf d8       	rcall	.-3714   	; 0x6bc <actuators_umbrella>
	sys_time++;
    153e:	80 91 40 01 	lds	r24, 0x0140
    1542:	90 91 41 01 	lds	r25, 0x0141
    1546:	a0 91 42 01 	lds	r26, 0x0142
    154a:	b0 91 43 01 	lds	r27, 0x0143
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	a1 1d       	adc	r26, r1
    1552:	b1 1d       	adc	r27, r1
    1554:	80 93 40 01 	sts	0x0140, r24
    1558:	90 93 41 01 	sts	0x0141, r25
    155c:	a0 93 42 01 	sts	0x0142, r26
    1560:	b0 93 43 01 	sts	0x0143, r27
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	00 92 5b 00 	sts	0x005B, r0
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <system_reset_system_time>:
void system_reset_system_time(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    1598:	10 92 40 01 	sts	0x0140, r1
    159c:	10 92 41 01 	sts	0x0141, r1
    15a0:	10 92 42 01 	sts	0x0142, r1
    15a4:	10 92 43 01 	sts	0x0143, r1
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <system_set_match_started>:
void system_set_match_started(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 44 01 	sts	0x0144, r24
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <system_init>:
			break;
		//maybe put default for rotate for getting the camera right
	}
}
void system_init(void)
{	
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	6c 97       	sbiw	r28, 0x1c	; 28
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    15d6:	8d eb       	ldi	r24, 0xBD	; 189
    15d8:	99 e0       	ldi	r25, 0x09	; 9
    15da:	25 df       	rcall	.-438    	; 0x1426 <timer_register_callback>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a8 ec       	ldi	r26, 0xC8	; 200
    15e2:	b2 e4       	ldi	r27, 0x42	; 66
    15e4:	89 8f       	std	Y+25, r24	; 0x19
    15e6:	9a 8f       	std	Y+26, r25	; 0x1a
    15e8:	ab 8f       	std	Y+27, r26	; 0x1b
    15ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	69 8d       	ldd	r22, Y+25	; 0x19
    15ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e4       	ldi	r19, 0x40	; 64
    15f8:	4c e1       	ldi	r20, 0x1C	; 28
    15fa:	55 e4       	ldi	r21, 0x45	; 69
    15fc:	d4 d3       	rcall	.+1960   	; 0x1da6 <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8d 8b       	std	Y+21, r24	; 0x15
    1604:	9e 8b       	std	Y+22, r25	; 0x16
    1606:	af 8b       	std	Y+23, r26	; 0x17
    1608:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	72 d2       	rcall	.+1252   	; 0x1b00 <__cmpsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <system_init+0x68>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 8b       	std	Y+20, r25	; 0x14
    1626:	8b 8b       	std	Y+19, r24	; 0x13
    1628:	3b c0       	rjmp	.+118    	; 0x16a0 <system_init+0xde>
	else if (__tmp > 65535)
    162a:	6d 89       	ldd	r22, Y+21	; 0x15
    162c:	7e 89       	ldd	r23, Y+22	; 0x16
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	b1 d3       	rcall	.+1890   	; 0x1d9e <__gesf2>
    163c:	18 16       	cp	r1, r24
    163e:	3c f5       	brge	.+78     	; 0x168e <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	69 8d       	ldd	r22, Y+25	; 0x19
    1642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	aa d3       	rcall	.+1876   	; 0x1da6 <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	c3 d2       	rcall	.+1414   	; 0x1be2 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9c 8b       	std	Y+20, r25	; 0x14
    1662:	8b 8b       	std	Y+19, r24	; 0x13
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <system_init+0xc2>
    1666:	8a ef       	ldi	r24, 0xFA	; 250
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9a 8b       	std	Y+18, r25	; 0x12
    166c:	89 8b       	std	Y+17, r24	; 0x11
    166e:	89 89       	ldd	r24, Y+17	; 0x11
    1670:	9a 89       	ldd	r25, Y+18	; 0x12
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <system_init+0xb0>
    1676:	9a 8b       	std	Y+18, r25	; 0x12
    1678:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <system_init+0xa4>
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	a5 d2       	rcall	.+1354   	; 0x1be2 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	98 8b       	std	Y+16, r25	; 0x10
    16a6:	8f 87       	std	Y+15, r24	; 0x0f
    16a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16aa:	98 89       	ldd	r25, Y+16	; 0x10
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <system_init+0xea>
    16b0:	98 8b       	std	Y+16, r25	; 0x10
    16b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,true);							//jumper
    16b4:	8f e2       	ldi	r24, 0x2F	; 47
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	72 dc       	rcall	.-1820   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,true);								//prekidac za stranu
    16bc:	8f e0       	ldi	r24, 0x0F	; 15
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	6e dc       	rcall	.-1828   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,true);							//camera 0 position
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	6a dc       	rcall	.-1836   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,true);							//camera 1 position
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	66 dc       	rcall	.-1844   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,true);							//camera 2 position
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	62 dc       	rcall	.-1852   	; 0xfa0 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,true);						//sensor front left
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	5e dc       	rcall	.-1860   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,true);						//sensor front right
    16e4:	8a e0       	ldi	r24, 0x0A	; 10
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	5a dc       	rcall	.-1868   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,true);						//sensor back left
    16ec:	8c e0       	ldi	r24, 0x0C	; 12
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	56 dc       	rcall	.-1876   	; 0xfa0 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,true);						//sensor back right
    16f4:	8e e0       	ldi	r24, 0x0E	; 14
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	52 dc       	rcall	.-1884   	; 0xfa0 <gpio_register_pin>
	
	
	DDRG = 0xff;
    16fc:	e3 e3       	ldi	r30, 0x33	; 51
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	80 83       	st	Z, r24
	//PORTG = 0xff;
	servo_init(50);
    1704:	82 e3       	ldi	r24, 0x32	; 50
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <servo_init>
	timer_init(1000);
    170c:	88 ee       	ldi	r24, 0xE8	; 232
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	9c de       	rcall	.-712    	; 0x144a <timer_init>
	CAN_Init(1);
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	fa db       	rcall	.-2060   	; 0xf0a <CAN_Init>

	actuators_setup();
    1716:	cd d8       	rcall	.-3686   	; 0x8b2 <actuators_setup>
    1718:	6c c0       	rjmp	.+216    	; 0x17f2 <system_init+0x230>
	
	while(gpio_read_pin(JUMPER_PIN))
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e2       	ldi	r26, 0x20	; 32
    1720:	b1 e4       	ldi	r27, 0x41	; 65
    1722:	8b 87       	std	Y+11, r24	; 0x0b
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	ad 87       	std	Y+13, r26	; 0x0d
    1728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e4       	ldi	r19, 0x40	; 64
    1736:	4c e1       	ldi	r20, 0x1C	; 28
    1738:	55 e4       	ldi	r21, 0x45	; 69
    173a:	35 d3       	rcall	.+1642   	; 0x1da6 <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8f 83       	std	Y+7, r24	; 0x07
    1742:	98 87       	std	Y+8, r25	; 0x08
    1744:	a9 87       	std	Y+9, r26	; 0x09
    1746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	d3 d1       	rcall	.+934    	; 0x1b00 <__cmpsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <system_init+0x1a6>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3b c0       	rjmp	.+118    	; 0x17de <system_init+0x21c>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	12 d3       	rcall	.+1572   	; 0x1d9e <__gesf2>
    177a:	18 16       	cp	r1, r24
    177c:	3c f5       	brge	.+78     	; 0x17cc <system_init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0b d3       	rcall	.+1558   	; 0x1da6 <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	24 d2       	rcall	.+1096   	; 0x1be2 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <system_init+0x200>
    17a4:	8a ef       	ldi	r24, 0xFA	; 250
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <system_init+0x1ee>
    17b4:	9c 83       	std	Y+4, r25	; 0x04
    17b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <system_init+0x1e2>
    17ca:	13 c0       	rjmp	.+38     	; 0x17f2 <system_init+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	06 d2       	rcall	.+1036   	; 0x1be2 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <system_init+0x228>
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	8f e2       	ldi	r24, 0x2F	; 47
    17f4:	42 dd       	rcall	.-1404   	; 0x127a <gpio_read_pin>
    17f6:	88 23       	and	r24, r24
    17f8:	09 f0       	breq	.+2      	; 0x17fc <system_init+0x23a>
    17fa:	8f cf       	rjmp	.-226    	; 0x171a <system_init+0x158>
		_delay_ms(10);
	//PORTG = 0x00;
	system_reset_system_time();
    17fc:	c9 de       	rcall	.-622    	; 0x1590 <system_reset_system_time>
	system_set_match_started();
    17fe:	d7 de       	rcall	.-594    	; 0x15ae <system_set_match_started>
}
    1800:	6c 96       	adiw	r28, 0x1c	; 28
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <__vector_23>:
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	00 90 5b 00 	lds	r0, 0x005B
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	80 91 45 01 	lds	r24, 0x0145
    183a:	88 23       	and	r24, r24
    183c:	d9 f0       	breq	.+54     	; 0x1874 <__vector_23+0x62>
    183e:	80 91 45 01 	lds	r24, 0x0145
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	80 93 45 01 	sts	0x0145, r24
    1848:	a6 ec       	ldi	r26, 0xC6	; 198
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	80 91 46 01 	lds	r24, 0x0146
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	e3 5b       	subi	r30, 0xB3	; 179
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	80 81       	ld	r24, Z
    185c:	8c 93       	st	X, r24
    185e:	80 91 46 01 	lds	r24, 0x0146
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	80 93 46 01 	sts	0x0146, r24
    1868:	80 91 46 01 	lds	r24, 0x0146
    186c:	80 34       	cpi	r24, 0x40	; 64
    186e:	11 f4       	brne	.+4      	; 0x1874 <__vector_23+0x62>
    1870:	10 92 46 01 	sts	0x0146, r1
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	0f 90       	pop	r0
    1886:	00 92 5b 00 	sts	0x005B, r0
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <__vector_21>:
    1894:	1f 92       	push	r1
    1896:	0f 92       	push	r0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	0f 92       	push	r0
    189c:	00 90 5b 00 	lds	r0, 0x005B
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	e0 ec       	ldi	r30, 0xC0	; 192
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	8c 71       	andi	r24, 0x1C	; 28
    18c8:	90 70       	andi	r25, 0x00	; 0
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__vector_21+0x70>
    18ce:	80 91 47 01 	lds	r24, 0x0147
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	e6 ec       	ldi	r30, 0xC6	; 198
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	20 81       	ld	r18, Z
    18dc:	fc 01       	movw	r30, r24
    18de:	e3 57       	subi	r30, 0x73	; 115
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	20 83       	st	Z, r18
    18e4:	80 91 47 01 	lds	r24, 0x0147
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 47 01 	sts	0x0147, r24
    18ee:	80 91 47 01 	lds	r24, 0x0147
    18f2:	80 34       	cpi	r24, 0x40	; 64
    18f4:	11 f4       	brne	.+4      	; 0x18fa <__vector_21+0x66>
    18f6:	10 92 47 01 	sts	0x0147, r1
    18fa:	80 91 48 01 	lds	r24, 0x0148
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 48 01 	sts	0x0148, r24
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	ff 91       	pop	r31
    190c:	ef 91       	pop	r30
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	00 92 5b 00 	sts	0x005B, r0
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_34>:
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	00 90 5b 00 	lds	r0, 0x005B
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	80 91 49 01 	lds	r24, 0x0149
    194c:	88 23       	and	r24, r24
    194e:	d9 f0       	breq	.+54     	; 0x1986 <__vector_34+0x62>
    1950:	80 91 49 01 	lds	r24, 0x0149
    1954:	81 50       	subi	r24, 0x01	; 1
    1956:	80 93 49 01 	sts	0x0149, r24
    195a:	ae ec       	ldi	r26, 0xCE	; 206
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	80 91 4a 01 	lds	r24, 0x014A
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	fc 01       	movw	r30, r24
    1968:	e3 53       	subi	r30, 0x33	; 51
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 81       	ld	r24, Z
    196e:	8c 93       	st	X, r24
    1970:	80 91 4a 01 	lds	r24, 0x014A
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 4a 01 	sts	0x014A, r24
    197a:	80 91 4a 01 	lds	r24, 0x014A
    197e:	80 34       	cpi	r24, 0x40	; 64
    1980:	11 f4       	brne	.+4      	; 0x1986 <__vector_34+0x62>
    1982:	10 92 4a 01 	sts	0x014A, r1
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	0f 90       	pop	r0
    1998:	00 92 5b 00 	sts	0x005B, r0
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__vector_32>:
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	00 90 5b 00 	lds	r0, 0x005B
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	e8 ec       	ldi	r30, 0xC8	; 200
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	8c 71       	andi	r24, 0x1C	; 28
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	d9 f4       	brne	.+54     	; 0x1a16 <__vector_32+0x70>
    19e0:	80 91 4b 01 	lds	r24, 0x014B
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ee ec       	ldi	r30, 0xCE	; 206
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	20 81       	ld	r18, Z
    19ee:	fc 01       	movw	r30, r24
    19f0:	e3 5f       	subi	r30, 0xF3	; 243
    19f2:	fd 4f       	sbci	r31, 0xFD	; 253
    19f4:	20 83       	st	Z, r18
    19f6:	80 91 4b 01 	lds	r24, 0x014B
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 4b 01 	sts	0x014B, r24
    1a00:	80 91 4b 01 	lds	r24, 0x014B
    1a04:	80 34       	cpi	r24, 0x40	; 64
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <__vector_32+0x66>
    1a08:	10 92 4b 01 	sts	0x014B, r1
    1a0c:	80 91 4c 01 	lds	r24, 0x014C
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 4c 01 	sts	0x014C, r24
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	00 92 5b 00 	sts	0x005B, r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__subsf3>:
    1a36:	50 58       	subi	r21, 0x80	; 128

00001a38 <__addsf3>:
    1a38:	bb 27       	eor	r27, r27
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	0e d0       	rcall	.+28     	; 0x1a5a <__addsf3x>
    1a3e:	75 c1       	rjmp	.+746    	; 0x1d2a <__fp_round>
    1a40:	66 d1       	rcall	.+716    	; 0x1d0e <__fp_pscA>
    1a42:	30 f0       	brcs	.+12     	; 0x1a50 <__addsf3+0x18>
    1a44:	6b d1       	rcall	.+726    	; 0x1d1c <__fp_pscB>
    1a46:	20 f0       	brcs	.+8      	; 0x1a50 <__addsf3+0x18>
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <__addsf3+0x1e>
    1a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <__addsf3+0x1a>
    1a4e:	1e f4       	brtc	.+6      	; 0x1a56 <__addsf3+0x1e>
    1a50:	5b c1       	rjmp	.+694    	; 0x1d08 <__fp_nan>
    1a52:	0e f4       	brtc	.+2      	; 0x1a56 <__addsf3+0x1e>
    1a54:	e0 95       	com	r30
    1a56:	e7 fb       	bst	r30, 7
    1a58:	51 c1       	rjmp	.+674    	; 0x1cfc <__fp_inf>

00001a5a <__addsf3x>:
    1a5a:	e9 2f       	mov	r30, r25
    1a5c:	77 d1       	rcall	.+750    	; 0x1d4c <__fp_split3>
    1a5e:	80 f3       	brcs	.-32     	; 0x1a40 <__addsf3+0x8>
    1a60:	ba 17       	cp	r27, r26
    1a62:	62 07       	cpc	r22, r18
    1a64:	73 07       	cpc	r23, r19
    1a66:	84 07       	cpc	r24, r20
    1a68:	95 07       	cpc	r25, r21
    1a6a:	18 f0       	brcs	.+6      	; 0x1a72 <__addsf3x+0x18>
    1a6c:	71 f4       	brne	.+28     	; 0x1a8a <__addsf3x+0x30>
    1a6e:	9e f5       	brtc	.+102    	; 0x1ad6 <__addsf3x+0x7c>
    1a70:	8f c1       	rjmp	.+798    	; 0x1d90 <__fp_zero>
    1a72:	0e f4       	brtc	.+2      	; 0x1a76 <__addsf3x+0x1c>
    1a74:	e0 95       	com	r30
    1a76:	0b 2e       	mov	r0, r27
    1a78:	ba 2f       	mov	r27, r26
    1a7a:	a0 2d       	mov	r26, r0
    1a7c:	0b 01       	movw	r0, r22
    1a7e:	b9 01       	movw	r22, r18
    1a80:	90 01       	movw	r18, r0
    1a82:	0c 01       	movw	r0, r24
    1a84:	ca 01       	movw	r24, r20
    1a86:	a0 01       	movw	r20, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	ff 27       	eor	r31, r31
    1a8c:	59 1b       	sub	r21, r25
    1a8e:	99 f0       	breq	.+38     	; 0x1ab6 <__addsf3x+0x5c>
    1a90:	59 3f       	cpi	r21, 0xF9	; 249
    1a92:	50 f4       	brcc	.+20     	; 0x1aa8 <__addsf3x+0x4e>
    1a94:	50 3e       	cpi	r21, 0xE0	; 224
    1a96:	68 f1       	brcs	.+90     	; 0x1af2 <__addsf3x+0x98>
    1a98:	1a 16       	cp	r1, r26
    1a9a:	f0 40       	sbci	r31, 0x00	; 0
    1a9c:	a2 2f       	mov	r26, r18
    1a9e:	23 2f       	mov	r18, r19
    1aa0:	34 2f       	mov	r19, r20
    1aa2:	44 27       	eor	r20, r20
    1aa4:	58 5f       	subi	r21, 0xF8	; 248
    1aa6:	f3 cf       	rjmp	.-26     	; 0x1a8e <__addsf3x+0x34>
    1aa8:	46 95       	lsr	r20
    1aaa:	37 95       	ror	r19
    1aac:	27 95       	ror	r18
    1aae:	a7 95       	ror	r26
    1ab0:	f0 40       	sbci	r31, 0x00	; 0
    1ab2:	53 95       	inc	r21
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__addsf3x+0x4e>
    1ab6:	7e f4       	brtc	.+30     	; 0x1ad6 <__addsf3x+0x7c>
    1ab8:	1f 16       	cp	r1, r31
    1aba:	ba 0b       	sbc	r27, r26
    1abc:	62 0b       	sbc	r22, r18
    1abe:	73 0b       	sbc	r23, r19
    1ac0:	84 0b       	sbc	r24, r20
    1ac2:	ba f0       	brmi	.+46     	; 0x1af2 <__addsf3x+0x98>
    1ac4:	91 50       	subi	r25, 0x01	; 1
    1ac6:	a1 f0       	breq	.+40     	; 0x1af0 <__addsf3x+0x96>
    1ac8:	ff 0f       	add	r31, r31
    1aca:	bb 1f       	adc	r27, r27
    1acc:	66 1f       	adc	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	c2 f7       	brpl	.-16     	; 0x1ac4 <__addsf3x+0x6a>
    1ad4:	0e c0       	rjmp	.+28     	; 0x1af2 <__addsf3x+0x98>
    1ad6:	ba 0f       	add	r27, r26
    1ad8:	62 1f       	adc	r22, r18
    1ada:	73 1f       	adc	r23, r19
    1adc:	84 1f       	adc	r24, r20
    1ade:	48 f4       	brcc	.+18     	; 0x1af2 <__addsf3x+0x98>
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	f7 95       	ror	r31
    1aea:	9e 3f       	cpi	r25, 0xFE	; 254
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__addsf3x+0x96>
    1aee:	b3 cf       	rjmp	.-154    	; 0x1a56 <__addsf3+0x1e>
    1af0:	93 95       	inc	r25
    1af2:	88 0f       	add	r24, r24
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <__addsf3x+0x9e>
    1af6:	99 27       	eor	r25, r25
    1af8:	ee 0f       	add	r30, r30
    1afa:	97 95       	ror	r25
    1afc:	87 95       	ror	r24
    1afe:	08 95       	ret

00001b00 <__cmpsf2>:
    1b00:	d9 d0       	rcall	.+434    	; 0x1cb4 <__fp_cmp>
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <__cmpsf2+0x6>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	08 95       	ret

00001b08 <__divsf3>:
    1b08:	0c d0       	rcall	.+24     	; 0x1b22 <__divsf3x>
    1b0a:	0f c1       	rjmp	.+542    	; 0x1d2a <__fp_round>
    1b0c:	07 d1       	rcall	.+526    	; 0x1d1c <__fp_pscB>
    1b0e:	40 f0       	brcs	.+16     	; 0x1b20 <__divsf3+0x18>
    1b10:	fe d0       	rcall	.+508    	; 0x1d0e <__fp_pscA>
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <__divsf3+0x18>
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <__divsf3+0x16>
    1b16:	5f 3f       	cpi	r21, 0xFF	; 255
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <__divsf3+0x18>
    1b1a:	f0 c0       	rjmp	.+480    	; 0x1cfc <__fp_inf>
    1b1c:	51 11       	cpse	r21, r1
    1b1e:	39 c1       	rjmp	.+626    	; 0x1d92 <__fp_szero>
    1b20:	f3 c0       	rjmp	.+486    	; 0x1d08 <__fp_nan>

00001b22 <__divsf3x>:
    1b22:	14 d1       	rcall	.+552    	; 0x1d4c <__fp_split3>
    1b24:	98 f3       	brcs	.-26     	; 0x1b0c <__divsf3+0x4>

00001b26 <__divsf3_pse>:
    1b26:	99 23       	and	r25, r25
    1b28:	c9 f3       	breq	.-14     	; 0x1b1c <__divsf3+0x14>
    1b2a:	55 23       	and	r21, r21
    1b2c:	b1 f3       	breq	.-20     	; 0x1b1a <__divsf3+0x12>
    1b2e:	95 1b       	sub	r25, r21
    1b30:	55 0b       	sbc	r21, r21
    1b32:	bb 27       	eor	r27, r27
    1b34:	aa 27       	eor	r26, r26
    1b36:	62 17       	cp	r22, r18
    1b38:	73 07       	cpc	r23, r19
    1b3a:	84 07       	cpc	r24, r20
    1b3c:	38 f0       	brcs	.+14     	; 0x1b4c <__divsf3_pse+0x26>
    1b3e:	9f 5f       	subi	r25, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	22 0f       	add	r18, r18
    1b44:	33 1f       	adc	r19, r19
    1b46:	44 1f       	adc	r20, r20
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	a9 f3       	breq	.-22     	; 0x1b36 <__divsf3_pse+0x10>
    1b4c:	33 d0       	rcall	.+102    	; 0x1bb4 <__divsf3_pse+0x8e>
    1b4e:	0e 2e       	mov	r0, r30
    1b50:	3a f0       	brmi	.+14     	; 0x1b60 <__divsf3_pse+0x3a>
    1b52:	e0 e8       	ldi	r30, 0x80	; 128
    1b54:	30 d0       	rcall	.+96     	; 0x1bb6 <__divsf3_pse+0x90>
    1b56:	91 50       	subi	r25, 0x01	; 1
    1b58:	50 40       	sbci	r21, 0x00	; 0
    1b5a:	e6 95       	lsr	r30
    1b5c:	00 1c       	adc	r0, r0
    1b5e:	ca f7       	brpl	.-14     	; 0x1b52 <__divsf3_pse+0x2c>
    1b60:	29 d0       	rcall	.+82     	; 0x1bb4 <__divsf3_pse+0x8e>
    1b62:	fe 2f       	mov	r31, r30
    1b64:	27 d0       	rcall	.+78     	; 0x1bb4 <__divsf3_pse+0x8e>
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	26 17       	cp	r18, r22
    1b70:	37 07       	cpc	r19, r23
    1b72:	48 07       	cpc	r20, r24
    1b74:	ab 07       	cpc	r26, r27
    1b76:	b0 e8       	ldi	r27, 0x80	; 128
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <__divsf3_pse+0x56>
    1b7a:	bb 0b       	sbc	r27, r27
    1b7c:	80 2d       	mov	r24, r0
    1b7e:	bf 01       	movw	r22, r30
    1b80:	ff 27       	eor	r31, r31
    1b82:	93 58       	subi	r25, 0x83	; 131
    1b84:	5f 4f       	sbci	r21, 0xFF	; 255
    1b86:	2a f0       	brmi	.+10     	; 0x1b92 <__divsf3_pse+0x6c>
    1b88:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	68 f0       	brcs	.+26     	; 0x1ba8 <__divsf3_pse+0x82>
    1b8e:	b6 c0       	rjmp	.+364    	; 0x1cfc <__fp_inf>
    1b90:	00 c1       	rjmp	.+512    	; 0x1d92 <__fp_szero>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	ec f3       	brlt	.-6      	; 0x1b90 <__divsf3_pse+0x6a>
    1b96:	98 3e       	cpi	r25, 0xE8	; 232
    1b98:	dc f3       	brlt	.-10     	; 0x1b90 <__divsf3_pse+0x6a>
    1b9a:	86 95       	lsr	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	f7 95       	ror	r31
    1ba4:	9f 5f       	subi	r25, 0xFF	; 255
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__divsf3_pse+0x74>
    1ba8:	88 0f       	add	r24, r24
    1baa:	91 1d       	adc	r25, r1
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	08 95       	ret
    1bb4:	e1 e0       	ldi	r30, 0x01	; 1
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	62 17       	cp	r22, r18
    1bc0:	73 07       	cpc	r23, r19
    1bc2:	84 07       	cpc	r24, r20
    1bc4:	ba 07       	cpc	r27, r26
    1bc6:	20 f0       	brcs	.+8      	; 0x1bd0 <__divsf3_pse+0xaa>
    1bc8:	62 1b       	sub	r22, r18
    1bca:	73 0b       	sbc	r23, r19
    1bcc:	84 0b       	sbc	r24, r20
    1bce:	ba 0b       	sbc	r27, r26
    1bd0:	ee 1f       	adc	r30, r30
    1bd2:	88 f7       	brcc	.-30     	; 0x1bb6 <__divsf3_pse+0x90>
    1bd4:	e0 95       	com	r30
    1bd6:	08 95       	ret

00001bd8 <__fixsfsi>:
    1bd8:	04 d0       	rcall	.+8      	; 0x1be2 <__fixunssfsi>
    1bda:	68 94       	set
    1bdc:	b1 11       	cpse	r27, r1
    1bde:	d9 c0       	rjmp	.+434    	; 0x1d92 <__fp_szero>
    1be0:	08 95       	ret

00001be2 <__fixunssfsi>:
    1be2:	bc d0       	rcall	.+376    	; 0x1d5c <__fp_splitA>
    1be4:	88 f0       	brcs	.+34     	; 0x1c08 <__fixunssfsi+0x26>
    1be6:	9f 57       	subi	r25, 0x7F	; 127
    1be8:	90 f0       	brcs	.+36     	; 0x1c0e <__fixunssfsi+0x2c>
    1bea:	b9 2f       	mov	r27, r25
    1bec:	99 27       	eor	r25, r25
    1bee:	b7 51       	subi	r27, 0x17	; 23
    1bf0:	a0 f0       	brcs	.+40     	; 0x1c1a <__fixunssfsi+0x38>
    1bf2:	d1 f0       	breq	.+52     	; 0x1c28 <__fixunssfsi+0x46>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	1a f0       	brmi	.+6      	; 0x1c04 <__fixunssfsi+0x22>
    1bfe:	ba 95       	dec	r27
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__fixunssfsi+0x12>
    1c02:	12 c0       	rjmp	.+36     	; 0x1c28 <__fixunssfsi+0x46>
    1c04:	b1 30       	cpi	r27, 0x01	; 1
    1c06:	81 f0       	breq	.+32     	; 0x1c28 <__fixunssfsi+0x46>
    1c08:	c3 d0       	rcall	.+390    	; 0x1d90 <__fp_zero>
    1c0a:	b1 e0       	ldi	r27, 0x01	; 1
    1c0c:	08 95       	ret
    1c0e:	c0 c0       	rjmp	.+384    	; 0x1d90 <__fp_zero>
    1c10:	67 2f       	mov	r22, r23
    1c12:	78 2f       	mov	r23, r24
    1c14:	88 27       	eor	r24, r24
    1c16:	b8 5f       	subi	r27, 0xF8	; 248
    1c18:	39 f0       	breq	.+14     	; 0x1c28 <__fixunssfsi+0x46>
    1c1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c1c:	cc f3       	brlt	.-14     	; 0x1c10 <__fixunssfsi+0x2e>
    1c1e:	86 95       	lsr	r24
    1c20:	77 95       	ror	r23
    1c22:	67 95       	ror	r22
    1c24:	b3 95       	inc	r27
    1c26:	d9 f7       	brne	.-10     	; 0x1c1e <__fixunssfsi+0x3c>
    1c28:	3e f4       	brtc	.+14     	; 0x1c38 <__fixunssfsi+0x56>
    1c2a:	90 95       	com	r25
    1c2c:	80 95       	com	r24
    1c2e:	70 95       	com	r23
    1c30:	61 95       	neg	r22
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	8f 4f       	sbci	r24, 0xFF	; 255
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	08 95       	ret

00001c3a <__floatunsisf>:
    1c3a:	e8 94       	clt
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <__floatsisf+0x12>

00001c3e <__floatsisf>:
    1c3e:	97 fb       	bst	r25, 7
    1c40:	3e f4       	brtc	.+14     	; 0x1c50 <__floatsisf+0x12>
    1c42:	90 95       	com	r25
    1c44:	80 95       	com	r24
    1c46:	70 95       	com	r23
    1c48:	61 95       	neg	r22
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	99 23       	and	r25, r25
    1c52:	a9 f0       	breq	.+42     	; 0x1c7e <__floatsisf+0x40>
    1c54:	f9 2f       	mov	r31, r25
    1c56:	96 e9       	ldi	r25, 0x96	; 150
    1c58:	bb 27       	eor	r27, r27
    1c5a:	93 95       	inc	r25
    1c5c:	f6 95       	lsr	r31
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f1 11       	cpse	r31, r1
    1c68:	f8 cf       	rjmp	.-16     	; 0x1c5a <__floatsisf+0x1c>
    1c6a:	fa f4       	brpl	.+62     	; 0x1caa <__floatsisf+0x6c>
    1c6c:	bb 0f       	add	r27, r27
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <__floatsisf+0x36>
    1c70:	60 ff       	sbrs	r22, 0
    1c72:	1b c0       	rjmp	.+54     	; 0x1caa <__floatsisf+0x6c>
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	16 c0       	rjmp	.+44     	; 0x1caa <__floatsisf+0x6c>
    1c7e:	88 23       	and	r24, r24
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <__floatsisf+0x48>
    1c82:	96 e9       	ldi	r25, 0x96	; 150
    1c84:	11 c0       	rjmp	.+34     	; 0x1ca8 <__floatsisf+0x6a>
    1c86:	77 23       	and	r23, r23
    1c88:	21 f0       	breq	.+8      	; 0x1c92 <__floatsisf+0x54>
    1c8a:	9e e8       	ldi	r25, 0x8E	; 142
    1c8c:	87 2f       	mov	r24, r23
    1c8e:	76 2f       	mov	r23, r22
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <__floatsisf+0x5e>
    1c92:	66 23       	and	r22, r22
    1c94:	71 f0       	breq	.+28     	; 0x1cb2 <__floatsisf+0x74>
    1c96:	96 e8       	ldi	r25, 0x86	; 134
    1c98:	86 2f       	mov	r24, r22
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	2a f0       	brmi	.+10     	; 0x1caa <__floatsisf+0x6c>
    1ca0:	9a 95       	dec	r25
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	da f7       	brpl	.-10     	; 0x1ca0 <__floatsisf+0x62>
    1caa:	88 0f       	add	r24, r24
    1cac:	96 95       	lsr	r25
    1cae:	87 95       	ror	r24
    1cb0:	97 f9       	bld	r25, 7
    1cb2:	08 95       	ret

00001cb4 <__fp_cmp>:
    1cb4:	99 0f       	add	r25, r25
    1cb6:	00 08       	sbc	r0, r0
    1cb8:	55 0f       	add	r21, r21
    1cba:	aa 0b       	sbc	r26, r26
    1cbc:	e0 e8       	ldi	r30, 0x80	; 128
    1cbe:	fe ef       	ldi	r31, 0xFE	; 254
    1cc0:	16 16       	cp	r1, r22
    1cc2:	17 06       	cpc	r1, r23
    1cc4:	e8 07       	cpc	r30, r24
    1cc6:	f9 07       	cpc	r31, r25
    1cc8:	c0 f0       	brcs	.+48     	; 0x1cfa <__fp_cmp+0x46>
    1cca:	12 16       	cp	r1, r18
    1ccc:	13 06       	cpc	r1, r19
    1cce:	e4 07       	cpc	r30, r20
    1cd0:	f5 07       	cpc	r31, r21
    1cd2:	98 f0       	brcs	.+38     	; 0x1cfa <__fp_cmp+0x46>
    1cd4:	62 1b       	sub	r22, r18
    1cd6:	73 0b       	sbc	r23, r19
    1cd8:	84 0b       	sbc	r24, r20
    1cda:	95 0b       	sbc	r25, r21
    1cdc:	39 f4       	brne	.+14     	; 0x1cec <__fp_cmp+0x38>
    1cde:	0a 26       	eor	r0, r26
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <__fp_cmp+0x46>
    1ce2:	23 2b       	or	r18, r19
    1ce4:	24 2b       	or	r18, r20
    1ce6:	25 2b       	or	r18, r21
    1ce8:	21 f4       	brne	.+8      	; 0x1cf2 <__fp_cmp+0x3e>
    1cea:	08 95       	ret
    1cec:	0a 26       	eor	r0, r26
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <__fp_cmp+0x3e>
    1cf0:	a1 40       	sbci	r26, 0x01	; 1
    1cf2:	a6 95       	lsr	r26
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	81 1d       	adc	r24, r1
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	08 95       	ret

00001cfc <__fp_inf>:
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	9f 67       	ori	r25, 0x7F	; 127
    1d00:	80 e8       	ldi	r24, 0x80	; 128
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	08 95       	ret

00001d08 <__fp_nan>:
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	80 ec       	ldi	r24, 0xC0	; 192
    1d0c:	08 95       	ret

00001d0e <__fp_pscA>:
    1d0e:	00 24       	eor	r0, r0
    1d10:	0a 94       	dec	r0
    1d12:	16 16       	cp	r1, r22
    1d14:	17 06       	cpc	r1, r23
    1d16:	18 06       	cpc	r1, r24
    1d18:	09 06       	cpc	r0, r25
    1d1a:	08 95       	ret

00001d1c <__fp_pscB>:
    1d1c:	00 24       	eor	r0, r0
    1d1e:	0a 94       	dec	r0
    1d20:	12 16       	cp	r1, r18
    1d22:	13 06       	cpc	r1, r19
    1d24:	14 06       	cpc	r1, r20
    1d26:	05 06       	cpc	r0, r21
    1d28:	08 95       	ret

00001d2a <__fp_round>:
    1d2a:	09 2e       	mov	r0, r25
    1d2c:	03 94       	inc	r0
    1d2e:	00 0c       	add	r0, r0
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <__fp_round+0xc>
    1d32:	88 23       	and	r24, r24
    1d34:	52 f0       	brmi	.+20     	; 0x1d4a <__fp_round+0x20>
    1d36:	bb 0f       	add	r27, r27
    1d38:	40 f4       	brcc	.+16     	; 0x1d4a <__fp_round+0x20>
    1d3a:	bf 2b       	or	r27, r31
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <__fp_round+0x18>
    1d3e:	60 ff       	sbrs	r22, 0
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <__fp_round+0x20>
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	8f 4f       	sbci	r24, 0xFF	; 255
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	08 95       	ret

00001d4c <__fp_split3>:
    1d4c:	57 fd       	sbrc	r21, 7
    1d4e:	90 58       	subi	r25, 0x80	; 128
    1d50:	44 0f       	add	r20, r20
    1d52:	55 1f       	adc	r21, r21
    1d54:	59 f0       	breq	.+22     	; 0x1d6c <__fp_splitA+0x10>
    1d56:	5f 3f       	cpi	r21, 0xFF	; 255
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <__fp_splitA+0x1a>
    1d5a:	47 95       	ror	r20

00001d5c <__fp_splitA>:
    1d5c:	88 0f       	add	r24, r24
    1d5e:	97 fb       	bst	r25, 7
    1d60:	99 1f       	adc	r25, r25
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <__fp_splitA+0x20>
    1d64:	9f 3f       	cpi	r25, 0xFF	; 255
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <__fp_splitA+0x2a>
    1d68:	87 95       	ror	r24
    1d6a:	08 95       	ret
    1d6c:	12 16       	cp	r1, r18
    1d6e:	13 06       	cpc	r1, r19
    1d70:	14 06       	cpc	r1, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	f2 cf       	rjmp	.-28     	; 0x1d5a <__fp_split3+0xe>
    1d76:	46 95       	lsr	r20
    1d78:	f1 df       	rcall	.-30     	; 0x1d5c <__fp_splitA>
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <__fp_splitA+0x30>
    1d7c:	16 16       	cp	r1, r22
    1d7e:	17 06       	cpc	r1, r23
    1d80:	18 06       	cpc	r1, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	f1 cf       	rjmp	.-30     	; 0x1d68 <__fp_splitA+0xc>
    1d86:	86 95       	lsr	r24
    1d88:	71 05       	cpc	r23, r1
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	08 94       	sec
    1d8e:	08 95       	ret

00001d90 <__fp_zero>:
    1d90:	e8 94       	clt

00001d92 <__fp_szero>:
    1d92:	bb 27       	eor	r27, r27
    1d94:	66 27       	eor	r22, r22
    1d96:	77 27       	eor	r23, r23
    1d98:	cb 01       	movw	r24, r22
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret

00001d9e <__gesf2>:
    1d9e:	8a df       	rcall	.-236    	; 0x1cb4 <__fp_cmp>
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <__gesf2+0x6>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	08 95       	ret

00001da6 <__mulsf3>:
    1da6:	0b d0       	rcall	.+22     	; 0x1dbe <__mulsf3x>
    1da8:	c0 cf       	rjmp	.-128    	; 0x1d2a <__fp_round>
    1daa:	b1 df       	rcall	.-158    	; 0x1d0e <__fp_pscA>
    1dac:	28 f0       	brcs	.+10     	; 0x1db8 <__mulsf3+0x12>
    1dae:	b6 df       	rcall	.-148    	; 0x1d1c <__fp_pscB>
    1db0:	18 f0       	brcs	.+6      	; 0x1db8 <__mulsf3+0x12>
    1db2:	95 23       	and	r25, r21
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <__mulsf3+0x12>
    1db6:	a2 cf       	rjmp	.-188    	; 0x1cfc <__fp_inf>
    1db8:	a7 cf       	rjmp	.-178    	; 0x1d08 <__fp_nan>
    1dba:	11 24       	eor	r1, r1
    1dbc:	ea cf       	rjmp	.-44     	; 0x1d92 <__fp_szero>

00001dbe <__mulsf3x>:
    1dbe:	c6 df       	rcall	.-116    	; 0x1d4c <__fp_split3>
    1dc0:	a0 f3       	brcs	.-24     	; 0x1daa <__mulsf3+0x4>

00001dc2 <__mulsf3_pse>:
    1dc2:	95 9f       	mul	r25, r21
    1dc4:	d1 f3       	breq	.-12     	; 0x1dba <__mulsf3+0x14>
    1dc6:	95 0f       	add	r25, r21
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	55 1f       	adc	r21, r21
    1dcc:	62 9f       	mul	r22, r18
    1dce:	f0 01       	movw	r30, r0
    1dd0:	72 9f       	mul	r23, r18
    1dd2:	bb 27       	eor	r27, r27
    1dd4:	f0 0d       	add	r31, r0
    1dd6:	b1 1d       	adc	r27, r1
    1dd8:	63 9f       	mul	r22, r19
    1dda:	aa 27       	eor	r26, r26
    1ddc:	f0 0d       	add	r31, r0
    1dde:	b1 1d       	adc	r27, r1
    1de0:	aa 1f       	adc	r26, r26
    1de2:	64 9f       	mul	r22, r20
    1de4:	66 27       	eor	r22, r22
    1de6:	b0 0d       	add	r27, r0
    1de8:	a1 1d       	adc	r26, r1
    1dea:	66 1f       	adc	r22, r22
    1dec:	82 9f       	mul	r24, r18
    1dee:	22 27       	eor	r18, r18
    1df0:	b0 0d       	add	r27, r0
    1df2:	a1 1d       	adc	r26, r1
    1df4:	62 1f       	adc	r22, r18
    1df6:	73 9f       	mul	r23, r19
    1df8:	b0 0d       	add	r27, r0
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	62 1f       	adc	r22, r18
    1dfe:	83 9f       	mul	r24, r19
    1e00:	a0 0d       	add	r26, r0
    1e02:	61 1d       	adc	r22, r1
    1e04:	22 1f       	adc	r18, r18
    1e06:	74 9f       	mul	r23, r20
    1e08:	33 27       	eor	r19, r19
    1e0a:	a0 0d       	add	r26, r0
    1e0c:	61 1d       	adc	r22, r1
    1e0e:	23 1f       	adc	r18, r19
    1e10:	84 9f       	mul	r24, r20
    1e12:	60 0d       	add	r22, r0
    1e14:	21 1d       	adc	r18, r1
    1e16:	82 2f       	mov	r24, r18
    1e18:	76 2f       	mov	r23, r22
    1e1a:	6a 2f       	mov	r22, r26
    1e1c:	11 24       	eor	r1, r1
    1e1e:	9f 57       	subi	r25, 0x7F	; 127
    1e20:	50 40       	sbci	r21, 0x00	; 0
    1e22:	8a f0       	brmi	.+34     	; 0x1e46 <__mulsf3_pse+0x84>
    1e24:	e1 f0       	breq	.+56     	; 0x1e5e <__mulsf3_pse+0x9c>
    1e26:	88 23       	and	r24, r24
    1e28:	4a f0       	brmi	.+18     	; 0x1e3c <__mulsf3_pse+0x7a>
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	bb 1f       	adc	r27, r27
    1e30:	66 1f       	adc	r22, r22
    1e32:	77 1f       	adc	r23, r23
    1e34:	88 1f       	adc	r24, r24
    1e36:	91 50       	subi	r25, 0x01	; 1
    1e38:	50 40       	sbci	r21, 0x00	; 0
    1e3a:	a9 f7       	brne	.-22     	; 0x1e26 <__mulsf3_pse+0x64>
    1e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3e:	51 05       	cpc	r21, r1
    1e40:	70 f0       	brcs	.+28     	; 0x1e5e <__mulsf3_pse+0x9c>
    1e42:	5c cf       	rjmp	.-328    	; 0x1cfc <__fp_inf>
    1e44:	a6 cf       	rjmp	.-180    	; 0x1d92 <__fp_szero>
    1e46:	5f 3f       	cpi	r21, 0xFF	; 255
    1e48:	ec f3       	brlt	.-6      	; 0x1e44 <__mulsf3_pse+0x82>
    1e4a:	98 3e       	cpi	r25, 0xE8	; 232
    1e4c:	dc f3       	brlt	.-10     	; 0x1e44 <__mulsf3_pse+0x82>
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	e7 95       	ror	r30
    1e5a:	9f 5f       	subi	r25, 0xFF	; 255
    1e5c:	c1 f7       	brne	.-16     	; 0x1e4e <__mulsf3_pse+0x8c>
    1e5e:	fe 2b       	or	r31, r30
    1e60:	88 0f       	add	r24, r24
    1e62:	91 1d       	adc	r25, r1
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	97 f9       	bld	r25, 7
    1e6a:	08 95       	ret

00001e6c <calloc>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	68 9f       	mul	r22, r24
    1e76:	80 01       	movw	r16, r0
    1e78:	69 9f       	mul	r22, r25
    1e7a:	10 0d       	add	r17, r0
    1e7c:	78 9f       	mul	r23, r24
    1e7e:	10 0d       	add	r17, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	c8 01       	movw	r24, r16
    1e84:	0d d0       	rcall	.+26     	; 0x1ea0 <malloc>
    1e86:	ec 01       	movw	r28, r24
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <calloc+0x28>
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	a8 01       	movw	r20, r16
    1e92:	0b d1       	rcall	.+534    	; 0x20aa <memset>
    1e94:	ce 01       	movw	r24, r28
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <malloc>:
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	10 f4       	brcc	.+4      	; 0x1eb0 <malloc+0x10>
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	a0 91 4f 02 	lds	r26, 0x024F
    1eb4:	b0 91 50 02 	lds	r27, 0x0250
    1eb8:	ed 01       	movw	r28, r26
    1eba:	e0 e0       	ldi	r30, 0x00	; 0
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	21 c0       	rjmp	.+66     	; 0x1f06 <malloc+0x66>
    1ec4:	88 81       	ld	r24, Y
    1ec6:	99 81       	ldd	r25, Y+1	; 0x01
    1ec8:	86 17       	cp	r24, r22
    1eca:	97 07       	cpc	r25, r23
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <malloc+0x48>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	30 97       	sbiw	r30, 0x00	; 0
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <malloc+0x3c>
    1ed6:	93 83       	std	Z+3, r25	; 0x03
    1ed8:	82 83       	std	Z+2, r24	; 0x02
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <malloc+0x44>
    1edc:	90 93 50 02 	sts	0x0250, r25
    1ee0:	80 93 4f 02 	sts	0x024F, r24
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	34 c0       	rjmp	.+104    	; 0x1f50 <malloc+0xb0>
    1ee8:	68 17       	cp	r22, r24
    1eea:	79 07       	cpc	r23, r25
    1eec:	38 f4       	brcc	.+14     	; 0x1efc <malloc+0x5c>
    1eee:	41 15       	cp	r20, r1
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <malloc+0x5a>
    1ef4:	84 17       	cp	r24, r20
    1ef6:	95 07       	cpc	r25, r21
    1ef8:	08 f4       	brcc	.+2      	; 0x1efc <malloc+0x5c>
    1efa:	ac 01       	movw	r20, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	9c 01       	movw	r18, r24
    1f04:	e9 01       	movw	r28, r18
    1f06:	20 97       	sbiw	r28, 0x00	; 0
    1f08:	e9 f6       	brne	.-70     	; 0x1ec4 <malloc+0x24>
    1f0a:	41 15       	cp	r20, r1
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	a9 f1       	breq	.+106    	; 0x1f7a <malloc+0xda>
    1f10:	ca 01       	movw	r24, r20
    1f12:	86 1b       	sub	r24, r22
    1f14:	97 0b       	sbc	r25, r23
    1f16:	04 97       	sbiw	r24, 0x04	; 4
    1f18:	08 f4       	brcc	.+2      	; 0x1f1c <malloc+0x7c>
    1f1a:	ba 01       	movw	r22, r20
    1f1c:	e0 e0       	ldi	r30, 0x00	; 0
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	2a c0       	rjmp	.+84     	; 0x1f76 <malloc+0xd6>
    1f22:	8d 91       	ld	r24, X+
    1f24:	9c 91       	ld	r25, X
    1f26:	11 97       	sbiw	r26, 0x01	; 1
    1f28:	84 17       	cp	r24, r20
    1f2a:	95 07       	cpc	r25, r21
    1f2c:	f9 f4       	brne	.+62     	; 0x1f6c <malloc+0xcc>
    1f2e:	64 17       	cp	r22, r20
    1f30:	75 07       	cpc	r23, r21
    1f32:	81 f4       	brne	.+32     	; 0x1f54 <malloc+0xb4>
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8d 91       	ld	r24, X+
    1f38:	9c 91       	ld	r25, X
    1f3a:	13 97       	sbiw	r26, 0x03	; 3
    1f3c:	30 97       	sbiw	r30, 0x00	; 0
    1f3e:	19 f0       	breq	.+6      	; 0x1f46 <malloc+0xa6>
    1f40:	93 83       	std	Z+3, r25	; 0x03
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <malloc+0xae>
    1f46:	90 93 50 02 	sts	0x0250, r25
    1f4a:	80 93 4f 02 	sts	0x024F, r24
    1f4e:	fd 01       	movw	r30, r26
    1f50:	32 96       	adiw	r30, 0x02	; 2
    1f52:	4f c0       	rjmp	.+158    	; 0x1ff2 <malloc+0x152>
    1f54:	ca 01       	movw	r24, r20
    1f56:	86 1b       	sub	r24, r22
    1f58:	97 0b       	sbc	r25, r23
    1f5a:	fd 01       	movw	r30, r26
    1f5c:	e8 0f       	add	r30, r24
    1f5e:	f9 1f       	adc	r31, r25
    1f60:	61 93       	st	Z+, r22
    1f62:	71 93       	st	Z+, r23
    1f64:	02 97       	sbiw	r24, 0x02	; 2
    1f66:	8d 93       	st	X+, r24
    1f68:	9c 93       	st	X, r25
    1f6a:	43 c0       	rjmp	.+134    	; 0x1ff2 <malloc+0x152>
    1f6c:	fd 01       	movw	r30, r26
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	9c 01       	movw	r18, r24
    1f74:	d9 01       	movw	r26, r18
    1f76:	10 97       	sbiw	r26, 0x00	; 0
    1f78:	a1 f6       	brne	.-88     	; 0x1f22 <malloc+0x82>
    1f7a:	80 91 4d 02 	lds	r24, 0x024D
    1f7e:	90 91 4e 02 	lds	r25, 0x024E
    1f82:	89 2b       	or	r24, r25
    1f84:	41 f4       	brne	.+16     	; 0x1f96 <malloc+0xf6>
    1f86:	80 91 02 01 	lds	r24, 0x0102
    1f8a:	90 91 03 01 	lds	r25, 0x0103
    1f8e:	90 93 4e 02 	sts	0x024E, r25
    1f92:	80 93 4d 02 	sts	0x024D, r24
    1f96:	40 91 04 01 	lds	r20, 0x0104
    1f9a:	50 91 05 01 	lds	r21, 0x0105
    1f9e:	41 15       	cp	r20, r1
    1fa0:	51 05       	cpc	r21, r1
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <malloc+0x114>
    1fa4:	4d b7       	in	r20, 0x3d	; 61
    1fa6:	5e b7       	in	r21, 0x3e	; 62
    1fa8:	80 91 00 01 	lds	r24, 0x0100
    1fac:	90 91 01 01 	lds	r25, 0x0101
    1fb0:	48 1b       	sub	r20, r24
    1fb2:	59 0b       	sbc	r21, r25
    1fb4:	20 91 4d 02 	lds	r18, 0x024D
    1fb8:	30 91 4e 02 	lds	r19, 0x024E
    1fbc:	24 17       	cp	r18, r20
    1fbe:	35 07       	cpc	r19, r21
    1fc0:	b0 f4       	brcc	.+44     	; 0x1fee <malloc+0x14e>
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	82 1b       	sub	r24, r18
    1fc6:	93 0b       	sbc	r25, r19
    1fc8:	86 17       	cp	r24, r22
    1fca:	97 07       	cpc	r25, r23
    1fcc:	80 f0       	brcs	.+32     	; 0x1fee <malloc+0x14e>
    1fce:	ab 01       	movw	r20, r22
    1fd0:	4e 5f       	subi	r20, 0xFE	; 254
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	84 17       	cp	r24, r20
    1fd6:	95 07       	cpc	r25, r21
    1fd8:	50 f0       	brcs	.+20     	; 0x1fee <malloc+0x14e>
    1fda:	42 0f       	add	r20, r18
    1fdc:	53 1f       	adc	r21, r19
    1fde:	50 93 4e 02 	sts	0x024E, r21
    1fe2:	40 93 4d 02 	sts	0x024D, r20
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	61 93       	st	Z+, r22
    1fea:	71 93       	st	Z+, r23
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <malloc+0x152>
    1fee:	e0 e0       	ldi	r30, 0x00	; 0
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret

00001ffa <free>:
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	09 f4       	brne	.+2      	; 0x2004 <free+0xa>
    2002:	50 c0       	rjmp	.+160    	; 0x20a4 <free+0xaa>
    2004:	ec 01       	movw	r28, r24
    2006:	22 97       	sbiw	r28, 0x02	; 2
    2008:	1b 82       	std	Y+3, r1	; 0x03
    200a:	1a 82       	std	Y+2, r1	; 0x02
    200c:	a0 91 4f 02 	lds	r26, 0x024F
    2010:	b0 91 50 02 	lds	r27, 0x0250
    2014:	10 97       	sbiw	r26, 0x00	; 0
    2016:	09 f1       	breq	.+66     	; 0x205a <free+0x60>
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	ac 17       	cp	r26, r28
    201e:	bd 07       	cpc	r27, r29
    2020:	08 f1       	brcs	.+66     	; 0x2064 <free+0x6a>
    2022:	bb 83       	std	Y+3, r27	; 0x03
    2024:	aa 83       	std	Y+2, r26	; 0x02
    2026:	fe 01       	movw	r30, r28
    2028:	21 91       	ld	r18, Z+
    202a:	31 91       	ld	r19, Z+
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	ae 17       	cp	r26, r30
    2032:	bf 07       	cpc	r27, r31
    2034:	79 f4       	brne	.+30     	; 0x2054 <free+0x5a>
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	39 83       	std	Y+1, r19	; 0x01
    2046:	28 83       	st	Y, r18
    2048:	12 96       	adiw	r26, 0x02	; 2
    204a:	8d 91       	ld	r24, X+
    204c:	9c 91       	ld	r25, X
    204e:	13 97       	sbiw	r26, 0x03	; 3
    2050:	9b 83       	std	Y+3, r25	; 0x03
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	41 15       	cp	r20, r1
    2056:	51 05       	cpc	r21, r1
    2058:	71 f4       	brne	.+28     	; 0x2076 <free+0x7c>
    205a:	d0 93 50 02 	sts	0x0250, r29
    205e:	c0 93 4f 02 	sts	0x024F, r28
    2062:	20 c0       	rjmp	.+64     	; 0x20a4 <free+0xaa>
    2064:	12 96       	adiw	r26, 0x02	; 2
    2066:	8d 91       	ld	r24, X+
    2068:	9c 91       	ld	r25, X
    206a:	13 97       	sbiw	r26, 0x03	; 3
    206c:	ad 01       	movw	r20, r26
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	11 f0       	breq	.+4      	; 0x2076 <free+0x7c>
    2072:	dc 01       	movw	r26, r24
    2074:	d3 cf       	rjmp	.-90     	; 0x201c <free+0x22>
    2076:	fa 01       	movw	r30, r20
    2078:	d3 83       	std	Z+3, r29	; 0x03
    207a:	c2 83       	std	Z+2, r28	; 0x02
    207c:	21 91       	ld	r18, Z+
    207e:	31 91       	ld	r19, Z+
    2080:	e2 0f       	add	r30, r18
    2082:	f3 1f       	adc	r31, r19
    2084:	ce 17       	cp	r28, r30
    2086:	df 07       	cpc	r29, r31
    2088:	69 f4       	brne	.+26     	; 0x20a4 <free+0xaa>
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	2e 5f       	subi	r18, 0xFE	; 254
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	fa 01       	movw	r30, r20
    2098:	31 83       	std	Z+1, r19	; 0x01
    209a:	20 83       	st	Z, r18
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	93 83       	std	Z+3, r25	; 0x03
    20a2:	82 83       	std	Z+2, r24	; 0x02
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <memset>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <memset+0x6>
    20ae:	6d 93       	st	X+, r22
    20b0:	41 50       	subi	r20, 0x01	; 1
    20b2:	50 40       	sbci	r21, 0x00	; 0
    20b4:	e0 f7       	brcc	.-8      	; 0x20ae <memset+0x4>
    20b6:	08 95       	ret

000020b8 <_exit>:
    20b8:	f8 94       	cli

000020ba <__stop_program>:
    20ba:	ff cf       	rjmp	.-2      	; 0x20ba <__stop_program>
