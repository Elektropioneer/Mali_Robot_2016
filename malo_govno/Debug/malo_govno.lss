
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c6  00800100  00003a36  00003aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008003c6  008003c6  00003d90  2**0
                  ALLOC
  3 .debug_aranges 00000350  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000928  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027c2  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b44  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002dca  00000000  00000000  00007d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  0000aad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aef  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000308  00000000  00000000  0000bb47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
	OCR3BH = temp >> 8;
	OCR3BL = temp & 0xFF;
}
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       2:	00 00       	nop

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       6:	00 00       	nop
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
{
    timer_callback = callback;
}

static int combination_check()
{
       a:	00 00       	nop

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c3       	rjmp	.+1778   	; 0x73c <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 07 19 	jmp	0x320e	; 0x320e <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e3       	ldi	r30, 0x36	; 54
      a8:	fa e3       	ldi	r31, 0x3A	; 58
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 3c       	cpi	r26, 0xC6	; 198
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	15 e0       	ldi	r17, 0x05	; 5
      bc:	a6 ec       	ldi	r26, 0xC6	; 198
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 30       	cpi	r26, 0x0E	; 14
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2e 97       	sbiw	r28, 0x0e	; 14
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	


	system_init();
      e6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	while(1)
	{
		purpleside();
     1ce:	0e 94 b0 0c 	call	0x1960	; 0x1960 <purpleside>
     1d2:	fd cf       	rjmp	.-6      	; 0x1ce <main+0xfc>

000001d4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <servo_init+0xa>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1e6:	ad e2       	ldi	r26, 0x2D	; 45
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	ed e2       	ldi	r30, 0x2D	; 45
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	88 63       	ori	r24, 0x38	; 56
     1f2:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1f4:	a4 e2       	ldi	r26, 0x24	; 36
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e4 e2       	ldi	r30, 0x24	; 36
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     202:	e4 e9       	ldi	r30, 0x94	; 148
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	11 82       	std	Z+1, r1	; 0x01
     208:	10 82       	st	Z, r1
	TCNT0 = 0;
     20a:	e6 e4       	ldi	r30, 0x46	; 70
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	10 82       	st	Z, r1

	OCR3A = 0;
     210:	e8 e9       	ldi	r30, 0x98	; 152
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
	OCR3B = 0;
     218:	ea e9       	ldi	r30, 0x9A	; 154
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	11 82       	std	Z+1, r1	; 0x01
     21e:	10 82       	st	Z, r1
	OCR3C = 0;
     220:	ec e9       	ldi	r30, 0x9C	; 156
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     228:	e0 e9       	ldi	r30, 0x90	; 144
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	8e eb       	ldi	r24, 0xBE	; 190
     22e:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     230:	e1 e9       	ldi	r30, 0x91	; 145
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	8a e1       	ldi	r24, 0x1A	; 26
     236:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     238:	e4 e4       	ldi	r30, 0x44	; 68
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	8b e6       	ldi	r24, 0x6B	; 107
     23e:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     240:	06 e9       	ldi	r16, 0x96	; 150
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	9a 81       	ldd	r25, Y+2	; 0x02
     248:	cc 01       	movw	r24, r24
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	bc 01       	movw	r22, r24
     250:	cd 01       	movw	r24, r26
     252:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatunsisf>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	bc 01       	movw	r22, r24
     25c:	cd 01       	movw	r24, r26
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	51 e4       	ldi	r21, 0x41	; 65
     266:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	9c 01       	movw	r18, r24
     270:	ad 01       	movw	r20, r26
     272:	60 e8       	ldi	r22, 0x80	; 128
     274:	76 e9       	ldi	r23, 0x96	; 150
     276:	88 e1       	ldi	r24, 0x18	; 24
     278:	9b e4       	ldi	r25, 0x4B	; 75
     27a:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	bc 01       	movw	r22, r24
     284:	cd 01       	movw	r24, r26
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	5f e3       	ldi	r21, 0x3F	; 63
     28e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__addsf3>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
}
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	cf 91       	pop	r28
     2ae:	df 91       	pop	r29
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	08 95       	ret

000002b6 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <servo_set_duty_cycle_umbrella+0xe>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <servo_set_duty_cycle_umbrella+0x10>
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2ce:	e6 e9       	ldi	r30, 0x96	; 150
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	cc 01       	movw	r24, r24
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatunsisf>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4f e7       	ldi	r20, 0x7F	; 127
     2f2:	53 e4       	ldi	r21, 0x43	; 67
     2f4:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	aa 27       	eor	r26, r26
     306:	97 fd       	sbrc	r25, 7
     308:	a0 95       	com	r26
     30a:	ba 2f       	mov	r27, r26
     30c:	bc 01       	movw	r22, r24
     30e:	cd 01       	movw	r24, r26
     310:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	c8 01       	movw	r24, r16
     31a:	b7 01       	movw	r22, r14
     31c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__addsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     348:	e9 e9       	ldi	r30, 0x99	; 153
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	89 2f       	mov	r24, r25
     352:	99 27       	eor	r25, r25
     354:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     356:	e8 e9       	ldi	r30, 0x98	; 152
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	80 83       	st	Z, r24
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	df 93       	push	r29
     37e:	cf 93       	push	r28
     380:	00 d0       	rcall	.+0      	; 0x382 <servo_set_duty_cycle_door+0xe>
     382:	00 d0       	rcall	.+0      	; 0x384 <servo_set_duty_cycle_door+0x10>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     38c:	e6 e9       	ldi	r30, 0x96	; 150
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	91 81       	ldd	r25, Z+1	; 0x01
     394:	cc 01       	movw	r24, r24
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatunsisf>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	bc 01       	movw	r22, r24
     3a8:	cd 01       	movw	r24, r26
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4f e7       	ldi	r20, 0x7F	; 127
     3b0:	53 e4       	ldi	r21, 0x43	; 67
     3b2:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	7c 01       	movw	r14, r24
     3bc:	8d 01       	movw	r16, r26
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	9c 81       	ldd	r25, Y+4	; 0x04
     3c2:	aa 27       	eor	r26, r26
     3c4:	97 fd       	sbrc	r25, 7
     3c6:	a0 95       	com	r26
     3c8:	ba 2f       	mov	r27, r26
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     3d2:	9b 01       	movw	r18, r22
     3d4:	ac 01       	movw	r20, r24
     3d6:	c8 01       	movw	r24, r16
     3d8:	b7 01       	movw	r22, r14
     3da:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__addsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	bc 01       	movw	r22, r24
     3f8:	cd 01       	movw	r24, r26
     3fa:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     406:	eb e9       	ldi	r30, 0x9B	; 155
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	89 2f       	mov	r24, r25
     410:	99 27       	eor	r25, r25
     412:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     414:	ea e9       	ldi	r30, 0x9A	; 154
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	80 83       	st	Z, r24
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <servo_set_umbrella_position>:
	OCR3CL = temp & 0xFF;
}
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	0f 92       	push	r0
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	99 27       	eor	r25, r25
     442:	87 fd       	sbrc	r24, 7
     444:	90 95       	com	r25
     446:	a9 2f       	mov	r26, r25
     448:	b9 2f       	mov	r27, r25
     44a:	bc 01       	movw	r22, r24
     44c:	cd 01       	movw	r24, r26
     44e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	bc 01       	movw	r22, r24
     458:	cd 01       	movw	r24, r26
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	44 eb       	ldi	r20, 0xB4	; 180
     460:	52 e4       	ldi	r21, 0x42	; 66
     462:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	26 e6       	ldi	r18, 0x66	; 102
     470:	36 e6       	ldi	r19, 0x66	; 102
     472:	46 e3       	ldi	r20, 0x36	; 54
     474:	51 ec       	ldi	r21, 0xC1	; 193
     476:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     47a:	dc 01       	movw	r26, r24
     47c:	cb 01       	movw	r24, r22
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4c e6       	ldi	r20, 0x6C	; 108
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__addsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	8f e7       	ldi	r24, 0x7F	; 127
     49c:	93 e4       	ldi	r25, 0x43	; 67
     49e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__subsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	01 df       	rcall	.-510    	; 0x2b6 <servo_set_duty_cycle_umbrella>
}
     4b4:	0f 90       	pop	r0
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	08 95       	ret

000004bc <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     4bc:	df 93       	push	r29
     4be:	cf 93       	push	r28
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	99 27       	eor	r25, r25
     4cc:	87 fd       	sbrc	r24, 7
     4ce:	90 95       	com	r25
     4d0:	a9 2f       	mov	r26, r25
     4d2:	b9 2f       	mov	r27, r25
     4d4:	bc 01       	movw	r22, r24
     4d6:	cd 01       	movw	r24, r26
     4d8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	bc 01       	movw	r22, r24
     4e2:	cd 01       	movw	r24, r26
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	44 eb       	ldi	r20, 0xB4	; 180
     4ea:	52 e4       	ldi	r21, 0x42	; 66
     4ec:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	cd 01       	movw	r24, r26
     4f8:	26 e6       	ldi	r18, 0x66	; 102
     4fa:	36 e6       	ldi	r19, 0x66	; 102
     4fc:	46 e3       	ldi	r20, 0x36	; 54
     4fe:	51 ec       	ldi	r21, 0xC1	; 193
     500:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	bc 01       	movw	r22, r24
     50a:	cd 01       	movw	r24, r26
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4c e6       	ldi	r20, 0x6C	; 108
     512:	53 e4       	ldi	r21, 0x43	; 67
     514:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__addsf3>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	9c 01       	movw	r18, r24
     51e:	ad 01       	movw	r20, r26
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	8f e7       	ldi	r24, 0x7F	; 127
     526:	93 e4       	ldi	r25, 0x43	; 67
     528:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__subsf3>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	1b df       	rcall	.-458    	; 0x374 <servo_set_duty_cycle_door>
}
     53e:	0f 90       	pop	r0
     540:	cf 91       	pop	r28
     542:	df 91       	pop	r29
     544:	08 95       	ret

00000546 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	6c 97       	sbiw	r28, 0x1c	; 28
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	servo_set_umbrella_position(85);
     55a:	85 e5       	ldi	r24, 0x55	; 85
     55c:	6a df       	rcall	.-300    	; 0x432 <servo_set_umbrella_position>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	aa e7       	ldi	r26, 0x7A	; 122
     564:	b4 e4       	ldi	r27, 0x44	; 68
     566:	89 8f       	std	Y+25, r24	; 0x19
     568:	9a 8f       	std	Y+26, r25	; 0x1a
     56a:	ab 8f       	std	Y+27, r26	; 0x1b
     56c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     56e:	69 8d       	ldd	r22, Y+25	; 0x19
     570:	7a 8d       	ldd	r23, Y+26	; 0x1a
     572:	8b 8d       	ldd	r24, Y+27	; 0x1b
     574:	9c 8d       	ldd	r25, Y+28	; 0x1c
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e4       	ldi	r19, 0x40	; 64
     57a:	4c e1       	ldi	r20, 0x1C	; 28
     57c:	55 e4       	ldi	r21, 0x45	; 69
     57e:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	8d 8b       	std	Y+21, r24	; 0x15
     588:	9e 8b       	std	Y+22, r25	; 0x16
     58a:	af 8b       	std	Y+23, r26	; 0x17
     58c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     58e:	6d 89       	ldd	r22, Y+21	; 0x15
     590:	7e 89       	ldd	r23, Y+22	; 0x16
     592:	8f 89       	ldd	r24, Y+23	; 0x17
     594:	98 8d       	ldd	r25, Y+24	; 0x18
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	2c f4       	brge	.+10     	; 0x5b0 <actuators_umbrella+0x6a>
		__ticks = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9c 8b       	std	Y+20, r25	; 0x14
     5ac:	8b 8b       	std	Y+19, r24	; 0x13
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     5b0:	6d 89       	ldd	r22, Y+21	; 0x15
     5b2:	7e 89       	ldd	r23, Y+22	; 0x16
     5b4:	8f 89       	ldd	r24, Y+23	; 0x17
     5b6:	98 8d       	ldd	r25, Y+24	; 0x18
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	3f ef       	ldi	r19, 0xFF	; 255
     5bc:	4f e7       	ldi	r20, 0x7F	; 127
     5be:	57 e4       	ldi	r21, 0x47	; 71
     5c0:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
     5c4:	18 16       	cp	r1, r24
     5c6:	4c f5       	brge	.+82     	; 0x61a <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c8:	69 8d       	ldd	r22, Y+25	; 0x19
     5ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e2       	ldi	r20, 0x20	; 32
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	9c 8b       	std	Y+20, r25	; 0x14
     5ee:	8b 8b       	std	Y+19, r24	; 0x13
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <actuators_umbrella+0xca>
     5f2:	8a ef       	ldi	r24, 0xFA	; 250
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9a 8b       	std	Y+18, r25	; 0x12
     5f8:	89 8b       	std	Y+17, r24	; 0x11
     5fa:	89 89       	ldd	r24, Y+17	; 0x11
     5fc:	9a 89       	ldd	r25, Y+18	; 0x12
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <actuators_umbrella+0xb8>
     602:	9a 8b       	std	Y+18, r25	; 0x12
     604:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	8b 89       	ldd	r24, Y+19	; 0x13
     608:	9c 89       	ldd	r25, Y+20	; 0x14
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	9c 8b       	std	Y+20, r25	; 0x14
     60e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	8b 89       	ldd	r24, Y+19	; 0x13
     612:	9c 89       	ldd	r25, Y+20	; 0x14
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	69 f7       	brne	.-38     	; 0x5f2 <actuators_umbrella+0xac>
     618:	14 c0       	rjmp	.+40     	; 0x642 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61a:	6d 89       	ldd	r22, Y+21	; 0x15
     61c:	7e 89       	ldd	r23, Y+22	; 0x16
     61e:	8f 89       	ldd	r24, Y+23	; 0x17
     620:	98 8d       	ldd	r25, Y+24	; 0x18
     622:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9c 8b       	std	Y+20, r25	; 0x14
     62c:	8b 8b       	std	Y+19, r24	; 0x13
     62e:	8b 89       	ldd	r24, Y+19	; 0x13
     630:	9c 89       	ldd	r25, Y+20	; 0x14
     632:	98 8b       	std	Y+16, r25	; 0x10
     634:	8f 87       	std	Y+15, r24	; 0x0f
     636:	8f 85       	ldd	r24, Y+15	; 0x0f
     638:	98 89       	ldd	r25, Y+16	; 0x10
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <actuators_umbrella+0xf4>
     63e:	98 8b       	std	Y+16, r25	; 0x10
     640:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	servo_set_door_position(0);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	3b df       	rcall	.-394    	; 0x4bc <servo_set_door_position>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	aa e7       	ldi	r26, 0x7A	; 122
     64c:	b4 e4       	ldi	r27, 0x44	; 68
     64e:	8b 87       	std	Y+11, r24	; 0x0b
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	ad 87       	std	Y+13, r26	; 0x0d
     654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     656:	6b 85       	ldd	r22, Y+11	; 0x0b
     658:	7c 85       	ldd	r23, Y+12	; 0x0c
     65a:	8d 85       	ldd	r24, Y+13	; 0x0d
     65c:	9e 85       	ldd	r25, Y+14	; 0x0e
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e4       	ldi	r19, 0x40	; 64
     662:	4c e1       	ldi	r20, 0x1C	; 28
     664:	55 e4       	ldi	r21, 0x45	; 69
     666:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	8f 83       	std	Y+7, r24	; 0x07
     670:	98 87       	std	Y+8, r25	; 0x08
     672:	a9 87       	std	Y+9, r26	; 0x09
     674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     676:	6f 81       	ldd	r22, Y+7	; 0x07
     678:	78 85       	ldd	r23, Y+8	; 0x08
     67a:	89 85       	ldd	r24, Y+9	; 0x09
     67c:	9a 85       	ldd	r25, Y+10	; 0x0a
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e8       	ldi	r20, 0x80	; 128
     684:	5f e3       	ldi	r21, 0x3F	; 63
     686:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	2c f4       	brge	.+10     	; 0x698 <actuators_umbrella+0x152>
		__ticks = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	9e 83       	std	Y+6, r25	; 0x06
     694:	8d 83       	std	Y+5, r24	; 0x05
     696:	3f c0       	rjmp	.+126    	; 0x716 <actuators_umbrella+0x1d0>
	else if (__tmp > 65535)
     698:	6f 81       	ldd	r22, Y+7	; 0x07
     69a:	78 85       	ldd	r23, Y+8	; 0x08
     69c:	89 85       	ldd	r24, Y+9	; 0x09
     69e:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	3f ef       	ldi	r19, 0xFF	; 255
     6a4:	4f e7       	ldi	r20, 0x7F	; 127
     6a6:	57 e4       	ldi	r21, 0x47	; 71
     6a8:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
     6ac:	18 16       	cp	r1, r24
     6ae:	4c f5       	brge	.+82     	; 0x702 <actuators_umbrella+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b0:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b2:	7c 85       	ldd	r23, Y+12	; 0x0c
     6b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e2       	ldi	r20, 0x20	; 32
     6be:	51 e4       	ldi	r21, 0x41	; 65
     6c0:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
     6c4:	dc 01       	movw	r26, r24
     6c6:	cb 01       	movw	r24, r22
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	9e 83       	std	Y+6, r25	; 0x06
     6d6:	8d 83       	std	Y+5, r24	; 0x05
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <actuators_umbrella+0x1b2>
     6da:	8a ef       	ldi	r24, 0xFA	; 250
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <actuators_umbrella+0x1a0>
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ee:	8d 81       	ldd	r24, Y+5	; 0x05
     6f0:	9e 81       	ldd	r25, Y+6	; 0x06
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	9e 83       	std	Y+6, r25	; 0x06
     6f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f8:	8d 81       	ldd	r24, Y+5	; 0x05
     6fa:	9e 81       	ldd	r25, Y+6	; 0x06
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	69 f7       	brne	.-38     	; 0x6da <actuators_umbrella+0x194>
     700:	14 c0       	rjmp	.+40     	; 0x72a <actuators_umbrella+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     702:	6f 81       	ldd	r22, Y+7	; 0x07
     704:	78 85       	ldd	r23, Y+8	; 0x08
     706:	89 85       	ldd	r24, Y+9	; 0x09
     708:	9a 85       	ldd	r25, Y+10	; 0x0a
     70a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	9e 83       	std	Y+6, r25	; 0x06
     714:	8d 83       	std	Y+5, r24	; 0x05
     716:	8d 81       	ldd	r24, Y+5	; 0x05
     718:	9e 81       	ldd	r25, Y+6	; 0x06
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <actuators_umbrella+0x1dc>
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     72a:	6c 96       	adiw	r28, 0x1c	; 28
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	0f 92       	push	r0
     744:	00 90 5b 00 	lds	r0, 0x005B
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	00 d0       	rcall	.+0      	; 0x766 <__vector_18+0x2a>
     766:	00 d0       	rcall	.+0      	; 0x768 <__vector_18+0x2c>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     76c:	ed ee       	ldi	r30, 0xED	; 237
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     774:	1b 82       	std	Y+3, r1	; 0x03
     776:	9c c0       	rjmp	.+312    	; 0x8b0 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     778:	ed ee       	ldi	r30, 0xED	; 237
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	82 95       	swap	r24
     780:	80 7f       	andi	r24, 0xF0	; 240
     782:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     784:	ee ee       	ldi	r30, 0xEE	; 238
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	82 95       	swap	r24
     78c:	86 95       	lsr	r24
     78e:	87 70       	andi	r24, 0x07	; 7
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	81 70       	andi	r24, 0x01	; 1
     796:	90 70       	andi	r25, 0x00	; 0
     798:	88 23       	and	r24, r24
     79a:	09 f4       	brne	.+2      	; 0x79e <__vector_18+0x62>
     79c:	6e c0       	rjmp	.+220    	; 0x87a <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     79e:	ef ee       	ldi	r30, 0xEF	; 239
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 e8       	ldi	r24, 0x80	; 128
     7a4:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     7a6:	ae ee       	ldi	r26, 0xEE	; 238
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	ee ee       	ldi	r30, 0xEE	; 238
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	8f 7d       	andi	r24, 0xDF	; 223
     7b2:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     7b4:	e2 ef       	ldi	r30, 0xF2	; 242
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	82 95       	swap	r24
     7bc:	86 95       	lsr	r24
     7be:	87 70       	andi	r24, 0x07	; 7
     7c0:	28 2f       	mov	r18, r24
     7c2:	e3 ef       	ldi	r30, 0xF3	; 243
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	88 2f       	mov	r24, r24
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	82 2b       	or	r24, r18
     7da:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     7dc:	19 82       	std	Y+1, r1	; 0x01
     7de:	2a c0       	rjmp	.+84     	; 0x834 <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	82 1b       	sub	r24, r18
     7ec:	93 0b       	sbc	r25, r19
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	90 95       	com	r25
     7f4:	81 95       	neg	r24
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	fc 01       	movw	r30, r24
     7fa:	ea 53       	subi	r30, 0x3A	; 58
     7fc:	fc 4f       	sbci	r31, 0xFC	; 252
     7fe:	40 81       	ld	r20, Z
     800:	51 81       	ldd	r21, Z+1	; 0x01
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	88 2f       	mov	r24, r24
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	e6 52       	subi	r30, 0x26	; 38
     80e:	fc 4f       	sbci	r31, 0xFC	; 252
     810:	80 81       	ld	r24, Z
     812:	28 2f       	mov	r18, r24
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	da 01       	movw	r26, r20
     822:	a8 0f       	add	r26, r24
     824:	b9 1f       	adc	r27, r25
     826:	ea ef       	ldi	r30, 0xFA	; 250
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	89 83       	std	Y+1, r24	; 0x01
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	88 30       	cpi	r24, 0x08	; 8
     838:	98 f2       	brcs	.-90     	; 0x7e0 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     83a:	8a 81       	ldd	r24, Y+2	; 0x02
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	fc 01       	movw	r30, r24
     844:	e6 52       	subi	r30, 0x26	; 38
     846:	fc 4f       	sbci	r31, 0xFC	; 252
     848:	80 81       	ld	r24, Z
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	80 83       	st	Z, r24
     84e:	80 81       	ld	r24, Z
     850:	85 30       	cpi	r24, 0x05	; 5
     852:	41 f4       	brne	.+16     	; 0x864 <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	fc 01       	movw	r30, r24
     85e:	e6 52       	subi	r30, 0x26	; 38
     860:	fc 4f       	sbci	r31, 0xFC	; 252
     862:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     864:	8a 81       	ldd	r24, Y+2	; 0x02
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	fc 01       	movw	r30, r24
     86e:	e2 51       	subi	r30, 0x12	; 18
     870:	fc 4f       	sbci	r31, 0xFC	; 252
     872:	80 81       	ld	r24, Z
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	80 83       	st	Z, r24
     878:	1f c0       	rjmp	.+62     	; 0x8b8 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     87a:	ee ee       	ldi	r30, 0xEE	; 238
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	82 95       	swap	r24
     882:	86 95       	lsr	r24
     884:	86 95       	lsr	r24
     886:	83 70       	andi	r24, 0x03	; 3
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	90 70       	andi	r25, 0x00	; 0
     890:	88 23       	and	r24, r24
     892:	59 f0       	breq	.+22     	; 0x8aa <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     894:	ef ee       	ldi	r30, 0xEF	; 239
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     89a:	ae ee       	ldi	r26, 0xEE	; 238
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	ee ee       	ldi	r30, 0xEE	; 238
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8f 7b       	andi	r24, 0xBF	; 191
     8a6:	8c 93       	st	X, r24
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	8b 83       	std	Y+3, r24	; 0x03
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	8f 30       	cpi	r24, 0x0F	; 15
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <__vector_18+0x17c>
     8b6:	60 cf       	rjmp	.-320    	; 0x778 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     8b8:	ed ee       	ldi	r30, 0xED	; 237
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	8c 81       	ldd	r24, Y+4	; 0x04
     8be:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     8c0:	aa ed       	ldi	r26, 0xDA	; 218
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	ea ed       	ldi	r30, 0xDA	; 218
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8c 93       	st	X, r24
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	00 92 5b 00 	sts	0x005B, r0
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <CAN_InitModule>:


static void CAN_InitModule(void)
{
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <CAN_InitModule+0x6>
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     906:	e8 ed       	ldi	r30, 0xD8	; 216
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     90e:	1a 82       	std	Y+2, r1	; 0x02
     910:	32 c0       	rjmp	.+100    	; 0x976 <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     912:	ed ee       	ldi	r30, 0xED	; 237
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	82 95       	swap	r24
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	80 83       	st	Z, r24

		CANSTMOB = 0;
     91e:	ee ee       	ldi	r30, 0xEE	; 238
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	10 82       	st	Z, r1
		CANCDMOB = 0;
     924:	ef ee       	ldi	r30, 0xEF	; 239
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	10 82       	st	Z, r1

		CANIDT1 = 0;
     92a:	e3 ef       	ldi	r30, 0xF3	; 243
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     930:	e2 ef       	ldi	r30, 0xF2	; 242
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	10 82       	st	Z, r1
		CANIDT3 = 0;
     936:	e1 ef       	ldi	r30, 0xF1	; 241
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	10 82       	st	Z, r1
		CANIDT4 = 0;
     93c:	e0 ef       	ldi	r30, 0xF0	; 240
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	10 82       	st	Z, r1
		CANIDM1 = 0;
     942:	e7 ef       	ldi	r30, 0xF7	; 247
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	10 82       	st	Z, r1
		CANIDM2 = 0;
     948:	e6 ef       	ldi	r30, 0xF6	; 246
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	10 82       	st	Z, r1
		CANIDM3 = 0;
     94e:	e5 ef       	ldi	r30, 0xF5	; 245
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	10 82       	st	Z, r1
		CANIDM4 = 0;
     954:	e4 ef       	ldi	r30, 0xF4	; 244
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     95a:	19 82       	std	Y+1, r1	; 0x01
     95c:	06 c0       	rjmp	.+12     	; 0x96a <CAN_InitModule+0x6e>
			CANMSG = 0;
     95e:	ea ef       	ldi	r30, 0xFA	; 250
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	88 30       	cpi	r24, 0x08	; 8
     96e:	b8 f3       	brcs	.-18     	; 0x95e <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	8f 30       	cpi	r24, 0x0F	; 15
     97a:	58 f2       	brcs	.-106    	; 0x912 <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     97c:	e8 ed       	ldi	r30, 0xD8	; 216
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     984:	e2 ee       	ldi	r30, 0xE2	; 226
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     98c:	e3 ee       	ldi	r30, 0xE3	; 227
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     994:	e4 ee       	ldi	r30, 0xE4	; 228
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	8e e5       	ldi	r24, 0x5E	; 94
     99a:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     99c:	e5 ee       	ldi	r30, 0xE5	; 229
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     9a2:	eb ed       	ldi	r30, 0xDB	; 219
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 eb       	ldi	r24, 0xB0	; 176
     9a8:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     9aa:	ef ed       	ldi	r30, 0xDF	; 223
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	8f e7       	ldi	r24, 0x7F	; 127
     9b0:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     9b2:	ee ed       	ldi	r30, 0xDE	; 222
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	80 83       	st	Z, r24
	sei();
     9ba:	78 94       	sei
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <CAN_InitRxMob+0x6>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <CAN_InitRxMob+0x8>
     9ce:	0f 92       	push	r0
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     9d8:	ed ee       	ldi	r30, 0xED	; 237
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     9e0:	e9 ed       	ldi	r30, 0xD9	; 217
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	82 95       	swap	r24
     9e8:	8f 70       	andi	r24, 0x0F	; 15
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	81 70       	andi	r24, 0x01	; 1
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	88 23       	and	r24, r24
     9f4:	a9 f7       	brne	.-22     	; 0x9e0 <CAN_InitRxMob+0x1a>
     9f6:	e9 ed       	ldi	r30, 0xD9	; 217
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	86 95       	lsr	r24
     9fe:	86 95       	lsr	r24
     a00:	86 95       	lsr	r24
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	81 70       	andi	r24, 0x01	; 1
     a08:	90 70       	andi	r25, 0x00	; 0
     a0a:	88 23       	and	r24, r24
     a0c:	49 f7       	brne	.-46     	; 0x9e0 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a0e:	1a 82       	std	Y+2, r1	; 0x02
     a10:	3f c0       	rjmp	.+126    	; 0xa90 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     a12:	ed ee       	ldi	r30, 0xED	; 237
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	82 95       	swap	r24
     a1a:	80 7f       	andi	r24, 0xF0	; 240
     a1c:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     a1e:	ef ee       	ldi	r30, 0xEF	; 239
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	82 95       	swap	r24
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	83 70       	andi	r24, 0x03	; 3
     a2c:	88 23       	and	r24, r24
     a2e:	69 f5       	brne	.+90     	; 0xa8a <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     a30:	ef ee       	ldi	r30, 0xEF	; 239
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	8f e0       	ldi	r24, 0x0F	; 15
     a36:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     a38:	e3 ef       	ldi	r30, 0xF3	; 243
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	90 70       	andi	r25, 0x00	; 0
     a42:	96 95       	lsr	r25
     a44:	87 95       	ror	r24
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     a50:	e2 ef       	ldi	r30, 0xF2	; 242
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	82 95       	swap	r24
     a58:	88 0f       	add	r24, r24
     a5a:	80 7e       	andi	r24, 0xE0	; 224
     a5c:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     a5e:	e6 ef       	ldi	r30, 0xF6	; 246
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 ee       	ldi	r24, 0xE0	; 224
     a64:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     a66:	e7 ef       	ldi	r30, 0xF7	; 247
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     a6e:	af ee       	ldi	r26, 0xEF	; 239
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ef ee       	ldi	r30, 0xEF	; 239
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	80 68       	ori	r24, 0x80	; 128
     a7a:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     a7c:	ed ee       	ldi	r30, 0xED	; 237
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	80 83       	st	Z, r24

		return 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	8d 83       	std	Y+5, r24	; 0x05
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	8f 5f       	subi	r24, 0xFF	; 255
     a8e:	8a 83       	std	Y+2, r24	; 0x02
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	8f 30       	cpi	r24, 0x0F	; 15
     a94:	08 f4       	brcc	.+2      	; 0xa98 <CAN_InitRxMob+0xd2>
     a96:	bd cf       	rjmp	.-134    	; 0xa12 <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     a98:	ed ee       	ldi	r30, 0xED	; 237
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	80 83       	st	Z, r24

	return 0;
     aa0:	1d 82       	std	Y+5, r1	; 0x05
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	df 93       	push	r29
     aba:	cf 93       	push	r28
     abc:	00 d0       	rcall	.+0      	; 0xabe <CAN_Init+0xa>
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     ac4:	1b df       	rcall	.-458    	; 0x8fc <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	36 c0       	rjmp	.+108    	; 0xb36 <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	79 df       	rcall	.-270    	; 0x9c6 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	8c 01       	movw	r16, r24
     ae0:	0a 53       	subi	r16, 0x3A	; 58
     ae2:	1c 4f       	sbci	r17, 0xFC	; 252
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <calloc>
     af0:	f8 01       	movw	r30, r16
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	48 2f       	mov	r20, r24
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	88 2f       	mov	r24, r24
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	fc 01       	movw	r30, r24
     b0a:	e2 51       	subi	r30, 0x12	; 18
     b0c:	fc 4f       	sbci	r31, 0xFC	; 252
     b0e:	10 82       	st	Z, r1
     b10:	fc 01       	movw	r30, r24
     b12:	e2 51       	subi	r30, 0x12	; 18
     b14:	fc 4f       	sbci	r31, 0xFC	; 252
     b16:	80 81       	ld	r24, Z
     b18:	f9 01       	movw	r30, r18
     b1a:	ec 51       	subi	r30, 0x1C	; 28
     b1c:	fc 4f       	sbci	r31, 0xFC	; 252
     b1e:	80 83       	st	Z, r24
     b20:	f9 01       	movw	r30, r18
     b22:	ec 51       	subi	r30, 0x1C	; 28
     b24:	fc 4f       	sbci	r31, 0xFC	; 252
     b26:	80 81       	ld	r24, Z
     b28:	fa 01       	movw	r30, r20
     b2a:	e6 52       	subi	r30, 0x26	; 38
     b2c:	fc 4f       	sbci	r31, 0xFC	; 252
     b2e:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	89 83       	std	Y+1, r24	; 0x01
     b36:	99 81       	ldd	r25, Y+1	; 0x01
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	98 17       	cp	r25, r24
     b3c:	30 f2       	brcs	.-116    	; 0xaca <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	00 d0       	rcall	.+0      	; 0xb52 <CAN_Read+0x6>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <CAN_Read+0x8>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	9b 83       	std	Y+3, r25	; 0x03
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	fc 01       	movw	r30, r24
     b70:	e2 51       	subi	r30, 0x12	; 18
     b72:	fc 4f       	sbci	r31, 0xFC	; 252
     b74:	80 81       	ld	r24, Z
     b76:	88 23       	and	r24, r24
     b78:	b1 f3       	breq	.-20     	; 0xb66 <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	30 c0       	rjmp	.+96     	; 0xbde <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	9b 81       	ldd	r25, Y+3	; 0x03
     b88:	dc 01       	movw	r26, r24
     b8a:	a2 0f       	add	r26, r18
     b8c:	b3 1f       	adc	r27, r19
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	82 1b       	sub	r24, r18
     b9a:	93 0b       	sbc	r25, r19
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	90 95       	com	r25
     ba2:	81 95       	neg	r24
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	fc 01       	movw	r30, r24
     ba8:	ea 53       	subi	r30, 0x3A	; 58
     baa:	fc 4f       	sbci	r31, 0xFC	; 252
     bac:	40 81       	ld	r20, Z
     bae:	51 81       	ldd	r21, Z+1	; 0x01
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	fc 01       	movw	r30, r24
     bba:	ec 51       	subi	r30, 0x1C	; 28
     bbc:	fc 4f       	sbci	r31, 0xFC	; 252
     bbe:	80 81       	ld	r24, Z
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	fa 01       	movw	r30, r20
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	80 81       	ld	r24, Z
     bd6:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	88 30       	cpi	r24, 0x08	; 8
     be2:	68 f2       	brcs	.-102    	; 0xb7e <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	fc 01       	movw	r30, r24
     bee:	ec 51       	subi	r30, 0x1C	; 28
     bf0:	fc 4f       	sbci	r31, 0xFC	; 252
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	80 83       	st	Z, r24
     bf8:	80 81       	ld	r24, Z
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	41 f4       	brne	.+16     	; 0xc0e <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	fc 01       	movw	r30, r24
     c08:	ec 51       	subi	r30, 0x1C	; 28
     c0a:	fc 4f       	sbci	r31, 0xFC	; 252
     c0c:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	9c 01       	movw	r18, r24
     c16:	21 50       	subi	r18, 0x01	; 1
     c18:	30 40       	sbci	r19, 0x00	; 0
     c1a:	f9 01       	movw	r30, r18
     c1c:	e2 51       	subi	r30, 0x12	; 18
     c1e:	fc 4f       	sbci	r31, 0xFC	; 252
     c20:	80 81       	ld	r24, Z
     c22:	81 50       	subi	r24, 0x01	; 1
     c24:	f9 01       	movw	r30, r18
     c26:	e2 51       	subi	r30, 0x12	; 18
     c28:	fc 4f       	sbci	r31, 0xFC	; 252
     c2a:	80 83       	st	Z, r24

	return 0;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
}
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	27 97       	sbiw	r28, 0x07	; 7
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	9d 83       	std	Y+5, r25	; 0x05
     c52:	8c 83       	std	Y+4, r24	; 0x04
     c54:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c56:	e9 ed       	ldi	r30, 0xD9	; 217
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 95       	swap	r24
     c5e:	8f 70       	andi	r24, 0x0F	; 15
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	81 70       	andi	r24, 0x01	; 1
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	88 23       	and	r24, r24
     c6a:	a9 f7       	brne	.-22     	; 0xc56 <CAN_Write+0x1a>
     c6c:	e9 ed       	ldi	r30, 0xD9	; 217
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	86 95       	lsr	r24
     c74:	86 95       	lsr	r24
     c76:	86 95       	lsr	r24
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	81 70       	andi	r24, 0x01	; 1
     c7e:	90 70       	andi	r25, 0x00	; 0
     c80:	88 23       	and	r24, r24
     c82:	49 f7       	brne	.-46     	; 0xc56 <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c84:	ed ee       	ldi	r30, 0xED	; 237
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	12 c0       	rjmp	.+36     	; 0xcb4 <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
     c90:	ed ee       	ldi	r30, 0xED	; 237
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	82 95       	swap	r24
     c98:	80 7f       	andi	r24, 0xF0	; 240
     c9a:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
     c9c:	ef ee       	ldi	r30, 0xEF	; 239
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	82 95       	swap	r24
     ca4:	86 95       	lsr	r24
     ca6:	86 95       	lsr	r24
     ca8:	83 70       	andi	r24, 0x03	; 3
     caa:	88 23       	and	r24, r24
     cac:	31 f0       	breq	.+12     	; 0xcba <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	8f 30       	cpi	r24, 0x0F	; 15
     cb8:	58 f3       	brcs	.-42     	; 0xc90 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	8f 30       	cpi	r24, 0x0F	; 15
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <CAN_Write+0x8a>
		return -1;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	8f 83       	std	Y+7, r24	; 0x07
     cc4:	32 c0       	rjmp	.+100    	; 0xd2a <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     cc6:	e2 ef       	ldi	r30, 0xF2	; 242
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	82 95       	swap	r24
     cce:	88 0f       	add	r24, r24
     cd0:	80 7e       	andi	r24, 0xE0	; 224
     cd2:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
     cd4:	e3 ef       	ldi	r30, 0xF3	; 243
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	8e 81       	ldd	r24, Y+6	; 0x06
     cda:	86 95       	lsr	r24
     cdc:	86 95       	lsr	r24
     cde:	86 95       	lsr	r24
     ce0:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
     ce2:	ef ee       	ldi	r30, 0xEF	; 239
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	88 e0       	ldi	r24, 0x08	; 8
     ce8:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     cea:	1b 82       	std	Y+3, r1	; 0x03
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <CAN_Write+0xd0>
		CANMSG = data[i];
     cee:	aa ef       	ldi	r26, 0xFA	; 250
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	fc 01       	movw	r30, r24
     cfe:	e2 0f       	add	r30, r18
     d00:	f3 1f       	adc	r31, r19
     d02:	80 81       	ld	r24, Z
     d04:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	8b 83       	std	Y+3, r24	; 0x03
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	70 f3       	brcs	.-36     	; 0xcee <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     d12:	af ee       	ldi	r26, 0xEF	; 239
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ef ee       	ldi	r30, 0xEF	; 239
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 64       	ori	r24, 0x40	; 64
     d1e:	8c 93       	st	X, r24

	CANPAGE = tempPage;
     d20:	ed ee       	ldi	r30, 0xED	; 237
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	80 83       	st	Z, r24

	return 0;
     d28:	1f 82       	std	Y+7, r1	; 0x07
     d2a:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d2c:	27 96       	adiw	r28, 0x07	; 7
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	2c 97       	sbiw	r28, 0x0c	; 12
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	89 87       	std	Y+9, r24	; 0x09
     d54:	6a 87       	std	Y+10, r22	; 0x0a
     d56:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d58:	80 91 08 01 	lds	r24, 0x0108
     d5c:	90 91 09 01 	lds	r25, 0x0109
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	06 97       	sbiw	r24, 0x06	; 6
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <gpio_register_pin+0x5a>
    {
        if(input->pin == pin)
     d70:	ef 81       	ldd	r30, Y+7	; 0x07
     d72:	f8 85       	ldd	r31, Y+8	; 0x08
     d74:	90 81       	ld	r25, Z
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	98 17       	cp	r25, r24
     d7a:	19 f4       	brne	.+6      	; 0xd82 <gpio_register_pin+0x44>
            return 1;
     d7c:	21 e0       	ldi	r18, 0x01	; 1
     d7e:	2c 87       	std	Y+12, r18	; 0x0c
     d80:	c9 c0       	rjmp	.+402    	; 0xf14 <gpio_register_pin+0x1d6>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     d82:	ef 81       	ldd	r30, Y+7	; 0x07
     d84:	f8 85       	ldd	r31, Y+8	; 0x08
     d86:	80 85       	ldd	r24, Z+8	; 0x08
     d88:	91 85       	ldd	r25, Z+9	; 0x09
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	06 97       	sbiw	r24, 0x06	; 6
     d94:	98 87       	std	Y+8, r25	; 0x08
     d96:	8f 83       	std	Y+7, r24	; 0x07
     d98:	8f 81       	ldd	r24, Y+7	; 0x07
     d9a:	98 85       	ldd	r25, Y+8	; 0x08
     d9c:	06 96       	adiw	r24, 0x06	; 6
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	86 30       	cpi	r24, 0x06	; 6
     da2:	92 07       	cpc	r25, r18
     da4:	29 f7       	brne	.-54     	; 0xd70 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     da6:	89 85       	ldd	r24, Y+9	; 0x09
     da8:	86 95       	lsr	r24
     daa:	86 95       	lsr	r24
     dac:	86 95       	lsr	r24
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	87 70       	andi	r24, 0x07	; 7
     db6:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
     db8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <gpio_register_pin+0x82>
     dbe:	48 c0       	rjmp	.+144    	; 0xe50 <gpio_register_pin+0x112>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	c9 01       	movw	r24, r18
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	4e 96       	adiw	r24, 0x1e	; 30
     dd2:	dc 01       	movw	r26, r24
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	c9 01       	movw	r24, r18
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	4e 96       	adiw	r24, 0x1e	; 30
     de6:	fc 01       	movw	r30, r24
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <gpio_register_pin+0xbe>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	2a 95       	dec	r18
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <gpio_register_pin+0xba>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e04:	8e 81       	ldd	r24, Y+6	; 0x06
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	c9 01       	movw	r24, r18
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	4f 96       	adiw	r24, 0x1f	; 31
     e16:	dc 01       	movw	r26, r24
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	c9 01       	movw	r24, r18
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	4f 96       	adiw	r24, 0x1f	; 31
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <gpio_register_pin+0x104>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <gpio_register_pin+0x100>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
        return 0;
     e4c:	1c 86       	std	Y+12, r1	; 0x0c
     e4e:	62 c0       	rjmp	.+196    	; 0xf14 <gpio_register_pin+0x1d6>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     e50:	8e 81       	ldd	r24, Y+6	; 0x06
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	c9 01       	movw	r24, r18
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	4e 96       	adiw	r24, 0x1e	; 30
     e62:	dc 01       	movw	r26, r24
     e64:	8e 81       	ldd	r24, Y+6	; 0x06
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	c9 01       	movw	r24, r18
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	4e 96       	adiw	r24, 0x1e	; 30
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <gpio_register_pin+0x14e>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	2a 95       	dec	r18
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <gpio_register_pin+0x14a>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	c9 01       	movw	r24, r18
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	4f 96       	adiw	r24, 0x1f	; 31
     ea8:	dc 01       	movw	r26, r24
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	4f 96       	adiw	r24, 0x1f	; 31
     ebc:	fc 01       	movw	r30, r24
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <gpio_register_pin+0x194>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a 95       	dec	r18
     ed4:	e2 f7       	brpl	.-8      	; 0xece <gpio_register_pin+0x190>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 0d 1c 	call	0x381a	; 0x381a <malloc>
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	98 85       	ldd	r25, Y+8	; 0x08
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	19 f4       	brne	.+6      	; 0xef4 <gpio_register_pin+0x1b6>
        return 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8c 87       	std	Y+12, r24	; 0x0c
     ef2:	10 c0       	rjmp	.+32     	; 0xf14 <gpio_register_pin+0x1d6>

    input->pin       = pin;
     ef4:	ef 81       	ldd	r30, Y+7	; 0x07
     ef6:	f8 85       	ldd	r31, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
     efc:	ef 81       	ldd	r30, Y+7	; 0x07
     efe:	f8 85       	ldd	r31, Y+8	; 0x08
     f00:	8b 85       	ldd	r24, Y+11	; 0x0b
     f02:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
     f04:	8f 81       	ldd	r24, Y+7	; 0x07
     f06:	98 85       	ldd	r25, Y+8	; 0x08
     f08:	06 96       	adiw	r24, 0x06	; 6
     f0a:	26 e0       	ldi	r18, 0x06	; 6
     f0c:	31 e0       	ldi	r19, 0x01	; 1
     f0e:	b9 01       	movw	r22, r18
     f10:	0b d0       	rcall	.+22     	; 0xf28 <list_add>

    return 0;
     f12:	1c 86       	std	Y+12, r1	; 0x0c
     f14:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     f16:	2c 96       	adiw	r28, 0x0c	; 12
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <list_add+0x6>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <list_add+0x8>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	7c 83       	std	Y+4, r23	; 0x04
     f3a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f3c:	eb 81       	ldd	r30, Y+3	; 0x03
     f3e:	fc 81       	ldd	r31, Y+4	; 0x04
     f40:	42 81       	ldd	r20, Z+2	; 0x02
     f42:	53 81       	ldd	r21, Z+3	; 0x03
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	2b 81       	ldd	r18, Y+3	; 0x03
     f4a:	3c 81       	ldd	r19, Y+4	; 0x04
     f4c:	b9 01       	movw	r22, r18
     f4e:	07 d0       	rcall	.+14     	; 0xf5e <__list_add>
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <__list_add+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <__list_add+0x8>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <__list_add+0xa>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	7c 83       	std	Y+4, r23	; 0x04
     f72:	6b 83       	std	Y+3, r22	; 0x03
     f74:	5e 83       	std	Y+6, r21	; 0x06
     f76:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f78:	ed 81       	ldd	r30, Y+5	; 0x05
     f7a:	fe 81       	ldd	r31, Y+6	; 0x06
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
    new->next = next;
     f84:	e9 81       	ldd	r30, Y+1	; 0x01
     f86:	fa 81       	ldd	r31, Y+2	; 0x02
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	93 83       	std	Z+3, r25	; 0x03
     f8e:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
    prev->next = new;
     f9c:	eb 81       	ldd	r30, Y+3	; 0x03
     f9e:	fc 81       	ldd	r31, Y+4	; 0x04
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	93 83       	std	Z+3, r25	; 0x03
     fa6:	82 83       	std	Z+2, r24	; 0x02
}
     fa8:	26 96       	adiw	r28, 0x06	; 6
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <__gpio_read_pin+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	86 95       	lsr	r24
     fcc:	86 95       	lsr	r24
     fce:	86 95       	lsr	r24
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	87 70       	andi	r24, 0x07	; 7
     fd8:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	4d 96       	adiw	r24, 0x1d	; 29
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a9 01       	movw	r20, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <__gpio_read_pin+0x4c>
    1002:	55 95       	asr	r21
    1004:	47 95       	ror	r20
    1006:	8a 95       	dec	r24
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <__gpio_read_pin+0x48>
    100a:	ca 01       	movw	r24, r20
    100c:	81 70       	andi	r24, 0x01	; 1
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	2b 97       	sbiw	r28, 0x0b	; 11
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1030:	80 91 08 01 	lds	r24, 0x0108
    1034:	90 91 09 01 	lds	r25, 0x0109
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	06 97       	sbiw	r24, 0x06	; 6
    1042:	98 87       	std	Y+8, r25	; 0x08
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	55 c0       	rjmp	.+170    	; 0x10f2 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1048:	ef 81       	ldd	r30, Y+7	; 0x07
    104a:	f8 85       	ldd	r31, Y+8	; 0x08
    104c:	90 81       	ld	r25, Z
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	98 17       	cp	r25, r24
    1052:	09 f0       	breq	.+2      	; 0x1056 <gpio_read_pin+0x3c>
    1054:	43 c0       	rjmp	.+134    	; 0x10dc <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    1056:	1c 82       	std	Y+4, r1	; 0x04
    1058:	21 c0       	rjmp	.+66     	; 0x109c <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8f 81       	ldd	r24, Y+7	; 0x07
    1062:	98 85       	ldd	r25, Y+8	; 0x08
    1064:	82 0f       	add	r24, r18
    1066:	93 1f       	adc	r25, r19
    1068:	fc 01       	movw	r30, r24
    106a:	32 96       	adiw	r30, 0x02	; 2
    106c:	40 81       	ld	r20, Z
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 01       	movw	r18, r24
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	8f 81       	ldd	r24, Y+7	; 0x07
    107c:	98 85       	ldd	r25, Y+8	; 0x08
    107e:	82 0f       	add	r24, r18
    1080:	93 1f       	adc	r25, r19
    1082:	fc 01       	movw	r30, r24
    1084:	32 96       	adiw	r30, 0x02	; 2
    1086:	80 81       	ld	r24, Z
    1088:	48 17       	cp	r20, r24
    108a:	29 f0       	breq	.+10     	; 0x1096 <gpio_read_pin+0x7c>
                    return input->previous_state;
    108c:	ef 81       	ldd	r30, Y+7	; 0x07
    108e:	f8 85       	ldd	r31, Y+8	; 0x08
    1090:	25 81       	ldd	r18, Z+5	; 0x05
    1092:	2b 87       	std	Y+11, r18	; 0x0b
    1094:	38 c0       	rjmp	.+112    	; 0x1106 <__stack+0x7>
                i++;
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	e0 f2       	brcs	.-72     	; 0x105a <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    10a2:	ef 81       	ldd	r30, Y+7	; 0x07
    10a4:	f8 85       	ldd	r31, Y+8	; 0x08
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 27       	eor	r24, r25
    10ac:	88 23       	and	r24, r24
    10ae:	29 f0       	breq	.+10     	; 0x10ba <gpio_read_pin+0xa0>
    10b0:	ef 81       	ldd	r30, Y+7	; 0x07
    10b2:	f8 85       	ldd	r31, Y+8	; 0x08
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	8a 87       	std	Y+10, r24	; 0x0a
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <gpio_read_pin+0xb0>
    10ba:	ef 81       	ldd	r30, Y+7	; 0x07
    10bc:	f8 85       	ldd	r31, Y+8	; 0x08
    10be:	82 81       	ldd	r24, Z+2	; 0x02
    10c0:	1a 86       	std	Y+10, r1	; 0x0a
    10c2:	88 23       	and	r24, r24
    10c4:	11 f4       	brne	.+4      	; 0x10ca <gpio_read_pin+0xb0>
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    10c8:	2a 87       	std	Y+10, r18	; 0x0a
    10ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    10cc:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    10ce:	ef 81       	ldd	r30, Y+7	; 0x07
    10d0:	f8 85       	ldd	r31, Y+8	; 0x08
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	85 83       	std	Z+5, r24	; 0x05

            return state;
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	2b 87       	std	Y+11, r18	; 0x0b
    10da:	15 c0       	rjmp	.+42     	; 0x1106 <__stack+0x7>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10dc:	ef 81       	ldd	r30, Y+7	; 0x07
    10de:	f8 85       	ldd	r31, Y+8	; 0x08
    10e0:	80 85       	ldd	r24, Z+8	; 0x08
    10e2:	91 85       	ldd	r25, Z+9	; 0x09
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	06 97       	sbiw	r24, 0x06	; 6
    10ee:	98 87       	std	Y+8, r25	; 0x08
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	06 96       	adiw	r24, 0x06	; 6
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	86 30       	cpi	r24, 0x06	; 6
    10fc:	92 07       	cpc	r25, r18
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__stack+0x3>
    1100:	a3 cf       	rjmp	.-186    	; 0x1048 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1108:	2b 96       	adiw	r28, 0x0b	; 11
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <gpio_debouncer+0xa>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <gpio_debouncer+0xc>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <gpio_debouncer+0xe>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    112c:	80 91 08 01 	lds	r24, 0x0108
    1130:	90 91 09 01 	lds	r25, 0x0109
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	06 97       	sbiw	r24, 0x06	; 6
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
    1142:	1b c0       	rjmp	.+54     	; 0x117a <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1144:	00 91 f8 03 	lds	r16, 0x03F8
    1148:	10 91 f9 03 	lds	r17, 0x03F9
    114c:	ed 81       	ldd	r30, Y+5	; 0x05
    114e:	fe 81       	ldd	r31, Y+6	; 0x06
    1150:	80 81       	ld	r24, Z
    1152:	33 df       	rcall	.-410    	; 0xfba <__gpio_read_pin>
    1154:	28 2f       	mov	r18, r24
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	80 0f       	add	r24, r16
    115c:	91 1f       	adc	r25, r17
    115e:	fc 01       	movw	r30, r24
    1160:	32 96       	adiw	r30, 0x02	; 2
    1162:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1164:	ed 81       	ldd	r30, Y+5	; 0x05
    1166:	fe 81       	ldd	r31, Y+6	; 0x06
    1168:	80 85       	ldd	r24, Z+8	; 0x08
    116a:	91 85       	ldd	r25, Z+9	; 0x09
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	06 97       	sbiw	r24, 0x06	; 6
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	06 96       	adiw	r24, 0x06	; 6
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	86 30       	cpi	r24, 0x06	; 6
    1184:	92 07       	cpc	r25, r18
    1186:	f1 f6       	brne	.-68     	; 0x1144 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1188:	80 91 f8 03 	lds	r24, 0x03F8
    118c:	90 91 f9 03 	lds	r25, 0x03F9
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	90 93 f9 03 	sts	0x03F9, r25
    1196:	80 93 f8 03 	sts	0x03F8, r24
    119a:	80 91 f8 03 	lds	r24, 0x03F8
    119e:	90 91 f9 03 	lds	r25, 0x03F9
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <gpio_debouncer+0x96>
        count = 0;
    11a8:	10 92 f9 03 	sts	0x03F9, r1
    11ac:	10 92 f8 03 	sts	0x03F8, r1
	
}
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	67 97       	sbiw	r28, 0x17	; 23
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    11dc:	90 91 fa 03 	lds	r25, 0x03FA
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	89 17       	cp	r24, r25
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <odometry_set_speed+0x22>
    11e6:	81 c0       	rjmp	.+258    	; 0x12ea <odometry_set_speed+0x124>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    11e8:	86 e5       	ldi	r24, 0x56	; 86
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    11ec:	8f 89       	ldd	r24, Y+23	; 0x17
    11ee:	88 8b       	std	Y+16, r24	; 0x10
    11f0:	72 c0       	rjmp	.+228    	; 0x12d6 <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a8 e4       	ldi	r26, 0x48	; 72
    11f8:	b2 e4       	ldi	r27, 0x42	; 66
    11fa:	8b 87       	std	Y+11, r24	; 0x0b
    11fc:	9c 87       	std	Y+12, r25	; 0x0c
    11fe:	ad 87       	std	Y+13, r26	; 0x0d
    1200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6b 85       	ldd	r22, Y+11	; 0x0b
    1204:	7c 85       	ldd	r23, Y+12	; 0x0c
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	9e 85       	ldd	r25, Y+14	; 0x0e
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e4       	ldi	r19, 0x40	; 64
    120e:	4c e1       	ldi	r20, 0x1C	; 28
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	98 87       	std	Y+8, r25	; 0x08
    121e:	a9 87       	std	Y+9, r26	; 0x09
    1220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1222:	6f 81       	ldd	r22, Y+7	; 0x07
    1224:	78 85       	ldd	r23, Y+8	; 0x08
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    1236:	88 23       	and	r24, r24
    1238:	2c f4       	brge	.+10     	; 0x1244 <odometry_set_speed+0x7e>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	3f c0       	rjmp	.+126    	; 0x12c2 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1244:	6f 81       	ldd	r22, Y+7	; 0x07
    1246:	78 85       	ldd	r23, Y+8	; 0x08
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	9a 85       	ldd	r25, Y+10	; 0x0a
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	3f ef       	ldi	r19, 0xFF	; 255
    1250:	4f e7       	ldi	r20, 0x7F	; 127
    1252:	57 e4       	ldi	r21, 0x47	; 71
    1254:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	4c f5       	brge	.+82     	; 0x12ae <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	6b 85       	ldd	r22, Y+11	; 0x0b
    125e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1260:	8d 85       	ldd	r24, Y+13	; 0x0d
    1262:	9e 85       	ldd	r25, Y+14	; 0x0e
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <odometry_set_speed+0xde>
    1286:	8a ef       	ldi	r24, 0xFA	; 250
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <odometry_set_speed+0xcc>
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <odometry_set_speed+0xc0>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <odometry_set_speed+0x108>
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	ce 01       	movw	r24, r28
    12d8:	0f 96       	adiw	r24, 0x0f	; 15
    12da:	63 ec       	ldi	r22, 0xC3	; 195
    12dc:	af dc       	rcall	.-1698   	; 0xc3c <CAN_Write>
    12de:	88 23       	and	r24, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <odometry_set_speed+0x11e>
    12e2:	87 cf       	rjmp	.-242    	; 0x11f2 <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    12e4:	8f 89       	ldd	r24, Y+23	; 0x17
    12e6:	80 93 fa 03 	sts	0x03FA, r24
}
    12ea:	67 96       	adiw	r28, 0x17	; 23
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <odometry_query_position>:

static void odometry_query_position(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	66 97       	sbiw	r28, 0x16	; 22
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1310:	80 e5       	ldi	r24, 0x50	; 80
    1312:	8f 87       	std	Y+15, r24	; 0x0f
    1314:	72 c0       	rjmp	.+228    	; 0x13fa <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a8 e4       	ldi	r26, 0x48	; 72
    131c:	b2 e4       	ldi	r27, 0x42	; 66
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    1322:	ad 87       	std	Y+13, r26	; 0x0d
    1324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	6b 85       	ldd	r22, Y+11	; 0x0b
    1328:	7c 85       	ldd	r23, Y+12	; 0x0c
    132a:	8d 85       	ldd	r24, Y+13	; 0x0d
    132c:	9e 85       	ldd	r25, Y+14	; 0x0e
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e4       	ldi	r19, 0x40	; 64
    1332:	4c e1       	ldi	r20, 0x1C	; 28
    1334:	55 e4       	ldi	r21, 0x45	; 69
    1336:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	8f 83       	std	Y+7, r24	; 0x07
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	a9 87       	std	Y+9, r26	; 0x09
    1344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    135a:	88 23       	and	r24, r24
    135c:	2c f4       	brge	.+10     	; 0x1368 <odometry_query_position+0x6c>
		__ticks = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	3f c0       	rjmp	.+126    	; 0x13e6 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f5       	brge	.+82     	; 0x13d2 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1380:	6b 85       	ldd	r22, Y+11	; 0x0b
    1382:	7c 85       	ldd	r23, Y+12	; 0x0c
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <odometry_query_position+0xcc>
    13aa:	8a ef       	ldi	r24, 0xFA	; 250
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <odometry_query_position+0xba>
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <odometry_query_position+0xae>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <odometry_query_position+0xf6>
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	ce 01       	movw	r24, r28
    13fc:	0f 96       	adiw	r24, 0x0f	; 15
    13fe:	63 ec       	ldi	r22, 0xC3	; 195
    1400:	1d dc       	rcall	.-1990   	; 0xc3c <CAN_Write>
    1402:	88 23       	and	r24, r24
    1404:	09 f0       	breq	.+2      	; 0x1408 <odometry_query_position+0x10c>
    1406:	87 cf       	rjmp	.-242    	; 0x1316 <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1408:	ce 01       	movw	r24, r28
    140a:	0f 96       	adiw	r24, 0x0f	; 15
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	9e db       	rcall	.-2244   	; 0xb4c <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1410:	8f 85       	ldd	r24, Y+15	; 0x0f
    1412:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1416:	88 89       	ldd	r24, Y+16	; 0x10
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	38 2f       	mov	r19, r24
    141e:	22 27       	eor	r18, r18
    1420:	89 89       	ldd	r24, Y+17	; 0x11
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	82 2b       	or	r24, r18
    1428:	93 2b       	or	r25, r19
    142a:	90 93 0b 01 	sts	0x010B, r25
    142e:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1432:	8a 89       	ldd	r24, Y+18	; 0x12
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	38 2f       	mov	r19, r24
    143a:	22 27       	eor	r18, r18
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	82 2b       	or	r24, r18
    1444:	93 2b       	or	r25, r19
    1446:	90 93 0d 01 	sts	0x010D, r25
    144a:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    144e:	8c 89       	ldd	r24, Y+20	; 0x14
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	38 2f       	mov	r19, r24
    1456:	22 27       	eor	r18, r18
    1458:	8d 89       	ldd	r24, Y+21	; 0x15
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	82 2b       	or	r24, r18
    1460:	93 2b       	or	r25, r19
    1462:	90 93 0f 01 	sts	0x010F, r25
    1466:	80 93 0e 01 	sts	0x010E, r24
}
    146a:	66 96       	adiw	r28, 0x16	; 22
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	27 97       	sbiw	r28, 0x07	; 7
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1494:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <system_get_system_time>
    1498:	aa 27       	eor	r26, r26
    149a:	97 fd       	sbrc	r25, 7
    149c:	a0 95       	com	r26
    149e:	ba 2f       	mov	r27, r26
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	ab 83       	std	Y+3, r26	; 0x03
    14a6:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    14a8:	29 df       	rcall	.-430    	; 0x12fc <odometry_query_position>
		//nije uso
		if(callback != NULL)
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	71 f0       	breq	.+28     	; 0x14ce <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	ab 81       	ldd	r26, Y+3	; 0x03
    14b8:	bc 81       	ldd	r27, Y+4	; 0x04
    14ba:	ed 81       	ldd	r30, Y+5	; 0x05
    14bc:	fe 81       	ldd	r31, Y+6	; 0x06
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	09 95       	icall
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	19 f4       	brne	.+6      	; 0x14ce <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	8f 83       	std	Y+7, r24	; 0x07
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    14ce:	80 91 10 01 	lds	r24, 0x0110
    14d2:	8d 34       	cpi	r24, 0x4D	; 77
    14d4:	49 f3       	breq	.-46     	; 0x14a8 <odometry_wait_until_done+0x2c>
    14d6:	80 91 10 01 	lds	r24, 0x0110
    14da:	82 35       	cpi	r24, 0x52	; 82
    14dc:	29 f3       	breq	.-54     	; 0x14a8 <odometry_wait_until_done+0x2c>
	
	return ODOMETRY_SUCCESS;
    14de:	1f 82       	std	Y+7, r1	; 0x07
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14e2:	27 96       	adiw	r28, 0x07	; 7
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <odometry_move_to_position>:
		
	return odometry_wait_until_done(callback);
}

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	6c 97       	sbiw	r28, 0x1c	; 28
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	98 8f       	std	Y+24, r25	; 0x18
    150a:	8f 8b       	std	Y+23, r24	; 0x17
    150c:	69 8f       	std	Y+25, r22	; 0x19
    150e:	4a 8f       	std	Y+26, r20	; 0x1a
    1510:	3c 8f       	std	Y+28, r19	; 0x1c
    1512:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1514:	89 8d       	ldd	r24, Y+25	; 0x19
    1516:	57 de       	rcall	.-850    	; 0x11c6 <odometry_set_speed>

	buffer[0] = 'G';
    1518:	87 e4       	ldi	r24, 0x47	; 71
    151a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    151c:	ef 89       	ldd	r30, Y+23	; 0x17
    151e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	89 2f       	mov	r24, r25
    1526:	99 0f       	add	r25, r25
    1528:	99 0b       	sbc	r25, r25
    152a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    152c:	ef 89       	ldd	r30, Y+23	; 0x17
    152e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1536:	ef 89       	ldd	r30, Y+23	; 0x17
    1538:	f8 8d       	ldd	r31, Y+24	; 0x18
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	89 2f       	mov	r24, r25
    1540:	99 0f       	add	r25, r25
    1542:	99 0b       	sbc	r25, r25
    1544:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1546:	ef 89       	ldd	r30, Y+23	; 0x17
    1548:	f8 8d       	ldd	r31, Y+24	; 0x18
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1550:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    1552:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1554:	81 95       	neg	r24
    1556:	8d 8b       	std	Y+21, r24	; 0x15
    1558:	72 c0       	rjmp	.+228    	; 0x163e <odometry_move_to_position+0x14a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a8 e4       	ldi	r26, 0x48	; 72
    1560:	b2 e4       	ldi	r27, 0x42	; 66
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e4       	ldi	r19, 0x40	; 64
    1576:	4c e1       	ldi	r20, 0x1C	; 28
    1578:	55 e4       	ldi	r21, 0x45	; 69
    157a:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <odometry_move_to_position+0xb8>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <odometry_move_to_position+0x136>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <odometry_move_to_position+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <odometry_move_to_position+0x118>
    15ee:	8a ef       	ldi	r24, 0xFA	; 250
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <odometry_move_to_position+0x106>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <odometry_move_to_position+0xfa>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <odometry_move_to_position+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <odometry_move_to_position+0x142>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	ce 01       	movw	r24, r28
    1640:	0f 96       	adiw	r24, 0x0f	; 15
    1642:	63 ec       	ldi	r22, 0xC3	; 195
    1644:	fb da       	rcall	.-2570   	; 0xc3c <CAN_Write>
    1646:	88 23       	and	r24, r24
    1648:	09 f0       	breq	.+2      	; 0x164c <odometry_move_to_position+0x158>
    164a:	87 cf       	rjmp	.-242    	; 0x155a <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    164c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1650:	15 df       	rcall	.-470    	; 0x147c <odometry_wait_until_done>
}
    1652:	6c 96       	adiw	r28, 0x1c	; 28
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	69 97       	sbiw	r28, 0x19	; 25
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	99 8f       	std	Y+25, r25	; 0x19
    167a:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    167c:	89 e4       	ldi	r24, 0x49	; 73
    167e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    1680:	e8 8d       	ldd	r30, Y+24	; 0x18
    1682:	f9 8d       	ldd	r31, Y+25	; 0x19
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	89 2f       	mov	r24, r25
    168a:	99 0f       	add	r25, r25
    168c:	99 0b       	sbc	r25, r25
    168e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    1690:	e8 8d       	ldd	r30, Y+24	; 0x18
    1692:	f9 8d       	ldd	r31, Y+25	; 0x19
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    169a:	e8 8d       	ldd	r30, Y+24	; 0x18
    169c:	f9 8d       	ldd	r31, Y+25	; 0x19
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	89 2f       	mov	r24, r25
    16a4:	99 0f       	add	r25, r25
    16a6:	99 0b       	sbc	r25, r25
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    16aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    16ac:	f9 8d       	ldd	r31, Y+25	; 0x19
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    16b4:	e8 8d       	ldd	r30, Y+24	; 0x18
    16b6:	f9 8d       	ldd	r31, Y+25	; 0x19
    16b8:	84 81       	ldd	r24, Z+4	; 0x04
    16ba:	95 81       	ldd	r25, Z+5	; 0x05
    16bc:	81 95       	neg	r24
    16be:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    16c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c2:	99 27       	eor	r25, r25
    16c4:	87 fd       	sbrc	r24, 7
    16c6:	90 95       	com	r25
    16c8:	89 2f       	mov	r24, r25
    16ca:	99 0f       	add	r25, r25
    16cc:	99 0b       	sbc	r25, r25
    16ce:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    16d4:	e8 8d       	ldd	r30, Y+24	; 0x18
    16d6:	f9 8d       	ldd	r31, Y+25	; 0x19
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	90 93 0b 01 	sts	0x010B, r25
    16e0:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    16e4:	e8 8d       	ldd	r30, Y+24	; 0x18
    16e6:	f9 8d       	ldd	r31, Y+25	; 0x19
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	90 93 0d 01 	sts	0x010D, r25
    16f0:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    16f4:	e8 8d       	ldd	r30, Y+24	; 0x18
    16f6:	f9 8d       	ldd	r31, Y+25	; 0x19
    16f8:	84 81       	ldd	r24, Z+4	; 0x04
    16fa:	95 81       	ldd	r25, Z+5	; 0x05
    16fc:	90 95       	com	r25
    16fe:	81 95       	neg	r24
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	90 93 0f 01 	sts	0x010F, r25
    1706:	80 93 0e 01 	sts	0x010E, r24
    170a:	72 c0       	rjmp	.+228    	; 0x17f0 <odometry_set_position+0x18c>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a8 e4       	ldi	r26, 0x48	; 72
    1712:	b2 e4       	ldi	r27, 0x42	; 66
    1714:	8b 87       	std	Y+11, r24	; 0x0b
    1716:	9c 87       	std	Y+12, r25	; 0x0c
    1718:	ad 87       	std	Y+13, r26	; 0x0d
    171a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e4       	ldi	r19, 0x40	; 64
    1728:	4c e1       	ldi	r20, 0x1C	; 28
    172a:	55 e4       	ldi	r21, 0x45	; 69
    172c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8f 83       	std	Y+7, r24	; 0x07
    1736:	98 87       	std	Y+8, r25	; 0x08
    1738:	a9 87       	std	Y+9, r26	; 0x09
    173a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <odometry_set_position+0xfa>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <odometry_set_position+0x178>
	else if (__tmp > 65535)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <odometry_set_position+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	0f c0       	rjmp	.+30     	; 0x17be <odometry_set_position+0x15a>
    17a0:	8a ef       	ldi	r24, 0xFA	; 250
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <odometry_set_position+0x148>
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <odometry_set_position+0x13c>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <odometry_set_position+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <odometry_set_position+0x184>
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	ce 01       	movw	r24, r28
    17f2:	40 96       	adiw	r24, 0x10	; 16
    17f4:	63 ec       	ldi	r22, 0xC3	; 195
    17f6:	22 da       	rcall	.-3004   	; 0xc3c <CAN_Write>
    17f8:	88 23       	and	r24, r24
    17fa:	09 f0       	breq	.+2      	; 0x17fe <odometry_set_position+0x19a>
    17fc:	87 cf       	rjmp	.-242    	; 0x170c <odometry_set_position+0xa8>
		_delay_ms(50);
}
    17fe:	69 96       	adiw	r28, 0x19	; 25
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	6b 97       	sbiw	r28, 0x1b	; 27
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	98 8f       	std	Y+24, r25	; 0x18
    1826:	8f 8b       	std	Y+23, r24	; 0x17
    1828:	69 8f       	std	Y+25, r22	; 0x19
    182a:	5b 8f       	std	Y+27, r21	; 0x1b
    182c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    182e:	89 8d       	ldd	r24, Y+25	; 0x19
    1830:	ca dc       	rcall	.-1644   	; 0x11c6 <odometry_set_speed>

	angle *= -1;
    1832:	8f 89       	ldd	r24, Y+23	; 0x17
    1834:	98 8d       	ldd	r25, Y+24	; 0x18
    1836:	90 95       	com	r25
    1838:	81 95       	neg	r24
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	98 8f       	std	Y+24, r25	; 0x18
    183e:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    1840:	84 e5       	ldi	r24, 0x54	; 84
    1842:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	98 8d       	ldd	r25, Y+24	; 0x18
    1848:	89 2f       	mov	r24, r25
    184a:	99 0f       	add	r25, r25
    184c:	99 0b       	sbc	r25, r25
    184e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1850:	8f 89       	ldd	r24, Y+23	; 0x17
    1852:	89 8b       	std	Y+17, r24	; 0x11
    1854:	72 c0       	rjmp	.+228    	; 0x193a <odometry_rotate+0x12a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a8 e4       	ldi	r26, 0x48	; 72
    185c:	b2 e4       	ldi	r27, 0x42	; 66
    185e:	8b 87       	std	Y+11, r24	; 0x0b
    1860:	9c 87       	std	Y+12, r25	; 0x0c
    1862:	ad 87       	std	Y+13, r26	; 0x0d
    1864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1866:	6b 85       	ldd	r22, Y+11	; 0x0b
    1868:	7c 85       	ldd	r23, Y+12	; 0x0c
    186a:	8d 85       	ldd	r24, Y+13	; 0x0d
    186c:	9e 85       	ldd	r25, Y+14	; 0x0e
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e4       	ldi	r19, 0x40	; 64
    1872:	4c e1       	ldi	r20, 0x1C	; 28
    1874:	55 e4       	ldi	r21, 0x45	; 69
    1876:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8f 83       	std	Y+7, r24	; 0x07
    1880:	98 87       	std	Y+8, r25	; 0x08
    1882:	a9 87       	std	Y+9, r26	; 0x09
    1884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    189a:	88 23       	and	r24, r24
    189c:	2c f4       	brge	.+10     	; 0x18a8 <odometry_rotate+0x98>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	3f c0       	rjmp	.+126    	; 0x1926 <odometry_rotate+0x116>
	else if (__tmp > 65535)
    18a8:	6f 81       	ldd	r22, Y+7	; 0x07
    18aa:	78 85       	ldd	r23, Y+8	; 0x08
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    18bc:	18 16       	cp	r1, r24
    18be:	4c f5       	brge	.+82     	; 0x1912 <odometry_rotate+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <odometry_rotate+0xf8>
    18ea:	8a ef       	ldi	r24, 0xFA	; 250
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c 83       	std	Y+4, r25	; 0x04
    18f0:	8b 83       	std	Y+3, r24	; 0x03
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <odometry_rotate+0xe6>
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <odometry_rotate+0xda>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <odometry_rotate+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <odometry_rotate+0x122>
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	ce 01       	movw	r24, r28
    193c:	0f 96       	adiw	r24, 0x0f	; 15
    193e:	63 ec       	ldi	r22, 0xC3	; 195
    1940:	7d d9       	rcall	.-3334   	; 0xc3c <CAN_Write>
    1942:	88 23       	and	r24, r24
    1944:	09 f0       	breq	.+2      	; 0x1948 <odometry_rotate+0x138>
    1946:	87 cf       	rjmp	.-242    	; 0x1856 <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1948:	8a 8d       	ldd	r24, Y+26	; 0x1a
    194a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    194c:	97 dd       	rcall	.-1234   	; 0x147c <odometry_wait_until_done>

}
    194e:	6b 96       	adiw	r28, 0x1b	; 27
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <purpleside>:
const struct goto_fields purple_tactic_five_positions[TACTIC_FIVE_POSITION_COUNT] =
{
	{{85,1220},NORMAL_SPEED,FORWARD,NULL}	
};
void purpleside(void)
{
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	cd 59       	subi	r28, 0x9D	; 157
    196e:	d0 40       	sbci	r29, 0x00	; 0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	uint8_t current_position = 0;
    197a:	fe 01       	movw	r30, r28
    197c:	ec 56       	subi	r30, 0x6C	; 108
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    1982:	fe 01       	movw	r30, r28
    1984:	ed 56       	subi	r30, 0x6D	; 109
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    198a:	fe 01       	movw	r30, r28
    198c:	ef 56       	subi	r30, 0x6F	; 111
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	80 83       	st	Z, r24
	
	starting_position.x		= 180;
    1994:	fe 01       	movw	r30, r28
    1996:	eb 56       	subi	r30, 0x6B	; 107
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	84 eb       	ldi	r24, 0xB4	; 180
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
	starting_position.y		= 1010;
    19a2:	fe 01       	movw	r30, r28
    19a4:	eb 56       	subi	r30, 0x6B	; 107
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	82 ef       	ldi	r24, 0xF2	; 242
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	93 83       	std	Z+3, r25	; 0x03
    19ae:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 56       	subi	r30, 0x6B	; 107
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	8a e5       	ldi	r24, 0x5A	; 90
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	95 83       	std	Z+5, r25	; 0x05
    19bc:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    19be:	ce 01       	movw	r24, r28
    19c0:	8b 56       	subi	r24, 0x6B	; 107
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	4f de       	rcall	.-866    	; 0x1664 <odometry_set_position>
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    19c6:	de 01       	movw	r26, r28
    19c8:	ac 56       	subi	r26, 0x6C	; 108
    19ca:	bf 4f       	sbci	r27, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	ed 56       	subi	r30, 0x6D	; 109
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	8c 93       	st	X, r24
    19d6:	31 c1       	rjmp	.+610    	; 0x1c3a <purpleside+0x2da>
	{
		odometry_status = odometry_move_to_position(&(purple_camera[current_position].point), purple_camera[current_position].speed,
    19d8:	fe 01       	movw	r30, r28
    19da:	ec 56       	subi	r30, 0x6C	; 108
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	ca 01       	movw	r24, r20
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	9c 01       	movw	r18, r24
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	82 0f       	add	r24, r18
    19f6:	93 1f       	adc	r25, r19
    19f8:	84 0f       	add	r24, r20
    19fa:	95 1f       	adc	r25, r21
    19fc:	8f 5e       	subi	r24, 0xEF	; 239
    19fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1a00:	bc 01       	movw	r22, r24
    1a02:	fe 01       	movw	r30, r28
    1a04:	ec 56       	subi	r30, 0x6C	; 108
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	ca 01       	movw	r24, r20
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	9c 01       	movw	r18, r24
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	22 0f       	add	r18, r18
    1a1c:	33 1f       	adc	r19, r19
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	84 0f       	add	r24, r20
    1a24:	95 1f       	adc	r25, r21
    1a26:	fc 01       	movw	r30, r24
    1a28:	e8 5e       	subi	r30, 0xE8	; 232
    1a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2c:	a0 81       	ld	r26, Z
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ec 56       	subi	r30, 0x6C	; 108
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	9c 01       	movw	r18, r24
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	84 0f       	add	r24, r20
    1a50:	95 1f       	adc	r25, r21
    1a52:	fc 01       	movw	r30, r24
    1a54:	e7 5e       	subi	r30, 0xE7	; 231
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	80 81       	ld	r24, Z
    1a5a:	b8 2f       	mov	r27, r24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ec 56       	subi	r30, 0x6C	; 108
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	ca 01       	movw	r24, r20
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	9c 01       	movw	r18, r24
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	82 0f       	add	r24, r18
    1a7a:	93 1f       	adc	r25, r19
    1a7c:	84 0f       	add	r24, r20
    1a7e:	95 1f       	adc	r25, r21
    1a80:	fc 01       	movw	r30, r24
    1a82:	e6 5e       	subi	r30, 0xE6	; 230
    1a84:	fe 4f       	sbci	r31, 0xFE	; 254
    1a86:	20 81       	ld	r18, Z
    1a88:	31 81       	ldd	r19, Z+1	; 0x01
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	6a 2f       	mov	r22, r26
    1a8e:	4b 2f       	mov	r20, r27
    1a90:	31 dd       	rcall	.-1438   	; 0x14f4 <odometry_move_to_position>
    1a92:	fe 01       	movw	r30, r28
    1a94:	ee 56       	subi	r30, 0x6E	; 110
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 83       	st	Z, r24
		purple_camera[current_position].direction,purple_camera[current_position].callback);
		if(odometry_status == ODOMETRY_FAIL)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ee 56       	subi	r30, 0x6E	; 110
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <purpleside+0x148>
    1aa6:	d0 c0       	rjmp	.+416    	; 0x1c48 <purpleside+0x2e8>
		}
		else if(current_position == 0)
		{
			//_delay_ms(1000);
		}
		if(current_position == 3)
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ec 56       	subi	r30, 0x6C	; 108
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <purpleside+0x156>
    1ab4:	b9 c0       	rjmp	.+370    	; 0x1c28 <purpleside+0x2c8>
		{
			int i;
			
			odometry_rotate(80,LOW_SPEED,NULL);                     //rotira se da dodje u poziciju za slikanje kamere
    1ab6:	80 e5       	ldi	r24, 0x50	; 80
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	6e e1       	ldi	r22, 0x1E	; 30
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	a7 de       	rcall	.-690    	; 0x1810 <odometry_rotate>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 57       	subi	r30, 0x77	; 119
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	aa ef       	ldi	r26, 0xFA	; 250
    1ace:	b4 e4       	ldi	r27, 0x44	; 68
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	0b 57       	subi	r16, 0x7B	; 123
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e7 57       	subi	r30, 0x77	; 119
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e4       	ldi	r19, 0x40	; 64
    1af0:	4c e1       	ldi	r20, 0x1C	; 28
    1af2:	55 e4       	ldi	r21, 0x45	; 69
    1af4:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b06:	fe 01       	movw	r30, r28
    1b08:	eb 57       	subi	r30, 0x7B	; 123
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	44 f4       	brge	.+16     	; 0x1b34 <purpleside+0x1d4>
		__ticks = 1;
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 57       	subi	r30, 0x7D	; 125
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	64 c0       	rjmp	.+200    	; 0x1bfc <purpleside+0x29c>
	else if (__tmp > 65535)
    1b34:	fe 01       	movw	r30, r28
    1b36:	eb 57       	subi	r30, 0x7B	; 123
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <purpleside+0x1f4>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <purpleside+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 57       	subi	r30, 0x77	; 119
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8e 01       	movw	r16, r28
    1b74:	0d 57       	subi	r16, 0x7D	; 125
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <purpleside+0x26a>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ef 57       	subi	r30, 0x7F	; 127
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	8a ef       	ldi	r24, 0xFA	; 250
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ef 57       	subi	r30, 0x7F	; 127
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <purpleside+0x244>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ef 57       	subi	r30, 0x7F	; 127
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	de 01       	movw	r26, r28
    1bb4:	ad 57       	subi	r26, 0x7D	; 125
    1bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 57       	subi	r30, 0x7D	; 125
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ed 57       	subi	r30, 0x7D	; 125
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	d1 f6       	brne	.-76     	; 0x1b8c <purpleside+0x22c>
    1bd8:	27 c0       	rjmp	.+78     	; 0x1c28 <purpleside+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	0d 57       	subi	r16, 0x7D	; 125
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	eb 57       	subi	r30, 0x7B	; 123
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
    1bfc:	de 01       	movw	r26, r28
    1bfe:	a1 58       	subi	r26, 0x81	; 129
    1c00:	bf 4f       	sbci	r27, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	ed 57       	subi	r30, 0x7D	; 125
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	8d 93       	st	X+, r24
    1c0e:	9c 93       	st	X, r25
    1c10:	fe 01       	movw	r30, r28
    1c12:	e1 58       	subi	r30, 0x81	; 129
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <purpleside+0x2ba>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e1 58       	subi	r30, 0x81	; 129
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
	starting_position.y		= 1010;
	starting_position.angle = 90;
	
	odometry_set_position(&starting_position);
	
	for(current_position = next_position;current_position < TACTIC_CAMERA_POSITION; current_position++)
    1c28:	de 01       	movw	r26, r28
    1c2a:	ac 56       	subi	r26, 0x6C	; 108
    1c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ec 56       	subi	r30, 0x6C	; 108
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	8c 93       	st	X, r24
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ec 56       	subi	r30, 0x6C	; 108
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <purpleside+0x2e8>
    1c46:	c8 ce       	rjmp	.-624    	; 0x19d8 <purpleside+0x78>
		}
	}//end for
	
	while(1)
	{
		switch(active_state)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ef 56       	subi	r30, 0x6F	; 111
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	28 2f       	mov	r18, r24
    1c52:	33 27       	eor	r19, r19
    1c54:	27 fd       	sbrc	r18, 7
    1c56:	30 95       	com	r19
    1c58:	c4 56       	subi	r28, 0x64	; 100
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	39 83       	std	Y+1, r19	; 0x01
    1c5e:	28 83       	st	Y, r18
    1c60:	cc 59       	subi	r28, 0x9C	; 156
    1c62:	d0 40       	sbci	r29, 0x00	; 0
    1c64:	c4 56       	subi	r28, 0x64	; 100
    1c66:	df 4f       	sbci	r29, 0xFF	; 255
    1c68:	88 81       	ld	r24, Y
    1c6a:	99 81       	ldd	r25, Y+1	; 0x01
    1c6c:	cc 59       	subi	r28, 0x9C	; 156
    1c6e:	d0 40       	sbci	r29, 0x00	; 0
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <purpleside+0x318>
    1c76:	8e c3       	rjmp	.+1820   	; 0x2394 <purpleside+0xa34>
    1c78:	c4 56       	subi	r28, 0x64	; 100
    1c7a:	df 4f       	sbci	r29, 0xFF	; 255
    1c7c:	e8 81       	ld	r30, Y
    1c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c80:	cc 59       	subi	r28, 0x9C	; 156
    1c82:	d0 40       	sbci	r29, 0x00	; 0
    1c84:	e5 30       	cpi	r30, 0x05	; 5
    1c86:	f1 05       	cpc	r31, r1
    1c88:	a4 f4       	brge	.+40     	; 0x1cb2 <purpleside+0x352>
    1c8a:	c4 56       	subi	r28, 0x64	; 100
    1c8c:	df 4f       	sbci	r29, 0xFF	; 255
    1c8e:	28 81       	ld	r18, Y
    1c90:	39 81       	ldd	r19, Y+1	; 0x01
    1c92:	cc 59       	subi	r28, 0x9C	; 156
    1c94:	d0 40       	sbci	r29, 0x00	; 0
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	31 05       	cpc	r19, r1
    1c9a:	01 f1       	breq	.+64     	; 0x1cdc <purpleside+0x37c>
    1c9c:	c4 56       	subi	r28, 0x64	; 100
    1c9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ca0:	88 81       	ld	r24, Y
    1ca2:	99 81       	ldd	r25, Y+1	; 0x01
    1ca4:	cc 59       	subi	r28, 0x9C	; 156
    1ca6:	d0 40       	sbci	r29, 0x00	; 0
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <purpleside+0x350>
    1cae:	eb c2       	rjmp	.+1494   	; 0x2286 <purpleside+0x926>
    1cb0:	cb cf       	rjmp	.-106    	; 0x1c48 <purpleside+0x2e8>
    1cb2:	c4 56       	subi	r28, 0x64	; 100
    1cb4:	df 4f       	sbci	r29, 0xFF	; 255
    1cb6:	e8 81       	ld	r30, Y
    1cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cba:	cc 59       	subi	r28, 0x9C	; 156
    1cbc:	d0 40       	sbci	r29, 0x00	; 0
    1cbe:	e5 30       	cpi	r30, 0x05	; 5
    1cc0:	f1 05       	cpc	r31, r1
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <purpleside+0x366>
    1cc4:	c0 c5       	rjmp	.+2944   	; 0x2846 <purpleside+0xee6>
    1cc6:	c4 56       	subi	r28, 0x64	; 100
    1cc8:	df 4f       	sbci	r29, 0xFF	; 255
    1cca:	28 81       	ld	r18, Y
    1ccc:	39 81       	ldd	r19, Y+1	; 0x01
    1cce:	cc 59       	subi	r28, 0x9C	; 156
    1cd0:	d0 40       	sbci	r29, 0x00	; 0
    1cd2:	26 30       	cpi	r18, 0x06	; 6
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <purpleside+0x37a>
    1cd8:	b4 c7       	rjmp	.+3944   	; 0x2c42 <purpleside+0x12e2>
    1cda:	b6 cf       	rjmp	.-148    	; 0x1c48 <purpleside+0x2e8>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ec 56       	subi	r30, 0x6C	; 108
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	de 01       	movw	r26, r28
    1ce4:	ad 56       	subi	r26, 0x6D	; 109
    1ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce8:	8c 91       	ld	r24, X
    1cea:	80 83       	st	Z, r24
    1cec:	c5 c2       	rjmp	.+1418   	; 0x2278 <purpleside+0x918>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ec 56       	subi	r30, 0x6C	; 108
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	9c 01       	movw	r18, r24
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	83 5c       	subi	r24, 0xC3	; 195
    1d14:	9e 4f       	sbci	r25, 0xFE	; 254
    1d16:	bc 01       	movw	r22, r24
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ec 56       	subi	r30, 0x6C	; 108
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	ca 01       	movw	r24, r20
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	82 0f       	add	r24, r18
    1d36:	93 1f       	adc	r25, r19
    1d38:	84 0f       	add	r24, r20
    1d3a:	95 1f       	adc	r25, r21
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	ec 5b       	subi	r30, 0xBC	; 188
    1d40:	fe 4f       	sbci	r31, 0xFE	; 254
    1d42:	a0 81       	ld	r26, Z
    1d44:	fe 01       	movw	r30, r28
    1d46:	ec 56       	subi	r30, 0x6C	; 108
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	ca 01       	movw	r24, r20
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	9c 01       	movw	r18, r24
    1d58:	22 0f       	add	r18, r18
    1d5a:	33 1f       	adc	r19, r19
    1d5c:	22 0f       	add	r18, r18
    1d5e:	33 1f       	adc	r19, r19
    1d60:	82 0f       	add	r24, r18
    1d62:	93 1f       	adc	r25, r19
    1d64:	84 0f       	add	r24, r20
    1d66:	95 1f       	adc	r25, r21
    1d68:	fc 01       	movw	r30, r24
    1d6a:	eb 5b       	subi	r30, 0xBB	; 187
    1d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6e:	80 81       	ld	r24, Z
    1d70:	b8 2f       	mov	r27, r24
    1d72:	fe 01       	movw	r30, r28
    1d74:	ec 56       	subi	r30, 0x6C	; 108
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	ca 01       	movw	r24, r20
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	9c 01       	movw	r18, r24
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	22 0f       	add	r18, r18
    1d8c:	33 1f       	adc	r19, r19
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	84 0f       	add	r24, r20
    1d94:	95 1f       	adc	r25, r21
    1d96:	fc 01       	movw	r30, r24
    1d98:	ea 5b       	subi	r30, 0xBA	; 186
    1d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9c:	20 81       	ld	r18, Z
    1d9e:	31 81       	ldd	r19, Z+1	; 0x01
    1da0:	cb 01       	movw	r24, r22
    1da2:	6a 2f       	mov	r22, r26
    1da4:	4b 2f       	mov	r20, r27
    1da6:	a6 db       	rcall	.-2228   	; 0x14f4 <odometry_move_to_position>
    1da8:	fe 01       	movw	r30, r28
    1daa:	ee 56       	subi	r30, 0x6E	; 110
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    1db0:	fe 01       	movw	r30, r28
    1db2:	ee 56       	subi	r30, 0x6E	; 110
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <purpleside+0x45e>
    1dbc:	64 c2       	rjmp	.+1224   	; 0x2286 <purpleside+0x926>
					{
						break;
					}
					if(current_position == 0)
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ec 56       	subi	r30, 0x6C	; 108
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	88 23       	and	r24, r24
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <purpleside+0x46c>
    1dca:	b4 c0       	rjmp	.+360    	; 0x1f34 <purpleside+0x5d4>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e5 58       	subi	r30, 0x85	; 133
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	aa e7       	ldi	r26, 0x7A	; 122
    1dd8:	b4 e4       	ldi	r27, 0x44	; 68
    1dda:	80 83       	st	Z, r24
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	a2 83       	std	Z+2, r26	; 0x02
    1de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	8e 01       	movw	r16, r28
    1de4:	09 58       	subi	r16, 0x89	; 137
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 58       	subi	r30, 0x85	; 133
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e4       	ldi	r19, 0x40	; 64
    1dfa:	4c e1       	ldi	r20, 0x1C	; 28
    1dfc:	55 e4       	ldi	r21, 0x45	; 69
    1dfe:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e10:	fe 01       	movw	r30, r28
    1e12:	e9 58       	subi	r30, 0x89	; 137
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	44 f4       	brge	.+16     	; 0x1e3e <purpleside+0x4de>
		__ticks = 1;
    1e2e:	fe 01       	movw	r30, r28
    1e30:	eb 58       	subi	r30, 0x8B	; 139
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
    1e3c:	64 c0       	rjmp	.+200    	; 0x1f06 <purpleside+0x5a6>
	else if (__tmp > 65535)
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e9 58       	subi	r30, 0x89	; 137
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	0c f0       	brlt	.+2      	; 0x1e5e <purpleside+0x4fe>
    1e5c:	43 c0       	rjmp	.+134    	; 0x1ee4 <purpleside+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e5 58       	subi	r30, 0x85	; 133
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	0b 58       	subi	r16, 0x8B	; 139
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	f8 01       	movw	r30, r16
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
    1e94:	1f c0       	rjmp	.+62     	; 0x1ed4 <purpleside+0x574>
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 58       	subi	r30, 0x8D	; 141
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	8a ef       	ldi	r24, 0xFA	; 250
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 58       	subi	r30, 0x8D	; 141
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <purpleside+0x54e>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ed 58       	subi	r30, 0x8D	; 141
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	de 01       	movw	r26, r28
    1ebe:	ab 58       	subi	r26, 0x8B	; 139
    1ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	eb 58       	subi	r30, 0x8B	; 139
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	eb 58       	subi	r30, 0x8B	; 139
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	d1 f6       	brne	.-76     	; 0x1e96 <purpleside+0x536>
    1ee2:	28 c0       	rjmp	.+80     	; 0x1f34 <purpleside+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	0b 58       	subi	r16, 0x8B	; 139
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	fe 01       	movw	r30, r28
    1eec:	e9 58       	subi	r30, 0x89	; 137
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	f8 01       	movw	r30, r16
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
    1f06:	de 01       	movw	r26, r28
    1f08:	af 58       	subi	r26, 0x8F	; 143
    1f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	eb 58       	subi	r30, 0x8B	; 139
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	11 96       	adiw	r26, 0x01	; 1
    1f18:	9c 93       	st	X, r25
    1f1a:	8e 93       	st	-X, r24
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ef 58       	subi	r30, 0x8F	; 143
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <purpleside+0x5c6>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 58       	subi	r30, 0x8F	; 143
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
					{
						_delay_ms(1000);
					}
					if(current_position == 5)
    1f34:	fe 01       	movw	r30, r28
    1f36:	ec 56       	subi	r30, 0x6C	; 108
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	85 30       	cpi	r24, 0x05	; 5
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <purpleside+0x5e2>
    1f40:	cf c0       	rjmp	.+414    	; 0x20e0 <purpleside+0x780>
					{
						int i;
						for(i=0;i<59;i++)
    1f42:	fe 01       	movw	r30, r28
    1f44:	e3 57       	subi	r30, 0x73	; 115
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	11 82       	std	Z+1, r1	; 0x01
    1f4a:	10 82       	st	Z, r1
    1f4c:	bf c0       	rjmp	.+382    	; 0x20cc <purpleside+0x76c>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e3 59       	subi	r30, 0x93	; 147
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	aa ef       	ldi	r26, 0xFA	; 250
    1f5a:	b3 e4       	ldi	r27, 0x43	; 67
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	8e 01       	movw	r16, r28
    1f66:	07 59       	subi	r16, 0x97	; 151
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 59       	subi	r30, 0x93	; 147
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e4       	ldi	r19, 0x40	; 64
    1f7c:	4c e1       	ldi	r20, 0x1C	; 28
    1f7e:	55 e4       	ldi	r21, 0x45	; 69
    1f80:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f92:	fe 01       	movw	r30, r28
    1f94:	e7 59       	subi	r30, 0x97	; 151
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	44 f4       	brge	.+16     	; 0x1fc0 <purpleside+0x660>
		__ticks = 1;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 59       	subi	r30, 0x99	; 153
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	64 c0       	rjmp	.+200    	; 0x2088 <purpleside+0x728>
	else if (__tmp > 65535)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e7 59       	subi	r30, 0x97	; 151
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <purpleside+0x680>
    1fde:	43 c0       	rjmp	.+134    	; 0x2066 <purpleside+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e3 59       	subi	r30, 0x93	; 147
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8e 01       	movw	r16, r28
    2000:	09 59       	subi	r16, 0x99	; 153
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	1f c0       	rjmp	.+62     	; 0x2056 <purpleside+0x6f6>
    2018:	fe 01       	movw	r30, r28
    201a:	eb 59       	subi	r30, 0x9B	; 155
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	8a ef       	ldi	r24, 0xFA	; 250
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	fe 01       	movw	r30, r28
    2028:	eb 59       	subi	r30, 0x9B	; 155
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <purpleside+0x6d0>
    2034:	fe 01       	movw	r30, r28
    2036:	eb 59       	subi	r30, 0x9B	; 155
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	de 01       	movw	r26, r28
    2040:	a9 59       	subi	r26, 0x99	; 153
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e9 59       	subi	r30, 0x99	; 153
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	9c 93       	st	X, r25
    2054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	fe 01       	movw	r30, r28
    2058:	e9 59       	subi	r30, 0x99	; 153
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	d1 f6       	brne	.-76     	; 0x2018 <purpleside+0x6b8>
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <purpleside+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	8e 01       	movw	r16, r28
    2068:	09 59       	subi	r16, 0x99	; 153
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e7 59       	subi	r30, 0x97	; 151
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	de 01       	movw	r26, r28
    208a:	ad 59       	subi	r26, 0x9D	; 157
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e9 59       	subi	r30, 0x99	; 153
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	fe 01       	movw	r30, r28
    209e:	ed 59       	subi	r30, 0x9D	; 157
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <purpleside+0x746>
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 59       	subi	r30, 0x9D	; 157
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	de 01       	movw	r26, r28
    20b6:	a3 57       	subi	r26, 0x73	; 115
    20b8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ba:	fe 01       	movw	r30, r28
    20bc:	e3 57       	subi	r30, 0x73	; 115
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
    20cc:	fe 01       	movw	r30, r28
    20ce:	e3 57       	subi	r30, 0x73	; 115
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	8b 33       	cpi	r24, 0x3B	; 59
    20d8:	91 05       	cpc	r25, r1
    20da:	0c f4       	brge	.+2      	; 0x20de <purpleside+0x77e>
    20dc:	38 cf       	rjmp	.-400    	; 0x1f4e <purpleside+0x5ee>
    20de:	c3 c0       	rjmp	.+390    	; 0x2266 <purpleside+0x906>
						{
							_delay_ms(500);
						}
					}
					else if(current_position == 7)
    20e0:	fe 01       	movw	r30, r28
    20e2:	ec 56       	subi	r30, 0x6C	; 108
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	87 30       	cpi	r24, 0x07	; 7
    20ea:	09 f0       	breq	.+2      	; 0x20ee <purpleside+0x78e>
    20ec:	b5 c0       	rjmp	.+362    	; 0x2258 <purpleside+0x8f8>
    20ee:	fe 01       	movw	r30, r28
    20f0:	e1 5a       	subi	r30, 0xA1	; 161
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	aa e7       	ldi	r26, 0x7A	; 122
    20fa:	b4 e4       	ldi	r27, 0x44	; 68
    20fc:	80 83       	st	Z, r24
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	8e 01       	movw	r16, r28
    2106:	05 5a       	subi	r16, 0xA5	; 165
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	e1 5a       	subi	r30, 0xA1	; 161
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e4       	ldi	r19, 0x40	; 64
    211c:	4c e1       	ldi	r20, 0x1C	; 28
    211e:	55 e4       	ldi	r21, 0x45	; 69
    2120:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	f8 01       	movw	r30, r16
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2132:	fe 01       	movw	r30, r28
    2134:	e5 5a       	subi	r30, 0xA5	; 165
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 3d 1a 	call	0x347a	; 0x347a <__cmpsf2>
    214c:	88 23       	and	r24, r24
    214e:	44 f4       	brge	.+16     	; 0x2160 <purpleside+0x800>
		__ticks = 1;
    2150:	fe 01       	movw	r30, r28
    2152:	e7 5a       	subi	r30, 0xA7	; 167
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	64 c0       	rjmp	.+200    	; 0x2228 <purpleside+0x8c8>
	else if (__tmp > 65535)
    2160:	fe 01       	movw	r30, r28
    2162:	e5 5a       	subi	r30, 0xA5	; 165
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    217a:	18 16       	cp	r1, r24
    217c:	0c f0       	brlt	.+2      	; 0x2180 <purpleside+0x820>
    217e:	43 c0       	rjmp	.+134    	; 0x2206 <purpleside+0x8a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	fe 01       	movw	r30, r28
    2182:	e1 5a       	subi	r30, 0xA1	; 161
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	8e 01       	movw	r16, r28
    21a0:	07 5a       	subi	r16, 0xA7	; 167
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	f8 01       	movw	r30, r16
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	1f c0       	rjmp	.+62     	; 0x21f6 <purpleside+0x896>
    21b8:	fe 01       	movw	r30, r28
    21ba:	e9 5a       	subi	r30, 0xA9	; 169
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	8a ef       	ldi	r24, 0xFA	; 250
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	fe 01       	movw	r30, r28
    21c8:	e9 5a       	subi	r30, 0xA9	; 169
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <purpleside+0x870>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e9 5a       	subi	r30, 0xA9	; 169
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	de 01       	movw	r26, r28
    21e0:	a7 5a       	subi	r26, 0xA7	; 167
    21e2:	bf 4f       	sbci	r27, 0xFF	; 255
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 5a       	subi	r30, 0xA7	; 167
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	11 96       	adiw	r26, 0x01	; 1
    21f2:	9c 93       	st	X, r25
    21f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	fe 01       	movw	r30, r28
    21f8:	e7 5a       	subi	r30, 0xA7	; 167
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	d1 f6       	brne	.-76     	; 0x21b8 <purpleside+0x858>
    2204:	30 c0       	rjmp	.+96     	; 0x2266 <purpleside+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	8e 01       	movw	r16, r28
    2208:	07 5a       	subi	r16, 0xA7	; 167
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	fe 01       	movw	r30, r28
    220e:	e5 5a       	subi	r30, 0xA5	; 165
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	de 01       	movw	r26, r28
    222a:	ab 5a       	subi	r26, 0xAB	; 171
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e7 5a       	subi	r30, 0xA7	; 167
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	9c 93       	st	X, r25
    223c:	8e 93       	st	-X, r24
    223e:	fe 01       	movw	r30, r28
    2240:	eb 5a       	subi	r30, 0xAB	; 171
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <purpleside+0x8e8>
    224c:	fe 01       	movw	r30, r28
    224e:	eb 5a       	subi	r30, 0xAB	; 171
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	07 c0       	rjmp	.+14     	; 0x2266 <purpleside+0x906>
					{
						_delay_ms(1000);
					}
					else if(current_position == 9)
    2258:	fe 01       	movw	r30, r28
    225a:	ec 56       	subi	r30, 0x6C	; 108
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	89 30       	cpi	r24, 0x09	; 9
    2262:	09 f4       	brne	.+2      	; 0x2266 <purpleside+0x906>
    2264:	ff cf       	rjmp	.-2      	; 0x2264 <purpleside+0x904>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2266:	de 01       	movw	r26, r28
    2268:	ac 56       	subi	r26, 0x6C	; 108
    226a:	bf 4f       	sbci	r27, 0xFF	; 255
    226c:	fe 01       	movw	r30, r28
    226e:	ec 56       	subi	r30, 0x6C	; 108
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	8c 93       	st	X, r24
    2278:	fe 01       	movw	r30, r28
    227a:	ec 56       	subi	r30, 0x6C	; 108
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	8a 30       	cpi	r24, 0x0A	; 10
    2282:	08 f4       	brcc	.+2      	; 0x2286 <purpleside+0x926>
    2284:	34 cd       	rjmp	.-1432   	; 0x1cee <purpleside+0x38e>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    2286:	fe 01       	movw	r30, r28
    2288:	ec 56       	subi	r30, 0x6C	; 108
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	de 01       	movw	r26, r28
    228e:	ad 56       	subi	r26, 0x6D	; 109
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	8c 91       	ld	r24, X
    2294:	80 83       	st	Z, r24
    2296:	77 c0       	rjmp	.+238    	; 0x2386 <purpleside+0xa26>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_two_positions[current_position].point), purple_tactic_two_positions[current_position].speed,
    2298:	fe 01       	movw	r30, r28
    229a:	ec 56       	subi	r30, 0x6C	; 108
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	48 2f       	mov	r20, r24
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	ca 01       	movw	r24, r20
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	9c 01       	movw	r18, r24
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	84 0f       	add	r24, r20
    22ba:	95 1f       	adc	r25, r21
    22bc:	85 55       	subi	r24, 0x55	; 85
    22be:	9e 4f       	sbci	r25, 0xFE	; 254
    22c0:	bc 01       	movw	r22, r24
    22c2:	fe 01       	movw	r30, r28
    22c4:	ec 56       	subi	r30, 0x6C	; 108
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	ca 01       	movw	r24, r20
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	9c 01       	movw	r18, r24
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	84 0f       	add	r24, r20
    22e4:	95 1f       	adc	r25, r21
    22e6:	fc 01       	movw	r30, r24
    22e8:	ee 54       	subi	r30, 0x4E	; 78
    22ea:	fe 4f       	sbci	r31, 0xFE	; 254
    22ec:	a0 81       	ld	r26, Z
    22ee:	fe 01       	movw	r30, r28
    22f0:	ec 56       	subi	r30, 0x6C	; 108
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	48 2f       	mov	r20, r24
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	ca 01       	movw	r24, r20
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	9c 01       	movw	r18, r24
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	82 0f       	add	r24, r18
    230c:	93 1f       	adc	r25, r19
    230e:	84 0f       	add	r24, r20
    2310:	95 1f       	adc	r25, r21
    2312:	fc 01       	movw	r30, r24
    2314:	ed 54       	subi	r30, 0x4D	; 77
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	80 81       	ld	r24, Z
    231a:	b8 2f       	mov	r27, r24
    231c:	fe 01       	movw	r30, r28
    231e:	ec 56       	subi	r30, 0x6C	; 108
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	ca 01       	movw	r24, r20
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	9c 01       	movw	r18, r24
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	84 0f       	add	r24, r20
    233e:	95 1f       	adc	r25, r21
    2340:	fc 01       	movw	r30, r24
    2342:	ec 54       	subi	r30, 0x4C	; 76
    2344:	fe 4f       	sbci	r31, 0xFE	; 254
    2346:	20 81       	ld	r18, Z
    2348:	31 81       	ldd	r19, Z+1	; 0x01
    234a:	cb 01       	movw	r24, r22
    234c:	6a 2f       	mov	r22, r26
    234e:	4b 2f       	mov	r20, r27
    2350:	d1 d8       	rcall	.-3678   	; 0x14f4 <odometry_move_to_position>
    2352:	fe 01       	movw	r30, r28
    2354:	ee 56       	subi	r30, 0x6E	; 110
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 83       	st	Z, r24
					purple_tactic_two_positions[current_position].direction,purple_tactic_two_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    235a:	fe 01       	movw	r30, r28
    235c:	ee 56       	subi	r30, 0x6E	; 110
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	b9 f0       	breq	.+46     	; 0x2394 <purpleside+0xa34>
					{
						break;
					}
					if(current_position == 0)
    2366:	fe 01       	movw	r30, r28
    2368:	ec 56       	subi	r30, 0x6C	; 108
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	88 23       	and	r24, r24
    2370:	09 f4       	brne	.+2      	; 0x2374 <purpleside+0xa14>
    2372:	ff cf       	rjmp	.-2      	; 0x2372 <purpleside+0xa12>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_TWO:	
				for(current_position = next_position;current_position < TACTIC_TWO_POSITION_COUNT; current_position++)
    2374:	de 01       	movw	r26, r28
    2376:	ac 56       	subi	r26, 0x6C	; 108
    2378:	bf 4f       	sbci	r27, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	ec 56       	subi	r30, 0x6C	; 108
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	8c 93       	st	X, r24
    2386:	fe 01       	movw	r30, r28
    2388:	ec 56       	subi	r30, 0x6C	; 108
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	8a 30       	cpi	r24, 0x0A	; 10
    2390:	08 f4       	brcc	.+2      	; 0x2394 <purpleside+0xa34>
    2392:	82 cf       	rjmp	.-252    	; 0x2298 <purpleside+0x938>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    2394:	fe 01       	movw	r30, r28
    2396:	ec 56       	subi	r30, 0x6C	; 108
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	de 01       	movw	r26, r28
    239c:	ad 56       	subi	r26, 0x6D	; 109
    239e:	bf 4f       	sbci	r27, 0xFF	; 255
    23a0:	8c 91       	ld	r24, X
    23a2:	80 83       	st	Z, r24
    23a4:	49 c2       	rjmp	.+1170   	; 0x2838 <purpleside+0xed8>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_three_positions[current_position].point), purple_tactic_three_positions[current_position].speed,
    23a6:	fe 01       	movw	r30, r28
    23a8:	ec 56       	subi	r30, 0x6C	; 108
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	ca 01       	movw	r24, r20
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	9c 01       	movw	r18, r24
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	84 0f       	add	r24, r20
    23c8:	95 1f       	adc	r25, r21
    23ca:	87 5e       	subi	r24, 0xE7	; 231
    23cc:	9d 4f       	sbci	r25, 0xFD	; 253
    23ce:	bc 01       	movw	r22, r24
    23d0:	fe 01       	movw	r30, r28
    23d2:	ec 56       	subi	r30, 0x6C	; 108
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	48 2f       	mov	r20, r24
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	ca 01       	movw	r24, r20
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	9c 01       	movw	r18, r24
    23e4:	22 0f       	add	r18, r18
    23e6:	33 1f       	adc	r19, r19
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	82 0f       	add	r24, r18
    23ee:	93 1f       	adc	r25, r19
    23f0:	84 0f       	add	r24, r20
    23f2:	95 1f       	adc	r25, r21
    23f4:	fc 01       	movw	r30, r24
    23f6:	e0 5e       	subi	r30, 0xE0	; 224
    23f8:	fd 4f       	sbci	r31, 0xFD	; 253
    23fa:	a0 81       	ld	r26, Z
    23fc:	fe 01       	movw	r30, r28
    23fe:	ec 56       	subi	r30, 0x6C	; 108
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	48 2f       	mov	r20, r24
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	ca 01       	movw	r24, r20
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	9c 01       	movw	r18, r24
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	22 0f       	add	r18, r18
    2416:	33 1f       	adc	r19, r19
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	84 0f       	add	r24, r20
    241e:	95 1f       	adc	r25, r21
    2420:	fc 01       	movw	r30, r24
    2422:	ef 5d       	subi	r30, 0xDF	; 223
    2424:	fd 4f       	sbci	r31, 0xFD	; 253
    2426:	80 81       	ld	r24, Z
    2428:	b8 2f       	mov	r27, r24
    242a:	fe 01       	movw	r30, r28
    242c:	ec 56       	subi	r30, 0x6C	; 108
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	48 2f       	mov	r20, r24
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	ca 01       	movw	r24, r20
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	9c 01       	movw	r18, r24
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	84 0f       	add	r24, r20
    244c:	95 1f       	adc	r25, r21
    244e:	fc 01       	movw	r30, r24
    2450:	ee 5d       	subi	r30, 0xDE	; 222
    2452:	fd 4f       	sbci	r31, 0xFD	; 253
    2454:	20 81       	ld	r18, Z
    2456:	31 81       	ldd	r19, Z+1	; 0x01
    2458:	cb 01       	movw	r24, r22
    245a:	6a 2f       	mov	r22, r26
    245c:	4b 2f       	mov	r20, r27
    245e:	4a d8       	rcall	.-3948   	; 0x14f4 <odometry_move_to_position>
    2460:	fe 01       	movw	r30, r28
    2462:	ee 56       	subi	r30, 0x6E	; 110
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 83       	st	Z, r24
					purple_tactic_three_positions[current_position].direction,purple_tactic_three_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2468:	fe 01       	movw	r30, r28
    246a:	ee 56       	subi	r30, 0x6E	; 110
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 81       	ld	r24, Z
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	09 f4       	brne	.+2      	; 0x2476 <purpleside+0xb16>
    2474:	e8 c1       	rjmp	.+976    	; 0x2846 <purpleside+0xee6>
					{
						break;
					}
					else if(current_position == 15)
    2476:	fe 01       	movw	r30, r28
    2478:	ec 56       	subi	r30, 0x6C	; 108
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	8f 30       	cpi	r24, 0x0F	; 15
    2480:	09 f0       	breq	.+2      	; 0x2484 <purpleside+0xb24>
    2482:	b3 c0       	rjmp	.+358    	; 0x25ea <purpleside+0xc8a>
    2484:	fe 01       	movw	r30, r28
    2486:	ef 5a       	subi	r30, 0xAF	; 175
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	aa e7       	ldi	r26, 0x7A	; 122
    2490:	b4 e4       	ldi	r27, 0x44	; 68
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	8e 01       	movw	r16, r28
    249c:	03 5b       	subi	r16, 0xB3	; 179
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	ef 5a       	subi	r30, 0xAF	; 175
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e4       	ldi	r19, 0x40	; 64
    24b2:	4c e1       	ldi	r20, 0x1C	; 28
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	f8 01       	movw	r30, r16
    24c0:	80 83       	st	Z, r24
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	a2 83       	std	Z+2, r26	; 0x02
    24c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c8:	fe 01       	movw	r30, r28
    24ca:	e3 5b       	subi	r30, 0xB3	; 179
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	cd d7       	rcall	.+3994   	; 0x347a <__cmpsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	44 f4       	brge	.+16     	; 0x24f4 <purpleside+0xb94>
		__ticks = 1;
    24e4:	fe 01       	movw	r30, r28
    24e6:	e5 5b       	subi	r30, 0xB5	; 181
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
    24f2:	63 c0       	rjmp	.+198    	; 0x25ba <purpleside+0xc5a>
	else if (__tmp > 65535)
    24f4:	fe 01       	movw	r30, r28
    24f6:	e3 5b       	subi	r30, 0xB3	; 179
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    250e:	18 16       	cp	r1, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <purpleside+0xbb4>
    2512:	43 c0       	rjmp	.+134    	; 0x259a <purpleside+0xc3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	fe 01       	movw	r30, r28
    2516:	ef 5a       	subi	r30, 0xAF	; 175
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8e 01       	movw	r16, r28
    2534:	05 5b       	subi	r16, 0xB5	; 181
    2536:	1f 4f       	sbci	r17, 0xFF	; 255
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 ae 1a 	call	0x355c	; 0x355c <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	f8 01       	movw	r30, r16
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	1f c0       	rjmp	.+62     	; 0x258a <purpleside+0xc2a>
    254c:	fe 01       	movw	r30, r28
    254e:	e7 5b       	subi	r30, 0xB7	; 183
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	8a ef       	ldi	r24, 0xFA	; 250
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	fe 01       	movw	r30, r28
    255c:	e7 5b       	subi	r30, 0xB7	; 183
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <purpleside+0xc04>
    2568:	fe 01       	movw	r30, r28
    256a:	e7 5b       	subi	r30, 0xB7	; 183
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	de 01       	movw	r26, r28
    2574:	a5 5b       	subi	r26, 0xB5	; 181
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e5 5b       	subi	r30, 0xB5	; 181
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	9c 93       	st	X, r25
    2588:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258a:	fe 01       	movw	r30, r28
    258c:	e5 5b       	subi	r30, 0xB5	; 181
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	d1 f6       	brne	.-76     	; 0x254c <purpleside+0xbec>
    2598:	46 c1       	rjmp	.+652    	; 0x2826 <purpleside+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	8e 01       	movw	r16, r28
    259c:	05 5b       	subi	r16, 0xB5	; 181
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	e3 5b       	subi	r30, 0xB3	; 179
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	d6 d7       	rcall	.+4012   	; 0x355c <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	de 01       	movw	r26, r28
    25bc:	a9 5b       	subi	r26, 0xB9	; 185
    25be:	bf 4f       	sbci	r27, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e5 5b       	subi	r30, 0xB5	; 181
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	9c 93       	st	X, r25
    25ce:	8e 93       	st	-X, r24
    25d0:	fe 01       	movw	r30, r28
    25d2:	e9 5b       	subi	r30, 0xB9	; 185
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <purpleside+0xc7a>
    25de:	fe 01       	movw	r30, r28
    25e0:	e9 5b       	subi	r30, 0xB9	; 185
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	1e c1       	rjmp	.+572    	; 0x2826 <purpleside+0xec6>
					{
						_delay_ms(1000);
					}
					else if(current_position == 4)
    25ea:	fe 01       	movw	r30, r28
    25ec:	ec 56       	subi	r30, 0x6C	; 108
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <purpleside+0xc98>
    25f6:	17 c1       	rjmp	.+558    	; 0x2826 <purpleside+0xec6>
					{
						//servo left grabber up
					}
					else if(current_position == 4 || current_position == 12 || current_position == 14 || current_position == 16)
    25f8:	fe 01       	movw	r30, r28
    25fa:	ec 56       	subi	r30, 0x6C	; 108
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	84 30       	cpi	r24, 0x04	; 4
    2602:	99 f0       	breq	.+38     	; 0x262a <purpleside+0xcca>
    2604:	fe 01       	movw	r30, r28
    2606:	ec 56       	subi	r30, 0x6C	; 108
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	8c 30       	cpi	r24, 0x0C	; 12
    260e:	69 f0       	breq	.+26     	; 0x262a <purpleside+0xcca>
    2610:	fe 01       	movw	r30, r28
    2612:	ec 56       	subi	r30, 0x6C	; 108
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	8e 30       	cpi	r24, 0x0E	; 14
    261a:	39 f0       	breq	.+14     	; 0x262a <purpleside+0xcca>
    261c:	fe 01       	movw	r30, r28
    261e:	ec 56       	subi	r30, 0x6C	; 108
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	80 31       	cpi	r24, 0x10	; 16
    2626:	09 f0       	breq	.+2      	; 0x262a <purpleside+0xcca>
    2628:	83 c0       	rjmp	.+262    	; 0x2730 <purpleside+0xdd0>
    262a:	fe 01       	movw	r30, r28
    262c:	ed 5b       	subi	r30, 0xBD	; 189
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e8       	ldi	r25, 0x80	; 128
    2634:	ab eb       	ldi	r26, 0xBB	; 187
    2636:	b4 e4       	ldi	r27, 0x44	; 68
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	8e 01       	movw	r16, r28
    2642:	01 5c       	subi	r16, 0xC1	; 193
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	fe 01       	movw	r30, r28
    2648:	ed 5b       	subi	r30, 0xBD	; 189
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e4       	ldi	r19, 0x40	; 64
    2658:	4c e1       	ldi	r20, 0x1C	; 28
    265a:	55 e4       	ldi	r21, 0x45	; 69
    265c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	f8 01       	movw	r30, r16
    2666:	80 83       	st	Z, r24
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	a2 83       	std	Z+2, r26	; 0x02
    266c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266e:	fe 01       	movw	r30, r28
    2670:	ff 96       	adiw	r30, 0x3f	; 63
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	fb d6       	rcall	.+3574   	; 0x347a <__cmpsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <purpleside+0xd32>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9e af       	std	Y+62, r25	; 0x3e
    268e:	8d af       	std	Y+61, r24	; 0x3d
    2690:	44 c0       	rjmp	.+136    	; 0x271a <purpleside+0xdba>
	else if (__tmp > 65535)
    2692:	fe 01       	movw	r30, r28
    2694:	ff 96       	adiw	r30, 0x3f	; 63
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__gesf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	5c f5       	brge	.+86     	; 0x2704 <purpleside+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	fe 01       	movw	r30, r28
    26b0:	ed 5b       	subi	r30, 0xBD	; 189
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 90 1b 	call	0x3720	; 0x3720 <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	45 d7       	rcall	.+3722   	; 0x355c <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e af       	std	Y+62, r25	; 0x3e
    26d8:	8d af       	std	Y+61, r24	; 0x3d
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <purpleside+0xd9a>
    26dc:	8a ef       	ldi	r24, 0xFA	; 250
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c af       	std	Y+60, r25	; 0x3c
    26e2:	8b af       	std	Y+59, r24	; 0x3b
    26e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <purpleside+0xd88>
    26ec:	9c af       	std	Y+60, r25	; 0x3c
    26ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9e af       	std	Y+62, r25	; 0x3e
    26f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <purpleside+0xd7c>
    2702:	91 c0       	rjmp	.+290    	; 0x2826 <purpleside+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	fe 01       	movw	r30, r28
    2706:	ff 96       	adiw	r30, 0x3f	; 63
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	25 d7       	rcall	.+3658   	; 0x355c <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9e af       	std	Y+62, r25	; 0x3e
    2718:	8d af       	std	Y+61, r24	; 0x3d
    271a:	8d ad       	ldd	r24, Y+61	; 0x3d
    271c:	9e ad       	ldd	r25, Y+62	; 0x3e
    271e:	9a af       	std	Y+58, r25	; 0x3a
    2720:	89 af       	std	Y+57, r24	; 0x39
    2722:	89 ad       	ldd	r24, Y+57	; 0x39
    2724:	9a ad       	ldd	r25, Y+58	; 0x3a
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <purpleside+0xdc6>
    272a:	9a af       	std	Y+58, r25	; 0x3a
    272c:	89 af       	std	Y+57, r24	; 0x39
    272e:	7b c0       	rjmp	.+246    	; 0x2826 <purpleside+0xec6>
					{
						_delay_ms(1500);
					}
					else if(current_position == 9)
    2730:	fe 01       	movw	r30, r28
    2732:	ec 56       	subi	r30, 0x6C	; 108
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	89 30       	cpi	r24, 0x09	; 9
    273a:	09 f0       	breq	.+2      	; 0x273e <purpleside+0xdde>
    273c:	6d c0       	rjmp	.+218    	; 0x2818 <purpleside+0xeb8>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e4       	ldi	r25, 0x40	; 64
    2742:	ac e1       	ldi	r26, 0x1C	; 28
    2744:	b6 e4       	ldi	r27, 0x46	; 70
    2746:	8d ab       	std	Y+53, r24	; 0x35
    2748:	9e ab       	std	Y+54, r25	; 0x36
    274a:	af ab       	std	Y+55, r26	; 0x37
    274c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	6d a9       	ldd	r22, Y+53	; 0x35
    2750:	7e a9       	ldd	r23, Y+54	; 0x36
    2752:	8f a9       	ldd	r24, Y+55	; 0x37
    2754:	98 ad       	ldd	r25, Y+56	; 0x38
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e4       	ldi	r19, 0x40	; 64
    275a:	4c e1       	ldi	r20, 0x1C	; 28
    275c:	55 e4       	ldi	r21, 0x45	; 69
    275e:	e0 d7       	rcall	.+4032   	; 0x3720 <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	89 ab       	std	Y+49, r24	; 0x31
    2766:	9a ab       	std	Y+50, r25	; 0x32
    2768:	ab ab       	std	Y+51, r26	; 0x33
    276a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276c:	69 a9       	ldd	r22, Y+49	; 0x31
    276e:	7a a9       	ldd	r23, Y+50	; 0x32
    2770:	8b a9       	ldd	r24, Y+51	; 0x33
    2772:	9c a9       	ldd	r25, Y+52	; 0x34
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	7e d6       	rcall	.+3324   	; 0x347a <__cmpsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <purpleside+0xe2c>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	98 ab       	std	Y+48, r25	; 0x30
    2788:	8f a7       	std	Y+47, r24	; 0x2f
    278a:	3b c0       	rjmp	.+118    	; 0x2802 <purpleside+0xea2>
	else if (__tmp > 65535)
    278c:	69 a9       	ldd	r22, Y+49	; 0x31
    278e:	7a a9       	ldd	r23, Y+50	; 0x32
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	9c a9       	ldd	r25, Y+52	; 0x34
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	bd d7       	rcall	.+3962   	; 0x3718 <__gesf2>
    279e:	18 16       	cp	r1, r24
    27a0:	3c f5       	brge	.+78     	; 0x27f0 <purpleside+0xe90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a2:	6d a9       	ldd	r22, Y+53	; 0x35
    27a4:	7e a9       	ldd	r23, Y+54	; 0x36
    27a6:	8f a9       	ldd	r24, Y+55	; 0x37
    27a8:	98 ad       	ldd	r25, Y+56	; 0x38
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e2       	ldi	r20, 0x20	; 32
    27b0:	51 e4       	ldi	r21, 0x41	; 65
    27b2:	b6 d7       	rcall	.+3948   	; 0x3720 <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	cf d6       	rcall	.+3486   	; 0x355c <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <purpleside+0xe86>
    27c8:	8a ef       	ldi	r24, 0xFA	; 250
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e a7       	std	Y+46, r25	; 0x2e
    27ce:	8d a7       	std	Y+45, r24	; 0x2d
    27d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <purpleside+0xe74>
    27d8:	9e a7       	std	Y+46, r25	; 0x2e
    27da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27de:	98 a9       	ldd	r25, Y+48	; 0x30
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	98 ab       	std	Y+48, r25	; 0x30
    27e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <purpleside+0xe68>
    27ee:	1b c0       	rjmp	.+54     	; 0x2826 <purpleside+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	69 a9       	ldd	r22, Y+49	; 0x31
    27f2:	7a a9       	ldd	r23, Y+50	; 0x32
    27f4:	8b a9       	ldd	r24, Y+51	; 0x33
    27f6:	9c a9       	ldd	r25, Y+52	; 0x34
    27f8:	b1 d6       	rcall	.+3426   	; 0x355c <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	98 ab       	std	Y+48, r25	; 0x30
    2800:	8f a7       	std	Y+47, r24	; 0x2f
    2802:	8f a5       	ldd	r24, Y+47	; 0x2f
    2804:	98 a9       	ldd	r25, Y+48	; 0x30
    2806:	9c a7       	std	Y+44, r25	; 0x2c
    2808:	8b a7       	std	Y+43, r24	; 0x2b
    280a:	8b a5       	ldd	r24, Y+43	; 0x2b
    280c:	9c a5       	ldd	r25, Y+44	; 0x2c
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <purpleside+0xeae>
    2812:	9c a7       	std	Y+44, r25	; 0x2c
    2814:	8b a7       	std	Y+43, r24	; 0x2b
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <purpleside+0xec6>
					{
						_delay_ms(10000);
					}
					else if(current_position == 18)
    2818:	fe 01       	movw	r30, r28
    281a:	ec 56       	subi	r30, 0x6C	; 108
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	82 31       	cpi	r24, 0x12	; 18
    2822:	09 f4       	brne	.+2      	; 0x2826 <purpleside+0xec6>
    2824:	ff cf       	rjmp	.-2      	; 0x2824 <purpleside+0xec4>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_THREE:
				for(current_position = next_position;current_position < TACTIC_THREE_POSITION_COUNT; current_position++)
    2826:	de 01       	movw	r26, r28
    2828:	ac 56       	subi	r26, 0x6C	; 108
    282a:	bf 4f       	sbci	r27, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	ec 56       	subi	r30, 0x6C	; 108
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	8c 93       	st	X, r24
    2838:	fe 01       	movw	r30, r28
    283a:	ec 56       	subi	r30, 0x6C	; 108
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	83 31       	cpi	r24, 0x13	; 19
    2842:	08 f4       	brcc	.+2      	; 0x2846 <purpleside+0xee6>
    2844:	b0 cd       	rjmp	.-1184   	; 0x23a6 <purpleside+0xa46>
						while(1);					
					}
					
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    2846:	fe 01       	movw	r30, r28
    2848:	ec 56       	subi	r30, 0x6C	; 108
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	de 01       	movw	r26, r28
    284e:	ad 56       	subi	r26, 0x6D	; 109
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	8c 91       	ld	r24, X
    2854:	80 83       	st	Z, r24
    2856:	ee c1       	rjmp	.+988    	; 0x2c34 <purpleside+0x12d4>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_four_positions[current_position].point), purple_tactic_four_positions[current_position].speed,
    2858:	fe 01       	movw	r30, r28
    285a:	ec 56       	subi	r30, 0x6C	; 108
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	48 2f       	mov	r20, r24
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	ca 01       	movw	r24, r20
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	9c 01       	movw	r18, r24
    286c:	22 0f       	add	r18, r18
    286e:	33 1f       	adc	r19, r19
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	84 0f       	add	r24, r20
    287a:	95 1f       	adc	r25, r21
    287c:	86 51       	subi	r24, 0x16	; 22
    287e:	9d 4f       	sbci	r25, 0xFD	; 253
    2880:	bc 01       	movw	r22, r24
    2882:	fe 01       	movw	r30, r28
    2884:	ec 56       	subi	r30, 0x6C	; 108
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	48 2f       	mov	r20, r24
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	ca 01       	movw	r24, r20
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	9c 01       	movw	r18, r24
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	22 0f       	add	r18, r18
    289c:	33 1f       	adc	r19, r19
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	84 0f       	add	r24, r20
    28a4:	95 1f       	adc	r25, r21
    28a6:	fc 01       	movw	r30, r24
    28a8:	ef 50       	subi	r30, 0x0F	; 15
    28aa:	fd 4f       	sbci	r31, 0xFD	; 253
    28ac:	a0 81       	ld	r26, Z
    28ae:	fe 01       	movw	r30, r28
    28b0:	ec 56       	subi	r30, 0x6C	; 108
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	ca 01       	movw	r24, r20
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	9c 01       	movw	r18, r24
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	82 0f       	add	r24, r18
    28cc:	93 1f       	adc	r25, r19
    28ce:	84 0f       	add	r24, r20
    28d0:	95 1f       	adc	r25, r21
    28d2:	fc 01       	movw	r30, r24
    28d4:	ee 50       	subi	r30, 0x0E	; 14
    28d6:	fd 4f       	sbci	r31, 0xFD	; 253
    28d8:	80 81       	ld	r24, Z
    28da:	b8 2f       	mov	r27, r24
    28dc:	fe 01       	movw	r30, r28
    28de:	ec 56       	subi	r30, 0x6C	; 108
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	ca 01       	movw	r24, r20
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	9c 01       	movw	r18, r24
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	82 0f       	add	r24, r18
    28fa:	93 1f       	adc	r25, r19
    28fc:	84 0f       	add	r24, r20
    28fe:	95 1f       	adc	r25, r21
    2900:	fc 01       	movw	r30, r24
    2902:	ed 50       	subi	r30, 0x0D	; 13
    2904:	fd 4f       	sbci	r31, 0xFD	; 253
    2906:	20 81       	ld	r18, Z
    2908:	31 81       	ldd	r19, Z+1	; 0x01
    290a:	cb 01       	movw	r24, r22
    290c:	6a 2f       	mov	r22, r26
    290e:	4b 2f       	mov	r20, r27
    2910:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <odometry_move_to_position>
    2914:	fe 01       	movw	r30, r28
    2916:	ee 56       	subi	r30, 0x6E	; 110
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 83       	st	Z, r24
					purple_tactic_four_positions[current_position].direction,purple_tactic_four_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    291c:	fe 01       	movw	r30, r28
    291e:	ee 56       	subi	r30, 0x6E	; 110
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	09 f4       	brne	.+2      	; 0x292a <purpleside+0xfca>
    2928:	8c c1       	rjmp	.+792    	; 0x2c42 <purpleside+0x12e2>
					{
						break;
					}
					else if(current_position == 15)
    292a:	fe 01       	movw	r30, r28
    292c:	ec 56       	subi	r30, 0x6C	; 108
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	8f 30       	cpi	r24, 0x0F	; 15
    2934:	09 f0       	breq	.+2      	; 0x2938 <purpleside+0xfd8>
    2936:	6d c0       	rjmp	.+218    	; 0x2a12 <purpleside+0x10b2>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	aa e7       	ldi	r26, 0x7A	; 122
    293e:	b4 e4       	ldi	r27, 0x44	; 68
    2940:	8f a3       	std	Y+39, r24	; 0x27
    2942:	98 a7       	std	Y+40, r25	; 0x28
    2944:	a9 a7       	std	Y+41, r26	; 0x29
    2946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6f a1       	ldd	r22, Y+39	; 0x27
    294a:	78 a5       	ldd	r23, Y+40	; 0x28
    294c:	89 a5       	ldd	r24, Y+41	; 0x29
    294e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e4       	ldi	r19, 0x40	; 64
    2954:	4c e1       	ldi	r20, 0x1C	; 28
    2956:	55 e4       	ldi	r21, 0x45	; 69
    2958:	e3 d6       	rcall	.+3526   	; 0x3720 <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b a3       	std	Y+35, r24	; 0x23
    2960:	9c a3       	std	Y+36, r25	; 0x24
    2962:	ad a3       	std	Y+37, r26	; 0x25
    2964:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2966:	6b a1       	ldd	r22, Y+35	; 0x23
    2968:	7c a1       	ldd	r23, Y+36	; 0x24
    296a:	8d a1       	ldd	r24, Y+37	; 0x25
    296c:	9e a1       	ldd	r25, Y+38	; 0x26
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	81 d5       	rcall	.+2818   	; 0x347a <__cmpsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <purpleside+0x1026>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9a a3       	std	Y+34, r25	; 0x22
    2982:	89 a3       	std	Y+33, r24	; 0x21
    2984:	3b c0       	rjmp	.+118    	; 0x29fc <purpleside+0x109c>
	else if (__tmp > 65535)
    2986:	6b a1       	ldd	r22, Y+35	; 0x23
    2988:	7c a1       	ldd	r23, Y+36	; 0x24
    298a:	8d a1       	ldd	r24, Y+37	; 0x25
    298c:	9e a1       	ldd	r25, Y+38	; 0x26
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	c0 d6       	rcall	.+3456   	; 0x3718 <__gesf2>
    2998:	18 16       	cp	r1, r24
    299a:	3c f5       	brge	.+78     	; 0x29ea <purpleside+0x108a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6f a1       	ldd	r22, Y+39	; 0x27
    299e:	78 a5       	ldd	r23, Y+40	; 0x28
    29a0:	89 a5       	ldd	r24, Y+41	; 0x29
    29a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	b9 d6       	rcall	.+3442   	; 0x3720 <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	d2 d5       	rcall	.+2980   	; 0x355c <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <purpleside+0x1080>
    29c2:	8a ef       	ldi	r24, 0xFA	; 250
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
    29ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29cc:	98 a1       	ldd	r25, Y+32	; 0x20
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <purpleside+0x106e>
    29d2:	98 a3       	std	Y+32, r25	; 0x20
    29d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	89 a1       	ldd	r24, Y+33	; 0x21
    29d8:	9a a1       	ldd	r25, Y+34	; 0x22
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <purpleside+0x1062>
    29e8:	1c c1       	rjmp	.+568    	; 0x2c22 <purpleside+0x12c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6b a1       	ldd	r22, Y+35	; 0x23
    29ec:	7c a1       	ldd	r23, Y+36	; 0x24
    29ee:	8d a1       	ldd	r24, Y+37	; 0x25
    29f0:	9e a1       	ldd	r25, Y+38	; 0x26
    29f2:	b4 d5       	rcall	.+2920   	; 0x355c <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
    29fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2a00:	9e 8f       	std	Y+30, r25	; 0x1e
    2a02:	8d 8f       	std	Y+29, r24	; 0x1d
    2a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <purpleside+0x10a8>
    2a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a10:	08 c1       	rjmp	.+528    	; 0x2c22 <purpleside+0x12c2>
					{
						_delay_ms(1000);
					}
					else if(current_position == 4)
    2a12:	fe 01       	movw	r30, r28
    2a14:	ec 56       	subi	r30, 0x6C	; 108
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	84 30       	cpi	r24, 0x04	; 4
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <purpleside+0x10c0>
    2a1e:	01 c1       	rjmp	.+514    	; 0x2c22 <purpleside+0x12c2>
					{
						//servo left grabber up
					}
					else if(current_position == 4 || current_position == 12 || current_position == 14 || current_position == 16)
    2a20:	fe 01       	movw	r30, r28
    2a22:	ec 56       	subi	r30, 0x6C	; 108
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	99 f0       	breq	.+38     	; 0x2a52 <purpleside+0x10f2>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ec 56       	subi	r30, 0x6C	; 108
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	8c 30       	cpi	r24, 0x0C	; 12
    2a36:	69 f0       	breq	.+26     	; 0x2a52 <purpleside+0x10f2>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ec 56       	subi	r30, 0x6C	; 108
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	8e 30       	cpi	r24, 0x0E	; 14
    2a42:	39 f0       	breq	.+14     	; 0x2a52 <purpleside+0x10f2>
    2a44:	fe 01       	movw	r30, r28
    2a46:	ec 56       	subi	r30, 0x6C	; 108
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 31       	cpi	r24, 0x10	; 16
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <purpleside+0x10f2>
    2a50:	6d c0       	rjmp	.+218    	; 0x2b2c <purpleside+0x11cc>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e8       	ldi	r25, 0x80	; 128
    2a56:	ab eb       	ldi	r26, 0xBB	; 187
    2a58:	b4 e4       	ldi	r27, 0x44	; 68
    2a5a:	89 8f       	std	Y+25, r24	; 0x19
    2a5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	69 8d       	ldd	r22, Y+25	; 0x19
    2a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e4       	ldi	r19, 0x40	; 64
    2a6e:	4c e1       	ldi	r20, 0x1C	; 28
    2a70:	55 e4       	ldi	r21, 0x45	; 69
    2a72:	56 d6       	rcall	.+3244   	; 0x3720 <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8d 8b       	std	Y+21, r24	; 0x15
    2a7a:	9e 8b       	std	Y+22, r25	; 0x16
    2a7c:	af 8b       	std	Y+23, r26	; 0x17
    2a7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	f4 d4       	rcall	.+2536   	; 0x347a <__cmpsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <purpleside+0x1140>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	3b c0       	rjmp	.+118    	; 0x2b16 <purpleside+0x11b6>
	else if (__tmp > 65535)
    2aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	33 d6       	rcall	.+3174   	; 0x3718 <__gesf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	3c f5       	brge	.+78     	; 0x2b04 <purpleside+0x11a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	2c d6       	rcall	.+3160   	; 0x3720 <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	45 d5       	rcall	.+2698   	; 0x355c <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9c 8b       	std	Y+20, r25	; 0x14
    2ad8:	8b 8b       	std	Y+19, r24	; 0x13
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <purpleside+0x119a>
    2adc:	8a ef       	ldi	r24, 0xFA	; 250
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9a 8b       	std	Y+18, r25	; 0x12
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
    2ae4:	89 89       	ldd	r24, Y+17	; 0x11
    2ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <purpleside+0x1188>
    2aec:	9a 8b       	std	Y+18, r25	; 0x12
    2aee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8b 89       	ldd	r24, Y+19	; 0x13
    2afc:	9c 89       	ldd	r25, Y+20	; 0x14
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <purpleside+0x117c>
    2b02:	8f c0       	rjmp	.+286    	; 0x2c22 <purpleside+0x12c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	27 d5       	rcall	.+2638   	; 0x355c <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9c 8b       	std	Y+20, r25	; 0x14
    2b14:	8b 8b       	std	Y+19, r24	; 0x13
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1a:	98 8b       	std	Y+16, r25	; 0x10
    2b1c:	8f 87       	std	Y+15, r24	; 0x0f
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	98 89       	ldd	r25, Y+16	; 0x10
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <purpleside+0x11c2>
    2b26:	98 8b       	std	Y+16, r25	; 0x10
    2b28:	8f 87       	std	Y+15, r24	; 0x0f
    2b2a:	7b c0       	rjmp	.+246    	; 0x2c22 <purpleside+0x12c2>
					{
						_delay_ms(1500);
					}
					else if(current_position == 9)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ec 56       	subi	r30, 0x6C	; 108
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	89 30       	cpi	r24, 0x09	; 9
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <purpleside+0x11da>
    2b38:	6d c0       	rjmp	.+218    	; 0x2c14 <purpleside+0x12b4>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e4       	ldi	r25, 0x40	; 64
    2b3e:	ac e1       	ldi	r26, 0x1C	; 28
    2b40:	b6 e4       	ldi	r27, 0x46	; 70
    2b42:	8b 87       	std	Y+11, r24	; 0x0b
    2b44:	9c 87       	std	Y+12, r25	; 0x0c
    2b46:	ad 87       	std	Y+13, r26	; 0x0d
    2b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e4       	ldi	r19, 0x40	; 64
    2b56:	4c e1       	ldi	r20, 0x1C	; 28
    2b58:	55 e4       	ldi	r21, 0x45	; 69
    2b5a:	e2 d5       	rcall	.+3012   	; 0x3720 <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	8f 83       	std	Y+7, r24	; 0x07
    2b62:	98 87       	std	Y+8, r25	; 0x08
    2b64:	a9 87       	std	Y+9, r26	; 0x09
    2b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	80 d4       	rcall	.+2304   	; 0x347a <__cmpsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <purpleside+0x1228>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9e 83       	std	Y+6, r25	; 0x06
    2b84:	8d 83       	std	Y+5, r24	; 0x05
    2b86:	3b c0       	rjmp	.+118    	; 0x2bfe <purpleside+0x129e>
	else if (__tmp > 65535)
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	bf d5       	rcall	.+2942   	; 0x3718 <__gesf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	3c f5       	brge	.+78     	; 0x2bec <purpleside+0x128c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	51 e4       	ldi	r21, 0x41	; 65
    2bae:	b8 d5       	rcall	.+2928   	; 0x3720 <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	d1 d4       	rcall	.+2466   	; 0x355c <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <purpleside+0x1282>
    2bc4:	8a ef       	ldi	r24, 0xFA	; 250
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 83       	std	Y+4, r25	; 0x04
    2bca:	8b 83       	std	Y+3, r24	; 0x03
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <purpleside+0x1270>
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bda:	9e 81       	ldd	r25, Y+6	; 0x06
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <purpleside+0x1264>
    2bea:	1b c0       	rjmp	.+54     	; 0x2c22 <purpleside+0x12c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	b3 d4       	rcall	.+2406   	; 0x355c <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <purpleside+0x12aa>
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	07 c0       	rjmp	.+14     	; 0x2c22 <purpleside+0x12c2>
					{
						_delay_ms(10000);
					}
					else if(current_position == 18)
    2c14:	fe 01       	movw	r30, r28
    2c16:	ec 56       	subi	r30, 0x6C	; 108
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	82 31       	cpi	r24, 0x12	; 18
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <purpleside+0x12c2>
    2c20:	ff cf       	rjmp	.-2      	; 0x2c20 <purpleside+0x12c0>
						while(1);					
					}
					
				}//end for
			case ROBOT_STATE_TACTIC_FOUR:
				for(current_position = next_position;current_position < TACTIC_FOUR_POSITION_COUNT; current_position++)
    2c22:	de 01       	movw	r26, r28
    2c24:	ac 56       	subi	r26, 0x6C	; 108
    2c26:	bf 4f       	sbci	r27, 0xFF	; 255
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ec 56       	subi	r30, 0x6C	; 108
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	8f 5f       	subi	r24, 0xFF	; 255
    2c32:	8c 93       	st	X, r24
    2c34:	fe 01       	movw	r30, r28
    2c36:	ec 56       	subi	r30, 0x6C	; 108
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	83 31       	cpi	r24, 0x13	; 19
    2c3e:	08 f4       	brcc	.+2      	; 0x2c42 <purpleside+0x12e2>
    2c40:	0b ce       	rjmp	.-1002   	; 0x2858 <purpleside+0xef8>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    2c42:	fe 01       	movw	r30, r28
    2c44:	ec 56       	subi	r30, 0x6C	; 108
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	de 01       	movw	r26, r28
    2c4a:	ad 56       	subi	r26, 0x6D	; 109
    2c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4e:	8c 91       	ld	r24, X
    2c50:	80 83       	st	Z, r24
    2c52:	7a c0       	rjmp	.+244    	; 0x2d48 <purpleside+0x13e8>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_five_positions[current_position].point), purple_tactic_five_positions[current_position].speed,
    2c54:	fe 01       	movw	r30, r28
    2c56:	ec 56       	subi	r30, 0x6C	; 108
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	48 2f       	mov	r20, r24
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	ca 01       	movw	r24, r20
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	9c 01       	movw	r18, r24
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	22 0f       	add	r18, r18
    2c6e:	33 1f       	adc	r19, r19
    2c70:	82 0f       	add	r24, r18
    2c72:	93 1f       	adc	r25, r19
    2c74:	84 0f       	add	r24, r20
    2c76:	95 1f       	adc	r25, r21
    2c78:	85 54       	subi	r24, 0x45	; 69
    2c7a:	9c 4f       	sbci	r25, 0xFC	; 252
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ec 56       	subi	r30, 0x6C	; 108
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	48 2f       	mov	r20, r24
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	9c 01       	movw	r18, r24
    2c92:	22 0f       	add	r18, r18
    2c94:	33 1f       	adc	r19, r19
    2c96:	22 0f       	add	r18, r18
    2c98:	33 1f       	adc	r19, r19
    2c9a:	82 0f       	add	r24, r18
    2c9c:	93 1f       	adc	r25, r19
    2c9e:	84 0f       	add	r24, r20
    2ca0:	95 1f       	adc	r25, r21
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	ee 53       	subi	r30, 0x3E	; 62
    2ca6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ca8:	a0 81       	ld	r26, Z
    2caa:	fe 01       	movw	r30, r28
    2cac:	ec 56       	subi	r30, 0x6C	; 108
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	48 2f       	mov	r20, r24
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	ca 01       	movw	r24, r20
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	9c 01       	movw	r18, r24
    2cbe:	22 0f       	add	r18, r18
    2cc0:	33 1f       	adc	r19, r19
    2cc2:	22 0f       	add	r18, r18
    2cc4:	33 1f       	adc	r19, r19
    2cc6:	82 0f       	add	r24, r18
    2cc8:	93 1f       	adc	r25, r19
    2cca:	84 0f       	add	r24, r20
    2ccc:	95 1f       	adc	r25, r21
    2cce:	fc 01       	movw	r30, r24
    2cd0:	ed 53       	subi	r30, 0x3D	; 61
    2cd2:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd4:	80 81       	ld	r24, Z
    2cd6:	b8 2f       	mov	r27, r24
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ec 56       	subi	r30, 0x6C	; 108
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	ca 01       	movw	r24, r20
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	9c 01       	movw	r18, r24
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
    2cf0:	22 0f       	add	r18, r18
    2cf2:	33 1f       	adc	r19, r19
    2cf4:	82 0f       	add	r24, r18
    2cf6:	93 1f       	adc	r25, r19
    2cf8:	84 0f       	add	r24, r20
    2cfa:	95 1f       	adc	r25, r21
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	ec 53       	subi	r30, 0x3C	; 60
    2d00:	fc 4f       	sbci	r31, 0xFC	; 252
    2d02:	20 81       	ld	r18, Z
    2d04:	31 81       	ldd	r19, Z+1	; 0x01
    2d06:	cb 01       	movw	r24, r22
    2d08:	6a 2f       	mov	r22, r26
    2d0a:	4b 2f       	mov	r20, r27
    2d0c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <odometry_move_to_position>
    2d10:	fe 01       	movw	r30, r28
    2d12:	ee 56       	subi	r30, 0x6E	; 110
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 83       	st	Z, r24
					purple_tactic_five_positions[current_position].direction,purple_tactic_five_positions[current_position].callback);
					if(odometry_status == ODOMETRY_FAIL)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ee 56       	subi	r30, 0x6E	; 110
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	11 f4       	brne	.+4      	; 0x2d28 <purpleside+0x13c8>
    2d24:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <purpleside+0x2e8>
					{
						break;
					}
					if(current_position == 0)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ec 56       	subi	r30, 0x6C	; 108
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <purpleside+0x13d6>
    2d34:	ff cf       	rjmp	.-2      	; 0x2d34 <purpleside+0x13d4>
					{
						while(1);
					}
				}//end for
			case ROBOT_STATE_TACTIC_FIVE:
				for(current_position = next_position;current_position < TACTIC_FIVE_POSITION_COUNT; current_position++)
    2d36:	de 01       	movw	r26, r28
    2d38:	ac 56       	subi	r26, 0x6C	; 108
    2d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ec 56       	subi	r30, 0x6C	; 108
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	8c 93       	st	X, r24
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ec 56       	subi	r30, 0x6C	; 108
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 23       	and	r24, r24
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <purpleside+0x13f6>
    2d54:	7f cf       	rjmp	.-258    	; 0x2c54 <purpleside+0x12f4>
    2d56:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <purpleside+0x2e8>

00002d5a <timer_register_callback>:
static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <timer_register_callback+0x6>
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	90 93 fc 03 	sts	0x03FC, r25
    2d70:	80 93 fb 03 	sts	0x03FB, r24
}
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <timer_init>:
		return 1;
	}
	return 0;
}
void timer_init(unsigned int freq)
{
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <timer_init+0xa>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2d90:	e0 e8       	ldi	r30, 0x80	; 128
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2d96:	e1 e8       	ldi	r30, 0x81	; 129
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	89 e0       	ldi	r24, 0x09	; 9
    2d9c:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2d9e:	08 e8       	ldi	r16, 0x88	; 136
    2da0:	10 e0       	ldi	r17, 0x00	; 0
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	cc 01       	movw	r24, r24
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	01 d4       	rcall	.+2050   	; 0x35b4 <__floatunsisf>
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	60 e8       	ldi	r22, 0x80	; 128
    2db8:	76 e9       	ldi	r23, 0x96	; 150
    2dba:	88 e1       	ldi	r24, 0x18	; 24
    2dbc:	9b e4       	ldi	r25, 0x4B	; 75
    2dbe:	61 d3       	rcall	.+1730   	; 0x3482 <__divsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	f0 d2       	rcall	.+1504   	; 0x33b2 <__addsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	c0 d3       	rcall	.+1920   	; 0x355c <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	f8 01       	movw	r30, r16
    2de2:	91 83       	std	Z+1, r25	; 0x01
    2de4:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2de6:	ef e6       	ldi	r30, 0x6F	; 111
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	80 83       	st	Z, r24

	SREG |= 0x80;
    2dee:	af e5       	ldi	r26, 0x5F	; 95
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ef e5       	ldi	r30, 0x5F	; 95
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	80 68       	ori	r24, 0x80	; 128
    2dfa:	8c 93       	st	X, r24
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	08 95       	ret

00002e0a <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2e0a:	1f 92       	push	r1
    2e0c:	0f 92       	push	r0
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	0f 92       	push	r0
    2e12:	00 90 5b 00 	lds	r0, 0x005B
    2e16:	0f 92       	push	r0
    2e18:	11 24       	eor	r1, r1
    2e1a:	2f 93       	push	r18
    2e1c:	3f 93       	push	r19
    2e1e:	4f 93       	push	r20
    2e20:	5f 93       	push	r21
    2e22:	6f 93       	push	r22
    2e24:	7f 93       	push	r23
    2e26:	8f 93       	push	r24
    2e28:	9f 93       	push	r25
    2e2a:	af 93       	push	r26
    2e2c:	bf 93       	push	r27
    2e2e:	ef 93       	push	r30
    2e30:	ff 93       	push	r31
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2e3a:	80 91 fb 03 	lds	r24, 0x03FB
    2e3e:	90 91 fc 03 	lds	r25, 0x03FC
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	29 f0       	breq	.+10     	; 0x2e50 <__vector_12+0x46>
        timer_callback();
    2e46:	e0 91 fb 03 	lds	r30, 0x03FB
    2e4a:	f0 91 fc 03 	lds	r31, 0x03FC
    2e4e:	09 95       	icall
	if(sys_time >= 90000)
    2e50:	80 91 fd 03 	lds	r24, 0x03FD
    2e54:	90 91 fe 03 	lds	r25, 0x03FE
    2e58:	a0 91 ff 03 	lds	r26, 0x03FF
    2e5c:	b0 91 00 04 	lds	r27, 0x0400
    2e60:	80 39       	cpi	r24, 0x90	; 144
    2e62:	2f e5       	ldi	r18, 0x5F	; 95
    2e64:	92 07       	cpc	r25, r18
    2e66:	21 e0       	ldi	r18, 0x01	; 1
    2e68:	a2 07       	cpc	r26, r18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	b2 07       	cpc	r27, r18
    2e6e:	10 f0       	brcs	.+4      	; 0x2e74 <__vector_12+0x6a>
		actuators_umbrella();
    2e70:	0e 94 a3 02 	call	0x546	; 0x546 <actuators_umbrella>
	sys_time++;
    2e74:	80 91 fd 03 	lds	r24, 0x03FD
    2e78:	90 91 fe 03 	lds	r25, 0x03FE
    2e7c:	a0 91 ff 03 	lds	r26, 0x03FF
    2e80:	b0 91 00 04 	lds	r27, 0x0400
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	a1 1d       	adc	r26, r1
    2e88:	b1 1d       	adc	r27, r1
    2e8a:	80 93 fd 03 	sts	0x03FD, r24
    2e8e:	90 93 fe 03 	sts	0x03FE, r25
    2e92:	a0 93 ff 03 	sts	0x03FF, r26
    2e96:	b0 93 00 04 	sts	0x0400, r27
}
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	ff 91       	pop	r31
    2ea0:	ef 91       	pop	r30
    2ea2:	bf 91       	pop	r27
    2ea4:	af 91       	pop	r26
    2ea6:	9f 91       	pop	r25
    2ea8:	8f 91       	pop	r24
    2eaa:	7f 91       	pop	r23
    2eac:	6f 91       	pop	r22
    2eae:	5f 91       	pop	r21
    2eb0:	4f 91       	pop	r20
    2eb2:	3f 91       	pop	r19
    2eb4:	2f 91       	pop	r18
    2eb6:	0f 90       	pop	r0
    2eb8:	00 92 5b 00 	sts	0x005B, r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	0f 90       	pop	r0
    2ec2:	1f 90       	pop	r1
    2ec4:	18 95       	reti

00002ec6 <system_reset_system_time>:
void system_reset_system_time(void)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2ece:	10 92 fd 03 	sts	0x03FD, r1
    2ed2:	10 92 fe 03 	sts	0x03FE, r1
    2ed6:	10 92 ff 03 	sts	0x03FF, r1
    2eda:	10 92 00 04 	sts	0x0400, r1
}
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <system_set_match_started>:
void system_set_match_started(void)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	80 93 01 04 	sts	0x0401, r24
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2f00:	80 91 fd 03 	lds	r24, 0x03FD
    2f04:	90 91 fe 03 	lds	r25, 0x03FE
    2f08:	a0 91 ff 03 	lds	r26, 0x03FF
    2f0c:	b0 91 00 04 	lds	r27, 0x0400
}
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <system_init>:
uint8_t return_active_state(void)
{
	return active_state;
}
void system_init(void)
{	
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	6c 97       	sbiw	r28, 0x1c	; 28
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    2f2e:	8d e8       	ldi	r24, 0x8D	; 141
    2f30:	98 e0       	ldi	r25, 0x08	; 8
    2f32:	13 df       	rcall	.-474    	; 0x2d5a <timer_register_callback>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a8 ec       	ldi	r26, 0xC8	; 200
    2f3a:	b2 e4       	ldi	r27, 0x42	; 66
    2f3c:	89 8f       	std	Y+25, r24	; 0x19
    2f3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f40:	ab 8f       	std	Y+27, r26	; 0x1b
    2f42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	69 8d       	ldd	r22, Y+25	; 0x19
    2f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e4       	ldi	r19, 0x40	; 64
    2f50:	4c e1       	ldi	r20, 0x1C	; 28
    2f52:	55 e4       	ldi	r21, 0x45	; 69
    2f54:	e5 d3       	rcall	.+1994   	; 0x3720 <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8d 8b       	std	Y+21, r24	; 0x15
    2f5c:	9e 8b       	std	Y+22, r25	; 0x16
    2f5e:	af 8b       	std	Y+23, r26	; 0x17
    2f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f62:	6d 89       	ldd	r22, Y+21	; 0x15
    2f64:	7e 89       	ldd	r23, Y+22	; 0x16
    2f66:	8f 89       	ldd	r24, Y+23	; 0x17
    2f68:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e8       	ldi	r20, 0x80	; 128
    2f70:	5f e3       	ldi	r21, 0x3F	; 63
    2f72:	83 d2       	rcall	.+1286   	; 0x347a <__cmpsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <system_init+0x68>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 8b       	std	Y+20, r25	; 0x14
    2f7e:	8b 8b       	std	Y+19, r24	; 0x13
    2f80:	3b c0       	rjmp	.+118    	; 0x2ff8 <system_init+0xde>
	else if (__tmp > 65535)
    2f82:	6d 89       	ldd	r22, Y+21	; 0x15
    2f84:	7e 89       	ldd	r23, Y+22	; 0x16
    2f86:	8f 89       	ldd	r24, Y+23	; 0x17
    2f88:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	c2 d3       	rcall	.+1924   	; 0x3718 <__gesf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	3c f5       	brge	.+78     	; 0x2fe6 <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	bb d3       	rcall	.+1910   	; 0x3720 <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	d4 d2       	rcall	.+1448   	; 0x355c <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9c 8b       	std	Y+20, r25	; 0x14
    2fba:	8b 8b       	std	Y+19, r24	; 0x13
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <system_init+0xc2>
    2fbe:	8a ef       	ldi	r24, 0xFA	; 250
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
    2fc6:	89 89       	ldd	r24, Y+17	; 0x11
    2fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <system_init+0xb0>
    2fce:	9a 8b       	std	Y+18, r25	; 0x12
    2fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9c 8b       	std	Y+20, r25	; 0x14
    2fda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <system_init+0xa4>
    2fe4:	13 c0       	rjmp	.+38     	; 0x300c <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fea:	8f 89       	ldd	r24, Y+23	; 0x17
    2fec:	98 8d       	ldd	r25, Y+24	; 0x18
    2fee:	b6 d2       	rcall	.+1388   	; 0x355c <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	98 8b       	std	Y+16, r25	; 0x10
    2ffe:	8f 87       	std	Y+15, r24	; 0x0f
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	98 89       	ldd	r25, Y+16	; 0x10
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <system_init+0xea>
    3008:	98 8b       	std	Y+16, r25	; 0x10
    300a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    300c:	88 e2       	ldi	r24, 0x28	; 40
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    3016:	89 e2       	ldi	r24, 0x29	; 41
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	41 e0       	ldi	r20, 0x01	; 1
    301c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(CAMERA_0_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 0 position
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(CAMERA_1_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 1 position
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(CAMERA_2_PIN,GPIO_DIRECTION_INPUT,TRUE);							//camera 2 position
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	41 e0       	ldi	r20, 0x01	; 1
    303a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    303e:	88 e0       	ldi	r24, 0x08	; 8
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    3048:	8a e0       	ldi	r24, 0x0A	; 10
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    3052:	8c e0       	ldi	r24, 0x0C	; 12
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    305c:	8e e0       	ldi	r24, 0x0E	; 14
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 9f 06 	call	0xd3e	; 0xd3e <gpio_register_pin>
	
	
	DDRG = 0xff;
    3066:	e3 e3       	ldi	r30, 0x33	; 51
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	8f ef       	ldi	r24, 0xFF	; 255
    306c:	80 83       	st	Z, r24
	PORTG = 0x00;
    306e:	e4 e3       	ldi	r30, 0x34	; 52
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	10 82       	st	Z, r1
	servo_init(50);
    3074:	82 e3       	ldi	r24, 0x32	; 50
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <servo_init>
	timer_init(1000);
    307c:	88 ee       	ldi	r24, 0xE8	; 232
    307e:	93 e0       	ldi	r25, 0x03	; 3
    3080:	7e de       	rcall	.-772    	; 0x2d7e <timer_init>
	CAN_Init(1);
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	0e 94 5a 05 	call	0xab4	; 0xab4 <CAN_Init>
    3088:	6c c0       	rjmp	.+216    	; 0x3162 <system_init+0x248>

	//actuators_setup();
	
	while(gpio_read_pin(JUMPER_PIN))
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a0 e2       	ldi	r26, 0x20	; 32
    3090:	b1 e4       	ldi	r27, 0x41	; 65
    3092:	8b 87       	std	Y+11, r24	; 0x0b
    3094:	9c 87       	std	Y+12, r25	; 0x0c
    3096:	ad 87       	std	Y+13, r26	; 0x0d
    3098:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309a:	6b 85       	ldd	r22, Y+11	; 0x0b
    309c:	7c 85       	ldd	r23, Y+12	; 0x0c
    309e:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e4       	ldi	r19, 0x40	; 64
    30a6:	4c e1       	ldi	r20, 0x1C	; 28
    30a8:	55 e4       	ldi	r21, 0x45	; 69
    30aa:	3a d3       	rcall	.+1652   	; 0x3720 <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8f 83       	std	Y+7, r24	; 0x07
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	a9 87       	std	Y+9, r26	; 0x09
    30b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	d8 d1       	rcall	.+944    	; 0x347a <__cmpsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <system_init+0x1be>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	3b c0       	rjmp	.+118    	; 0x314e <system_init+0x234>
	else if (__tmp > 65535)
    30d8:	6f 81       	ldd	r22, Y+7	; 0x07
    30da:	78 85       	ldd	r23, Y+8	; 0x08
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	3f ef       	ldi	r19, 0xFF	; 255
    30e4:	4f e7       	ldi	r20, 0x7F	; 127
    30e6:	57 e4       	ldi	r21, 0x47	; 71
    30e8:	17 d3       	rcall	.+1582   	; 0x3718 <__gesf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	3c f5       	brge	.+78     	; 0x313c <system_init+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	10 d3       	rcall	.+1568   	; 0x3720 <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	29 d2       	rcall	.+1106   	; 0x355c <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <system_init+0x218>
    3114:	8a ef       	ldi	r24, 0xFA	; 250
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9c 83       	std	Y+4, r25	; 0x04
    311a:	8b 83       	std	Y+3, r24	; 0x03
    311c:	8b 81       	ldd	r24, Y+3	; 0x03
    311e:	9c 81       	ldd	r25, Y+4	; 0x04
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <system_init+0x206>
    3124:	9c 83       	std	Y+4, r25	; 0x04
    3126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9e 83       	std	Y+6, r25	; 0x06
    3130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <system_init+0x1fa>
    313a:	13 c0       	rjmp	.+38     	; 0x3162 <system_init+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	6f 81       	ldd	r22, Y+7	; 0x07
    313e:	78 85       	ldd	r23, Y+8	; 0x08
    3140:	89 85       	ldd	r24, Y+9	; 0x09
    3142:	9a 85       	ldd	r25, Y+10	; 0x0a
    3144:	0b d2       	rcall	.+1046   	; 0x355c <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	9e 81       	ldd	r25, Y+6	; 0x06
    3152:	9a 83       	std	Y+2, r25	; 0x02
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <system_init+0x240>
    315e:	9a 83       	std	Y+2, r25	; 0x02
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	88 e2       	ldi	r24, 0x28	; 40
    3164:	0e 94 0d 08 	call	0x101a	; 0x101a <gpio_read_pin>
    3168:	88 23       	and	r24, r24
    316a:	09 f0       	breq	.+2      	; 0x316e <system_init+0x254>
    316c:	8e cf       	rjmp	.-228    	; 0x308a <system_init+0x170>
		_delay_ms(10);
	PORTG = 0xff;
    316e:	e4 e3       	ldi	r30, 0x34	; 52
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	8f ef       	ldi	r24, 0xFF	; 255
    3174:	80 83       	st	Z, r24
	system_reset_system_time();
    3176:	a7 de       	rcall	.-690    	; 0x2ec6 <system_reset_system_time>
	system_set_match_started();
    3178:	b5 de       	rcall	.-662    	; 0x2ee4 <system_set_match_started>
	
}
    317a:	6c 96       	adiw	r28, 0x1c	; 28
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	00 90 5b 00 	lds	r0, 0x005B
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	8f 93       	push	r24
    319e:	9f 93       	push	r25
    31a0:	af 93       	push	r26
    31a2:	bf 93       	push	r27
    31a4:	ef 93       	push	r30
    31a6:	ff 93       	push	r31
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    31b0:	80 91 02 04 	lds	r24, 0x0402
    31b4:	88 23       	and	r24, r24
    31b6:	d9 f0       	breq	.+54     	; 0x31ee <__vector_23+0x62>
	{
		tx0_counter--;
    31b8:	80 91 02 04 	lds	r24, 0x0402
    31bc:	81 50       	subi	r24, 0x01	; 1
    31be:	80 93 02 04 	sts	0x0402, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    31c2:	a6 ec       	ldi	r26, 0xC6	; 198
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	80 91 03 04 	lds	r24, 0x0403
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	fc 01       	movw	r30, r24
    31d0:	e6 5f       	subi	r30, 0xF6	; 246
    31d2:	fb 4f       	sbci	r31, 0xFB	; 251
    31d4:	80 81       	ld	r24, Z
    31d6:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    31d8:	80 91 03 04 	lds	r24, 0x0403
    31dc:	8f 5f       	subi	r24, 0xFF	; 255
    31de:	80 93 03 04 	sts	0x0403, r24
    31e2:	80 91 03 04 	lds	r24, 0x0403
    31e6:	80 34       	cpi	r24, 0x40	; 64
    31e8:	11 f4       	brne	.+4      	; 0x31ee <__vector_23+0x62>
			tx0_rd_index = 0;
    31ea:	10 92 03 04 	sts	0x0403, r1
	}
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	ff 91       	pop	r31
    31f4:	ef 91       	pop	r30
    31f6:	bf 91       	pop	r27
    31f8:	af 91       	pop	r26
    31fa:	9f 91       	pop	r25
    31fc:	8f 91       	pop	r24
    31fe:	0f 90       	pop	r0
    3200:	00 92 5b 00 	sts	0x005B, r0
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f 90       	pop	r0
    320a:	1f 90       	pop	r1
    320c:	18 95       	reti

0000320e <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    320e:	1f 92       	push	r1
    3210:	0f 92       	push	r0
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	0f 92       	push	r0
    3216:	00 90 5b 00 	lds	r0, 0x005B
    321a:	0f 92       	push	r0
    321c:	11 24       	eor	r1, r1
    321e:	2f 93       	push	r18
    3220:	8f 93       	push	r24
    3222:	9f 93       	push	r25
    3224:	ef 93       	push	r30
    3226:	ff 93       	push	r31
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	0f 92       	push	r0
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    3232:	e0 ec       	ldi	r30, 0xC0	; 192
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	88 2f       	mov	r24, r24
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	8c 71       	andi	r24, 0x1C	; 28
    3242:	90 70       	andi	r25, 0x00	; 0
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	d9 f4       	brne	.+54     	; 0x327e <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    3248:	80 91 04 04 	lds	r24, 0x0404
    324c:	88 2f       	mov	r24, r24
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	e6 ec       	ldi	r30, 0xC6	; 198
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	20 81       	ld	r18, Z
    3256:	fc 01       	movw	r30, r24
    3258:	e6 5b       	subi	r30, 0xB6	; 182
    325a:	fb 4f       	sbci	r31, 0xFB	; 251
    325c:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    325e:	80 91 04 04 	lds	r24, 0x0404
    3262:	8f 5f       	subi	r24, 0xFF	; 255
    3264:	80 93 04 04 	sts	0x0404, r24
    3268:	80 91 04 04 	lds	r24, 0x0404
    326c:	80 34       	cpi	r24, 0x40	; 64
    326e:	11 f4       	brne	.+4      	; 0x3274 <__vector_21+0x66>
			rx0_wr_index = 0;
    3270:	10 92 04 04 	sts	0x0404, r1

		rx0_counter++;
    3274:	80 91 05 04 	lds	r24, 0x0405
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	80 93 05 04 	sts	0x0405, r24
	}
}
    327e:	0f 90       	pop	r0
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	9f 91       	pop	r25
    328a:	8f 91       	pop	r24
    328c:	2f 91       	pop	r18
    328e:	0f 90       	pop	r0
    3290:	00 92 5b 00 	sts	0x005B, r0
    3294:	0f 90       	pop	r0
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	0f 90       	pop	r0
    329a:	1f 90       	pop	r1
    329c:	18 95       	reti

0000329e <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    329e:	1f 92       	push	r1
    32a0:	0f 92       	push	r0
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	0f 92       	push	r0
    32a6:	00 90 5b 00 	lds	r0, 0x005B
    32aa:	0f 92       	push	r0
    32ac:	11 24       	eor	r1, r1
    32ae:	8f 93       	push	r24
    32b0:	9f 93       	push	r25
    32b2:	af 93       	push	r26
    32b4:	bf 93       	push	r27
    32b6:	ef 93       	push	r30
    32b8:	ff 93       	push	r31
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    32c2:	80 91 06 04 	lds	r24, 0x0406
    32c6:	88 23       	and	r24, r24
    32c8:	d9 f0       	breq	.+54     	; 0x3300 <__vector_34+0x62>
	{
		tx1_counter--;
    32ca:	80 91 06 04 	lds	r24, 0x0406
    32ce:	81 50       	subi	r24, 0x01	; 1
    32d0:	80 93 06 04 	sts	0x0406, r24
		UDR1=tx1_buffer[tx1_rd_index];
    32d4:	ae ec       	ldi	r26, 0xCE	; 206
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	80 91 07 04 	lds	r24, 0x0407
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	fc 01       	movw	r30, r24
    32e2:	e6 57       	subi	r30, 0x76	; 118
    32e4:	fb 4f       	sbci	r31, 0xFB	; 251
    32e6:	80 81       	ld	r24, Z
    32e8:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    32ea:	80 91 07 04 	lds	r24, 0x0407
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	80 93 07 04 	sts	0x0407, r24
    32f4:	80 91 07 04 	lds	r24, 0x0407
    32f8:	80 34       	cpi	r24, 0x40	; 64
    32fa:	11 f4       	brne	.+4      	; 0x3300 <__vector_34+0x62>
			tx1_rd_index = 0;
    32fc:	10 92 07 04 	sts	0x0407, r1
	}
}
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	ff 91       	pop	r31
    3306:	ef 91       	pop	r30
    3308:	bf 91       	pop	r27
    330a:	af 91       	pop	r26
    330c:	9f 91       	pop	r25
    330e:	8f 91       	pop	r24
    3310:	0f 90       	pop	r0
    3312:	00 92 5b 00 	sts	0x005B, r0
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	0f 90       	pop	r0
    331c:	1f 90       	pop	r1
    331e:	18 95       	reti

00003320 <__vector_32>:

ISR(USART1_RX_vect)
{
    3320:	1f 92       	push	r1
    3322:	0f 92       	push	r0
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	0f 92       	push	r0
    3328:	00 90 5b 00 	lds	r0, 0x005B
    332c:	0f 92       	push	r0
    332e:	11 24       	eor	r1, r1
    3330:	2f 93       	push	r18
    3332:	8f 93       	push	r24
    3334:	9f 93       	push	r25
    3336:	ef 93       	push	r30
    3338:	ff 93       	push	r31
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    3344:	e8 ec       	ldi	r30, 0xC8	; 200
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	8c 71       	andi	r24, 0x1C	; 28
    3354:	90 70       	andi	r25, 0x00	; 0
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	d9 f4       	brne	.+54     	; 0x3390 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    335a:	80 91 08 04 	lds	r24, 0x0408
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	ee ec       	ldi	r30, 0xCE	; 206
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	20 81       	ld	r18, Z
    3368:	fc 01       	movw	r30, r24
    336a:	e6 53       	subi	r30, 0x36	; 54
    336c:	fb 4f       	sbci	r31, 0xFB	; 251
    336e:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    3370:	80 91 08 04 	lds	r24, 0x0408
    3374:	8f 5f       	subi	r24, 0xFF	; 255
    3376:	80 93 08 04 	sts	0x0408, r24
    337a:	80 91 08 04 	lds	r24, 0x0408
    337e:	80 34       	cpi	r24, 0x40	; 64
    3380:	11 f4       	brne	.+4      	; 0x3386 <__vector_32+0x66>
		rx1_wr_index = 0;
    3382:	10 92 08 04 	sts	0x0408, r1

		rx1_counter++;
    3386:	80 91 09 04 	lds	r24, 0x0409
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	80 93 09 04 	sts	0x0409, r24
	}
}
    3390:	0f 90       	pop	r0
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	ff 91       	pop	r31
    3398:	ef 91       	pop	r30
    339a:	9f 91       	pop	r25
    339c:	8f 91       	pop	r24
    339e:	2f 91       	pop	r18
    33a0:	0f 90       	pop	r0
    33a2:	00 92 5b 00 	sts	0x005B, r0
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <__subsf3>:
    33b0:	50 58       	subi	r21, 0x80	; 128

000033b2 <__addsf3>:
    33b2:	bb 27       	eor	r27, r27
    33b4:	aa 27       	eor	r26, r26
    33b6:	0e d0       	rcall	.+28     	; 0x33d4 <__addsf3x>
    33b8:	75 c1       	rjmp	.+746    	; 0x36a4 <__fp_round>
    33ba:	66 d1       	rcall	.+716    	; 0x3688 <__fp_pscA>
    33bc:	30 f0       	brcs	.+12     	; 0x33ca <__addsf3+0x18>
    33be:	6b d1       	rcall	.+726    	; 0x3696 <__fp_pscB>
    33c0:	20 f0       	brcs	.+8      	; 0x33ca <__addsf3+0x18>
    33c2:	31 f4       	brne	.+12     	; 0x33d0 <__addsf3+0x1e>
    33c4:	9f 3f       	cpi	r25, 0xFF	; 255
    33c6:	11 f4       	brne	.+4      	; 0x33cc <__addsf3+0x1a>
    33c8:	1e f4       	brtc	.+6      	; 0x33d0 <__addsf3+0x1e>
    33ca:	5b c1       	rjmp	.+694    	; 0x3682 <__fp_nan>
    33cc:	0e f4       	brtc	.+2      	; 0x33d0 <__addsf3+0x1e>
    33ce:	e0 95       	com	r30
    33d0:	e7 fb       	bst	r30, 7
    33d2:	51 c1       	rjmp	.+674    	; 0x3676 <__fp_inf>

000033d4 <__addsf3x>:
    33d4:	e9 2f       	mov	r30, r25
    33d6:	77 d1       	rcall	.+750    	; 0x36c6 <__fp_split3>
    33d8:	80 f3       	brcs	.-32     	; 0x33ba <__addsf3+0x8>
    33da:	ba 17       	cp	r27, r26
    33dc:	62 07       	cpc	r22, r18
    33de:	73 07       	cpc	r23, r19
    33e0:	84 07       	cpc	r24, r20
    33e2:	95 07       	cpc	r25, r21
    33e4:	18 f0       	brcs	.+6      	; 0x33ec <__addsf3x+0x18>
    33e6:	71 f4       	brne	.+28     	; 0x3404 <__addsf3x+0x30>
    33e8:	9e f5       	brtc	.+102    	; 0x3450 <__addsf3x+0x7c>
    33ea:	8f c1       	rjmp	.+798    	; 0x370a <__fp_zero>
    33ec:	0e f4       	brtc	.+2      	; 0x33f0 <__addsf3x+0x1c>
    33ee:	e0 95       	com	r30
    33f0:	0b 2e       	mov	r0, r27
    33f2:	ba 2f       	mov	r27, r26
    33f4:	a0 2d       	mov	r26, r0
    33f6:	0b 01       	movw	r0, r22
    33f8:	b9 01       	movw	r22, r18
    33fa:	90 01       	movw	r18, r0
    33fc:	0c 01       	movw	r0, r24
    33fe:	ca 01       	movw	r24, r20
    3400:	a0 01       	movw	r20, r0
    3402:	11 24       	eor	r1, r1
    3404:	ff 27       	eor	r31, r31
    3406:	59 1b       	sub	r21, r25
    3408:	99 f0       	breq	.+38     	; 0x3430 <__addsf3x+0x5c>
    340a:	59 3f       	cpi	r21, 0xF9	; 249
    340c:	50 f4       	brcc	.+20     	; 0x3422 <__addsf3x+0x4e>
    340e:	50 3e       	cpi	r21, 0xE0	; 224
    3410:	68 f1       	brcs	.+90     	; 0x346c <__addsf3x+0x98>
    3412:	1a 16       	cp	r1, r26
    3414:	f0 40       	sbci	r31, 0x00	; 0
    3416:	a2 2f       	mov	r26, r18
    3418:	23 2f       	mov	r18, r19
    341a:	34 2f       	mov	r19, r20
    341c:	44 27       	eor	r20, r20
    341e:	58 5f       	subi	r21, 0xF8	; 248
    3420:	f3 cf       	rjmp	.-26     	; 0x3408 <__addsf3x+0x34>
    3422:	46 95       	lsr	r20
    3424:	37 95       	ror	r19
    3426:	27 95       	ror	r18
    3428:	a7 95       	ror	r26
    342a:	f0 40       	sbci	r31, 0x00	; 0
    342c:	53 95       	inc	r21
    342e:	c9 f7       	brne	.-14     	; 0x3422 <__addsf3x+0x4e>
    3430:	7e f4       	brtc	.+30     	; 0x3450 <__addsf3x+0x7c>
    3432:	1f 16       	cp	r1, r31
    3434:	ba 0b       	sbc	r27, r26
    3436:	62 0b       	sbc	r22, r18
    3438:	73 0b       	sbc	r23, r19
    343a:	84 0b       	sbc	r24, r20
    343c:	ba f0       	brmi	.+46     	; 0x346c <__addsf3x+0x98>
    343e:	91 50       	subi	r25, 0x01	; 1
    3440:	a1 f0       	breq	.+40     	; 0x346a <__addsf3x+0x96>
    3442:	ff 0f       	add	r31, r31
    3444:	bb 1f       	adc	r27, r27
    3446:	66 1f       	adc	r22, r22
    3448:	77 1f       	adc	r23, r23
    344a:	88 1f       	adc	r24, r24
    344c:	c2 f7       	brpl	.-16     	; 0x343e <__addsf3x+0x6a>
    344e:	0e c0       	rjmp	.+28     	; 0x346c <__addsf3x+0x98>
    3450:	ba 0f       	add	r27, r26
    3452:	62 1f       	adc	r22, r18
    3454:	73 1f       	adc	r23, r19
    3456:	84 1f       	adc	r24, r20
    3458:	48 f4       	brcc	.+18     	; 0x346c <__addsf3x+0x98>
    345a:	87 95       	ror	r24
    345c:	77 95       	ror	r23
    345e:	67 95       	ror	r22
    3460:	b7 95       	ror	r27
    3462:	f7 95       	ror	r31
    3464:	9e 3f       	cpi	r25, 0xFE	; 254
    3466:	08 f0       	brcs	.+2      	; 0x346a <__addsf3x+0x96>
    3468:	b3 cf       	rjmp	.-154    	; 0x33d0 <__addsf3+0x1e>
    346a:	93 95       	inc	r25
    346c:	88 0f       	add	r24, r24
    346e:	08 f0       	brcs	.+2      	; 0x3472 <__addsf3x+0x9e>
    3470:	99 27       	eor	r25, r25
    3472:	ee 0f       	add	r30, r30
    3474:	97 95       	ror	r25
    3476:	87 95       	ror	r24
    3478:	08 95       	ret

0000347a <__cmpsf2>:
    347a:	d9 d0       	rcall	.+434    	; 0x362e <__fp_cmp>
    347c:	08 f4       	brcc	.+2      	; 0x3480 <__cmpsf2+0x6>
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	08 95       	ret

00003482 <__divsf3>:
    3482:	0c d0       	rcall	.+24     	; 0x349c <__divsf3x>
    3484:	0f c1       	rjmp	.+542    	; 0x36a4 <__fp_round>
    3486:	07 d1       	rcall	.+526    	; 0x3696 <__fp_pscB>
    3488:	40 f0       	brcs	.+16     	; 0x349a <__divsf3+0x18>
    348a:	fe d0       	rcall	.+508    	; 0x3688 <__fp_pscA>
    348c:	30 f0       	brcs	.+12     	; 0x349a <__divsf3+0x18>
    348e:	21 f4       	brne	.+8      	; 0x3498 <__divsf3+0x16>
    3490:	5f 3f       	cpi	r21, 0xFF	; 255
    3492:	19 f0       	breq	.+6      	; 0x349a <__divsf3+0x18>
    3494:	f0 c0       	rjmp	.+480    	; 0x3676 <__fp_inf>
    3496:	51 11       	cpse	r21, r1
    3498:	39 c1       	rjmp	.+626    	; 0x370c <__fp_szero>
    349a:	f3 c0       	rjmp	.+486    	; 0x3682 <__fp_nan>

0000349c <__divsf3x>:
    349c:	14 d1       	rcall	.+552    	; 0x36c6 <__fp_split3>
    349e:	98 f3       	brcs	.-26     	; 0x3486 <__divsf3+0x4>

000034a0 <__divsf3_pse>:
    34a0:	99 23       	and	r25, r25
    34a2:	c9 f3       	breq	.-14     	; 0x3496 <__divsf3+0x14>
    34a4:	55 23       	and	r21, r21
    34a6:	b1 f3       	breq	.-20     	; 0x3494 <__divsf3+0x12>
    34a8:	95 1b       	sub	r25, r21
    34aa:	55 0b       	sbc	r21, r21
    34ac:	bb 27       	eor	r27, r27
    34ae:	aa 27       	eor	r26, r26
    34b0:	62 17       	cp	r22, r18
    34b2:	73 07       	cpc	r23, r19
    34b4:	84 07       	cpc	r24, r20
    34b6:	38 f0       	brcs	.+14     	; 0x34c6 <__divsf3_pse+0x26>
    34b8:	9f 5f       	subi	r25, 0xFF	; 255
    34ba:	5f 4f       	sbci	r21, 0xFF	; 255
    34bc:	22 0f       	add	r18, r18
    34be:	33 1f       	adc	r19, r19
    34c0:	44 1f       	adc	r20, r20
    34c2:	aa 1f       	adc	r26, r26
    34c4:	a9 f3       	breq	.-22     	; 0x34b0 <__divsf3_pse+0x10>
    34c6:	33 d0       	rcall	.+102    	; 0x352e <__divsf3_pse+0x8e>
    34c8:	0e 2e       	mov	r0, r30
    34ca:	3a f0       	brmi	.+14     	; 0x34da <__divsf3_pse+0x3a>
    34cc:	e0 e8       	ldi	r30, 0x80	; 128
    34ce:	30 d0       	rcall	.+96     	; 0x3530 <__divsf3_pse+0x90>
    34d0:	91 50       	subi	r25, 0x01	; 1
    34d2:	50 40       	sbci	r21, 0x00	; 0
    34d4:	e6 95       	lsr	r30
    34d6:	00 1c       	adc	r0, r0
    34d8:	ca f7       	brpl	.-14     	; 0x34cc <__divsf3_pse+0x2c>
    34da:	29 d0       	rcall	.+82     	; 0x352e <__divsf3_pse+0x8e>
    34dc:	fe 2f       	mov	r31, r30
    34de:	27 d0       	rcall	.+78     	; 0x352e <__divsf3_pse+0x8e>
    34e0:	66 0f       	add	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	bb 1f       	adc	r27, r27
    34e8:	26 17       	cp	r18, r22
    34ea:	37 07       	cpc	r19, r23
    34ec:	48 07       	cpc	r20, r24
    34ee:	ab 07       	cpc	r26, r27
    34f0:	b0 e8       	ldi	r27, 0x80	; 128
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <__divsf3_pse+0x56>
    34f4:	bb 0b       	sbc	r27, r27
    34f6:	80 2d       	mov	r24, r0
    34f8:	bf 01       	movw	r22, r30
    34fa:	ff 27       	eor	r31, r31
    34fc:	93 58       	subi	r25, 0x83	; 131
    34fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3500:	2a f0       	brmi	.+10     	; 0x350c <__divsf3_pse+0x6c>
    3502:	9e 3f       	cpi	r25, 0xFE	; 254
    3504:	51 05       	cpc	r21, r1
    3506:	68 f0       	brcs	.+26     	; 0x3522 <__divsf3_pse+0x82>
    3508:	b6 c0       	rjmp	.+364    	; 0x3676 <__fp_inf>
    350a:	00 c1       	rjmp	.+512    	; 0x370c <__fp_szero>
    350c:	5f 3f       	cpi	r21, 0xFF	; 255
    350e:	ec f3       	brlt	.-6      	; 0x350a <__divsf3_pse+0x6a>
    3510:	98 3e       	cpi	r25, 0xE8	; 232
    3512:	dc f3       	brlt	.-10     	; 0x350a <__divsf3_pse+0x6a>
    3514:	86 95       	lsr	r24
    3516:	77 95       	ror	r23
    3518:	67 95       	ror	r22
    351a:	b7 95       	ror	r27
    351c:	f7 95       	ror	r31
    351e:	9f 5f       	subi	r25, 0xFF	; 255
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__divsf3_pse+0x74>
    3522:	88 0f       	add	r24, r24
    3524:	91 1d       	adc	r25, r1
    3526:	96 95       	lsr	r25
    3528:	87 95       	ror	r24
    352a:	97 f9       	bld	r25, 7
    352c:	08 95       	ret
    352e:	e1 e0       	ldi	r30, 0x01	; 1
    3530:	66 0f       	add	r22, r22
    3532:	77 1f       	adc	r23, r23
    3534:	88 1f       	adc	r24, r24
    3536:	bb 1f       	adc	r27, r27
    3538:	62 17       	cp	r22, r18
    353a:	73 07       	cpc	r23, r19
    353c:	84 07       	cpc	r24, r20
    353e:	ba 07       	cpc	r27, r26
    3540:	20 f0       	brcs	.+8      	; 0x354a <__divsf3_pse+0xaa>
    3542:	62 1b       	sub	r22, r18
    3544:	73 0b       	sbc	r23, r19
    3546:	84 0b       	sbc	r24, r20
    3548:	ba 0b       	sbc	r27, r26
    354a:	ee 1f       	adc	r30, r30
    354c:	88 f7       	brcc	.-30     	; 0x3530 <__divsf3_pse+0x90>
    354e:	e0 95       	com	r30
    3550:	08 95       	ret

00003552 <__fixsfsi>:
    3552:	04 d0       	rcall	.+8      	; 0x355c <__fixunssfsi>
    3554:	68 94       	set
    3556:	b1 11       	cpse	r27, r1
    3558:	d9 c0       	rjmp	.+434    	; 0x370c <__fp_szero>
    355a:	08 95       	ret

0000355c <__fixunssfsi>:
    355c:	bc d0       	rcall	.+376    	; 0x36d6 <__fp_splitA>
    355e:	88 f0       	brcs	.+34     	; 0x3582 <__fixunssfsi+0x26>
    3560:	9f 57       	subi	r25, 0x7F	; 127
    3562:	90 f0       	brcs	.+36     	; 0x3588 <__fixunssfsi+0x2c>
    3564:	b9 2f       	mov	r27, r25
    3566:	99 27       	eor	r25, r25
    3568:	b7 51       	subi	r27, 0x17	; 23
    356a:	a0 f0       	brcs	.+40     	; 0x3594 <__fixunssfsi+0x38>
    356c:	d1 f0       	breq	.+52     	; 0x35a2 <__fixunssfsi+0x46>
    356e:	66 0f       	add	r22, r22
    3570:	77 1f       	adc	r23, r23
    3572:	88 1f       	adc	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	1a f0       	brmi	.+6      	; 0x357e <__fixunssfsi+0x22>
    3578:	ba 95       	dec	r27
    357a:	c9 f7       	brne	.-14     	; 0x356e <__fixunssfsi+0x12>
    357c:	12 c0       	rjmp	.+36     	; 0x35a2 <__fixunssfsi+0x46>
    357e:	b1 30       	cpi	r27, 0x01	; 1
    3580:	81 f0       	breq	.+32     	; 0x35a2 <__fixunssfsi+0x46>
    3582:	c3 d0       	rcall	.+390    	; 0x370a <__fp_zero>
    3584:	b1 e0       	ldi	r27, 0x01	; 1
    3586:	08 95       	ret
    3588:	c0 c0       	rjmp	.+384    	; 0x370a <__fp_zero>
    358a:	67 2f       	mov	r22, r23
    358c:	78 2f       	mov	r23, r24
    358e:	88 27       	eor	r24, r24
    3590:	b8 5f       	subi	r27, 0xF8	; 248
    3592:	39 f0       	breq	.+14     	; 0x35a2 <__fixunssfsi+0x46>
    3594:	b9 3f       	cpi	r27, 0xF9	; 249
    3596:	cc f3       	brlt	.-14     	; 0x358a <__fixunssfsi+0x2e>
    3598:	86 95       	lsr	r24
    359a:	77 95       	ror	r23
    359c:	67 95       	ror	r22
    359e:	b3 95       	inc	r27
    35a0:	d9 f7       	brne	.-10     	; 0x3598 <__fixunssfsi+0x3c>
    35a2:	3e f4       	brtc	.+14     	; 0x35b2 <__fixunssfsi+0x56>
    35a4:	90 95       	com	r25
    35a6:	80 95       	com	r24
    35a8:	70 95       	com	r23
    35aa:	61 95       	neg	r22
    35ac:	7f 4f       	sbci	r23, 0xFF	; 255
    35ae:	8f 4f       	sbci	r24, 0xFF	; 255
    35b0:	9f 4f       	sbci	r25, 0xFF	; 255
    35b2:	08 95       	ret

000035b4 <__floatunsisf>:
    35b4:	e8 94       	clt
    35b6:	09 c0       	rjmp	.+18     	; 0x35ca <__floatsisf+0x12>

000035b8 <__floatsisf>:
    35b8:	97 fb       	bst	r25, 7
    35ba:	3e f4       	brtc	.+14     	; 0x35ca <__floatsisf+0x12>
    35bc:	90 95       	com	r25
    35be:	80 95       	com	r24
    35c0:	70 95       	com	r23
    35c2:	61 95       	neg	r22
    35c4:	7f 4f       	sbci	r23, 0xFF	; 255
    35c6:	8f 4f       	sbci	r24, 0xFF	; 255
    35c8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ca:	99 23       	and	r25, r25
    35cc:	a9 f0       	breq	.+42     	; 0x35f8 <__floatsisf+0x40>
    35ce:	f9 2f       	mov	r31, r25
    35d0:	96 e9       	ldi	r25, 0x96	; 150
    35d2:	bb 27       	eor	r27, r27
    35d4:	93 95       	inc	r25
    35d6:	f6 95       	lsr	r31
    35d8:	87 95       	ror	r24
    35da:	77 95       	ror	r23
    35dc:	67 95       	ror	r22
    35de:	b7 95       	ror	r27
    35e0:	f1 11       	cpse	r31, r1
    35e2:	f8 cf       	rjmp	.-16     	; 0x35d4 <__floatsisf+0x1c>
    35e4:	fa f4       	brpl	.+62     	; 0x3624 <__floatsisf+0x6c>
    35e6:	bb 0f       	add	r27, r27
    35e8:	11 f4       	brne	.+4      	; 0x35ee <__floatsisf+0x36>
    35ea:	60 ff       	sbrs	r22, 0
    35ec:	1b c0       	rjmp	.+54     	; 0x3624 <__floatsisf+0x6c>
    35ee:	6f 5f       	subi	r22, 0xFF	; 255
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	8f 4f       	sbci	r24, 0xFF	; 255
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	16 c0       	rjmp	.+44     	; 0x3624 <__floatsisf+0x6c>
    35f8:	88 23       	and	r24, r24
    35fa:	11 f0       	breq	.+4      	; 0x3600 <__floatsisf+0x48>
    35fc:	96 e9       	ldi	r25, 0x96	; 150
    35fe:	11 c0       	rjmp	.+34     	; 0x3622 <__floatsisf+0x6a>
    3600:	77 23       	and	r23, r23
    3602:	21 f0       	breq	.+8      	; 0x360c <__floatsisf+0x54>
    3604:	9e e8       	ldi	r25, 0x8E	; 142
    3606:	87 2f       	mov	r24, r23
    3608:	76 2f       	mov	r23, r22
    360a:	05 c0       	rjmp	.+10     	; 0x3616 <__floatsisf+0x5e>
    360c:	66 23       	and	r22, r22
    360e:	71 f0       	breq	.+28     	; 0x362c <__floatsisf+0x74>
    3610:	96 e8       	ldi	r25, 0x86	; 134
    3612:	86 2f       	mov	r24, r22
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	2a f0       	brmi	.+10     	; 0x3624 <__floatsisf+0x6c>
    361a:	9a 95       	dec	r25
    361c:	66 0f       	add	r22, r22
    361e:	77 1f       	adc	r23, r23
    3620:	88 1f       	adc	r24, r24
    3622:	da f7       	brpl	.-10     	; 0x361a <__floatsisf+0x62>
    3624:	88 0f       	add	r24, r24
    3626:	96 95       	lsr	r25
    3628:	87 95       	ror	r24
    362a:	97 f9       	bld	r25, 7
    362c:	08 95       	ret

0000362e <__fp_cmp>:
    362e:	99 0f       	add	r25, r25
    3630:	00 08       	sbc	r0, r0
    3632:	55 0f       	add	r21, r21
    3634:	aa 0b       	sbc	r26, r26
    3636:	e0 e8       	ldi	r30, 0x80	; 128
    3638:	fe ef       	ldi	r31, 0xFE	; 254
    363a:	16 16       	cp	r1, r22
    363c:	17 06       	cpc	r1, r23
    363e:	e8 07       	cpc	r30, r24
    3640:	f9 07       	cpc	r31, r25
    3642:	c0 f0       	brcs	.+48     	; 0x3674 <__fp_cmp+0x46>
    3644:	12 16       	cp	r1, r18
    3646:	13 06       	cpc	r1, r19
    3648:	e4 07       	cpc	r30, r20
    364a:	f5 07       	cpc	r31, r21
    364c:	98 f0       	brcs	.+38     	; 0x3674 <__fp_cmp+0x46>
    364e:	62 1b       	sub	r22, r18
    3650:	73 0b       	sbc	r23, r19
    3652:	84 0b       	sbc	r24, r20
    3654:	95 0b       	sbc	r25, r21
    3656:	39 f4       	brne	.+14     	; 0x3666 <__fp_cmp+0x38>
    3658:	0a 26       	eor	r0, r26
    365a:	61 f0       	breq	.+24     	; 0x3674 <__fp_cmp+0x46>
    365c:	23 2b       	or	r18, r19
    365e:	24 2b       	or	r18, r20
    3660:	25 2b       	or	r18, r21
    3662:	21 f4       	brne	.+8      	; 0x366c <__fp_cmp+0x3e>
    3664:	08 95       	ret
    3666:	0a 26       	eor	r0, r26
    3668:	09 f4       	brne	.+2      	; 0x366c <__fp_cmp+0x3e>
    366a:	a1 40       	sbci	r26, 0x01	; 1
    366c:	a6 95       	lsr	r26
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	81 1d       	adc	r24, r1
    3672:	81 1d       	adc	r24, r1
    3674:	08 95       	ret

00003676 <__fp_inf>:
    3676:	97 f9       	bld	r25, 7
    3678:	9f 67       	ori	r25, 0x7F	; 127
    367a:	80 e8       	ldi	r24, 0x80	; 128
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	08 95       	ret

00003682 <__fp_nan>:
    3682:	9f ef       	ldi	r25, 0xFF	; 255
    3684:	80 ec       	ldi	r24, 0xC0	; 192
    3686:	08 95       	ret

00003688 <__fp_pscA>:
    3688:	00 24       	eor	r0, r0
    368a:	0a 94       	dec	r0
    368c:	16 16       	cp	r1, r22
    368e:	17 06       	cpc	r1, r23
    3690:	18 06       	cpc	r1, r24
    3692:	09 06       	cpc	r0, r25
    3694:	08 95       	ret

00003696 <__fp_pscB>:
    3696:	00 24       	eor	r0, r0
    3698:	0a 94       	dec	r0
    369a:	12 16       	cp	r1, r18
    369c:	13 06       	cpc	r1, r19
    369e:	14 06       	cpc	r1, r20
    36a0:	05 06       	cpc	r0, r21
    36a2:	08 95       	ret

000036a4 <__fp_round>:
    36a4:	09 2e       	mov	r0, r25
    36a6:	03 94       	inc	r0
    36a8:	00 0c       	add	r0, r0
    36aa:	11 f4       	brne	.+4      	; 0x36b0 <__fp_round+0xc>
    36ac:	88 23       	and	r24, r24
    36ae:	52 f0       	brmi	.+20     	; 0x36c4 <__fp_round+0x20>
    36b0:	bb 0f       	add	r27, r27
    36b2:	40 f4       	brcc	.+16     	; 0x36c4 <__fp_round+0x20>
    36b4:	bf 2b       	or	r27, r31
    36b6:	11 f4       	brne	.+4      	; 0x36bc <__fp_round+0x18>
    36b8:	60 ff       	sbrs	r22, 0
    36ba:	04 c0       	rjmp	.+8      	; 0x36c4 <__fp_round+0x20>
    36bc:	6f 5f       	subi	r22, 0xFF	; 255
    36be:	7f 4f       	sbci	r23, 0xFF	; 255
    36c0:	8f 4f       	sbci	r24, 0xFF	; 255
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	08 95       	ret

000036c6 <__fp_split3>:
    36c6:	57 fd       	sbrc	r21, 7
    36c8:	90 58       	subi	r25, 0x80	; 128
    36ca:	44 0f       	add	r20, r20
    36cc:	55 1f       	adc	r21, r21
    36ce:	59 f0       	breq	.+22     	; 0x36e6 <__fp_splitA+0x10>
    36d0:	5f 3f       	cpi	r21, 0xFF	; 255
    36d2:	71 f0       	breq	.+28     	; 0x36f0 <__fp_splitA+0x1a>
    36d4:	47 95       	ror	r20

000036d6 <__fp_splitA>:
    36d6:	88 0f       	add	r24, r24
    36d8:	97 fb       	bst	r25, 7
    36da:	99 1f       	adc	r25, r25
    36dc:	61 f0       	breq	.+24     	; 0x36f6 <__fp_splitA+0x20>
    36de:	9f 3f       	cpi	r25, 0xFF	; 255
    36e0:	79 f0       	breq	.+30     	; 0x3700 <__fp_splitA+0x2a>
    36e2:	87 95       	ror	r24
    36e4:	08 95       	ret
    36e6:	12 16       	cp	r1, r18
    36e8:	13 06       	cpc	r1, r19
    36ea:	14 06       	cpc	r1, r20
    36ec:	55 1f       	adc	r21, r21
    36ee:	f2 cf       	rjmp	.-28     	; 0x36d4 <__fp_split3+0xe>
    36f0:	46 95       	lsr	r20
    36f2:	f1 df       	rcall	.-30     	; 0x36d6 <__fp_splitA>
    36f4:	08 c0       	rjmp	.+16     	; 0x3706 <__fp_splitA+0x30>
    36f6:	16 16       	cp	r1, r22
    36f8:	17 06       	cpc	r1, r23
    36fa:	18 06       	cpc	r1, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	f1 cf       	rjmp	.-30     	; 0x36e2 <__fp_splitA+0xc>
    3700:	86 95       	lsr	r24
    3702:	71 05       	cpc	r23, r1
    3704:	61 05       	cpc	r22, r1
    3706:	08 94       	sec
    3708:	08 95       	ret

0000370a <__fp_zero>:
    370a:	e8 94       	clt

0000370c <__fp_szero>:
    370c:	bb 27       	eor	r27, r27
    370e:	66 27       	eor	r22, r22
    3710:	77 27       	eor	r23, r23
    3712:	cb 01       	movw	r24, r22
    3714:	97 f9       	bld	r25, 7
    3716:	08 95       	ret

00003718 <__gesf2>:
    3718:	8a df       	rcall	.-236    	; 0x362e <__fp_cmp>
    371a:	08 f4       	brcc	.+2      	; 0x371e <__gesf2+0x6>
    371c:	8f ef       	ldi	r24, 0xFF	; 255
    371e:	08 95       	ret

00003720 <__mulsf3>:
    3720:	0b d0       	rcall	.+22     	; 0x3738 <__mulsf3x>
    3722:	c0 cf       	rjmp	.-128    	; 0x36a4 <__fp_round>
    3724:	b1 df       	rcall	.-158    	; 0x3688 <__fp_pscA>
    3726:	28 f0       	brcs	.+10     	; 0x3732 <__mulsf3+0x12>
    3728:	b6 df       	rcall	.-148    	; 0x3696 <__fp_pscB>
    372a:	18 f0       	brcs	.+6      	; 0x3732 <__mulsf3+0x12>
    372c:	95 23       	and	r25, r21
    372e:	09 f0       	breq	.+2      	; 0x3732 <__mulsf3+0x12>
    3730:	a2 cf       	rjmp	.-188    	; 0x3676 <__fp_inf>
    3732:	a7 cf       	rjmp	.-178    	; 0x3682 <__fp_nan>
    3734:	11 24       	eor	r1, r1
    3736:	ea cf       	rjmp	.-44     	; 0x370c <__fp_szero>

00003738 <__mulsf3x>:
    3738:	c6 df       	rcall	.-116    	; 0x36c6 <__fp_split3>
    373a:	a0 f3       	brcs	.-24     	; 0x3724 <__mulsf3+0x4>

0000373c <__mulsf3_pse>:
    373c:	95 9f       	mul	r25, r21
    373e:	d1 f3       	breq	.-12     	; 0x3734 <__mulsf3+0x14>
    3740:	95 0f       	add	r25, r21
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	55 1f       	adc	r21, r21
    3746:	62 9f       	mul	r22, r18
    3748:	f0 01       	movw	r30, r0
    374a:	72 9f       	mul	r23, r18
    374c:	bb 27       	eor	r27, r27
    374e:	f0 0d       	add	r31, r0
    3750:	b1 1d       	adc	r27, r1
    3752:	63 9f       	mul	r22, r19
    3754:	aa 27       	eor	r26, r26
    3756:	f0 0d       	add	r31, r0
    3758:	b1 1d       	adc	r27, r1
    375a:	aa 1f       	adc	r26, r26
    375c:	64 9f       	mul	r22, r20
    375e:	66 27       	eor	r22, r22
    3760:	b0 0d       	add	r27, r0
    3762:	a1 1d       	adc	r26, r1
    3764:	66 1f       	adc	r22, r22
    3766:	82 9f       	mul	r24, r18
    3768:	22 27       	eor	r18, r18
    376a:	b0 0d       	add	r27, r0
    376c:	a1 1d       	adc	r26, r1
    376e:	62 1f       	adc	r22, r18
    3770:	73 9f       	mul	r23, r19
    3772:	b0 0d       	add	r27, r0
    3774:	a1 1d       	adc	r26, r1
    3776:	62 1f       	adc	r22, r18
    3778:	83 9f       	mul	r24, r19
    377a:	a0 0d       	add	r26, r0
    377c:	61 1d       	adc	r22, r1
    377e:	22 1f       	adc	r18, r18
    3780:	74 9f       	mul	r23, r20
    3782:	33 27       	eor	r19, r19
    3784:	a0 0d       	add	r26, r0
    3786:	61 1d       	adc	r22, r1
    3788:	23 1f       	adc	r18, r19
    378a:	84 9f       	mul	r24, r20
    378c:	60 0d       	add	r22, r0
    378e:	21 1d       	adc	r18, r1
    3790:	82 2f       	mov	r24, r18
    3792:	76 2f       	mov	r23, r22
    3794:	6a 2f       	mov	r22, r26
    3796:	11 24       	eor	r1, r1
    3798:	9f 57       	subi	r25, 0x7F	; 127
    379a:	50 40       	sbci	r21, 0x00	; 0
    379c:	8a f0       	brmi	.+34     	; 0x37c0 <__mulsf3_pse+0x84>
    379e:	e1 f0       	breq	.+56     	; 0x37d8 <__mulsf3_pse+0x9c>
    37a0:	88 23       	and	r24, r24
    37a2:	4a f0       	brmi	.+18     	; 0x37b6 <__mulsf3_pse+0x7a>
    37a4:	ee 0f       	add	r30, r30
    37a6:	ff 1f       	adc	r31, r31
    37a8:	bb 1f       	adc	r27, r27
    37aa:	66 1f       	adc	r22, r22
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 1f       	adc	r24, r24
    37b0:	91 50       	subi	r25, 0x01	; 1
    37b2:	50 40       	sbci	r21, 0x00	; 0
    37b4:	a9 f7       	brne	.-22     	; 0x37a0 <__mulsf3_pse+0x64>
    37b6:	9e 3f       	cpi	r25, 0xFE	; 254
    37b8:	51 05       	cpc	r21, r1
    37ba:	70 f0       	brcs	.+28     	; 0x37d8 <__mulsf3_pse+0x9c>
    37bc:	5c cf       	rjmp	.-328    	; 0x3676 <__fp_inf>
    37be:	a6 cf       	rjmp	.-180    	; 0x370c <__fp_szero>
    37c0:	5f 3f       	cpi	r21, 0xFF	; 255
    37c2:	ec f3       	brlt	.-6      	; 0x37be <__mulsf3_pse+0x82>
    37c4:	98 3e       	cpi	r25, 0xE8	; 232
    37c6:	dc f3       	brlt	.-10     	; 0x37be <__mulsf3_pse+0x82>
    37c8:	86 95       	lsr	r24
    37ca:	77 95       	ror	r23
    37cc:	67 95       	ror	r22
    37ce:	b7 95       	ror	r27
    37d0:	f7 95       	ror	r31
    37d2:	e7 95       	ror	r30
    37d4:	9f 5f       	subi	r25, 0xFF	; 255
    37d6:	c1 f7       	brne	.-16     	; 0x37c8 <__mulsf3_pse+0x8c>
    37d8:	fe 2b       	or	r31, r30
    37da:	88 0f       	add	r24, r24
    37dc:	91 1d       	adc	r25, r1
    37de:	96 95       	lsr	r25
    37e0:	87 95       	ror	r24
    37e2:	97 f9       	bld	r25, 7
    37e4:	08 95       	ret

000037e6 <calloc>:
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	68 9f       	mul	r22, r24
    37f0:	80 01       	movw	r16, r0
    37f2:	69 9f       	mul	r22, r25
    37f4:	10 0d       	add	r17, r0
    37f6:	78 9f       	mul	r23, r24
    37f8:	10 0d       	add	r17, r0
    37fa:	11 24       	eor	r1, r1
    37fc:	c8 01       	movw	r24, r16
    37fe:	0d d0       	rcall	.+26     	; 0x381a <malloc>
    3800:	ec 01       	movw	r28, r24
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	21 f0       	breq	.+8      	; 0x380e <calloc+0x28>
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	a8 01       	movw	r20, r16
    380c:	0b d1       	rcall	.+534    	; 0x3a24 <memset>
    380e:	ce 01       	movw	r24, r28
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <malloc>:
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	bc 01       	movw	r22, r24
    3820:	82 30       	cpi	r24, 0x02	; 2
    3822:	91 05       	cpc	r25, r1
    3824:	10 f4       	brcc	.+4      	; 0x382a <malloc+0x10>
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	a0 91 0c 05 	lds	r26, 0x050C
    382e:	b0 91 0d 05 	lds	r27, 0x050D
    3832:	ed 01       	movw	r28, r26
    3834:	e0 e0       	ldi	r30, 0x00	; 0
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	21 c0       	rjmp	.+66     	; 0x3880 <malloc+0x66>
    383e:	88 81       	ld	r24, Y
    3840:	99 81       	ldd	r25, Y+1	; 0x01
    3842:	86 17       	cp	r24, r22
    3844:	97 07       	cpc	r25, r23
    3846:	69 f4       	brne	.+26     	; 0x3862 <malloc+0x48>
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	30 97       	sbiw	r30, 0x00	; 0
    384e:	19 f0       	breq	.+6      	; 0x3856 <malloc+0x3c>
    3850:	93 83       	std	Z+3, r25	; 0x03
    3852:	82 83       	std	Z+2, r24	; 0x02
    3854:	04 c0       	rjmp	.+8      	; 0x385e <malloc+0x44>
    3856:	90 93 0d 05 	sts	0x050D, r25
    385a:	80 93 0c 05 	sts	0x050C, r24
    385e:	fe 01       	movw	r30, r28
    3860:	34 c0       	rjmp	.+104    	; 0x38ca <malloc+0xb0>
    3862:	68 17       	cp	r22, r24
    3864:	79 07       	cpc	r23, r25
    3866:	38 f4       	brcc	.+14     	; 0x3876 <malloc+0x5c>
    3868:	41 15       	cp	r20, r1
    386a:	51 05       	cpc	r21, r1
    386c:	19 f0       	breq	.+6      	; 0x3874 <malloc+0x5a>
    386e:	84 17       	cp	r24, r20
    3870:	95 07       	cpc	r25, r21
    3872:	08 f4       	brcc	.+2      	; 0x3876 <malloc+0x5c>
    3874:	ac 01       	movw	r20, r24
    3876:	fe 01       	movw	r30, r28
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	9b 81       	ldd	r25, Y+3	; 0x03
    387c:	9c 01       	movw	r18, r24
    387e:	e9 01       	movw	r28, r18
    3880:	20 97       	sbiw	r28, 0x00	; 0
    3882:	e9 f6       	brne	.-70     	; 0x383e <malloc+0x24>
    3884:	41 15       	cp	r20, r1
    3886:	51 05       	cpc	r21, r1
    3888:	a9 f1       	breq	.+106    	; 0x38f4 <malloc+0xda>
    388a:	ca 01       	movw	r24, r20
    388c:	86 1b       	sub	r24, r22
    388e:	97 0b       	sbc	r25, r23
    3890:	04 97       	sbiw	r24, 0x04	; 4
    3892:	08 f4       	brcc	.+2      	; 0x3896 <malloc+0x7c>
    3894:	ba 01       	movw	r22, r20
    3896:	e0 e0       	ldi	r30, 0x00	; 0
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	2a c0       	rjmp	.+84     	; 0x38f0 <malloc+0xd6>
    389c:	8d 91       	ld	r24, X+
    389e:	9c 91       	ld	r25, X
    38a0:	11 97       	sbiw	r26, 0x01	; 1
    38a2:	84 17       	cp	r24, r20
    38a4:	95 07       	cpc	r25, r21
    38a6:	f9 f4       	brne	.+62     	; 0x38e6 <malloc+0xcc>
    38a8:	64 17       	cp	r22, r20
    38aa:	75 07       	cpc	r23, r21
    38ac:	81 f4       	brne	.+32     	; 0x38ce <malloc+0xb4>
    38ae:	12 96       	adiw	r26, 0x02	; 2
    38b0:	8d 91       	ld	r24, X+
    38b2:	9c 91       	ld	r25, X
    38b4:	13 97       	sbiw	r26, 0x03	; 3
    38b6:	30 97       	sbiw	r30, 0x00	; 0
    38b8:	19 f0       	breq	.+6      	; 0x38c0 <malloc+0xa6>
    38ba:	93 83       	std	Z+3, r25	; 0x03
    38bc:	82 83       	std	Z+2, r24	; 0x02
    38be:	04 c0       	rjmp	.+8      	; 0x38c8 <malloc+0xae>
    38c0:	90 93 0d 05 	sts	0x050D, r25
    38c4:	80 93 0c 05 	sts	0x050C, r24
    38c8:	fd 01       	movw	r30, r26
    38ca:	32 96       	adiw	r30, 0x02	; 2
    38cc:	4f c0       	rjmp	.+158    	; 0x396c <malloc+0x152>
    38ce:	ca 01       	movw	r24, r20
    38d0:	86 1b       	sub	r24, r22
    38d2:	97 0b       	sbc	r25, r23
    38d4:	fd 01       	movw	r30, r26
    38d6:	e8 0f       	add	r30, r24
    38d8:	f9 1f       	adc	r31, r25
    38da:	61 93       	st	Z+, r22
    38dc:	71 93       	st	Z+, r23
    38de:	02 97       	sbiw	r24, 0x02	; 2
    38e0:	8d 93       	st	X+, r24
    38e2:	9c 93       	st	X, r25
    38e4:	43 c0       	rjmp	.+134    	; 0x396c <malloc+0x152>
    38e6:	fd 01       	movw	r30, r26
    38e8:	82 81       	ldd	r24, Z+2	; 0x02
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	9c 01       	movw	r18, r24
    38ee:	d9 01       	movw	r26, r18
    38f0:	10 97       	sbiw	r26, 0x00	; 0
    38f2:	a1 f6       	brne	.-88     	; 0x389c <malloc+0x82>
    38f4:	80 91 0a 05 	lds	r24, 0x050A
    38f8:	90 91 0b 05 	lds	r25, 0x050B
    38fc:	89 2b       	or	r24, r25
    38fe:	41 f4       	brne	.+16     	; 0x3910 <malloc+0xf6>
    3900:	80 91 02 01 	lds	r24, 0x0102
    3904:	90 91 03 01 	lds	r25, 0x0103
    3908:	90 93 0b 05 	sts	0x050B, r25
    390c:	80 93 0a 05 	sts	0x050A, r24
    3910:	40 91 04 01 	lds	r20, 0x0104
    3914:	50 91 05 01 	lds	r21, 0x0105
    3918:	41 15       	cp	r20, r1
    391a:	51 05       	cpc	r21, r1
    391c:	41 f4       	brne	.+16     	; 0x392e <malloc+0x114>
    391e:	4d b7       	in	r20, 0x3d	; 61
    3920:	5e b7       	in	r21, 0x3e	; 62
    3922:	80 91 00 01 	lds	r24, 0x0100
    3926:	90 91 01 01 	lds	r25, 0x0101
    392a:	48 1b       	sub	r20, r24
    392c:	59 0b       	sbc	r21, r25
    392e:	20 91 0a 05 	lds	r18, 0x050A
    3932:	30 91 0b 05 	lds	r19, 0x050B
    3936:	24 17       	cp	r18, r20
    3938:	35 07       	cpc	r19, r21
    393a:	b0 f4       	brcc	.+44     	; 0x3968 <malloc+0x14e>
    393c:	ca 01       	movw	r24, r20
    393e:	82 1b       	sub	r24, r18
    3940:	93 0b       	sbc	r25, r19
    3942:	86 17       	cp	r24, r22
    3944:	97 07       	cpc	r25, r23
    3946:	80 f0       	brcs	.+32     	; 0x3968 <malloc+0x14e>
    3948:	ab 01       	movw	r20, r22
    394a:	4e 5f       	subi	r20, 0xFE	; 254
    394c:	5f 4f       	sbci	r21, 0xFF	; 255
    394e:	84 17       	cp	r24, r20
    3950:	95 07       	cpc	r25, r21
    3952:	50 f0       	brcs	.+20     	; 0x3968 <malloc+0x14e>
    3954:	42 0f       	add	r20, r18
    3956:	53 1f       	adc	r21, r19
    3958:	50 93 0b 05 	sts	0x050B, r21
    395c:	40 93 0a 05 	sts	0x050A, r20
    3960:	f9 01       	movw	r30, r18
    3962:	61 93       	st	Z+, r22
    3964:	71 93       	st	Z+, r23
    3966:	02 c0       	rjmp	.+4      	; 0x396c <malloc+0x152>
    3968:	e0 e0       	ldi	r30, 0x00	; 0
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	cf 01       	movw	r24, r30
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	08 95       	ret

00003974 <free>:
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	09 f4       	brne	.+2      	; 0x397e <free+0xa>
    397c:	50 c0       	rjmp	.+160    	; 0x3a1e <free+0xaa>
    397e:	ec 01       	movw	r28, r24
    3980:	22 97       	sbiw	r28, 0x02	; 2
    3982:	1b 82       	std	Y+3, r1	; 0x03
    3984:	1a 82       	std	Y+2, r1	; 0x02
    3986:	a0 91 0c 05 	lds	r26, 0x050C
    398a:	b0 91 0d 05 	lds	r27, 0x050D
    398e:	10 97       	sbiw	r26, 0x00	; 0
    3990:	09 f1       	breq	.+66     	; 0x39d4 <free+0x60>
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	ac 17       	cp	r26, r28
    3998:	bd 07       	cpc	r27, r29
    399a:	08 f1       	brcs	.+66     	; 0x39de <free+0x6a>
    399c:	bb 83       	std	Y+3, r27	; 0x03
    399e:	aa 83       	std	Y+2, r26	; 0x02
    39a0:	fe 01       	movw	r30, r28
    39a2:	21 91       	ld	r18, Z+
    39a4:	31 91       	ld	r19, Z+
    39a6:	e2 0f       	add	r30, r18
    39a8:	f3 1f       	adc	r31, r19
    39aa:	ae 17       	cp	r26, r30
    39ac:	bf 07       	cpc	r27, r31
    39ae:	79 f4       	brne	.+30     	; 0x39ce <free+0x5a>
    39b0:	8d 91       	ld	r24, X+
    39b2:	9c 91       	ld	r25, X
    39b4:	11 97       	sbiw	r26, 0x01	; 1
    39b6:	28 0f       	add	r18, r24
    39b8:	39 1f       	adc	r19, r25
    39ba:	2e 5f       	subi	r18, 0xFE	; 254
    39bc:	3f 4f       	sbci	r19, 0xFF	; 255
    39be:	39 83       	std	Y+1, r19	; 0x01
    39c0:	28 83       	st	Y, r18
    39c2:	12 96       	adiw	r26, 0x02	; 2
    39c4:	8d 91       	ld	r24, X+
    39c6:	9c 91       	ld	r25, X
    39c8:	13 97       	sbiw	r26, 0x03	; 3
    39ca:	9b 83       	std	Y+3, r25	; 0x03
    39cc:	8a 83       	std	Y+2, r24	; 0x02
    39ce:	41 15       	cp	r20, r1
    39d0:	51 05       	cpc	r21, r1
    39d2:	71 f4       	brne	.+28     	; 0x39f0 <free+0x7c>
    39d4:	d0 93 0d 05 	sts	0x050D, r29
    39d8:	c0 93 0c 05 	sts	0x050C, r28
    39dc:	20 c0       	rjmp	.+64     	; 0x3a1e <free+0xaa>
    39de:	12 96       	adiw	r26, 0x02	; 2
    39e0:	8d 91       	ld	r24, X+
    39e2:	9c 91       	ld	r25, X
    39e4:	13 97       	sbiw	r26, 0x03	; 3
    39e6:	ad 01       	movw	r20, r26
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	11 f0       	breq	.+4      	; 0x39f0 <free+0x7c>
    39ec:	dc 01       	movw	r26, r24
    39ee:	d3 cf       	rjmp	.-90     	; 0x3996 <free+0x22>
    39f0:	fa 01       	movw	r30, r20
    39f2:	d3 83       	std	Z+3, r29	; 0x03
    39f4:	c2 83       	std	Z+2, r28	; 0x02
    39f6:	21 91       	ld	r18, Z+
    39f8:	31 91       	ld	r19, Z+
    39fa:	e2 0f       	add	r30, r18
    39fc:	f3 1f       	adc	r31, r19
    39fe:	ce 17       	cp	r28, r30
    3a00:	df 07       	cpc	r29, r31
    3a02:	69 f4       	brne	.+26     	; 0x3a1e <free+0xaa>
    3a04:	88 81       	ld	r24, Y
    3a06:	99 81       	ldd	r25, Y+1	; 0x01
    3a08:	28 0f       	add	r18, r24
    3a0a:	39 1f       	adc	r19, r25
    3a0c:	2e 5f       	subi	r18, 0xFE	; 254
    3a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a10:	fa 01       	movw	r30, r20
    3a12:	31 83       	std	Z+1, r19	; 0x01
    3a14:	20 83       	st	Z, r18
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1a:	93 83       	std	Z+3, r25	; 0x03
    3a1c:	82 83       	std	Z+2, r24	; 0x02
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	08 95       	ret

00003a24 <memset>:
    3a24:	dc 01       	movw	r26, r24
    3a26:	01 c0       	rjmp	.+2      	; 0x3a2a <memset+0x6>
    3a28:	6d 93       	st	X+, r22
    3a2a:	41 50       	subi	r20, 0x01	; 1
    3a2c:	50 40       	sbci	r21, 0x00	; 0
    3a2e:	e0 f7       	brcc	.-8      	; 0x3a28 <memset+0x4>
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>
