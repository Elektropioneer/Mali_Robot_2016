
malo_govno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00003b9e  00003c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  00800174  00800174  00003ca6  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  00003ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000833  00000000  00000000  00003ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000242b  00000000  00000000  00004831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7f  00000000  00000000  00006c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002811  00000000  00000000  000076db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  00009eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a02  00000000  00000000  0000a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000310  00000000  00000000  0000ae7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}


unsigned char CAN_CheckRX(unsigned char nodeID)
{
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>

    return 0;
}

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
       2:	00 00       	nop
	
	return ODOMETRY_SUCCESS;
}

void stop(int8_t type)
{
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
	{
		stop(HARD_STOP);
		return 1;
	}
	return 0;
}
       6:	00 00       	nop
uint32_t system_get_system_time(void)
{
	return sys_time;
}
uint8_t system_get_match_started(void)
{
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);

	UBRR0H = temp >> 8;
	UBRR0L = temp;
}
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__vector_12>
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3d c5       	rjmp	.+2682   	; 0xac4 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__vector_21>
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__vector_23>
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__vector_32>
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__vector_34>
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e9       	ldi	r30, 0x9E	; 158
      a8:	fb e3       	ldi	r31, 0x3B	; 59
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 37       	cpi	r26, 0x74	; 116
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a4 e7       	ldi	r26, 0x74	; 116
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 3b       	cpi	r26, 0xBC	; 188
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	03 d0       	rcall	.+6      	; 0xd2 <main>
      cc:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <main>:
#include "odometry.h"
#include "sides.h"
#include "actuators.h"

int main()
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	


	system_init();
      e6:	0e 94 50 18 	call	0x30a0	; 0x30a0 <system_init>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	a8 ec       	ldi	r26, 0xC8	; 200
      f0:	b2 e4       	ldi	r27, 0x42	; 66
      f2:	8b 87       	std	Y+11, r24	; 0x0b
      f4:	9c 87       	std	Y+12, r25	; 0x0c
      f6:	ad 87       	std	Y+13, r26	; 0x0d
      f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      fa:	6b 85       	ldd	r22, Y+11	; 0x0b
      fc:	7c 85       	ldd	r23, Y+12	; 0x0c
      fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     100:	9e 85       	ldd	r25, Y+14	; 0x0e
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e4       	ldi	r19, 0x40	; 64
     106:	4c e1       	ldi	r20, 0x1C	; 28
     108:	55 e4       	ldi	r21, 0x45	; 69
     10a:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8f 83       	std	Y+7, r24	; 0x07
     114:	98 87       	std	Y+8, r25	; 0x08
     116:	a9 87       	std	Y+9, r26	; 0x09
     118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     11a:	6f 81       	ldd	r22, Y+7	; 0x07
     11c:	78 85       	ldd	r23, Y+8	; 0x08
     11e:	89 85       	ldd	r24, Y+9	; 0x09
     120:	9a 85       	ldd	r25, Y+10	; 0x0a
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e8       	ldi	r20, 0x80	; 128
     128:	5f e3       	ldi	r21, 0x3F	; 63
     12a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x6a>
		__ticks = 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	3f c0       	rjmp	.+126    	; 0x1ba <main+0xe8>
	else if (__tmp > 65535)
     13c:	6f 81       	ldd	r22, Y+7	; 0x07
     13e:	78 85       	ldd	r23, Y+8	; 0x08
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
     150:	18 16       	cp	r1, r24
     152:	4c f5       	brge	.+82     	; 0x1a6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	6b 85       	ldd	r22, Y+11	; 0x0b
     156:	7c 85       	ldd	r23, Y+12	; 0x0c
     158:	8d 85       	ldd	r24, Y+13	; 0x0d
     15a:	9e 85       	ldd	r25, Y+14	; 0x0e
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e2       	ldi	r20, 0x20	; 32
     162:	51 e4       	ldi	r21, 0x41	; 65
     164:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	bc 01       	movw	r22, r24
     16e:	cd 01       	movw	r24, r26
     170:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	8d 83       	std	Y+5, r24	; 0x05
     17c:	0f c0       	rjmp	.+30     	; 0x19c <main+0xca>
     17e:	8a ef       	ldi	r24, 0xFA	; 250
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9c 83       	std	Y+4, r25	; 0x04
     184:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	8b 81       	ldd	r24, Y+3	; 0x03
     188:	9c 81       	ldd	r25, Y+4	; 0x04
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xb8>
     18e:	9c 83       	std	Y+4, r25	; 0x04
     190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	8d 81       	ldd	r24, Y+5	; 0x05
     19e:	9e 81       	ldd	r25, Y+6	; 0x06
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	69 f7       	brne	.-38     	; 0x17e <main+0xac>
     1a4:	14 c0       	rjmp	.+40     	; 0x1ce <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a6:	6f 81       	ldd	r22, Y+7	; 0x07
     1a8:	78 85       	ldd	r23, Y+8	; 0x08
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	9e 83       	std	Y+6, r25	; 0x06
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xf4>
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	89 83       	std	Y+1, r24	; 0x01

	
	int i,b;
	while(1)
	{
		purpleside();
     1ce:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <purpleside>
     1d2:	fd cf       	rjmp	.-6      	; 0x1ce <main+0xfc>

000001d4 <servo_init>:
#include "system.h"
#include "can.h"
#include "actuators.h"

void servo_init(unsigned int f_pwm)
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <servo_init+0xa>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     1e6:	ad e2       	ldi	r26, 0x2D	; 45
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	ed e2       	ldi	r30, 0x2D	; 45
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	88 63       	ori	r24, 0x38	; 56
     1f2:	8c 93       	st	X, r24
	DDRB |= (1 << PINB7);//OCR0A
     1f4:	a4 e2       	ldi	r26, 0x24	; 36
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e4 e2       	ldi	r30, 0x24	; 36
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	8c 93       	st	X, r24
	
	TCNT3 = 0;
     202:	e4 e9       	ldi	r30, 0x94	; 148
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	11 82       	std	Z+1, r1	; 0x01
     208:	10 82       	st	Z, r1
	TCNT0 = 0;
     20a:	e6 e4       	ldi	r30, 0x46	; 70
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	10 82       	st	Z, r1

	OCR3A = 0;
     210:	e8 e9       	ldi	r30, 0x98	; 152
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	11 82       	std	Z+1, r1	; 0x01
     216:	10 82       	st	Z, r1
	OCR3B = 0;
     218:	ea e9       	ldi	r30, 0x9A	; 154
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	11 82       	std	Z+1, r1	; 0x01
     21e:	10 82       	st	Z, r1
	OCR3C = 0;
     220:	ec e9       	ldi	r30, 0x9C	; 156
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	11 82       	std	Z+1, r1	; 0x01
     226:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     228:	e0 e9       	ldi	r30, 0x90	; 144
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	8e eb       	ldi	r24, 0xBE	; 190
     22e:	80 83       	st	Z, r24
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; // PRESKALER = 8
     230:	e1 e9       	ldi	r30, 0x91	; 145
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	8a e1       	ldi	r24, 0x1A	; 26
     236:	80 83       	st	Z, r24
	
	//8bit timer for pwm shit
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     238:	e4 e4       	ldi	r30, 0x44	; 68
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	8b e6       	ldi	r24, 0x6B	; 107
     23e:	80 83       	st	Z, r24

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     240:	06 e9       	ldi	r16, 0x96	; 150
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	9a 81       	ldd	r25, Y+2	; 0x02
     248:	cc 01       	movw	r24, r24
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	bc 01       	movw	r22, r24
     250:	cd 01       	movw	r24, r26
     252:	0e 94 8e 1b 	call	0x371c	; 0x371c <__floatunsisf>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	bc 01       	movw	r22, r24
     25c:	cd 01       	movw	r24, r26
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	51 e4       	ldi	r21, 0x41	; 65
     266:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	9c 01       	movw	r18, r24
     270:	ad 01       	movw	r20, r26
     272:	60 e8       	ldi	r22, 0x80	; 128
     274:	76 e9       	ldi	r23, 0x96	; 150
     276:	88 e1       	ldi	r24, 0x18	; 24
     278:	9b e4       	ldi	r25, 0x4B	; 75
     27a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	bc 01       	movw	r22, r24
     284:	cd 01       	movw	r24, r26
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	5f e3       	ldi	r21, 0x3F	; 63
     28e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
}
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	cf 91       	pop	r28
     2ae:	df 91       	pop	r29
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	08 95       	ret

000002b6 <servo_set_duty_cycle_umbrella>:

static void servo_set_duty_cycle_umbrella(int16_t value)
{
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <servo_set_duty_cycle_umbrella+0xe>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <servo_set_duty_cycle_umbrella+0x10>
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     2ce:	e6 e9       	ldi	r30, 0x96	; 150
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	cc 01       	movw	r24, r24
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 8e 1b 	call	0x371c	; 0x371c <__floatunsisf>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4f e7       	ldi	r20, 0x7F	; 127
     2f2:	53 e4       	ldi	r21, 0x43	; 67
     2f4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	aa 27       	eor	r26, r26
     306:	97 fd       	sbrc	r25, 7
     308:	a0 95       	com	r26
     30a:	ba 2f       	mov	r27, r26
     30c:	bc 01       	movw	r22, r24
     30e:	cd 01       	movw	r24, r26
     310:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	c8 01       	movw	r24, r16
     31a:	b7 01       	movw	r22, r14
     31c:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	5f e3       	ldi	r21, 0x3F	; 63
     330:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     348:	e9 e9       	ldi	r30, 0x99	; 153
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	89 2f       	mov	r24, r25
     352:	99 27       	eor	r25, r25
     354:	80 83       	st	Z, r24
	OCR3AL = temp & 0xFF;
     356:	e8 e9       	ldi	r30, 0x98	; 152
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	80 83       	st	Z, r24
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <servo_set_duty_cycle_door>:
static void servo_set_duty_cycle_door(int16_t value)
{
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	df 93       	push	r29
     37e:	cf 93       	push	r28
     380:	00 d0       	rcall	.+0      	; 0x382 <servo_set_duty_cycle_door+0xe>
     382:	00 d0       	rcall	.+0      	; 0x384 <servo_set_duty_cycle_door+0x10>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     38c:	e6 e9       	ldi	r30, 0x96	; 150
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	91 81       	ldd	r25, Z+1	; 0x01
     394:	cc 01       	movw	r24, r24
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__floatunsisf>
     3a2:	dc 01       	movw	r26, r24
     3a4:	cb 01       	movw	r24, r22
     3a6:	bc 01       	movw	r22, r24
     3a8:	cd 01       	movw	r24, r26
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4f e7       	ldi	r20, 0x7F	; 127
     3b0:	53 e4       	ldi	r21, 0x43	; 67
     3b2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	7c 01       	movw	r14, r24
     3bc:	8d 01       	movw	r16, r26
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	9c 81       	ldd	r25, Y+4	; 0x04
     3c2:	aa 27       	eor	r26, r26
     3c4:	97 fd       	sbrc	r25, 7
     3c6:	a0 95       	com	r26
     3c8:	ba 2f       	mov	r27, r26
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     3d2:	9b 01       	movw	r18, r22
     3d4:	ac 01       	movw	r20, r24
     3d6:	c8 01       	movw	r24, r16
     3d8:	b7 01       	movw	r22, r14
     3da:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	bc 01       	movw	r22, r24
     3f8:	cd 01       	movw	r24, r26
     3fa:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     406:	eb e9       	ldi	r30, 0x9B	; 155
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	89 2f       	mov	r24, r25
     410:	99 27       	eor	r25, r25
     412:	80 83       	st	Z, r24
	OCR3BL = temp & 0xFF;
     414:	ea e9       	ldi	r30, 0x9A	; 154
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	80 83       	st	Z, r24
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <servo_set_duty_cycle_left_grabber>:
static void servo_set_duty_cycle_left_grabber(int16_t value)
{
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	00 d0       	rcall	.+0      	; 0x440 <servo_set_duty_cycle_left_grabber+0xe>
     440:	00 d0       	rcall	.+0      	; 0x442 <servo_set_duty_cycle_left_grabber+0x10>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	9c 83       	std	Y+4, r25	; 0x04
     448:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     44a:	e6 e9       	ldi	r30, 0x96	; 150
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	cc 01       	movw	r24, r24
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	bc 01       	movw	r22, r24
     45a:	cd 01       	movw	r24, r26
     45c:	0e 94 8e 1b 	call	0x371c	; 0x371c <__floatunsisf>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	4f e7       	ldi	r20, 0x7F	; 127
     46e:	53 e4       	ldi	r21, 0x43	; 67
     470:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	7c 01       	movw	r14, r24
     47a:	8d 01       	movw	r16, r26
     47c:	8b 81       	ldd	r24, Y+3	; 0x03
     47e:	9c 81       	ldd	r25, Y+4	; 0x04
     480:	aa 27       	eor	r26, r26
     482:	97 fd       	sbrc	r25, 7
     484:	a0 95       	com	r26
     486:	ba 2f       	mov	r27, r26
     488:	bc 01       	movw	r22, r24
     48a:	cd 01       	movw	r24, r26
     48c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
     494:	c8 01       	movw	r24, r16
     496:	b7 01       	movw	r22, r14
     498:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	5f e3       	ldi	r21, 0x3F	; 63
     4ac:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	bc 01       	movw	r22, r24
     4b6:	cd 01       	movw	r24, r26
     4b8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	9a 83       	std	Y+2, r25	; 0x02
     4c2:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4c4:	ed e9       	ldi	r30, 0x9D	; 157
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	89 2f       	mov	r24, r25
     4ce:	99 27       	eor	r25, r25
     4d0:	80 83       	st	Z, r24
	OCR3CL = temp & 0xFF;
     4d2:	ec e9       	ldi	r30, 0x9C	; 156
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	80 83       	st	Z, r24
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <servo_set_umbrella_position>:
//////////////////////////////////////////////////////////////////////////

void servo_set_umbrella_position(int8_t angle)//90 je otvoreno -86 zatvoreno 
{
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	0f 92       	push	r0
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_umbrella( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	99 27       	eor	r25, r25
     500:	87 fd       	sbrc	r24, 7
     502:	90 95       	com	r25
     504:	a9 2f       	mov	r26, r25
     506:	b9 2f       	mov	r27, r25
     508:	bc 01       	movw	r22, r24
     50a:	cd 01       	movw	r24, r26
     50c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	bc 01       	movw	r22, r24
     516:	cd 01       	movw	r24, r26
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	44 eb       	ldi	r20, 0xB4	; 180
     51e:	52 e4       	ldi	r21, 0x42	; 66
     520:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	bc 01       	movw	r22, r24
     52a:	cd 01       	movw	r24, r26
     52c:	26 e6       	ldi	r18, 0x66	; 102
     52e:	36 e6       	ldi	r19, 0x66	; 102
     530:	46 e3       	ldi	r20, 0x36	; 54
     532:	51 ec       	ldi	r21, 0xC1	; 193
     534:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	4c e6       	ldi	r20, 0x6C	; 108
     546:	53 e4       	ldi	r21, 0x43	; 67
     548:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	9c 01       	movw	r18, r24
     552:	ad 01       	movw	r20, r26
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	8f e7       	ldi	r24, 0x7F	; 127
     55a:	93 e4       	ldi	r25, 0x43	; 67
     55c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__subsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fixsfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	a2 de       	rcall	.-700    	; 0x2b6 <servo_set_duty_cycle_umbrella>
}
     572:	0f 90       	pop	r0
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <servo_set_door_position>:
void servo_set_door_position(int8_t angle)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	0f 92       	push	r0
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_door( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	99 27       	eor	r25, r25
     58a:	87 fd       	sbrc	r24, 7
     58c:	90 95       	com	r25
     58e:	a9 2f       	mov	r26, r25
     590:	b9 2f       	mov	r27, r25
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	44 eb       	ldi	r20, 0xB4	; 180
     5a8:	52 e4       	ldi	r21, 0x42	; 66
     5aa:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	bc 01       	movw	r22, r24
     5b4:	cd 01       	movw	r24, r26
     5b6:	26 e6       	ldi	r18, 0x66	; 102
     5b8:	36 e6       	ldi	r19, 0x66	; 102
     5ba:	46 e3       	ldi	r20, 0x36	; 54
     5bc:	51 ec       	ldi	r21, 0xC1	; 193
     5be:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	4c e6       	ldi	r20, 0x6C	; 108
     5d0:	53 e4       	ldi	r21, 0x43	; 67
     5d2:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	9c 01       	movw	r18, r24
     5dc:	ad 01       	movw	r20, r26
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8f e7       	ldi	r24, 0x7F	; 127
     5e4:	93 e4       	ldi	r25, 0x43	; 67
     5e6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__subsf3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fixsfsi>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	bc de       	rcall	.-648    	; 0x374 <servo_set_duty_cycle_door>
}
     5fc:	0f 90       	pop	r0
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	08 95       	ret

00000604 <servo_set_left_grabber_position>:
void servo_set_left_grabber_position(int8_t angle)//down 89 up -20
{
     604:	df 93       	push	r29
     606:	cf 93       	push	r28
     608:	0f 92       	push	r0
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	89 83       	std	Y+1, r24	; 0x01
	servo_set_duty_cycle_left_grabber( 255-(236.0 - ((double)angle / 90.0) * 11.4));
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	99 27       	eor	r25, r25
     614:	87 fd       	sbrc	r24, 7
     616:	90 95       	com	r25
     618:	a9 2f       	mov	r26, r25
     61a:	b9 2f       	mov	r27, r25
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	bc 01       	movw	r22, r24
     62a:	cd 01       	movw	r24, r26
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	44 eb       	ldi	r20, 0xB4	; 180
     632:	52 e4       	ldi	r21, 0x42	; 66
     634:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__divsf3>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	26 e6       	ldi	r18, 0x66	; 102
     642:	36 e6       	ldi	r19, 0x66	; 102
     644:	46 e3       	ldi	r20, 0x36	; 54
     646:	51 ec       	ldi	r21, 0xC1	; 193
     648:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4c e6       	ldi	r20, 0x6C	; 108
     65a:	53 e4       	ldi	r21, 0x43	; 67
     65c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__addsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	9c 01       	movw	r18, r24
     666:	ad 01       	movw	r20, r26
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8f e7       	ldi	r24, 0x7F	; 127
     66e:	93 e4       	ldi	r25, 0x43	; 67
     670:	0e 94 8c 1a 	call	0x3518	; 0x3518 <__subsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	bc 01       	movw	r22, r24
     67a:	cd 01       	movw	r24, r26
     67c:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fixsfsi>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	d6 de       	rcall	.-596    	; 0x432 <servo_set_duty_cycle_left_grabber>
}
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <servo_set_right_grabber_position>:
void servo_set_right_grabber_position(int8_t angle)//UP 100 DOWN 250 or otherwise I DONT FUCKING KNOW
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	0f 92       	push	r0
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = angle;	
     69a:	e7 e4       	ldi	r30, 0x47	; 71
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	80 83       	st	Z, r24
}
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <servo_set_grabbers_up>:
void servo_set_grabbers_up(void)
{
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(-10);
     6b2:	86 ef       	ldi	r24, 0xF6	; 246
     6b4:	a7 df       	rcall	.-178    	; 0x604 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(80);//200 is for the half step
     6b6:	80 e5       	ldi	r24, 0x50	; 80
     6b8:	ea df       	rcall	.-44     	; 0x68e <servo_set_right_grabber_position>
}
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	08 95       	ret

000006c0 <servo_set_grabbers_down>:
void servo_set_grabbers_down(void)
{
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
	servo_set_left_grabber_position(89);
     6c8:	89 e5       	ldi	r24, 0x59	; 89
     6ca:	9c df       	rcall	.-200    	; 0x604 <servo_set_left_grabber_position>
	servo_set_right_grabber_position(250);
     6cc:	8a ef       	ldi	r24, 0xFA	; 250
     6ce:	df df       	rcall	.-66     	; 0x68e <servo_set_right_grabber_position>
}
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <actuators_umbrella>:
servo_set_left_grabber_position(89);
servo_set_right_grabber_position(250);

*/
void actuators_umbrella(void)
{
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	2e 97       	sbiw	r28, 0x0e	; 14
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     6ea:	8a e5       	ldi	r24, 0x5A	; 90
     6ec:	46 df       	rcall	.-372    	; 0x57a <servo_set_door_position>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	aa ef       	ldi	r26, 0xFA	; 250
     6f4:	b4 e4       	ldi	r27, 0x44	; 68
     6f6:	8b 87       	std	Y+11, r24	; 0x0b
     6f8:	9c 87       	std	Y+12, r25	; 0x0c
     6fa:	ad 87       	std	Y+13, r26	; 0x0d
     6fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6fe:	6b 85       	ldd	r22, Y+11	; 0x0b
     700:	7c 85       	ldd	r23, Y+12	; 0x0c
     702:	8d 85       	ldd	r24, Y+13	; 0x0d
     704:	9e 85       	ldd	r25, Y+14	; 0x0e
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e4       	ldi	r19, 0x40	; 64
     70a:	4c e1       	ldi	r20, 0x1C	; 28
     70c:	55 e4       	ldi	r21, 0x45	; 69
     70e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	8f 83       	std	Y+7, r24	; 0x07
     718:	98 87       	std	Y+8, r25	; 0x08
     71a:	a9 87       	std	Y+9, r26	; 0x09
     71c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     71e:	6f 81       	ldd	r22, Y+7	; 0x07
     720:	78 85       	ldd	r23, Y+8	; 0x08
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	9a 85       	ldd	r25, Y+10	; 0x0a
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e8       	ldi	r20, 0x80	; 128
     72c:	5f e3       	ldi	r21, 0x3F	; 63
     72e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
     732:	88 23       	and	r24, r24
     734:	2c f4       	brge	.+10     	; 0x740 <actuators_umbrella+0x6a>
		__ticks = 1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9e 83       	std	Y+6, r25	; 0x06
     73c:	8d 83       	std	Y+5, r24	; 0x05
     73e:	3f c0       	rjmp	.+126    	; 0x7be <actuators_umbrella+0xe8>
	else if (__tmp > 65535)
     740:	6f 81       	ldd	r22, Y+7	; 0x07
     742:	78 85       	ldd	r23, Y+8	; 0x08
     744:	89 85       	ldd	r24, Y+9	; 0x09
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	4f e7       	ldi	r20, 0x7F	; 127
     74e:	57 e4       	ldi	r21, 0x47	; 71
     750:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
     754:	18 16       	cp	r1, r24
     756:	4c f5       	brge	.+82     	; 0x7aa <actuators_umbrella+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     758:	6b 85       	ldd	r22, Y+11	; 0x0b
     75a:	7c 85       	ldd	r23, Y+12	; 0x0c
     75c:	8d 85       	ldd	r24, Y+13	; 0x0d
     75e:	9e 85       	ldd	r25, Y+14	; 0x0e
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e2       	ldi	r20, 0x20	; 32
     766:	51 e4       	ldi	r21, 0x41	; 65
     768:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	bc 01       	movw	r22, r24
     772:	cd 01       	movw	r24, r26
     774:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	0f c0       	rjmp	.+30     	; 0x7a0 <actuators_umbrella+0xca>
     782:	8a ef       	ldi	r24, 0xFA	; 250
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	9c 83       	std	Y+4, r25	; 0x04
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <actuators_umbrella+0xb8>
     792:	9c 83       	std	Y+4, r25	; 0x04
     794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	9e 81       	ldd	r25, Y+6	; 0x06
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	9e 83       	std	Y+6, r25	; 0x06
     79e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	69 f7       	brne	.-38     	; 0x782 <actuators_umbrella+0xac>
     7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <actuators_umbrella+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7aa:	6f 81       	ldd	r22, Y+7	; 0x07
     7ac:	78 85       	ldd	r23, Y+8	; 0x08
     7ae:	89 85       	ldd	r24, Y+9	; 0x09
     7b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	9e 83       	std	Y+6, r25	; 0x06
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <actuators_umbrella+0xf4>
     7ce:	9a 83       	std	Y+2, r25	; 0x02
     7d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	servo_set_umbrella_position(70);
     7d2:	86 e4       	ldi	r24, 0x46	; 70
     7d4:	8d de       	rcall	.-742    	; 0x4f0 <servo_set_umbrella_position>
	
}
     7d6:	2e 96       	adiw	r28, 0x0e	; 14
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <actuators_setup>:
void actuators_setup(void)
{
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	aa 97       	sbiw	r28, 0x2a	; 42
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
	servo_set_door_position(90);
     7fc:	8a e5       	ldi	r24, 0x5A	; 90
     7fe:	bd de       	rcall	.-646    	; 0x57a <servo_set_door_position>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	aa e7       	ldi	r26, 0x7A	; 122
     806:	b4 e4       	ldi	r27, 0x44	; 68
     808:	8f a3       	std	Y+39, r24	; 0x27
     80a:	98 a7       	std	Y+40, r25	; 0x28
     80c:	a9 a7       	std	Y+41, r26	; 0x29
     80e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     810:	6f a1       	ldd	r22, Y+39	; 0x27
     812:	78 a5       	ldd	r23, Y+40	; 0x28
     814:	89 a5       	ldd	r24, Y+41	; 0x29
     816:	9a a5       	ldd	r25, Y+42	; 0x2a
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e4       	ldi	r19, 0x40	; 64
     81c:	4c e1       	ldi	r20, 0x1C	; 28
     81e:	55 e4       	ldi	r21, 0x45	; 69
     820:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	8b a3       	std	Y+35, r24	; 0x23
     82a:	9c a3       	std	Y+36, r25	; 0x24
     82c:	ad a3       	std	Y+37, r26	; 0x25
     82e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     830:	6b a1       	ldd	r22, Y+35	; 0x23
     832:	7c a1       	ldd	r23, Y+36	; 0x24
     834:	8d a1       	ldd	r24, Y+37	; 0x25
     836:	9e a1       	ldd	r25, Y+38	; 0x26
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	2c f4       	brge	.+10     	; 0x852 <actuators_setup+0x6a>
		__ticks = 1;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	9a a3       	std	Y+34, r25	; 0x22
     84e:	89 a3       	std	Y+33, r24	; 0x21
     850:	3f c0       	rjmp	.+126    	; 0x8d0 <actuators_setup+0xe8>
	else if (__tmp > 65535)
     852:	6b a1       	ldd	r22, Y+35	; 0x23
     854:	7c a1       	ldd	r23, Y+36	; 0x24
     856:	8d a1       	ldd	r24, Y+37	; 0x25
     858:	9e a1       	ldd	r25, Y+38	; 0x26
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	3f ef       	ldi	r19, 0xFF	; 255
     85e:	4f e7       	ldi	r20, 0x7F	; 127
     860:	57 e4       	ldi	r21, 0x47	; 71
     862:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
     866:	18 16       	cp	r1, r24
     868:	4c f5       	brge	.+82     	; 0x8bc <actuators_setup+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86a:	6f a1       	ldd	r22, Y+39	; 0x27
     86c:	78 a5       	ldd	r23, Y+40	; 0x28
     86e:	89 a5       	ldd	r24, Y+41	; 0x29
     870:	9a a5       	ldd	r25, Y+42	; 0x2a
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e2       	ldi	r20, 0x20	; 32
     878:	51 e4       	ldi	r21, 0x41	; 65
     87a:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	9a a3       	std	Y+34, r25	; 0x22
     890:	89 a3       	std	Y+33, r24	; 0x21
     892:	0f c0       	rjmp	.+30     	; 0x8b2 <actuators_setup+0xca>
     894:	8a ef       	ldi	r24, 0xFA	; 250
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	98 a3       	std	Y+32, r25	; 0x20
     89a:	8f 8f       	std	Y+31, r24	; 0x1f
     89c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     89e:	98 a1       	ldd	r25, Y+32	; 0x20
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <actuators_setup+0xb8>
     8a4:	98 a3       	std	Y+32, r25	; 0x20
     8a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a8:	89 a1       	ldd	r24, Y+33	; 0x21
     8aa:	9a a1       	ldd	r25, Y+34	; 0x22
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	9a a3       	std	Y+34, r25	; 0x22
     8b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b2:	89 a1       	ldd	r24, Y+33	; 0x21
     8b4:	9a a1       	ldd	r25, Y+34	; 0x22
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	69 f7       	brne	.-38     	; 0x894 <actuators_setup+0xac>
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <actuators_setup+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8bc:	6b a1       	ldd	r22, Y+35	; 0x23
     8be:	7c a1       	ldd	r23, Y+36	; 0x24
     8c0:	8d a1       	ldd	r24, Y+37	; 0x25
     8c2:	9e a1       	ldd	r25, Y+38	; 0x26
     8c4:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	9a a3       	std	Y+34, r25	; 0x22
     8ce:	89 a3       	std	Y+33, r24	; 0x21
     8d0:	89 a1       	ldd	r24, Y+33	; 0x21
     8d2:	9a a1       	ldd	r25, Y+34	; 0x22
     8d4:	9e 8f       	std	Y+30, r25	; 0x1e
     8d6:	8d 8f       	std	Y+29, r24	; 0x1d
     8d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8da:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <actuators_setup+0xf4>
     8e0:	9e 8f       	std	Y+30, r25	; 0x1e
     8e2:	8d 8f       	std	Y+29, r24	; 0x1d
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	aa e7       	ldi	r26, 0x7A	; 122
     8ea:	b4 e4       	ldi	r27, 0x44	; 68
     8ec:	89 8f       	std	Y+25, r24	; 0x19
     8ee:	9a 8f       	std	Y+26, r25	; 0x1a
     8f0:	ab 8f       	std	Y+27, r26	; 0x1b
     8f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f4:	69 8d       	ldd	r22, Y+25	; 0x19
     8f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e4       	ldi	r19, 0x40	; 64
     900:	4c e1       	ldi	r20, 0x1C	; 28
     902:	55 e4       	ldi	r21, 0x45	; 69
     904:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	8d 8b       	std	Y+21, r24	; 0x15
     90e:	9e 8b       	std	Y+22, r25	; 0x16
     910:	af 8b       	std	Y+23, r26	; 0x17
     912:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     914:	6d 89       	ldd	r22, Y+21	; 0x15
     916:	7e 89       	ldd	r23, Y+22	; 0x16
     918:	8f 89       	ldd	r24, Y+23	; 0x17
     91a:	98 8d       	ldd	r25, Y+24	; 0x18
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e8       	ldi	r20, 0x80	; 128
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
     928:	88 23       	and	r24, r24
     92a:	2c f4       	brge	.+10     	; 0x936 <actuators_setup+0x14e>
		__ticks = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9c 8b       	std	Y+20, r25	; 0x14
     932:	8b 8b       	std	Y+19, r24	; 0x13
     934:	3f c0       	rjmp	.+126    	; 0x9b4 <actuators_setup+0x1cc>
	else if (__tmp > 65535)
     936:	6d 89       	ldd	r22, Y+21	; 0x15
     938:	7e 89       	ldd	r23, Y+22	; 0x16
     93a:	8f 89       	ldd	r24, Y+23	; 0x17
     93c:	98 8d       	ldd	r25, Y+24	; 0x18
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	3f ef       	ldi	r19, 0xFF	; 255
     942:	4f e7       	ldi	r20, 0x7F	; 127
     944:	57 e4       	ldi	r21, 0x47	; 71
     946:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
     94a:	18 16       	cp	r1, r24
     94c:	4c f5       	brge	.+82     	; 0x9a0 <actuators_setup+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     94e:	69 8d       	ldd	r22, Y+25	; 0x19
     950:	7a 8d       	ldd	r23, Y+26	; 0x1a
     952:	8b 8d       	ldd	r24, Y+27	; 0x1b
     954:	9c 8d       	ldd	r25, Y+28	; 0x1c
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e2       	ldi	r20, 0x20	; 32
     95c:	51 e4       	ldi	r21, 0x41	; 65
     95e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	bc 01       	movw	r22, r24
     968:	cd 01       	movw	r24, r26
     96a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	9c 8b       	std	Y+20, r25	; 0x14
     974:	8b 8b       	std	Y+19, r24	; 0x13
     976:	0f c0       	rjmp	.+30     	; 0x996 <actuators_setup+0x1ae>
     978:	8a ef       	ldi	r24, 0xFA	; 250
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	9a 8b       	std	Y+18, r25	; 0x12
     97e:	89 8b       	std	Y+17, r24	; 0x11
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	9a 89       	ldd	r25, Y+18	; 0x12
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <actuators_setup+0x19c>
     988:	9a 8b       	std	Y+18, r25	; 0x12
     98a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98c:	8b 89       	ldd	r24, Y+19	; 0x13
     98e:	9c 89       	ldd	r25, Y+20	; 0x14
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	9c 8b       	std	Y+20, r25	; 0x14
     994:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     996:	8b 89       	ldd	r24, Y+19	; 0x13
     998:	9c 89       	ldd	r25, Y+20	; 0x14
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	69 f7       	brne	.-38     	; 0x978 <actuators_setup+0x190>
     99e:	14 c0       	rjmp	.+40     	; 0x9c8 <actuators_setup+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a0:	6d 89       	ldd	r22, Y+21	; 0x15
     9a2:	7e 89       	ldd	r23, Y+22	; 0x16
     9a4:	8f 89       	ldd	r24, Y+23	; 0x17
     9a6:	98 8d       	ldd	r25, Y+24	; 0x18
     9a8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	9c 8b       	std	Y+20, r25	; 0x14
     9b2:	8b 8b       	std	Y+19, r24	; 0x13
     9b4:	8b 89       	ldd	r24, Y+19	; 0x13
     9b6:	9c 89       	ldd	r25, Y+20	; 0x14
     9b8:	98 8b       	std	Y+16, r25	; 0x10
     9ba:	8f 87       	std	Y+15, r24	; 0x0f
     9bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     9be:	98 89       	ldd	r25, Y+16	; 0x10
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <actuators_setup+0x1d8>
     9c4:	98 8b       	std	Y+16, r25	; 0x10
     9c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	//servo_set_umbrella_position(-89);
	_delay_ms(1000);
	servo_set_door_position(30);
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	d7 dd       	rcall	.-1106   	; 0x57a <servo_set_door_position>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	aa ef       	ldi	r26, 0xFA	; 250
     9d2:	b3 e4       	ldi	r27, 0x43	; 67
     9d4:	8b 87       	std	Y+11, r24	; 0x0b
     9d6:	9c 87       	std	Y+12, r25	; 0x0c
     9d8:	ad 87       	std	Y+13, r26	; 0x0d
     9da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     9de:	7c 85       	ldd	r23, Y+12	; 0x0c
     9e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e4       	ldi	r19, 0x40	; 64
     9e8:	4c e1       	ldi	r20, 0x1C	; 28
     9ea:	55 e4       	ldi	r21, 0x45	; 69
     9ec:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	8f 83       	std	Y+7, r24	; 0x07
     9f6:	98 87       	std	Y+8, r25	; 0x08
     9f8:	a9 87       	std	Y+9, r26	; 0x09
     9fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9fc:	6f 81       	ldd	r22, Y+7	; 0x07
     9fe:	78 85       	ldd	r23, Y+8	; 0x08
     a00:	89 85       	ldd	r24, Y+9	; 0x09
     a02:	9a 85       	ldd	r25, Y+10	; 0x0a
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e8       	ldi	r20, 0x80	; 128
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
     a10:	88 23       	and	r24, r24
     a12:	2c f4       	brge	.+10     	; 0xa1e <actuators_setup+0x236>
		__ticks = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	9e 83       	std	Y+6, r25	; 0x06
     a1a:	8d 83       	std	Y+5, r24	; 0x05
     a1c:	3f c0       	rjmp	.+126    	; 0xa9c <actuators_setup+0x2b4>
	else if (__tmp > 65535)
     a1e:	6f 81       	ldd	r22, Y+7	; 0x07
     a20:	78 85       	ldd	r23, Y+8	; 0x08
     a22:	89 85       	ldd	r24, Y+9	; 0x09
     a24:	9a 85       	ldd	r25, Y+10	; 0x0a
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	4f e7       	ldi	r20, 0x7F	; 127
     a2c:	57 e4       	ldi	r21, 0x47	; 71
     a2e:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
     a32:	18 16       	cp	r1, r24
     a34:	4c f5       	brge	.+82     	; 0xa88 <actuators_setup+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a36:	6b 85       	ldd	r22, Y+11	; 0x0b
     a38:	7c 85       	ldd	r23, Y+12	; 0x0c
     a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e2       	ldi	r20, 0x20	; 32
     a44:	51 e4       	ldi	r21, 0x41	; 65
     a46:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	9e 83       	std	Y+6, r25	; 0x06
     a5c:	8d 83       	std	Y+5, r24	; 0x05
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <actuators_setup+0x296>
     a60:	8a ef       	ldi	r24, 0xFA	; 250
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <actuators_setup+0x284>
     a70:	9c 83       	std	Y+4, r25	; 0x04
     a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a74:	8d 81       	ldd	r24, Y+5	; 0x05
     a76:	9e 81       	ldd	r25, Y+6	; 0x06
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	9e 83       	std	Y+6, r25	; 0x06
     a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	69 f7       	brne	.-38     	; 0xa60 <actuators_setup+0x278>
     a86:	14 c0       	rjmp	.+40     	; 0xab0 <actuators_setup+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a88:	6f 81       	ldd	r22, Y+7	; 0x07
     a8a:	78 85       	ldd	r23, Y+8	; 0x08
     a8c:	89 85       	ldd	r24, Y+9	; 0x09
     a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a90:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	9e 83       	std	Y+6, r25	; 0x06
     a9a:	8d 83       	std	Y+5, r24	; 0x05
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	9e 81       	ldd	r25, Y+6	; 0x06
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <actuators_setup+0x2c0>
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	servo_set_grabbers_up();
     ab0:	fc dd       	rcall	.-1032   	; 0x6aa <servo_set_grabbers_up>
}
     ab2:	aa 96       	adiw	r28, 0x2a	; 42
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	08 95       	ret

00000ac4 <__vector_18>:
static volatile unsigned char rxCounter[10];
volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     ac4:	1f 92       	push	r1
     ac6:	0f 92       	push	r0
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	0f 92       	push	r0
     acc:	00 90 5b 00 	lds	r0, 0x005B
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	df 93       	push	r29
     aea:	cf 93       	push	r28
     aec:	00 d0       	rcall	.+0      	; 0xaee <__vector_18+0x2a>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <__vector_18+0x2c>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     af4:	ed ee       	ldi	r30, 0xED	; 237
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     afc:	1b 82       	std	Y+3, r1	; 0x03
     afe:	9c c0       	rjmp	.+312    	; 0xc38 <__vector_18+0x174>
	{
		CANPAGE = ch << 4;
     b00:	ed ee       	ldi	r30, 0xED	; 237
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	82 95       	swap	r24
     b08:	80 7f       	andi	r24, 0xF0	; 240
     b0a:	80 83       	st	Z, r24

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     b0c:	ee ee       	ldi	r30, 0xEE	; 238
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	82 95       	swap	r24
     b14:	86 95       	lsr	r24
     b16:	87 70       	andi	r24, 0x07	; 7
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	81 70       	andi	r24, 0x01	; 1
     b1e:	90 70       	andi	r25, 0x00	; 0
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <__vector_18+0x62>
     b24:	6e c0       	rjmp	.+220    	; 0xc02 <__vector_18+0x13e>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     b26:	ef ee       	ldi	r30, 0xEF	; 239
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	80 83       	st	Z, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     b2e:	ae ee       	ldi	r26, 0xEE	; 238
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ee ee       	ldi	r30, 0xEE	; 238
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8f 7d       	andi	r24, 0xDF	; 223
     b3a:	8c 93       	st	X, r24

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     b3c:	e2 ef       	ldi	r30, 0xF2	; 242
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	82 95       	swap	r24
     b44:	86 95       	lsr	r24
     b46:	87 70       	andi	r24, 0x07	; 7
     b48:	28 2f       	mov	r18, r24
     b4a:	e3 ef       	ldi	r30, 0xF3	; 243
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	82 2b       	or	r24, r18
     b62:	8a 83       	std	Y+2, r24	; 0x02

			for(i = 0; i < 8; ++i)
     b64:	19 82       	std	Y+1, r1	; 0x01
     b66:	2a c0       	rjmp	.+84     	; 0xbbc <__vector_18+0xf8>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	82 1b       	sub	r24, r18
     b74:	93 0b       	sbc	r25, r19
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	90 95       	com	r25
     b7c:	81 95       	neg	r24
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	fc 01       	movw	r30, r24
     b82:	ec 58       	subi	r30, 0x8C	; 140
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	40 81       	ld	r20, Z
     b88:	51 81       	ldd	r21, Z+1	; 0x01
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	fc 01       	movw	r30, r24
     b94:	e8 57       	subi	r30, 0x78	; 120
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	da 01       	movw	r26, r20
     baa:	a8 0f       	add	r26, r24
     bac:	b9 1f       	adc	r27, r25
     bae:	ea ef       	ldi	r30, 0xFA	; 250
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8c 93       	st	X, r24
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	88 30       	cpi	r24, 0x08	; 8
     bc0:	98 f2       	brcs	.-90     	; 0xb68 <__vector_18+0xa4>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	fc 01       	movw	r30, r24
     bcc:	e8 57       	subi	r30, 0x78	; 120
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	80 81       	ld	r24, Z
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	80 83       	st	Z, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	85 30       	cpi	r24, 0x05	; 5
     bda:	41 f4       	brne	.+16     	; 0xbec <__vector_18+0x128>
				*(rxWrIndex + ide - 1) = 0;
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	fc 01       	movw	r30, r24
     be6:	e8 57       	subi	r30, 0x78	; 120
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	fc 01       	movw	r30, r24
     bf6:	e4 56       	subi	r30, 0x64	; 100
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	80 83       	st	Z, r24
     c00:	1f c0       	rjmp	.+62     	; 0xc40 <__vector_18+0x17c>

			break;
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     c02:	ee ee       	ldi	r30, 0xEE	; 238
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	82 95       	swap	r24
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	83 70       	andi	r24, 0x03	; 3
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	88 23       	and	r24, r24
     c1a:	59 f0       	breq	.+22     	; 0xc32 <__vector_18+0x16e>
		{
			CANCDMOB = 0; // disable mob
     c1c:	ef ee       	ldi	r30, 0xEF	; 239
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     c22:	ae ee       	ldi	r26, 0xEE	; 238
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ee ee       	ldi	r30, 0xEE	; 238
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8f 7b       	andi	r24, 0xBF	; 191
     c2e:	8c 93       	st	X, r24
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <__vector_18+0x17c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	8b 83       	std	Y+3, r24	; 0x03
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	8f 30       	cpi	r24, 0x0F	; 15
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <__vector_18+0x17c>
     c3e:	60 cf       	rjmp	.-320    	; 0xb00 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     c40:	ed ee       	ldi	r30, 0xED	; 237
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	8c 81       	ldd	r24, Y+4	; 0x04
     c46:	80 83       	st	Z, r24
	CANGIT = CANGIT; // zato sto tako treba.
     c48:	aa ed       	ldi	r26, 0xDA	; 218
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea ed       	ldi	r30, 0xDA	; 218
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8c 93       	st	X, r24
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	00 92 5b 00 	sts	0x005B, r0
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <CAN_InitModule+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     c8e:	e8 ed       	ldi	r30, 0xD8	; 216
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 83       	st	Z, r24

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     c96:	1a 82       	std	Y+2, r1	; 0x02
     c98:	32 c0       	rjmp	.+100    	; 0xcfe <CAN_InitModule+0x7a>
	{
		CANPAGE = ch << 4;
     c9a:	ed ee       	ldi	r30, 0xED	; 237
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	82 95       	swap	r24
     ca2:	80 7f       	andi	r24, 0xF0	; 240
     ca4:	80 83       	st	Z, r24

		CANSTMOB = 0;
     ca6:	ee ee       	ldi	r30, 0xEE	; 238
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
		CANCDMOB = 0;
     cac:	ef ee       	ldi	r30, 0xEF	; 239
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1

		CANIDT1 = 0;
     cb2:	e3 ef       	ldi	r30, 0xF3	; 243
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
		CANIDT2 = 0;
     cb8:	e2 ef       	ldi	r30, 0xF2	; 242
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
		CANIDT3 = 0;
     cbe:	e1 ef       	ldi	r30, 0xF1	; 241
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
		CANIDT4 = 0;
     cc4:	e0 ef       	ldi	r30, 0xF0	; 240
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
		CANIDM1 = 0;
     cca:	e7 ef       	ldi	r30, 0xF7	; 247
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
		CANIDM2 = 0;
     cd0:	e6 ef       	ldi	r30, 0xF6	; 246
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
		CANIDM3 = 0;
     cd6:	e5 ef       	ldi	r30, 0xF5	; 245
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
		CANIDM4 = 0;
     cdc:	e4 ef       	ldi	r30, 0xF4	; 244
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <CAN_InitModule+0x6e>
			CANMSG = 0;
     ce6:	ea ef       	ldi	r30, 0xFA	; 250
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	b8 f3       	brcs	.-18     	; 0xce6 <CAN_InitModule+0x62>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	8f 30       	cpi	r24, 0x0F	; 15
     d02:	58 f2       	brcs	.-106    	; 0xc9a <CAN_InitModule+0x16>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     d04:	e8 ed       	ldi	r30, 0xD8	; 216
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 83       	st	Z, r24

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     d0c:	e2 ee       	ldi	r30, 0xE2	; 226
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 83       	st	Z, r24
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     d14:	e3 ee       	ldi	r30, 0xE3	; 227
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	88 e0       	ldi	r24, 0x08	; 8
     d1a:	80 83       	st	Z, r24
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     d1c:	e4 ee       	ldi	r30, 0xE4	; 228
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8e e5       	ldi	r24, 0x5E	; 94
     d22:	80 83       	st	Z, r24

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     d24:	e5 ee       	ldi	r30, 0xE5	; 229
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     d2a:	eb ed       	ldi	r30, 0xDB	; 219
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 eb       	ldi	r24, 0xB0	; 176
     d30:	80 83       	st	Z, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     d32:	ef ed       	ldi	r30, 0xDF	; 223
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	8f e7       	ldi	r24, 0x7F	; 127
     d38:	80 83       	st	Z, r24
	CANIE2 = 0xFF;
     d3a:	ee ed       	ldi	r30, 0xDE	; 222
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	80 83       	st	Z, r24
	sei();
     d42:	78 94       	sei
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <CAN_InitRxMob+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <CAN_InitRxMob+0x8>
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     d60:	ed ee       	ldi	r30, 0xED	; 237
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	89 83       	std	Y+1, r24	; 0x01

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     d68:	e9 ed       	ldi	r30, 0xD9	; 217
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 95       	swap	r24
     d70:	8f 70       	andi	r24, 0x0F	; 15
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	90 70       	andi	r25, 0x00	; 0
     d7a:	88 23       	and	r24, r24
     d7c:	a9 f7       	brne	.-22     	; 0xd68 <CAN_InitRxMob+0x1a>
     d7e:	e9 ed       	ldi	r30, 0xD9	; 217
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	86 95       	lsr	r24
     d86:	86 95       	lsr	r24
     d88:	86 95       	lsr	r24
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	81 70       	andi	r24, 0x01	; 1
     d90:	90 70       	andi	r25, 0x00	; 0
     d92:	88 23       	and	r24, r24
     d94:	49 f7       	brne	.-46     	; 0xd68 <CAN_InitRxMob+0x1a>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <CAN_InitRxMob+0xca>
	{
		CANPAGE = ch << 4;
     d9a:	ed ee       	ldi	r30, 0xED	; 237
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	82 95       	swap	r24
     da2:	80 7f       	andi	r24, 0xF0	; 240
     da4:	80 83       	st	Z, r24

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     da6:	ef ee       	ldi	r30, 0xEF	; 239
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	82 95       	swap	r24
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	83 70       	andi	r24, 0x03	; 3
     db4:	88 23       	and	r24, r24
     db6:	69 f5       	brne	.+90     	; 0xe12 <CAN_InitRxMob+0xc4>
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     db8:	ef ee       	ldi	r30, 0xEF	; 239
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8f e0       	ldi	r24, 0x0F	; 15
     dbe:	80 83       	st	Z, r24

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     dc0:	e3 ef       	ldi	r30, 0xF3	; 243
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	80 83       	st	Z, r24
		CANIDT2 = (ide & 0x00FF) << 5;
     dd8:	e2 ef       	ldi	r30, 0xF2	; 242
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	82 95       	swap	r24
     de0:	88 0f       	add	r24, r24
     de2:	80 7e       	andi	r24, 0xE0	; 224
     de4:	80 83       	st	Z, r24

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     de6:	e6 ef       	ldi	r30, 0xF6	; 246
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 ee       	ldi	r24, 0xE0	; 224
     dec:	80 83       	st	Z, r24
		CANIDM1 = 0xFF;
     dee:	e7 ef       	ldi	r30, 0xF7	; 247
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	80 83       	st	Z, r24

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     df6:	af ee       	ldi	r26, 0xEF	; 239
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ef ee       	ldi	r30, 0xEF	; 239
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	8c 93       	st	X, r24

		CANPAGE = tempPage;
     e04:	ed ee       	ldi	r30, 0xED	; 237
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 83       	st	Z, r24

		return 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	0c c0       	rjmp	.+24     	; 0xe2a <CAN_InitRxMob+0xdc>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	8f 30       	cpi	r24, 0x0F	; 15
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <CAN_InitRxMob+0xd2>
     e1e:	bd cf       	rjmp	.-134    	; 0xd9a <CAN_InitRxMob+0x4c>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     e20:	ed ee       	ldi	r30, 0xED	; 237
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	80 83       	st	Z, r24

	return 0;
     e28:	1d 82       	std	Y+5, r1	; 0x05
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <CAN_Init+0xa>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     e4c:	1b df       	rcall	.-458    	; 0xc84 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     e4e:	19 82       	std	Y+1, r1	; 0x01
     e50:	36 c0       	rjmp	.+108    	; 0xebe <CAN_Init+0x82>
	{
		CAN_InitRxMob(i + 1);
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	79 df       	rcall	.-270    	; 0xd4e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	8c 01       	movw	r16, r24
     e68:	0c 58       	subi	r16, 0x8C	; 140
     e6a:	1e 4f       	sbci	r17, 0xFE	; 254
     e6c:	85 e0       	ldi	r24, 0x05	; 5
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	0e 94 a7 1c 	call	0x394e	; 0x394e <calloc>
     e78:	f8 01       	movw	r30, r16
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	48 2f       	mov	r20, r24
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	fc 01       	movw	r30, r24
     e92:	e4 56       	subi	r30, 0x64	; 100
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	10 82       	st	Z, r1
     e98:	fc 01       	movw	r30, r24
     e9a:	e4 56       	subi	r30, 0x64	; 100
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	80 81       	ld	r24, Z
     ea0:	f9 01       	movw	r30, r18
     ea2:	ee 56       	subi	r30, 0x6E	; 110
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	80 83       	st	Z, r24
     ea8:	f9 01       	movw	r30, r18
     eaa:	ee 56       	subi	r30, 0x6E	; 110
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 81       	ld	r24, Z
     eb0:	fa 01       	movw	r30, r20
     eb2:	e8 57       	subi	r30, 0x78	; 120
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	80 83       	st	Z, r24

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	99 81       	ldd	r25, Y+1	; 0x01
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	98 17       	cp	r25, r24
     ec4:	30 f2       	brcs	.-116    	; 0xe52 <CAN_Init+0x16>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

00000ed4 <CAN_Read>:
	return rxCounter[nodeID - 1];
}


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <CAN_Read+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <CAN_Read+0x8>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	fc 01       	movw	r30, r24
     ef8:	e4 56       	subi	r30, 0x64	; 100
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	80 81       	ld	r24, Z
     efe:	88 23       	and	r24, r24
     f00:	b1 f3       	breq	.-20     	; 0xeee <CAN_Read+0x1a>

	for(i = 0; i < 8; ++i)
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	30 c0       	rjmp	.+96     	; 0xf66 <CAN_Read+0x92>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	9b 81       	ldd	r25, Y+3	; 0x03
     f10:	dc 01       	movw	r26, r24
     f12:	a2 0f       	add	r26, r18
     f14:	b3 1f       	adc	r27, r19
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	90 95       	com	r25
     f2a:	81 95       	neg	r24
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	fc 01       	movw	r30, r24
     f30:	ec 58       	subi	r30, 0x8C	; 140
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	40 81       	ld	r20, Z
     f36:	51 81       	ldd	r21, Z+1	; 0x01
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	fc 01       	movw	r30, r24
     f42:	ee 56       	subi	r30, 0x6E	; 110
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	80 81       	ld	r24, Z
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	fa 01       	movw	r30, r20
     f58:	e8 0f       	add	r30, r24
     f5a:	f9 1f       	adc	r31, r25
     f5c:	80 81       	ld	r24, Z
     f5e:	8c 93       	st	X, r24
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	68 f2       	brcs	.-102    	; 0xf06 <CAN_Read+0x32>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	fc 01       	movw	r30, r24
     f76:	ee 56       	subi	r30, 0x6E	; 110
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 83       	st	Z, r24
     f80:	80 81       	ld	r24, Z
     f82:	85 30       	cpi	r24, 0x05	; 5
     f84:	41 f4       	brne	.+16     	; 0xf96 <CAN_Read+0xc2>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	fc 01       	movw	r30, r24
     f90:	ee 56       	subi	r30, 0x6E	; 110
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9c 01       	movw	r18, r24
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	30 40       	sbci	r19, 0x00	; 0
     fa2:	f9 01       	movw	r30, r18
     fa4:	e4 56       	subi	r30, 0x64	; 100
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	80 81       	ld	r24, Z
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	f9 01       	movw	r30, r18
     fae:	e4 56       	subi	r30, 0x64	; 100
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	80 83       	st	Z, r24

	return 0;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	27 97       	sbiw	r28, 0x07	; 7
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	9d 83       	std	Y+5, r25	; 0x05
     fda:	8c 83       	std	Y+4, r24	; 0x04
     fdc:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     fde:	e9 ed       	ldi	r30, 0xD9	; 217
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	82 95       	swap	r24
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f7       	brne	.-22     	; 0xfde <CAN_Write+0x1a>
     ff4:	e9 ed       	ldi	r30, 0xD9	; 217
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	86 95       	lsr	r24
     ffc:	86 95       	lsr	r24
     ffe:	86 95       	lsr	r24
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	49 f7       	brne	.-46     	; 0xfde <CAN_Write+0x1a>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    100c:	ed ee       	ldi	r30, 0xED	; 237
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	89 83       	std	Y+1, r24	; 0x01

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1014:	1a 82       	std	Y+2, r1	; 0x02
    1016:	12 c0       	rjmp	.+36     	; 0x103c <CAN_Write+0x78>
	{
		CANPAGE = ch << 4;
    1018:	ed ee       	ldi	r30, 0xED	; 237
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	82 95       	swap	r24
    1020:	80 7f       	andi	r24, 0xF0	; 240
    1022:	80 83       	st	Z, r24

		if(!(CANCDMOB >> 6))
    1024:	ef ee       	ldi	r30, 0xEF	; 239
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 95       	swap	r24
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	83 70       	andi	r24, 0x03	; 3
    1032:	88 23       	and	r24, r24
    1034:	31 f0       	breq	.+12     	; 0x1042 <CAN_Write+0x7e>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	8f 30       	cpi	r24, 0x0F	; 15
    1040:	58 f3       	brcs	.-42     	; 0x1018 <CAN_Write+0x54>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	8f 30       	cpi	r24, 0x0F	; 15
    1046:	19 f4       	brne	.+6      	; 0x104e <CAN_Write+0x8a>
		return -1;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	8f 83       	std	Y+7, r24	; 0x07
    104c:	32 c0       	rjmp	.+100    	; 0x10b2 <CAN_Write+0xee>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    104e:	e2 ef       	ldi	r30, 0xF2	; 242
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	82 95       	swap	r24
    1056:	88 0f       	add	r24, r24
    1058:	80 7e       	andi	r24, 0xE0	; 224
    105a:	80 83       	st	Z, r24
	CANIDT1 = (receivingNodeAddress) >> 3;
    105c:	e3 ef       	ldi	r30, 0xF3	; 243
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	80 83       	st	Z, r24

	// DLC = 8
	CANCDMOB = 8;
    106a:	ef ee       	ldi	r30, 0xEF	; 239
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	88 e0       	ldi	r24, 0x08	; 8
    1070:	80 83       	st	Z, r24

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1072:	1b 82       	std	Y+3, r1	; 0x03
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <CAN_Write+0xd0>
		CANMSG = data[i];
    1076:	aa ef       	ldi	r26, 0xFA	; 250
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	80 81       	ld	r24, Z
    108c:	8c 93       	st	X, r24

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	70 f3       	brcs	.-36     	; 0x1076 <CAN_Write+0xb2>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    109a:	af ee       	ldi	r26, 0xEF	; 239
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef ee       	ldi	r30, 0xEF	; 239
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 64       	ori	r24, 0x40	; 64
    10a6:	8c 93       	st	X, r24

	CANPAGE = tempPage;
    10a8:	ed ee       	ldi	r30, 0xED	; 237
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	80 83       	st	Z, r24

	return 0;
    10b0:	1f 82       	std	Y+7, r1	; 0x07
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10b4:	27 96       	adiw	r28, 0x07	; 7
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	2c 97       	sbiw	r28, 0x0c	; 12
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	89 87       	std	Y+9, r24	; 0x09
    10dc:	6a 87       	std	Y+10, r22	; 0x0a
    10de:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10e0:	80 91 08 01 	lds	r24, 0x0108
    10e4:	90 91 09 01 	lds	r25, 0x0109
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	06 97       	sbiw	r24, 0x06	; 6
    10f2:	98 87       	std	Y+8, r25	; 0x08
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <__stack+0x21>
    {
        if(input->pin == pin)
    10f8:	ef 81       	ldd	r30, Y+7	; 0x07
    10fa:	f8 85       	ldd	r31, Y+8	; 0x08
    10fc:	90 81       	ld	r25, Z
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	98 17       	cp	r25, r24
    1102:	19 f4       	brne	.+6      	; 0x110a <__stack+0xb>
            return 1;
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	2c 87       	std	Y+12, r18	; 0x0c
    1108:	c9 c0       	rjmp	.+402    	; 0x129c <__stack+0x19d>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    110a:	ef 81       	ldd	r30, Y+7	; 0x07
    110c:	f8 85       	ldd	r31, Y+8	; 0x08
    110e:	80 85       	ldd	r24, Z+8	; 0x08
    1110:	91 85       	ldd	r25, Z+9	; 0x09
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	06 97       	sbiw	r24, 0x06	; 6
    111c:	98 87       	std	Y+8, r25	; 0x08
    111e:	8f 83       	std	Y+7, r24	; 0x07
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	06 96       	adiw	r24, 0x06	; 6
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	86 30       	cpi	r24, 0x06	; 6
    112a:	92 07       	cpc	r25, r18
    112c:	29 f7       	brne	.-54     	; 0x10f8 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	86 95       	lsr	r24
    1132:	86 95       	lsr	r24
    1134:	86 95       	lsr	r24
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pin_reg = pin % 8;
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	87 70       	andi	r24, 0x07	; 7
    113e:	8d 83       	std	Y+5, r24	; 0x05
	if(direction == GPIO_DIRECTION_OUTPUT)
    1140:	8a 85       	ldd	r24, Y+10	; 0x0a
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <__stack+0x49>
    1146:	48 c0       	rjmp	.+144    	; 0x11d8 <__stack+0xd9>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1148:	8e 81       	ldd	r24, Y+6	; 0x06
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	c9 01       	movw	r24, r18
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	4e 96       	adiw	r24, 0x1e	; 30
    115a:	dc 01       	movw	r26, r24
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	c9 01       	movw	r24, r18
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	4e 96       	adiw	r24, 0x1e	; 30
    116e:	fc 01       	movw	r30, r24
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <__stack+0x85>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	2a 95       	dec	r18
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <__stack+0x81>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	c9 01       	movw	r24, r18
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	4f 96       	adiw	r24, 0x1f	; 31
    119e:	dc 01       	movw	r26, r24
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	c9 01       	movw	r24, r18
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	4f 96       	adiw	r24, 0x1f	; 31
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <__stack+0xcb>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <__stack+0xc7>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
        return 0;
    11d4:	1c 86       	std	Y+12, r1	; 0x0c
    11d6:	62 c0       	rjmp	.+196    	; 0x129c <__stack+0x19d>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	c9 01       	movw	r24, r18
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	4e 96       	adiw	r24, 0x1e	; 30
    11ea:	dc 01       	movw	r26, r24
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	c9 01       	movw	r24, r18
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	4e 96       	adiw	r24, 0x1e	; 30
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <__stack+0x115>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	2a 95       	dec	r18
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <__stack+0x111>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    121e:	8e 81       	ldd	r24, Y+6	; 0x06
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	c9 01       	movw	r24, r18
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	82 0f       	add	r24, r18
    122c:	93 1f       	adc	r25, r19
    122e:	4f 96       	adiw	r24, 0x1f	; 31
    1230:	dc 01       	movw	r26, r24
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	4f 96       	adiw	r24, 0x1f	; 31
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <__stack+0x15b>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	2a 95       	dec	r18
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <__stack+0x157>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
	}
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1262:	8a e0       	ldi	r24, 0x0A	; 10
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 c1 1c 	call	0x3982	; 0x3982 <malloc>
    126a:	98 87       	std	Y+8, r25	; 0x08
    126c:	8f 83       	std	Y+7, r24	; 0x07
    if(input == NULL)
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	98 85       	ldd	r25, Y+8	; 0x08
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	19 f4       	brne	.+6      	; 0x127c <__stack+0x17d>
        return 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	8c 87       	std	Y+12, r24	; 0x0c
    127a:	10 c0       	rjmp	.+32     	; 0x129c <__stack+0x19d>

    input->pin       = pin;
    127c:	ef 81       	ldd	r30, Y+7	; 0x07
    127e:	f8 85       	ldd	r31, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	80 83       	st	Z, r24
    input->pulled_up = pulled_up;
    1284:	ef 81       	ldd	r30, Y+7	; 0x07
    1286:	f8 85       	ldd	r31, Y+8	; 0x08
    1288:	8b 85       	ldd	r24, Y+11	; 0x0b
    128a:	81 83       	std	Z+1, r24	; 0x01
    list_add(&input->list, &gpio_inputs);
    128c:	8f 81       	ldd	r24, Y+7	; 0x07
    128e:	98 85       	ldd	r25, Y+8	; 0x08
    1290:	06 96       	adiw	r24, 0x06	; 6
    1292:	26 e0       	ldi	r18, 0x06	; 6
    1294:	31 e0       	ldi	r19, 0x01	; 1
    1296:	b9 01       	movw	r22, r18
    1298:	0b d0       	rcall	.+22     	; 0x12b0 <list_add>

    return 0;
    129a:	1c 86       	std	Y+12, r1	; 0x0c
    129c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    129e:	2c 96       	adiw	r28, 0x0c	; 12
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <list_add>:
    new->prev = prev;
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <list_add+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <list_add+0x8>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	7c 83       	std	Y+4, r23	; 0x04
    12c2:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	42 81       	ldd	r20, Z+2	; 0x02
    12ca:	53 81       	ldd	r21, Z+3	; 0x03
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	b9 01       	movw	r22, r18
    12d6:	07 d0       	rcall	.+14     	; 0x12e6 <__list_add>
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <__list_add+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <__list_add+0x8>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <__list_add+0xa>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	7c 83       	std	Y+4, r23	; 0x04
    12fa:	6b 83       	std	Y+3, r22	; 0x03
    12fc:	5e 83       	std	Y+6, r21	; 0x06
    12fe:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1300:	ed 81       	ldd	r30, Y+5	; 0x05
    1302:	fe 81       	ldd	r31, Y+6	; 0x06
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
    new->next = next;
    130c:	e9 81       	ldd	r30, Y+1	; 0x01
    130e:	fa 81       	ldd	r31, Y+2	; 0x02
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	93 83       	std	Z+3, r25	; 0x03
    1316:	82 83       	std	Z+2, r24	; 0x02
    new->prev = prev;
    1318:	e9 81       	ldd	r30, Y+1	; 0x01
    131a:	fa 81       	ldd	r31, Y+2	; 0x02
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24
    prev->next = new;
    1324:	eb 81       	ldd	r30, Y+3	; 0x03
    1326:	fc 81       	ldd	r31, Y+4	; 0x04
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	82 83       	std	Z+2, r24	; 0x02
}
    1330:	26 96       	adiw	r28, 0x06	; 6
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <__gpio_read_pin>:
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
	return 0;
}

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <__gpio_read_pin+0x6>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	86 95       	lsr	r24
    1354:	86 95       	lsr	r24
    1356:	86 95       	lsr	r24
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	8a 83       	std	Y+2, r24	; 0x02
    pin = pin % 8;
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	87 70       	andi	r24, 0x07	; 7
    1360:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	c9 01       	movw	r24, r18
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	4d 96       	adiw	r24, 0x1d	; 29
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	89 83       	std	Y+1, r24	; 0x01

    return ((temp >> pin) & 0x01);
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <__gpio_read_pin+0x4c>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <__gpio_read_pin+0x48>
    1392:	ca 01       	movw	r24, r20
    1394:	81 70       	andi	r24, 0x01	; 1
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	2b 97       	sbiw	r28, 0x0b	; 11
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13b8:	80 91 08 01 	lds	r24, 0x0108
    13bc:	90 91 09 01 	lds	r25, 0x0109
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	06 97       	sbiw	r24, 0x06	; 6
    13ca:	98 87       	std	Y+8, r25	; 0x08
    13cc:	8f 83       	std	Y+7, r24	; 0x07
    13ce:	55 c0       	rjmp	.+170    	; 0x147a <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    13d0:	ef 81       	ldd	r30, Y+7	; 0x07
    13d2:	f8 85       	ldd	r31, Y+8	; 0x08
    13d4:	90 81       	ld	r25, Z
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	98 17       	cp	r25, r24
    13da:	09 f0       	breq	.+2      	; 0x13de <gpio_read_pin+0x3c>
    13dc:	43 c0       	rjmp	.+134    	; 0x1464 <gpio_read_pin+0xc2>
        {
            uint8_t i = 0;
    13de:	1c 82       	std	Y+4, r1	; 0x04
    13e0:	21 c0       	rjmp	.+66     	; 0x1424 <gpio_read_pin+0x82>
            while(i < GPIO_DEBOUNCE_COUNT - 1)
            {
                if(input->values[i] != input->values[i + 1])
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	82 0f       	add	r24, r18
    13ee:	93 1f       	adc	r25, r19
    13f0:	fc 01       	movw	r30, r24
    13f2:	32 96       	adiw	r30, 0x02	; 2
    13f4:	40 81       	ld	r20, Z
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 01       	movw	r18, r24
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	82 0f       	add	r24, r18
    1408:	93 1f       	adc	r25, r19
    140a:	fc 01       	movw	r30, r24
    140c:	32 96       	adiw	r30, 0x02	; 2
    140e:	80 81       	ld	r24, Z
    1410:	48 17       	cp	r20, r24
    1412:	29 f0       	breq	.+10     	; 0x141e <gpio_read_pin+0x7c>
                    return input->previous_state;
    1414:	ef 81       	ldd	r30, Y+7	; 0x07
    1416:	f8 85       	ldd	r31, Y+8	; 0x08
    1418:	25 81       	ldd	r18, Z+5	; 0x05
    141a:	2b 87       	std	Y+11, r18	; 0x0b
    141c:	38 c0       	rjmp	.+112    	; 0x148e <gpio_read_pin+0xec>
                i++;
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8c 83       	std	Y+4, r24	; 0x04
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	e0 f2       	brcs	.-72     	; 0x13e2 <gpio_read_pin+0x40>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    142a:	ef 81       	ldd	r30, Y+7	; 0x07
    142c:	f8 85       	ldd	r31, Y+8	; 0x08
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 27       	eor	r24, r25
    1434:	88 23       	and	r24, r24
    1436:	29 f0       	breq	.+10     	; 0x1442 <gpio_read_pin+0xa0>
    1438:	ef 81       	ldd	r30, Y+7	; 0x07
    143a:	f8 85       	ldd	r31, Y+8	; 0x08
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	8a 87       	std	Y+10, r24	; 0x0a
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <gpio_read_pin+0xb0>
    1442:	ef 81       	ldd	r30, Y+7	; 0x07
    1444:	f8 85       	ldd	r31, Y+8	; 0x08
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	1a 86       	std	Y+10, r1	; 0x0a
    144a:	88 23       	and	r24, r24
    144c:	11 f4       	brne	.+4      	; 0x1452 <gpio_read_pin+0xb0>
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	2a 87       	std	Y+10, r18	; 0x0a
    1452:	8a 85       	ldd	r24, Y+10	; 0x0a
    1454:	8b 83       	std	Y+3, r24	; 0x03
            input->previous_state = state;
    1456:	ef 81       	ldd	r30, Y+7	; 0x07
    1458:	f8 85       	ldd	r31, Y+8	; 0x08
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	85 83       	std	Z+5, r24	; 0x05

            return state;
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	2b 87       	std	Y+11, r18	; 0x0b
    1462:	15 c0       	rjmp	.+42     	; 0x148e <gpio_read_pin+0xec>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1464:	ef 81       	ldd	r30, Y+7	; 0x07
    1466:	f8 85       	ldd	r31, Y+8	; 0x08
    1468:	80 85       	ldd	r24, Z+8	; 0x08
    146a:	91 85       	ldd	r25, Z+9	; 0x09
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	06 97       	sbiw	r24, 0x06	; 6
    1476:	98 87       	std	Y+8, r25	; 0x08
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	8f 81       	ldd	r24, Y+7	; 0x07
    147c:	98 85       	ldd	r25, Y+8	; 0x08
    147e:	06 96       	adiw	r24, 0x06	; 6
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	86 30       	cpi	r24, 0x06	; 6
    1484:	92 07       	cpc	r25, r18
    1486:	09 f0       	breq	.+2      	; 0x148a <gpio_read_pin+0xe8>
    1488:	a3 cf       	rjmp	.-186    	; 0x13d0 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	8b 87       	std	Y+11, r24	; 0x0b
    148e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1490:	2b 96       	adiw	r28, 0x0b	; 11
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <gpio_debouncer+0xa>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <gpio_debouncer+0xc>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <gpio_debouncer+0xe>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14b4:	80 91 08 01 	lds	r24, 0x0108
    14b8:	90 91 09 01 	lds	r25, 0x0109
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	06 97       	sbiw	r24, 0x06	; 6
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	1b c0       	rjmp	.+54     	; 0x1502 <gpio_debouncer+0x60>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    14cc:	00 91 a6 01 	lds	r16, 0x01A6
    14d0:	10 91 a7 01 	lds	r17, 0x01A7
    14d4:	ed 81       	ldd	r30, Y+5	; 0x05
    14d6:	fe 81       	ldd	r31, Y+6	; 0x06
    14d8:	80 81       	ld	r24, Z
    14da:	33 df       	rcall	.-410    	; 0x1342 <__gpio_read_pin>
    14dc:	28 2f       	mov	r18, r24
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	80 0f       	add	r24, r16
    14e4:	91 1f       	adc	r25, r17
    14e6:	fc 01       	movw	r30, r24
    14e8:	32 96       	adiw	r30, 0x02	; 2
    14ea:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14ec:	ed 81       	ldd	r30, Y+5	; 0x05
    14ee:	fe 81       	ldd	r31, Y+6	; 0x06
    14f0:	80 85       	ldd	r24, Z+8	; 0x08
    14f2:	91 85       	ldd	r25, Z+9	; 0x09
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	06 97       	sbiw	r24, 0x06	; 6
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	06 96       	adiw	r24, 0x06	; 6
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	86 30       	cpi	r24, 0x06	; 6
    150c:	92 07       	cpc	r25, r18
    150e:	f1 f6       	brne	.-68     	; 0x14cc <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1510:	80 91 a6 01 	lds	r24, 0x01A6
    1514:	90 91 a7 01 	lds	r25, 0x01A7
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	90 93 a7 01 	sts	0x01A7, r25
    151e:	80 93 a6 01 	sts	0x01A6, r24
    1522:	80 91 a6 01 	lds	r24, 0x01A6
    1526:	90 91 a7 01 	lds	r25, 0x01A7
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	21 f4       	brne	.+8      	; 0x1538 <gpio_debouncer+0x96>
        count = 0;
    1530:	10 92 a7 01 	sts	0x01A7, r1
    1534:	10 92 a6 01 	sts	0x01A6, r1
	
}
    1538:	26 96       	adiw	r28, 0x06	; 6
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <odometry_set_speed>:
	.angle = 0,
	.state = IDLE
};

void odometry_set_speed(uint8_t speed)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	67 97       	sbiw	r28, 0x17	; 23
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1564:	90 91 a8 01 	lds	r25, 0x01A8
    1568:	8f 89       	ldd	r24, Y+23	; 0x17
    156a:	89 17       	cp	r24, r25
    156c:	09 f4       	brne	.+2      	; 0x1570 <odometry_set_speed+0x22>
    156e:	81 c0       	rjmp	.+258    	; 0x1672 <odometry_set_speed+0x124>
	return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1570:	86 e5       	ldi	r24, 0x56	; 86
    1572:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1574:	8f 89       	ldd	r24, Y+23	; 0x17
    1576:	88 8b       	std	Y+16, r24	; 0x10
    1578:	72 c0       	rjmp	.+228    	; 0x165e <odometry_set_speed+0x110>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a8 e4       	ldi	r26, 0x48	; 72
    1580:	b2 e4       	ldi	r27, 0x42	; 66
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e4       	ldi	r19, 0x40	; 64
    1596:	4c e1       	ldi	r20, 0x1C	; 28
    1598:	55 e4       	ldi	r21, 0x45	; 69
    159a:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <odometry_set_speed+0x7e>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <odometry_set_speed+0xde>
    160e:	8a ef       	ldi	r24, 0xFA	; 250
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <odometry_set_speed+0xcc>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <odometry_set_speed+0xc0>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <odometry_set_speed+0x108>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	ce 01       	movw	r24, r28
    1660:	0f 96       	adiw	r24, 0x0f	; 15
    1662:	63 ec       	ldi	r22, 0xC3	; 195
    1664:	af dc       	rcall	.-1698   	; 0xfc4 <CAN_Write>
    1666:	88 23       	and	r24, r24
    1668:	09 f0       	breq	.+2      	; 0x166c <odometry_set_speed+0x11e>
    166a:	87 cf       	rjmp	.-242    	; 0x157a <odometry_set_speed+0x2c>
	_delay_ms(50);

	current_speed = speed;
    166c:	8f 89       	ldd	r24, Y+23	; 0x17
    166e:	80 93 a8 01 	sts	0x01A8, r24
}
    1672:	67 96       	adiw	r28, 0x17	; 23
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <odometry_query_position>:

static void odometry_query_position(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	66 97       	sbiw	r28, 0x16	; 22
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1698:	80 e5       	ldi	r24, 0x50	; 80
    169a:	8f 87       	std	Y+15, r24	; 0x0f
    169c:	72 c0       	rjmp	.+228    	; 0x1782 <odometry_query_position+0xfe>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a8 e4       	ldi	r26, 0x48	; 72
    16a4:	b2 e4       	ldi	r27, 0x42	; 66
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e4       	ldi	r19, 0x40	; 64
    16ba:	4c e1       	ldi	r20, 0x1C	; 28
    16bc:	55 e4       	ldi	r21, 0x45	; 69
    16be:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <odometry_query_position+0x6c>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <odometry_query_position+0xea>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <odometry_query_position+0xcc>
    1732:	8a ef       	ldi	r24, 0xFA	; 250
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <odometry_query_position+0xba>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <odometry_query_position+0xae>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <odometry_query_position+0xf6>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	ce 01       	movw	r24, r28
    1784:	0f 96       	adiw	r24, 0x0f	; 15
    1786:	63 ec       	ldi	r22, 0xC3	; 195
    1788:	1d dc       	rcall	.-1990   	; 0xfc4 <CAN_Write>
    178a:	88 23       	and	r24, r24
    178c:	09 f0       	breq	.+2      	; 0x1790 <odometry_query_position+0x10c>
    178e:	87 cf       	rjmp	.-242    	; 0x169e <odometry_query_position+0x1a>
		_delay_ms(50);
	//uso
	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1790:	ce 01       	movw	r24, r28
    1792:	0f 96       	adiw	r24, 0x0f	; 15
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	9e db       	rcall	.-2244   	; 0xed4 <CAN_Read>
	//nije uso
	position.state = buffer[0];
    1798:	8f 85       	ldd	r24, Y+15	; 0x0f
    179a:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    179e:	88 89       	ldd	r24, Y+16	; 0x10
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	38 2f       	mov	r19, r24
    17a6:	22 27       	eor	r18, r18
    17a8:	89 89       	ldd	r24, Y+17	; 0x11
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	82 2b       	or	r24, r18
    17b0:	93 2b       	or	r25, r19
    17b2:	90 93 0b 01 	sts	0x010B, r25
    17b6:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    17ba:	8a 89       	ldd	r24, Y+18	; 0x12
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	38 2f       	mov	r19, r24
    17c2:	22 27       	eor	r18, r18
    17c4:	8b 89       	ldd	r24, Y+19	; 0x13
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	82 2b       	or	r24, r18
    17cc:	93 2b       	or	r25, r19
    17ce:	90 93 0d 01 	sts	0x010D, r25
    17d2:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    17d6:	8c 89       	ldd	r24, Y+20	; 0x14
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	38 2f       	mov	r19, r24
    17de:	22 27       	eor	r18, r18
    17e0:	8d 89       	ldd	r24, Y+21	; 0x15
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	82 2b       	or	r24, r18
    17e8:	93 2b       	or	r25, r19
    17ea:	90 93 0f 01 	sts	0x010F, r25
    17ee:	80 93 0e 01 	sts	0x010E, r24
}
    17f2:	66 96       	adiw	r28, 0x16	; 22
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <odometry_wait_until_done>:

static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	27 97       	sbiw	r28, 0x07	; 7
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    181c:	0e 94 3f 18 	call	0x307e	; 0x307e <system_get_system_time>
    1820:	aa 27       	eor	r26, r26
    1822:	97 fd       	sbrc	r25, 7
    1824:	a0 95       	com	r26
    1826:	ba 2f       	mov	r27, r26
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	ab 83       	std	Y+3, r26	; 0x03
    182e:	bc 83       	std	Y+4, r27	; 0x04
	//uso
	do
	{
		//uso
		odometry_query_position();
    1830:	29 df       	rcall	.-430    	; 0x1684 <odometry_query_position>
		//nije uso
		if(callback != NULL)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	71 f0       	breq	.+28     	; 0x1856 <odometry_wait_until_done+0x52>
		{
			if(callback(time) == 1)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	ab 81       	ldd	r26, Y+3	; 0x03
    1840:	bc 81       	ldd	r27, Y+4	; 0x04
    1842:	ed 81       	ldd	r30, Y+5	; 0x05
    1844:	fe 81       	ldd	r31, Y+6	; 0x06
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	09 95       	icall
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	19 f4       	brne	.+6      	; 0x1856 <odometry_wait_until_done+0x52>
				return ODOMETRY_FAIL;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	8f 83       	std	Y+7, r24	; 0x07
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <odometry_wait_until_done+0x64>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1856:	80 91 10 01 	lds	r24, 0x0110
    185a:	8d 34       	cpi	r24, 0x4D	; 77
    185c:	49 f3       	breq	.-46     	; 0x1830 <odometry_wait_until_done+0x2c>
    185e:	80 91 10 01 	lds	r24, 0x0110
    1862:	82 35       	cpi	r24, 0x52	; 82
    1864:	29 f3       	breq	.-54     	; 0x1830 <odometry_wait_until_done+0x2c>
	
	return ODOMETRY_SUCCESS;
    1866:	1f 82       	std	Y+7, r1	; 0x07
    1868:	8f 81       	ldd	r24, Y+7	; 0x07
}
    186a:	27 96       	adiw	r28, 0x07	; 7
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <odometry_move_straight>:
		odometry_query_position();
	}while(position.state == MOVING || position.state == ROTATING);
}

uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	6b 97       	sbiw	r28, 0x1b	; 27
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	98 8f       	std	Y+24, r25	; 0x18
    1892:	8f 8b       	std	Y+23, r24	; 0x17
    1894:	69 8f       	std	Y+25, r22	; 0x19
    1896:	5b 8f       	std	Y+27, r21	; 0x1b
    1898:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    189a:	89 8d       	ldd	r24, Y+25	; 0x19
    189c:	58 de       	rcall	.-848    	; 0x154e <odometry_set_speed>
	distance *= -1;
    189e:	8f 89       	ldd	r24, Y+23	; 0x17
    18a0:	98 8d       	ldd	r25, Y+24	; 0x18
    18a2:	90 95       	com	r25
    18a4:	81 95       	neg	r24
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	98 8f       	std	Y+24, r25	; 0x18
    18aa:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'D';
    18ac:	84 e4       	ldi	r24, 0x44	; 68
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    18b0:	8f 89       	ldd	r24, Y+23	; 0x17
    18b2:	98 8d       	ldd	r25, Y+24	; 0x18
    18b4:	89 2f       	mov	r24, r25
    18b6:	99 0f       	add	r25, r25
    18b8:	99 0b       	sbc	r25, r25
    18ba:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	89 8b       	std	Y+17, r24	; 0x11
    18c0:	72 c0       	rjmp	.+228    	; 0x19a6 <odometry_move_straight+0x12a>
	
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a8 e4       	ldi	r26, 0x48	; 72
    18c8:	b2 e4       	ldi	r27, 0x42	; 66
    18ca:	8b 87       	std	Y+11, r24	; 0x0b
    18cc:	9c 87       	std	Y+12, r25	; 0x0c
    18ce:	ad 87       	std	Y+13, r26	; 0x0d
    18d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e4       	ldi	r19, 0x40	; 64
    18de:	4c e1       	ldi	r20, 0x1C	; 28
    18e0:	55 e4       	ldi	r21, 0x45	; 69
    18e2:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8f 83       	std	Y+7, r24	; 0x07
    18ec:	98 87       	std	Y+8, r25	; 0x08
    18ee:	a9 87       	std	Y+9, r26	; 0x09
    18f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <odometry_move_straight+0x98>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <odometry_move_straight+0x116>
	else if (__tmp > 65535)
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <odometry_move_straight+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6b 85       	ldd	r22, Y+11	; 0x0b
    192e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1930:	8d 85       	ldd	r24, Y+13	; 0x0d
    1932:	9e 85       	ldd	r25, Y+14	; 0x0e
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <odometry_move_straight+0xf8>
    1956:	8a ef       	ldi	r24, 0xFA	; 250
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <odometry_move_straight+0xe6>
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <odometry_move_straight+0xda>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <odometry_move_straight+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <odometry_move_straight+0x122>
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	ce 01       	movw	r24, r28
    19a8:	0f 96       	adiw	r24, 0x0f	; 15
    19aa:	63 ec       	ldi	r22, 0xC3	; 195
    19ac:	0b db       	rcall	.-2538   	; 0xfc4 <CAN_Write>
    19ae:	88 23       	and	r24, r24
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <odometry_move_straight+0x138>
    19b2:	87 cf       	rjmp	.-242    	; 0x18c2 <odometry_move_straight+0x46>
		_delay_ms(50);
		
	return odometry_wait_until_done(callback);
    19b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19b8:	25 df       	rcall	.-438    	; 0x1804 <odometry_wait_until_done>
}
    19ba:	6b 96       	adiw	r28, 0x1b	; 27
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <odometry_move_to_position>:

uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, int8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	6c 97       	sbiw	r28, 0x1c	; 28
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	98 8f       	std	Y+24, r25	; 0x18
    19e2:	8f 8b       	std	Y+23, r24	; 0x17
    19e4:	69 8f       	std	Y+25, r22	; 0x19
    19e6:	4a 8f       	std	Y+26, r20	; 0x1a
    19e8:	3c 8f       	std	Y+28, r19	; 0x1c
    19ea:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    19ec:	89 8d       	ldd	r24, Y+25	; 0x19
    19ee:	af dd       	rcall	.-1186   	; 0x154e <odometry_set_speed>

	buffer[0] = 'G';
    19f0:	87 e4       	ldi	r24, 0x47	; 71
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    19f4:	ef 89       	ldd	r30, Y+23	; 0x17
    19f6:	f8 8d       	ldd	r31, Y+24	; 0x18
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	89 2f       	mov	r24, r25
    19fe:	99 0f       	add	r25, r25
    1a00:	99 0b       	sbc	r25, r25
    1a02:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1a04:	ef 89       	ldd	r30, Y+23	; 0x17
    1a06:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1a0e:	ef 89       	ldd	r30, Y+23	; 0x17
    1a10:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	89 2f       	mov	r24, r25
    1a18:	99 0f       	add	r25, r25
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1a1e:	ef 89       	ldd	r30, Y+23	; 0x17
    1a20:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1a28:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction * -1;
    1a2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a2c:	81 95       	neg	r24
    1a2e:	8d 8b       	std	Y+21, r24	; 0x15
    1a30:	72 c0       	rjmp	.+228    	; 0x1b16 <odometry_move_to_position+0x14a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a8 e4       	ldi	r26, 0x48	; 72
    1a38:	b2 e4       	ldi	r27, 0x42	; 66
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	ad 87       	std	Y+13, r26	; 0x0d
    1a40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e4       	ldi	r19, 0x40	; 64
    1a4e:	4c e1       	ldi	r20, 0x1C	; 28
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
    1a5c:	98 87       	std	Y+8, r25	; 0x08
    1a5e:	a9 87       	std	Y+9, r26	; 0x09
    1a60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <odometry_move_to_position+0xb8>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <odometry_move_to_position+0x136>
	else if (__tmp > 65535)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <odometry_move_to_position+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <odometry_move_to_position+0x118>
    1ac6:	8a ef       	ldi	r24, 0xFA	; 250
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <odometry_move_to_position+0x106>
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <odometry_move_to_position+0xfa>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <odometry_move_to_position+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <odometry_move_to_position+0x142>
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	ce 01       	movw	r24, r28
    1b18:	0f 96       	adiw	r24, 0x0f	; 15
    1b1a:	63 ec       	ldi	r22, 0xC3	; 195
    1b1c:	53 da       	rcall	.-2906   	; 0xfc4 <CAN_Write>
    1b1e:	88 23       	and	r24, r24
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <odometry_move_to_position+0x158>
    1b22:	87 cf       	rjmp	.-242    	; 0x1a32 <odometry_move_to_position+0x66>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b28:	6d de       	rcall	.-806    	; 0x1804 <odometry_wait_until_done>
}
    1b2a:	6c 96       	adiw	r28, 0x1c	; 28
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	69 97       	sbiw	r28, 0x19	; 25
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	99 8f       	std	Y+25, r25	; 0x19
    1b52:	88 8f       	std	Y+24, r24	; 0x18
	uint8_t buffer[8];

	buffer[0] = 'I';
    1b54:	89 e4       	ldi	r24, 0x49	; 73
    1b56:	88 8b       	std	Y+16, r24	; 0x10
	buffer[1] = new_position->x >> 8;
    1b58:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b5a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	89 2f       	mov	r24, r25
    1b62:	99 0f       	add	r25, r25
    1b64:	99 0b       	sbc	r25, r25
    1b66:	89 8b       	std	Y+17, r24	; 0x11
	buffer[2] = new_position->x & 0xFF;
    1b68:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b6a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[3] = new_position->y >> 8;
    1b72:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b74:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	89 2f       	mov	r24, r25
    1b7c:	99 0f       	add	r25, r25
    1b7e:	99 0b       	sbc	r25, r25
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[4] = new_position->y & 0xFF;
    1b82:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b84:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	8c 8b       	std	Y+20, r24	; 0x14
	
	int8_t temp = new_position->angle * -1;
    1b8c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b8e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b90:	84 81       	ldd	r24, Z+4	; 0x04
    1b92:	95 81       	ldd	r25, Z+5	; 0x05
    1b94:	81 95       	neg	r24
    1b96:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[5] = temp >> 8;
    1b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9a:	99 27       	eor	r25, r25
    1b9c:	87 fd       	sbrc	r24, 7
    1b9e:	90 95       	com	r25
    1ba0:	89 2f       	mov	r24, r25
    1ba2:	99 0f       	add	r25, r25
    1ba4:	99 0b       	sbc	r25, r25
    1ba6:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[6] = temp & 0xFF;
    1ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1baa:	8e 8b       	std	Y+22, r24	; 0x16

	position.x	   = new_position->x;
    1bac:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bae:	f9 8d       	ldd	r31, Y+25	; 0x19
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	90 93 0b 01 	sts	0x010B, r25
    1bb8:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    1bbc:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bbe:	f9 8d       	ldd	r31, Y+25	; 0x19
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	90 93 0d 01 	sts	0x010D, r25
    1bc8:	80 93 0c 01 	sts	0x010C, r24
	position.angle = -1 * new_position->angle;
    1bcc:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bce:	f9 8d       	ldd	r31, Y+25	; 0x19
    1bd0:	84 81       	ldd	r24, Z+4	; 0x04
    1bd2:	95 81       	ldd	r25, Z+5	; 0x05
    1bd4:	90 95       	com	r25
    1bd6:	81 95       	neg	r24
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	90 93 0f 01 	sts	0x010F, r25
    1bde:	80 93 0e 01 	sts	0x010E, r24
    1be2:	72 c0       	rjmp	.+228    	; 0x1cc8 <odometry_set_position+0x18c>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a8 e4       	ldi	r26, 0x48	; 72
    1bea:	b2 e4       	ldi	r27, 0x42	; 66
    1bec:	8b 87       	std	Y+11, r24	; 0x0b
    1bee:	9c 87       	std	Y+12, r25	; 0x0c
    1bf0:	ad 87       	std	Y+13, r26	; 0x0d
    1bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e4       	ldi	r19, 0x40	; 64
    1c00:	4c e1       	ldi	r20, 0x1C	; 28
    1c02:	55 e4       	ldi	r21, 0x45	; 69
    1c04:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
    1c0e:	98 87       	std	Y+8, r25	; 0x08
    1c10:	a9 87       	std	Y+9, r26	; 0x09
    1c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <odometry_set_position+0xfa>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	3f c0       	rjmp	.+126    	; 0x1cb4 <odometry_set_position+0x178>
	else if (__tmp > 65535)
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	3f ef       	ldi	r19, 0xFF	; 255
    1c42:	4f e7       	ldi	r20, 0x7F	; 127
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1c4a:	18 16       	cp	r1, r24
    1c4c:	4c f5       	brge	.+82     	; 0x1ca0 <odometry_set_position+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <odometry_set_position+0x15a>
    1c78:	8a ef       	ldi	r24, 0xFA	; 250
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <odometry_set_position+0x148>
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <odometry_set_position+0x13c>
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <odometry_set_position+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <odometry_set_position+0x184>
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	ce 01       	movw	r24, r28
    1cca:	40 96       	adiw	r24, 0x10	; 16
    1ccc:	63 ec       	ldi	r22, 0xC3	; 195
    1cce:	7a d9       	rcall	.-3340   	; 0xfc4 <CAN_Write>
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <odometry_set_position+0x19a>
    1cd4:	87 cf       	rjmp	.-242    	; 0x1be4 <odometry_set_position+0xa8>
		_delay_ms(50);
}
    1cd6:	69 96       	adiw	r28, 0x19	; 25
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <odometry_rotate>:

uint8_t odometry_rotate(int16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	6b 97       	sbiw	r28, 0x1b	; 27
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	98 8f       	std	Y+24, r25	; 0x18
    1cfe:	8f 8b       	std	Y+23, r24	; 0x17
    1d00:	69 8f       	std	Y+25, r22	; 0x19
    1d02:	5b 8f       	std	Y+27, r21	; 0x1b
    1d04:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1d06:	89 8d       	ldd	r24, Y+25	; 0x19
    1d08:	22 dc       	rcall	.-1980   	; 0x154e <odometry_set_speed>

	angle *= -1;
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	90 95       	com	r25
    1d10:	81 95       	neg	r24
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	98 8f       	std	Y+24, r25	; 0x18
    1d16:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'T';
    1d18:	84 e5       	ldi	r24, 0x54	; 84
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d20:	89 2f       	mov	r24, r25
    1d22:	99 0f       	add	r25, r25
    1d24:	99 0b       	sbc	r25, r25
    1d26:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	72 c0       	rjmp	.+228    	; 0x1e12 <odometry_rotate+0x12a>

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a8 e4       	ldi	r26, 0x48	; 72
    1d34:	b2 e4       	ldi	r27, 0x42	; 66
    1d36:	8b 87       	std	Y+11, r24	; 0x0b
    1d38:	9c 87       	std	Y+12, r25	; 0x0c
    1d3a:	ad 87       	std	Y+13, r26	; 0x0d
    1d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e4       	ldi	r19, 0x40	; 64
    1d4a:	4c e1       	ldi	r20, 0x1C	; 28
    1d4c:	55 e4       	ldi	r21, 0x45	; 69
    1d4e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8f 83       	std	Y+7, r24	; 0x07
    1d58:	98 87       	std	Y+8, r25	; 0x08
    1d5a:	a9 87       	std	Y+9, r26	; 0x09
    1d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <odometry_rotate+0x98>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <odometry_rotate+0x116>
	else if (__tmp > 65535)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <odometry_rotate+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <odometry_rotate+0xf8>
    1dc2:	8a ef       	ldi	r24, 0xFA	; 250
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <odometry_rotate+0xe6>
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <odometry_rotate+0xda>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <odometry_rotate+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <odometry_rotate+0x122>
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	ce 01       	movw	r24, r28
    1e14:	0f 96       	adiw	r24, 0x0f	; 15
    1e16:	63 ec       	ldi	r22, 0xC3	; 195
    1e18:	d5 d8       	rcall	.-3670   	; 0xfc4 <CAN_Write>
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <odometry_rotate+0x138>
    1e1e:	87 cf       	rjmp	.-242    	; 0x1d2e <odometry_rotate+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e24:	ef dc       	rcall	.-1570   	; 0x1804 <odometry_wait_until_done>

}
    1e26:	6b 96       	adiw	r28, 0x1b	; 27
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <odometry_set_angle>:

uint8_t odometry_set_angle(int16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	6b 97       	sbiw	r28, 0x1b	; 27
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	98 8f       	std	Y+24, r25	; 0x18
    1e4e:	8f 8b       	std	Y+23, r24	; 0x17
    1e50:	69 8f       	std	Y+25, r22	; 0x19
    1e52:	5b 8f       	std	Y+27, r21	; 0x1b
    1e54:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e56:	89 8d       	ldd	r24, Y+25	; 0x19
    1e58:	7a db       	rcall	.-2316   	; 0x154e <odometry_set_speed>

	angle *= -1;
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	90 95       	com	r25
    1e60:	81 95       	neg	r24
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	98 8f       	std	Y+24, r25	; 0x18
    1e66:	8f 8b       	std	Y+23, r24	; 0x17
	buffer[0] = 'A';
    1e68:	81 e4       	ldi	r24, 0x41	; 65
    1e6a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e70:	89 2f       	mov	r24, r25
    1e72:	99 0f       	add	r25, r25
    1e74:	99 0b       	sbc	r25, r25
    1e76:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	89 8b       	std	Y+17, r24	; 0x11
    1e7c:	72 c0       	rjmp	.+228    	; 0x1f62 <odometry_set_angle+0x12a>
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a8 e4       	ldi	r26, 0x48	; 72
    1e84:	b2 e4       	ldi	r27, 0x42	; 66
    1e86:	8b 87       	std	Y+11, r24	; 0x0b
    1e88:	9c 87       	std	Y+12, r25	; 0x0c
    1e8a:	ad 87       	std	Y+13, r26	; 0x0d
    1e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e4       	ldi	r19, 0x40	; 64
    1e9a:	4c e1       	ldi	r20, 0x1C	; 28
    1e9c:	55 e4       	ldi	r21, 0x45	; 69
    1e9e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8f 83       	std	Y+7, r24	; 0x07
    1ea8:	98 87       	std	Y+8, r25	; 0x08
    1eaa:	a9 87       	std	Y+9, r26	; 0x09
    1eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <odometry_set_angle+0x98>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <odometry_set_angle+0x116>
	else if (__tmp > 65535)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <odometry_set_angle+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <odometry_set_angle+0xf8>
    1f12:	8a ef       	ldi	r24, 0xFA	; 250
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <odometry_set_angle+0xe6>
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <odometry_set_angle+0xda>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <odometry_set_angle+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <odometry_set_angle+0x122>
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	ce 01       	movw	r24, r28
    1f64:	0f 96       	adiw	r24, 0x0f	; 15
    1f66:	63 ec       	ldi	r22, 0xC3	; 195
    1f68:	2d d8       	rcall	.-4006   	; 0xfc4 <CAN_Write>
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <odometry_set_angle+0x138>
    1f6e:	87 cf       	rjmp	.-242    	; 0x1e7e <odometry_set_angle+0x46>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f74:	47 dc       	rcall	.-1906   	; 0x1804 <odometry_wait_until_done>
}
    1f76:	6b 96       	adiw	r28, 0x1b	; 27
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <grabbers_down_purple>:


char grabbers_down_purple(uint32_t start_time)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <grabbers_down_purple+0x6>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <grabbers_down_purple+0x8>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	69 83       	std	Y+1, r22	; 0x01
    1f96:	7a 83       	std	Y+2, r23	; 0x02
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_down();
    1f9c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <servo_set_grabbers_down>
	return 0;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <grabbers_up_purple>:
char grabbers_up_purple(uint32_t start_time)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <grabbers_up_purple+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <grabbers_up_purple+0x8>
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	69 83       	std	Y+1, r22	; 0x01
    1fbe:	7a 83       	std	Y+2, r23	; 0x02
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
	servo_set_grabbers_up();
    1fc4:	0e 94 55 03 	call	0x6aa	; 0x6aa <servo_set_grabbers_up>
	return 0;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <purpleside>:
	{{280,200},90,BACKWARD,grabbers_up_purple},					//POSITION 7			GOING INFRONT DOORS
	{{280,90},20,FORWARD,NULL}									//POSITION 8			GOING INTO THE DOORS

};
void purpleside(void)
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	cc 5a       	subi	r28, 0xAC	; 172
    1fe6:	d0 40       	sbci	r29, 0x00	; 0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position starting_position;
	struct odometry_position set_position; 
	uint8_t current_position = 0;
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e2 56       	subi	r30, 0x62	; 98
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	10 82       	st	Z, r1
	uint8_t next_position = 0;
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e3 56       	subi	r30, 0x63	; 99
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	10 82       	st	Z, r1
	uint8_t odometry_status;
	int8_t active_state = ROBOT_STATE_TACTIC_ONE;
    2002:	fe 01       	movw	r30, r28
    2004:	e5 56       	subi	r30, 0x65	; 101
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	80 83       	st	Z, r24
	
	starting_position.x		= 180;
    200c:	fe 01       	movw	r30, r28
    200e:	e1 56       	subi	r30, 0x61	; 97
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	84 eb       	ldi	r24, 0xB4	; 180
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
	starting_position.y		= 1010;
    201a:	fe 01       	movw	r30, r28
    201c:	e1 56       	subi	r30, 0x61	; 97
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	82 ef       	ldi	r24, 0xF2	; 242
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	93 83       	std	Z+3, r25	; 0x03
    2026:	82 83       	std	Z+2, r24	; 0x02
	starting_position.angle = 90;
    2028:	fe 01       	movw	r30, r28
    202a:	e1 56       	subi	r30, 0x61	; 97
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	8a e5       	ldi	r24, 0x5A	; 90
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	95 83       	std	Z+5, r25	; 0x05
    2034:	84 83       	std	Z+4, r24	; 0x04
	
	odometry_set_position(&starting_position);
    2036:	ce 01       	movw	r24, r28
    2038:	81 56       	subi	r24, 0x61	; 97
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	7f dd       	rcall	.-1282   	; 0x1b3c <odometry_set_position>
	
	while(1)
	{
		switch(active_state)
    203e:	fe 01       	movw	r30, r28
    2040:	e5 56       	subi	r30, 0x65	; 101
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	99 27       	eor	r25, r25
    2048:	87 fd       	sbrc	r24, 7
    204a:	90 95       	com	r25
    204c:	82 30       	cpi	r24, 0x02	; 2
    204e:	91 05       	cpc	r25, r1
    2050:	b1 f7       	brne	.-20     	; 0x203e <purpleside+0x66>
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2052:	fe 01       	movw	r30, r28
    2054:	e2 56       	subi	r30, 0x62	; 98
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	de 01       	movw	r26, r28
    205a:	a3 56       	subi	r26, 0x63	; 99
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	8c 91       	ld	r24, X
    2060:	80 83       	st	Z, r24
    2062:	36 c7       	rjmp	.+3692   	; 0x2ed0 <purpleside+0xef8>
				{
					odometry_status = odometry_move_to_position(&(purple_tactic_one_positions[current_position].point), purple_tactic_one_positions[current_position].speed,
    2064:	fe 01       	movw	r30, r28
    2066:	e2 56       	subi	r30, 0x62	; 98
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	ca 01       	movw	r24, r20
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	9c 01       	movw	r18, r24
    2078:	22 0f       	add	r18, r18
    207a:	33 1f       	adc	r19, r19
    207c:	22 0f       	add	r18, r18
    207e:	33 1f       	adc	r19, r19
    2080:	82 0f       	add	r24, r18
    2082:	93 1f       	adc	r25, r19
    2084:	84 0f       	add	r24, r20
    2086:	95 1f       	adc	r25, r21
    2088:	8f 5e       	subi	r24, 0xEF	; 239
    208a:	9e 4f       	sbci	r25, 0xFE	; 254
    208c:	bc 01       	movw	r22, r24
    208e:	fe 01       	movw	r30, r28
    2090:	e2 56       	subi	r30, 0x62	; 98
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	48 2f       	mov	r20, r24
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	ca 01       	movw	r24, r20
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	9c 01       	movw	r18, r24
    20a2:	22 0f       	add	r18, r18
    20a4:	33 1f       	adc	r19, r19
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	82 0f       	add	r24, r18
    20ac:	93 1f       	adc	r25, r19
    20ae:	84 0f       	add	r24, r20
    20b0:	95 1f       	adc	r25, r21
    20b2:	fc 01       	movw	r30, r24
    20b4:	e8 5e       	subi	r30, 0xE8	; 232
    20b6:	fe 4f       	sbci	r31, 0xFE	; 254
    20b8:	a0 81       	ld	r26, Z
    20ba:	fe 01       	movw	r30, r28
    20bc:	e2 56       	subi	r30, 0x62	; 98
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	ca 01       	movw	r24, r20
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	9c 01       	movw	r18, r24
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	82 0f       	add	r24, r18
    20d8:	93 1f       	adc	r25, r19
    20da:	84 0f       	add	r24, r20
    20dc:	95 1f       	adc	r25, r21
    20de:	fc 01       	movw	r30, r24
    20e0:	e7 5e       	subi	r30, 0xE7	; 231
    20e2:	fe 4f       	sbci	r31, 0xFE	; 254
    20e4:	80 81       	ld	r24, Z
    20e6:	b8 2f       	mov	r27, r24
    20e8:	fe 01       	movw	r30, r28
    20ea:	e2 56       	subi	r30, 0x62	; 98
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	ca 01       	movw	r24, r20
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	9c 01       	movw	r18, r24
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	82 0f       	add	r24, r18
    2106:	93 1f       	adc	r25, r19
    2108:	84 0f       	add	r24, r20
    210a:	95 1f       	adc	r25, r21
    210c:	fc 01       	movw	r30, r24
    210e:	e6 5e       	subi	r30, 0xE6	; 230
    2110:	fe 4f       	sbci	r31, 0xFE	; 254
    2112:	20 81       	ld	r18, Z
    2114:	31 81       	ldd	r19, Z+1	; 0x01
    2116:	cb 01       	movw	r24, r22
    2118:	6a 2f       	mov	r22, r26
    211a:	4b 2f       	mov	r20, r27
    211c:	57 dc       	rcall	.-1874   	; 0x19cc <odometry_move_to_position>
    211e:	fe 01       	movw	r30, r28
    2120:	e4 56       	subi	r30, 0x64	; 100
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 83       	st	Z, r24
																purple_tactic_one_positions[current_position].direction,purple_tactic_one_positions[current_position].callback); 
					if(odometry_status == ODOMETRY_FAIL)
    2126:	fe 01       	movw	r30, r28
    2128:	e4 56       	subi	r30, 0x64	; 100
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	09 f4       	brne	.+2      	; 0x2134 <purpleside+0x15c>
    2132:	85 cf       	rjmp	.-246    	; 0x203e <purpleside+0x66>
					{
						break;
					}
					else if(current_position == 1 || current_position == 3)
    2134:	fe 01       	movw	r30, r28
    2136:	e2 56       	subi	r30, 0x62	; 98
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	39 f0       	breq	.+14     	; 0x214e <purpleside+0x176>
    2140:	fe 01       	movw	r30, r28
    2142:	e2 56       	subi	r30, 0x62	; 98
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	83 30       	cpi	r24, 0x03	; 3
    214a:	09 f0       	breq	.+2      	; 0x214e <purpleside+0x176>
    214c:	b5 c0       	rjmp	.+362    	; 0x22b8 <purpleside+0x2e0>
    214e:	fe 01       	movw	r30, r28
    2150:	e9 56       	subi	r30, 0x69	; 105
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	aa e7       	ldi	r26, 0x7A	; 122
    215a:	b4 e4       	ldi	r27, 0x44	; 68
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	8e 01       	movw	r16, r28
    2166:	0d 56       	subi	r16, 0x6D	; 109
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	e9 56       	subi	r30, 0x69	; 105
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e4       	ldi	r19, 0x40	; 64
    217c:	4c e1       	ldi	r20, 0x1C	; 28
    217e:	55 e4       	ldi	r21, 0x45	; 69
    2180:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2192:	fe 01       	movw	r30, r28
    2194:	ed 56       	subi	r30, 0x6D	; 109
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	44 f4       	brge	.+16     	; 0x21c0 <purpleside+0x1e8>
		__ticks = 1;
    21b0:	fe 01       	movw	r30, r28
    21b2:	ef 56       	subi	r30, 0x6F	; 111
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	64 c0       	rjmp	.+200    	; 0x2288 <purpleside+0x2b0>
	else if (__tmp > 65535)
    21c0:	fe 01       	movw	r30, r28
    21c2:	ed 56       	subi	r30, 0x6D	; 109
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    21da:	18 16       	cp	r1, r24
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <purpleside+0x208>
    21de:	43 c0       	rjmp	.+134    	; 0x2266 <purpleside+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e0:	fe 01       	movw	r30, r28
    21e2:	e9 56       	subi	r30, 0x69	; 105
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8e 01       	movw	r16, r28
    2200:	0f 56       	subi	r16, 0x6F	; 111
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	f8 01       	movw	r30, r16
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
    2216:	1f c0       	rjmp	.+62     	; 0x2256 <purpleside+0x27e>
    2218:	fe 01       	movw	r30, r28
    221a:	e1 57       	subi	r30, 0x71	; 113
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	8a ef       	ldi	r24, 0xFA	; 250
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	fe 01       	movw	r30, r28
    2228:	e1 57       	subi	r30, 0x71	; 113
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <purpleside+0x258>
    2234:	fe 01       	movw	r30, r28
    2236:	e1 57       	subi	r30, 0x71	; 113
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	de 01       	movw	r26, r28
    2240:	af 56       	subi	r26, 0x6F	; 111
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	ef 56       	subi	r30, 0x6F	; 111
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	11 96       	adiw	r26, 0x01	; 1
    2252:	9c 93       	st	X, r25
    2254:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	fe 01       	movw	r30, r28
    2258:	ef 56       	subi	r30, 0x6F	; 111
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	d1 f6       	brne	.-76     	; 0x2218 <purpleside+0x240>
    2264:	2c c6       	rjmp	.+3160   	; 0x2ebe <purpleside+0xee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	8e 01       	movw	r16, r28
    2268:	0f 56       	subi	r16, 0x6F	; 111
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	fe 01       	movw	r30, r28
    226e:	ed 56       	subi	r30, 0x6D	; 109
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
    2288:	de 01       	movw	r26, r28
    228a:	a3 57       	subi	r26, 0x73	; 115
    228c:	bf 4f       	sbci	r27, 0xFF	; 255
    228e:	fe 01       	movw	r30, r28
    2290:	ef 56       	subi	r30, 0x6F	; 111
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	fe 01       	movw	r30, r28
    22a0:	e3 57       	subi	r30, 0x73	; 115
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <purpleside+0x2d0>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e3 57       	subi	r30, 0x73	; 115
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	03 c6       	rjmp	.+3078   	; 0x2ebe <purpleside+0xee6>
					{
						_delay_ms(1000);
					}
					else if(current_position == 6)
    22b8:	fe 01       	movw	r30, r28
    22ba:	e2 56       	subi	r30, 0x62	; 98
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	86 30       	cpi	r24, 0x06	; 6
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <purpleside+0x2ee>
    22c4:	e0 c2       	rjmp	.+1472   	; 0x2886 <purpleside+0x8ae>
					{
						servo_set_right_grabber_position(100);
    22c6:	84 e6       	ldi	r24, 0x64	; 100
    22c8:	0e 94 47 03 	call	0x68e	; 0x68e <servo_set_right_grabber_position>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 57       	subi	r30, 0x77	; 119
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a8 e4       	ldi	r26, 0x48	; 72
    22d8:	b4 e4       	ldi	r27, 0x44	; 68
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	8e 01       	movw	r16, r28
    22e4:	0b 57       	subi	r16, 0x7B	; 123
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	e7 57       	subi	r30, 0x77	; 119
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e4       	ldi	r19, 0x40	; 64
    22fa:	4c e1       	ldi	r20, 0x1C	; 28
    22fc:	55 e4       	ldi	r21, 0x45	; 69
    22fe:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	f8 01       	movw	r30, r16
    2308:	80 83       	st	Z, r24
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	a2 83       	std	Z+2, r26	; 0x02
    230e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2310:	fe 01       	movw	r30, r28
    2312:	eb 57       	subi	r30, 0x7B	; 123
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    232a:	88 23       	and	r24, r24
    232c:	44 f4       	brge	.+16     	; 0x233e <purpleside+0x366>
		__ticks = 1;
    232e:	fe 01       	movw	r30, r28
    2330:	ed 57       	subi	r30, 0x7D	; 125
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	64 c0       	rjmp	.+200    	; 0x2406 <purpleside+0x42e>
	else if (__tmp > 65535)
    233e:	fe 01       	movw	r30, r28
    2340:	eb 57       	subi	r30, 0x7B	; 123
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    2358:	18 16       	cp	r1, r24
    235a:	0c f0       	brlt	.+2      	; 0x235e <purpleside+0x386>
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <purpleside+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	fe 01       	movw	r30, r28
    2360:	e7 57       	subi	r30, 0x77	; 119
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8e 01       	movw	r16, r28
    237e:	0d 57       	subi	r16, 0x7D	; 125
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	f8 01       	movw	r30, r16
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	1f c0       	rjmp	.+62     	; 0x23d4 <purpleside+0x3fc>
    2396:	fe 01       	movw	r30, r28
    2398:	ef 57       	subi	r30, 0x7F	; 127
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	8a ef       	ldi	r24, 0xFA	; 250
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	fe 01       	movw	r30, r28
    23a6:	ef 57       	subi	r30, 0x7F	; 127
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <purpleside+0x3d6>
    23b2:	fe 01       	movw	r30, r28
    23b4:	ef 57       	subi	r30, 0x7F	; 127
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	de 01       	movw	r26, r28
    23be:	ad 57       	subi	r26, 0x7D	; 125
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 57       	subi	r30, 0x7D	; 125
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 93       	st	X, r25
    23d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	fe 01       	movw	r30, r28
    23d6:	ed 57       	subi	r30, 0x7D	; 125
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	d1 f6       	brne	.-76     	; 0x2396 <purpleside+0x3be>
    23e2:	27 c0       	rjmp	.+78     	; 0x2432 <purpleside+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	8e 01       	movw	r16, r28
    23e6:	0d 57       	subi	r16, 0x7D	; 125
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	eb 57       	subi	r30, 0x7B	; 123
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	de 01       	movw	r26, r28
    2408:	a1 58       	subi	r26, 0x81	; 129
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	ed 57       	subi	r30, 0x7D	; 125
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	8d 93       	st	X+, r24
    2418:	9c 93       	st	X, r25
    241a:	fe 01       	movw	r30, r28
    241c:	e1 58       	subi	r30, 0x81	; 129
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <purpleside+0x44c>
    2428:	fe 01       	movw	r30, r28
    242a:	e1 58       	subi	r30, 0x81	; 129
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_rotate(45,LOW_SPEED,NULL);
    2432:	8d e2       	ldi	r24, 0x2D	; 45
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	6e e1       	ldi	r22, 0x1E	; 30
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	55 dc       	rcall	.-1878   	; 0x1ce8 <odometry_rotate>
    243e:	fe 01       	movw	r30, r28
    2440:	e5 58       	subi	r30, 0x85	; 133
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	aa ef       	ldi	r26, 0xFA	; 250
    244a:	b3 e4       	ldi	r27, 0x43	; 67
    244c:	80 83       	st	Z, r24
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	a2 83       	std	Z+2, r26	; 0x02
    2452:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	8e 01       	movw	r16, r28
    2456:	09 58       	subi	r16, 0x89	; 137
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	fe 01       	movw	r30, r28
    245c:	e5 58       	subi	r30, 0x85	; 133
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e4       	ldi	r19, 0x40	; 64
    246c:	4c e1       	ldi	r20, 0x1C	; 28
    246e:	55 e4       	ldi	r21, 0x45	; 69
    2470:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	f8 01       	movw	r30, r16
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2482:	fe 01       	movw	r30, r28
    2484:	e9 58       	subi	r30, 0x89	; 137
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    249c:	88 23       	and	r24, r24
    249e:	44 f4       	brge	.+16     	; 0x24b0 <purpleside+0x4d8>
		__ticks = 1;
    24a0:	fe 01       	movw	r30, r28
    24a2:	eb 58       	subi	r30, 0x8B	; 139
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
    24ae:	64 c0       	rjmp	.+200    	; 0x2578 <purpleside+0x5a0>
	else if (__tmp > 65535)
    24b0:	fe 01       	movw	r30, r28
    24b2:	e9 58       	subi	r30, 0x89	; 137
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	0c f0       	brlt	.+2      	; 0x24d0 <purpleside+0x4f8>
    24ce:	43 c0       	rjmp	.+134    	; 0x2556 <purpleside+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	fe 01       	movw	r30, r28
    24d2:	e5 58       	subi	r30, 0x85	; 133
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8e 01       	movw	r16, r28
    24f0:	0b 58       	subi	r16, 0x8B	; 139
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	1f c0       	rjmp	.+62     	; 0x2546 <purpleside+0x56e>
    2508:	fe 01       	movw	r30, r28
    250a:	ed 58       	subi	r30, 0x8D	; 141
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	8a ef       	ldi	r24, 0xFA	; 250
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	fe 01       	movw	r30, r28
    2518:	ed 58       	subi	r30, 0x8D	; 141
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <purpleside+0x548>
    2524:	fe 01       	movw	r30, r28
    2526:	ed 58       	subi	r30, 0x8D	; 141
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	de 01       	movw	r26, r28
    2530:	ab 58       	subi	r26, 0x8B	; 139
    2532:	bf 4f       	sbci	r27, 0xFF	; 255
    2534:	fe 01       	movw	r30, r28
    2536:	eb 58       	subi	r30, 0x8B	; 139
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	9c 93       	st	X, r25
    2544:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	fe 01       	movw	r30, r28
    2548:	eb 58       	subi	r30, 0x8B	; 139
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	91 81       	ldd	r25, Z+1	; 0x01
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	d1 f6       	brne	.-76     	; 0x2508 <purpleside+0x530>
    2554:	27 c0       	rjmp	.+78     	; 0x25a4 <purpleside+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	8e 01       	movw	r16, r28
    2558:	0b 58       	subi	r16, 0x8B	; 139
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	fe 01       	movw	r30, r28
    255e:	e9 58       	subi	r30, 0x89	; 137
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	f8 01       	movw	r30, r16
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	de 01       	movw	r26, r28
    257a:	af 58       	subi	r26, 0x8F	; 143
    257c:	bf 4f       	sbci	r27, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	eb 58       	subi	r30, 0x8B	; 139
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	8d 93       	st	X+, r24
    258a:	9c 93       	st	X, r25
    258c:	fe 01       	movw	r30, r28
    258e:	ef 58       	subi	r30, 0x8F	; 143
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <purpleside+0x5be>
    259a:	fe 01       	movw	r30, r28
    259c:	ef 58       	subi	r30, 0x8F	; 143
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
						_delay_ms(500);
						servo_set_left_grabber_position(20);
    25a4:	84 e1       	ldi	r24, 0x14	; 20
    25a6:	0e 94 02 03 	call	0x604	; 0x604 <servo_set_left_grabber_position>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e3 59       	subi	r30, 0x93	; 147
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a8 e4       	ldi	r26, 0x48	; 72
    25b6:	b4 e4       	ldi	r27, 0x44	; 68
    25b8:	80 83       	st	Z, r24
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	a2 83       	std	Z+2, r26	; 0x02
    25be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	8e 01       	movw	r16, r28
    25c2:	07 59       	subi	r16, 0x97	; 151
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	e3 59       	subi	r30, 0x93	; 147
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e4       	ldi	r19, 0x40	; 64
    25d8:	4c e1       	ldi	r20, 0x1C	; 28
    25da:	55 e4       	ldi	r21, 0x45	; 69
    25dc:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 59       	subi	r30, 0x97	; 151
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	ee d7       	rcall	.+4060   	; 0x35e2 <__cmpsf2>
    2606:	88 23       	and	r24, r24
    2608:	44 f4       	brge	.+16     	; 0x261a <purpleside+0x642>
		__ticks = 1;
    260a:	fe 01       	movw	r30, r28
    260c:	e9 59       	subi	r30, 0x99	; 153
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	63 c0       	rjmp	.+198    	; 0x26e0 <purpleside+0x708>
	else if (__tmp > 65535)
    261a:	fe 01       	movw	r30, r28
    261c:	e7 59       	subi	r30, 0x97	; 151
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    2634:	18 16       	cp	r1, r24
    2636:	0c f0       	brlt	.+2      	; 0x263a <purpleside+0x662>
    2638:	43 c0       	rjmp	.+134    	; 0x26c0 <purpleside+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	fe 01       	movw	r30, r28
    263c:	e3 59       	subi	r30, 0x93	; 147
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8e 01       	movw	r16, r28
    265a:	09 59       	subi	r16, 0x99	; 153
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	1f c0       	rjmp	.+62     	; 0x26b0 <purpleside+0x6d8>
    2672:	fe 01       	movw	r30, r28
    2674:	eb 59       	subi	r30, 0x9B	; 155
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	8a ef       	ldi	r24, 0xFA	; 250
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	fe 01       	movw	r30, r28
    2682:	eb 59       	subi	r30, 0x9B	; 155
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <purpleside+0x6b2>
    268e:	fe 01       	movw	r30, r28
    2690:	eb 59       	subi	r30, 0x9B	; 155
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	de 01       	movw	r26, r28
    269a:	a9 59       	subi	r26, 0x99	; 153
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	e9 59       	subi	r30, 0x99	; 153
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	11 96       	adiw	r26, 0x01	; 1
    26ac:	9c 93       	st	X, r25
    26ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	fe 01       	movw	r30, r28
    26b2:	e9 59       	subi	r30, 0x99	; 153
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	d1 f6       	brne	.-76     	; 0x2672 <purpleside+0x69a>
    26be:	26 c0       	rjmp	.+76     	; 0x270c <purpleside+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	8e 01       	movw	r16, r28
    26c2:	09 59       	subi	r16, 0x99	; 153
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 59       	subi	r30, 0x97	; 151
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	f7 d7       	rcall	.+4078   	; 0x36c4 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	de 01       	movw	r26, r28
    26e2:	ad 59       	subi	r26, 0x9D	; 157
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	e9 59       	subi	r30, 0x99	; 153
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	8d 93       	st	X+, r24
    26f2:	9c 93       	st	X, r25
    26f4:	fe 01       	movw	r30, r28
    26f6:	ed 59       	subi	r30, 0x9D	; 157
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <purpleside+0x726>
    2702:	fe 01       	movw	r30, r28
    2704:	ed 59       	subi	r30, 0x9D	; 157
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
						_delay_ms(800);
						odometry_move_straight(-200,LOW_SPEED,NULL);
    270c:	88 e3       	ldi	r24, 0x38	; 56
    270e:	9f ef       	ldi	r25, 0xFF	; 255
    2710:	6e e1       	ldi	r22, 0x1E	; 30
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	b2 d8       	rcall	.-3740   	; 0x187c <odometry_move_straight>
    2718:	fe 01       	movw	r30, r28
    271a:	e1 5a       	subi	r30, 0xA1	; 161
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	aa ef       	ldi	r26, 0xFA	; 250
    2724:	b3 e4       	ldi	r27, 0x43	; 67
    2726:	80 83       	st	Z, r24
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	a2 83       	std	Z+2, r26	; 0x02
    272c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272e:	8e 01       	movw	r16, r28
    2730:	05 5a       	subi	r16, 0xA5	; 165
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	fe 01       	movw	r30, r28
    2736:	e1 5a       	subi	r30, 0xA1	; 161
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e4       	ldi	r19, 0x40	; 64
    2746:	4c e1       	ldi	r20, 0x1C	; 28
    2748:	55 e4       	ldi	r21, 0x45	; 69
    274a:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	f8 01       	movw	r30, r16
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275c:	fe 01       	movw	r30, r28
    275e:	e5 5a       	subi	r30, 0xA5	; 165
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	37 d7       	rcall	.+3694   	; 0x35e2 <__cmpsf2>
    2774:	88 23       	and	r24, r24
    2776:	44 f4       	brge	.+16     	; 0x2788 <purpleside+0x7b0>
		__ticks = 1;
    2778:	fe 01       	movw	r30, r28
    277a:	e7 5a       	subi	r30, 0xA7	; 167
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	62 c0       	rjmp	.+196    	; 0x284c <purpleside+0x874>
	else if (__tmp > 65535)
    2788:	fe 01       	movw	r30, r28
    278a:	e5 5a       	subi	r30, 0xA5	; 165
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 40 1c 	call	0x3880	; 0x3880 <__gesf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <purpleside+0x7d0>
    27a6:	42 c0       	rjmp	.+132    	; 0x282c <purpleside+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	fe 01       	movw	r30, r28
    27aa:	e1 5a       	subi	r30, 0xA1	; 161
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 44 1c 	call	0x3888	; 0x3888 <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8e 01       	movw	r16, r28
    27c8:	07 5a       	subi	r16, 0xA7	; 167
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	79 d7       	rcall	.+3826   	; 0x36c4 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	1f c0       	rjmp	.+62     	; 0x281c <purpleside+0x844>
    27de:	fe 01       	movw	r30, r28
    27e0:	e9 5a       	subi	r30, 0xA9	; 169
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	8a ef       	ldi	r24, 0xFA	; 250
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	fe 01       	movw	r30, r28
    27ee:	e9 5a       	subi	r30, 0xA9	; 169
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <purpleside+0x81e>
    27fa:	fe 01       	movw	r30, r28
    27fc:	e9 5a       	subi	r30, 0xA9	; 169
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	de 01       	movw	r26, r28
    2806:	a7 5a       	subi	r26, 0xA7	; 167
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e7 5a       	subi	r30, 0xA7	; 167
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	11 96       	adiw	r26, 0x01	; 1
    2818:	9c 93       	st	X, r25
    281a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	fe 01       	movw	r30, r28
    281e:	e7 5a       	subi	r30, 0xA7	; 167
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	d1 f6       	brne	.-76     	; 0x27de <purpleside+0x806>
    282a:	26 c0       	rjmp	.+76     	; 0x2878 <purpleside+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	8e 01       	movw	r16, r28
    282e:	07 5a       	subi	r16, 0xA7	; 167
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	e5 5a       	subi	r30, 0xA5	; 165
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	41 d7       	rcall	.+3714   	; 0x36c4 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	f8 01       	movw	r30, r16
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	de 01       	movw	r26, r28
    284e:	ab 5a       	subi	r26, 0xAB	; 171
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e7 5a       	subi	r30, 0xA7	; 167
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	8d 93       	st	X+, r24
    285e:	9c 93       	st	X, r25
    2860:	fe 01       	movw	r30, r28
    2862:	eb 5a       	subi	r30, 0xAB	; 171
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <purpleside+0x892>
    286e:	fe 01       	movw	r30, r28
    2870:	eb 5a       	subi	r30, 0xAB	; 171
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
						_delay_ms(500);
						odometry_set_angle(90,LOW_SPEED,NULL);
    2878:	8a e5       	ldi	r24, 0x5A	; 90
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	6e e1       	ldi	r22, 0x1E	; 30
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	da da       	rcall	.-2636   	; 0x1e38 <odometry_set_angle>
    2884:	1c c3       	rjmp	.+1592   	; 0x2ebe <purpleside+0xee6>
						
					}
					else if(current_position == 10 || current_position == 11)
    2886:	fe 01       	movw	r30, r28
    2888:	e2 56       	subi	r30, 0x62	; 98
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	8a 30       	cpi	r24, 0x0A	; 10
    2890:	39 f0       	breq	.+14     	; 0x28a0 <purpleside+0x8c8>
    2892:	fe 01       	movw	r30, r28
    2894:	e2 56       	subi	r30, 0x62	; 98
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	8b 30       	cpi	r24, 0x0B	; 11
    289c:	09 f0       	breq	.+2      	; 0x28a0 <purpleside+0x8c8>
    289e:	af c0       	rjmp	.+350    	; 0x29fe <purpleside+0xa26>
    28a0:	fe 01       	movw	r30, r28
    28a2:	ef 5a       	subi	r30, 0xAF	; 175
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	aa e7       	ldi	r26, 0x7A	; 122
    28ac:	b4 e4       	ldi	r27, 0x44	; 68
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b6:	8e 01       	movw	r16, r28
    28b8:	03 5b       	subi	r16, 0xB3	; 179
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 5a       	subi	r30, 0xAF	; 175
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e4       	ldi	r19, 0x40	; 64
    28ce:	4c e1       	ldi	r20, 0x1C	; 28
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	da d7       	rcall	.+4020   	; 0x3888 <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e2:	fe 01       	movw	r30, r28
    28e4:	e3 5b       	subi	r30, 0xB3	; 179
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	74 d6       	rcall	.+3304   	; 0x35e2 <__cmpsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	44 f4       	brge	.+16     	; 0x290e <purpleside+0x936>
		__ticks = 1;
    28fe:	fe 01       	movw	r30, r28
    2900:	e5 5b       	subi	r30, 0xB5	; 181
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	60 c0       	rjmp	.+192    	; 0x29ce <purpleside+0x9f6>
	else if (__tmp > 65535)
    290e:	fe 01       	movw	r30, r28
    2910:	e3 5b       	subi	r30, 0xB3	; 179
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	ad d7       	rcall	.+3930   	; 0x3880 <__gesf2>
    2926:	18 16       	cp	r1, r24
    2928:	0c f0       	brlt	.+2      	; 0x292c <purpleside+0x954>
    292a:	41 c0       	rjmp	.+130    	; 0x29ae <purpleside+0x9d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	fe 01       	movw	r30, r28
    292e:	ef 5a       	subi	r30, 0xAF	; 175
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	a2 d7       	rcall	.+3908   	; 0x3888 <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8e 01       	movw	r16, r28
    294a:	05 5b       	subi	r16, 0xB5	; 181
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	b8 d6       	rcall	.+3440   	; 0x36c4 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	f8 01       	movw	r30, r16
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
    295e:	1f c0       	rjmp	.+62     	; 0x299e <purpleside+0x9c6>
    2960:	fe 01       	movw	r30, r28
    2962:	e7 5b       	subi	r30, 0xB7	; 183
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	8a ef       	ldi	r24, 0xFA	; 250
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	91 83       	std	Z+1, r25	; 0x01
    296c:	80 83       	st	Z, r24
    296e:	fe 01       	movw	r30, r28
    2970:	e7 5b       	subi	r30, 0xB7	; 183
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <purpleside+0x9a0>
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5b       	subi	r30, 0xB7	; 183
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2986:	de 01       	movw	r26, r28
    2988:	a5 5b       	subi	r26, 0xB5	; 181
    298a:	bf 4f       	sbci	r27, 0xFF	; 255
    298c:	fe 01       	movw	r30, r28
    298e:	e5 5b       	subi	r30, 0xB5	; 181
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	91 81       	ldd	r25, Z+1	; 0x01
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	11 96       	adiw	r26, 0x01	; 1
    299a:	9c 93       	st	X, r25
    299c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	fe 01       	movw	r30, r28
    29a0:	e5 5b       	subi	r30, 0xB5	; 181
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	d1 f6       	brne	.-76     	; 0x2960 <purpleside+0x988>
    29ac:	88 c2       	rjmp	.+1296   	; 0x2ebe <purpleside+0xee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	8e 01       	movw	r16, r28
    29b0:	05 5b       	subi	r16, 0xB5	; 181
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 5b       	subi	r30, 0xB3	; 179
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	80 d6       	rcall	.+3328   	; 0x36c4 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	f8 01       	movw	r30, r16
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
    29ce:	de 01       	movw	r26, r28
    29d0:	a9 5b       	subi	r26, 0xB9	; 185
    29d2:	bf 4f       	sbci	r27, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	e5 5b       	subi	r30, 0xB5	; 181
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	11 96       	adiw	r26, 0x01	; 1
    29e0:	9c 93       	st	X, r25
    29e2:	8e 93       	st	-X, r24
    29e4:	fe 01       	movw	r30, r28
    29e6:	e9 5b       	subi	r30, 0xB9	; 185
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <purpleside+0xa16>
    29f2:	fe 01       	movw	r30, r28
    29f4:	e9 5b       	subi	r30, 0xB9	; 185
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	60 c2       	rjmp	.+1216   	; 0x2ebe <purpleside+0xee6>
					{
						_delay_ms(1000);
					}
					else if(current_position == 8)
    29fe:	fe 01       	movw	r30, r28
    2a00:	e2 56       	subi	r30, 0x62	; 98
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	88 30       	cpi	r24, 0x08	; 8
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <purpleside+0xa34>
    2a0a:	59 c2       	rjmp	.+1202   	; 0x2ebe <purpleside+0xee6>
					{
						odometry_move_straight(-200,LOW_SPEED,NULL);
    2a0c:	88 e3       	ldi	r24, 0x38	; 56
    2a0e:	9f ef       	ldi	r25, 0xFF	; 255
    2a10:	6e e1       	ldi	r22, 0x1E	; 30
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	0e 94 3e 0c 	call	0x187c	; 0x187c <odometry_move_straight>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ed 5b       	subi	r30, 0xBD	; 189
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a8 e4       	ldi	r26, 0x48	; 72
    2a26:	b4 e4       	ldi	r27, 0x44	; 68
    2a28:	80 83       	st	Z, r24
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	a2 83       	std	Z+2, r26	; 0x02
    2a2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	8e 01       	movw	r16, r28
    2a32:	01 5c       	subi	r16, 0xC1	; 193
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	ed 5b       	subi	r30, 0xBD	; 189
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e4       	ldi	r19, 0x40	; 64
    2a48:	4c e1       	ldi	r20, 0x1C	; 28
    2a4a:	55 e4       	ldi	r21, 0x45	; 69
    2a4c:	1d d7       	rcall	.+3642   	; 0x3888 <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	f8 01       	movw	r30, r16
    2a54:	80 83       	st	Z, r24
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	a2 83       	std	Z+2, r26	; 0x02
    2a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ff 96       	adiw	r30, 0x3f	; 63
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	b8 d5       	rcall	.+2928   	; 0x35e2 <__cmpsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	2c f4       	brge	.+10     	; 0x2a80 <purpleside+0xaa8>
		__ticks = 1;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	9e af       	std	Y+62, r25	; 0x3e
    2a7c:	8d af       	std	Y+61, r24	; 0x3d
    2a7e:	42 c0       	rjmp	.+132    	; 0x2b04 <purpleside+0xb2c>
	else if (__tmp > 65535)
    2a80:	fe 01       	movw	r30, r28
    2a82:	ff 96       	adiw	r30, 0x3f	; 63
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	3f ef       	ldi	r19, 0xFF	; 255
    2a90:	4f e7       	ldi	r20, 0x7F	; 127
    2a92:	57 e4       	ldi	r21, 0x47	; 71
    2a94:	f5 d6       	rcall	.+3562   	; 0x3880 <__gesf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	54 f5       	brge	.+84     	; 0x2aee <purpleside+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ed 5b       	subi	r30, 0xBD	; 189
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	eb d6       	rcall	.+3542   	; 0x3888 <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	04 d6       	rcall	.+3080   	; 0x36c4 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	9e af       	std	Y+62, r25	; 0x3e
    2ac2:	8d af       	std	Y+61, r24	; 0x3d
    2ac4:	0f c0       	rjmp	.+30     	; 0x2ae4 <purpleside+0xb0c>
    2ac6:	8a ef       	ldi	r24, 0xFA	; 250
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9c af       	std	Y+60, r25	; 0x3c
    2acc:	8b af       	std	Y+59, r24	; 0x3b
    2ace:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ad0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <purpleside+0xafa>
    2ad6:	9c af       	std	Y+60, r25	; 0x3c
    2ad8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ada:	8d ad       	ldd	r24, Y+61	; 0x3d
    2adc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	9e af       	std	Y+62, r25	; 0x3e
    2ae2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ae6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	69 f7       	brne	.-38     	; 0x2ac6 <purpleside+0xaee>
    2aec:	15 c0       	rjmp	.+42     	; 0x2b18 <purpleside+0xb40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aee:	fe 01       	movw	r30, r28
    2af0:	ff 96       	adiw	r30, 0x3f	; 63
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	e4 d5       	rcall	.+3016   	; 0x36c4 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e af       	std	Y+62, r25	; 0x3e
    2b02:	8d af       	std	Y+61, r24	; 0x3d
    2b04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b08:	9a af       	std	Y+58, r25	; 0x3a
    2b0a:	89 af       	std	Y+57, r24	; 0x39
    2b0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <purpleside+0xb38>
    2b14:	9a af       	std	Y+58, r25	; 0x3a
    2b16:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(800);
						odometry_rotate(-90,LOW_SPEED,NULL);
    2b18:	86 ea       	ldi	r24, 0xA6	; 166
    2b1a:	9f ef       	ldi	r25, 0xFF	; 255
    2b1c:	6e e1       	ldi	r22, 0x1E	; 30
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	e2 d8       	rcall	.-3644   	; 0x1ce8 <odometry_rotate>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	aa ef       	ldi	r26, 0xFA	; 250
    2b2a:	b3 e4       	ldi	r27, 0x43	; 67
    2b2c:	8d ab       	std	Y+53, r24	; 0x35
    2b2e:	9e ab       	std	Y+54, r25	; 0x36
    2b30:	af ab       	std	Y+55, r26	; 0x37
    2b32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	6d a9       	ldd	r22, Y+53	; 0x35
    2b36:	7e a9       	ldd	r23, Y+54	; 0x36
    2b38:	8f a9       	ldd	r24, Y+55	; 0x37
    2b3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e4       	ldi	r19, 0x40	; 64
    2b40:	4c e1       	ldi	r20, 0x1C	; 28
    2b42:	55 e4       	ldi	r21, 0x45	; 69
    2b44:	a1 d6       	rcall	.+3394   	; 0x3888 <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	89 ab       	std	Y+49, r24	; 0x31
    2b4c:	9a ab       	std	Y+50, r25	; 0x32
    2b4e:	ab ab       	std	Y+51, r26	; 0x33
    2b50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b52:	69 a9       	ldd	r22, Y+49	; 0x31
    2b54:	7a a9       	ldd	r23, Y+50	; 0x32
    2b56:	8b a9       	ldd	r24, Y+51	; 0x33
    2b58:	9c a9       	ldd	r25, Y+52	; 0x34
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	3f d5       	rcall	.+2686   	; 0x35e2 <__cmpsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <purpleside+0xb9a>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	98 ab       	std	Y+48, r25	; 0x30
    2b6e:	8f a7       	std	Y+47, r24	; 0x2f
    2b70:	3b c0       	rjmp	.+118    	; 0x2be8 <purpleside+0xc10>
	else if (__tmp > 65535)
    2b72:	69 a9       	ldd	r22, Y+49	; 0x31
    2b74:	7a a9       	ldd	r23, Y+50	; 0x32
    2b76:	8b a9       	ldd	r24, Y+51	; 0x33
    2b78:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	7e d6       	rcall	.+3324   	; 0x3880 <__gesf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	3c f5       	brge	.+78     	; 0x2bd6 <purpleside+0xbfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b88:	6d a9       	ldd	r22, Y+53	; 0x35
    2b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e2       	ldi	r20, 0x20	; 32
    2b96:	51 e4       	ldi	r21, 0x41	; 65
    2b98:	77 d6       	rcall	.+3310   	; 0x3888 <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	90 d5       	rcall	.+2848   	; 0x36c4 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	98 ab       	std	Y+48, r25	; 0x30
    2baa:	8f a7       	std	Y+47, r24	; 0x2f
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <purpleside+0xbf4>
    2bae:	8a ef       	ldi	r24, 0xFA	; 250
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9e a7       	std	Y+46, r25	; 0x2e
    2bb4:	8d a7       	std	Y+45, r24	; 0x2d
    2bb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <purpleside+0xbe2>
    2bbe:	9e a7       	std	Y+46, r25	; 0x2e
    2bc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	98 ab       	std	Y+48, r25	; 0x30
    2bca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bce:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	69 f7       	brne	.-38     	; 0x2bae <purpleside+0xbd6>
    2bd4:	13 c0       	rjmp	.+38     	; 0x2bfc <purpleside+0xc24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bda:	8b a9       	ldd	r24, Y+51	; 0x33
    2bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bde:	72 d5       	rcall	.+2788   	; 0x36c4 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	98 ab       	std	Y+48, r25	; 0x30
    2be6:	8f a7       	std	Y+47, r24	; 0x2f
    2be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bea:	98 a9       	ldd	r25, Y+48	; 0x30
    2bec:	9c a7       	std	Y+44, r25	; 0x2c
    2bee:	8b a7       	std	Y+43, r24	; 0x2b
    2bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <purpleside+0xc1c>
    2bf8:	9c a7       	std	Y+44, r25	; 0x2c
    2bfa:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						odometry_move_straight(300,LOW_SPEED,NULL);
    2bfc:	8c e2       	ldi	r24, 0x2C	; 44
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	6e e1       	ldi	r22, 0x1E	; 30
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	0e 94 3e 0c 	call	0x187c	; 0x187c <odometry_move_straight>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a8 e4       	ldi	r26, 0x48	; 72
    2c10:	b4 e4       	ldi	r27, 0x44	; 68
    2c12:	8f a3       	std	Y+39, r24	; 0x27
    2c14:	98 a7       	std	Y+40, r25	; 0x28
    2c16:	a9 a7       	std	Y+41, r26	; 0x29
    2c18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e4       	ldi	r19, 0x40	; 64
    2c26:	4c e1       	ldi	r20, 0x1C	; 28
    2c28:	55 e4       	ldi	r21, 0x45	; 69
    2c2a:	2e d6       	rcall	.+3164   	; 0x3888 <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8b a3       	std	Y+35, r24	; 0x23
    2c32:	9c a3       	std	Y+36, r25	; 0x24
    2c34:	ad a3       	std	Y+37, r26	; 0x25
    2c36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c38:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	cc d4       	rcall	.+2456   	; 0x35e2 <__cmpsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <purpleside+0xc80>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9a a3       	std	Y+34, r25	; 0x22
    2c54:	89 a3       	std	Y+33, r24	; 0x21
    2c56:	3b c0       	rjmp	.+118    	; 0x2cce <purpleside+0xcf6>
	else if (__tmp > 65535)
    2c58:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0b d6       	rcall	.+3094   	; 0x3880 <__gesf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	3c f5       	brge	.+78     	; 0x2cbc <purpleside+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c70:	78 a5       	ldd	r23, Y+40	; 0x28
    2c72:	89 a5       	ldd	r24, Y+41	; 0x29
    2c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	04 d6       	rcall	.+3080   	; 0x3888 <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	1d d5       	rcall	.+2618   	; 0x36c4 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9a a3       	std	Y+34, r25	; 0x22
    2c90:	89 a3       	std	Y+33, r24	; 0x21
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <purpleside+0xcda>
    2c94:	8a ef       	ldi	r24, 0xFA	; 250
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	98 a3       	std	Y+32, r25	; 0x20
    2c9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <purpleside+0xcc8>
    2ca4:	98 a3       	std	Y+32, r25	; 0x20
    2ca6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    2caa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	9a a3       	std	Y+34, r25	; 0x22
    2cb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	69 f7       	brne	.-38     	; 0x2c94 <purpleside+0xcbc>
    2cba:	13 c0       	rjmp	.+38     	; 0x2ce2 <purpleside+0xd0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	ff d4       	rcall	.+2558   	; 0x36c4 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9a a3       	std	Y+34, r25	; 0x22
    2ccc:	89 a3       	std	Y+33, r24	; 0x21
    2cce:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <purpleside+0xd02>
    2cde:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce0:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(800);
						odometry_rotate(90,LOW_SPEED,NULL);
    2ce2:	8a e5       	ldi	r24, 0x5A	; 90
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	6e e1       	ldi	r22, 0x1E	; 30
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <odometry_rotate>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	aa ef       	ldi	r26, 0xFA	; 250
    2cf6:	b3 e4       	ldi	r27, 0x43	; 67
    2cf8:	89 8f       	std	Y+25, r24	; 0x19
    2cfa:	9a 8f       	std	Y+26, r25	; 0x1a
    2cfc:	ab 8f       	std	Y+27, r26	; 0x1b
    2cfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	69 8d       	ldd	r22, Y+25	; 0x19
    2d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e4       	ldi	r19, 0x40	; 64
    2d0c:	4c e1       	ldi	r20, 0x1C	; 28
    2d0e:	55 e4       	ldi	r21, 0x45	; 69
    2d10:	bb d5       	rcall	.+2934   	; 0x3888 <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	8d 8b       	std	Y+21, r24	; 0x15
    2d18:	9e 8b       	std	Y+22, r25	; 0x16
    2d1a:	af 8b       	std	Y+23, r26	; 0x17
    2d1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	59 d4       	rcall	.+2226   	; 0x35e2 <__cmpsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <purpleside+0xd66>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9c 8b       	std	Y+20, r25	; 0x14
    2d3a:	8b 8b       	std	Y+19, r24	; 0x13
    2d3c:	3b c0       	rjmp	.+118    	; 0x2db4 <purpleside+0xddc>
	else if (__tmp > 65535)
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	98 d5       	rcall	.+2864   	; 0x3880 <__gesf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	3c f5       	brge	.+78     	; 0x2da2 <purpleside+0xdca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	69 8d       	ldd	r22, Y+25	; 0x19
    2d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	91 d5       	rcall	.+2850   	; 0x3888 <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	aa d4       	rcall	.+2388   	; 0x36c4 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9c 8b       	std	Y+20, r25	; 0x14
    2d76:	8b 8b       	std	Y+19, r24	; 0x13
    2d78:	0f c0       	rjmp	.+30     	; 0x2d98 <purpleside+0xdc0>
    2d7a:	8a ef       	ldi	r24, 0xFA	; 250
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9a 8b       	std	Y+18, r25	; 0x12
    2d80:	89 8b       	std	Y+17, r24	; 0x11
    2d82:	89 89       	ldd	r24, Y+17	; 0x11
    2d84:	9a 89       	ldd	r25, Y+18	; 0x12
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <purpleside+0xdae>
    2d8a:	9a 8b       	std	Y+18, r25	; 0x12
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d90:	9c 89       	ldd	r25, Y+20	; 0x14
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	9c 8b       	std	Y+20, r25	; 0x14
    2d96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d98:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	69 f7       	brne	.-38     	; 0x2d7a <purpleside+0xda2>
    2da0:	13 c0       	rjmp	.+38     	; 0x2dc8 <purpleside+0xdf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da2:	6d 89       	ldd	r22, Y+21	; 0x15
    2da4:	7e 89       	ldd	r23, Y+22	; 0x16
    2da6:	8f 89       	ldd	r24, Y+23	; 0x17
    2da8:	98 8d       	ldd	r25, Y+24	; 0x18
    2daa:	8c d4       	rcall	.+2328   	; 0x36c4 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9c 8b       	std	Y+20, r25	; 0x14
    2db2:	8b 8b       	std	Y+19, r24	; 0x13
    2db4:	8b 89       	ldd	r24, Y+19	; 0x13
    2db6:	9c 89       	ldd	r25, Y+20	; 0x14
    2db8:	98 8b       	std	Y+16, r25	; 0x10
    2dba:	8f 87       	std	Y+15, r24	; 0x0f
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	98 89       	ldd	r25, Y+16	; 0x10
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <purpleside+0xde8>
    2dc4:	98 8b       	std	Y+16, r25	; 0x10
    2dc6:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						odometry_move_straight(190,20,NULL);
    2dc8:	8e eb       	ldi	r24, 0xBE	; 190
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	64 e1       	ldi	r22, 0x14	; 20
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	50 e0       	ldi	r21, 0x00	; 0
    2dd2:	0e 94 3e 0c 	call	0x187c	; 0x187c <odometry_move_straight>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	aa e7       	ldi	r26, 0x7A	; 122
    2ddc:	b4 e4       	ldi	r27, 0x44	; 68
    2dde:	8b 87       	std	Y+11, r24	; 0x0b
    2de0:	9c 87       	std	Y+12, r25	; 0x0c
    2de2:	ad 87       	std	Y+13, r26	; 0x0d
    2de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e4       	ldi	r19, 0x40	; 64
    2df2:	4c e1       	ldi	r20, 0x1C	; 28
    2df4:	55 e4       	ldi	r21, 0x45	; 69
    2df6:	48 d5       	rcall	.+2704   	; 0x3888 <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	8f 83       	std	Y+7, r24	; 0x07
    2dfe:	98 87       	std	Y+8, r25	; 0x08
    2e00:	a9 87       	std	Y+9, r26	; 0x09
    2e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	e6 d3       	rcall	.+1996   	; 0x35e2 <__cmpsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	2c f4       	brge	.+10     	; 0x2e24 <purpleside+0xe4c>
		__ticks = 1;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	8d 83       	std	Y+5, r24	; 0x05
    2e22:	3b c0       	rjmp	.+118    	; 0x2e9a <purpleside+0xec2>
	else if (__tmp > 65535)
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	25 d5       	rcall	.+2634   	; 0x3880 <__gesf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	3c f5       	brge	.+78     	; 0x2e88 <purpleside+0xeb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	1e d5       	rcall	.+2620   	; 0x3888 <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	37 d4       	rcall	.+2158   	; 0x36c4 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
    2e5e:	0f c0       	rjmp	.+30     	; 0x2e7e <purpleside+0xea6>
    2e60:	8a ef       	ldi	r24, 0xFA	; 250
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9c 83       	std	Y+4, r25	; 0x04
    2e66:	8b 83       	std	Y+3, r24	; 0x03
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <purpleside+0xe94>
    2e70:	9c 83       	std	Y+4, r25	; 0x04
    2e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e80:	9e 81       	ldd	r25, Y+6	; 0x06
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <purpleside+0xe88>
    2e86:	13 c0       	rjmp	.+38     	; 0x2eae <purpleside+0xed6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	19 d4       	rcall	.+2098   	; 0x36c4 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <purpleside+0xece>
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						odometry_move_straight(-150,20,NULL);
    2eae:	8a e6       	ldi	r24, 0x6A	; 106
    2eb0:	9f ef       	ldi	r25, 0xFF	; 255
    2eb2:	64 e1       	ldi	r22, 0x14	; 20
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	0e 94 3e 0c 	call	0x187c	; 0x187c <odometry_move_straight>
    2ebc:	ff cf       	rjmp	.-2      	; 0x2ebc <purpleside+0xee4>
	while(1)
	{
		switch(active_state)
		{
			case ROBOT_STATE_TACTIC_ONE:
				for(current_position = next_position;current_position < TACTIC_ONE_POSITION_COUNT; current_position++)
    2ebe:	de 01       	movw	r26, r28
    2ec0:	a2 56       	subi	r26, 0x62	; 98
    2ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e2 56       	subi	r30, 0x62	; 98
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	8f 5f       	subi	r24, 0xFF	; 255
    2ece:	8c 93       	st	X, r24
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e2 56       	subi	r30, 0x62	; 98
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	89 30       	cpi	r24, 0x09	; 9
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <purpleside+0xf06>
    2edc:	c3 c8       	rjmp	.-3706   	; 0x2064 <purpleside+0x8c>
    2ede:	af c8       	rjmp	.-3746   	; 0x203e <purpleside+0x66>

00002ee0 <timer_register_callback>:
//static int combination[2];

unsigned int received = 0;

void timer_register_callback(void (*callback)(void))
{
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <timer_register_callback+0x6>
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	90 93 aa 01 	sts	0x01AA, r25
    2ef6:	80 93 a9 01 	sts	0x01A9, r24
}
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <timer_init>:
		return 1;
	}
	return 0;
}*/
void timer_init(unsigned int freq)
{
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <timer_init+0xa>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	9a 83       	std	Y+2, r25	; 0x02
    2f14:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    2f16:	e0 e8       	ldi	r30, 0x80	; 128
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2f1c:	e1 e8       	ldi	r30, 0x81	; 129
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	89 e0       	ldi	r24, 0x09	; 9
    2f22:	80 83       	st	Z, r24
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2f24:	08 e8       	ldi	r16, 0x88	; 136
    2f26:	10 e0       	ldi	r17, 0x00	; 0
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	cc 01       	movw	r24, r24
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	f2 d3       	rcall	.+2020   	; 0x371c <__floatunsisf>
    2f38:	9b 01       	movw	r18, r22
    2f3a:	ac 01       	movw	r20, r24
    2f3c:	60 e8       	ldi	r22, 0x80	; 128
    2f3e:	76 e9       	ldi	r23, 0x96	; 150
    2f40:	88 e1       	ldi	r24, 0x18	; 24
    2f42:	9b e4       	ldi	r25, 0x4B	; 75
    2f44:	52 d3       	rcall	.+1700   	; 0x35ea <__divsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	5f e3       	ldi	r21, 0x3F	; 63
    2f56:	e1 d2       	rcall	.+1474   	; 0x351a <__addsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	b1 d3       	rcall	.+1890   	; 0x36c4 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	f8 01       	movw	r30, r16
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2f6c:	ef e6       	ldi	r30, 0x6F	; 111
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	80 83       	st	Z, r24

	SREG |= 0x80;
    2f74:	af e5       	ldi	r26, 0x5F	; 95
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e5       	ldi	r30, 0x5F	; 95
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	80 68       	ori	r24, 0x80	; 128
    2f80:	8c 93       	st	X, r24
}
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <__vector_12>:
ISR(TIMER1_COMPA_vect)
{
    2f90:	1f 92       	push	r1
    2f92:	0f 92       	push	r0
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	0f 92       	push	r0
    2f98:	00 90 5b 00 	lds	r0, 0x005B
    2f9c:	0f 92       	push	r0
    2f9e:	11 24       	eor	r1, r1
    2fa0:	2f 93       	push	r18
    2fa2:	3f 93       	push	r19
    2fa4:	4f 93       	push	r20
    2fa6:	5f 93       	push	r21
    2fa8:	6f 93       	push	r22
    2faa:	7f 93       	push	r23
    2fac:	8f 93       	push	r24
    2fae:	9f 93       	push	r25
    2fb0:	af 93       	push	r26
    2fb2:	bf 93       	push	r27
    2fb4:	ef 93       	push	r30
    2fb6:	ff 93       	push	r31
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2fc0:	80 91 a9 01 	lds	r24, 0x01A9
    2fc4:	90 91 aa 01 	lds	r25, 0x01AA
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	29 f0       	breq	.+10     	; 0x2fd6 <__vector_12+0x46>
        timer_callback();
    2fcc:	e0 91 a9 01 	lds	r30, 0x01A9
    2fd0:	f0 91 aa 01 	lds	r31, 0x01AA
    2fd4:	09 95       	icall
	if(sys_time >= 90000)
    2fd6:	80 91 ab 01 	lds	r24, 0x01AB
    2fda:	90 91 ac 01 	lds	r25, 0x01AC
    2fde:	a0 91 ad 01 	lds	r26, 0x01AD
    2fe2:	b0 91 ae 01 	lds	r27, 0x01AE
    2fe6:	80 39       	cpi	r24, 0x90	; 144
    2fe8:	2f e5       	ldi	r18, 0x5F	; 95
    2fea:	92 07       	cpc	r25, r18
    2fec:	21 e0       	ldi	r18, 0x01	; 1
    2fee:	a2 07       	cpc	r26, r18
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	b2 07       	cpc	r27, r18
    2ff4:	10 f0       	brcs	.+4      	; 0x2ffa <__vector_12+0x6a>
		actuators_umbrella();
    2ff6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <actuators_umbrella>
	sys_time++;
    2ffa:	80 91 ab 01 	lds	r24, 0x01AB
    2ffe:	90 91 ac 01 	lds	r25, 0x01AC
    3002:	a0 91 ad 01 	lds	r26, 0x01AD
    3006:	b0 91 ae 01 	lds	r27, 0x01AE
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	a1 1d       	adc	r26, r1
    300e:	b1 1d       	adc	r27, r1
    3010:	80 93 ab 01 	sts	0x01AB, r24
    3014:	90 93 ac 01 	sts	0x01AC, r25
    3018:	a0 93 ad 01 	sts	0x01AD, r26
    301c:	b0 93 ae 01 	sts	0x01AE, r27
}
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	bf 91       	pop	r27
    302a:	af 91       	pop	r26
    302c:	9f 91       	pop	r25
    302e:	8f 91       	pop	r24
    3030:	7f 91       	pop	r23
    3032:	6f 91       	pop	r22
    3034:	5f 91       	pop	r21
    3036:	4f 91       	pop	r20
    3038:	3f 91       	pop	r19
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	00 92 5b 00 	sts	0x005B, r0
    3042:	0f 90       	pop	r0
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	0f 90       	pop	r0
    3048:	1f 90       	pop	r1
    304a:	18 95       	reti

0000304c <system_reset_system_time>:

void system_reset_system_time(void)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    3054:	10 92 ab 01 	sts	0x01AB, r1
    3058:	10 92 ac 01 	sts	0x01AC, r1
    305c:	10 92 ad 01 	sts	0x01AD, r1
    3060:	10 92 ae 01 	sts	0x01AE, r1
}
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <system_set_match_started>:
void system_set_match_started(void)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	80 93 af 01 	sts	0x01AF, r24
}
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <system_get_system_time>:
uint32_t system_get_system_time(void)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    3086:	80 91 ab 01 	lds	r24, 0x01AB
    308a:	90 91 ac 01 	lds	r25, 0x01AC
    308e:	a0 91 ad 01 	lds	r26, 0x01AD
    3092:	b0 91 ae 01 	lds	r27, 0x01AE
}
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <system_init>:
	uint32_t current;
	current = system_get_system_time();
	while((sys_time - current ) < ms);
}
void system_init(void)
{	
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	6c 97       	sbiw	r28, 0x1c	; 28
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61

	timer_register_callback(gpio_debouncer);
    30b4:	81 e5       	ldi	r24, 0x51	; 81
    30b6:	9a e0       	ldi	r25, 0x0A	; 10
    30b8:	13 df       	rcall	.-474    	; 0x2ee0 <timer_register_callback>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a8 ec       	ldi	r26, 0xC8	; 200
    30c0:	b2 e4       	ldi	r27, 0x42	; 66
    30c2:	89 8f       	std	Y+25, r24	; 0x19
    30c4:	9a 8f       	std	Y+26, r25	; 0x1a
    30c6:	ab 8f       	std	Y+27, r26	; 0x1b
    30c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ca:	69 8d       	ldd	r22, Y+25	; 0x19
    30cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e4       	ldi	r19, 0x40	; 64
    30d6:	4c e1       	ldi	r20, 0x1C	; 28
    30d8:	55 e4       	ldi	r21, 0x45	; 69
    30da:	d6 d3       	rcall	.+1964   	; 0x3888 <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	8d 8b       	std	Y+21, r24	; 0x15
    30e2:	9e 8b       	std	Y+22, r25	; 0x16
    30e4:	af 8b       	std	Y+23, r26	; 0x17
    30e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ea:	7e 89       	ldd	r23, Y+22	; 0x16
    30ec:	8f 89       	ldd	r24, Y+23	; 0x17
    30ee:	98 8d       	ldd	r25, Y+24	; 0x18
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e8       	ldi	r20, 0x80	; 128
    30f6:	5f e3       	ldi	r21, 0x3F	; 63
    30f8:	74 d2       	rcall	.+1256   	; 0x35e2 <__cmpsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <system_init+0x68>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	3b c0       	rjmp	.+118    	; 0x317e <system_init+0xde>
	else if (__tmp > 65535)
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	b3 d3       	rcall	.+1894   	; 0x3880 <__gesf2>
    311a:	18 16       	cp	r1, r24
    311c:	3c f5       	brge	.+78     	; 0x316c <system_init+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	69 8d       	ldd	r22, Y+25	; 0x19
    3120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	ac d3       	rcall	.+1880   	; 0x3888 <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	c5 d2       	rcall	.+1418   	; 0x36c4 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <system_init+0xc2>
    3144:	8a ef       	ldi	r24, 0xFA	; 250
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9a 8b       	std	Y+18, r25	; 0x12
    314a:	89 8b       	std	Y+17, r24	; 0x11
    314c:	89 89       	ldd	r24, Y+17	; 0x11
    314e:	9a 89       	ldd	r25, Y+18	; 0x12
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <system_init+0xb0>
    3154:	9a 8b       	std	Y+18, r25	; 0x12
    3156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	8b 89       	ldd	r24, Y+19	; 0x13
    315a:	9c 89       	ldd	r25, Y+20	; 0x14
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	9c 8b       	std	Y+20, r25	; 0x14
    3160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	8b 89       	ldd	r24, Y+19	; 0x13
    3164:	9c 89       	ldd	r25, Y+20	; 0x14
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	69 f7       	brne	.-38     	; 0x3144 <system_init+0xa4>
    316a:	13 c0       	rjmp	.+38     	; 0x3192 <system_init+0xf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	6d 89       	ldd	r22, Y+21	; 0x15
    316e:	7e 89       	ldd	r23, Y+22	; 0x16
    3170:	8f 89       	ldd	r24, Y+23	; 0x17
    3172:	98 8d       	ldd	r25, Y+24	; 0x18
    3174:	a7 d2       	rcall	.+1358   	; 0x36c4 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
    317e:	8b 89       	ldd	r24, Y+19	; 0x13
    3180:	9c 89       	ldd	r25, Y+20	; 0x14
    3182:	98 8b       	std	Y+16, r25	; 0x10
    3184:	8f 87       	std	Y+15, r24	; 0x0f
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	98 89       	ldd	r25, Y+16	; 0x10
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <system_init+0xea>
    318e:	98 8b       	std	Y+16, r25	; 0x10
    3190:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	
	gpio_register_pin(JUMPER_PIN,GPIO_DIRECTION_INPUT,TRUE);							//jumper
    3192:	88 e2       	ldi	r24, 0x28	; 40
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	40 e0       	ldi	r20, 0x00	; 0
    3198:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>
	gpio_register_pin(SIDE_PIN,GPIO_DIRECTION_INPUT,TRUE);								//prekidac za stranu
    319c:	89 e2       	ldi	r24, 0x29	; 41
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>

	gpio_register_pin(SENSOR_F_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front left
    31a6:	88 e0       	ldi	r24, 0x08	; 8
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>
	gpio_register_pin(SENSOR_F_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor front right
    31b0:	8a e0       	ldi	r24, 0x0A	; 10
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_L_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back left
    31ba:	8c e0       	ldi	r24, 0x0C	; 12
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>
	gpio_register_pin(SENSOR_B_R_PIN,GPIO_DIRECTION_INPUT,TRUE);						//sensor back right
    31c4:	8e e0       	ldi	r24, 0x0E	; 14
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	0e 94 63 08 	call	0x10c6	; 0x10c6 <gpio_register_pin>
	
	
	DDRG = 0xff;
    31ce:	e3 e3       	ldi	r30, 0x33	; 51
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
    31d4:	80 83       	st	Z, r24
	PORTG = 0x00;
    31d6:	e4 e3       	ldi	r30, 0x34	; 52
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	10 82       	st	Z, r1
	servo_init(50);
    31dc:	82 e3       	ldi	r24, 0x32	; 50
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <servo_init>
	timer_init(1000);
    31e4:	88 ee       	ldi	r24, 0xE8	; 232
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	8d de       	rcall	.-742    	; 0x2f04 <timer_init>
	CAN_Init(1);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	0e 94 1e 07 	call	0xe3c	; 0xe3c <CAN_Init>

	actuators_setup();
    31f0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <actuators_setup>
	
	while(!(gpio_read_pin(JUMPER_PIN)));
    31f4:	88 e2       	ldi	r24, 0x28	; 40
    31f6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <gpio_read_pin>
    31fa:	88 23       	and	r24, r24
    31fc:	d9 f3       	breq	.-10     	; 0x31f4 <system_init+0x154>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	a0 e2       	ldi	r26, 0x20	; 32
    3204:	b1 e4       	ldi	r27, 0x41	; 65
    3206:	8b 87       	std	Y+11, r24	; 0x0b
    3208:	9c 87       	std	Y+12, r25	; 0x0c
    320a:	ad 87       	std	Y+13, r26	; 0x0d
    320c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3210:	7c 85       	ldd	r23, Y+12	; 0x0c
    3212:	8d 85       	ldd	r24, Y+13	; 0x0d
    3214:	9e 85       	ldd	r25, Y+14	; 0x0e
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e4       	ldi	r19, 0x40	; 64
    321a:	4c e1       	ldi	r20, 0x1C	; 28
    321c:	55 e4       	ldi	r21, 0x45	; 69
    321e:	34 d3       	rcall	.+1640   	; 0x3888 <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	8f 83       	std	Y+7, r24	; 0x07
    3226:	98 87       	std	Y+8, r25	; 0x08
    3228:	a9 87       	std	Y+9, r26	; 0x09
    322a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e8       	ldi	r20, 0x80	; 128
    323a:	5f e3       	ldi	r21, 0x3F	; 63
    323c:	d2 d1       	rcall	.+932    	; 0x35e2 <__cmpsf2>
    323e:	88 23       	and	r24, r24
    3240:	2c f4       	brge	.+10     	; 0x324c <system_init+0x1ac>
		__ticks = 1;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9e 83       	std	Y+6, r25	; 0x06
    3248:	8d 83       	std	Y+5, r24	; 0x05
    324a:	3b c0       	rjmp	.+118    	; 0x32c2 <system_init+0x222>
	else if (__tmp > 65535)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	3f ef       	ldi	r19, 0xFF	; 255
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	57 e4       	ldi	r21, 0x47	; 71
    325c:	11 d3       	rcall	.+1570   	; 0x3880 <__gesf2>
    325e:	18 16       	cp	r1, r24
    3260:	3c f5       	brge	.+78     	; 0x32b0 <system_init+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3262:	6b 85       	ldd	r22, Y+11	; 0x0b
    3264:	7c 85       	ldd	r23, Y+12	; 0x0c
    3266:	8d 85       	ldd	r24, Y+13	; 0x0d
    3268:	9e 85       	ldd	r25, Y+14	; 0x0e
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e2       	ldi	r20, 0x20	; 32
    3270:	51 e4       	ldi	r21, 0x41	; 65
    3272:	0a d3       	rcall	.+1556   	; 0x3888 <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	23 d2       	rcall	.+1094   	; 0x36c4 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <system_init+0x206>
    3288:	8a ef       	ldi	r24, 0xFA	; 250
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	8b 83       	std	Y+3, r24	; 0x03
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <system_init+0x1f4>
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <system_init+0x1e8>
    32ae:	13 c0       	rjmp	.+38     	; 0x32d6 <system_init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	05 d2       	rcall	.+1034   	; 0x36c4 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <system_init+0x22e>
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	PORTG = 0xff;
    32d6:	e4 e3       	ldi	r30, 0x34	; 52
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	8f ef       	ldi	r24, 0xFF	; 255
    32dc:	80 83       	st	Z, r24
	system_reset_system_time();
    32de:	b6 de       	rcall	.-660    	; 0x304c <system_reset_system_time>
	system_set_match_started();
    32e0:	c4 de       	rcall	.-632    	; 0x306a <system_set_match_started>
}
    32e2:	6c 96       	adiw	r28, 0x1c	; 28
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    32f4:	1f 92       	push	r1
    32f6:	0f 92       	push	r0
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	0f 92       	push	r0
    32fc:	00 90 5b 00 	lds	r0, 0x005B
    3300:	0f 92       	push	r0
    3302:	11 24       	eor	r1, r1
    3304:	8f 93       	push	r24
    3306:	9f 93       	push	r25
    3308:	af 93       	push	r26
    330a:	bf 93       	push	r27
    330c:	ef 93       	push	r30
    330e:	ff 93       	push	r31
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    3318:	80 91 b0 01 	lds	r24, 0x01B0
    331c:	88 23       	and	r24, r24
    331e:	d9 f0       	breq	.+54     	; 0x3356 <__vector_23+0x62>
	{
		tx0_counter--;
    3320:	80 91 b0 01 	lds	r24, 0x01B0
    3324:	81 50       	subi	r24, 0x01	; 1
    3326:	80 93 b0 01 	sts	0x01B0, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    332a:	a6 ec       	ldi	r26, 0xC6	; 198
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	80 91 b1 01 	lds	r24, 0x01B1
    3332:	88 2f       	mov	r24, r24
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	fc 01       	movw	r30, r24
    3338:	e8 54       	subi	r30, 0x48	; 72
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	80 81       	ld	r24, Z
    333e:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    3340:	80 91 b1 01 	lds	r24, 0x01B1
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	80 93 b1 01 	sts	0x01B1, r24
    334a:	80 91 b1 01 	lds	r24, 0x01B1
    334e:	80 34       	cpi	r24, 0x40	; 64
    3350:	11 f4       	brne	.+4      	; 0x3356 <__vector_23+0x62>
			tx0_rd_index = 0;
    3352:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	ff 91       	pop	r31
    335c:	ef 91       	pop	r30
    335e:	bf 91       	pop	r27
    3360:	af 91       	pop	r26
    3362:	9f 91       	pop	r25
    3364:	8f 91       	pop	r24
    3366:	0f 90       	pop	r0
    3368:	00 92 5b 00 	sts	0x005B, r0
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f 90       	pop	r0
    3372:	1f 90       	pop	r1
    3374:	18 95       	reti

00003376 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    3376:	1f 92       	push	r1
    3378:	0f 92       	push	r0
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	0f 92       	push	r0
    337e:	00 90 5b 00 	lds	r0, 0x005B
    3382:	0f 92       	push	r0
    3384:	11 24       	eor	r1, r1
    3386:	2f 93       	push	r18
    3388:	8f 93       	push	r24
    338a:	9f 93       	push	r25
    338c:	ef 93       	push	r30
    338e:	ff 93       	push	r31
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	0f 92       	push	r0
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    339a:	e0 ec       	ldi	r30, 0xC0	; 192
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 2f       	mov	r24, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	8c 71       	andi	r24, 0x1C	; 28
    33aa:	90 70       	andi	r25, 0x00	; 0
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	d9 f4       	brne	.+54     	; 0x33e6 <__vector_21+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    33b0:	80 91 b2 01 	lds	r24, 0x01B2
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	e6 ec       	ldi	r30, 0xC6	; 198
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	20 81       	ld	r18, Z
    33be:	fc 01       	movw	r30, r24
    33c0:	e8 50       	subi	r30, 0x08	; 8
    33c2:	fe 4f       	sbci	r31, 0xFE	; 254
    33c4:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    33c6:	80 91 b2 01 	lds	r24, 0x01B2
    33ca:	8f 5f       	subi	r24, 0xFF	; 255
    33cc:	80 93 b2 01 	sts	0x01B2, r24
    33d0:	80 91 b2 01 	lds	r24, 0x01B2
    33d4:	80 34       	cpi	r24, 0x40	; 64
    33d6:	11 f4       	brne	.+4      	; 0x33dc <__vector_21+0x66>
			rx0_wr_index = 0;
    33d8:	10 92 b2 01 	sts	0x01B2, r1

		rx0_counter++;
    33dc:	80 91 b3 01 	lds	r24, 0x01B3
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	80 93 b3 01 	sts	0x01B3, r24
	}
}
    33e6:	0f 90       	pop	r0
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	ff 91       	pop	r31
    33ee:	ef 91       	pop	r30
    33f0:	9f 91       	pop	r25
    33f2:	8f 91       	pop	r24
    33f4:	2f 91       	pop	r18
    33f6:	0f 90       	pop	r0
    33f8:	00 92 5b 00 	sts	0x005B, r0
    33fc:	0f 90       	pop	r0
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	0f 90       	pop	r0
    3402:	1f 90       	pop	r1
    3404:	18 95       	reti

00003406 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	0f 92       	push	r0
    340e:	00 90 5b 00 	lds	r0, 0x005B
    3412:	0f 92       	push	r0
    3414:	11 24       	eor	r1, r1
    3416:	8f 93       	push	r24
    3418:	9f 93       	push	r25
    341a:	af 93       	push	r26
    341c:	bf 93       	push	r27
    341e:	ef 93       	push	r30
    3420:	ff 93       	push	r31
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    342a:	80 91 b4 01 	lds	r24, 0x01B4
    342e:	88 23       	and	r24, r24
    3430:	d9 f0       	breq	.+54     	; 0x3468 <__vector_34+0x62>
	{
		tx1_counter--;
    3432:	80 91 b4 01 	lds	r24, 0x01B4
    3436:	81 50       	subi	r24, 0x01	; 1
    3438:	80 93 b4 01 	sts	0x01B4, r24
		UDR1=tx1_buffer[tx1_rd_index];
    343c:	ae ec       	ldi	r26, 0xCE	; 206
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	80 91 b5 01 	lds	r24, 0x01B5
    3444:	88 2f       	mov	r24, r24
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	fc 01       	movw	r30, r24
    344a:	e8 5c       	subi	r30, 0xC8	; 200
    344c:	fd 4f       	sbci	r31, 0xFD	; 253
    344e:	80 81       	ld	r24, Z
    3450:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    3452:	80 91 b5 01 	lds	r24, 0x01B5
    3456:	8f 5f       	subi	r24, 0xFF	; 255
    3458:	80 93 b5 01 	sts	0x01B5, r24
    345c:	80 91 b5 01 	lds	r24, 0x01B5
    3460:	80 34       	cpi	r24, 0x40	; 64
    3462:	11 f4       	brne	.+4      	; 0x3468 <__vector_34+0x62>
			tx1_rd_index = 0;
    3464:	10 92 b5 01 	sts	0x01B5, r1
	}
}
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	ff 91       	pop	r31
    346e:	ef 91       	pop	r30
    3470:	bf 91       	pop	r27
    3472:	af 91       	pop	r26
    3474:	9f 91       	pop	r25
    3476:	8f 91       	pop	r24
    3478:	0f 90       	pop	r0
    347a:	00 92 5b 00 	sts	0x005B, r0
    347e:	0f 90       	pop	r0
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	0f 90       	pop	r0
    3484:	1f 90       	pop	r1
    3486:	18 95       	reti

00003488 <__vector_32>:

ISR(USART1_RX_vect)
{
    3488:	1f 92       	push	r1
    348a:	0f 92       	push	r0
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	0f 92       	push	r0
    3490:	00 90 5b 00 	lds	r0, 0x005B
    3494:	0f 92       	push	r0
    3496:	11 24       	eor	r1, r1
    3498:	2f 93       	push	r18
    349a:	8f 93       	push	r24
    349c:	9f 93       	push	r25
    349e:	ef 93       	push	r30
    34a0:	ff 93       	push	r31
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	0f 92       	push	r0
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    34ac:	e8 ec       	ldi	r30, 0xC8	; 200
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	88 2f       	mov	r24, r24
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	8c 71       	andi	r24, 0x1C	; 28
    34bc:	90 70       	andi	r25, 0x00	; 0
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	d9 f4       	brne	.+54     	; 0x34f8 <__vector_32+0x70>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    34c2:	80 91 b6 01 	lds	r24, 0x01B6
    34c6:	88 2f       	mov	r24, r24
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	ee ec       	ldi	r30, 0xCE	; 206
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	20 81       	ld	r18, Z
    34d0:	fc 01       	movw	r30, r24
    34d2:	e8 58       	subi	r30, 0x88	; 136
    34d4:	fd 4f       	sbci	r31, 0xFD	; 253
    34d6:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    34d8:	80 91 b6 01 	lds	r24, 0x01B6
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	80 93 b6 01 	sts	0x01B6, r24
    34e2:	80 91 b6 01 	lds	r24, 0x01B6
    34e6:	80 34       	cpi	r24, 0x40	; 64
    34e8:	11 f4       	brne	.+4      	; 0x34ee <__vector_32+0x66>
		rx1_wr_index = 0;
    34ea:	10 92 b6 01 	sts	0x01B6, r1

		rx1_counter++;
    34ee:	80 91 b7 01 	lds	r24, 0x01B7
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	80 93 b7 01 	sts	0x01B7, r24
	}
}
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	9f 91       	pop	r25
    3504:	8f 91       	pop	r24
    3506:	2f 91       	pop	r18
    3508:	0f 90       	pop	r0
    350a:	00 92 5b 00 	sts	0x005B, r0
    350e:	0f 90       	pop	r0
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	0f 90       	pop	r0
    3514:	1f 90       	pop	r1
    3516:	18 95       	reti

00003518 <__subsf3>:
    3518:	50 58       	subi	r21, 0x80	; 128

0000351a <__addsf3>:
    351a:	bb 27       	eor	r27, r27
    351c:	aa 27       	eor	r26, r26
    351e:	0e d0       	rcall	.+28     	; 0x353c <__addsf3x>
    3520:	75 c1       	rjmp	.+746    	; 0x380c <__fp_round>
    3522:	66 d1       	rcall	.+716    	; 0x37f0 <__fp_pscA>
    3524:	30 f0       	brcs	.+12     	; 0x3532 <__addsf3+0x18>
    3526:	6b d1       	rcall	.+726    	; 0x37fe <__fp_pscB>
    3528:	20 f0       	brcs	.+8      	; 0x3532 <__addsf3+0x18>
    352a:	31 f4       	brne	.+12     	; 0x3538 <__addsf3+0x1e>
    352c:	9f 3f       	cpi	r25, 0xFF	; 255
    352e:	11 f4       	brne	.+4      	; 0x3534 <__addsf3+0x1a>
    3530:	1e f4       	brtc	.+6      	; 0x3538 <__addsf3+0x1e>
    3532:	5b c1       	rjmp	.+694    	; 0x37ea <__fp_nan>
    3534:	0e f4       	brtc	.+2      	; 0x3538 <__addsf3+0x1e>
    3536:	e0 95       	com	r30
    3538:	e7 fb       	bst	r30, 7
    353a:	51 c1       	rjmp	.+674    	; 0x37de <__fp_inf>

0000353c <__addsf3x>:
    353c:	e9 2f       	mov	r30, r25
    353e:	77 d1       	rcall	.+750    	; 0x382e <__fp_split3>
    3540:	80 f3       	brcs	.-32     	; 0x3522 <__addsf3+0x8>
    3542:	ba 17       	cp	r27, r26
    3544:	62 07       	cpc	r22, r18
    3546:	73 07       	cpc	r23, r19
    3548:	84 07       	cpc	r24, r20
    354a:	95 07       	cpc	r25, r21
    354c:	18 f0       	brcs	.+6      	; 0x3554 <__addsf3x+0x18>
    354e:	71 f4       	brne	.+28     	; 0x356c <__addsf3x+0x30>
    3550:	9e f5       	brtc	.+102    	; 0x35b8 <__addsf3x+0x7c>
    3552:	8f c1       	rjmp	.+798    	; 0x3872 <__fp_zero>
    3554:	0e f4       	brtc	.+2      	; 0x3558 <__addsf3x+0x1c>
    3556:	e0 95       	com	r30
    3558:	0b 2e       	mov	r0, r27
    355a:	ba 2f       	mov	r27, r26
    355c:	a0 2d       	mov	r26, r0
    355e:	0b 01       	movw	r0, r22
    3560:	b9 01       	movw	r22, r18
    3562:	90 01       	movw	r18, r0
    3564:	0c 01       	movw	r0, r24
    3566:	ca 01       	movw	r24, r20
    3568:	a0 01       	movw	r20, r0
    356a:	11 24       	eor	r1, r1
    356c:	ff 27       	eor	r31, r31
    356e:	59 1b       	sub	r21, r25
    3570:	99 f0       	breq	.+38     	; 0x3598 <__addsf3x+0x5c>
    3572:	59 3f       	cpi	r21, 0xF9	; 249
    3574:	50 f4       	brcc	.+20     	; 0x358a <__addsf3x+0x4e>
    3576:	50 3e       	cpi	r21, 0xE0	; 224
    3578:	68 f1       	brcs	.+90     	; 0x35d4 <__addsf3x+0x98>
    357a:	1a 16       	cp	r1, r26
    357c:	f0 40       	sbci	r31, 0x00	; 0
    357e:	a2 2f       	mov	r26, r18
    3580:	23 2f       	mov	r18, r19
    3582:	34 2f       	mov	r19, r20
    3584:	44 27       	eor	r20, r20
    3586:	58 5f       	subi	r21, 0xF8	; 248
    3588:	f3 cf       	rjmp	.-26     	; 0x3570 <__addsf3x+0x34>
    358a:	46 95       	lsr	r20
    358c:	37 95       	ror	r19
    358e:	27 95       	ror	r18
    3590:	a7 95       	ror	r26
    3592:	f0 40       	sbci	r31, 0x00	; 0
    3594:	53 95       	inc	r21
    3596:	c9 f7       	brne	.-14     	; 0x358a <__addsf3x+0x4e>
    3598:	7e f4       	brtc	.+30     	; 0x35b8 <__addsf3x+0x7c>
    359a:	1f 16       	cp	r1, r31
    359c:	ba 0b       	sbc	r27, r26
    359e:	62 0b       	sbc	r22, r18
    35a0:	73 0b       	sbc	r23, r19
    35a2:	84 0b       	sbc	r24, r20
    35a4:	ba f0       	brmi	.+46     	; 0x35d4 <__addsf3x+0x98>
    35a6:	91 50       	subi	r25, 0x01	; 1
    35a8:	a1 f0       	breq	.+40     	; 0x35d2 <__addsf3x+0x96>
    35aa:	ff 0f       	add	r31, r31
    35ac:	bb 1f       	adc	r27, r27
    35ae:	66 1f       	adc	r22, r22
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 1f       	adc	r24, r24
    35b4:	c2 f7       	brpl	.-16     	; 0x35a6 <__addsf3x+0x6a>
    35b6:	0e c0       	rjmp	.+28     	; 0x35d4 <__addsf3x+0x98>
    35b8:	ba 0f       	add	r27, r26
    35ba:	62 1f       	adc	r22, r18
    35bc:	73 1f       	adc	r23, r19
    35be:	84 1f       	adc	r24, r20
    35c0:	48 f4       	brcc	.+18     	; 0x35d4 <__addsf3x+0x98>
    35c2:	87 95       	ror	r24
    35c4:	77 95       	ror	r23
    35c6:	67 95       	ror	r22
    35c8:	b7 95       	ror	r27
    35ca:	f7 95       	ror	r31
    35cc:	9e 3f       	cpi	r25, 0xFE	; 254
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <__addsf3x+0x96>
    35d0:	b3 cf       	rjmp	.-154    	; 0x3538 <__addsf3+0x1e>
    35d2:	93 95       	inc	r25
    35d4:	88 0f       	add	r24, r24
    35d6:	08 f0       	brcs	.+2      	; 0x35da <__addsf3x+0x9e>
    35d8:	99 27       	eor	r25, r25
    35da:	ee 0f       	add	r30, r30
    35dc:	97 95       	ror	r25
    35de:	87 95       	ror	r24
    35e0:	08 95       	ret

000035e2 <__cmpsf2>:
    35e2:	d9 d0       	rcall	.+434    	; 0x3796 <__fp_cmp>
    35e4:	08 f4       	brcc	.+2      	; 0x35e8 <__cmpsf2+0x6>
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	08 95       	ret

000035ea <__divsf3>:
    35ea:	0c d0       	rcall	.+24     	; 0x3604 <__divsf3x>
    35ec:	0f c1       	rjmp	.+542    	; 0x380c <__fp_round>
    35ee:	07 d1       	rcall	.+526    	; 0x37fe <__fp_pscB>
    35f0:	40 f0       	brcs	.+16     	; 0x3602 <__divsf3+0x18>
    35f2:	fe d0       	rcall	.+508    	; 0x37f0 <__fp_pscA>
    35f4:	30 f0       	brcs	.+12     	; 0x3602 <__divsf3+0x18>
    35f6:	21 f4       	brne	.+8      	; 0x3600 <__divsf3+0x16>
    35f8:	5f 3f       	cpi	r21, 0xFF	; 255
    35fa:	19 f0       	breq	.+6      	; 0x3602 <__divsf3+0x18>
    35fc:	f0 c0       	rjmp	.+480    	; 0x37de <__fp_inf>
    35fe:	51 11       	cpse	r21, r1
    3600:	39 c1       	rjmp	.+626    	; 0x3874 <__fp_szero>
    3602:	f3 c0       	rjmp	.+486    	; 0x37ea <__fp_nan>

00003604 <__divsf3x>:
    3604:	14 d1       	rcall	.+552    	; 0x382e <__fp_split3>
    3606:	98 f3       	brcs	.-26     	; 0x35ee <__divsf3+0x4>

00003608 <__divsf3_pse>:
    3608:	99 23       	and	r25, r25
    360a:	c9 f3       	breq	.-14     	; 0x35fe <__divsf3+0x14>
    360c:	55 23       	and	r21, r21
    360e:	b1 f3       	breq	.-20     	; 0x35fc <__divsf3+0x12>
    3610:	95 1b       	sub	r25, r21
    3612:	55 0b       	sbc	r21, r21
    3614:	bb 27       	eor	r27, r27
    3616:	aa 27       	eor	r26, r26
    3618:	62 17       	cp	r22, r18
    361a:	73 07       	cpc	r23, r19
    361c:	84 07       	cpc	r24, r20
    361e:	38 f0       	brcs	.+14     	; 0x362e <__divsf3_pse+0x26>
    3620:	9f 5f       	subi	r25, 0xFF	; 255
    3622:	5f 4f       	sbci	r21, 0xFF	; 255
    3624:	22 0f       	add	r18, r18
    3626:	33 1f       	adc	r19, r19
    3628:	44 1f       	adc	r20, r20
    362a:	aa 1f       	adc	r26, r26
    362c:	a9 f3       	breq	.-22     	; 0x3618 <__divsf3_pse+0x10>
    362e:	33 d0       	rcall	.+102    	; 0x3696 <__divsf3_pse+0x8e>
    3630:	0e 2e       	mov	r0, r30
    3632:	3a f0       	brmi	.+14     	; 0x3642 <__divsf3_pse+0x3a>
    3634:	e0 e8       	ldi	r30, 0x80	; 128
    3636:	30 d0       	rcall	.+96     	; 0x3698 <__divsf3_pse+0x90>
    3638:	91 50       	subi	r25, 0x01	; 1
    363a:	50 40       	sbci	r21, 0x00	; 0
    363c:	e6 95       	lsr	r30
    363e:	00 1c       	adc	r0, r0
    3640:	ca f7       	brpl	.-14     	; 0x3634 <__divsf3_pse+0x2c>
    3642:	29 d0       	rcall	.+82     	; 0x3696 <__divsf3_pse+0x8e>
    3644:	fe 2f       	mov	r31, r30
    3646:	27 d0       	rcall	.+78     	; 0x3696 <__divsf3_pse+0x8e>
    3648:	66 0f       	add	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	bb 1f       	adc	r27, r27
    3650:	26 17       	cp	r18, r22
    3652:	37 07       	cpc	r19, r23
    3654:	48 07       	cpc	r20, r24
    3656:	ab 07       	cpc	r26, r27
    3658:	b0 e8       	ldi	r27, 0x80	; 128
    365a:	09 f0       	breq	.+2      	; 0x365e <__divsf3_pse+0x56>
    365c:	bb 0b       	sbc	r27, r27
    365e:	80 2d       	mov	r24, r0
    3660:	bf 01       	movw	r22, r30
    3662:	ff 27       	eor	r31, r31
    3664:	93 58       	subi	r25, 0x83	; 131
    3666:	5f 4f       	sbci	r21, 0xFF	; 255
    3668:	2a f0       	brmi	.+10     	; 0x3674 <__divsf3_pse+0x6c>
    366a:	9e 3f       	cpi	r25, 0xFE	; 254
    366c:	51 05       	cpc	r21, r1
    366e:	68 f0       	brcs	.+26     	; 0x368a <__divsf3_pse+0x82>
    3670:	b6 c0       	rjmp	.+364    	; 0x37de <__fp_inf>
    3672:	00 c1       	rjmp	.+512    	; 0x3874 <__fp_szero>
    3674:	5f 3f       	cpi	r21, 0xFF	; 255
    3676:	ec f3       	brlt	.-6      	; 0x3672 <__divsf3_pse+0x6a>
    3678:	98 3e       	cpi	r25, 0xE8	; 232
    367a:	dc f3       	brlt	.-10     	; 0x3672 <__divsf3_pse+0x6a>
    367c:	86 95       	lsr	r24
    367e:	77 95       	ror	r23
    3680:	67 95       	ror	r22
    3682:	b7 95       	ror	r27
    3684:	f7 95       	ror	r31
    3686:	9f 5f       	subi	r25, 0xFF	; 255
    3688:	c9 f7       	brne	.-14     	; 0x367c <__divsf3_pse+0x74>
    368a:	88 0f       	add	r24, r24
    368c:	91 1d       	adc	r25, r1
    368e:	96 95       	lsr	r25
    3690:	87 95       	ror	r24
    3692:	97 f9       	bld	r25, 7
    3694:	08 95       	ret
    3696:	e1 e0       	ldi	r30, 0x01	; 1
    3698:	66 0f       	add	r22, r22
    369a:	77 1f       	adc	r23, r23
    369c:	88 1f       	adc	r24, r24
    369e:	bb 1f       	adc	r27, r27
    36a0:	62 17       	cp	r22, r18
    36a2:	73 07       	cpc	r23, r19
    36a4:	84 07       	cpc	r24, r20
    36a6:	ba 07       	cpc	r27, r26
    36a8:	20 f0       	brcs	.+8      	; 0x36b2 <__divsf3_pse+0xaa>
    36aa:	62 1b       	sub	r22, r18
    36ac:	73 0b       	sbc	r23, r19
    36ae:	84 0b       	sbc	r24, r20
    36b0:	ba 0b       	sbc	r27, r26
    36b2:	ee 1f       	adc	r30, r30
    36b4:	88 f7       	brcc	.-30     	; 0x3698 <__divsf3_pse+0x90>
    36b6:	e0 95       	com	r30
    36b8:	08 95       	ret

000036ba <__fixsfsi>:
    36ba:	04 d0       	rcall	.+8      	; 0x36c4 <__fixunssfsi>
    36bc:	68 94       	set
    36be:	b1 11       	cpse	r27, r1
    36c0:	d9 c0       	rjmp	.+434    	; 0x3874 <__fp_szero>
    36c2:	08 95       	ret

000036c4 <__fixunssfsi>:
    36c4:	bc d0       	rcall	.+376    	; 0x383e <__fp_splitA>
    36c6:	88 f0       	brcs	.+34     	; 0x36ea <__fixunssfsi+0x26>
    36c8:	9f 57       	subi	r25, 0x7F	; 127
    36ca:	90 f0       	brcs	.+36     	; 0x36f0 <__fixunssfsi+0x2c>
    36cc:	b9 2f       	mov	r27, r25
    36ce:	99 27       	eor	r25, r25
    36d0:	b7 51       	subi	r27, 0x17	; 23
    36d2:	a0 f0       	brcs	.+40     	; 0x36fc <__fixunssfsi+0x38>
    36d4:	d1 f0       	breq	.+52     	; 0x370a <__fixunssfsi+0x46>
    36d6:	66 0f       	add	r22, r22
    36d8:	77 1f       	adc	r23, r23
    36da:	88 1f       	adc	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	1a f0       	brmi	.+6      	; 0x36e6 <__fixunssfsi+0x22>
    36e0:	ba 95       	dec	r27
    36e2:	c9 f7       	brne	.-14     	; 0x36d6 <__fixunssfsi+0x12>
    36e4:	12 c0       	rjmp	.+36     	; 0x370a <__fixunssfsi+0x46>
    36e6:	b1 30       	cpi	r27, 0x01	; 1
    36e8:	81 f0       	breq	.+32     	; 0x370a <__fixunssfsi+0x46>
    36ea:	c3 d0       	rcall	.+390    	; 0x3872 <__fp_zero>
    36ec:	b1 e0       	ldi	r27, 0x01	; 1
    36ee:	08 95       	ret
    36f0:	c0 c0       	rjmp	.+384    	; 0x3872 <__fp_zero>
    36f2:	67 2f       	mov	r22, r23
    36f4:	78 2f       	mov	r23, r24
    36f6:	88 27       	eor	r24, r24
    36f8:	b8 5f       	subi	r27, 0xF8	; 248
    36fa:	39 f0       	breq	.+14     	; 0x370a <__fixunssfsi+0x46>
    36fc:	b9 3f       	cpi	r27, 0xF9	; 249
    36fe:	cc f3       	brlt	.-14     	; 0x36f2 <__fixunssfsi+0x2e>
    3700:	86 95       	lsr	r24
    3702:	77 95       	ror	r23
    3704:	67 95       	ror	r22
    3706:	b3 95       	inc	r27
    3708:	d9 f7       	brne	.-10     	; 0x3700 <__fixunssfsi+0x3c>
    370a:	3e f4       	brtc	.+14     	; 0x371a <__fixunssfsi+0x56>
    370c:	90 95       	com	r25
    370e:	80 95       	com	r24
    3710:	70 95       	com	r23
    3712:	61 95       	neg	r22
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	8f 4f       	sbci	r24, 0xFF	; 255
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	08 95       	ret

0000371c <__floatunsisf>:
    371c:	e8 94       	clt
    371e:	09 c0       	rjmp	.+18     	; 0x3732 <__floatsisf+0x12>

00003720 <__floatsisf>:
    3720:	97 fb       	bst	r25, 7
    3722:	3e f4       	brtc	.+14     	; 0x3732 <__floatsisf+0x12>
    3724:	90 95       	com	r25
    3726:	80 95       	com	r24
    3728:	70 95       	com	r23
    372a:	61 95       	neg	r22
    372c:	7f 4f       	sbci	r23, 0xFF	; 255
    372e:	8f 4f       	sbci	r24, 0xFF	; 255
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	99 23       	and	r25, r25
    3734:	a9 f0       	breq	.+42     	; 0x3760 <__floatsisf+0x40>
    3736:	f9 2f       	mov	r31, r25
    3738:	96 e9       	ldi	r25, 0x96	; 150
    373a:	bb 27       	eor	r27, r27
    373c:	93 95       	inc	r25
    373e:	f6 95       	lsr	r31
    3740:	87 95       	ror	r24
    3742:	77 95       	ror	r23
    3744:	67 95       	ror	r22
    3746:	b7 95       	ror	r27
    3748:	f1 11       	cpse	r31, r1
    374a:	f8 cf       	rjmp	.-16     	; 0x373c <__floatsisf+0x1c>
    374c:	fa f4       	brpl	.+62     	; 0x378c <__floatsisf+0x6c>
    374e:	bb 0f       	add	r27, r27
    3750:	11 f4       	brne	.+4      	; 0x3756 <__floatsisf+0x36>
    3752:	60 ff       	sbrs	r22, 0
    3754:	1b c0       	rjmp	.+54     	; 0x378c <__floatsisf+0x6c>
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	8f 4f       	sbci	r24, 0xFF	; 255
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	16 c0       	rjmp	.+44     	; 0x378c <__floatsisf+0x6c>
    3760:	88 23       	and	r24, r24
    3762:	11 f0       	breq	.+4      	; 0x3768 <__floatsisf+0x48>
    3764:	96 e9       	ldi	r25, 0x96	; 150
    3766:	11 c0       	rjmp	.+34     	; 0x378a <__floatsisf+0x6a>
    3768:	77 23       	and	r23, r23
    376a:	21 f0       	breq	.+8      	; 0x3774 <__floatsisf+0x54>
    376c:	9e e8       	ldi	r25, 0x8E	; 142
    376e:	87 2f       	mov	r24, r23
    3770:	76 2f       	mov	r23, r22
    3772:	05 c0       	rjmp	.+10     	; 0x377e <__floatsisf+0x5e>
    3774:	66 23       	and	r22, r22
    3776:	71 f0       	breq	.+28     	; 0x3794 <__floatsisf+0x74>
    3778:	96 e8       	ldi	r25, 0x86	; 134
    377a:	86 2f       	mov	r24, r22
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	2a f0       	brmi	.+10     	; 0x378c <__floatsisf+0x6c>
    3782:	9a 95       	dec	r25
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	88 1f       	adc	r24, r24
    378a:	da f7       	brpl	.-10     	; 0x3782 <__floatsisf+0x62>
    378c:	88 0f       	add	r24, r24
    378e:	96 95       	lsr	r25
    3790:	87 95       	ror	r24
    3792:	97 f9       	bld	r25, 7
    3794:	08 95       	ret

00003796 <__fp_cmp>:
    3796:	99 0f       	add	r25, r25
    3798:	00 08       	sbc	r0, r0
    379a:	55 0f       	add	r21, r21
    379c:	aa 0b       	sbc	r26, r26
    379e:	e0 e8       	ldi	r30, 0x80	; 128
    37a0:	fe ef       	ldi	r31, 0xFE	; 254
    37a2:	16 16       	cp	r1, r22
    37a4:	17 06       	cpc	r1, r23
    37a6:	e8 07       	cpc	r30, r24
    37a8:	f9 07       	cpc	r31, r25
    37aa:	c0 f0       	brcs	.+48     	; 0x37dc <__fp_cmp+0x46>
    37ac:	12 16       	cp	r1, r18
    37ae:	13 06       	cpc	r1, r19
    37b0:	e4 07       	cpc	r30, r20
    37b2:	f5 07       	cpc	r31, r21
    37b4:	98 f0       	brcs	.+38     	; 0x37dc <__fp_cmp+0x46>
    37b6:	62 1b       	sub	r22, r18
    37b8:	73 0b       	sbc	r23, r19
    37ba:	84 0b       	sbc	r24, r20
    37bc:	95 0b       	sbc	r25, r21
    37be:	39 f4       	brne	.+14     	; 0x37ce <__fp_cmp+0x38>
    37c0:	0a 26       	eor	r0, r26
    37c2:	61 f0       	breq	.+24     	; 0x37dc <__fp_cmp+0x46>
    37c4:	23 2b       	or	r18, r19
    37c6:	24 2b       	or	r18, r20
    37c8:	25 2b       	or	r18, r21
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <__fp_cmp+0x3e>
    37cc:	08 95       	ret
    37ce:	0a 26       	eor	r0, r26
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <__fp_cmp+0x3e>
    37d2:	a1 40       	sbci	r26, 0x01	; 1
    37d4:	a6 95       	lsr	r26
    37d6:	8f ef       	ldi	r24, 0xFF	; 255
    37d8:	81 1d       	adc	r24, r1
    37da:	81 1d       	adc	r24, r1
    37dc:	08 95       	ret

000037de <__fp_inf>:
    37de:	97 f9       	bld	r25, 7
    37e0:	9f 67       	ori	r25, 0x7F	; 127
    37e2:	80 e8       	ldi	r24, 0x80	; 128
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	08 95       	ret

000037ea <__fp_nan>:
    37ea:	9f ef       	ldi	r25, 0xFF	; 255
    37ec:	80 ec       	ldi	r24, 0xC0	; 192
    37ee:	08 95       	ret

000037f0 <__fp_pscA>:
    37f0:	00 24       	eor	r0, r0
    37f2:	0a 94       	dec	r0
    37f4:	16 16       	cp	r1, r22
    37f6:	17 06       	cpc	r1, r23
    37f8:	18 06       	cpc	r1, r24
    37fa:	09 06       	cpc	r0, r25
    37fc:	08 95       	ret

000037fe <__fp_pscB>:
    37fe:	00 24       	eor	r0, r0
    3800:	0a 94       	dec	r0
    3802:	12 16       	cp	r1, r18
    3804:	13 06       	cpc	r1, r19
    3806:	14 06       	cpc	r1, r20
    3808:	05 06       	cpc	r0, r21
    380a:	08 95       	ret

0000380c <__fp_round>:
    380c:	09 2e       	mov	r0, r25
    380e:	03 94       	inc	r0
    3810:	00 0c       	add	r0, r0
    3812:	11 f4       	brne	.+4      	; 0x3818 <__fp_round+0xc>
    3814:	88 23       	and	r24, r24
    3816:	52 f0       	brmi	.+20     	; 0x382c <__fp_round+0x20>
    3818:	bb 0f       	add	r27, r27
    381a:	40 f4       	brcc	.+16     	; 0x382c <__fp_round+0x20>
    381c:	bf 2b       	or	r27, r31
    381e:	11 f4       	brne	.+4      	; 0x3824 <__fp_round+0x18>
    3820:	60 ff       	sbrs	r22, 0
    3822:	04 c0       	rjmp	.+8      	; 0x382c <__fp_round+0x20>
    3824:	6f 5f       	subi	r22, 0xFF	; 255
    3826:	7f 4f       	sbci	r23, 0xFF	; 255
    3828:	8f 4f       	sbci	r24, 0xFF	; 255
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	08 95       	ret

0000382e <__fp_split3>:
    382e:	57 fd       	sbrc	r21, 7
    3830:	90 58       	subi	r25, 0x80	; 128
    3832:	44 0f       	add	r20, r20
    3834:	55 1f       	adc	r21, r21
    3836:	59 f0       	breq	.+22     	; 0x384e <__fp_splitA+0x10>
    3838:	5f 3f       	cpi	r21, 0xFF	; 255
    383a:	71 f0       	breq	.+28     	; 0x3858 <__fp_splitA+0x1a>
    383c:	47 95       	ror	r20

0000383e <__fp_splitA>:
    383e:	88 0f       	add	r24, r24
    3840:	97 fb       	bst	r25, 7
    3842:	99 1f       	adc	r25, r25
    3844:	61 f0       	breq	.+24     	; 0x385e <__fp_splitA+0x20>
    3846:	9f 3f       	cpi	r25, 0xFF	; 255
    3848:	79 f0       	breq	.+30     	; 0x3868 <__fp_splitA+0x2a>
    384a:	87 95       	ror	r24
    384c:	08 95       	ret
    384e:	12 16       	cp	r1, r18
    3850:	13 06       	cpc	r1, r19
    3852:	14 06       	cpc	r1, r20
    3854:	55 1f       	adc	r21, r21
    3856:	f2 cf       	rjmp	.-28     	; 0x383c <__fp_split3+0xe>
    3858:	46 95       	lsr	r20
    385a:	f1 df       	rcall	.-30     	; 0x383e <__fp_splitA>
    385c:	08 c0       	rjmp	.+16     	; 0x386e <__fp_splitA+0x30>
    385e:	16 16       	cp	r1, r22
    3860:	17 06       	cpc	r1, r23
    3862:	18 06       	cpc	r1, r24
    3864:	99 1f       	adc	r25, r25
    3866:	f1 cf       	rjmp	.-30     	; 0x384a <__fp_splitA+0xc>
    3868:	86 95       	lsr	r24
    386a:	71 05       	cpc	r23, r1
    386c:	61 05       	cpc	r22, r1
    386e:	08 94       	sec
    3870:	08 95       	ret

00003872 <__fp_zero>:
    3872:	e8 94       	clt

00003874 <__fp_szero>:
    3874:	bb 27       	eor	r27, r27
    3876:	66 27       	eor	r22, r22
    3878:	77 27       	eor	r23, r23
    387a:	cb 01       	movw	r24, r22
    387c:	97 f9       	bld	r25, 7
    387e:	08 95       	ret

00003880 <__gesf2>:
    3880:	8a df       	rcall	.-236    	; 0x3796 <__fp_cmp>
    3882:	08 f4       	brcc	.+2      	; 0x3886 <__gesf2+0x6>
    3884:	8f ef       	ldi	r24, 0xFF	; 255
    3886:	08 95       	ret

00003888 <__mulsf3>:
    3888:	0b d0       	rcall	.+22     	; 0x38a0 <__mulsf3x>
    388a:	c0 cf       	rjmp	.-128    	; 0x380c <__fp_round>
    388c:	b1 df       	rcall	.-158    	; 0x37f0 <__fp_pscA>
    388e:	28 f0       	brcs	.+10     	; 0x389a <__mulsf3+0x12>
    3890:	b6 df       	rcall	.-148    	; 0x37fe <__fp_pscB>
    3892:	18 f0       	brcs	.+6      	; 0x389a <__mulsf3+0x12>
    3894:	95 23       	and	r25, r21
    3896:	09 f0       	breq	.+2      	; 0x389a <__mulsf3+0x12>
    3898:	a2 cf       	rjmp	.-188    	; 0x37de <__fp_inf>
    389a:	a7 cf       	rjmp	.-178    	; 0x37ea <__fp_nan>
    389c:	11 24       	eor	r1, r1
    389e:	ea cf       	rjmp	.-44     	; 0x3874 <__fp_szero>

000038a0 <__mulsf3x>:
    38a0:	c6 df       	rcall	.-116    	; 0x382e <__fp_split3>
    38a2:	a0 f3       	brcs	.-24     	; 0x388c <__mulsf3+0x4>

000038a4 <__mulsf3_pse>:
    38a4:	95 9f       	mul	r25, r21
    38a6:	d1 f3       	breq	.-12     	; 0x389c <__mulsf3+0x14>
    38a8:	95 0f       	add	r25, r21
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	55 1f       	adc	r21, r21
    38ae:	62 9f       	mul	r22, r18
    38b0:	f0 01       	movw	r30, r0
    38b2:	72 9f       	mul	r23, r18
    38b4:	bb 27       	eor	r27, r27
    38b6:	f0 0d       	add	r31, r0
    38b8:	b1 1d       	adc	r27, r1
    38ba:	63 9f       	mul	r22, r19
    38bc:	aa 27       	eor	r26, r26
    38be:	f0 0d       	add	r31, r0
    38c0:	b1 1d       	adc	r27, r1
    38c2:	aa 1f       	adc	r26, r26
    38c4:	64 9f       	mul	r22, r20
    38c6:	66 27       	eor	r22, r22
    38c8:	b0 0d       	add	r27, r0
    38ca:	a1 1d       	adc	r26, r1
    38cc:	66 1f       	adc	r22, r22
    38ce:	82 9f       	mul	r24, r18
    38d0:	22 27       	eor	r18, r18
    38d2:	b0 0d       	add	r27, r0
    38d4:	a1 1d       	adc	r26, r1
    38d6:	62 1f       	adc	r22, r18
    38d8:	73 9f       	mul	r23, r19
    38da:	b0 0d       	add	r27, r0
    38dc:	a1 1d       	adc	r26, r1
    38de:	62 1f       	adc	r22, r18
    38e0:	83 9f       	mul	r24, r19
    38e2:	a0 0d       	add	r26, r0
    38e4:	61 1d       	adc	r22, r1
    38e6:	22 1f       	adc	r18, r18
    38e8:	74 9f       	mul	r23, r20
    38ea:	33 27       	eor	r19, r19
    38ec:	a0 0d       	add	r26, r0
    38ee:	61 1d       	adc	r22, r1
    38f0:	23 1f       	adc	r18, r19
    38f2:	84 9f       	mul	r24, r20
    38f4:	60 0d       	add	r22, r0
    38f6:	21 1d       	adc	r18, r1
    38f8:	82 2f       	mov	r24, r18
    38fa:	76 2f       	mov	r23, r22
    38fc:	6a 2f       	mov	r22, r26
    38fe:	11 24       	eor	r1, r1
    3900:	9f 57       	subi	r25, 0x7F	; 127
    3902:	50 40       	sbci	r21, 0x00	; 0
    3904:	8a f0       	brmi	.+34     	; 0x3928 <__mulsf3_pse+0x84>
    3906:	e1 f0       	breq	.+56     	; 0x3940 <__mulsf3_pse+0x9c>
    3908:	88 23       	and	r24, r24
    390a:	4a f0       	brmi	.+18     	; 0x391e <__mulsf3_pse+0x7a>
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	bb 1f       	adc	r27, r27
    3912:	66 1f       	adc	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	91 50       	subi	r25, 0x01	; 1
    391a:	50 40       	sbci	r21, 0x00	; 0
    391c:	a9 f7       	brne	.-22     	; 0x3908 <__mulsf3_pse+0x64>
    391e:	9e 3f       	cpi	r25, 0xFE	; 254
    3920:	51 05       	cpc	r21, r1
    3922:	70 f0       	brcs	.+28     	; 0x3940 <__mulsf3_pse+0x9c>
    3924:	5c cf       	rjmp	.-328    	; 0x37de <__fp_inf>
    3926:	a6 cf       	rjmp	.-180    	; 0x3874 <__fp_szero>
    3928:	5f 3f       	cpi	r21, 0xFF	; 255
    392a:	ec f3       	brlt	.-6      	; 0x3926 <__mulsf3_pse+0x82>
    392c:	98 3e       	cpi	r25, 0xE8	; 232
    392e:	dc f3       	brlt	.-10     	; 0x3926 <__mulsf3_pse+0x82>
    3930:	86 95       	lsr	r24
    3932:	77 95       	ror	r23
    3934:	67 95       	ror	r22
    3936:	b7 95       	ror	r27
    3938:	f7 95       	ror	r31
    393a:	e7 95       	ror	r30
    393c:	9f 5f       	subi	r25, 0xFF	; 255
    393e:	c1 f7       	brne	.-16     	; 0x3930 <__mulsf3_pse+0x8c>
    3940:	fe 2b       	or	r31, r30
    3942:	88 0f       	add	r24, r24
    3944:	91 1d       	adc	r25, r1
    3946:	96 95       	lsr	r25
    3948:	87 95       	ror	r24
    394a:	97 f9       	bld	r25, 7
    394c:	08 95       	ret

0000394e <calloc>:
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	68 9f       	mul	r22, r24
    3958:	80 01       	movw	r16, r0
    395a:	69 9f       	mul	r22, r25
    395c:	10 0d       	add	r17, r0
    395e:	78 9f       	mul	r23, r24
    3960:	10 0d       	add	r17, r0
    3962:	11 24       	eor	r1, r1
    3964:	c8 01       	movw	r24, r16
    3966:	0d d0       	rcall	.+26     	; 0x3982 <malloc>
    3968:	ec 01       	movw	r28, r24
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	21 f0       	breq	.+8      	; 0x3976 <calloc+0x28>
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	a8 01       	movw	r20, r16
    3974:	0b d1       	rcall	.+534    	; 0x3b8c <memset>
    3976:	ce 01       	movw	r24, r28
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	08 95       	ret

00003982 <malloc>:
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	bc 01       	movw	r22, r24
    3988:	82 30       	cpi	r24, 0x02	; 2
    398a:	91 05       	cpc	r25, r1
    398c:	10 f4       	brcc	.+4      	; 0x3992 <malloc+0x10>
    398e:	62 e0       	ldi	r22, 0x02	; 2
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	a0 91 ba 02 	lds	r26, 0x02BA
    3996:	b0 91 bb 02 	lds	r27, 0x02BB
    399a:	ed 01       	movw	r28, r26
    399c:	e0 e0       	ldi	r30, 0x00	; 0
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	21 c0       	rjmp	.+66     	; 0x39e8 <malloc+0x66>
    39a6:	88 81       	ld	r24, Y
    39a8:	99 81       	ldd	r25, Y+1	; 0x01
    39aa:	86 17       	cp	r24, r22
    39ac:	97 07       	cpc	r25, r23
    39ae:	69 f4       	brne	.+26     	; 0x39ca <malloc+0x48>
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	9b 81       	ldd	r25, Y+3	; 0x03
    39b4:	30 97       	sbiw	r30, 0x00	; 0
    39b6:	19 f0       	breq	.+6      	; 0x39be <malloc+0x3c>
    39b8:	93 83       	std	Z+3, r25	; 0x03
    39ba:	82 83       	std	Z+2, r24	; 0x02
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <malloc+0x44>
    39be:	90 93 bb 02 	sts	0x02BB, r25
    39c2:	80 93 ba 02 	sts	0x02BA, r24
    39c6:	fe 01       	movw	r30, r28
    39c8:	34 c0       	rjmp	.+104    	; 0x3a32 <malloc+0xb0>
    39ca:	68 17       	cp	r22, r24
    39cc:	79 07       	cpc	r23, r25
    39ce:	38 f4       	brcc	.+14     	; 0x39de <malloc+0x5c>
    39d0:	41 15       	cp	r20, r1
    39d2:	51 05       	cpc	r21, r1
    39d4:	19 f0       	breq	.+6      	; 0x39dc <malloc+0x5a>
    39d6:	84 17       	cp	r24, r20
    39d8:	95 07       	cpc	r25, r21
    39da:	08 f4       	brcc	.+2      	; 0x39de <malloc+0x5c>
    39dc:	ac 01       	movw	r20, r24
    39de:	fe 01       	movw	r30, r28
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	9c 01       	movw	r18, r24
    39e6:	e9 01       	movw	r28, r18
    39e8:	20 97       	sbiw	r28, 0x00	; 0
    39ea:	e9 f6       	brne	.-70     	; 0x39a6 <malloc+0x24>
    39ec:	41 15       	cp	r20, r1
    39ee:	51 05       	cpc	r21, r1
    39f0:	a9 f1       	breq	.+106    	; 0x3a5c <malloc+0xda>
    39f2:	ca 01       	movw	r24, r20
    39f4:	86 1b       	sub	r24, r22
    39f6:	97 0b       	sbc	r25, r23
    39f8:	04 97       	sbiw	r24, 0x04	; 4
    39fa:	08 f4       	brcc	.+2      	; 0x39fe <malloc+0x7c>
    39fc:	ba 01       	movw	r22, r20
    39fe:	e0 e0       	ldi	r30, 0x00	; 0
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	2a c0       	rjmp	.+84     	; 0x3a58 <malloc+0xd6>
    3a04:	8d 91       	ld	r24, X+
    3a06:	9c 91       	ld	r25, X
    3a08:	11 97       	sbiw	r26, 0x01	; 1
    3a0a:	84 17       	cp	r24, r20
    3a0c:	95 07       	cpc	r25, r21
    3a0e:	f9 f4       	brne	.+62     	; 0x3a4e <malloc+0xcc>
    3a10:	64 17       	cp	r22, r20
    3a12:	75 07       	cpc	r23, r21
    3a14:	81 f4       	brne	.+32     	; 0x3a36 <malloc+0xb4>
    3a16:	12 96       	adiw	r26, 0x02	; 2
    3a18:	8d 91       	ld	r24, X+
    3a1a:	9c 91       	ld	r25, X
    3a1c:	13 97       	sbiw	r26, 0x03	; 3
    3a1e:	30 97       	sbiw	r30, 0x00	; 0
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <malloc+0xa6>
    3a22:	93 83       	std	Z+3, r25	; 0x03
    3a24:	82 83       	std	Z+2, r24	; 0x02
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <malloc+0xae>
    3a28:	90 93 bb 02 	sts	0x02BB, r25
    3a2c:	80 93 ba 02 	sts	0x02BA, r24
    3a30:	fd 01       	movw	r30, r26
    3a32:	32 96       	adiw	r30, 0x02	; 2
    3a34:	4f c0       	rjmp	.+158    	; 0x3ad4 <malloc+0x152>
    3a36:	ca 01       	movw	r24, r20
    3a38:	86 1b       	sub	r24, r22
    3a3a:	97 0b       	sbc	r25, r23
    3a3c:	fd 01       	movw	r30, r26
    3a3e:	e8 0f       	add	r30, r24
    3a40:	f9 1f       	adc	r31, r25
    3a42:	61 93       	st	Z+, r22
    3a44:	71 93       	st	Z+, r23
    3a46:	02 97       	sbiw	r24, 0x02	; 2
    3a48:	8d 93       	st	X+, r24
    3a4a:	9c 93       	st	X, r25
    3a4c:	43 c0       	rjmp	.+134    	; 0x3ad4 <malloc+0x152>
    3a4e:	fd 01       	movw	r30, r26
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	9c 01       	movw	r18, r24
    3a56:	d9 01       	movw	r26, r18
    3a58:	10 97       	sbiw	r26, 0x00	; 0
    3a5a:	a1 f6       	brne	.-88     	; 0x3a04 <malloc+0x82>
    3a5c:	80 91 b8 02 	lds	r24, 0x02B8
    3a60:	90 91 b9 02 	lds	r25, 0x02B9
    3a64:	89 2b       	or	r24, r25
    3a66:	41 f4       	brne	.+16     	; 0x3a78 <malloc+0xf6>
    3a68:	80 91 02 01 	lds	r24, 0x0102
    3a6c:	90 91 03 01 	lds	r25, 0x0103
    3a70:	90 93 b9 02 	sts	0x02B9, r25
    3a74:	80 93 b8 02 	sts	0x02B8, r24
    3a78:	40 91 04 01 	lds	r20, 0x0104
    3a7c:	50 91 05 01 	lds	r21, 0x0105
    3a80:	41 15       	cp	r20, r1
    3a82:	51 05       	cpc	r21, r1
    3a84:	41 f4       	brne	.+16     	; 0x3a96 <malloc+0x114>
    3a86:	4d b7       	in	r20, 0x3d	; 61
    3a88:	5e b7       	in	r21, 0x3e	; 62
    3a8a:	80 91 00 01 	lds	r24, 0x0100
    3a8e:	90 91 01 01 	lds	r25, 0x0101
    3a92:	48 1b       	sub	r20, r24
    3a94:	59 0b       	sbc	r21, r25
    3a96:	20 91 b8 02 	lds	r18, 0x02B8
    3a9a:	30 91 b9 02 	lds	r19, 0x02B9
    3a9e:	24 17       	cp	r18, r20
    3aa0:	35 07       	cpc	r19, r21
    3aa2:	b0 f4       	brcc	.+44     	; 0x3ad0 <malloc+0x14e>
    3aa4:	ca 01       	movw	r24, r20
    3aa6:	82 1b       	sub	r24, r18
    3aa8:	93 0b       	sbc	r25, r19
    3aaa:	86 17       	cp	r24, r22
    3aac:	97 07       	cpc	r25, r23
    3aae:	80 f0       	brcs	.+32     	; 0x3ad0 <malloc+0x14e>
    3ab0:	ab 01       	movw	r20, r22
    3ab2:	4e 5f       	subi	r20, 0xFE	; 254
    3ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab6:	84 17       	cp	r24, r20
    3ab8:	95 07       	cpc	r25, r21
    3aba:	50 f0       	brcs	.+20     	; 0x3ad0 <malloc+0x14e>
    3abc:	42 0f       	add	r20, r18
    3abe:	53 1f       	adc	r21, r19
    3ac0:	50 93 b9 02 	sts	0x02B9, r21
    3ac4:	40 93 b8 02 	sts	0x02B8, r20
    3ac8:	f9 01       	movw	r30, r18
    3aca:	61 93       	st	Z+, r22
    3acc:	71 93       	st	Z+, r23
    3ace:	02 c0       	rjmp	.+4      	; 0x3ad4 <malloc+0x152>
    3ad0:	e0 e0       	ldi	r30, 0x00	; 0
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	cf 01       	movw	r24, r30
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	08 95       	ret

00003adc <free>:
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	00 97       	sbiw	r24, 0x00	; 0
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <free+0xa>
    3ae4:	50 c0       	rjmp	.+160    	; 0x3b86 <free+0xaa>
    3ae6:	ec 01       	movw	r28, r24
    3ae8:	22 97       	sbiw	r28, 0x02	; 2
    3aea:	1b 82       	std	Y+3, r1	; 0x03
    3aec:	1a 82       	std	Y+2, r1	; 0x02
    3aee:	a0 91 ba 02 	lds	r26, 0x02BA
    3af2:	b0 91 bb 02 	lds	r27, 0x02BB
    3af6:	10 97       	sbiw	r26, 0x00	; 0
    3af8:	09 f1       	breq	.+66     	; 0x3b3c <free+0x60>
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	ac 17       	cp	r26, r28
    3b00:	bd 07       	cpc	r27, r29
    3b02:	08 f1       	brcs	.+66     	; 0x3b46 <free+0x6a>
    3b04:	bb 83       	std	Y+3, r27	; 0x03
    3b06:	aa 83       	std	Y+2, r26	; 0x02
    3b08:	fe 01       	movw	r30, r28
    3b0a:	21 91       	ld	r18, Z+
    3b0c:	31 91       	ld	r19, Z+
    3b0e:	e2 0f       	add	r30, r18
    3b10:	f3 1f       	adc	r31, r19
    3b12:	ae 17       	cp	r26, r30
    3b14:	bf 07       	cpc	r27, r31
    3b16:	79 f4       	brne	.+30     	; 0x3b36 <free+0x5a>
    3b18:	8d 91       	ld	r24, X+
    3b1a:	9c 91       	ld	r25, X
    3b1c:	11 97       	sbiw	r26, 0x01	; 1
    3b1e:	28 0f       	add	r18, r24
    3b20:	39 1f       	adc	r19, r25
    3b22:	2e 5f       	subi	r18, 0xFE	; 254
    3b24:	3f 4f       	sbci	r19, 0xFF	; 255
    3b26:	39 83       	std	Y+1, r19	; 0x01
    3b28:	28 83       	st	Y, r18
    3b2a:	12 96       	adiw	r26, 0x02	; 2
    3b2c:	8d 91       	ld	r24, X+
    3b2e:	9c 91       	ld	r25, X
    3b30:	13 97       	sbiw	r26, 0x03	; 3
    3b32:	9b 83       	std	Y+3, r25	; 0x03
    3b34:	8a 83       	std	Y+2, r24	; 0x02
    3b36:	41 15       	cp	r20, r1
    3b38:	51 05       	cpc	r21, r1
    3b3a:	71 f4       	brne	.+28     	; 0x3b58 <free+0x7c>
    3b3c:	d0 93 bb 02 	sts	0x02BB, r29
    3b40:	c0 93 ba 02 	sts	0x02BA, r28
    3b44:	20 c0       	rjmp	.+64     	; 0x3b86 <free+0xaa>
    3b46:	12 96       	adiw	r26, 0x02	; 2
    3b48:	8d 91       	ld	r24, X+
    3b4a:	9c 91       	ld	r25, X
    3b4c:	13 97       	sbiw	r26, 0x03	; 3
    3b4e:	ad 01       	movw	r20, r26
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	11 f0       	breq	.+4      	; 0x3b58 <free+0x7c>
    3b54:	dc 01       	movw	r26, r24
    3b56:	d3 cf       	rjmp	.-90     	; 0x3afe <free+0x22>
    3b58:	fa 01       	movw	r30, r20
    3b5a:	d3 83       	std	Z+3, r29	; 0x03
    3b5c:	c2 83       	std	Z+2, r28	; 0x02
    3b5e:	21 91       	ld	r18, Z+
    3b60:	31 91       	ld	r19, Z+
    3b62:	e2 0f       	add	r30, r18
    3b64:	f3 1f       	adc	r31, r19
    3b66:	ce 17       	cp	r28, r30
    3b68:	df 07       	cpc	r29, r31
    3b6a:	69 f4       	brne	.+26     	; 0x3b86 <free+0xaa>
    3b6c:	88 81       	ld	r24, Y
    3b6e:	99 81       	ldd	r25, Y+1	; 0x01
    3b70:	28 0f       	add	r18, r24
    3b72:	39 1f       	adc	r19, r25
    3b74:	2e 5f       	subi	r18, 0xFE	; 254
    3b76:	3f 4f       	sbci	r19, 0xFF	; 255
    3b78:	fa 01       	movw	r30, r20
    3b7a:	31 83       	std	Z+1, r19	; 0x01
    3b7c:	20 83       	st	Z, r18
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	93 83       	std	Z+3, r25	; 0x03
    3b84:	82 83       	std	Z+2, r24	; 0x02
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	08 95       	ret

00003b8c <memset>:
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <memset+0x6>
    3b90:	6d 93       	st	X+, r22
    3b92:	41 50       	subi	r20, 0x01	; 1
    3b94:	50 40       	sbci	r21, 0x00	; 0
    3b96:	e0 f7       	brcc	.-8      	; 0x3b90 <memset+0x4>
    3b98:	08 95       	ret

00003b9a <_exit>:
    3b9a:	f8 94       	cli

00003b9c <__stop_program>:
    3b9c:	ff cf       	rjmp	.-2      	; 0x3b9c <__stop_program>
